// Generated by DougTheDruid#2784 on Discord
// https://github.com/DougTheDruid
namespace DougsSDKDumper
{
//-----
// Classes
//-----

// Size 0xc0
class CharacterSocketCollisionResult: public None
{
public:
	bool                                                         HasHit;                                            // 0x0(0x1)
	Struct HitResult                                             HitResult;                                         // 0x4(0x80)
	Struct Vector                                                SocketVelocity;                                    // 0x84(0xc)
	Struct Transform                                             SocketTransform;                                   // 0x90(0x30)
};


// Size 0xc
class CharacterSocketCollisionHandle: public None
{
public:
};


// Size 0x58
class ImpactDamageEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	class                                                        DamagerType;                                       // 0x10(0x8)
	Class Actor*                                                 DirectInstigator;                                  // 0x18(0x8)
	Class Actor*                                                 RootInstigator;                                    // 0x20(0x8)
	Struct Vector                                                Location;                                          // 0x28(0xc)
	Struct Vector                                                SurfaceNormal;                                     // 0x34(0xc)
	Struct Vector                                                Velocity;                                          // 0x40(0xc)
	float                                                        DamageAmount;                                      // 0x4c(0x4)
	int                                                          DamageSpread;                                      // 0x50(0x4)
	byte                                                         Reason;                                            // 0x54(0x1)
	bool                                                         DealFriendlyFireDamage;                            // 0x55(0x1)
};


// Size 0x50
class ProjectileAim: public None
{
public:
	Struct Vector                                                AimDirection;                                      // 0x0(0xc)
	Struct Vector                                                AimPosition;                                       // 0xc(0xc)
	Class PrimitiveComponent*                                    AimBase;                                           // 0x18(0x8)
	Struct Transform                                             AimBaseTransform;                                  // 0x20(0x30)
};


// Size 0x8
class RewardId: public None
{
public:
	struct FName                                                 RewardId;                                          // 0x0(0x8)
};


// Size 0x18
class AchievementDefinition: public None
{
public:
	struct FName                                                 DevCenterId;                                       // 0x0(0x8)
	TArray<Struct AchievementCriteria>                           UnlockCriteria;                                    // 0x8(0x10)
};


// Size 0x18
class AchievementCriteria: public None
{
public:
	Struct PlayerStat                                            PlayerStat;                                        // 0x0(0x4)
	byte                                                         Operator;                                          // 0x10(0x1)
};


// Size 0x4
class PlayerStat: public None
{
public:
};


// Size 0x10
class FogBankManagerFogAvoidanceArea: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	float                                                        Radius;                                            // 0xc(0x4)
};


// Size 0xc
class WaterPuzzleWaterLevel: public None
{
public:
	float                                                        WaterLevel;                                        // 0x0(0x4)
	float                                                        FillTransitionTime;                                // 0x4(0x4)
	float                                                        DrainTransitionTime;                               // 0x8(0x4)
};


// Size 0x8
class WaterPuzzleRepData: public None
{
public:
	int                                                          CurrentWaterLevelIndex;                            // 0x0(0x4)
	bool                                                         TransitionDueToReset;                              // 0x4(0x1)
};


// Size 0x10
class AudioEmitterParameters: public None
{
public:
	Class WwiseObjectPoolWrapper*                                LocalEmitterPool;                                  // 0x0(0x8)
	Class WwiseObjectPoolWrapper*                                RemoteEmitterPool;                                 // 0x8(0x8)
};


// Size 0x68
class WeaponProjectileEffectParams: public None
{
public:
	bool                                                         ApplyStun;                                         // 0x0(0x1)
	float                                                        StunDuration;                                      // 0x4(0x4)
	bool                                                         ApplyKnockback;                                    // 0x8(0x1)
	Struct KnockBackInfo                                         KnockbackParams;                                   // 0xc(0x50)
	int                                                          MinimumHitProjectilesForKnockback;                 // 0x5c(0x4)
	float                                                        MaximumKnockbackDistance;                          // 0x60(0x4)
	bool                                                         EnableKnockbackFalloffOverDistance;                // 0x64(0x1)
};


// Size 0x50
class KnockBackInfo: public None
{
public:
	struct FName                                                 FeatureName;                                       // 0x0(0x8)
	float                                                        HorizontalVelocity;                                // 0x8(0x4)
	float                                                        VerticalVelocity;                                  // 0xc(0x4)
	float                                                        MinHorizontalVelocity;                             // 0x10(0x4)
	float                                                        MinVerticalVelocity;                               // 0x14(0x4)
	float                                                        SwimmingVelocity;                                  // 0x18(0x4)
	float                                                        DockedHorizontalVelocity;                          // 0x1c(0x4)
	float                                                        DockedVerticalVelocity;                            // 0x20(0x4)
	bool                                                         UseDockedVelocitiesWhenDocked;                     // 0x24(0x1)
	struct FName                                                 RumbleTag;                                         // 0x28(0x8)
	float                                                        StunDuration;                                      // 0x30(0x4)
	float                                                        AIKnockbackDistance;                               // 0x34(0x4)
	float                                                        AIKnockbackSpeed;                                  // 0x38(0x4)
	float                                                        AIKnockbackAcceleration;                           // 0x3c(0x4)
	byte                                                         AIKnockbackStrengthType;                           // 0x40(0x1)
	bool                                                         UseOverrideLaunchDirection;                        // 0x41(0x1)
	Struct Vector                                                OverrideLaunchDirectionInWorldSpace;               // 0x44(0xc)
};


// Size 0xb8
class WeaponProjectileParams: public None
{
public:
	float                                                        Damage;                                            // 0x0(0x4)
	float                                                        DamageMultiplierAtMaximumRange;                    // 0x4(0x4)
	float                                                        LifeTime;                                          // 0x8(0x4)
	float                                                        TrailFadeOutTime;                                  // 0xc(0x4)
	float                                                        Velocity;                                          // 0x10(0x4)
	float                                                        TimeBeforeApplyingGravity;                         // 0x14(0x4)
	float                                                        DownForceVelocityFractionPerSecond;                // 0x18(0x4)
	float                                                        VelocityDampeningPerSecond;                        // 0x1c(0x4)
	Struct LinearColor                                           Color;                                             // 0x20(0x10)
	class                                                        ProjectileId;                                      // 0x30(0x8)
	byte                                                         HealthChangeReason;                                // 0x38(0x1)
	Struct WeaponProjectileEffectParams                          ProjectileEffects;                                 // 0x3c(0x68)
	int                                                          SuggestedMaxSimulationIterations;                  // 0xa4(0x4)
	float                                                        SuggestedMinTickTimeSecs;                          // 0xa8(0x4)
	float                                                        SuggestedMaxSimulationTimeStep;                    // 0xac(0x4)
	float                                                        HitScanTrailUpdateModifier;                        // 0xb0(0x4)
};


// Size 0x1e0
class ProjectileWeaponParameters: public None
{
public:
	int                                                          AmmoClipSize;                                      // 0x0(0x4)
	int                                                          AmmoCostPerShot;                                   // 0x4(0x4)
	float                                                        EquipDuration;                                     // 0x8(0x4)
	float                                                        IntoAimingDuration;                                // 0xc(0x4)
	float                                                        RecoilDuration;                                    // 0x10(0x4)
	float                                                        ReloadDuration;                                    // 0x14(0x4)
	Struct ProjectileShotParams                                  HipFireProjectileShotParams;                       // 0x18(0x18)
	Struct ProjectileShotParams                                  AimDownSightsProjectileShotParams;                 // 0x30(0x18)
	int                                                          Seed;                                              // 0x48(0x4)
	float                                                        ProjectileDistributionMaxAngle;                    // 0x4c(0x4)
	int                                                          NumberOfProjectiles;                               // 0x50(0x4)
	float                                                        ProjectileMaximumRange;                            // 0x54(0x4)
	float                                                        ProjectileDamage;                                  // 0x58(0x4)
	float                                                        ProjectileDamageMultiplierAtMaximumRange;          // 0x5c(0x4)
	class                                                        DamagerType;                                       // 0x60(0x8)
	class                                                        ProjectileId;                                      // 0x68(0x8)
	Struct WeaponProjectileParams                                AmmoParams;                                        // 0x70(0xb8)
	bool                                                         UsesScope;                                         // 0x128(0x1)
	float                                                        ZoomedRecoilDurationIncrease;                      // 0x12c(0x4)
	float                                                        SecondsUntilZoomStarts;                            // 0x130(0x4)
	float                                                        SecondsUntilPostStarts;                            // 0x134(0x4)
	float                                                        WeaponFiredAINoiseRange;                           // 0x138(0x4)
	float                                                        MaximumRequestPositionDelta;                       // 0x13c(0x4)
	float                                                        MaximumRequestAngleDelta;                          // 0x140(0x4)
	float                                                        TimeoutTolerance;                                  // 0x144(0x4)
	float                                                        AimingMoveSpeedScalar;                             // 0x148(0x4)
	byte                                                         AimSensitivitySettingCategory;                     // 0x14c(0x1)
	float                                                        InAimFOV;                                          // 0x150(0x4)
	float                                                        BlendSpeed;                                        // 0x154(0x4)
	Class WwiseEvent*                                            DryFireSfx;                                        // 0x158(0x8)
	Struct AudioEmitterParameters                                AudioEmitterParameters;                            // 0x160(0x10)
	struct FName                                                 RumbleTag;                                         // 0x170(0x8)
	bool                                                         KnockbackEnabled;                                  // 0x178(0x1)
	Struct KnockBackInfo                                         KnockbackParams;                                   // 0x17c(0x50)
	bool                                                         StunEnabled;                                       // 0x1cc(0x1)
	float                                                        StunDuration;                                      // 0x1d0(0x4)
	Struct Vector                                                TargetingOffset;                                   // 0x1d4(0xc)
};


// Size 0x18
class ProjectileShotParams: public None
{
public:
	int                                                          Seed;                                              // 0x0(0x4)
	float                                                        ProjectileDistributionMaxAngle;                    // 0x4(0x4)
	int                                                          NumberOfProjectiles;                               // 0x8(0x4)
	float                                                        ProjectileMaximumRange;                            // 0xc(0x4)
	float                                                        ProjectileDamage;                                  // 0x10(0x4)
	float                                                        ProjectileDamageMultiplierAtMaximumRange;          // 0x14(0x4)
};


// Size 0x1c
class Projectile: public None
{
public:
	Struct Vector                                                Origin;                                            // 0x0(0xc)
	Struct Vector                                                Direction;                                         // 0xc(0xc)
	float                                                        MaxDistance;                                       // 0x18(0x4)
};


// Size 0x90
class FireBroadcast: public None
{
public:
	Class Actor*                                                 Instigator;                                        // 0x0(0x8)
	TArray<Struct Instigator>                                    HitResults;                                        // 0x8(0x10)
	Struct Vector                                                FirePosition;                                      // 0x18(0xc)
	Struct Vector                                                FireDirection;                                     // 0x24(0xc)
	Struct ProjectileAim                                         ProjectileAim;                                     // 0x30(0x50)
	int                                                          ProjectileSeed;                                    // 0x80(0x4)
};


// Size 0x90
class FireRequest: public None
{
public:
	Class Actor*                                                 Instigator;                                        // 0x0(0x8)
	Struct RemoteProjectileAim                                   RemoteAimData;                                     // 0x10(0x60)
	TArray<Struct RemoteAimData>                                 HitResults;                                        // 0x70(0x10)
	Struct Guid                                                  TelemetryAttackId;                                 // 0x80(0x10)
};


// Size 0x60
class RemoteProjectileAim: public None
{
public:
	Struct ProjectileAim                                         AimData;                                           // 0x0(0x50)
	bool                                                         IsRelativeAim;                                     // 0x50(0x1)
	Struct ProjectileTimeStamp                                   TimeStamp;                                         // 0x58(0x8)
};


// Size 0x8
class ProjectileTimeStamp: public None
{
public:
};


// Size 0x10
class AchievementBlockThenHitAndGetBlockedThenTakeHit: public None
{
public:
	Class AthenaPlayerCharacter*                                 Character;                                         // 0x0(0x8)
	float                                                        TimeWindowInSeconds;                               // 0x8(0x4)
};


// Size 0x20
class AchievementHaveADrinkWithAnotherCrewAtAnOutpost: public None
{
public:
	Class AthenaPlayerCharacter*                                 Character;                                         // 0x0(0x8)
	float                                                        RangeOfCheckInMetres;                              // 0x18(0x4)
	float                                                        DrinkConsumedVolumeThreshold;                      // 0x1c(0x4)
};


// Size 0x10
class AchievementHeavyAttackRivalOffTheirShip: public None
{
public:
	Class AthenaCharacter*                                       Character;                                         // 0x0(0x8)
	float                                                        TimeWindowInSeconds;                               // 0x8(0x4)
};


// Size 0x4
class AchievementKillOpponentFromBehindWithBlunderbuss: public None
{
public:
	float                                                        FacingDirAngleTolerance;                           // 0x0(0x4)
};


// Size 0x8
class AchievementKillOpponentInContest: public None
{
public:
};


// Size 0xc
class SprintConditionsParams: public None
{
public:
	float                                                        ForwardInputVectorTolerance;                       // 0x0(0x4)
	float                                                        MinVelocityForwardDot;                             // 0x4(0x4)
	float                                                        MinVelocityMagnitude;                              // 0x8(0x4)
};


// Size 0x48
class SprintLogicHandler: public None
{
public:
};


// Size 0x18
class CloudTypeNormalizedWeight: public None
{
public:
	Struct LinearColor                                           LodScreenPercentages;                              // 0x0(0x10)
	float                                                        ProbabilityWeight;                                 // 0x10(0x4)
	float                                                        MeshRadius;                                        // 0x14(0x4)
};


// Size 0x30
class CloudTypeDefinition: public None
{
public:
	Class StaticMesh*                                            CloudMesh;                                         // 0x0(0x8)
	Class StaticMesh*                                            CloudFluffyMesh;                                   // 0x8(0x8)
	Struct Vector2D                                              ScaleRange;                                        // 0x10(0x8)
	Struct Vector2D                                              StorminessRange;                                   // 0x18(0x8)
	float                                                        ProbabilityWeight;                                 // 0x20(0x4)
	float                                                        OverlapTolerance;                                  // 0x24(0x4)
	bool                                                         IsStreetCloud;                                     // 0x28(0x1)
	bool                                                         CastsShadow;                                       // 0x29(0x1)
};


// Size 0x30
class RenderedCloudProperties: public None
{
public:
	Struct Vector                                                WorldPosition;                                     // 0x0(0xc)
	float                                                        Fade;                                              // 0xc(0x4)
	float                                                        Storminess;                                        // 0x10(0x4)
	float                                                        RotationYaw;                                       // 0x14(0x4)
	float                                                        StreetRotationFront;                               // 0x18(0x4)
	float                                                        StreetRotationBack;                                // 0x1c(0x4)
	bool                                                         Visible;                                           // 0x20(0x1)
	bool                                                         FluffVisible;                                      // 0x21(0x1)
	bool                                                         IsStreetCloud;                                     // 0x22(0x1)
	bool                                                         UpdatesThisFrame;                                  // 0x23(0x1)
};


// Size 0x24
class TiledCloudProperties: public None
{
public:
	Struct Vector2D                                              TilePosition;                                      // 0x0(0x8)
	int                                                          CloudTypeIndex;                                    // 0x8(0x4)
	float                                                        RelativeRadius;                                    // 0xc(0x4)
	float                                                        Scale;                                             // 0x10(0x4)
	float                                                        PressureThreshold;                                 // 0x14(0x4)
	float                                                        RotationYaw;                                       // 0x18(0x4)
	float                                                        OverlapTolerance;                                  // 0x1c(0x4)
};


// Size 0x70
class CloudVisualParameters: public None
{
public:
	bool                                                         RenderInMainPass;                                  // 0x0(0x1)
	Struct Vector                                                ScalingVector;                                     // 0x4(0xc)
	Struct Vector2D                                              BillboardScale;                                    // 0x10(0x8)
	Struct Vector2D                                              BillboardRandomScale;                              // 0x18(0x8)
	Struct Vector2D                                              BillboardRearCutOff;                               // 0x20(0x8)
	Struct Vector2D                                              BillboardForeCutOff;                               // 0x28(0x8)
	Struct Vector2D                                              BillboardSink;                                     // 0x30(0x8)
	float                                                        BillboardScaleAlphaDependence;                     // 0x38(0x4)
	float                                                        BillboardRotationRate;                             // 0x3c(0x4)
	float                                                        DistanceFadeExponent;                              // 0x40(0x4)
	float                                                        TurbulenceScale;                                   // 0x44(0x4)
	float                                                        TurbulenceStrength;                                // 0x48(0x4)
	float                                                        FluffCullDistance;                                 // 0x4c(0x4)
	Class MaterialInterface*                                     MaterialTemplatePointCloudSolid;                   // 0x50(0x8)
	Class MaterialInterface*                                     MaterialTemplatePointCloudFluffy;                  // 0x58(0x8)
	Class MaterialInterface*                                     MaterialTemplateStreetCloudSolid;                  // 0x60(0x8)
	Class MaterialInterface*                                     MaterialTemplateStreetCloudFluffy;                 // 0x68(0x8)
};


// Size 0x8
class WalkConditionsParams: public None
{
public:
	float                                                        WalkSpeedMultiplier;                               // 0x0(0x4)
	float                                                        WalkStopThreshold;                                 // 0x4(0x4)
};


// Size 0xc
class WalkLogicHandler: public None
{
public:
};


// Size 0x28
class AthenaPlayerCharacterModelSwap: public None
{
public:
	Class SkeletalMesh*                                          FirstPersonMesh;                                   // 0x0(0x8)
	class                                                        FirstPersonAnimSetDataId;                          // 0x8(0x8)
	Class SkeletalMesh*                                          ThirdPersonMesh;                                   // 0x10(0x8)
	class                                                        ThirdPersonAnimSetDataId;                          // 0x18(0x8)
};


// Size 0x28
class Alliance: public None
{
public:
	Struct Guid                                                  AllianceId;                                        // 0x0(0x10)
	TArray<Struct AllianceId>                                    Crews;                                             // 0x10(0x10)
	byte                                                         AllianceIndex;                                     // 0x20(0x1)
};


// Size 0x14
class CrewAllianceJoinStatus: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	byte                                                         AllianceJoinStatus;                                // 0x10(0x1)
	byte                                                         LastAllianceJoinStatus;                            // 0x11(0x1)
};


// Size 0x68
class NPCCustomAnimationBlueprintData: public None
{
public:
	bool                                                         SequenceActive;                                    // 0x0(0x1)
	bool                                                         LoopActive;                                        // 0x1(0x1)
	int                                                          ActiveSequenceIndex;                               // 0x4(0x4)
	bool                                                         IsOneShot;                                         // 0x8(0x1)
	Struct NPCCustomAnimationBlueprintPlayingAnimations          BlueprintPlayingAnimations;                        // 0x10(0x28)
	Struct NPCCustomAnimationBlueprintPlayingMontage             BlueprintPlayingFacialMontages;                    // 0x38(0x28)
	byte                                                         CustomAnimationState;                              // 0x60(0x1)
};


// Size 0x28
class NPCCustomAnimationBlueprintPlayingMontage: public None
{
public:
	Class AnimMontage*                                           OneShot;                                           // 0x0(0x8)
	Class AnimMontage*                                           ContinouousIn;                                     // 0x8(0x8)
	Class AnimMontage*                                           ContinouousLoop_A;                                 // 0x10(0x8)
	Class AnimMontage*                                           ContinouousLoop_B;                                 // 0x18(0x8)
	Class AnimMontage*                                           ContinouousOut;                                    // 0x20(0x8)
};


// Size 0x28
class NPCCustomAnimationBlueprintPlayingAnimations: public None
{
public:
	Class AnimSequenceBase*                                      OneShot;                                           // 0x0(0x8)
	Class AnimSequenceBase*                                      ContinouousIn;                                     // 0x8(0x8)
	Class AnimSequenceBase*                                      ContinouousLoop_A;                                 // 0x10(0x8)
	Class AnimSequenceBase*                                      ContinouousLoop_B;                                 // 0x18(0x8)
	Class AnimSequenceBase*                                      ContinouousOut;                                    // 0x20(0x8)
};


// Size 0x38
class NPCCustomAnimationDataStructure: public None
{
public:
	TArray<Struct NPCOneShotAnimationElement>                    OneShotSequences;                                  // 0x0(0x10)
	TArray<Struct NPCContinuousAnimationElement>                 ContinuousSequences;                               // 0x10(0x10)
	Class NPCHeldObjectData*                                     WieldableCosmeticItemList;                         // 0x20(0x8)
	TArray<Struct NPCInitialSpawnedCosmeticItems>                InitialSpawnedCosmeticItems;                       // 0x28(0x10)
};


// Size 0x10
class NPCInitialSpawnedCosmeticItems: public None
{
public:
	class                                                        CosmeticItemObject;                                // 0x0(0x8)
	struct FName                                                 AttachSocketName;                                  // 0x8(0x8)
};


// Size 0x38
class NPCContinuousAnimationElement: public None
{
public:
	struct FName                                                 SequenceName;                                      // 0x0(0x8)
	Struct NPCAnimationContinuousCycle                           ContinuousSequence;                                // 0x8(0x30)
};


// Size 0x30
class NPCAnimationContinuousCycle: public None
{
public:
	Struct NPCAnimationSequence                                  In;                                                // 0x0(0x10)
	TArray<Struct In>                                            Loop;                                              // 0x10(0x10)
	Struct NPCAnimationSequence                                  Out;                                               // 0x20(0x10)
};


// Size 0x10
class NPCAnimationSequence: public None
{
public:
	Class AnimSequenceBase*                                      AnimationSequence;                                 // 0x0(0x8)
	Class AnimMontage*                                           FacialAdditive;                                    // 0x8(0x8)
};


// Size 0x18
class NPCOneShotAnimationElement: public None
{
public:
	struct FName                                                 SequenceName;                                      // 0x0(0x8)
	TArray<Struct SequenceName>                                  OneShotSequence;                                   // 0x8(0x10)
};


// Size 0x20
class AnimNotifyWwiseObserver: public None
{
public:
	Class WwiseEvent*                                            OnEventPosted;                                     // 0x0(0x8)
	bool                                                         PreventPlayingPostedEvent;                         // 0x8(0x1)
	TArray<class AdditionalEventsToTrigger*>                     AdditionalEventsToTrigger;                         // 0x10(0x10)
};


// Size 0x14
class JoinedCrew: public None
{
public:
};


// Size 0x58
class AthenaAnimationCustomSkeletonAnimationBlueprintData: public None
{
public:
	bool                                                         SequenceActive;                                    // 0x0(0x1)
	bool                                                         LoopActive;                                        // 0x1(0x1)
	int                                                          ActiveSequenceIndex;                               // 0x4(0x4)
	bool                                                         IsOneShot;                                         // 0x8(0x1)
	Struct SkeletonCustomAnimationBlueprintPlayingAnimations     BlueprintPlayingAnimations;                        // 0x10(0x38)
	Class NPCHeldObjectData*                                     WieldableCosmeticItemList;                         // 0x48(0x8)
	byte                                                         CustomAnimationState;                              // 0x50(0x1)
	float                                                        BlendTime;                                         // 0x54(0x4)
};


// Size 0x38
class SkeletonCustomAnimationBlueprintPlayingAnimations: public None
{
public:
	Class AnimSequence*                                          OneShot;                                           // 0x0(0x8)
	Class AnimSequence*                                          ContinuousIn;                                      // 0x8(0x8)
	Class AnimSequence*                                          ContinuousLoop_A;                                  // 0x10(0x8)
	Class AnimSequence*                                          ContinuousLoop_B;                                  // 0x18(0x8)
	Class AnimSequence*                                          ContinuousOut;                                     // 0x20(0x8)
	TArray<class AlternateContinuousOuts*>                       AlternateContinuousOuts;                           // 0x28(0x10)
};


// Size 0x38
class SkeletonCustomAnimationDataStructure: public None
{
public:
	TArray<Struct OneShotAnimationElement>                       OneShotSequences;                                  // 0x0(0x10)
	TArray<Struct ContinuousAnimationElement>                    ContinuousSequences;                               // 0x10(0x10)
	Class NPCHeldObjectData*                                     WieldableCosmeticItemList;                         // 0x20(0x8)
	TArray<class AudioEvents*>                                   AudioEvents;                                       // 0x28(0x10)
};


// Size 0x58
class ContinuousAnimationElement: public None
{
public:
	struct FName                                                 SequenceName;                                      // 0x0(0x8)
	Struct AnimationContinuousCycle                              ContinuousSequence;                                // 0x8(0x48)
	float                                                        BlendTime;                                         // 0x50(0x4)
};


// Size 0x48
class AnimationContinuousCycle: public None
{
public:
	Class AnimSequence*                                          In;                                                // 0x0(0x8)
	float                                                        InEffectTime;                                      // 0x8(0x4)
	TArray<class Loop*>                                          Loop;                                              // 0x10(0x10)
	Class BlendSpace1D*                                          LoopHitReact;                                      // 0x20(0x8)
	Class AnimSequence*                                          Out;                                               // 0x28(0x8)
	TArray<class OutAlternates*>                                 OutAlternates;                                     // 0x30(0x10)
	float                                                        OutUndockTime;                                     // 0x40(0x4)
};


// Size 0x20
class OneShotAnimationElement: public None
{
public:
	struct FName                                                 SequenceName;                                      // 0x0(0x8)
	TArray<class OneShotSequence*>                               OneShotSequence;                                   // 0x8(0x10)
	float                                                        EffectTime;                                        // 0x18(0x4)
	float                                                        BlendTime;                                         // 0x1c(0x4)
};


// Size 0x68
class AthenaAnimationLocomotion: public None
{
public:
	Struct Vector                                                CharacterVelocity;                                 // 0x0(0xc)
	float                                                        WantedMovementSpeed;                               // 0xc(0x4)
	float                                                        HalfWantedMovementSpeed;                           // 0x10(0x4)
	bool                                                         CharacterMoving;                                   // 0x14(0x1)
	bool                                                         RunStopWanted;                                     // 0x15(0x1)
	float                                                        TurnRate;                                          // 0x18(0x4)
	float                                                        CurrentYaw;                                        // 0x1c(0x4)
	float                                                        CurrentDirection;                                  // 0x20(0x4)
	bool                                                         TurningActive;                                     // 0x24(0x1)
	bool                                                         TurningLeft;                                       // 0x25(0x1)
	bool                                                         IsSwimming;                                        // 0x26(0x1)
	bool                                                         IsUnderwaterSwimming;                              // 0x27(0x1)
	float                                                        BlendedTurnRate;                                   // 0x28(0x4)
	float                                                        MinimumMoveSpeedToTriggerRunStop;                  // 0x2c(0x4)
	float                                                        InterpSpeed;                                       // 0x30(0x4)
	float                                                        TurnRateToDisableTurns;                            // 0x34(0x4)
	float                                                        TurningAnimationExplicitTime;                      // 0x38(0x4)
	float                                                        FixedBlendedTurnRateForAI;                         // 0x3c(0x4)
	bool                                                         IsInAITurn;                                        // 0x40(0x1)
	Class AthenaAnimationInstance*                               CachedOwner;                                       // 0x58(0x8)
};


// Size 0x340
class AthenaAnimationFishing: public None
{
public:
	bool                                                         AnimationOverride;                                 // 0x0(0x1)
	Class Actor*                                                 FishingRodActor;                                   // 0x320(0x8)
	Class Actor*                                                 FishingFloat;                                      // 0x328(0x8)
	Class AthenaAnimationInstance*                               OwningAnimationInstance;                           // 0x330(0x8)
};


// Size 0x34
class AthenaAnimationFishingParams: public None
{
public:
	byte                                                         FishingState;                                      // 0x0(0x1)
	bool                                                         InFishing;                                         // 0x1(0x1)
	Struct Vector2D                                              RodBend;                                           // 0x4(0x8)
	float                                                        ReelSpeed;                                         // 0xc(0x4)
	bool                                                         CastFailed;                                        // 0x10(0x1)
	bool                                                         IsFishHookedAndVisible;                            // 0x11(0x1)
	Struct Vector2D                                              PlayerInputForce;                                  // 0x14(0x8)
	float                                                        TensionShake;                                      // 0x1c(0x4)
	float                                                        LineSnapShake;                                     // 0x20(0x4)
	bool                                                         IKIsActive;                                        // 0x24(0x1)
	float                                                        IKBlendInSpeed;                                    // 0x28(0x4)
	float                                                        IKBlendIOutSpeed;                                  // 0x2c(0x4)
	bool                                                         IsComedyItem;                                      // 0x30(0x1)
	byte                                                         FishingJIPState;                                   // 0x31(0x1)
};


// Size 0x10
class AthenaAnimationIdleVariantChange: public None
{
public:
	float                                                        CurrentTime;                                       // 0x0(0x4)
	float                                                        TriggerTime;                                       // 0x4(0x4)
	int                                                          VariantID;                                         // 0x8(0x4)
	bool                                                         VariantCompleted;                                  // 0xc(0x1)
};


// Size 0xc8
class AthenaAnimationRowboatParams: public None
{
public:
	bool                                                         InLeftArmRow;                                      // 0x0(0x1)
	bool                                                         InLeftArmRecover;                                  // 0x1(0x1)
	bool                                                         InRightArmRow;                                     // 0x2(0x1)
	bool                                                         InRightArmRecover;                                 // 0x3(0x1)
	float                                                        LeftArmForce;                                      // 0x4(0x4)
	float                                                        LeftArmRecover;                                    // 0x8(0x4)
	float                                                        RightArmForce;                                     // 0xc(0x4)
	float                                                        RightArmRecover;                                   // 0x10(0x4)
	byte                                                         Braking;                                           // 0x14(0x1)
	bool                                                         BrakingLeftOrBoth;                                 // 0x15(0x1)
	bool                                                         BrakingRightOrBoth;                                // 0x16(0x1)
	int                                                          Direction;                                         // 0x18(0x4)
	bool                                                         PlayIdle;                                          // 0x1c(0x1)
	bool                                                         LeftArmInactive;                                   // 0x1d(0x1)
	bool                                                         RightArmInactive;                                  // 0x1e(0x1)
	Struct Vector                                                CameraAdjustment;                                  // 0x20(0xc)
	bool                                                         IsSeated;                                          // 0x2c(0x1)
	Struct AthenaAnimationRowboatAnimationsFirstPerson           RowBoatAnimationsFirstPerson;                      // 0x30(0x30)
	Struct AthenaAnimationRowboatAnimationsThirdPerson           RowBoatAnimationsThirdPerson;                      // 0x60(0x50)
	Struct AthenaAnimationRowboatAnimationsPassenger             RowBoatAnimationsPassenger;                        // 0xb0(0x18)
};


// Size 0x18
class AthenaAnimationRowboatAnimationsPassenger: public None
{
public:
	Class AnimSequence*                                          PassengerIntoSitting;                              // 0x0(0x8)
	Class AnimSequence*                                          PassengerSittingIdle;                              // 0x8(0x8)
	Class AnimSequence*                                          PassengerStand;                                    // 0x10(0x8)
};


// Size 0x50
class AthenaAnimationRowboatAnimationsThirdPerson: public None
{
public:
	Class AnimSequence*                                          SitDown;                                           // 0x0(0x8)
	Class AnimSequence*                                          Stand;                                             // 0x8(0x8)
	Class AnimSequence*                                          Idle;                                              // 0x10(0x8)
	Class BlendSpace1D*                                          Row;                                               // 0x18(0x8)
	Class BlendSpace1D*                                          Recover;                                           // 0x20(0x8)
	Class BlendSpace1D*                                          IntoRow;                                           // 0x28(0x8)
	Class BlendSpace1D*                                          IntoRowBrake;                                      // 0x30(0x8)
	Class BlendSpace1D*                                          BrakeRow;                                          // 0x38(0x8)
	Class BlendSpace1D*                                          BrakeRecover;                                      // 0x40(0x8)
	Class BlendSpace1D*                                          BrakeIdle;                                         // 0x48(0x8)
};


// Size 0x30
class AthenaAnimationRowboatAnimationsFirstPerson: public None
{
public:
	Class AnimSequence*                                          SitDown;                                           // 0x0(0x8)
	Class AnimSequence*                                          Stand;                                             // 0x8(0x8)
	Class AnimSequence*                                          Idle;                                              // 0x10(0x8)
	Class AnimSequence*                                          Row;                                               // 0x18(0x8)
	Class AnimSequence*                                          Recover;                                           // 0x20(0x8)
	Class AnimSequence*                                          Brake;                                             // 0x28(0x8)
};


// Size 0xc0
class AthenaAnimationRowing: public None
{
public:
	Class Actor*                                                 ControlledObject;                                  // 0x0(0x8)
	Class Actor*                                                 CachedPlayerCharacter;                             // 0x8(0x8)
	class                                                        CosmeticOarClass;                                  // 0x10(0x8)
};


// Size 0x510
class AthenaAnimationWieldedItemStateMachine: public None
{
public:
	byte                                                         CurrentState;                                      // 0x0(0x1)
	byte                                                         PreviousState;                                     // 0x1(0x1)
	bool                                                         ExpectingTransition;                               // 0x2(0x1)
	class                                                        ContinuousUseInputId;                              // 0x8(0x8)
	class                                                        OutOfContinuousUseInputId;                         // 0x10(0x8)
	class                                                        OneShotUseInputId;                                 // 0x18(0x8)
	bool                                                         OneShotIsAlternate;                                // 0x20(0x1)
	bool                                                         ContinuousIsAlternate;                             // 0x21(0x1)
	byte                                                         OneShotAnimationVariant;                           // 0x22(0x1)
	bool                                                         IdleIsAlternate;                                   // 0x23(0x1)
	bool                                                         UsePrimaryContinuousAnimations;                    // 0x24(0x1)
	bool                                                         UsePrimaryContinuousOutOfAnimations;               // 0x25(0x1)
	bool                                                         UsePrimaryOneShotAnimations;                       // 0x26(0x1)
	Class AnimSequence*                                          LastValidAnimSequence;                             // 0x50(0x8)
	Class BlendSpace1D*                                          LastValidBlendspace;                               // 0x58(0x8)
	Class Actor*                                                 PreviousWieldedItem;                               // 0x60(0x8)
	bool                                                         DuplicateTransition;                               // 0x68(0x1)
	struct FName                                                 WieldSockets;                                      // 0x6c(0x8)
};


// Size 0x28
class AthenaAnimationSkeletonCurseAnimations: public None
{
public:
	Class AnimSequence*                                          SkeletonDrunk;                                     // 0x0(0x8)
	Class AnimSequence*                                          SkeletonDance;                                     // 0x8(0x8)
	Class AnimSequence*                                          SkeletonSleepInto;                                 // 0x10(0x8)
	Class AnimSequence*                                          SkeletonSleepLoop;                                 // 0x18(0x8)
	Class AnimSequence*                                          SkeletonSleepOut;                                  // 0x20(0x8)
};


// Size 0x8
class AthenaAnimationSkeletonScream: public None
{
public:
	Class AnimSequence*                                          SkeletonScream;                                    // 0x0(0x8)
};


// Size 0x38
class AthenaAnimationSkeletonFleeInGraph: public None
{
public:
	Class AnimSequence*                                          TurnLeft;                                          // 0x0(0x8)
	Class AnimSequence*                                          TurnRight;                                         // 0x8(0x8)
	Class BlendSpace*                                            LocomotionBase;                                    // 0x10(0x8)
	Class BlendSpace*                                            LocomotionVariant;                                 // 0x18(0x8)
	TArray<class LocomotionVariantSelection*>                    LocomotionVariantSelection;                        // 0x20(0x10)
	int                                                          PrecentageChanceOfVariantOccuring;                 // 0x30(0x4)
};


// Size 0x40
class AthenaAnimationSkeletonFlee: public None
{
public:
	class                                                        UseWithObject;                                     // 0x0(0x8)
	TArray<class FleeTurnLeft*>                                  FleeTurnLeft;                                      // 0x8(0x10)
	TArray<class FleeTurnRight*>                                 FleeTurnRight;                                     // 0x18(0x10)
	Class BlendSpace*                                            FleeLocomotionBase;                                // 0x28(0x8)
	TArray<class FleeLocomotionVariants*>                        FleeLocomotionVariants;                            // 0x30(0x10)
};


// Size 0x38
class AthenaAnimationSkeletonEmoteActionParams: public None
{
public:
	TArray<Struct AthenaAnimationSkeletonEmoteActionAnimations>  AllLoadedAIEmoteActionAnimations;                  // 0x0(0x10)
	byte                                                         CurrentEmoteActionState;                           // 0x10(0x1)
	Class AnimSequence*                                          TauntAnimation;                                    // 0x18(0x8)
	Class AnimSequence*                                          CheerAnimation;                                    // 0x20(0x8)
	Class AnimSequence*                                          TauntAnimationB;                                   // 0x28(0x8)
	Class AnimSequence*                                          CheerAnimationB;                                   // 0x30(0x8)
};


// Size 0x28
class AthenaAnimationSkeletonEmoteActionAnimations: public None
{
public:
	class                                                        UseWithObject;                                     // 0x0(0x8)
	TArray<class Taunt*>                                         Taunt;                                             // 0x8(0x10)
	TArray<class Cheer*>                                         Cheer;                                             // 0x18(0x10)
};


// Size 0x60
class AthenaAnimationSkeletonShipCaptainParams: public None
{
public:
	Struct AthenaAnimationSkeletonShipCaptainAnimations          AllSkeletonShipCaptainAnimations;                  // 0x0(0x48)
	Class AnimSequence*                                          ShipCaptainIdleCycleA;                             // 0x48(0x8)
	Class AnimSequence*                                          ShipCaptainIdleCycleB;                             // 0x50(0x8)
	byte                                                         DockedAnimationState;                              // 0x58(0x1)
};


// Size 0x48
class AthenaAnimationSkeletonShipCaptainAnimations: public None
{
public:
	Class AnimSequence*                                          EnterDockedPose;                                   // 0x0(0x8)
	TArray<class DockedIdles*>                                   DockedIdles;                                       // 0x8(0x10)
	Class AnimSequence*                                          ExitDockedPose;                                    // 0x18(0x8)
	Class AnimSequence*                                          Taunt;                                             // 0x20(0x8)
	Class AnimSequence*                                          RamInto;                                           // 0x28(0x8)
	Class AnimSequence*                                          RamCycle;                                          // 0x30(0x8)
	Class AnimSequence*                                          RamImpact;                                         // 0x38(0x8)
	Class AnimSequence*                                          RamOutOf;                                          // 0x40(0x8)
};


// Size 0x38
class AthenaAnimationSkeletonSensingParams: public None
{
public:
	TArray<Struct AthenaAnimationSkeletonSensingAnimations>      AllLoadedAISensingAnimations;                      // 0x0(0x10)
	byte                                                         CurrentSensingState;                               // 0x10(0x1)
	Class AnimSequence*                                          InitialReactionAnimation;                          // 0x18(0x8)
	Class BlendSpace1D*                                          SearchingAnimation;                                // 0x20(0x8)
	Class AnimSequence*                                          AlertingOthersAnimation;                           // 0x28(0x8)
	Class BlendSpace1D*                                          PursuitAnimation;                                  // 0x30(0x8)
};


// Size 0x28
class AthenaAnimationSkeletonSensingAnimations: public None
{
public:
	class                                                        UseWithObject;                                     // 0x0(0x8)
	Class AnimSequence*                                          InitialReaction;                                   // 0x8(0x8)
	Class BlendSpace1D*                                          Searching;                                         // 0x10(0x8)
	Class AnimSequence*                                          AlertingOthers;                                    // 0x18(0x8)
	Class BlendSpace1D*                                          Pursuit;                                           // 0x20(0x8)
};


// Size 0x2e8
class AthenaAnimationAI: public None
{
public:
	bool                                                         SpawnAnimationActive;                              // 0x0(0x1)
	bool                                                         SpawnAnimationReadyToBegin;                        // 0x1(0x1)
	Class AnimSequence*                                          AISpawn;                                           // 0x8(0x8)
	Class AnimSequence*                                          AIDespawn;                                         // 0x10(0x8)
	float                                                        AIAnimationSpawnTime;                              // 0x18(0x4)
	bool                                                         AISpawnOnLand;                                     // 0x1c(0x1)
	bool                                                         AIFleeActive;                                      // 0x1d(0x1)
	Struct AthenaAnimationSkeletonSensingParams                  AISensing;                                         // 0x20(0x38)
	Struct AthenaAnimationSkeletonEmoteActionParams              AIEmoteActions;                                    // 0x58(0x38)
	Struct AthenaAnimationSkeletonShipCaptainParams              SkeletonShipCaptainParams;                         // 0x90(0x60)
};


// Size 0x30
class AthenaAnimationAIKnockback: public None
{
public:
	Struct AthenaAnimationSkeletonKnockbackLocomotionStrength    KnockbackAnimations;                               // 0x0(0x20)
	byte                                                         AIKnockbackDirection;                              // 0x20(0x1)
	bool                                                         KnockbackActive;                                   // 0x24(0x1)
	Class AnimSequence*                                          KnockbackAnimToUse;                                // 0x28(0x8)
};


// Size 0x20
class AthenaAnimationSkeletonKnockbackLocomotionStrength: public None
{
public:
	Struct AthenaAnimationSkeletonKnockbackLocomotion            LowStrength;                                       // 0x0(0x10)
	Struct AthenaAnimationSkeletonKnockbackLocomotion            HighStrength;                                      // 0x10(0x10)
};


// Size 0x10
class AthenaAnimationSkeletonKnockbackLocomotion: public None
{
public:
	Class AnimSequence*                                          Forwards;                                          // 0x0(0x8)
	Class AnimSequence*                                          Backwards;                                         // 0x8(0x8)
};


// Size 0x58
class AthenaAnimationFootPlanting: public None
{
public:
	Struct CollisionResponseContainer                            OverrideRaycast;                                   // 0x8(0x20)
	float                                                        HipHeight;                                         // 0x28(0x4)
	float                                                        HipPullStrength;                                   // 0x2c(0x4)
	float                                                        FloorContactDownDistance;                          // 0x30(0x4)
	float                                                        RelativePlantDownDistance;                         // 0x34(0x4)
	float                                                        FloorContactToRangeStart;                          // 0x38(0x4)
	float                                                        FloorContactToRangeEnd;                            // 0x3c(0x4)
	float                                                        RelativePlantToRangeStart;                         // 0x40(0x4)
	float                                                        RelativePlantToRangeEnd;                           // 0x44(0x4)
	float                                                        IKLegStretch;                                      // 0x48(0x4)
	float                                                        SlopeAngle;                                        // 0x4c(0x4)
	bool                                                         Active;                                            // 0x50(0x1)
	bool                                                         FeetContact;                                       // 0x51(0x1)
};


// Size 0x8
class AthenaAnimationStunData: public None
{
public:
	byte                                                         StunAnimType;                                      // 0x0(0x1)
	bool                                                         IsCursedVariant;                                   // 0x4(0x1)
};


// Size 0x28
class AthenaAnimationHarpoonLauncherAnimData: public None
{
public:
	TArray<class Idle*>                                          Idle;                                              // 0x0(0x10)
	Class BlendSpace1D*                                          FireInto;                                          // 0x10(0x8)
	Class BlendSpace1D*                                          FireOutOf;                                         // 0x18(0x8)
	Class BlendSpace1D*                                          FireAction;                                        // 0x20(0x8)
};


// Size 0xf8
class AthenaAnimationMountedWeapon: public None
{
public:
	bool                                                         IsFiring;                                          // 0x0(0x1)
	float                                                        Pitch;                                             // 0x4(0x4)
	float                                                        Yaw;                                               // 0x8(0x4)
	Class Actor*                                                 ControlledObject;                                  // 0x10(0x8)
};


// Size 0x38
class AssetDelayLoadEntry: public None
{
public:
	Struct FString                                               Comment;                                           // 0x0(0x10)
	byte                                                         LoadAtPhase;                                       // 0x10(0x1)
	byte                                                         Persistence;                                       // 0x11(0x1)
	bool                                                         LoadForClient;                                     // 0x12(0x1)
	bool                                                         LoadForServer;                                     // 0x13(0x1)
	TArray<Struct LoadForServer>                                 AssetsToLoad;                                      // 0x18(0x10)
	TArray<AssetClass AssetsToLoad>                              BlueprintsToLoad;                                  // 0x28(0x10)
};


// Size 0x10
class RequestedLoopAnims: public None
{
public:
	struct FName                                                 RequestedLoopingAnimName;                          // 0x0(0x8)
	int                                                          RequestedOutOfAnimIndex;                           // 0x8(0x4)
	int                                                          AnimationAssetRequired;                            // 0xc(0x4)
};


// Size 0xc8
class VoyageParticipantViewContainer: public None
{
public:
	Struct VoyageParticipantView                                 State;                                             // 0x0(0xc8)
};


// Size 0xc8
class VoyageParticipantView: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	Struct Guid                                                  Id;                                                // 0x38(0x10)
	int                                                          ChapterIndex;                                      // 0x48(0x4)
	int                                                          ChapterCount;                                      // 0x4c(0x4)
	int                                                          ActiveQuestCount;                                  // 0x50(0x4)
	byte                                                         History;                                           // 0x54(0x1)
	class                                                        Company;                                           // 0x58(0x8)
	bool                                                         IsEmergent;                                        // 0x60(0x1)
	bool                                                         IsTale;                                            // 0x61(0x1)
	byte                                                         EmergentSource;                                    // 0x62(0x1)
	Struct ViewVoyageBanners                                     ViewVoyageBanners;                                 // 0x63(0x2)
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x65(0x1)
	int                                                          Rank;                                              // 0x68(0x4)
	Struct NetActorPtr                                           PlayerStateOfDiscoverer;                           // 0x6c(0x14)
	bool                                                         IsDiscovererMe;                                    // 0x80(0x1)
	struct FName                                                 ChestRarity;                                       // 0x84(0x8)
	bool                                                         PlayAudio;                                         // 0x8c(0x1)
	int                                                          ChestDiscoveredId;                                 // 0x90(0x4)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x98(0x8)
	int                                                          CollectCratesPopUpId;                              // 0xa0(0x4)
	TArray<Struct CollectCratesPopUpId>                          VoyageCompletionStats;                             // 0xa8(0x10)
	TArray<Struct VoyageCompletionStats>                         ReapersMarkCompletionStats;                        // 0xb8(0x10)
};


// Size 0x2
class ViewVoyageBanners: public None
{
public:
	byte                                                         ShowIntroBanners;                                  // 0x0(0x1)
	byte                                                         ShowOutroBanners;                                  // 0x1(0x1)
};


// Size 0x9c
class AthenaCharacterSwimParams: public None
{
public:
	float                                                        EnterSwimmingDepth;                                // 0x0(0x4)
	float                                                        ExitSwimmingDepth;                                 // 0x4(0x4)
	float                                                        FloatHeight;                                       // 0x8(0x4)
	float                                                        ThirdPersonMeshOffset;                             // 0xc(0x4)
	float                                                        ThirdPersonMeshAdjustTime;                         // 0x10(0x4)
	float                                                        FullGravityHeight;                                 // 0x14(0x4)
	float                                                        SurfaceSwimDepth;                                  // 0x18(0x4)
	float                                                        SurfaceSwimExitDepth;                              // 0x1c(0x4)
	float                                                        SubmergedBuoyancyDepth;                            // 0x20(0x4)
	float                                                        ZeroDragDepth;                                     // 0x24(0x4)
	float                                                        MaxBuoyancyAcceleration;                           // 0x28(0x4)
	float                                                        SubmergedBuoyancyAcceleration;                     // 0x2c(0x4)
	float                                                        SubmergedBuoyancyTime;                             // 0x30(0x4)
	float                                                        DragFactor;                                        // 0x34(0x4)
	float                                                        MaxDragAcceleration;                               // 0x38(0x4)
	float                                                        MinPushDownRoofAngle;                              // 0x3c(0x4)
	float                                                        MinPushDownRoofZ;                                  // 0x40(0x4)
	float                                                        MinCorrectionVelForSurfaceSwim;                    // 0x44(0x4)
	float                                                        SurfaceVelBlendTime;                               // 0x48(0x4)
	float                                                        UnderwaterSwimmingEntryPitch;                      // 0x4c(0x4)
	float                                                        UnderwaterSwimmingEntryAccel;                      // 0x50(0x4)
	float                                                        UnderwaterSwimDepth;                               // 0x54(0x4)
	float                                                        UnderwaterSwimmingDragSpeed;                       // 0x58(0x4)
	float                                                        UnderwaterSwimmingSpeed;                           // 0x5c(0x4)
	float                                                        PitchBlendOffRate;                                 // 0x60(0x4)
	float                                                        MaxSwimDepth;                                      // 0x64(0x4)
	float                                                        MaxSwimDepthBuoyancy;                              // 0x68(0x4)
	float                                                        MaxSwimDepthBuoyancyRange;                         // 0x6c(0x4)
	float                                                        MaxSwimDepthDragFactor;                            // 0x70(0x4)
	float                                                        CharacterCentreOffset;                             // 0x74(0x4)
	byte                                                         WaterDepthTraceQueryType;                          // 0x78(0x1)
	Struct AthenaCharacterSwimSpeed                              SurfaceSwimSpeeds;                                 // 0x7c(0xc)
	Struct AthenaCharacterSwimSpeed                              UnderwaterSwimSpeeds;                              // 0x88(0xc)
	float                                                        SurfaceSwimmingDepthWhenEnteredWater;              // 0x94(0x4)
};


// Size 0xc
class AthenaCharacterSwimSpeed: public None
{
public:
	float                                                        SprintSpdAmp;                                      // 0x0(0x4)
	float                                                        SprintAccelAmp;                                    // 0x4(0x4)
	float                                                        TurnSpeedScalar;                                   // 0x8(0x4)
};


// Size 0x10
class AthenaCharacterDodgeParams: public None
{
public:
	float                                                        DodgeCooldown;                                     // 0x0(0x4)
	float                                                        DodgeForce;                                        // 0x4(0x4)
	float                                                        GroundLaunchAngle;                                 // 0x8(0x4)
	bool                                                         DodgePerpendicularToGround;                        // 0xc(0x1)
	bool                                                         Disabled;                                          // 0xd(0x1)
};


// Size 0x8
class NetPositionErrorTolerance: public None
{
public:
	float                                                        ZDistance;                                         // 0x0(0x4)
	float                                                        XYDistance;                                        // 0x4(0x4)
};


// Size 0x48
class AthenaAnimationOverrideEntry: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	Struct StringAssetReference                                  MeshFirstPerson;                                   // 0x8(0x10)
	Struct StringAssetReference                                  MeshThirdPerson;                                   // 0x18(0x10)
	Struct StringAssetReference                                  AnimationDataStore;                                // 0x28(0x10)
	class                                                        ALKFirstPerson;                                    // 0x38(0x8)
	class                                                        ALKThirdPerson;                                    // 0x40(0x8)
};


// Size 0x18
class FeatureToggledLevel: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	Struct StringAssetReference                                  Level;                                             // 0x8(0x10)
};


// Size 0x18
class FeatureToggledLevels: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	TArray<Struct Feature>                                       Levels;                                            // 0x8(0x10)
};


// Size 0x20
class PlayModeLevelArray: public None
{
public:
	TArray<Struct FirstInteractableTelemetryEvent>               PlayModeLevels;                                    // 0x0(0x10)
	TArray<Struct SubModeLevel>                                  SubModes;                                          // 0x10(0x10)
};


// Size 0x20
class SubModeLevel: public None
{
public:
	Struct FString                                               SubMode;                                           // 0x0(0x10)
	Struct StringAssetReference                                  Level;                                             // 0x10(0x10)
};


// Size 0x18
class FirstInteractableTelemetryEvent: public None
{
public:
	float                                                        StartTime;                                         // 0x0(0x4)
	float                                                        FirstSpinnerShownTime;                             // 0x4(0x4)
	float                                                        StartEntryLevelLoadTime;                           // 0x8(0x4)
	float                                                        StartLegalSplashTime;                              // 0xc(0x4)
	float                                                        EndLegalSplashTime;                                // 0x10(0x4)
	float                                                        FirstInteractableTime;                             // 0x14(0x4)
};


// Size 0x28
class LoadingTelemetryEvent: public None
{
public:
	Struct FString                                               LoadingEvent;                                      // 0x0(0x10)
	Struct FString                                               MapName;                                           // 0x10(0x10)
	float                                                        StartTime;                                         // 0x20(0x4)
	float                                                        EndTime;                                           // 0x24(0x4)
};


// Size 0xd8
class StorageContainerRefresher: public None
{
public:
};


// Size 0x18
class OnlineAthenaGameModeConfigurationSettings: public None
{
public:
	Struct Timespan                                              PreLoginEntitlementQueryTimeout;                   // 0x0(0x8)
	Struct Timespan                                              PreLoginPirateValidationTimeout;                   // 0x8(0x8)
	bool                                                         ConfigAllowCrossWorld;                             // 0x10(0x1)
};


// Size 0xc
class ServerLifetimeConfigurationSettings: public None
{
public:
	float                                                        ServerTimeToLiveSeconds;                           // 0x0(0x4)
	float                                                        HeartbeatFrequencySeconds;                         // 0x4(0x4)
	float                                                        MaxTimeToAcceptShutdownRequestSeconds;             // 0x8(0x4)
};


// Size 0x14
class ServerTelemetryConfigurationSettings: public None
{
public:
	float                                                        PlayerHeartbeatInterval;                           // 0x0(0x4)
	float                                                        PlayerHeartbeatAggregatePositionInterval;          // 0x4(0x4)
	bool                                                         TelemetryEnabled_ItemEquip;                        // 0x8(0x1)
	bool                                                         TelemetryEnabled_ItemUsageEnd;                     // 0x9(0x1)
	bool                                                         TelemetryEnabled_ItemUsageStart;                   // 0xa(0x1)
	bool                                                         TelemetryEnabled_ObjectUsageEnd;                   // 0xb(0x1)
	bool                                                         TelemetryEnabled_ObjectUsageStart;                 // 0xc(0x1)
	bool                                                         TelemetryEnabled_PlayerAction;                     // 0xd(0x1)
	bool                                                         TelemetryEnabled_PlayerChangedLoadout;             // 0xe(0x1)
	bool                                                         TelemetryEnabled_PlayerChangedShipLoadout;         // 0xf(0x1)
	bool                                                         TelemetryEnabled_PlayerHeartbeat;                  // 0x10(0x1)
	bool                                                         TelemetryEnabled_PlayerPerformedEmote;             // 0x11(0x1)
};


// Size 0x20
class DebugReplicatedAbilityData: public None
{
public:
	Struct AIAbilityDebugReplicatedIntervals                     AbilityIntervals;                                  // 0x0(0xc)
	class                                                        TypeClass;                                         // 0x10(0x8)
	bool                                                         AbilityInRange;                                    // 0x18(0x1)
	bool                                                         AbilityDebugBlocked;                               // 0x19(0x1)
	bool                                                         UseTimerBetween;                                   // 0x1a(0x1)
	bool                                                         UseDamageBetween;                                  // 0x1b(0x1)
	byte                                                         DamageIntervalBlockMode;                           // 0x1c(0x1)
};


// Size 0x14
class AthenaAICharacterParams: public None
{
public:
	float                                                        MissFiringHeightOffset;                            // 0x0(0x4)
	float                                                        MissFiringTargetInFrontOffset;                     // 0x4(0x4)
	float                                                        MinMissFiringTargetInFrontOffset;                  // 0x8(0x4)
	float                                                        MaxMissFiringTargetInFrontOffset;                  // 0xc(0x4)
	float                                                        BufferTimeWhenChangingItems;                       // 0x10(0x4)
};


// Size 0x18
class MakeFriendsEmoteParams: public None
{
public:
	TArray<Name None>                                            TriggerEmoteNames;                                 // 0x0(0x10)
	float                                                        TriggerDistanceThreshold;                          // 0x10(0x4)
};


// Size 0x8
class CharacterSocketCollisionServiceParams: public None
{
public:
	float                                                        MaxCharacterDistanceSqr;                           // 0x0(0x4)
	int                                                          MaxSockets;                                        // 0x4(0x4)
};


// Size 0x28
class MermaidRespawnConfig: public None
{
public:
	float                                                        ScorePenaltyForEachMeterAwayFromShipwreck;         // 0x0(0x4)
	float                                                        MinRespawnLocDistanceFromSunkShip;                 // 0x4(0x4)
	float                                                        MinScorePenaltyForEnemyShipProximity;              // 0x8(0x4)
	float                                                        MaxScorePenaltyForEnemyShipProximity;              // 0xc(0x4)
	float                                                        MaxDistanceFromEnemyShipToApplyPenalty;            // 0x10(0x4)
	float                                                        MinScorePenaltyForAlliedShipProximity;             // 0x14(0x4)
	float                                                        MaxScorePenaltyForAlliedShipProximity;             // 0x18(0x4)
	float                                                        MaxDistanceFromAlliedShipToApplyPenalty;           // 0x1c(0x4)
	float                                                        MaxDistanceFromIslandWeHaveMapForToApplyPenalty;   // 0x20(0x4)
	float                                                        ScorePenaltyForIslandsWeHaveMapFor;                // 0x24(0x4)
};


// Size 0x38
class DigSurfaceTypeParams: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
	Struct DigEventFxParams                                      EnterGroundFx;                                     // 0x8(0x18)
	Struct DigEventFxParams                                      LeaveGroundFx;                                     // 0x20(0x18)
};


// Size 0x18
class DigEventFxParams: public None
{
public:
	Class Object*                                                Particles;                                         // 0x0(0x8)
	bool                                                         bAttachParticlesToShovel;                          // 0x8(0x1)
	Class ForceFeedbackEffect*                                   Rumble;                                            // 0x10(0x8)
};


// Size 0x18
class SurfaceDigHole: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
	class                                                        DigHoleClass;                                      // 0x8(0x8)
	float                                                        DigAINoiseRange;                                   // 0x10(0x4)
};


// Size 0x60
class SharedShovelParams: public None
{
public:
	Struct ShovelSurfaceDigType                                  DigSurfaceDigType;                                 // 0x0(0x10)
	byte                                                         SandSurfaceType;                                   // 0x10(0x1)
	byte                                                         WetSandSurfaceType;                                // 0x11(0x1)
	float                                                        MaxHeightDifferenceToNotBeConsideredWetSand;       // 0x14(0x4)
	Struct Vector                                                DigPosOffsetFromPlayerPos;                         // 0x18(0xc)
	float                                                        SurfaceTypeRaycastLength;                          // 0x24(0x4)
	float                                                        MaxSurfaceAngleForDig;                             // 0x28(0x4)
	float                                                        InitialSphereCastRadiusForSuccessfulDig;           // 0x2c(0x4)
	byte                                                         ItemProxyCollisionChannel;                         // 0x30(0x1)
	float                                                        SphereRadiusForItemProxySweep;                     // 0x34(0x4)
	float                                                        RequiredObstacleFreeRadiusForSuccessfulDig;        // 0x38(0x4)
	float                                                        ObstacleCheckStartOffsetZFromSphereTestPos;        // 0x3c(0x4)
	int                                                          NumSamplesForBlockingSurfacesTest;                 // 0x40(0x4)
	float                                                        MaxWaterDepthToStartSuccessfulDig;                 // 0x44(0x4)
	byte                                                         HitTestTraceChannel;                               // 0x48(0x1)
	float                                                        MinPlanarTestRadius;                               // 0x4c(0x4)
	int                                                          NumSamplesForPlanarityTest;                        // 0x50(0x4)
	float                                                        MaxBumpinessForPlanarityTestInCm;                  // 0x54(0x4)
	float                                                        AssumedPlayerWaistHeight;                          // 0x58(0x4)
	bool                                                         bDrawDebug;                                        // 0x5c(0x1)
};


// Size 0x10
class ShovelSurfaceDigType: public None
{
public:
	TArray<Struct SurfaceDigType>                                SurfaceDigType;                                    // 0x0(0x10)
};


// Size 0x2
class SurfaceDigType: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
	byte                                                         DigType;                                           // 0x1(0x1)
};


// Size 0x60
class CrewServiceParams: public None
{
public:
	float                                                        MinSafeDistanceToShip;                             // 0x0(0x4)
	float                                                        SpawnDistAroundSunkenShip;                         // 0x4(0x4)
	TArray<Int >                                                 VotesRequiredForSendToBrig;                        // 0x8(0x10)
	TArray<Int >                                                 VotesRequiredForReleaseFromBrig;                   // 0x18(0x10)
	TArray<Int >                                                 VotesRequiredForScuttleShip;                       // 0x28(0x10)
	TArray<Int >                                                 VotesRequiredForChangeMatchmakingVisibility;       // 0x38(0x10)
	TArray<Int >                                                 VotesRequiredForArenaRivalVote;                    // 0x48(0x10)
	float                                                        BrigMinReleaseTime;                                // 0x58(0x4)
	float                                                        BrigServerTimeToRememberPastCrewMates;             // 0x5c(0x4)
};


// Size 0x88
class MermaidServiceParams: public None
{
public:
	float                                                        LocallyActiveMermaidCheckInterval;                 // 0x0(0x4)
	float                                                        PlayerAbandonedCheckInterval;                      // 0x4(0x4)
	float                                                        MinDestroyDistancePlayerToMermaidIfPlayerNearEnemyShip; // 0x8(0x4)
	float                                                        MinDestroyDistancePlayerToMermaidIfPlayerNearIsland; // 0xc(0x4)
	float                                                        MinDestroyDistancePlayerToMermaidIfPlayerNotNearIsland; // 0x10(0x4)
	float                                                        MaxDistFromCoastForPlayerToCountAsNearIsland;      // 0x14(0x4)
	float                                                        MaxDistFromCoastForShipToCountAsNearIsland;        // 0x18(0x4)
	float                                                        MinPlayerToShipDistForPlayerToQualifyAsAbandoned;  // 0x1c(0x4)
	float                                                        MinPlayerToShipDistForPlayerToBeClearedOfAbandonedStatus; // 0x20(0x4)
	float                                                        MinPlayerToEnemyShipDistForPlayerToQualifyForStealthSpawns; // 0x24(0x4)
	float                                                        MinPlayerToWatercraftDistForPlayerToQualifyAsAbandoned; // 0x28(0x4)
	float                                                        MinDistFromAnyMermaidForPlayerToBeAbandonedIfPlayerNotNearIslan; // 0x2c(0x4)
	float                                                        MinDistFromAnyMermaidForPlayerToBeAbandonedIfPlayerNearIsland; // 0x30(0x4)
	int                                                          MaxNumberOfConcurrentMermaids;                     // 0x34(0x4)
	float                                                        MinLifeTimeOfMermaidBeforeCanBeCulledInPopulationCheck; // 0x38(0x4)
	float                                                        SpawnDistAroundSaviourMermaid;                     // 0x3c(0x4)
	Struct MermaidServiceMermaidSpawnParams                      SpawnParams;                                       // 0x40(0x48)
};


// Size 0x48
class MermaidServiceMermaidSpawnParams: public None
{
public:
	float                                                        MinDistFromSpawnOrigin;                            // 0x0(0x4)
	float                                                        MinDistFromSpawnOriginForDestroyedShip;            // 0x4(0x4)
	float                                                        MaxDistFromSpawnOriginBeforeGivingUp;              // 0x8(0x4)
	float                                                        DistIncrementPerFailedSpawnCircle;                 // 0xc(0x4)
	int                                                          NumSamplesInSpawnCircle;                           // 0x10(0x4)
	float                                                        SpawnCastStartZ;                                   // 0x14(0x4)
	float                                                        MinSpawnDepth;                                     // 0x18(0x4)
	float                                                        SpawnHalfConeAngleRestrictIfSpawningForPlayer;     // 0x1c(0x4)
	byte                                                         HitTestTraceChannel;                               // 0x20(0x1)
	float                                                        AssumedMermaidRadius;                              // 0x24(0x4)
	float                                                        MinDistanceOfFinalSpawnPosToAnyActiveMermaid;      // 0x28(0x4)
	float                                                        MinDistanceOfFinalSpawnPosToAnyActiveMermaidWhenNearEnemyShip; // 0x2c(0x4)
	float                                                        MinDistFromEdgeOfWorld;                            // 0x30(0x4)
	float                                                        MinAngularStepSize;                                // 0x34(0x4)
	float                                                        MaxAngularStepSize;                                // 0x38(0x4)
	float                                                        MinDistanceIncrementPerFail;                       // 0x3c(0x4)
	float                                                        MaxDistanceIncrementPerFail;                       // 0x40(0x4)
	float                                                        AdditionalDistanceFromOriginMultiplierPerMeter;    // 0x44(0x4)
};


// Size 0xc
class PlayerModerationParams: public None
{
public:
	float                                                        PlayerReportableDistance;                          // 0x0(0x4)
	float                                                        PlayerReportableTimeBetweenChecksInSeconds;        // 0x4(0x4)
	float                                                        RemovePlayerFromListAfterSeconds;                  // 0x8(0x4)
};


// Size 0x18
class ToggleableAIShipServiceDataAssetFileLocation: public None
{
public:
	struct FName                                                 ToggleName;                                        // 0x0(0x8)
	Struct StringAssetReference                                  Location;                                          // 0x8(0x10)
};


// Size 0x60
class FirstPersonAnimaticActionStateConstructionInfo: public None
{
public:
	Struct FirstPersonAnimaticSettings                           FirstPersonAnimaticSettings;                       // 0x30(0x2c)
};


// Size 0x2c
class FirstPersonAnimaticSettings: public None
{
public:
	Struct Vector                                                CutsceneFirstPersonMeshOffset;                     // 0x0(0xc)
	Struct Rotator                                               CutsceneRotation;                                  // 0xc(0xc)
	float                                                        TimeBeforeFadeIn;                                  // 0x18(0x4)
	float                                                        FadeInDuration;                                    // 0x1c(0x4)
	float                                                        FirstPersonMeshBoundsScale;                        // 0x20(0x4)
	struct FName                                                 FirstPersonAnimName;                               // 0x24(0x8)
};


// Size 0x58
class CharacterAnimaticSettings: public None
{
public:
};


// Size 0x10
class UIReturnedToPlayerEvent: public None
{
public:
};


// Size 0x10
class NetworkEventStruct: public None
{
public:
};


// Size 0x1
class EventPlayerControllerHitNotification: public None
{
public:
	bool                                                         PlaySfx;                                           // 0x0(0x1)
};


// Size 0x10
class EventClientPlayerSpawnedBeforeGameState: public None
{
public:
};


// Size 0x10
class EventPlayerTeleportToSafety: public None
{
public:
};


// Size 0x8
class EventPlayerControllerUnPossess: public None
{
public:
	Class Pawn*                                                  Pawn;                                              // 0x0(0x8)
};


// Size 0x8
class EventPlayerControllerPossess: public None
{
public:
	Class Pawn*                                                  Pawn;                                              // 0x0(0x8)
};


// Size 0x8
class EventAthenaPlayerControllerEndingPlay: public None
{
public:
	Class AthenaPlayerController*                                Controller;                                        // 0x0(0x8)
};


// Size 0x8
class EventAthenaPlayerControllerBegunPlay: public None
{
public:
	Class AthenaPlayerController*                                Controller;                                        // 0x0(0x8)
};


// Size 0x8
class EventPlayerControllerDestroyedCalled: public None
{
public:
	Class AthenaPlayerController*                                Controller;                                        // 0x0(0x8)
};


// Size 0x30
class QuestTypeParams: public None
{
public:
	Class WeightedTreasureChestDescAsset*                        ReferencedRewards;                                 // 0x8(0x8)
	TArray<Struct WeightedTreasureChestDesc>                     Rewards;                                           // 0x10(0x10)
	Class WeightedItemDescSpawnDataAsset*                        RewardsAsset;                                      // 0x20(0x8)
	class                                                        OverrideTreasureMapItemDesc;                       // 0x28(0x8)
};


// Size 0x18
class WeightedTreasureChestDesc: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	struct FName                                                 Feature;                                           // 0x4(0x8)
	class                                                        Desc;                                              // 0x10(0x8)
};


// Size 0x148
class BountyQuestParams: public None
{
public:
	Class AIBountySpawner*                                       Spawner;                                           // 0x30(0x8)
	Struct BountyQuestRandomSpawnGeneratorParams                 BountyQuestRandomSpawnGeneratorParams;             // 0x38(0x110)
};


// Size 0x110
class BountyQuestRandomSpawnGeneratorParams: public None
{
public:
	Struct WeightedProbabilityRange                              NumberOfWaves;                                     // 0x0(0x20)
	Struct WeightedProbabilityRange                              NumberOfWaveGroups;                                // 0x20(0x20)
	int                                                          MinNumberOfAIPerWave;                              // 0x40(0x4)
	int                                                          MaxNumberOfAIPerWave;                              // 0x44(0x4)
	int                                                          MinFormsPerEncounter;                              // 0x48(0x4)
	int                                                          MaxFormsPerEncounter;                              // 0x4c(0x4)
	int                                                          MinVarietiesPerEncounter;                          // 0x50(0x4)
	int                                                          MaxVarietiesPerEncounter;                          // 0x54(0x4)
	float                                                        MinTimeBetweenSpawns;                              // 0x58(0x4)
	float                                                        MaxTimeBetweenSpawns;                              // 0x5c(0x4)
	float                                                        MinTimeBetweenWaves;                               // 0x60(0x4)
	float                                                        MaxTimeBetweenWaves;                               // 0x64(0x4)
	Struct WeightedProbabilityRange                              WavesPerRelocate;                                  // 0x68(0x20)
	Struct WeightedProbabilityRange                              WaveSplitChance;                                   // 0x88(0x20)
	TArray<Float >                                               WaveSuicideTime;                                   // 0xa8(0x10)
	float                                                        WaveSuicideMinDist;                                // 0xb8(0x4)
	Class AIEncounterGenerationRecipeRankOrderList*              Recipes;                                           // 0xc0(0x8)
	Struct WeightedProbabilityRange                              NumberOfTargetsTotal;                              // 0xc8(0x20)
	Struct WeightedProbabilityRange                              NumberOfTargetsWhichAreCaptains;                   // 0xe8(0x20)
	float                                                        ChanceOfAllTargetsBeingOnTheLastWave;              // 0x108(0x4)
	float                                                        ChanceOfFemale;                                    // 0x10c(0x4)
};


// Size 0x88
class CargoRunQuestParams: public None
{
public:
	Struct WeightedProbabilityRange                              NumberOfRequiredItems;                             // 0x30(0x20)
	Struct WeightedProbabilityRangeOfRanges                      TimeLimitInMinutes;                                // 0x50(0x30)
	Class CargoRunQuestRandomRequiredItemsDataAsset*             RequiredItemsDataAsset;                            // 0x80(0x8)
};


// Size 0x1
class EmergantVoyageQuestParams: public None
{
public:
};


// Size 0x1
class MatchmakingQuestParams: public None
{
public:
};


// Size 0x1
class RewardQuestParams: public None
{
public:
};


// Size 0x1
class StagingQuestParams: public None
{
public:
};


// Size 0x18
class MerchantQuestCategoryGroup: public None
{
public:
	struct FName                                                 GroupName;                                         // 0x0(0x8)
	TArray<Struct MerchantQuestRandomRequiredItemsEntry>         RequiredItemEntries;                               // 0x8(0x10)
};


// Size 0x10
class MerchantQuestRandomRequiredItemsEntry: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	int                                                          MaxNum;                                            // 0x4(0x4)
	Class MerchantQuestItemData*                                 RequiredItem;                                      // 0x8(0x8)
};


// Size 0x1c
class MerchantQuestCategoryGroupBounds: public None
{
public:
	struct FName                                                 GroupName;                                         // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
	int                                                          MinNum;                                            // 0xc(0x4)
	int                                                          MaxNum;                                            // 0x10(0x4)
	int                                                          MinDifferent;                                      // 0x14(0x4)
	int                                                          MaxDifferent;                                      // 0x18(0x4)
};


// Size 0xc0
class MerchantQuestParams: public None
{
public:
	Struct WeightedProbabilityRange                              NumberOfRequiredItems;                             // 0x30(0x20)
	Struct WeightedProbabilityRangeOfRanges                      TimeLimitInMinutes;                                // 0x50(0x30)
	Class MerchantQuestRequiredItemsDataAsset*                   RequiredItemsDataAsset;                            // 0x80(0x8)
	Class MerchantQuestRandomRequiredItemsDataAsset*             RandomRequiredItemsDataAsset;                      // 0x88(0x8)
	Struct WeightedProbabilityRange                              NumberOfGroups;                                    // 0x90(0x20)
	TArray<Struct NumberOfGroups>                                CategoryGroupBounds;                               // 0xb0(0x10)
};


// Size 0x40
class RiddleQuestParams: public None
{
public:
	Class BoobyTrapSpawnerDataAsset*                             BoobyTrapSpawnerDataAsset;                         // 0x38(0x8)
};


// Size 0x38
class TaleQuestParams: public None
{
public:
	Class TaleQuestDescAsset*                                    TaleQuestAsset;                                    // 0x30(0x8)
};


// Size 0x88
class XMarksTheSpotQuestParams: public None
{
public:
	Struct WeightedProbabilityRange                              NumTreasureLocations;                              // 0x30(0x20)
	Class BoobyTrapSpawnerDataAsset*                             BoobyTrapSpawnerDataAsset;                         // 0x50(0x8)
	TArray<class UniqueTreasureLocationBoobyTraps*>              UniqueTreasureLocationBoobyTraps;                  // 0x58(0x10)
	TArray<class UniqueTreasureLocationRewards*>                 UniqueTreasureLocationRewards;                     // 0x68(0x10)
	TArray<class UniqueTreasureLocationRewardsAssets*>           UniqueTreasureLocationRewardsAssets;               // 0x78(0x10)
};


// Size 0x3a8
class WeightedQuestParams: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	Struct QuestParams                                           Params;                                            // 0x8(0x3a0)
};


// Size 0x3a0
class QuestParams: public None
{
public:
	byte                                                         Type;                                              // 0x0(0x1)
	Struct XMarksTheSpotQuestParams                              XMarksTheSpot;                                     // 0x8(0x88)
	Struct RiddleQuestParams                                     Riddle;                                            // 0x90(0x40)
	Struct BountyQuestParams                                     Bounty;                                            // 0xd0(0x148)
	Struct MerchantQuestParams                                   Merchant;                                          // 0x218(0xc0)
	Struct CargoRunQuestParams                                   CargoRun;                                          // 0x2d8(0x88)
	Struct TaleQuestParams                                       Tale;                                              // 0x360(0x38)
	Struct MatchmakingQuestParams                                Matchmake;                                         // 0x398(0x1)
	Struct StagingQuestParams                                    Staging;                                           // 0x399(0x1)
	Struct EmergantVoyageQuestParams                             EmergantVoyage;                                    // 0x39a(0x1)
	Struct RewardQuestParams                                     Reward;                                            // 0x39b(0x1)
};


// Size 0x18
class WeightedVoyageLocationParams: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	TArray<Struct VoyageLocationParams>                          Locations;                                         // 0x8(0x10)
};


// Size 0x58
class VoyageLocationParams: public None
{
public:
	byte                                                         Type;                                              // 0x0(0x1)
	Struct VoyageLocationFixedParams                             Fixed;                                             // 0x4(0x8)
	Struct VoyageLocationRandomParams                            Random;                                            // 0x10(0x48)
};


// Size 0x48
class VoyageLocationRandomParams: public None
{
public:
	bool                                                         NPCsOnly;                                          // 0x0(0x1)
	bool                                                         CargoRunNPCsOnly;                                  // 0x1(0x1)
	bool                                                         Feature;                                           // 0x2(0x1)
	bool                                                         Resource;                                          // 0x3(0x1)
	bool                                                         Outpost;                                           // 0x4(0x1)
	bool                                                         Fort;                                              // 0x5(0x1)
	bool                                                         SeaPost;                                           // 0x6(0x1)
	bool                                                         HasLandmarks;                                      // 0x7(0x1)
	bool                                                         OnlyNamedIslands;                                  // 0x8(0x1)
	Class VoyageLocationOnlyNamedIslandListDataAsset*            OnlyNamedIslandsListDataAsset;                     // 0x10(0x8)
	TArray<Class OnlyNamedIslandsListDataAsset>                  Seas;                                              // 0x18(0x10)
	bool                                                         WithinDistance;                                    // 0x28(0x1)
	Struct VoyageLocationDistance                                Distance;                                          // 0x2c(0x8)
};


// Size 0x8
class VoyageLocationDistance: public None
{
public:
	float                                                        Min;                                               // 0x0(0x4)
	float                                                        Max;                                               // 0x4(0x4)
};


// Size 0x8
class VoyageLocationFixedParams: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
};


// Size 0x30
class QuestPoolParams: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	TArray<Struct Weight>                                        Quests;                                            // 0x8(0x10)
	TArray<Struct Quests>                                        Location;                                          // 0x18(0x10)
	bool                                                         AllowRepeatIslandsWithinQuest;                     // 0x28(0x1)
	bool                                                         LimitTimesCanBeSelected;                           // 0x29(0x1)
	int                                                          MaxTimesCanBeSelected;                             // 0x2c(0x4)
};


// Size 0x140
class VoyageRecipe: public None
{
public:
	Struct QuestDistributionParams                               QuestDistribution;                                 // 0x0(0xc8)
	Struct QuestSelectionParams                                  QuestSelection;                                    // 0xc8(0x8)
	TArray<Struct QuestSelection>                                QuestPools;                                        // 0xd0(0x10)
	bool                                                         UseFixedFinalQuestPool;                            // 0xe0(0x1)
	bool                                                         RandomiseChapters;                                 // 0xe1(0x1)
	Struct QuestPoolParams                                       FixedFinalQuestPool;                               // 0xe8(0x30)
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x118(0x1)
	TArray<Struct DoNotNotifyParticipantsOnVoyageComplete>       CompletionStats;                                   // 0x120(0x10)
	TArray<Struct CompletionStats>                               ReapersMarkCompletionStats;                        // 0x130(0x10)
};


// Size 0x8
class QuestSelectionParams: public None
{
public:
	byte                                                         PoolSelectionMethod;                               // 0x0(0x1)
	byte                                                         LocationSelectionMethod;                           // 0x1(0x1)
	bool                                                         UseChapterBasedVoyageHistory;                      // 0x2(0x1)
	int                                                          MaxNumberOfPoolRetries;                            // 0x4(0x4)
};


// Size 0xc8
class QuestDistributionParams: public None
{
public:
	byte                                                         Method;                                            // 0x0(0x1)
	Struct QuestDistributionAllAtOnceParams                      AllAtOnce;                                         // 0x8(0x40)
	Struct QuestDistributionPerChapterParams                     PerChapter;                                        // 0x48(0x68)
	Struct QuestDistributionFixedChaptersParams                  FixedChapters;                                     // 0xb0(0x18)
};


// Size 0x18
class QuestDistributionFixedChaptersParams: public None
{
public:
	bool                                                         UseProceduralQuestRewards;                         // 0x0(0x1)
	int                                                          NumChapters;                                       // 0x4(0x4)
	TArray<Struct ChapterDataEntry>                              Chapters;                                          // 0x8(0x10)
};


// Size 0x10
class ChapterDataEntry: public None
{
public:
	int                                                          NumQuests;                                         // 0x0(0x4)
	Class VoyageRewardDataAsset*                                 PerChapterRewardAsset;                             // 0x8(0x8)
};


// Size 0x68
class QuestDistributionPerChapterParams: public None
{
public:
	int                                                          MinNumChapters;                                    // 0x0(0x4)
	Struct WeightedProbabilityRange                              NumQuests;                                         // 0x8(0x20)
	Struct WeightedProbabilityRange                              NumQuestsInFirstChapter;                           // 0x28(0x20)
	Struct WeightedProbabilityRange                              NumQuestsInOtherChapters;                          // 0x48(0x20)
};


// Size 0x40
class QuestDistributionAllAtOnceParams: public None
{
public:
	Struct WeightedProbabilityRange                              NumQuests;                                         // 0x0(0x20)
	Struct WeightedProbabilityRange                              QuestsPerChapter;                                  // 0x20(0x20)
};


// Size 0x18
class ContestTimerData: public None
{
public:
	float                                                        Time;                                              // 0x0(0x4)
	Struct FString                                               ServicesConfigRetrievalString;                     // 0x8(0x10)
};


// Size 0x1b8
class EmergentContestVoyageRecipe: public None
{
public:
	bool                                                         IsSharableVoyage;                                  // 0x140(0x1)
	Struct ContestZoneDistribution                               WeightedContestZonesToActivate;                    // 0x148(0x10)
	Struct ContestTimerData                                      ContestVoyageTime;                                 // 0x158(0x18)
	Struct StringClassReference                                  ScoreSystemToLoad;                                 // 0x170(0x10)
	Struct FText                                                 ContestArenaName;                                  // 0x180(0x38)
};


// Size 0x10
class ContestZoneDistribution: public None
{
public:
	TArray<Struct WeightedContestZone>                           WeightedContestZones;                              // 0x0(0x10)
};


// Size 0xc
class WeightedContestZone: public None
{
public:
	struct FName                                                 ContestZoneName;                                   // 0x0(0x8)
	int                                                          Weight;                                            // 0x8(0x4)
};


// Size 0x10
class ContestIslandArchetype: public None
{
public:
	TArray<Struct WeightedContestIslandData>                     AvailableIslands;                                  // 0x0(0x10)
};


// Size 0x10
class WeightedContestIslandData: public None
{
public:
	Struct ContestVoyageIslandData                               IslandData;                                        // 0x0(0xc)
	int                                                          WeightedChance;                                    // 0xc(0x4)
};


// Size 0xc
class ContestVoyageIslandData: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	int                                                          MaxItemCountForIsland;                             // 0x8(0x4)
};


// Size 0x58
class EventCharacterHitReaction: public None
{
public:
	Struct ImpactDamageEvent                                     ImpactDamage;                                      // 0x0(0x58)
};


// Size 0x1
class EventPlayerCharacterPuzzleVaultIncorrect: public None
{
public:
};


// Size 0x1
class EventPlayerCharacterPuzzleVaultComplete: public None
{
public:
};


// Size 0x8
class EventPlayerCharacterInPuzzleVaultChanged: public None
{
public:
	bool                                                         IsInPuzzleVault;                                   // 0x0(0x1)
	float                                                        CurrentWaterLevel;                                 // 0x4(0x4)
};


// Size 0xc
class EventItemUseAINoiseEvent: public None
{
public:
	float                                                        NoiseRange;                                        // 0x0(0x4)
	struct FName                                                 NoiseTag;                                          // 0x4(0x8)
};


// Size 0x2
class EventAnimationShopInteraction: public None
{
public:
	bool                                                         Active;                                            // 0x0(0x1)
	byte                                                         Type;                                              // 0x1(0x1)
};


// Size 0x1
class EventFaceTargetEnabled: public None
{
public:
	bool                                                         Enabled;                                           // 0x0(0x1)
};


// Size 0x1
class EventRemoteCharacterStartedDig: public None
{
public:
};


// Size 0xc
class EventRequestVomit: public None
{
public:
};


// Size 0x1
class EventIsDrunk: public None
{
public:
	bool                                                         bIsDrunk;                                          // 0x0(0x1)
};


// Size 0x8
class EventFallWithDamageLegNotBroken: public None
{
public:
	struct FName                                                 RumbleTag;                                         // 0x0(0x8)
};


// Size 0x1
class EventHealedLeg: public None
{
public:
};


// Size 0x8
class EventBrokeLeg: public None
{
public:
	struct FName                                                 RumbleTag;                                         // 0x0(0x8)
};


// Size 0x1
class EventPlayerGhostShipWhiteOutStarted: public None
{
public:
};


// Size 0x1
class EventCharacterRestarted: public None
{
public:
};


// Size 0x84
class EventCharacterLanded: public None
{
public:
	Struct HitResult                                             HitResult;                                         // 0x0(0x80)
	float                                                        VerticalSpeed;                                     // 0x80(0x4)
};


// Size 0x1
class EventCharacterJumped: public None
{
public:
};


// Size 0x1
class EventCharacterDestroyed: public None
{
public:
};


// Size 0x8
class EventCharacterInteraction: public None
{
public:
	Class Object*                                                Interactable;                                      // 0x0(0x8)
};


// Size 0x18
class ClientTelemetryConfigurationSettings: public None
{
public:
	float                                                        HighMemoryPerformanceHeartbeatIntervalSeconds;     // 0x0(0x4)
	float                                                        HighMemoryThresholdDurango;                        // 0x4(0x4)
	float                                                        HighMemoryThresholdEdmonton;                       // 0x8(0x4)
	float                                                        HighMemoryThresholdScorpio;                        // 0xc(0x4)
	float                                                        HighMemoryThresholdLockhart;                       // 0x10(0x4)
	float                                                        HighMemoryThresholdAnaconda;                       // 0x14(0x4)
};


// Size 0x10
class ResolutionTelemetryFragment: public None
{
public:
	float                                                        ScreenPercentage;                                  // 0x8(0x4)
	bool                                                         DynamicResolution;                                 // 0xc(0x1)
};


// Size 0x18
class ShippingStatsTelemetryFragment: public None
{
public:
	Struct JsonObjectWrapper                                     Json;                                              // 0x0(0x18)
};


// Size 0xb0
class AudioDataTelemetryFragment: public None
{
public:
	TArray<UInt32 >                                              WwiseStateGroups;                                  // 0x20(0x10)
	TArray<UInt32 >                                              WwiseStateValues;                                  // 0x30(0x10)
	TArray<UInt32 >                                              PeakProxyCountsPools;                              // 0x40(0x10)
	TArray<UInt32 >                                              PeakProxyCounts;                                   // 0x50(0x10)
	TArray<UInt32 >                                              StreamFindFailedIDs;                               // 0x60(0x10)
	TArray<UInt32 >                                              StreamOpenFailedIDs;                               // 0x70(0x10)
	TArray<UInt32 >                                              StreamReadFailedIDs;                               // 0x80(0x10)
	TArray<Struct SoundBankFailureTelemetryEntry>                FailedToLoadBankIDs;                               // 0x90(0x10)
	float                                                        AverageIOBytesPerSecondRead;                       // 0xac(0x4)
};


// Size 0x8
class SoundBankFailureTelemetryEntry: public None
{
public:
};


// Size 0x18
class FrameTypeTelemetryFragment: public None
{
public:
};


// Size 0x8
class RefreshRateTelemetryFragment: public None
{
public:
	bool                                                         Supports120Hz;                                     // 0x0(0x1)
};


// Size 0x1
class HDRTelemetryFragment: public None
{
public:
	bool                                                         HDR;                                               // 0x0(0x1)
};


// Size 0x18
class GarbageCollectionFrametimeTelemetryFragment: public None
{
public:
	TArray<Float None>                                           GCFrametimesMs;                                    // 0x0(0x10)
	float                                                        MaxGCFrametimeMs;                                  // 0x10(0x4)
};


// Size 0x20
class HitchDataTelemetryFragment: public None
{
public:
};


// Size 0xc
class StutterDataTelemetryFragment: public None
{
public:
	float                                                        StutterFramePercentage;                            // 0x0(0x4)
	float                                                        StutterFrameDeltaMax;                              // 0x4(0x4)
	float                                                        StutterFrameDeltaAverage;                          // 0x8(0x4)
};


// Size 0x20
class ServerNetworkDataTelemetryFragment: public None
{
public:
	Struct PacketDiscardStats                                    DiscardedPackets;                                  // 0x0(0x20)
};


// Size 0x28
class NetworkDataTelemetryFragmentInput: public None
{
public:
};


// Size 0x1
class TelemetryFragmentInput: public None
{
public:
};


// Size 0x28
class NetworkDataTelemetryFragment: public None
{
public:
};


// Size 0x18
class PerformanceTelemetryFragmentInput: public None
{
public:
};


// Size 0x170
class MemoryDataTelemetryFragment: public None
{
public:
	TArray<Struct MemoryTableData>                               TableInfo;                                         // 0xd0(0x10)
	int                                                          HighMemoryThresholdPercentage;                     // 0x118(0x4)
};


// Size 0x18
class MemoryTableData: public None
{
public:
};


// Size 0x50
class InventoryMemory: public None
{
public:
};


// Size 0x10
class IslandEventIcons: public None
{
public:
	Class Texture*                                               ActiveEventIcon;                                   // 0x0(0x8)
	Class Texture*                                               InactiveEventIcon;                                 // 0x8(0x8)
};


// Size 0x48
class CanvasWorldMapShipLocation: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	class                                                        ShipSize;                                          // 0x10(0x8)
	Struct Vector2D                                              Location;                                          // 0x18(0x8)
	float                                                        Rotation;                                          // 0x20(0x4)
	Struct CanvasLerpData                                        LerpData;                                          // 0x24(0x10)
	bool                                                         IsInAlliance;                                      // 0x34(0x1)
	byte                                                         ReapersMarkLevel;                                  // 0x35(0x1)
	byte                                                         EmissaryLevel;                                     // 0x36(0x1)
	bool                                                         IsContestShip;                                     // 0x37(0x1)
	Class Texture*                                               CrewLiveryOverlayIcon;                             // 0x38(0x8)
	bool                                                         IsReapersTrackedShip;                              // 0x40(0x1)
	bool                                                         IsInTunnel;                                        // 0x41(0x1)
};


// Size 0x10
class CanvasLerpData: public None
{
public:
	float                                                        LerpTime;                                          // 0x0(0x4)
	float                                                        EaseExponent;                                      // 0x4(0x4)
};


// Size 0x20
class CanvasWorldMapGeneric: public None
{
public:
	Class Actor*                                                 MarkerActor;                                       // 0x0(0x8)
	Class Texture*                                               Icon;                                              // 0x8(0x8)
	Struct Vector                                                Location;                                          // 0x10(0xc)
};


// Size 0x18
class CanvasWorldMapReaperTrackedBootItemIcon: public None
{
public:
	byte                                                         BootyItemType;                                     // 0x0(0x1)
	Class Texture*                                               Texture;                                           // 0x8(0x8)
};


// Size 0x18
class CanvasWorldMapShipIcons: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	Class Texture*                                               ShipTexture;                                       // 0x8(0x8)
	Class Texture*                                               OffscreenTexture;                                  // 0x10(0x8)
};


// Size 0x20
class CanvasWorldMapWorldData: public None
{
public:
	Struct Vector2D                                              Min;                                               // 0x0(0x8)
	Struct Vector2D                                              Max;                                               // 0x8(0x8)
	TArray<Struct CanvasWorldMapIslandData>                      Islands;                                           // 0x10(0x10)
};


// Size 0x60
class CanvasWorldMapIslandData: public None
{
public:
	Struct FText                                                 Name;                                              // 0x0(0x38)
	Class Texture*                                               IslandTex;                                         // 0x38(0x8)
	Struct Box2D                                                 Bounds;                                            // 0x40(0x14)
	float                                                        Rotation;                                          // 0x54(0x4)
	float                                                        LabelOffset;                                       // 0x58(0x4)
};


// Size 0x30
class MapTableCanvasDetails: public None
{
public:
	TArray<Struct CanvasWorldMapBackgroundItems>                 BackgroundDetails;                                 // 0x0(0x10)
	TArray<Struct CanvasWorldMapForegroundItems>                 ForegroundDetails;                                 // 0x10(0x10)
	TArray<Struct CanvasWorldMapSeaAreaItems>                    SeaDetails;                                        // 0x20(0x10)
};


// Size 0x50
class CanvasWorldMapSeaAreaItems: public None
{
public:
	Class Texture*                                               Texture;                                           // 0x0(0x8)
	Struct FText                                                 Name;                                              // 0x8(0x38)
	Struct Vector2D                                              Location;                                          // 0x40(0x8)
	struct FName                                                 FeatureName;                                       // 0x48(0x8)
};


// Size 0x20
class CanvasWorldMapForegroundItems: public None
{
public:
	Class Texture*                                               Texture;                                           // 0x0(0x8)
	struct FName                                                 FeatureToggle;                                     // 0x8(0x8)
	TArray<Struct FeatureToggle>                                 Locations;                                         // 0x10(0x10)
};


// Size 0x20
class CanvasWorldMapBackgroundItems: public None
{
public:
	Class Texture*                                               Texture;                                           // 0x0(0x8)
	Struct Vector2D                                              WorldSize;                                         // 0x8(0x8)
	TArray<Struct WorldSize>                                     Locations;                                         // 0x10(0x10)
};


// Size 0xb0
class VoyageProposalDescViewModel: public None
{
public:
	Struct FString                                               ProposalDesc;                                      // 0x98(0x10)
	byte                                                         State;                                             // 0xa8(0x1)
	int                                                          VoyageIndex;                                       // 0xac(0x4)
};


// Size 0x98
class VoyageDisplayInformation: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	Struct FText                                                 Description;                                       // 0x38(0x38)
	Struct FString                                               KeyArtUrl;                                         // 0x70(0x10)
	Struct FString                                               IconUrl;                                           // 0x80(0x10)
	int                                                          RumouredHaulMin;                                   // 0x90(0x4)
	bool                                                         Locked;                                            // 0x94(0x1)
};


// Size 0x1c
class EventUpdateIslandEventToggle: public None
{
public:
	Struct Guid                                                  EventID;                                           // 0x0(0x10)
	Struct Vector2D                                              EventScreenPos;                                    // 0x10(0x8)
	bool                                                         IsInverted;                                        // 0x18(0x1)
};


// Size 0x1
class EventRefreshIslandEventData: public None
{
public:
};


// Size 0x1
class EventUpdateIslandEventHighlight: public None
{
public:
	bool                                                         IsHighlightActive;                                 // 0x0(0x1)
};


// Size 0xa8
class IslandEventTooltipData: public None
{
public:
	Struct VoyageDisplayInformation                              DisplayInfo;                                       // 0x0(0x98)
	Struct Guid                                                  EventID;                                           // 0x98(0x10)
};


// Size 0x58
class IslandEventIconData: public None
{
public:
	Struct IslandEventData                                       EventData;                                         // 0x0(0x38)
	Struct IslandEventIcons                                      IslandIcons;                                       // 0x38(0x10)
	Struct IslandEventIcons                                      HeaderIcons;                                       // 0x48(0x10)
};


// Size 0x38
class IslandEventData: public None
{
public:
	class                                                        EventType;                                         // 0x0(0x8)
	Struct FString                                               VoyageDescAssetString;                             // 0x8(0x10)
	Struct Vector2D                                              WorldPos;                                          // 0x18(0x8)
	bool                                                         IsActive;                                          // 0x20(0x1)
	Struct Guid                                                  EventID;                                           // 0x24(0x10)
};


// Size 0x1c
class IslandNameAndBounds: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	Struct Box2D                                                 IslandBounds;                                      // 0x8(0x14)
};


// Size 0x1
class EventIslandEventDataChanged: public None
{
public:
};


// Size 0x18
class WorldSafeZone: public None
{
public:
};


// Size 0x18
class AthenaWorldSettingsGameEventSchedulerSettingsConfiguration: public None
{
public:
	struct FName                                                 FeatureFlag;                                       // 0x0(0x8)
	byte                                                         RequiredPlayMode;                                  // 0x8(0x1)
	Class GameEventSchedulerSettingsAsset*                       EventSchedulerSettings;                            // 0x10(0x8)
};


// Size 0x38
class DeferredBakedDecal: public None
{
public:
};


// Size 0xc0
class MerchantCrateItemInfoFaunaBreedRarityEntry: public None
{
public:
	class                                                        FaunaBreed;                                        // 0x0(0x8)
	struct FName                                                 Rarity;                                            // 0x8(0x8)
	Struct BootyItemStats                                        HandInStats;                                       // 0x10(0x90)
	Struct CompanyBootyStatList                                  CompanySpecificStats;                              // 0xa0(0x10)
	TArray<Struct CompanySpecificBootyReward>                    CompanySpecificHandInRewardIds;                    // 0xb0(0x10)
};


// Size 0x18
class CompanySpecificBootyReward: public None
{
public:
	class                                                        CompanyId;                                         // 0x0(0x8)
	Struct RewardId                                              RewardId;                                          // 0x8(0x8)
	bool                                                         RequirePirateLegend;                               // 0x10(0x1)
};


// Size 0x10
class CompanyBootyStatList: public None
{
public:
	TArray<Struct CompanyBootyStats>                             CompanyList;                                       // 0x0(0x10)
};


// Size 0x98
class CompanyBootyStats: public None
{
public:
	class                                                        CompanyId;                                         // 0x0(0x8)
	Struct BootyItemStats                                        Stats;                                             // 0x8(0x90)
};


// Size 0x90
class BootyItemStats: public None
{
public:
	TArray<Struct CompanyId>                                     HandInPlayerStats;                                 // 0x0(0x10)
	TArray<Struct HandInPlayerStats>                             HandInStolenPlayerStats;                           // 0x10(0x10)
	TArray<Struct HandInStolenPlayerStats>                       HandInAsPirateLegendPlayerStats;                   // 0x20(0x10)
	TArray<Struct HandInAsPirateLegendPlayerStats>               HandInOnSchedulePlayerStats;                       // 0x30(0x10)
	TArray<Struct HandInOnSchedulePlayerStats>                   HandInAsPirateLegendOnSchedulePlayerStats;         // 0x40(0x10)
	TArray<Struct HandInAsPirateLegendOnSchedulePlayerStats>     HandInAsEmissaryPlayerStats;                       // 0x50(0x10)
	TArray<Struct HandInAsEmissaryPlayerStats>                   HandInAsMaxLevelEmissaryPlayerStats;               // 0x60(0x10)
	TArray<Struct HandInAsMaxLevelEmissaryPlayerStats>           HandInStolenAsEmissaryPlayerStats;                 // 0x70(0x10)
	TArray<Struct EmissaryBootyItemStats>                        HandInStolenAsMaxLevelEmissaryPlayerStats;         // 0x80(0x10)
};


// Size 0x18
class EmissaryBootyItemStats: public None
{
public:
	class                                                        EmissaryCompany;                                   // 0x0(0x8)
	TArray<Struct EmissaryCompany>                               Stats;                                             // 0x8(0x10)
};


// Size 0x20
class MerchantCrateSfx: public None
{
public:
	Class WwiseEvent*                                            EquipSfx;                                          // 0x0(0x8)
	Class WwiseEvent*                                            UnequipSfx;                                        // 0x8(0x8)
	Class WwiseEvent*                                            WielderLandedJumpSfx;                              // 0x10(0x8)
	Class WwiseEvent*                                            WielderFootstepLayerOneshot;                       // 0x18(0x8)
};


// Size 0x18
class BeaconLitWithFlameOfFateStatsToFire: public None
{
public:
	byte                                                         FlameOfFateType;                                   // 0x0(0x1)
	TArray<Struct FlameOfFateType>                               StatsToFire;                                       // 0x8(0x10)
};


// Size 0x2
class BeaconData: public None
{
public:
	bool                                                         LightIsOn_Server;                                  // 0x0(0x1)
	byte                                                         FlameOfFateType;                                   // 0x1(0x1)
};


// Size 0x1
class BeaconExtinguishedEvent: public None
{
public:
};


// Size 0x1
class BeaconLitEvent: public None
{
public:
};


// Size 0x10
class BellPlayerStats: public None
{
public:
	TArray<Struct BellDesc>                                      StatsToFireUponBellRing;                           // 0x0(0x10)
};


// Size 0x18
class BellDesc: public None
{
public:
	Class StaticMesh*                                            BellMesh;                                          // 0x0(0x8)
	Class WwiseEvent*                                            BellRingSFX;                                       // 0x8(0x8)
	Class WwiseEvent*                                            BellRingTurbulenceSFX;                             // 0x10(0x8)
};


// Size 0x18
class BoobyTrapSpawnerRankEntry: public None
{
public:
	int                                                          Rank;                                              // 0x0(0x4)
	float                                                        ChanceOfBeingBoobyTrapped;                         // 0x4(0x4)
	TArray<Struct WeightedAIBoobyTrapSpawner>                    WeightedSpawners;                                  // 0x8(0x10)
};


// Size 0x10
class WeightedAIBoobyTrapSpawner: public None
{
public:
	Class AIBoobyTrapSpawner*                                    Spawner;                                           // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
};


// Size 0x28
class PageLayoutRepInfo: public None
{
public:
	TArray<Struct TreasureMapWidgetTexture>                      Images;                                            // 0x8(0x10)
	TArray<Struct TreasureMapWidgetLocalisedTextWithFontOverride> GeneralText;                                       // 0x18(0x10)
};


// Size 0x78
class TreasureMapWidgetLocalisedTextWithFontOverride: public None
{
public:
	Class Font*                                                  FontOverride;                                      // 0x70(0x8)
};


// Size 0x70
class TreasureMapWidgetLocalisedText: public None
{
public:
	Struct FText                                                 Text;                                              // 0x38(0x38)
};


// Size 0x38
class TreasureMapWidgetText: public None
{
public:
	float                                                        Scale;                                             // 0x18(0x4)
	bool                                                         CutoutTextStyle;                                   // 0x1c(0x1)
	float                                                        StrikethroughThickness;                            // 0x20(0x4)
	float                                                        StrikethroughOffset;                               // 0x24(0x4)
	Struct LinearColor                                           StrikethroughColor;                                // 0x28(0x10)
};


// Size 0x18
class TreasureMapWidget: public None
{
public:
	Struct Vector2D                                              Position;                                          // 0x0(0x8)
	byte                                                         HorizontalAlignment;                               // 0x8(0x1)
	byte                                                         VerticalAlignment;                                 // 0x9(0x1)
	float                                                        Angle;                                             // 0xc(0x4)
	float                                                        Width;                                             // 0x10(0x4)
	float                                                        Opacity;                                           // 0x14(0x4)
};


// Size 0x28
class TreasureMapWidgetTexture: public None
{
public:
	Class Texture*                                               Image;                                             // 0x18(0x8)
	float                                                        RelativeHeightModifier;                            // 0x20(0x4)
	bool                                                         FlipX;                                             // 0x24(0x1)
};


// Size 0x18
class QuestBookPageRenderer: public None
{
public:
	Class Font*                                                  Font;                                              // 0x0(0x8)
	float                                                        FontScale;                                         // 0x8(0x4)
	float                                                        FontMaxScale;                                      // 0xc(0x4)
	float                                                        FontLineSpacingScale;                              // 0x10(0x4)
};


// Size 0x140
class QuestBookMaterialHandler: public None
{
public:
	int                                                          PageWidth;                                         // 0x0(0x4)
	int                                                          PageHeight;                                        // 0x4(0x4)
	Struct QuestBookPageRenderer                                 PageTextRenderer;                                  // 0x8(0x18)
	Class MaybeCompressedCanvasRenderTarget2D*                   LeftSpreadLeftPageRenderTarget;                    // 0x20(0x8)
	Class MaybeCompressedCanvasRenderTarget2D*                   LeftSpreadRightPageRenderTarget;                   // 0x28(0x8)
	Class MaybeCompressedCanvasRenderTarget2D*                   RightSpreadLeftPageRenderTarget;                   // 0x30(0x8)
	Class MaybeCompressedCanvasRenderTarget2D*                   RightSpreadRightPageRenderTarget;                  // 0x38(0x8)
	Class QuestBookPageLayout*                                   LeftSpreadLeftPageContents;                        // 0x40(0x8)
	Class QuestBookPageLayout*                                   LeftSpreadRightPageContents;                       // 0x58(0x8)
	Class QuestBookPageLayout*                                   RightSpreadLeftPageContents;                       // 0x70(0x8)
	Class QuestBookPageLayout*                                   RightSpreadRightPageContents;                      // 0x88(0x8)
};


// Size 0x18
class PageReference: public None
{
public:
	Struct StringAssetReference                                  PageReference;                                     // 0x0(0x10)
	byte                                                         NumberOfPages;                                     // 0x10(0x1)
};


// Size 0x28
class QuestBookRepInfo: public None
{
public:
	int                                                          LeftPageIndex;                                     // 0x0(0x4)
	TArray<Int >                                                 CurrentBookContents;                               // 0x8(0x10)
	TArray<Struct CurrentBookContents>                           ProcPageList;                                      // 0x18(0x10)
};


// Size 0x50
class BountyMapTargetDesc: public None
{
public:
	Struct TreasureMapTextDesc                                   Name;                                              // 0x0(0x48)
	Class Texture*                                               MugShotImage;                                      // 0x48(0x8)
};


// Size 0x48
class TreasureMapTextDesc: public None
{
public:
	Struct FText                                                 Pattern;                                           // 0x0(0x38)
	TArray<Struct TreasureMapTextEntry>                          Substitutions;                                     // 0x38(0x10)
};


// Size 0x48
class TreasureMapTextEntry: public None
{
public:
	Struct FString                                               Name;                                              // 0x0(0x10)
	Struct FText                                                 Substitution;                                      // 0x10(0x38)
};


// Size 0x68
class BountyMapContents: public None
{
public:
	Struct TreasureMapTextDesc                                   Location;                                          // 0x0(0x48)
	TArray<Struct Location>                                      Descriptions;                                      // 0x48(0x10)
	TArray<Struct Descriptions>                                  Targets;                                           // 0x58(0x10)
};


// Size 0x10
class QuestBootyItemPopUpEntry: public None
{
public:
	struct FName                                                 BootyItemIdentifier;                               // 0x0(0x8)
	Class PopUpMessageDesc*                                      PopUp;                                             // 0x8(0x8)
};


// Size 0x28
class CompanySkillsetProgressions: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
	Struct TargetSkillsetProgressionPair                         TargetSkillsets;                                   // 0x8(0x20)
};


// Size 0x20
class LoadoutSubstitution: public None
{
public:
	Struct StringAssetReference                                  LoadoutToSubstituteOut;                            // 0x0(0x10)
	TArray<Struct LoadoutToSubstituteOut>                        LoadoutsToSubstituteIn;                            // 0x10(0x10)
};


// Size 0x28
class BountyQuestMugShotSet: public None
{
public:
	Class AthenaAIFormDataAsset*                                 Form;                                              // 0x0(0x8)
	Class Texture*                                               MaleCaptainMugShot;                                // 0x8(0x8)
	Class Texture*                                               FemaleCaptainMugShot;                              // 0x10(0x8)
	Class Texture*                                               MaleCrewMugShot;                                   // 0x18(0x8)
	Class Texture*                                               FemaleCrewMugShot;                                 // 0x20(0x8)
};


// Size 0x10
class BountyQuestLayoutOption: public None
{
public:
	int                                                          NumCaptains;                                       // 0x0(0x4)
	int                                                          NumCrew;                                           // 0x4(0x4)
	Class BountyMapLayout*                                       Layout;                                            // 0x8(0x8)
};


// Size 0x10
class CannonDesc: public None
{
public:
	Class StaticMesh*                                            CannonBarrelMesh;                                  // 0x0(0x8)
	Class SkeletalMesh*                                          CannonBoxMesh;                                     // 0x8(0x8)
};


// Size 0x8
class EventCannonFiredOnServer: public None
{
public:
	Class Cannon*                                                Cannon;                                            // 0x0(0x8)
};


// Size 0x20
class EventCannonFired: public None
{
public:
	Class Cannon*                                                FiredCannon;                                       // 0x0(0x8)
};


// Size 0x1
class EventCannonAimingStoppedYaw: public None
{
public:
	bool                                                         IsAtEnd;                                           // 0x0(0x1)
};


// Size 0x1
class EventCannonAimingStoppedPitch: public None
{
public:
	bool                                                         IsAtEnd;                                           // 0x0(0x1)
};


// Size 0x1
class EventCannonAimingStartedYaw: public None
{
public:
};


// Size 0x1
class EventCannonAimingStartedPitch: public None
{
public:
};


// Size 0x1
class EventCannonAimingCenteredYaw: public None
{
public:
};


// Size 0x1
class EventCannonAimingCenteredPitch: public None
{
public:
};


// Size 0x18
class AchievementSailCloseToShipWithoutFiring: public None
{
public:
	float                                                        RangeToRemainWithinInMetres;                       // 0x0(0x4)
	float                                                        DistanceToTravelInMetres;                          // 0x4(0x4)
};


// Size 0x8
class AchievementSailFullyWithTheWind: public None
{
public:
	float                                                        DistanceToTravelInMetres;                          // 0x0(0x4)
};


// Size 0x80
class AchievementSailThroughStormAtNightWithLightsOff: public None
{
public:
	Class Ship*                                                  Ship;                                              // 0x50(0x8)
};


// Size 0xf8
class AchievementSailWithFlameOfFateColoursAboard: public None
{
public:
	Class Ship*                                                  Ship;                                              // 0x8(0x8)
	TArray<class ShipLights*>                                    ShipLights;                                        // 0x10(0x10)
};


// Size 0x18
class AchievementSinkAnotherCrewsShip: public None
{
public:
	float                                                        CrewRange;                                         // 0x0(0x4)
};


// Size 0x98
class ShipPartConnections: public None
{
public:
	struct FName                                                 AnchorName;                                        // 0x0(0x8)
	struct FName                                                 CapstanName;                                       // 0x8(0x8)
	struct FName                                                 RudderName;                                        // 0x10(0x8)
	struct FName                                                 WheelName;                                         // 0x18(0x8)
	struct FName                                                 MainMastName;                                      // 0x20(0x8)
	struct FName                                                 MainMastSailHoistRightName;                        // 0x28(0x8)
	struct FName                                                 MainMastSailHoistLeftName;                         // 0x30(0x8)
	struct FName                                                 MainMastSailAngleRightName;                        // 0x38(0x8)
	struct FName                                                 MainMastSailAngleLeftName;                         // 0x40(0x8)
	struct FName                                                 MizzenMastName;                                    // 0x48(0x8)
	struct FName                                                 MizzenMastSailHoistRightName;                      // 0x50(0x8)
	struct FName                                                 MizzenMastSailHoistLeftName;                       // 0x58(0x8)
	struct FName                                                 MizzenMastSailAngleRightName;                      // 0x60(0x8)
	struct FName                                                 MizzenMastSailAngleLeftName;                       // 0x68(0x8)
	struct FName                                                 ForeMastName;                                      // 0x70(0x8)
	struct FName                                                 ForeMastSailHoistRightName;                        // 0x78(0x8)
	struct FName                                                 ForeMastSailHoistLeftName;                         // 0x80(0x8)
	struct FName                                                 ForeMastSailAngleRightName;                        // 0x88(0x8)
	struct FName                                                 ForeMastSailAngleLeftName;                         // 0x90(0x8)
};


// Size 0x30
class ShipCurseFXData: public None
{
public:
	byte                                                         ShipCurseTag;                                      // 0x0(0x1)
	TArray<Struct ShipCurseVFXTemplate>                          VFXTemplates;                                      // 0x8(0x10)
	Struct ShipCurseAudioLoop                                    AudioLoop;                                         // 0x18(0x18)
};


// Size 0x18
class ShipCurseAudioLoop: public None
{
public:
	Class WwiseEvent*                                            PlayLoop;                                          // 0x0(0x8)
	Class WwiseEvent*                                            StopLoop;                                          // 0x8(0x8)
	Class WwiseObjectPoolWrapper*                                PoolWrapper;                                       // 0x10(0x8)
};


// Size 0x20
class ShipCurseVFXTemplate: public None
{
public:
	class                                                        ActorClass;                                        // 0x0(0x8)
	Class ParticleSystem*                                        Template;                                          // 0x8(0x8)
	Struct FString                                               SocketNameSubstring;                               // 0x10(0x10)
};


// Size 0x1
class EventApplyStatusShipCurseEnd: public None
{
public:
};


// Size 0x20
class EventApplyStatusShipCurse: public None
{
public:
	Struct Status                                                Status;                                            // 0x8(0x18)
};


// Size 0x1
class EventCurseWheelLockEnd: public None
{
public:
};


// Size 0x8
class EventCurseWheelLock: public None
{
public:
	byte                                                         CurseTag;                                          // 0x0(0x1)
	float                                                        AngleThreshold;                                    // 0x4(0x4)
};


// Size 0x8
class EventCurseSpawnAIOnShip: public None
{
public:
	Class AIFixedWavesSpawner*                                   AISpawner;                                         // 0x0(0x8)
};


// Size 0x1
class EventCurseBallastEnd: public None
{
public:
};


// Size 0x4
class EventCurseBallast: public None
{
public:
};


// Size 0x30
class EventShipCurseFXEnd: public None
{
public:
	Struct ShipCurseFXData                                       CurseFXData;                                       // 0x0(0x30)
};


// Size 0x30
class EventShipCurseFX: public None
{
public:
	Struct ShipCurseFXData                                       CurseFXData;                                       // 0x0(0x30)
};


// Size 0xc
class CurseShipCannonsEvent: public None
{
public:
	float                                                        PitchAngle;                                        // 0x0(0x4)
	float                                                        YawAngle;                                          // 0x4(0x4)
	float                                                        BlendTime;                                         // 0x8(0x4)
};


// Size 0x18
class EventEnableInteractionPoints: public None
{
public:
	byte                                                         ShipCurseTag;                                      // 0x0(0x1)
	byte                                                         CurseTag;                                          // 0x1(0x1)
	TArray<Class CurseTag>                                       InteractionPointsToEnable;                         // 0x8(0x10)
};


// Size 0x18
class EventDisableInteractionPoints: public None
{
public:
	byte                                                         ShipCurseTag;                                      // 0x0(0x1)
	byte                                                         CurseTag;                                          // 0x1(0x1)
	TArray<Class CurseTag>                                       InteractionPointsToDisable;                        // 0x8(0x10)
};


// Size 0x4
class EventCurseCapstan: public None
{
public:
	float                                                        DurationToToggleCapstanPosition;                   // 0x0(0x4)
};


// Size 0x4
class EventCurseChangeSailHeight: public None
{
public:
	float                                                        Duration;                                          // 0x0(0x4)
};


// Size 0x30
class TimedResponseAction: public None
{
public:
	TArray<class TargetActors*>                                  TargetActors;                                      // 0x0(0x10)
	float                                                        Duration;                                          // 0x10(0x4)
	bool                                                         IsActive;                                          // 0x14(0x1)
};


// Size 0x18
class ShipCurseSpawnedFXForCurse: public None
{
public:
	TArray<Struct ShipCurseSpawnedFXObject>                      SpawnedFXObjects;                                  // 0x8(0x10)
};


// Size 0x30
class ShipCurseSpawnedFXObject: public None
{
public:
	Class WwiseEvent*                                            StopAudioLoopEvent;                                // 0x28(0x8)
};


// Size 0x30
class ShipActiveCurseFXData: public None
{
public:
	Struct ShipCurseFXData                                       CurseFXData;                                       // 0x0(0x30)
};


// Size 0x18
class ShipConfigurationSettings: public None
{
public:
	float                                                        MetresSailedStatSendFrequency;                     // 0x0(0x4)
	float                                                        MinimumDistanceSailedBeforeSendingUpdate;          // 0x4(0x4)
	float                                                        MaxVelocityAllowedForServerMigration;              // 0x8(0x4)
	float                                                        MaxAngularVelocityAllowedForServerMigration;       // 0xc(0x4)
	float                                                        ShipHeartbeatFrequencySeconds;                     // 0x10(0x4)
	bool                                                         MigrationBasedOnVelocityEnabled;                   // 0x14(0x1)
};


// Size 0x38
class SinkingShipParams: public None
{
public:
	float                                                        DragWhenGrindingToHalt;                            // 0x0(0x4)
	float                                                        MinSpdToStopToBeforeLowering;                      // 0x4(0x4)
	float                                                        LowerIntoWaterTime;                                // 0x8(0x4)
	float                                                        TimeIntoLoweringToStartOcclusionZoneShrinkage;     // 0xc(0x4)
	float                                                        AngularDragDuringSinkingSequence;                  // 0x10(0x4)
	float                                                        KeeledOverTime;                                    // 0x14(0x4)
	float                                                        TurnOffBuoyancyTime;                               // 0x18(0x4)
	float                                                        FinalSinkingBuoyancy;                              // 0x1c(0x4)
	float                                                        SinkingTimeUntilDestroy;                           // 0x20(0x4)
	float                                                        ReduceWaterOcclusionZoneTime;                      // 0x24(0x4)
	float                                                        ReduceWaterOcclusionZoneTimeHurryUp;               // 0x28(0x4)
	float                                                        TimeIntoKeelingOverToTeleportPlayer;               // 0x2c(0x4)
	float                                                        MinSampleSubmersionToConsiderInWater;              // 0x30(0x4)
	float                                                        MinPctSamplesRequiredSubmergedToBeAbleToSink;      // 0x34(0x4)
};


// Size 0x40
class LiquidContents: public None
{
public:
	Class Ship*                                                  LiquidSource;                                      // 0x0(0x8)
	TArray<class LiquidTargets*>                                 LiquidTargets;                                     // 0x8(0x10)
	Class Actor*                                                 Container;                                         // 0x18(0x8)
	float                                                        LiquidVolume;                                      // 0x20(0x4)
	Struct Guid                                                  ScoopID;                                           // 0x24(0x10)
	float                                                        LiquidTransferFillAmountModifier;                  // 0x34(0x4)
	byte                                                         ContainerType;                                     // 0x38(0x1)
};


// Size 0x58
class BucketContentsInfo: public None
{
public:
	byte                                                         ThrowableLiquidType;                               // 0x0(0x1)
	class                                                        ProjectileClassToSpawn;                            // 0x8(0x8)
	class                                                        ProjectileClassToSpawnAtWielder;                   // 0x10(0x8)
	Class WwiseEvent*                                            ThrowSfx;                                          // 0x18(0x8)
	Class Object*                                                ThrowVfxFirstPerson;                               // 0x20(0x8)
	Class Object*                                                ThrowVfxThirdPerson;                               // 0x28(0x8)
	Class Object*                                                DrenchWielderVfxThirdPerson;                       // 0x30(0x8)
	Class Object*                                                BucketContentsParticleSystemFirstPerson;           // 0x38(0x8)
	Class Object*                                                BucketContentsParticleSystemThirdPerson;           // 0x40(0x8)
	struct FName                                                 SwitchState;                                       // 0x48(0x8)
	float                                                        LiquidLevel;                                       // 0x50(0x4)
};


// Size 0x20
class QuestVariablePlayerActor: public None
{
public:
};


// Size 0x20
class QuestVariable: public None
{
public:
	struct FName                                                 ParamName;                                         // 0x18(0x8)
};


// Size 0x1c
class LocationGeneratorSample: public None
{
public:
	byte                                                         Type;                                              // 0x0(0x1)
	Struct Vector                                                Location;                                          // 0x4(0xc)
	Struct Vector                                                Normal;                                            // 0x10(0xc)
};


// Size 0x10
class CampaignPopUpNotificationInfo: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	Class PopUpMessageDesc*                                      PopUp;                                             // 0x8(0x8)
};


// Size 0x18
class CannonEnchantmentDesc: public None
{
public:
	Class Object*                                                MuzzleFlashVfxFirstPerson;                         // 0x0(0x8)
	Class Object*                                                MuzzleFlashVfxThirdPerson;                         // 0x8(0x8)
	Class WwiseEvent*                                            FireSfx;                                           // 0x10(0x8)
};


// Size 0x40
class ObjectHitDetectedEvent: public None
{
public:
};


// Size 0x10
class ApplyBoundaryToWorldMapEvent: public None
{
public:
	Struct LinearColor                                           BoundaryData;                                      // 0x0(0x10)
};


// Size 0x4
class WorldMapSetMapLabelsRotation: public None
{
public:
	float                                                        Rotation;                                          // 0x0(0x4)
};


// Size 0xc
class WorldMapSetShipLocation: public None
{
public:
	float                                                        ShipX;                                             // 0x0(0x4)
	float                                                        ShipY;                                             // 0x4(0x4)
	float                                                        Rotation;                                          // 0x8(0x4)
};


// Size 0x28
class WorldMapSetLocation: public None
{
public:
	TArray<Struct WorldMapRequestWorldResponse>                  MapPins;                                           // 0x0(0x10)
	int                                                          MaxMapPins;                                        // 0x10(0x4)
	int                                                          SelectedPin;                                       // 0x14(0x4)
	float                                                        WorldX;                                            // 0x18(0x4)
	float                                                        WorldY;                                            // 0x1c(0x4)
	float                                                        Zoom;                                              // 0x20(0x4)
};


// Size 0x20
class WorldMapRequestWorldResponse: public None
{
public:
	Struct WorldMapWorldData                                     WorldData;                                         // 0x0(0x20)
};


// Size 0x20
class WorldMapWorldData: public None
{
public:
	float                                                        MinX;                                              // 0x0(0x4)
	float                                                        MinY;                                              // 0x4(0x4)
	float                                                        MaxX;                                              // 0x8(0x4)
	float                                                        MaxY;                                              // 0xc(0x4)
	TArray<Struct WorldMapIslandData>                            Islands;                                           // 0x10(0x10)
};


// Size 0x60
class WorldMapIslandData: public None
{
public:
	Struct FText                                                 Name;                                              // 0x0(0x38)
	Struct FString                                               IslandUrl;                                         // 0x38(0x10)
	float                                                        MinX;                                              // 0x48(0x4)
	float                                                        MinY;                                              // 0x4c(0x4)
	float                                                        MaxX;                                              // 0x50(0x4)
	float                                                        MaxY;                                              // 0x54(0x4)
	float                                                        Rotation;                                          // 0x58(0x4)
	float                                                        LabelOffset;                                       // 0x5c(0x4)
};


// Size 0x1
class WorldMapRequestWorld: public None
{
public:
};


// Size 0x20
class CapstanDesc: public None
{
public:
	Class StaticMesh*                                            CapstanBodyMesh;                                   // 0x0(0x8)
	Class StaticMesh*                                            CapstanArmMesh;                                    // 0x8(0x8)
	Class StaticMesh*                                            CapstanReleaseMesh;                                // 0x10(0x8)
	Class StaticMesh*                                            CapstanRopeMesh;                                   // 0x18(0x8)
};


// Size 0x68
class CapstanAudioParams: public None
{
public:
	Class WwiseEvent*                                            CapstanStart;                                      // 0x0(0x8)
	Class WwiseEvent*                                            CapstanStop;                                       // 0x8(0x8)
	Class WwiseEvent*                                            CapstanDamagedStart;                               // 0x10(0x8)
	Class WwiseEvent*                                            CapstanDamagedStop;                                // 0x18(0x8)
	Class WwiseEvent*                                            CapstanStopFullyRaised;                            // 0x20(0x8)
	Class WwiseEvent*                                            CapstanStopFullyLowered;                           // 0x28(0x8)
	Class WwiseObjectPoolWrapper*                                CapstanEmitterPool;                                // 0x30(0x8)
	struct FName                                                 CapstanTurnRateRtpc;                               // 0x38(0x8)
	float                                                        CapstanTurnMinRtpcValue;                           // 0x40(0x4)
	float                                                        CapstanTurnMaxRtpcValue;                           // 0x44(0x4)
	struct FName                                                 BoatVelocityRtpc;                                  // 0x48(0x8)
	float                                                        BoatVelocityMinRtpcValue;                          // 0x50(0x4)
	float                                                        BoatVelocityMaxRtpcValue;                          // 0x54(0x4)
	float                                                        EmpiricalMaxShipVelocity;                          // 0x58(0x4)
	struct FName                                                 CapstanDamageRtpc;                                 // 0x5c(0x8)
	float                                                        CapstanDamageRtpcMaxValue;                         // 0x64(0x4)
};


// Size 0x8
class CapstanNetState: public None
{
public:
	float                                                        TargetRatio;                                       // 0x0(0x4)
	bool                                                         IsLocked;                                          // 0x4(0x1)
};


// Size 0x14
class CapstanParams: public None
{
public:
	float                                                        MaxVelocityPerPlayer;                              // 0x0(0x4)
	float                                                        MaxFreeLoweringVelocity;                           // 0x4(0x4)
	float                                                        MaxError;                                          // 0x8(0x4)
	float                                                        CorrectiveForceMultiplier;                         // 0xc(0x4)
	float                                                        PlayerAnimationOnCapstanMultiplier;                // 0x10(0x4)
};


// Size 0x18
class RepairableAuthoritiveRepairState: public None
{
public:
	byte                                                         RepairableState;                                   // 0x0(0x1)
	TArray<Weakclass RepairableState>                            RepairingList;                                     // 0x8(0x10)
};


// Size 0x10
class BookcaseCompanyFullnessData: public None
{
public:
	float                                                        CurrentFullness;                                   // 0x0(0x4)
	class                                                        Company;                                           // 0x8(0x8)
};


// Size 0x18
class BookcaseIndicatorSetting: public None
{
public:
	float                                                        AppearThreshold;                                   // 0x0(0x4)
	class                                                        RelevantCompany;                                   // 0x8(0x8)
	Class StaticMeshComponent*                                   IndicatorMesh;                                     // 0x10(0x8)
};


// Size 0x28
class CompanyCargoRunHandInStats: public None
{
public:
	class                                                        CompanyId;                                         // 0x0(0x8)
	TArray<Struct CompanyId>                                     StatsToFireOnHandIn;                               // 0x8(0x10)
	TArray<Struct StatsToFireOnHandIn>                           StatsToFireOnDamagedHandIn;                        // 0x18(0x10)
};


// Size 0x18
class CompanySpecificCargoRunStats: public None
{
public:
	class                                                        CompanyId;                                         // 0x0(0x8)
	TArray<Struct CompanyId>                                     StatsToFireUponPerfectOnTimeHandIn;                // 0x8(0x10)
};


// Size 0x28
class CompanySpecificCargoRunReward: public None
{
public:
	class                                                        CompanyId;                                         // 0x0(0x8)
	Struct CargoRunReward                                        Reward;                                            // 0x8(0x20)
};


// Size 0x20
class CargoRunReward: public None
{
public:
	TArray<Struct CompanyId>                                     OnTimeRewards;                                     // 0x0(0x10)
	TArray<Struct OnTimeRewards>                                 LateRewards;                                       // 0x10(0x10)
};


// Size 0x18
class CargoRunMapContents: public None
{
public:
	Struct Guid                                                  NPCId;                                             // 0x0(0x10)
	int                                                          CompanyIndex;                                      // 0x10(0x4)
	int                                                          NumOfItems;                                        // 0x14(0x4)
};


// Size 0x20
class CargoRunQuestCategoryGroup: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	struct FName                                                 GroupName;                                         // 0x4(0x8)
	TArray<Struct CargoRunQuestRandomRequiredItemsEntry>         RequiredItemEntries;                               // 0x10(0x10)
};


// Size 0x10
class CargoRunQuestRandomRequiredItemsEntry: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	int                                                          MaxNum;                                            // 0x4(0x4)
	class                                                        RequiredItem;                                      // 0x8(0x8)
};


// Size 0x30
class CarouselPirateDesc: public None
{
public:
	int                                                          Seed;                                              // 0x0(0x4)
	byte                                                         Gender;                                            // 0x4(0x1)
	byte                                                         Ethnicity;                                         // 0x5(0x1)
	float                                                        Age;                                               // 0x8(0x4)
	Struct RadialCoordinate                                      BodyShape;                                         // 0xc(0x8)
	float                                                        Dirtiness;                                         // 0x14(0x4)
	float                                                        Wonkiness;                                         // 0x18(0x4)
	TArray<Class Wonkiness>                                      Outfit;                                            // 0x20(0x10)
};


// Size 0xc8
class CarouselPirateGeneratorParams: public None
{
public:
	int                                                          MinNumOfEachGender;                                // 0x0(0x4)
	int                                                          MinNumOfEachEthnicity;                             // 0x4(0x4)
	TArray<Struct MinNumOfEachEthnicity>                         Groups;                                            // 0x8(0x10)
	Struct CarouselPirateGroup                                   Default;                                           // 0x18(0x6c)
	Struct CarouselPirateClothing                                MaleClothing;                                      // 0x88(0x20)
	Struct CarouselPirateClothing                                FemaleClothing;                                    // 0xa8(0x20)
};


// Size 0x20
class CarouselPirateClothing: public None
{
public:
	TArray<Struct CarouselPirateClothingItem>                    AvailableItems;                                    // 0x0(0x10)
	TArray<Struct CarouselPirateClothingCategoryBias>            Probabilities;                                     // 0x10(0x10)
};


// Size 0x10
class CarouselPirateClothingCategoryBias: public None
{
public:
	class                                                        Category;                                          // 0x0(0x8)
	float                                                        LikelihoodOfHaving;                                // 0x8(0x4)
	bool                                                         ProgressivlyDecreaseChance;                        // 0xc(0x1)
};


// Size 0x10
class CarouselPirateClothingItem: public None
{
public:
	class                                                        Item;                                              // 0x0(0x8)
	byte                                                         EthnicityFilter;                                   // 0x8(0x1)
};


// Size 0x6c
class CarouselPirateGroup: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	int                                                          Count;                                             // 0x8(0x4)
	Struct FloatRange                                            Age;                                               // 0xc(0x10)
	Struct FloatRange                                            Wonkiness;                                         // 0x1c(0x10)
	Struct FloatRange                                            Dirt;                                              // 0x2c(0x10)
	Struct CarouselPirateBodyshape                               MaleBodyShape;                                     // 0x3c(0x18)
	Struct CarouselPirateBodyshape                               FemaleBodyShape;                                   // 0x54(0x18)
};


// Size 0x18
class CarouselPirateBodyshape: public None
{
public:
	float                                                        RandomizationBias;                                 // 0x0(0x4)
	Struct FloatRange                                            ShapeMagnitude;                                    // 0x4(0x10)
	Struct CarouselPirateBodyshapeCompass                        BodyShapeCompass;                                  // 0x14(0x2)
};


// Size 0x2
class CarouselPirateBodyshapeCompass: public None
{
public:
	byte                                                         StartDirection;                                    // 0x0(0x1)
	byte                                                         EndDirection;                                      // 0x1(0x1)
};


// Size 0x18
class CatalogOfferCommodity: public None
{
public:
	class                                                        RequiredEmissary;                                  // 0x0(0x8)
	Struct CommoditySelectionType                                Type;                                              // 0x8(0x8)
	byte                                                         Demand;                                            // 0x10(0x1)
};


// Size 0x20
class CatalogOfferBundleDataAsset: public None
{
public:
	Class CatalogOfferDataAsset*                                 OwningBundle;                                      // 0x0(0x8)
	Struct StringAssetReference                                  TileImage;                                         // 0x10(0x10)
};


// Size 0x10
class CatalogOfferRewardDataAsset: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
	Struct RewardId                                              Reward;                                            // 0x8(0x8)
};


// Size 0x28
class CatalogOfferPrerequisitesDataAsset: public None
{
public:
	TArray<Class CategoryDefaultsUnit>                           Entitlements;                                      // 0x0(0x10)
	TArray<Struct CatalogOfferCompanyLevelDataAsset>             CompanyLevel;                                      // 0x10(0x10)
};


// Size 0x10
class CatalogOfferCompanyLevelDataAsset: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
};


// Size 0x18
class CategoryDefaultsUnit: public None
{
public:
	TArray<Str None>                                             PartialStrings;                                    // 0x0(0x10)
	class                                                        Category;                                          // 0x10(0x8)
};


// Size 0x1c0
class PlayerMusicController: public None
{
public:
	Class PlayerMusicControllerParams*                           PlayerMusicParams;                                 // 0x0(0x8)
	Class Actor*                                                 LocalPlayerActor;                                  // 0x38(0x8)
	Class PlayerOceanAudioComponent*                             PlayerOceanAudioComponent;                         // 0x40(0x8)
	Class PlayerAtmosphericsAudioComponent*                      AtmosphericsAudioComponent;                        // 0x48(0x8)
	Class AthenaPlayerCharacter*                                 AthenaPlayerCharacter;                             // 0x50(0x8)
	Class AthenaWorldSettings*                                   AthenaWorldSettings;                               // 0x58(0x8)
	TArray<Struct AudioStingRelevantShips>                       RelevantAudioStingShips;                           // 0x198(0x10)
	TArray<Struct AudioStingShipsSpotted>                        AudioStingShipsSpottedRecently;                    // 0x1a8(0x10)
};


// Size 0x10
class AudioStingShipsSpotted: public None
{
public:
	Class Actor*                                                 SpottedShip;                                       // 0x0(0x8)
	double                                                       TimeSpotted;                                       // 0x8(0x8)
};


// Size 0x10
class AudioStingRelevantShips: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	bool                                                         IsAIShip;                                          // 0x8(0x1)
};


// Size 0x18
class NamedStateSelector: public None
{
public:
	TArray<Struct NameActiveStatePair>                           NamedStates;                                       // 0x0(0x10)
	struct FName                                                 DefaultStateName;                                  // 0x10(0x8)
};


// Size 0xc
class NameActiveStatePair: public None
{
public:
	struct FName                                                 StateName;                                         // 0x0(0x8)
	bool                                                         IsActive;                                          // 0x8(0x1)
};


// Size 0x18
class FogTypeToAudio: public None
{
public:
	byte                                                         FogBankType;                                       // 0x0(0x1)
	Class WwiseEvent*                                            FogMusicPlayEvent;                                 // 0x8(0x8)
	Class WwiseEvent*                                            FogMusicStopEvent;                                 // 0x10(0x8)
};


// Size 0x20
class StateCategoryGroup: public None
{
public:
	struct FName                                                 GroupName;                                         // 0x18(0x8)
};


// Size 0x10
class HealthChangeAudio: public None
{
public:
	byte                                                         Reason;                                            // 0x0(0x1)
	Class WwiseEvent*                                            Sfx;                                               // 0x8(0x8)
};


// Size 0x28
class DamageTypeToAudio: public None
{
public:
	class                                                        DamagerType;                                       // 0x0(0x8)
	struct FName                                                 AudioState;                                        // 0x8(0x8)
	Class WwiseEvent*                                            StartAudioEvent;                                   // 0x10(0x8)
	Class WwiseEvent*                                            EndAudioEvent;                                     // 0x18(0x8)
	float                                                        Duration;                                          // 0x20(0x4)
};


// Size 0x1c
class CharacterSocketFootWaterImpactResult: public None
{
public:
	Struct Vector                                                Position;                                          // 0x0(0xc)
	Struct Vector                                                SocketVelocity;                                    // 0xc(0xc)
	int                                                          FootIndex;                                         // 0x18(0x4)
};


// Size 0x20
class CharacterFootWaterImpactResult: public None
{
public:
	Struct CharacterSocketFootWaterImpactResult                  SocketFootImpactResult;                            // 0x0(0x1c)
	int                                                          FootIndex;                                         // 0x1c(0x4)
};


// Size 0xd0
class CharacterFootImpactResult: public None
{
public:
	Struct HitResult                                             HitResult;                                         // 0x0(0x80)
	byte                                                         FootImpactType;                                    // 0x80(0x1)
	Struct Transform                                             SocketTransform;                                   // 0x90(0x30)
	Struct Vector                                                SocketVelocity;                                    // 0xc0(0xc)
	int                                                          FootIndex;                                         // 0xcc(0x4)
};


// Size 0x28
class CharacterSocketCollisionDesc: public None
{
public:
	struct FName                                                 SocketName;                                        // 0x0(0x8)
	Class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x8(0x8)
	byte                                                         TraceType;                                         // 0x10(0x1)
	float                                                        TraceDistance;                                     // 0x14(0x4)
	float                                                        TraceOffset;                                       // 0x18(0x4)
	byte                                                         ResultType;                                        // 0x1c(0x1)
	int                                                          FootIndex;                                         // 0x20(0x4)
};


// Size 0x28
class SocketCollisionExitWaterEvent: public None
{
public:
};


// Size 0x28
class SocketCollisionEnterWaterEvent: public None
{
public:
};


// Size 0xd0
class SocketCollisionEvent: public None
{
public:
};


// Size 0xc
class ChestOfRageReplicatedData: public None
{
public:
	byte                                                         State;                                             // 0x0(0x1)
	float                                                        RageValue;                                         // 0x4(0x4)
	bool                                                         HasBeenActivated;                                  // 0x8(0x1)
};


// Size 0x8
class EventReceiveChestOfRageComponentState: public None
{
public:
	Class ChestOfRageComponent*                                  Source;                                            // 0x0(0x8)
};


// Size 0x8
class ChestOfRageDamageTableEntry: public None
{
public:
	byte                                                         Reason;                                            // 0x0(0x1)
	float                                                        TimeToAdd;                                         // 0x4(0x4)
};


// Size 0xc0
class EmoteFlourishCategoryMapping: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	Struct StringAssetReference                                  IconPath;                                          // 0x8(0x10)
	Struct EmoteData                                             EmoteData;                                         // 0x18(0x98)
	Struct FString                                               PairName;                                          // 0xb0(0x10)
};


// Size 0x10
class ClothingLoadout: public None
{
public:
	TArray<Class ClothingLoadoutContainer>                       Items;                                             // 0x0(0x10)
};


// Size 0x18
class ClothingLoadoutContainer: public None
{
public:
	Struct ClothingLoadout                                       Loadout;                                           // 0x0(0x10)
	bool                                                         HasBeenSet;                                        // 0x10(0x1)
};


// Size 0x28
class CloudWeatherParameters: public None
{
public:
	Struct Vector2D                                              DefaultCloudVelocity;                              // 0x0(0x8)
	Class MaterialParameterCollection*                           AtmosphericMaterialParams;                         // 0x8(0x8)
	float                                                        GlobalAtmosphericPressure;                         // 0x10(0x4)
	float                                                        AtmosphericPressureThresholdSize;                  // 0x14(0x4)
	float                                                        MaxWindDelayLength;                                // 0x18(0x4)
	float                                                        WindSpeedMultiplier;                               // 0x1c(0x4)
	bool                                                         UsesGlobalWindService;                             // 0x20(0x1)
	bool                                                         UsesPressureZones;                                 // 0x20(0x1)
	bool                                                         CloudsCastShadows;                                 // 0x20(0x1)
	bool                                                         PressureIsControlledByParameterCollection;         // 0x20(0x1)
};


// Size 0x20
class CloudTileParameters: public None
{
public:
	TArray<Struct CloudDomeParameters>                           Meshes;                                            // 0x0(0x10)
	int                                                          Samples;                                           // 0x10(0x4)
	int                                                          Seed;                                              // 0x14(0x4)
	float                                                        MeshScaleMultiplier;                               // 0x18(0x4)
	bool                                                         ShouldCloudTileBeGenerated;                        // 0x1c(0x1)
};


// Size 0x28
class CloudDomeParameters: public None
{
public:
	float                                                        Width;                                             // 0x0(0x4)
	float                                                        DomeToTileProportion;                              // 0x4(0x4)
	float                                                        Height;                                            // 0x8(0x4)
	float                                                        HighPressureExtraHeight;                           // 0xc(0x4)
	float                                                        FadeProportion;                                    // 0x10(0x4)
	float                                                        DistanceCurvatureOvershoot;                        // 0x14(0x4)
	float                                                        DistantStreetCloudRotation;                        // 0x18(0x4)
	float                                                        ProportionOfCloudDomeToAlwaysUpdate;               // 0x1c(0x4)
	int                                                          SplitRemainingCloudsOverThisManyUpdates;           // 0x20(0x4)
	bool                                                         UpdateClosestProportionEveryOtherFrame;            // 0x24(0x1)
	bool                                                         EnableDistanceCurvature;                           // 0x25(0x1)
};


// Size 0x50
class CoastObject: public None
{
public:
	Class SplineComponent*                                       CoastSplineInternal;                               // 0x0(0x8)
	Class SplineComponent*                                       InnerSplineInternal;                               // 0x8(0x8)
	Struct Vector                                                SplineOrigin;                                      // 0x10(0xc)
	float                                                        CoastalLookupSquaredDistance;                      // 0x1c(0x4)
};


// Size 0x18
class HUDBlur: public None
{
public:
	Class MaterialParameterCollectionInstance*                   ScreenEffectsMaterialParameterCollectionInstance;  // 0x0(0x8)
};


// Size 0x18
class HUDBlurParams: public None
{
public:
	Class MaterialParameterCollection*                           ScreenEffectsMaterialParameterCollection;          // 0x0(0x8)
	Struct HUDBlurSourceParams                                   MenuBlurParams;                                    // 0x8(0x8)
	Struct HUDBlurSourceParams                                   MigrationBlurParams;                               // 0x10(0x8)
};


// Size 0x8
class HUDBlurSourceParams: public None
{
public:
	float                                                        SecondsToFullyBlur;                                // 0x0(0x4)
	float                                                        SecondsToFullyUnblur;                              // 0x4(0x4)
};


// Size 0x98
class HttpClientComponentRequestEvent: public None
{
public:
	Struct FString                                               Uri;                                               // 0x0(0x10)
	Struct FString                                               Body;                                              // 0x10(0x10)
	bool                                                         ShouldEncrypt;                                     // 0x20(0x1)
	bool                                                         ShouldAuthorize;                                   // 0x21(0x1)
	Struct FString                                               Method;                                            // 0x28(0x10)
	Struct FString                                               Id;                                                // 0x88(0x10)
};


// Size 0x28
class HttpClientComponentResponseEvent: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
	Struct FString                                               Body;                                              // 0x8(0x10)
	Struct FString                                               Id;                                                // 0x18(0x10)
};


// Size 0x30
class PlayerTalkingSettings: public None
{
public:
	Struct LinearColor                                           IconTint;                                          // 0x0(0x10)
	Class Texture2D*                                             Icon;                                              // 0x10(0x8)
	float                                                        ScreenEdgePadding;                                 // 0x18(0x4)
	float                                                        Scale;                                             // 0x1c(0x4)
	float                                                        FadeInTimeInSeconds;                               // 0x20(0x4)
};


// Size 0x18
class CoherentToWwiseEventDataAssetEntry: public None
{
public:
	Struct FString                                               CueKey;                                            // 0x0(0x10)
	Class WwiseEvent*                                            AudioEvent;                                        // 0x10(0x8)
};


// Size 0xf8
class AmmoUI: public None
{
public:
	Class Pawn*                                                  TargetPawn;                                        // 0x18(0x8)
};


// Size 0x170
class HealthUI: public None
{
public:
	float                                                        MinVisibleHealth;                                  // 0x0(0x4)
	float                                                        ContinuousTimePerUpdate;                           // 0x4(0x4)
	Class Pawn*                                                  TargetPawn;                                        // 0x20(0x8)
};


// Size 0x10
class CompanyRankData: public None
{
public:
	TArray<Struct CompanyRankGradeData>                          RankGradeData;                                     // 0x0(0x10)
};


// Size 0x18
class CompanyRankGradeData: public None
{
public:
	class                                                        Rank;                                              // 0x0(0x8)
	Struct StringAssetReference                                  Ribbon;                                            // 0x8(0x10)
};


// Size 0x60
class CompanyShopInfo: public None
{
public:
	bool                                                         ShouldShowCompanyInfo;                             // 0x0(0x1)
	Struct StringAssetReference                                  InfoSkin;                                          // 0x8(0x10)
	Struct FText                                                 InfoTitle;                                         // 0x18(0x38)
	TArray<Struct FText>                                         InfoTips;                                          // 0x50(0x10)
};


// Size 0x20
class CompanyShopSkin: public None
{
public:
	Struct StringAssetReference                                  TopBanner;                                         // 0x0(0x10)
	Struct StringAssetReference                                  BottomBanner;                                      // 0x10(0x10)
};


// Size 0xb8
class CompanySkin: public None
{
public:
	Struct StringAssetReference                                  BackgroundImage;                                   // 0x0(0x10)
	Struct StringAssetReference                                  RibbonImage;                                       // 0x10(0x10)
	byte                                                         Style;                                             // 0x20(0x1)
	Struct FString                                               RankIncreaseAudioCue;                              // 0x28(0x10)
	Struct FString                                               RankIncreaseStopAudioCue;                          // 0x38(0x10)
	Struct FString                                               RankLevelUpAudioCue;                               // 0x48(0x10)
	Struct FString                                               RankTriggerAudioCue;                               // 0x58(0x10)
	Struct FString                                               EmissaryRankIncreaseAudioCue;                      // 0x68(0x10)
	Struct FString                                               EmissaryRankIncreaseStopAudioCue;                  // 0x78(0x10)
	Struct FString                                               EmissaryRankLevelUpAudioCue;                       // 0x88(0x10)
	Struct FString                                               EmissaryRankTriggerAudioCue;                       // 0x98(0x10)
	Struct FString                                               EmissaryRankLevelUpMusicCue;                       // 0xa8(0x10)
};


// Size 0x18
class CompanyProgressIcons: public None
{
public:
	TArray<Struct CompanyProgressIcon>                           Icons;                                             // 0x0(0x10)
};


// Size 0x10
class CompanyProgressIcon: public None
{
public:
	Struct StringAssetReference                                  Icon;                                              // 0x0(0x10)
};


// Size 0x10
class CompanyReputationProgressModelCollection: public None
{
public:
	TArray<Struct CompanyReputationProgressModel>                CompanyProgress;                                   // 0x0(0x10)
};


// Size 0x28
class CompanyReputationProgressModel: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x0(0x8)
	Struct CompanyLevelDefinition                                NextCompanyLevel;                                  // 0x10(0x8)
	Struct FString                                               Sig;                                               // 0x18(0x10)
};


// Size 0x8
class CompanyLevelDefinition: public None
{
public:
};


// Size 0x10
class PlayerNewLevelEvent: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x8(0x8)
};


// Size 0x10
class EventCompanyRankProgressUpdateNotification: public None
{
public:
	struct FName                                                 Company;                                           // 0x0(0x8)
};


// Size 0x1
class PlayerCompanyProgressUpdatedEvent: public None
{
public:
};


// Size 0x50
class EventCompanyProgressUpdateNotification: public None
{
public:
	Struct CompanyReputationProgressModel                        CurrentProgress;                                   // 0x0(0x28)
	Struct CompanyReputationProgressModel                        PreviousProgress;                                  // 0x28(0x28)
};


// Size 0x10
class CompanyValidationAssetUnit: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
	bool                                                         ShouldHaveLevels;                                  // 0x8(0x1)
	bool                                                         ShouldHaveEmblems;                                 // 0x9(0x1)
};


// Size 0x18
class ConstellationAudioPair: public None
{
public:
	class                                                        ConstellationClass;                                // 0x0(0x8)
	Class WwiseEvent*                                            AudioStartEvent;                                   // 0x8(0x8)
	Class WwiseEvent*                                            AudioStopEvent;                                    // 0x10(0x8)
};


// Size 0x10
class RegisterCeremonyInterface: public None
{
public:
};


// Size 0x98
class ContestCeremonyEvent: public None
{
public:
	TArray<class AudioEvents*>                                   AudioEvents;                                       // 0x0(0x10)
	TArray<Byte AudioEvents>                                     SpecialEvents;                                     // 0x10(0x10)
	Struct FText                                                 NPCName;                                           // 0x20(0x38)
	Struct FText                                                 NPCMessageToAllPlayers;                            // 0x58(0x38)
	float                                                        TimeToEvent;                                       // 0x90(0x4)
};


// Size 0x18
class ContestEventSet: public None
{
public:
	TArray<Struct ShipIdentityOwnership>                         Events;                                            // 0x0(0x10)
	byte                                                         BelongingStage;                                    // 0x10(0x1)
	byte                                                         StageTimePivot;                                    // 0x11(0x1)
};


// Size 0x180
class ShipIdentityOwnership: public None
{
public:
	Struct Guid                                                  OwningCrewID;                                      // 0x0(0x10)
	Struct ShipLiveryCatalogueEntry                              Identity;                                          // 0x10(0x170)
};


// Size 0x170
class ShipLiveryCatalogueEntry: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct StringAssetReference                                  Desc;                                              // 0x10(0x10)
	Struct StringAssetReference                                  RowboatLiveryDesc;                                 // 0x20(0x10)
	TArray<Struct FText>                                         Names;                                             // 0x30(0x10)
	class                                                        ShipSize;                                          // 0x40(0x8)
	bool                                                         AvailableToGame;                                   // 0x48(0x1)
	struct FName                                                 FeatureName;                                       // 0x4c(0x8)
	Struct FText                                                 ShipTeamName;                                      // 0x58(0x38)
	Struct FText                                                 ArenaCrewWelcomeMessage;                           // 0x90(0x38)
	Struct FText                                                 ShipUINotificationTeamName;                        // 0xc8(0x38)
	Class Texture*                                               ShipScrollTeamIcon;                                // 0x100(0x8)
	Struct StringAssetReference                                  ShipToastTeamIcon;                                 // 0x108(0x10)
	Struct StringAssetReference                                  ShipToastTeamBackgroundImage;                      // 0x118(0x10)
	Struct StringAssetReference                                  ShipToastForegroundArtWork;                        // 0x128(0x10)
	Struct StringAssetReference                                  ShipTeamBackgroundImage;                           // 0x138(0x10)
	struct FName                                                 AudioEventName;                                    // 0x148(0x8)
	Struct StringAssetReference                                  TeamTavernBannerTexture;                           // 0x150(0x10)
	Class Texture*                                               CrewLiveryOverlayIcon;                             // 0x160(0x8)
	bool                                                         AvailableWhenFeatureEnabled;                       // 0x168(0x1)
	bool                                                         AvailableWhenFeatureDisabled;                      // 0x169(0x1)
};


// Size 0x10
class ShipLiveryCatalogue: public None
{
public:
	TArray<Struct OwnedCrewCostumes>                             Liveries;                                          // 0x0(0x10)
};


// Size 0x20
class OwnedCrewCostumes: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<AssetClass CrewId>                                    Costumes;                                          // 0x10(0x10)
};


// Size 0xe8
class TimedContestEventAction: public None
{
public:
	Struct FText                                                 NPCName;                                           // 0x8(0x38)
	Struct FText                                                 NPCMessageToAllPlayers;                            // 0x40(0x38)
	float                                                        Duration;                                          // 0x78(0x4)
	TArray<Byte Duration>                                        SpecialEvents;                                     // 0x80(0x10)
	TArray<class AudioEvents*>                                   AudioEvents;                                       // 0x90(0x10)
};


// Size 0x28
class DebugCrewContestInfo: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct FString                                               ShipName;                                          // 0x10(0x10)
	int                                                          Score;                                             // 0x20(0x4)
};


// Size 0x8
class AchievementCompleteContest: public None
{
public:
};


// Size 0x28
class ContestCrewRequirementData: public None
{
public:
	int                                                          CrewCount;                                         // 0x0(0x4)
	Struct FString                                               CrewCountServicesConfigRetrievalString;            // 0x8(0x10)
	TArray<Struct ShipSizeRequirementData>                       OpenCrewRequirementData;                           // 0x18(0x10)
};


// Size 0x20
class ShipSizeRequirementData: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	int                                                          OpenCrewMemberCount;                               // 0x8(0x4)
	Struct FString                                               OpenCrewCountRetrivalString;                       // 0x10(0x10)
};


// Size 0x1
class UpdateContestUI: public None
{
public:
};


// Size 0x20
class ContestChestDugUpEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Class Actor*                                                 DiscoveringCharacter;                              // 0x10(0x8)
	Class ItemInfo*                                              TreasureChestItemInformation;                      // 0x18(0x8)
};


// Size 0x30
class CrewScoreAppendedEvent: public None
{
public:
	byte                                                         ScoreId;                                           // 0x0(0x1)
	Struct Guid                                                  CrewId;                                            // 0x4(0x10)
	int                                                          CrewScore;                                         // 0x14(0x4)
	byte                                                         ScoreReason;                                       // 0x18(0x1)
	Struct StringAssetReference                                  ScoringIconAssetReference;                         // 0x20(0x10)
};


// Size 0x1c
class CrewScoredEvent: public None
{
public:
	byte                                                         ScoreId;                                           // 0x0(0x1)
	Struct Guid                                                  CrewId;                                            // 0x4(0x10)
	int                                                          CrewScore;                                         // 0x14(0x4)
	byte                                                         ReasonForScoring;                                  // 0x18(0x1)
};


// Size 0x1c
class CrewWinEvent: public None
{
public:
	byte                                                         ScoreId;                                           // 0x0(0x1)
	Struct Guid                                                  CrewId;                                            // 0x4(0x10)
	int                                                          CrewScore;                                         // 0x14(0x4)
	byte                                                         ReasonForScoring;                                  // 0x18(0x1)
};


// Size 0x18
class RequestSilverEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Class WieldableItem*                                         WieldableItemSold;                                 // 0x10(0x8)
};


// Size 0xe0
class ScoreRewardData: public None
{
public:
	TArray<Struct ScoreRewardWieldableItemData>                  WieldableItemScores;                               // 0x0(0x10)
	TArray<Struct ScoreRewardShipPartData>                       ShipPartScores;                                    // 0x10(0x10)
	Struct ScoreRewardValueData                                  KillingPlayerScore;                                // 0x20(0x30)
	Struct ScoreRewardValueData                                  DownedPlayerScore;                                 // 0x50(0x30)
	Struct ScoreRewardValueData                                  CrewShipSunkScore;                                 // 0x80(0x30)
	Struct ScoreRewardValueData                                  DigUpChestScore;                                   // 0xb0(0x30)
};


// Size 0x30
class ScoreRewardValueData: public None
{
public:
	int                                                          ScoreToAward;                                      // 0x0(0x4)
	Struct FString                                               ServicesConfigRetrievalString;                     // 0x8(0x10)
	byte                                                         ReasonForScore;                                    // 0x18(0x1)
	TArray<Int >                                                 ScoreByPeriod;                                     // 0x20(0x10)
};


// Size 0x38
class ScoreRewardShipPartData: public None
{
public:
	class                                                        ShipPart;                                          // 0x0(0x8)
	Struct ScoreRewardValueData                                  Score;                                             // 0x8(0x30)
};


// Size 0x68
class ScoreRewardWieldableItemData: public None
{
public:
	class                                                        WieldableItemClass;                                // 0x0(0x8)
	Struct ScoreRewardValueData                                  NotStolenScore;                                    // 0x8(0x30)
	Struct ScoreRewardValueData                                  StolenScore;                                       // 0x38(0x30)
};


// Size 0x20
class ScoreReasonIcons: public None
{
public:
	byte                                                         ReasonForScore;                                    // 0x0(0x1)
	Struct StringAssetReference                                  ScoringIconAssetReference;                         // 0x8(0x10)
	Class Texture*                                               ScoreScrollScoringIcon;                            // 0x18(0x8)
};


// Size 0x30
class ContestScoreTelemetryGameEvent: public None
{
public:
	byte                                                         ScoreReason;                                       // 0x0(0x1)
	int                                                          CurrentScore;                                      // 0x4(0x4)
	int                                                          ScoreChangeAmount;                                 // 0x8(0x4)
	Struct FString                                               ScoreContext;                                      // 0x10(0x10)
	Struct Guid                                                  InstigatorId;                                      // 0x20(0x10)
};


// Size 0x80
class ContestUIDescriptions: public None
{
public:
	Class PopUpMessageDesc*                                      NewMapDesc;                                        // 0x0(0x8)
	Class PopUpMessageDesc*                                      ShipSunkDesc;                                      // 0x8(0x8)
	Struct FText                                                 ContestStartBlindText;                             // 0x10(0x38)
	Struct FText                                                 ContestEndBlindText;                               // 0x48(0x38)
};


// Size 0x10
class ShipLiveryTeamSet: public None
{
public:
	TArray<Struct OtherCrewMuteStateResponse>                    ShipCatalogue;                                     // 0x0(0x10)
};


// Size 0x1
class OtherCrewMuteStateResponse: public None
{
public:
	byte                                                         MuteState;                                         // 0x0(0x1)
};


// Size 0x1
class OtherCrewMuteStateRequest: public None
{
public:
};


// Size 0x1
class CrewMuteOthersPhrasesEvent: public None
{
public:
	bool                                                         IsMuted;                                           // 0x0(0x1)
};


// Size 0x18
class CrewMutePlayerPhrasesEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	bool                                                         IsMuted;                                           // 0x10(0x1)
};


// Size 0x1
class CrewMuteOthersChatEvent: public None
{
public:
	bool                                                         IsMuted;                                           // 0x0(0x1)
};


// Size 0x18
class CrewMutePlayerChatEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	bool                                                         IsMuted;                                           // 0x10(0x1)
};


// Size 0x1
class CrewMuteOthersVoiceEvent: public None
{
public:
	bool                                                         IsMuted;                                           // 0x0(0x1)
};


// Size 0x18
class CrewMutePlayerVoiceEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	bool                                                         IsMuted;                                           // 0x10(0x1)
};


// Size 0x10
class ContestCrewManagementMemberDataEvent: public None
{
public:
	TArray<Struct ContestCrewManagementMemberData>               Members;                                           // 0x0(0x10)
};


// Size 0x38
class ContestCrewManagementMemberData: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	Struct FString                                               GamerTag;                                          // 0x10(0x10)
	byte                                                         Muted;                                             // 0x20(0x1)
	Struct FString                                               CrewIcon;                                          // 0x28(0x10)
};


// Size 0x1
class ContestStopCrewManagementEvent: public None
{
public:
};


// Size 0x1
class ContestRequestCrewManagementEvent: public None
{
public:
};


// Size 0x10
class ContestUpdateScoreBoardTimer: public None
{
public:
	Struct FString                                               TimeRemaining;                                     // 0x0(0x10)
};


// Size 0x28
class ContestLaunchStartBlinds: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x10(0x10)
	float                                                        DisplayDuration;                                   // 0x20(0x4)
};


// Size 0x20
class StagingPlayerWelcomingPopup: public None
{
public:
	Struct Guid                                                  LiveryID;                                          // 0x10(0x10)
};


// Size 0x20
class ContestShipSinkNetworkEvent: public None
{
public:
	Struct Guid                                                  CrewLiveryId;                                      // 0x10(0x10)
};


// Size 0x30
class ContestEndEvent: public None
{
public:
	int                                                          Position;                                          // 0x0(0x4)
	Struct FString                                               Message;                                           // 0x8(0x10)
	TArray<Struct ScoreboardItems>                               Scores;                                            // 0x18(0x10)
	float                                                        HoldDuration;                                      // 0x28(0x4)
};


// Size 0x38
class ScoreboardItems: public None
{
public:
	Struct FString                                               Icon;                                              // 0x0(0x10)
	Struct FString                                               CrewName;                                          // 0x10(0x10)
	Struct FString                                               Score;                                             // 0x20(0x10)
	bool                                                         IsMyCrew;                                          // 0x30(0x1)
};


// Size 0x48
class ContestStartEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
	Struct FString                                               CrewIcon;                                          // 0x10(0x10)
	Struct FString                                               CrewName;                                          // 0x20(0x10)
	TArray<Str >                                                 CrewMembers;                                       // 0x30(0x10)
	float                                                        HoldDuration;                                      // 0x40(0x4)
};


// Size 0x18
class ContestNotificationNetworkEvent: public None
{
public:
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x10
class ContestRequestScoreBoardData: public None
{
public:
};


// Size 0x10
class RequestContestStateEvent: public None
{
public:
};


// Size 0x18
class ContestStateChangedEvent: public None
{
public:
	byte                                                         ContestState;                                      // 0x10(0x1)
};


// Size 0x20
class UpdateScoreBalanceHUDEvent: public None
{
public:
	TArray<Struct ContestLeaderboardEntry>                       ContestLeaderboard;                                // 0x10(0x10)
};


// Size 0x38
class ContestLeaderboardEntry: public None
{
public:
	Struct FString                                               CrewIconPath;                                      // 0x10(0x10)
	bool                                                         IsMyCrew;                                          // 0x20(0x1)
	int                                                          Amount;                                            // 0x24(0x4)
	Struct FString                                               DisplayAmount;                                     // 0x28(0x10)
};


// Size 0x30
class ScoreGrantedNotificationUIEvent: public None
{
public:
	byte                                                         ScoreId;                                           // 0x0(0x1)
	Struct FString                                               DisplayAmount;                                     // 0x8(0x10)
	int                                                          Amount;                                            // 0x18(0x4)
	Struct FString                                               ScoringIconPath;                                   // 0x20(0x10)
};


// Size 0x28
class TrackedCrewInContest: public None
{
public:
	TArray<Struct PlayersSpawningInTavern>                       PlayersSpawningInTavern;                           // 0x18(0x10)
};


// Size 0x10
class PlayersSpawningInTavern: public None
{
public:
	Class PlayerState*                                           PlayerState;                                       // 0x0(0x8)
};


// Size 0x10
class CrewShipPersistentDataManager: public None
{
public:
	TArray<Struct CrewShipPersistentData>                        Data;                                              // 0x0(0x10)
};


// Size 0x18
class CrewShipPersistentData: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Class CrewShipManifest*                                      CrewShipManifest;                                  // 0x10(0x8)
};


// Size 0x4
class VoyageQuestsBegun: public None
{
public:
	int                                                          QuestCount;                                        // 0x0(0x4)
};


// Size 0x8
class VoyageChapterBegun: public None
{
public:
	int                                                          ChapterIndex;                                      // 0x0(0x4)
	int                                                          ChapterCount;                                      // 0x4(0x4)
};


// Size 0x90
class VoyageChestDiscoveredInContest: public None
{
public:
	Struct FString                                               DiscovererName;                                    // 0x10(0x10)
	bool                                                         IsDiscovererMe;                                    // 0x20(0x1)
	bool                                                         PlayAudio;                                         // 0x21(0x1)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x28(0x8)
	Struct FText                                                 CrewName;                                          // 0x30(0x38)
	Struct StringAssetReference                                  ToastBackgroundImage;                              // 0x68(0x10)
	Struct StringAssetReference                                  BackgroundImage;                                   // 0x78(0x10)
	struct FName                                                 AudioEventName;                                    // 0x88(0x8)
};


// Size 0x30
class VoyageChestDiscovered: public None
{
public:
	Struct NetActorPtr                                           PlayerStateOfDiscoverer;                           // 0x0(0x14)
	bool                                                         IsDiscovererMe;                                    // 0x14(0x1)
	struct FName                                                 ChestRarity;                                       // 0x18(0x8)
	bool                                                         PlayAudio;                                         // 0x20(0x1)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x28(0x8)
};


// Size 0x38
class VoyageCancelled: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
};


// Size 0x40
class VoyageComplete: public None
{
public:
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x0(0x1)
	Struct FText                                                 Title;                                             // 0x8(0x38)
};


// Size 0x38
class VoyageBegun: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
};


// Size 0x40
class ContestMapCrewData: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	bool                                                         IsLocalCrew;                                       // 0x10(0x1)
	Class Texture*                                               CrewIcon;                                          // 0x18(0x8)
	Class Texture*                                               ScoreIcon;                                         // 0x20(0x8)
	Class Texture*                                               UnderlineIcon;                                     // 0x28(0x8)
	struct FName                                                 CrewName;                                          // 0x30(0x8)
	int                                                          Score;                                             // 0x38(0x4)
};


// Size 0x68
class ContestMapLayoutScoreInfo: public None
{
public:
	Struct TreasureMapWidgetTexture                              ScoreInfoIcon;                                     // 0x0(0x28)
	Struct TreasureMapWidgetText                                 ScoreInfoText;                                     // 0x28(0x38)
	byte                                                         ScoreReason;                                       // 0x60(0x1)
};


// Size 0xe8
class ContestMapLayoutCrew: public None
{
public:
	Struct TreasureMapWidgetTexture                              CrewIcon;                                          // 0x0(0x28)
	Struct TreasureMapWidgetTexture                              ScoreIcon;                                         // 0x28(0x28)
	Struct TreasureMapWidgetTexture                              UnderlineIcon;                                     // 0x50(0x28)
	Struct TreasureMapWidgetText                                 CrewName;                                          // 0x78(0x38)
	Struct TreasureMapWidgetText                                 Score;                                             // 0xb0(0x38)
};


// Size 0x40
class ContestMapContents: public None
{
public:
	Struct FString                                               VoyageName;                                        // 0x0(0x10)
	Struct FString                                               ScoreboardTitle;                                   // 0x10(0x10)
	TArray<Struct ScoreboardTitle>                               CrewsData;                                         // 0x20(0x10)
	TArray<Byte CrewsData>                                       ScoreReasonsToShowInfo;                            // 0x30(0x10)
};


// Size 0x50
class MerchantSpawnData: public None
{
public:
	Struct Transform                                             MerchantTransform;                                 // 0x20(0x30)
};


// Size 0x30
class ContestMigrationRequestMessage: public None
{
public:
	Struct Guid                                                  MigrationId;                                       // 0x0(0x10)
	Struct FString                                               DestinationEndpoint;                               // 0x10(0x10)
	TArray<Struct DestinationEndpoint>                           CrewIds;                                           // 0x20(0x10)
};


// Size 0x20
class QuestVariableContestIslandArchetype: public None
{
public:
};


// Size 0x60
class ContestShipLiverySet: public None
{
public:
	Struct Guid                                                  OwningCrewID;                                      // 0x0(0x10)
};


// Size 0x28
class WeightedContestList: public None
{
public:
	TArray<Struct WeightedEmergentContestVoyageRecipe>           WeightedContests;                                  // 0x8(0x10)
	TArray<Struct WeightedTallTaleContestRecipe>                 WeightedTallTaleContests;                          // 0x18(0x10)
};


// Size 0x10
class WeightedTallTaleContestRecipe: public None
{
public:
	Class TallTaleContestRecipeDataAsset*                        TallTaleContest;                                   // 0x0(0x8)
	int                                                          WeightedChance;                                    // 0x8(0x4)
};


// Size 0x10
class WeightedEmergentContestVoyageRecipe: public None
{
public:
	Class EmergentContestVoyageRecipeDataAsset*                  ContestVoyage;                                     // 0x0(0x8)
	int                                                          WeightedChance;                                    // 0x8(0x4)
};


// Size 0x20
class TallTaleContestInfo: public None
{
public:
	TArray<Class ContestVoyageInfo>                              ValidShipTypes;                                    // 0x0(0x10)
	Struct WeightedTallTaleContestRecipe                         WeightedTallTaleContest;                           // 0x10(0x10)
};


// Size 0x20
class ContestVoyageInfo: public None
{
public:
	TArray<Class ContestVoyagesSelectorUnit>                     ValidShipTypes;                                    // 0x0(0x10)
	Struct WeightedEmergentContestVoyageRecipe                   WeightedContestVoyage;                             // 0x10(0x10)
};


// Size 0x10
class ContestVoyagesSelectorUnit: public None
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x0(0x8)
	Class ContestVoyagesDataAsset*                               ContestVoyages;                                    // 0x8(0x8)
};


// Size 0x50
class CachedRespawnPoint: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct Transform                                             AllocatedRespawnPoint;                             // 0x10(0x30)
	Class ShipSpawnLocation*                                     AllocatedSpawnLocation;                            // 0x40(0x8)
};


// Size 0x50
class ContestZoneVendorShipData: public None
{
public:
	Struct Transform                                             ContestZoneWorldLocation;                          // 0x20(0x30)
};


// Size 0xc0
class CoordinatedKrakenTentacleSpawnInfo: public None
{
public:
	Struct Transform                                             SpawnTransform;                                    // 0x0(0x30)
	Struct Transform                                             FinalSpawnTransform;                               // 0x30(0x30)
	int                                                          ClientCapsuleCullCount;                            // 0x60(0x4)
	bool                                                         ShouldDockToTargetActor;                           // 0x64(0x1)
	bool                                                         RequiresBoxCollider;                               // 0x65(0x1)
	bool                                                         RequiresKnockback;                                 // 0x66(0x1)
	Struct Vector                                                BoxExtents;                                        // 0x68(0xc)
	Struct Transform                                             BoxOffset;                                         // 0x80(0x30)
};


// Size 0x18
class ProposedTaleEntry: public None
{
public:
	Class VoyageDescDataAsset*                                   TaleData;                                          // 0x0(0x8)
	Class Actor*                                                 ProposingObject;                                   // 0x8(0x8)
	bool                                                         CanStartTale;                                      // 0x10(0x1)
};


// Size 0x10
class ProposedVoyageEntry: public None
{
public:
	Class VoyageProposalDesc*                                    ProposalDesc;                                      // 0x0(0x8)
	Class AthenaPlayerState*                                     ProposingPlayerState;                              // 0x8(0x8)
};


// Size 0x10
class ShipCustomizationLoadoutPartCustomizations: public None
{
public:
	TArray<Struct PartDesc>                                      Parts;                                             // 0x0(0x10)
};


// Size 0x20
class PartDesc: public None
{
public:
	Struct FString                                               Name;                                              // 0x0(0x10)
	TArray<Struct PartCustomisation>                             Customisations;                                    // 0x10(0x10)
};


// Size 0x20
class PartCustomisation: public None
{
public:
	Struct FString                                               Category;                                          // 0x0(0x10)
	Struct StringAssetReference                                  Customisation;                                     // 0x10(0x10)
};


// Size 0x4
class SinkShipData: public None
{
public:
	int                                                          ShipNetGUID;                                       // 0x0(0x4)
};


// Size 0x60
class CustomTriggerData: public None
{
public:
	Class TriggerBase*                                           TriggerObject;                                     // 0x0(0x8)
	bool                                                         DetectingPlayers;                                  // 0x58(0x1)
	bool                                                         DetectingShips;                                    // 0x59(0x1)
	bool                                                         DetectingEnemies;                                  // 0x5a(0x1)
};


// Size 0x40
class ProjectileLauncherMechanismSourceShipParams: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	Struct ProjectileLauncherMechanismSourceWatercraftParams     Params;                                            // 0x8(0x38)
};


// Size 0x38
class ProjectileLauncherMechanismSourceWatercraftParams: public None
{
public:
	float                                                        ShipBoundsMultiplier;                              // 0x0(0x4)
	float                                                        NearMissChance;                                    // 0x4(0x4)
	Struct WeightedProbabilityRangeOfRanges                      NearMissShipOffsetInMetres;                        // 0x8(0x30)
};


// Size 0x90
class LevelOfDamageProperties: public None
{
public:
	float                                                        LeakAmount;                                        // 0x0(0x4)
	float                                                        RepairTime;                                        // 0x4(0x4)
	float                                                        UndoRepairTime;                                    // 0x8(0x4)
	float                                                        NonOwningCrewUndoRepairTime;                       // 0xc(0x4)
	Class MaterialInterface*                                     HoleDecalMaterial;                                 // 0x10(0x8)
	Struct Transform                                             HoleDecalComponentTransform;                       // 0x20(0x30)
	Struct Vector                                                ParticleSystemComponentLocation;                   // 0x50(0xc)
	float                                                        InternalWaterSamplePositionTopOffset;              // 0x5c(0x4)
	float                                                        InternalWaterSamplePositionBottomOffset;           // 0x60(0x4)
	Class ParticleSystem*                                        ParticleSystem_WaterLeakAboveWater;                // 0x68(0x8)
	Class ParticleSystem*                                        ParticleSystem_WaterLeakBelowWater;                // 0x70(0x8)
	Class ParticleSystem*                                        ParticleSystem_RepairLeakAboveWater;               // 0x78(0x8)
	Class ParticleSystem*                                        ParticleSystem_RepairLeakBelowWater;               // 0x80(0x8)
	Class ParticleSystem*                                        ParticleSystem_SplashOnInternalWaterSurface;       // 0x88(0x8)
};


// Size 0x18
class AuthorityRepairableState: public None
{
public:
	byte                                                         RepairableState;                                   // 0x0(0x1)
	TArray<Weakclass RepairableState>                            RepairingList;                                     // 0x8(0x10)
};


// Size 0x18
class DeferralReasonPopUpNotificationInfo: public None
{
public:
	Struct FString                                               DeferralReason;                                    // 0x0(0x10)
	Class PopUpMessageDesc*                                      PopUp;                                             // 0x10(0x8)
};


// Size 0x48
class MultipleNPCCompaniesRedirectionData: public None
{
public:
	TArray<Class SingleNPCCompanyRedirectionData>                Companies;                                         // 0x0(0x10)
	Struct FText                                                 VisitNPCTooltip;                                   // 0x10(0x38)
};


// Size 0x40
class SingleNPCCompanyRedirectionData: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
	Struct FText                                                 VisitNPCTooltip;                                   // 0x8(0x38)
};


// Size 0x18
class ItemDiggingAnimationOverride: public None
{
public:
	TArray<AssetClass ItemDiggingAudioOverride>                  Classes;                                           // 0x0(0x10)
	Class ItemDiggingAnimationConfig*                            DiggingAnimationConfig;                            // 0x10(0x8)
};


// Size 0x18
class ItemDiggingAudioOverride: public None
{
public:
	TArray<AssetClass ItemDiggingBaseOverride>                   Classes;                                           // 0x0(0x10)
	Class ItemDiggingAudioConfig*                                DiggingAudioConfig;                                // 0x10(0x8)
};


// Size 0x18
class ItemDiggingBaseOverride: public None
{
public:
	TArray<AssetClass ItemBuryingBaseOverride>                   Classes;                                           // 0x0(0x10)
	Class ItemDiggingBaseConfig*                                 DiggingBaseConfig;                                 // 0x10(0x8)
};


// Size 0x18
class ItemBuryingBaseOverride: public None
{
public:
	TArray<AssetClass ItemDiggingEffectsOverride>                Classes;                                           // 0x0(0x10)
	Class ItemDiggingBuryConfig*                                 BuryingConfig;                                     // 0x10(0x8)
};


// Size 0x18
class ItemDiggingEffectsOverride: public None
{
public:
	TArray<AssetClass DioramaDebugMenuEntry>                     Classes;                                           // 0x0(0x10)
	Class ItemDiggingEffectsConfig*                              DiggingEffectsConfig;                              // 0x10(0x8)
};


// Size 0x30
class DioramaDebugMenuEntry: public None
{
public:
	Class AISpawner*                                             Spawner;                                           // 0x0(0x8)
	Class AIDioramaDesc*                                         DioramaDesc;                                       // 0x8(0x8)
	Struct FString                                               DioramaName;                                       // 0x10(0x10)
	Struct FString                                               TaleId;                                            // 0x20(0x10)
};


// Size 0x14
class DrunkennessSetupData: public None
{
public:
	byte                                                         DrunkennessType;                                   // 0x0(0x1)
	float                                                        MaxDrunkenness;                                    // 0x4(0x4)
	float                                                        GettingDrunkDrunkennessChangePerSec;               // 0x8(0x4)
	float                                                        SoberingUpDrunkennessChangePerSec;                 // 0xc(0x4)
	bool                                                         AutoSoberUpWhenFullyDrunk;                         // 0x10(0x1)
};


// Size 0x18
class EmissaryRewardMultiplierModel: public None
{
public:
	struct FName                                                 EmissaryName;                                      // 0x0(0x8)
	TArray<Struct EmissaryLevelMultiplierModel>                  Multipliers;                                       // 0x8(0x10)
};


// Size 0x8
class EmissaryLevelMultiplierModel: public None
{
public:
	int                                                          Level;                                             // 0x0(0x4)
	float                                                        Multiplier;                                        // 0x4(0x4)
};


// Size 0x90
class EmissaryDisplayInformation: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	Struct FText                                                 Description;                                       // 0x38(0x38)
	Struct StringAssetReference                                  KeyArt;                                            // 0x70(0x10)
	Struct StringAssetReference                                  Icon;                                              // 0x80(0x10)
};


// Size 0x10
class EntitlementsFailedEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x10
class EntitlementsResponseEvent: public None
{
public:
	TArray<Struct EntitlementItem>                               Entitlements;                                      // 0x0(0x10)
};


// Size 0xa8
class EntitlementItem: public None
{
public:
	Struct FText                                                 Description;                                       // 0x0(0x38)
	bool                                                         Owned;                                             // 0x38(0x1)
	Struct StringAssetReference                                  PreviewImageUrl;                                   // 0x40(0x10)
	Struct StringAssetReference                                  ThumbnailImageUrl;                                 // 0x50(0x10)
	Struct FText                                                 DisplayName;                                       // 0x60(0x38)
	Struct FString                                               Id;                                                // 0x98(0x10)
};


// Size 0x10
class EntitlementsRequestEvent: public None
{
public:
	TArray<Str None>                                             EntitlementIds;                                    // 0x0(0x10)
};


// Size 0x18
class RequiredClothingData: public None
{
public:
	int                                                          RequiredNumberToMatch;                             // 0x0(0x4)
	TArray<Class RequiredNumberToMatch>                          RequiredClothing;                                  // 0x8(0x10)
};


// Size 0x18
class ItemRequirementData: public None
{
public:
	int                                                          RequiredNumberToMatch;                             // 0x0(0x4)
	TArray<Class RequiredNumberToMatch>                          RequiredItemsInLoadout;                            // 0x8(0x10)
};


// Size 0x18
class EventTaleQuestServiceEntry: public None
{
public:
};


// Size 0x10
class EventObjectStateMigrationImpl: public None
{
public:
};


// Size 0x8
class EventReceiveExplosiveComponentState: public None
{
public:
	Class ExplosiveComponent*                                    Source;                                            // 0x0(0x8)
};


// Size 0x10
class ShipHullDamageParams: public None
{
public:
	TArray<Struct ShipHullDamageLevel>                           DamageLevels;                                      // 0x0(0x10)
};


// Size 0x18
class ShipHullDamageLevel: public None
{
public:
	class                                                        SpeedBand;                                         // 0x0(0x8)
	TArray<Struct ShipHullDamageTypeEntry>                       Params;                                            // 0x8(0x10)
};


// Size 0x48
class ShipHullDamageTypeEntry: public None
{
public:
	byte                                                         DamageType;                                        // 0x0(0x1)
	Struct ShipHullLandscapeDamageEntry                          LandscapeDamageParams;                             // 0x8(0x30)
	Struct ShipHullRammingSpurDamageEntry                        RammingSpurDamageParams;                           // 0x38(0x10)
};


// Size 0x10
class ShipHullRammingSpurDamageEntry: public None
{
public:
	TArray<Struct ShipDamageEntry>                               DamageAppliedToSelf;                               // 0x0(0x10)
};


// Size 0x50
class ShipDamageEntry: public None
{
public:
	class                                                        OtherShipSize;                                     // 0x0(0x8)
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x8(0x8)
	Struct Int32Range                                            NumZonesToDamageForInstigator;                     // 0x10(0x10)
	Struct Int32Range                                            DamageLevelForInstigator;                          // 0x20(0x10)
	Struct Int32Range                                            NumZonesToDamageForReceiver;                       // 0x30(0x10)
	Struct Int32Range                                            DamageLevelForReceiver;                            // 0x40(0x10)
};


// Size 0x30
class ShipHullLandscapeDamageEntry: public None
{
public:
	byte                                                         PhysicalSurface;                                   // 0x0(0x1)
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x8(0x8)
	Struct Int32Range                                            NumZonesToDamage;                                  // 0x10(0x10)
	Struct Int32Range                                            DamageLevel;                                       // 0x20(0x10)
};


// Size 0x10
class RammableExplosiveEntry: public None
{
public:
	class                                                        RammerType;                                        // 0x0(0x8)
	class                                                        MinimumSpeedForExplosion;                          // 0x8(0x8)
};


// Size 0x8
class ChargedAttackProjectileWeights: public None
{
public:
	float                                                        ChargeTime;                                        // 0x0(0x4)
	float                                                        Weight;                                            // 0x4(0x4)
};


// Size 0x20
class QuestVariablePlayerStat: public None
{
public:
};


// Size 0x70
class ClassicFireworkDebugList: public None
{
public:
	TArray<class Peony*>                                         Peony;                                             // 0x0(0x10)
	TArray<class Crackle*>                                       Crackle;                                           // 0x10(0x10)
	TArray<class Strobe*>                                        Strobe;                                            // 0x20(0x10)
	TArray<class Brocade*>                                       Brocade;                                           // 0x30(0x10)
	TArray<class Comet*>                                         Comet;                                             // 0x40(0x10)
	TArray<class HummingSnakes*>                                 HummingSnakes;                                     // 0x50(0x10)
	TArray<class Cakes*>                                         Cakes;                                             // 0x60(0x10)
};


// Size 0x20
class FireworkDebugListByFireworkType: public None
{
public:
	TArray<class Rockets*>                                       Rockets;                                           // 0x0(0x10)
	TArray<class Cakes*>                                         Cakes;                                             // 0x10(0x10)
};


// Size 0xc
class SailWithFlameOfFateColoursAboardStatData: public None
{
public:
	Struct PlayerStat                                            DefaultStatToFire;                                 // 0x4(0x4)
	Struct PlayerStat                                            AllianceStatToFire;                                // 0x8(0x4)
};


// Size 0x10
class FlamesOfFateShipInfo: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
};


// Size 0x28
class FlamesOfFateFlameInfo: public None
{
public:
	byte                                                         FlameOfFateType;                                   // 0x0(0x1)
	Struct Color                                                 LightColour;                                       // 0x4(0x4)
	Struct Color                                                 FXColour;                                          // 0x8(0x4)
	Struct Color                                                 GlowColour;                                        // 0xc(0x4)
	Struct Color                                                 FlameColour;                                       // 0x10(0x4)
	Class Texture*                                               FlameTexture;                                      // 0x18(0x8)
	Struct PlayerStat                                            StatToFireWhenTaken;                               // 0x20(0x4)
	Struct PlayerStat                                            StatToFireWhenTakenInAlliance;                     // 0x24(0x4)
};


// Size 0x34
class FogBankSettings: public None
{
public:
	byte                                                         FogState;                                          // 0x0(0x1)
	float                                                        Density;                                           // 0x4(0x4)
	Struct Vector                                                Scale;                                             // 0x8(0xc)
	Struct LinearColor                                           FogColour;                                         // 0x14(0x10)
	float                                                        FadeInDuration;                                    // 0x24(0x4)
	float                                                        ActiveDuration;                                    // 0x28(0x4)
	float                                                        FadeOutDuration;                                   // 0x2c(0x4)
	bool                                                         Persistent;                                        // 0x30(0x1)
};


// Size 0x18
class FogColourForSea: public None
{
public:
	class                                                        Sea;                                               // 0x0(0x8)
	Struct LinearColor                                           Colour;                                            // 0x8(0x10)
};


// Size 0xc
class FogBankManagerIslandNamesToKeepAwayFrom: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	float                                                        MinimumDistanceFromIslandInKm;                     // 0x8(0x4)
};


// Size 0x8
class FogBankManagerIslandTypesToKeepAwayFrom: public None
{
public:
	byte                                                         IslandType;                                        // 0x0(0x1)
	float                                                        MinimumDistanceFromIslandInKm;                     // 0x4(0x4)
};


// Size 0x48
class FogBankManagerFogBankTemplate: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	TArray<Class Weight>                                         FogBanks;                                          // 0x8(0x10)
	Struct WeightedProbabilityRangeOfRanges                      DistanceFromIslandInKm;                            // 0x18(0x30)
};


// Size 0x28
class DecalEntry: public None
{
public:
	Class DecalComponent*                                        DecalComponent;                                    // 0x0(0x8)
	Class MaterialInstanceDynamic*                               DecalMaterial;                                     // 0x8(0x8)
	Struct LinearColor                                           DecalColour;                                       // 0x10(0x10)
	int                                                          LocationIndex;                                     // 0x20(0x4)
};


// Size 0x18
class FootstepLocation: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	Struct Rotator                                               Rotation;                                          // 0xc(0xc)
};


// Size 0x8
class FragileComponentHealthScalarEntry: public None
{
public:
	byte                                                         HealthChangedReason;                               // 0x0(0x1)
	float                                                        HealthChangeScalar;                                // 0x4(0x4)
};


// Size 0x10
class FragileComponentShipDamageTypeEntry: public None
{
public:
	class                                                        ShipDamagerType;                                   // 0x0(0x8)
	float                                                        HealthChangePropagated;                            // 0x8(0x4)
};


// Size 0x28
class FuseComponentMetaWrapper: public None
{
public:
	bool                                                         FuseEnabled;                                       // 0x20(0x1)
	float                                                        FuseTimeScale;                                     // 0x24(0x4)
};


// Size 0x18
class ItemMetaBase: public None
{
public:
	Struct StringAssetReference                                  StoredStructType;                                  // 0x8(0x10)
};


// Size 0x10
class AnimationLODParameters: public None
{
public:
	int                                                          MaxIKEntities;                                     // 0x0(0x4)
	float                                                        MaxIKDistance;                                     // 0x4(0x4)
	float                                                        MinLODSolverDistance;                              // 0x8(0x4)
	float                                                        MinFootPlantingActiveDistance;                     // 0xc(0x4)
};


// Size 0x8
class GenericPartDesc: public None
{
public:
	Class StaticMesh*                                            Mesh;                                              // 0x0(0x8)
};


// Size 0x78
class TQStructGenParams: public None
{
public:
	int                                                          GenerationIterations;                              // 0x0(0x4)
	bool                                                         FailIfNoLocationData;                              // 0x4(0x1)
	float                                                        PreferredDistance;                                 // 0x8(0x4)
	float                                                        EventExclusionZoneRadius;                          // 0xc(0x4)
	float                                                        TransientActorExclusionZoneRadius;                 // 0x10(0x4)
	int                                                          ModuleCount;                                       // 0x14(0x4)
	Struct TQStructGenEntry                                      FinalModuleOverride;                               // 0x18(0x30)
	float                                                        CombatWeight;                                      // 0x48(0x4)
	int                                                          MaxCombatOccurrences;                              // 0x4c(0x4)
	TArray<Struct MaxCombatOccurrences>                          CombatGroups;                                      // 0x50(0x10)
	int                                                          MaxNonCombatOccurrences;                           // 0x60(0x4)
	TArray<Struct TQStructGenGroup>                              NonCombatGroups;                                   // 0x68(0x10)
};


// Size 0x28
class TQStructGenGroup: public None
{
public:
	struct FName                                                 FeatureName;                                       // 0x10(0x8)
	TArray<Struct TQStructGenEntry>                              Entries;                                           // 0x18(0x10)
};


// Size 0x10
class TQStructGenWeightedContainer: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
	int                                                          MaxOccurrences;                                    // 0xc(0x4)
};


// Size 0x30
class TQStructGenEntry: public None
{
public:
	Class TaleQuestDescAsset*                                    TaleQuestDesc;                                     // 0x10(0x8)
	Class PLQuestLocationDataBundle*                             LocationBundle;                                    // 0x18(0x8)
	bool                                                         LocationFiltering;                                 // 0x20(0x1)
	Struct Vector2D                                              AcceptableAreaLocation;                            // 0x24(0x8)
	float                                                        AcceptableAreaRadius;                              // 0x2c(0x4)
};


// Size 0x10
class TQStructGenSelection: public None
{
public:
	Class TaleQuestDescAsset*                                    TaleQuestDesc;                                     // 0x0(0x8)
	Class PLQuestLocationDataAsset*                              LocationData;                                      // 0x8(0x8)
};


// Size 0x20
class QuestVarLocationData: public None
{
public:
};


// Size 0x20
class QuestVarTaleQuest: public None
{
public:
};


// Size 0x10
class VoyageHandInEntry: public None
{
public:
	Class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0x0(0x8)
	class                                                        Item;                                              // 0x8(0x8)
};


// Size 0x1
class GlintVisibilityLock: public None
{
public:
};


// Size 0x10
class DirectorSettingEntry: public None
{
public:
	Class VoyageDescDataAsset*                                   VoyageDesc;                                        // 0x0(0x8)
	Struct FeatureFlag                                           Feature;                                           // 0x8(0x8)
};


// Size 0x20
class QuestVariablePageBundle: public None
{
public:
};


// Size 0x18
class PlayerHideoutInfo: public None
{
public:
	Class PlayerState*                                           PlayerState;                                       // 0x0(0x8)
	TArray<class ExitPoints*>                                    ExitPoints;                                        // 0x8(0x10)
};


// Size 0x28
class HoleItemToSpawn: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	class                                                        ItemDesc;                                          // 0x8(0x8)
	TArray<Byte ItemDesc>                                        RestrictToSurface;                                 // 0x10(0x10)
	struct FName                                                 FeatureFlag;                                       // 0x20(0x8)
};


// Size 0xc
class MaxHolePerIslandDataAsset: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	int                                                          MaxHoles;                                          // 0x8(0x4)
};


// Size 0x18
class HoleContainer: public None
{
public:
	TArray<Weakclass BuriedBuriable>                             Holes;                                             // 0x0(0x10)
	struct FName                                                 IslandName;                                        // 0x10(0x8)
};


// Size 0x48
class BuriedBuriable: public None
{
public:
	Struct Vector                                                Location;                                          // 0x18(0xc)
	float                                                        Radius;                                            // 0x24(0x4)
};


// Size 0x70
class Leak: public None
{
public:
	Struct WwiseEmitter                                          SFXEmitter;                                        // 0x30(0x20)
	Class ParticleSystemComponent*                               WaterLeakParticleSystem;                           // 0x50(0x8)
};


// Size 0x58
class ShipLeak: public None
{
public:
	Struct ShipLeakParams                                        Params;                                            // 0x0(0x1c)
	Class ParticleSystemComponent*                               SplashParticleSystem;                              // 0x40(0x8)
};


// Size 0x1c
class ShipLeakParams: public None
{
public:
	float                                                        InternalWaterSamplePositionTopOffset;              // 0x0(0x4)
	float                                                        InternalWaterSamplePositionBottomOffset;           // 0x4(0x4)
	float                                                        WaterSplashDelayMin;                               // 0x8(0x4)
	float                                                        WaterSplashDelayMax;                               // 0xc(0x4)
	float                                                        HullFloodedPercentageToShiftWaterSamplingPos;      // 0x10(0x4)
	float                                                        WaterSampleOffsetBelowHullFloodThreshold;          // 0x14(0x4)
	float                                                        WaterSampleOffsetAboveHullFloodThreshold;          // 0x18(0x4)
};


// Size 0x70
class HullDamageNamedParamSet: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	Struct HullDamageParamSet                                    Params;                                            // 0x10(0x60)
};


// Size 0x60
class HullDamageParamSet: public None
{
public:
	Struct ShipLeakParams                                        LeakParams;                                        // 0x0(0x1c)
	float                                                        LeakAmount;                                        // 0x1c(0x4)
	Struct Transform                                             InternalHoleDecalOffset;                           // 0x20(0x30)
	byte                                                         Deck;                                              // 0x50(0x1)
};


// Size 0x10
class DebugSuperSailorActionStateParams: public None
{
public:
	float                                                        BaseForwardSpeed;                                  // 0x0(0x4)
	float                                                        YawSpeed;                                          // 0x4(0x4)
	float                                                        RightTriggerHeldSpdAmp;                            // 0x8(0x4)
	float                                                        RightTriggerHeldYawAmp;                            // 0xc(0x4)
};


// Size 0x34
class DockableCutsceneActionStateParams: public None
{
public:
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x18(0x1c)
};


// Size 0x18
class ControlObjectActionStateParams: public None
{
public:
	bool                                                         UndockToLastKnownLocation;                         // 0x10(0x1)
	float                                                        UndockDuration;                                    // 0x14(0x4)
};


// Size 0x10
class DockToObjectActionStateParams: public None
{
public:
	float                                                        DockTime;                                          // 0x0(0x4)
	float                                                        DelayAfterDockingTime;                             // 0x4(0x4)
	float                                                        ForcedFieldOfView;                                 // 0x8(0x4)
	bool                                                         ForceStash;                                        // 0xc(0x1)
};


// Size 0x1c
class LookAtOffsetParams: public None
{
public:
	bool                                                         UseLookAtPosition;                                 // 0x0(0x1)
	bool                                                         UseSpring;                                         // 0x1(0x1)
	float                                                        SpringAccel;                                       // 0x4(0x4)
	float                                                        MinYaw;                                            // 0x8(0x4)
	float                                                        MaxYaw;                                            // 0xc(0x4)
	float                                                        MinPitch;                                          // 0x10(0x4)
	float                                                        MaxPitch;                                          // 0x14(0x4)
	byte                                                         CameraLookatAnimationType;                         // 0x18(0x1)
};


// Size 0x58
class UseMountedWeaponActionStateParams: public None
{
public:
	float                                                        CameraDockTime;                                    // 0x18(0x4)
	Class ForceFeedbackEffect*                                   FireForceFeedbackEffect;                           // 0x20(0x8)
	class                                                        FireCameraShake;                                   // 0x28(0x8)
	class                                                        FireInputId;                                       // 0x30(0x8)
	TArray<Class FireInputId>                                    AimYawInputId;                                     // 0x38(0x10)
	TArray<Class AimYawInputId>                                  AimPitchInputId;                                   // 0x48(0x10)
};


// Size 0x60
class UseCannonActionStateParams: public None
{
public:
	Struct UseMountedWeaponActionStateParams                     MountedWeaponParams;                               // 0x0(0x58)
	float                                                        ReloadAttemptRepeatRate;                           // 0x58(0x4)
};


// Size 0x40
class CapturedByKrakenActionStateParams: public None
{
public:
	Class CurveFloat*                                            MovementAlphaXY;                                   // 0x0(0x8)
	Class CurveFloat*                                            MovementAlphaZ;                                    // 0x8(0x8)
	Class CurveFloat*                                            MovementRotation;                                  // 0x10(0x8)
	float                                                        MovementTime;                                      // 0x18(0x4)
	float                                                        DistanceFromTentacleToStartFade;                   // 0x1c(0x4)
	float                                                        FadeInDuration;                                    // 0x20(0x4)
	float                                                        ClientConditionsCompleteTimeout;                   // 0x24(0x4)
	float                                                        MinCameraPitch;                                    // 0x28(0x4)
	float                                                        MaxCameraPitch;                                    // 0x2c(0x4)
	float                                                        MinCameraYaw;                                      // 0x30(0x4)
	float                                                        MaxCameraYaw;                                      // 0x34(0x4)
	float                                                        AnimationProgressionToStopCameraFade;              // 0x38(0x4)
	float                                                        BlockInteractInputTime;                            // 0x3c(0x4)
};


// Size 0x30
class ClamberActionStateParams: public None
{
public:
	float                                                        InitialClamberPitch;                               // 0x10(0x4)
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x14(0x1c)
};


// Size 0x34
class ControlCapstanArmActionStateParams: public None
{
public:
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x18(0x1c)
};


// Size 0x34
class ControlPulleyActionStateParams: public None
{
public:
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x18(0x1c)
};


// Size 0x34
class ControlWheelActionStateParams: public None
{
public:
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x18(0x1c)
};


// Size 0x28
class FiredFromActorActionStateParams: public None
{
public:
	float                                                        GravityScaleOverride;                              // 0x0(0x4)
	float                                                        MassOverride;                                      // 0x4(0x4)
	float                                                        UnderwaterBrakingFactorOverride;                   // 0x8(0x4)
	float                                                        UnderwaterBrakingFactorOverrideDuration;           // 0xc(0x4)
	Struct Vector2D                                              MaskFiringLagScaleMinMax;                          // 0x10(0x8)
	Struct Vector2D                                              MaskFiringLagScalingTimeMinMax;                    // 0x18(0x8)
	float                                                        MaskFiringLagSpeedToleranceSquared;                // 0x20(0x4)
	float                                                        TimeUntilRevertingIgnoredActors;                   // 0x24(0x4)
};


// Size 0x28
class HideInObjectActionStateParams: public None
{
public:
	TArray<Byte IngestedByKrakenActionStateParams>               PreventedHealthChanges;                            // 0x18(0x10)
};


// Size 0x4
class IngestedByKrakenActionStateParams: public None
{
public:
	float                                                        StowItemsProgressThreshold;                        // 0x0(0x4)
};


// Size 0x10
class TransitionLadderActionStateParams: public None
{
public:
};


// Size 0x14
class LinearTransitionLadderActionStateParams: public None
{
public:
	float                                                        Duration;                                          // 0x10(0x4)
};


// Size 0x1c
class UseMapTableActionStateParams: public None
{
public:
	float                                                        CameraDockTime;                                    // 0x18(0x4)
};


// Size 0x4
class MigrationActionStateParams: public None
{
public:
	float                                                        ClientSetupResponseTimeout;                        // 0x0(0x4)
};


// Size 0x4
class RepairObjectActionStateParams: public None
{
public:
	float                                                        MountTime;                                         // 0x0(0x4)
};


// Size 0x10
class ShovelDigActionStateParams: public None
{
public:
	Class CurveFloat*                                            SuccessfulPitchBlendCurve;                         // 0x0(0x8)
	Class CurveFloat*                                            DeflectedPitchBlendCurve;                          // 0x8(0x8)
};


// Size 0x10
class SplineTransitionLadderActionStateParams: public None
{
public:
};


// Size 0x8
class SwallowedByKrakenActionStateParams: public None
{
public:
	float                                                        FadeToBlackDuration;                               // 0x0(0x4)
	float                                                        DeathDelayTime;                                    // 0x4(0x4)
};


// Size 0x2c
class TeleportActionStateParams: public None
{
public:
	float                                                        FadeDuration;                                      // 0x0(0x4)
	float                                                        FadeEventTimeout;                                  // 0x4(0x4)
	float                                                        FadeServerTimeout;                                 // 0x8(0x4)
	Struct LinearColor                                           FadeColour;                                        // 0xc(0x10)
	bool                                                         FadeAudio;                                         // 0x1c(0x1)
	float                                                        CharacterFadeCompleteTimeout;                      // 0x20(0x4)
	float                                                        TeleportCompleteTimeout;                           // 0x24(0x4)
	float                                                        TeleportNetRelevancyTimeout;                       // 0x28(0x4)
};


// Size 0x4c
class UseLadderActionStateParams: public None
{
public:
	float                                                        ClimbUpSpeed;                                      // 0x10(0x4)
	float                                                        ClimbDownSpeed;                                    // 0x14(0x4)
	float                                                        LadderRungHeight;                                  // 0x18(0x4)
	float                                                        SpeedToEnterSlidingAnimationMs;                    // 0x1c(0x4)
	float                                                        MaxLadderSlidingSpeedMs;                           // 0x20(0x4)
	float                                                        InitialDockBottomPitch;                            // 0x24(0x4)
	float                                                        InitialDockTopPitch;                               // 0x28(0x4)
	float                                                        TopBottomTolerance;                                // 0x2c(0x4)
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x30(0x1c)
};


// Size 0x1
class WaitForDemoResetActionStateParams: public None
{
public:
};


// Size 0x14
class WaitingToSpawnActionStateParams: public None
{
public:
	float                                                        ClientStartedTimeout;                              // 0x0(0x4)
	float                                                        ClientConditionsCompleteTimeout;                   // 0x4(0x4)
	float                                                        ScreenFadeInTime;                                  // 0x8(0x4)
	float                                                        TeleportCompleteTimeout;                           // 0xc(0x4)
	float                                                        TeleportNetRelevancyTimeout;                       // 0x10(0x4)
};


// Size 0x34
class WaterBarrelActionStateParams: public None
{
public:
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x18(0x1c)
};


// Size 0x4
class UndoRepairActionStateParams: public None
{
public:
	float                                                        MountTime;                                         // 0x0(0x4)
};


// Size 0xe8
class ActivePlayerState: public None
{
public:
};


// Size 0x80
class EventInactivityDetectionActionPerformed: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	struct FName                                                 ActionName;                                        // 0x78(0x8)
};


// Size 0x78
class PirateIdentity: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	Struct FString                                               PirateId;                                          // 0x18(0x10)
};


// Size 0x30
class VaultPuzzleSolutionEntry: public None
{
public:
	Struct VaultPuzzleSolutionPositions                          SolutionPositions;                                 // 0x0(0x10)
	Struct StringAssetReference                                  MaterialSet;                                       // 0x10(0x10)
	Struct StringAssetReference                                  TreasureVaultTableMaterialSet;                     // 0x20(0x10)
};


// Size 0x10
class VaultPuzzleSolutionPositions: public None
{
public:
	TArray<Int None>                                             SolutionPositions;                                 // 0x0(0x10)
};


// Size 0x110
class InteractableLightParams: public None
{
public:
	bool                                                         DebugDraw;                                         // 0x0(0x1)
	bool                                                         IsSpotlight;                                       // 0x1(0x1)
	struct FName                                                 LightTag;                                          // 0x4(0x8)
	Struct InteractableLightState                                OnParameters;                                      // 0x10(0x80)
	Struct InteractableLightState                                OffParameters;                                     // 0x90(0x80)
};


// Size 0x80
class InteractableLightState: public None
{
public:
	bool                                                         Enabled;                                           // 0x0(0x1)
	Struct Transform                                             Transform;                                         // 0x10(0x30)
	float                                                        Intensity;                                         // 0x40(0x4)
	float                                                        ConeAngleInner;                                    // 0x44(0x4)
	float                                                        ConeAngleOuter;                                    // 0x48(0x4)
	float                                                        AttenuationRadius;                                 // 0x4c(0x4)
	Struct Color                                                 LightColour;                                       // 0x50(0x4)
	byte                                                         SimpleFunctionType;                                // 0x54(0x1)
	float                                                        ScaleOffset;                                       // 0x58(0x4)
	float                                                        PulsePhase;                                        // 0x5c(0x4)
	float                                                        FlickerFrequency;                                  // 0x60(0x4)
	float                                                        IntensityScaleForWater;                            // 0x64(0x4)
	float                                                        MinDistanceToLightClamp;                           // 0x68(0x4)
	bool                                                         ApplyScaleForTranslucency;                         // 0x6c(0x1)
	float                                                        ScaleForTranslucency;                              // 0x70(0x4)
	bool                                                         ApplyCapForTranslucency;                           // 0x74(0x1)
	float                                                        CapForTranslucency;                                // 0x78(0x4)
};


// Size 0x3
class LightData: public None
{
public:
	byte                                                         FlameOfFateType;                                   // 0x0(0x1)
	bool                                                         LightIsOn_Server;                                  // 0x1(0x1)
	bool                                                         LitWithLantern;                                    // 0x2(0x1)
};


// Size 0x28
class CategorySpec: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	TArray<Class ItemCategory>                                   FallbackCategories;                                // 0x8(0x10)
	Struct FString                                               DefaultSlotIconURL;                                // 0x18(0x10)
};


// Size 0x10
class InventoryManipulatorAutoEquipPolicyEntry: public None
{
public:
	class                                                        Category;                                          // 0x0(0x8)
	byte                                                         Policy;                                            // 0x8(0x1)
};


// Size 0x58
class FaunaTypeSettings: public None
{
public:
	bool                                                         bGuaranteedSpawn;                                  // 0x0(0x1)
	int                                                          FaunaTypeSpawnChance;                              // 0x4(0x4)
	Struct WeightedProbabilityRange                              NumFaunaGroups;                                    // 0x8(0x20)
	Struct WeightedProbabilityRange                              NumFaunaPerGroup;                                  // 0x28(0x20)
	TArray<Struct WeightedAISpawnTypeParams>                     SpawnTypes;                                        // 0x48(0x10)
};


// Size 0xc
class EncounterParams: public None
{
public:
	byte                                                         EncounterType;                                     // 0x0(0x1)
	float                                                        EncounterRadius;                                   // 0x4(0x4)
	byte                                                         EncounterDimensions;                               // 0x8(0x1)
	byte                                                         EncounterMobility;                                 // 0x9(0x1)
};


// Size 0x14
class IslandLocationVerifierResult: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
	Struct Vector                                                AdjustedLocation;                                  // 0x4(0xc)
	int                                                          ResultCode;                                        // 0x10(0x4)
};


// Size 0x18
class CannonAILocation: public None
{
public:
	Struct Vector                                                Centre;                                            // 0x0(0xc)
	Struct Vector                                                Direction;                                         // 0xc(0xc)
};


// Size 0x14
class CannonAISpawnerZone: public None
{
public:
	Struct Vector                                                Centre;                                            // 0x0(0xc)
	float                                                        Radius;                                            // 0xc(0x4)
	bool                                                         IslandNotCannonZone;                               // 0x10(0x1)
};


// Size 0x18
class RequiredShipCustomizationData: public None
{
public:
	int                                                          RequiredNumberToMatch;                             // 0x0(0x4)
	TArray<Class RequiredNumberToMatch>                          RequiredShipCustomizations;                        // 0x8(0x10)
};


// Size 0x20
class ItemLoadoutComponentSlots: public None
{
public:
	TArray<Class ItemPreviewUpdateCameraEvent>                   WeaponSlots;                                       // 0x0(0x10)
	TArray<Struct ItemLoadoutSlot>                               Slots;                                             // 0x10(0x10)
};


// Size 0x20
class ItemLoadoutSlot: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	TArray<class Items*>                                         Items;                                             // 0x8(0x10)
	int                                                          Capacity;                                          // 0x18(0x4)
};


// Size 0x18
class ItemPreviewUpdateCameraEvent: public None
{
public:
	Struct ItemPreviewView                                       View;                                              // 0x0(0x18)
};


// Size 0x18
class ItemPreviewView: public None
{
public:
	struct FName                                                 CameraName;                                        // 0x0(0x8)
	Class AnimationAsset*                                        Anim;                                              // 0x8(0x8)
	bool                                                         ShouldSpin;                                        // 0x10(0x1)
};


// Size 0x1
class ItemPreviewShutdownEvent: public None
{
public:
};


// Size 0x1
class ItemPreviewBusyEvent: public None
{
public:
};


// Size 0x50
class ItemPreviewDataReadyEvent: public None
{
public:
	Struct ItemPreviewView                                       ItemView;                                          // 0x30(0x18)
	bool                                                         Valid;                                             // 0x48(0x1)
	float                                                        PreviewTickInitialTime;                            // 0x4c(0x4)
};


// Size 0xc
class ItemPreviewMoveCameraEvent: public None
{
public:
	float                                                        Rotation;                                          // 0x0(0x4)
	float                                                        Pitch;                                             // 0x4(0x4)
	float                                                        Zoom;                                              // 0x8(0x4)
};


// Size 0x18
class CategoryPreviewEntry: public None
{
public:
	class                                                        PreviewCategory;                                   // 0x0(0x8)
	class                                                        ItemCategoryClass;                                 // 0x8(0x8)
	class                                                        PreviewClassType;                                  // 0x10(0x8)
};


// Size 0x38
class SetRadialItemsAggregate: public None
{
public:
	TArray<Struct SetItemOnRadialInventorySlot>                  Items;                                             // 0x8(0x10)
	TArray<Struct SetTotalItemsOnRadialInventorySlot>            Quantities;                                        // 0x18(0x10)
	TArray<Struct SetMapTypeOnRadialInventorySlot>               Maps;                                              // 0x28(0x10)
};


// Size 0x4
class RadialInventoryEvent: public None
{
public:
	int                                                          RadialIdentifier;                                  // 0x0(0x4)
};


// Size 0x18
class SetMapTypeOnRadialInventorySlot: public None
{
public:
	int                                                          SlotIndex;                                         // 0x0(0x4)
	byte                                                         QuestMapIcon;                                      // 0x4(0x1)
	Struct FString                                               BackgroundImageUrl;                                // 0x8(0x10)
};


// Size 0xc
class SetTotalItemsOnRadialInventorySlot: public None
{
public:
	int                                                          SlotIndex;                                         // 0x0(0x4)
	int                                                          TotalItems;                                        // 0x4(0x4)
	int                                                          Capacity;                                          // 0x8(0x4)
};


// Size 0x38
class SetItemOnRadialInventorySlot: public None
{
public:
	int                                                          SlotIndex;                                         // 0x0(0x4)
	Struct FString                                               SlotItemUrl;                                       // 0x8(0x10)
	float                                                        SlotItemRotation;                                  // 0x18(0x4)
	float                                                        SlotItemScale;                                     // 0x1c(0x4)
	Struct Vector2D                                              SlotItemOffset;                                    // 0x20(0x8)
	Struct FString                                               SlotItemTitle;                                     // 0x28(0x10)
};


// Size 0x18
class SetNonVerbalOptionWithImages: public None
{
public:
	TArray<Struct NonVerbalRadialSlot>                           Slots;                                             // 0x8(0x10)
};


// Size 0x30
class NonVerbalRadialSlot: public None
{
public:
	Struct FString                                               Phrase;                                            // 0x0(0x10)
	Struct FString                                               BackgroundImageUrl;                                // 0x10(0x10)
	Struct FString                                               IconImageUrl;                                      // 0x20(0x10)
};


// Size 0x18
class SetNonVerbalOption: public None
{
public:
	TArray<Str None>                                             Phrases;                                           // 0x8(0x10)
};


// Size 0x28
class ExplosionForceFeedbackInfo: public None
{
public:
	class                                                        DamagerType;                                       // 0x0(0x8)
	Class ForceFeedbackEffect*                                   Effect;                                            // 0x8(0x8)
	Class ForceFeedbackEffect*                                   EffectLower;                                       // 0x10(0x8)
	float                                                        LowerTriggerPercentage;                            // 0x18(0x4)
	struct FName                                                 Tag;                                               // 0x1c(0x8)
	float                                                        ShakeOuterRadius;                                  // 0x24(0x4)
};


// Size 0x18
class ProcessableActions: public None
{
public:
	byte                                                         CurrentStatus;                                     // 0x0(0x1)
	double                                                       StartTime;                                         // 0x8(0x8)
	int                                                          ActionIndex;                                       // 0x10(0x4)
};


// Size 0x30
class KrakenAnimatedTentacleWaterTriggerableFX: public None
{
public:
	class                                                        State;                                             // 0x0(0x8)
	float                                                        WaterHeightOffset;                                 // 0x8(0x4)
	Class Object*                                                FirstPersonTargetVFX;                              // 0x10(0x8)
	Class Object*                                                ThirdPersonTargetVFX;                              // 0x18(0x8)
	Class Object*                                                AboveWaterVFX;                                     // 0x20(0x8)
	Class Object*                                                BelowWaterVFX;                                     // 0x28(0x8)
};


// Size 0x10
class KrakenAnimatedTentacleHeldTargetVomittingChance: public None
{
public:
	float                                                        Chance;                                            // 0x0(0x4)
	class                                                        CurrentState;                                      // 0x8(0x8)
};


// Size 0x10
class KrakenAnimatedTentacleHoldingStateTransitionChance: public None
{
public:
	float                                                        WeightedChance;                                    // 0x0(0x4)
	class                                                        StateToTransitionTo;                               // 0x8(0x8)
};


// Size 0x20
class KrakenAnimatedTentacleCollisionSegment: public None
{
public:
	int                                                          BottomBoneIndex;                                   // 0x0(0x4)
	int                                                          TopBoneIndex;                                      // 0x4(0x4)
	float                                                        BoneLocationAlpha;                                 // 0x8(0x4)
	float                                                        CapsuleRadius;                                     // 0xc(0x4)
	float                                                        CapsuleHalfHeight;                                 // 0x10(0x4)
	Class CapsuleComponent*                                      Capsule;                                           // 0x18(0x8)
};


// Size 0x10
class KrakenAnimatedTentacleHitReactAnimation: public None
{
public:
	int                                                          CollisionBoneIndex;                                // 0x0(0x4)
	Class AnimSequence*                                          HitReactAnimation;                                 // 0x8(0x8)
};


// Size 0x8
class KrakenSpawnLocationParams: public None
{
public:
	float                                                        KrakenRadius;                                      // 0x0(0x4)
	float                                                        MinDistanceFromExistingLocations;                  // 0x4(0x4)
};


// Size 0x10
class KrakenSpawnLocationExclusionZone: public None
{
public:
	Struct Vector                                                Centre;                                            // 0x0(0xc)
	float                                                        Radius;                                            // 0xc(0x4)
};


// Size 0x10
class LandmarkReactionEventPlayForceFeedbackEntry: public None
{
public:
	float                                                        OuterRadius;                                       // 0x0(0x4)
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x8(0x8)
};


// Size 0x2
class FlameData: public None
{
public:
	byte                                                         FlameOfFateType;                                   // 0x0(0x1)
	bool                                                         SkipChangeAnimation;                               // 0x1(0x1)
};


// Size 0x40
class LaunchableProjectileState: public None
{
public:
	Struct Transform                                             SpawnTransform;                                    // 0x0(0x30)
	byte                                                         SpawnedState;                                      // 0x30(0x1)
};


// Size 0x378
class LightingControllerSettingsOutput: public None
{
public:
	float                                                        FogDensity;                                        // 0x0(0x4)
	float                                                        FogStartDistance;                                  // 0x4(0x4)
	float                                                        LightIntensity;                                    // 0x8(0x4)
	float                                                        SkyDomeBrightness;                                 // 0xc(0x4)
	float                                                        SkyDomeMoonVisibility;                             // 0x10(0x4)
	float                                                        SkyDomeStarBrightness;                             // 0x14(0x4)
	float                                                        SkyDomeSunBrightness;                              // 0x18(0x4)
	float                                                        PostLPVIntensity;                                  // 0x1c(0x4)
	float                                                        PostExposureBias;                                  // 0x20(0x4)
	float                                                        PostLPVOcclusionIntensity;                         // 0x24(0x4)
	float                                                        SkyLightIntensity;                                 // 0x28(0x4)
	float                                                        FogBrightnessNear;                                 // 0x2c(0x4)
	float                                                        FogBrightnessFar;                                  // 0x30(0x4)
	float                                                        PostBloomIntensity;                                // 0x34(0x4)
	float                                                        PostBloomThreshold;                                // 0x38(0x4)
	float                                                        SkyDomeAuraBrightness;                             // 0x3c(0x4)
	float                                                        PostReflectionProbeBrightness;                     // 0x40(0x4)
	float                                                        PostReflectionProbeShadowBrightness;               // 0x44(0x4)
	float                                                        VfxController;                                     // 0x48(0x4)
	float                                                        FogMaxOpacity;                                     // 0x4c(0x4)
	float                                                        FogScatterExp;                                     // 0x50(0x4)
	float                                                        FogUnderwaterDensity;                              // 0x54(0x4)
	float                                                        PostLensFlareIntensity;                            // 0x58(0x4)
	float                                                        EmissiveFoliage;                                   // 0x5c(0x4)
	float                                                        EmissiveLights;                                    // 0x60(0x4)
	float                                                        PostExposureMinBrightness;                         // 0x64(0x4)
	float                                                        PostExposureMaxBrightness;                         // 0x68(0x4)
	float                                                        SkyDomeMoonBrightness;                             // 0x6c(0x4)
	float                                                        SkyDomeHorizonCloudBrightness;                     // 0x70(0x4)
	float                                                        SkyDomeGreenFlashStrength;                         // 0x74(0x4)
	float                                                        PostSaturation;                                    // 0x78(0x4)
	float                                                        PostContrast;                                      // 0x7c(0x4)
	float                                                        CloudRimlightScale;                                // 0x80(0x4)
	float                                                        CloudSkylightScale;                                // 0x84(0x4)
	float                                                        CloudSunlightScale;                                // 0x88(0x4)
	float                                                        CloudGlobalPressure;                               // 0x8c(0x4)
	float                                                        PostUnderWaterBrightness;                          // 0x90(0x4)
	float                                                        VfxCloudBrightness;                                // 0x94(0x4)
	float                                                        LightGodRayIntensity;                              // 0x98(0x4)
	float                                                        CloudBottomBrightness;                             // 0x9c(0x4)
	float                                                        CloudSunlightShadowing;                            // 0xa0(0x4)
	float                                                        SunDiscScale;                                      // 0xa4(0x4)
	float                                                        WaterSpecularBrightness;                           // 0xa8(0x4)
	float                                                        VfxAmbientScale;                                   // 0xac(0x4)
	float                                                        FogUnderwaterMaxOpacity;                           // 0xb0(0x4)
	float                                                        FogUnderwaterScatterExp;                           // 0xb4(0x4)
	float                                                        FogUnderwaterStartDistance;                        // 0xb8(0x4)
	float                                                        FogUnderwaterBrightnessNear;                       // 0xbc(0x4)
	float                                                        FogUnderwaterBrightnessFar;                        // 0xc0(0x4)
	float                                                        FogDirectionalInscatteringStart;                   // 0xc4(0x4)
	float                                                        FogUnderwaterDirectionalInscatteringStart;         // 0xc8(0x4)
	float                                                        CloudShadowBrightness;                             // 0xcc(0x4)
	float                                                        StormCloudShadowBrightness;                        // 0xd0(0x4)
	float                                                        StormPostBloomIntensity;                           // 0xd4(0x4)
	float                                                        StormPostBloomThreshold;                           // 0xd8(0x4)
	float                                                        DirectionalLightShadowSteppingRate;                // 0xdc(0x4)
	float                                                        SkullBrightness;                                   // 0xe0(0x4)
	float                                                        UnderwaterDirectionalLightMinBrightness;           // 0xe4(0x4)
	Struct LinearColor                                           FogColourAway;                                     // 0xe8(0x10)
	Struct LinearColor                                           FogColourTowards;                                  // 0xf8(0x10)
	Struct LinearColor                                           LightSunColour;                                    // 0x108(0x10)
	Struct LinearColor                                           SkyDomeHorizonColour;                              // 0x118(0x10)
	Struct LinearColor                                           SkyDomeZenithColour;                               // 0x128(0x10)
	Struct LinearColor                                           SkyLightColour;                                    // 0x138(0x10)
	Struct LinearColor                                           PostAmbientShadowColour;                           // 0x148(0x10)
	Struct LinearColor                                           FogColourAwayFar;                                  // 0x158(0x10)
	Struct LinearColor                                           FogColourUnderwater;                               // 0x168(0x10)
	Struct LinearColor                                           FogColourAwayUnderwater;                           // 0x178(0x10)
	Struct LinearColor                                           WaterColour;                                       // 0x188(0x10)
	Struct LinearColor                                           WaterColourShallow;                                // 0x198(0x10)
	Struct LinearColor                                           WaterBackLitColour;                                // 0x1a8(0x10)
	Struct LinearColor                                           WaterFoamColour;                                   // 0x1b8(0x10)
	Struct LinearColor                                           WaterFoamHighlightColour;                          // 0x1c8(0x10)
	Struct LinearColor                                           WaterAmbientColour;                                // 0x1d8(0x10)
	Struct LinearColor                                           PostReflectionProbeTint;                           // 0x1e8(0x10)
	Struct LinearColor                                           CloudRimlightColour;                               // 0x1f8(0x10)
	Struct LinearColor                                           CloudSkylightColour;                               // 0x208(0x10)
	Struct LinearColor                                           CloudSunlightColour;                               // 0x218(0x10)
	Struct LinearColor                                           PostUnderWaterTint;                                // 0x228(0x10)
	Struct LinearColor                                           SkyDomeMoonColour;                                 // 0x238(0x10)
	Struct LinearColor                                           PostGamma;                                         // 0x248(0x10)
	Struct LinearColor                                           SkyDomeSunColour;                                  // 0x258(0x10)
	Struct LinearColor                                           VFXFoamColour;                                     // 0x268(0x10)
	Struct LinearColor                                           VFXWindColour;                                     // 0x278(0x10)
	Struct LinearColor                                           VFXUnderwaterTint;                                 // 0x288(0x10)
	Struct LinearColor                                           StormRainColour;                                   // 0x298(0x10)
	Struct LinearColor                                           StormSkyLightColour;                               // 0x2a8(0x10)
	Struct LinearColor                                           StormPostGamma;                                    // 0x2b8(0x10)
	Struct LinearColor                                           StormFogColourUnderwater;                          // 0x2c8(0x10)
	Struct LinearColor                                           StormFogColourAwayUnderwater;                      // 0x2d8(0x10)
	Struct LinearColor                                           StormWaterColour;                                  // 0x2e8(0x10)
	Struct LinearColor                                           StormWaterColourShallow;                           // 0x2f8(0x10)
	Struct LinearColor                                           StormWaterBackLitColour;                           // 0x308(0x10)
	Struct LinearColor                                           StormWaterFoamColour;                              // 0x318(0x10)
	Struct LinearColor                                           StormWaterFoamHighlightColour;                     // 0x328(0x10)
	Struct LinearColor                                           StormWaterAmbientColour;                           // 0x338(0x10)
	Struct LinearColor                                           StormPostReflectionProbeTint;                      // 0x348(0x10)
	Struct LinearColor                                           SkullEyeColour;                                    // 0x358(0x10)
	Struct LinearColor                                           SandColour;                                        // 0x368(0x10)
};


// Size 0x8
class LightingZoneDistances: public None
{
public:
};


// Size 0x20
class LightingControllerMaterialInstances: public None
{
public:
	TArray<class SkyDomeMaterials*>                              SkyDomeMaterials;                                  // 0x0(0x10)
	Class MaterialInstanceDynamic*                               NorthStarMaterial;                                 // 0x10(0x8)
	Class MaterialInstanceDynamic*                               MoonMaterial;                                      // 0x18(0x8)
};


// Size 0x460
class LightingControllerLightingVars: public None
{
public:
};


// Size 0x50
class LightingControllerAssetParams: public None
{
public:
	Class MaterialParameterCollection*                           AtmosphericMaterialParams;                         // 0x0(0x8)
	Class MaterialParameterCollection*                           CloudMaterialParams;                               // 0x8(0x8)
	Class MaterialParameterCollection*                           ScreenEffectsMaterialParams;                       // 0x10(0x8)
	Class MaterialParameterCollection*                           IslandDangerMaterialParams;                        // 0x18(0x8)
	Class LightingControllerSettings*                            UnderworldLightingSet;                             // 0x20(0x8)
	Class LightingControllerSettings*                            HideoutLightingSet;                                // 0x28(0x8)
	Class LightingControllerSettings*                            ArenaTavernLightingSet;                            // 0x30(0x8)
	Class StaticMesh*                                            SkyDomeMesh;                                       // 0x38(0x8)
	Class StaticMesh*                                            NorthStarMesh;                                     // 0x40(0x8)
	Class StaticMesh*                                            MoonMesh;                                          // 0x48(0x8)
};


// Size 0x20
class LightingControllerTimeParams: public None
{
public:
	Class CurveFloat*                                            TimeScalerCurve;                                   // 0x0(0x8)
	float                                                        SunRiseTime;                                       // 0x8(0x4)
	float                                                        SunSetTime;                                        // 0xc(0x4)
	float                                                        InitialTimeOfDay;                                  // 0x10(0x4)
	float                                                        ReflectionCaptureTimeOfDay;                        // 0x14(0x4)
	int                                                          InitialDay;                                        // 0x18(0x4)
	float                                                        TutorialTimeOfDay;                                 // 0x1c(0x4)
};


// Size 0x40
class LightingControllerLightningParams: public None
{
public:
	Class CurveFloat*                                            LightningTimeIntensityCurve;                       // 0x0(0x8)
	Class CurveFloat*                                            LightningDistanceIntensityCurve;                   // 0x8(0x8)
	float                                                        MaxLightningDistance;                              // 0x10(0x4)
	float                                                        SkyLightIntensity;                                 // 0x14(0x4)
	float                                                        SkyLightMaxLerp;                                   // 0x18(0x4)
	float                                                        SunLightIntensity;                                 // 0x1c(0x4)
	float                                                        SunLightMaxLerp;                                   // 0x20(0x4)
	float                                                        FoamIntensity;                                     // 0x24(0x4)
	float                                                        FoamMaxLerp;                                       // 0x28(0x4)
	float                                                        RainIntensity;                                     // 0x2c(0x4)
	float                                                        LightningDuration;                                 // 0x30(0x4)
	float                                                        SkyLightOcclusion;                                 // 0x34(0x4)
	float                                                        CloudShadowMultiplier;                             // 0x38(0x4)
};


// Size 0x18
class LightingControllerRainParams: public None
{
public:
	float                                                        RainOcclusionDistance;                             // 0x0(0x4)
	float                                                        MaxDesaturation;                                   // 0x4(0x4)
	float                                                        MaxRainIntensity;                                  // 0x8(0x4)
	float                                                        FogInscatteringDistance;                           // 0xc(0x4)
	float                                                        LPVOcclusionReduction;                             // 0x10(0x4)
	float                                                        MaxRainWind;                                       // 0x14(0x4)
};


// Size 0x1a0
class LightingControllerPostProcessParams: public None
{
public:
	Struct RainPostProcessSettings                               RainPostProcessParams;                             // 0x0(0xc0)
	Struct RainPostProcessSettings                               UnderwaterPostProcessParams;                       // 0xc0(0xc0)
	Class MaterialInterface*                                     PostProcessUnderWaterPrelightingMaterial;          // 0x180(0x8)
	Class MaterialInterface*                                     PostProcessUnderwaterCausticsMaterial;             // 0x188(0x8)
	Class MaterialInterface*                                     PostProcessDistortionMaterial;                     // 0x190(0x8)
	Class MaterialInterface*                                     PostProcessColourOverlayMaterial;                  // 0x198(0x8)
};


// Size 0x38
class LightingControllerMoonParams: public None
{
public:
	TArray<Float None>                                           MoonPhaseAngles;                                   // 0x0(0x10)
	float                                                        MoonYaw;                                           // 0x10(0x4)
	float                                                        MoonElevation;                                     // 0x14(0x4)
	float                                                        MoonOrbitVerticalOffset;                           // 0x18(0x4)
	float                                                        MoonMeshDistance;                                  // 0x1c(0x4)
	float                                                        MoonMeshSize;                                      // 0x20(0x4)
	float                                                        SunInfluenceDuration;                              // 0x24(0x4)
	float                                                        SunInfluenceDistance;                              // 0x28(0x4)
	int                                                          NumMoonPhases;                                     // 0x2c(0x4)
	int                                                          DaysInMoonCycle;                                   // 0x30(0x4)
	bool                                                         SunInfluencesRotation;                             // 0x34(0x1)
	bool                                                         SunInfluencesLighting;                             // 0x34(0x1)
};


// Size 0x8
class LightingControllerIslandDangerParams: public None
{
public:
	float                                                        IslandDangerSpringAcceleration;                    // 0x0(0x4)
	float                                                        MaxDangerValue;                                    // 0x4(0x4)
};


// Size 0x44
class LightingControllerLightingParams: public None
{
public:
	float                                                        SunYaw;                                            // 0x0(0x4)
	float                                                        SunElevation;                                      // 0x4(0x4)
	float                                                        UnderworldSunElevation;                            // 0x8(0x4)
	float                                                        MinSunAngle;                                       // 0xc(0x4)
	float                                                        UnderworldZThreshold;                              // 0x10(0x4)
	float                                                        HideoutZThreshold;                                 // 0x14(0x4)
	float                                                        UnderwaterInsideShipBrightnessInBoatSpace;         // 0x18(0x4)
	float                                                        UnderwaterInsideShipBrightnessOutsideBoatSpace;    // 0x1c(0x4)
	float                                                        UnderwaterBrightnessInBoatSpace;                   // 0x20(0x4)
	float                                                        UnderwaterDepthDarkenStart;                        // 0x24(0x4)
	float                                                        UnderwaterDepthDarkenRange;                        // 0x28(0x4)
	float                                                        UnderwaterDepthDarkenMin;                          // 0x2c(0x4)
	float                                                        UnderwaterMurkDensity;                             // 0x30(0x4)
	float                                                        SecondaryLPVCascadeOcclusionIntensityScale;        // 0x34(0x4)
	int                                                          LPVPropagationSteps;                               // 0x38(0x4)
	int                                                          DefaultLightingSet;                                // 0x3c(0x4)
	bool                                                         EnableGodRays;                                     // 0x40(0x1)
};


// Size 0x90
class LightingControllerTransformParams: public None
{
public:
	Struct Transform                                             NorthStarRelativeTransform;                        // 0x0(0x30)
	Struct Transform                                             SkyDomeRelativeTransform;                          // 0x30(0x30)
	Struct Rotator                                               HideoutLightRotation;                              // 0x60(0xc)
	Struct Rotator                                               ArenaTavernLightRotation;                          // 0x6c(0xc)
	float                                                        FogHeight;                                         // 0x78(0x4)
	float                                                        UnderworldFogHeight;                               // 0x7c(0x4)
	float                                                        HideoutFogHeight;                                  // 0x80(0x4)
	float                                                        ArenaTavernFogHeight;                              // 0x84(0x4)
};


// Size 0xc8
class ActiveLightning: public None
{
public:
	Struct LightningImpact                                       Impact;                                            // 0x0(0x28)
};


// Size 0x28
class LightningImpact: public None
{
public:
	Struct Vector2D                                              Location;                                          // 0x8(0x8)
	Class Actor*                                                 AttachActor;                                       // 0x10(0x8)
	Class AthenaCharacter*                                       TargetCharacter;                                   // 0x18(0x8)
	bool                                                         TargetedHighPriorityTarget;                        // 0x20(0x1)
};


// Size 0x38
class LightningStrikeFrequency: public None
{
public:
	float                                                        MinStrength;                                       // 0x0(0x4)
	Struct WeightedProbabilityRangeOfRanges                      TimePerStrike;                                     // 0x8(0x30)
};


// Size 0x10
class LightningTargetSelector: public None
{
public:
	TArray<Struct LightningTarget>                               Targets;                                           // 0x0(0x10)
};


// Size 0x8
class LightningTarget: public None
{
public:
	byte                                                         TargetType;                                        // 0x0(0x1)
	float                                                        Chance;                                            // 0x4(0x4)
};


// Size 0x18
class LoadableComponentTimerOverride: public None
{
public:
	struct FName                                                 FeatureFlag;                                       // 0x0(0x8)
	class                                                        Item;                                              // 0x8(0x8)
	float                                                        LoadTime;                                          // 0x10(0x4)
};


// Size 0x10
class LoadableComponentState: public None
{
public:
	byte                                                         LoadableState;                                     // 0x0(0x1)
	Class Object*                                                LoadedItem;                                        // 0x8(0x8)
};


// Size 0x48
class Loadout: public None
{
public:
	Struct ItemLoadout                                           ItemLoadout;                                       // 0x0(0x20)
	Struct ClothingLoadout                                       ClothingLoadout;                                   // 0x20(0x10)
	Struct PetLoadout                                            PetLoadout;                                        // 0x30(0x18)
};


// Size 0x18
class PetLoadout: public None
{
public:
	TArray<Struct PetLoadoutItem>                                Items;                                             // 0x0(0x10)
	bool                                                         PetNamingDisallowed;                               // 0x10(0x1)
	int                                                          CurrentPetIndex;                                   // 0x14(0x4)
};


// Size 0x20
class PetLoadoutItem: public None
{
public:
	class                                                        PetEntitlementDesc;                                // 0x0(0x8)
	class                                                        PetCustomizationDesc;                              // 0x8(0x8)
	Struct FString                                               PetName;                                           // 0x10(0x10)
};


// Size 0x20
class ItemLoadout: public None
{
public:
	TArray<Struct ItemLoadoutCapacity>                           Capacities;                                        // 0x0(0x10)
	TArray<Class Capacities>                                     Items;                                             // 0x10(0x10)
};


// Size 0x10
class ItemLoadoutCapacity: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	int                                                          Capacity;                                          // 0x8(0x4)
};


// Size 0xd8
class LoadoutEntry: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct Loadout                                               Loadout;                                           // 0x78(0x48)
	Struct FString                                               Tag;                                               // 0xc0(0x10)
};


// Size 0x18
class SupplementalLoadout: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	Struct StringAssetReference                                  LoadoutAsset;                                      // 0x8(0x10)
};


// Size 0xf0
class LPVAdaptationState: public None
{
public:
	Struct Transform                                             InitialTransform;                                  // 0x0(0x30)
	Struct Transform                                             DestinationTransform;                              // 0x30(0x30)
	Struct Transform                                             CurrentTransform;                                  // 0x60(0x30)
	Struct Transform                                             SavedOffShipTransform;                             // 0x90(0x30)
	float                                                        BlendWeight;                                       // 0xc0(0x4)
	float                                                        BlendTime;                                         // 0xc4(0x4)
	float                                                        BlendTranslationTime;                              // 0xc8(0x4)
	float                                                        AdditionalAdaptationTime;                          // 0xcc(0x4)
	float                                                        DefaultRotationBlendTime;                          // 0xd0(0x4)
	float                                                        DefaultTranslationBlendTime;                       // 0xd4(0x4)
	float                                                        DefaultAdditionalBlendTime;                        // 0xd8(0x4)
	byte                                                         DefaultAdaptationType;                             // 0xdc(0x1)
	byte                                                         AdaptationType;                                    // 0xdd(0x1)
	bool                                                         bIsPlayerInLPVRefFrameArea;                        // 0xe0(0x1)
	bool                                                         bIsLPVAdapting;                                    // 0xe0(0x1)
	bool                                                         bAdaptRotationOnly;                                // 0xe0(0x1)
	bool                                                         bUseInstanceDefaultValues;                         // 0xe0(0x1)
};


// Size 0x8
class EventPlayerChangedTableMapPan: public None
{
public:
	Struct Vector2D                                              PanDelta;                                          // 0x0(0x8)
};


// Size 0x4
class EventPlayerChangedTableMapZoom: public None
{
public:
	float                                                        ZoomDelta;                                         // 0x0(0x4)
};


// Size 0x8
class EventPlayerPinnedMapTable: public None
{
public:
	Struct Vector2D                                              PinWorldLocation;                                  // 0x0(0x8)
};


// Size 0x10
class MapTableTutorialHandler: public None
{
public:
	Class Actor*                                                 CachedMapController;                               // 0x0(0x8)
	Class Tutorial2019Component*                                 CachedMapControllerTutorialComponent;              // 0x8(0x8)
};


// Size 0x28
class MastCollisionProfiles: public None
{
public:
	struct FName                                                 CollisionDisabledProfile;                          // 0x0(0x8)
	struct FName                                                 PlayerAndItemsCollisionProfile;                    // 0x8(0x8)
	struct FName                                                 PlayerOnlyCollisionProfile;                        // 0x10(0x8)
	struct FName                                                 ItemsOnlyCollisionProfile;                         // 0x18(0x8)
	struct FName                                                 ProjectilesOnlyCollisionProfile;                   // 0x20(0x8)
};


// Size 0x38
class MastPhysicsComponents: public None
{
public:
	Class PrimitiveComponent*                                    MastBaseComponent;                                 // 0x0(0x8)
	Class PrimitiveComponent*                                    MastTopComponent;                                  // 0x8(0x8)
	Class PrimitiveComponent*                                    MastWeldedPhysicsBodyComponent;                    // 0x10(0x8)
	Class PrimitiveComponent*                                    WeldedCrowsNestComponent;                          // 0x18(0x8)
	Class PrimitiveComponent*                                    UnweldedCrowsNestComponent;                        // 0x20(0x8)
	TArray<class UnweldedCrossBeamComponents*>                   UnweldedCrossBeamComponents;                       // 0x28(0x10)
};


// Size 0xf8
class MeleeAttackHitResponseData: public None
{
public:
	Class Pawn*                                                  AttackingCharacter;                                // 0x0(0x8)
	Struct HitResult                                             Hit;                                               // 0x8(0x80)
	Struct ImpactDamageEvent                                     ImpactDamageEvent;                                 // 0x88(0x58)
	bool                                                         DamageConfirmed;                                   // 0xe0(0x1)
	bool                                                         Blocked;                                           // 0xe1(0x1)
	Class MeleeAttackDataAsset*                                  AttackData;                                        // 0xe8(0x8)
	bool                                                         AttackCanDamage;                                   // 0xf0(0x1)
};


// Size 0x1
class MeleeAttackHitResponses: public None
{
public:
	bool                                                         DecalsParticlesAudio;                              // 0x0(0x1)
	bool                                                         Animation;                                         // 0x0(0x1)
	bool                                                         CameraShake;                                       // 0x0(0x1)
	bool                                                         GamepadRumble;                                     // 0x0(0x1)
	bool                                                         HitIndicator;                                      // 0x0(0x1)
};


// Size 0x4
class EventMeleeAttackUpdateRecoverDuration: public None
{
public:
	float                                                        RecoverDuration;                                   // 0x0(0x4)
};


// Size 0x1
class EventMeleeAttackProcessorStrikeEnded: public None
{
public:
};


// Size 0x1
class EventMeleeAttackProcessorStrikeStarted: public None
{
public:
};


// Size 0x1
class EventMeleeAttackProcessorComplete: public None
{
public:
};


// Size 0x8
class EventMeleeAttackPredictedHit: public None
{
public:
	Class Actor*                                                 HitActor;                                          // 0x0(0x8)
};


// Size 0xf8
class EventMeleeAttackHit: public None
{
public:
	Struct MeleeAttackHitResponseData                            HitResponseData;                                   // 0x0(0xf8)
};


// Size 0x8
class EventMeleeWeaponAttackTriggered: public None
{
public:
	byte                                                         AttackType;                                        // 0x0(0x1)
	int                                                          AttackIndex;                                       // 0x4(0x4)
};


// Size 0x1
class EventBlocked: public None
{
public:
};


// Size 0x1
class EventStopBlocking: public None
{
public:
};


// Size 0x1
class EventStartBlocking: public None
{
public:
};


// Size 0x10
class MeleeWeaponSpecialAttackData: public None
{
public:
	class                                                        NotificationInputId;                               // 0x0(0x8)
	Class MeleeAttackDataAsset*                                  Asset;                                             // 0x8(0x8)
};


// Size 0x8
class MeleeWeaponMovementSpeedPair: public None
{
public:
	byte                                                         Label;                                             // 0x0(0x1)
	float                                                        SpeedScalar;                                       // 0x4(0x4)
};


// Size 0x10
class MerchantQuestItemDescAndReward: public None
{
public:
	class                                                        CrateDesc;                                         // 0x0(0x8)
	Struct RewardId                                              HandInOnTimeRewardId;                              // 0x8(0x8)
};


// Size 0x80
class MerchantMapItemData: public None
{
public:
	Struct TreasureMapTextDesc                                   Name;                                              // 0x0(0x48)
	Class Texture*                                               IconImage;                                         // 0x48(0x8)
	class                                                        CrateItemDesc;                                     // 0x50(0x8)
	TArray<Struct CrateItemDesc>                                 AcceptableAlternativeCrateItemData;                // 0x58(0x10)
	class                                                        FaunaSpecies;                                      // 0x68(0x8)
	class                                                        FaunaBreed;                                        // 0x70(0x8)
	int                                                          NumLeftToAllocate;                                 // 0x78(0x4)
	int                                                          NumLeftToDeliver;                                  // 0x7c(0x4)
};


// Size 0xf0
class MerchantMapContents: public None
{
public:
	Struct TreasureMapTextDesc                                   PickupLocation;                                    // 0x0(0x48)
	Struct TreasureMapTextDesc                                   DeliveryLocation;                                  // 0x48(0x48)
	Struct TreasureMapTextDesc                                   DeliverByTime;                                     // 0x90(0x48)
	struct FName                                                 DeliveryLocationIslandName;                        // 0xd8(0x8)
	TArray<Struct DeliveryLocationIslandName>                    ItemData;                                          // 0xe0(0x10)
};


// Size 0x18
class MerchantQuestRequiredItemsRankEntry: public None
{
public:
	int                                                          Rank;                                              // 0x0(0x4)
	int                                                          Payout;                                            // 0x4(0x4)
	TArray<Struct MerchantQuestRequiredItemsGroupList>           RequiredItems;                                     // 0x8(0x10)
};


// Size 0x18
class MerchantQuestRequiredItemsGroupList: public None
{
public:
	int                                                          NumRequiredItems;                                  // 0x0(0x4)
	TArray<Struct MerchantQuestRequiredItemsGroup>               RequiredItemsGroups;                               // 0x8(0x10)
};


// Size 0x10
class MerchantQuestRequiredItemsGroup: public None
{
public:
	TArray<class RequiredItems*>                                 RequiredItems;                                     // 0x0(0x10)
};


// Size 0x4
class MermaidUsedTelemetryEvent: public None
{
public:
	int                                                          MermaidId;                                         // 0x0(0x4)
};


// Size 0x1
class PlayerDoesNotRequireMermaidTelemetryEvent: public None
{
public:
	byte                                                         Reason;                                            // 0x0(0x1)
};


// Size 0x1
class PlayerRequiresMermaidTelemetryEvent: public None
{
public:
	byte                                                         Reason;                                            // 0x0(0x1)
};


// Size 0x10
class MermaidSpawnedTelemetryEvent: public None
{
public:
	int                                                          MermaidId;                                         // 0x0(0x4)
	Struct Vector                                                MermaidPosition;                                   // 0x4(0xc)
};


// Size 0x10
class MermaidDeactivatedLocally: public None
{
public:
	Class Mermaid*                                               Mermaid;                                           // 0x0(0x8)
	bool                                                         IsForLocalPlayer;                                  // 0x8(0x1)
};


// Size 0x10
class MermaidActivatedLocally: public None
{
public:
	Class Mermaid*                                               Mermaid;                                           // 0x0(0x8)
	bool                                                         IsForLocalPlayer;                                  // 0x8(0x1)
};


// Size 0x18
class MermaidUsedEvent: public None
{
public:
	Class Mermaid*                                               Mermaid;                                           // 0x10(0x8)
};


// Size 0x10
class MessageInABottleVoyageEntry: public None
{
public:
	struct FName                                                 FeatureFlag;                                       // 0x0(0x8)
	Class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0x8(0x8)
};


// Size 0x10
class MetalAIFormRustyDamageResponse: public None
{
public:
	class                                                        DamagerType;                                       // 0x0(0x8)
	float                                                        DamageMultiplier;                                  // 0x8(0x4)
	byte                                                         HitReaction;                                       // 0xc(0x1)
};


// Size 0x10
class MigrationUIContentsDataAssetEntry: public None
{
public:
	TArray<Text None>                                            DisplayText;                                       // 0x0(0x10)
};


// Size 0x20
class SpecialisedClothingCategories: public None
{
public:
	class                                                        DisplayIfWorn;                                     // 0x0(0x8)
	TArray<Struct FeaturedClothingCategory>                      Categories;                                        // 0x8(0x10)
	bool                                                         AllTab;                                            // 0x18(0x1)
};


// Size 0x10
class FeaturedClothingCategory: public None
{
public:
	class                                                        Category;                                          // 0x0(0x8)
	struct FName                                                 Feature;                                           // 0x8(0x8)
};


// Size 0x10
class FeaturedPetCategory: public None
{
public:
	class                                                        Category;                                          // 0x0(0x8)
	struct FName                                                 Feature;                                           // 0x8(0x8)
};


// Size 0x10
class FeaturedShipCustomisationCategory: public None
{
public:
	class                                                        Category;                                          // 0x0(0x8)
	struct FName                                                 Feature;                                           // 0x8(0x8)
};


// Size 0x28
class SetHiddenData: public None
{
public:
	Class SequencerCutSceneActor*                                SequencerActor;                                    // 0x0(0x8)
	Class LevelSequence*                                         LevelSeq;                                          // 0x8(0x8)
	Struct FString                                               ActorName;                                         // 0x10(0x10)
	bool                                                         Visible;                                           // 0x20(0x1)
};


// Size 0x30
class ShipCustomizationChestCrewMember: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Class Actor*                                                 Player;                                            // 0x10(0x8)
	Struct NetActorPtr                                           NetPlayerState;                                    // 0x18(0x14)
};


// Size 0x20
class NPCAnimationIdlesVariantStruct: public None
{
public:
	Class AnimSequence*                                          IdleVariant;                                       // 0x0(0x8)
	Class AnimSequence*                                          InactiveIdleVariant;                               // 0x8(0x8)
	Class AnimSequence*                                          InteractIdleVariant;                               // 0x10(0x8)
	bool                                                         IdleVariantIsValid;                                // 0x18(0x1)
	bool                                                         InactiveIdleVariantIsValid;                        // 0x19(0x1)
	bool                                                         InteractIdleVariantIsValid;                        // 0x1a(0x1)
};


// Size 0x18
class OverrideTypeDialogOptionUsageCounter: public None
{
public:
	class                                                        OverrideType;                                      // 0x0(0x8)
	TArray<Int >                                                 OptionUsageCounter;                                // 0x8(0x10)
};


// Size 0x58
class NPCDialogFormattedHeaderByConditionText: public None
{
public:
	Struct FText                                                 Text;                                              // 0x0(0x38)
	Struct FString                                               ParameterName;                                     // 0x38(0x10)
	TArray<class Conditions*>                                    Conditions;                                        // 0x48(0x10)
};


// Size 0x48
class NPCDialogHeaderByConditionText: public None
{
public:
	Struct FText                                                 Text;                                              // 0x0(0x38)
	TArray<class Conditions*>                                    Conditions;                                        // 0x38(0x10)
};


// Size 0x48
class NPCDialogRankGatedText: public None
{
public:
	Struct FText                                                 Text;                                              // 0x0(0x38)
	TArray<Class Text>                                           RequiredRanks;                                     // 0x38(0x10)
};


// Size 0x8
class PlayerStatOption: public None
{
public:
	Struct PlayerStat                                            StatToFire;                                        // 0x0(0x4)
	bool                                                         FireForWholeCrew;                                  // 0x4(0x1)
};


// Size 0x8
class TutorialHideFootstepEvent: public None
{
public:
};


// Size 0x8
class TutorialShowFootstepEvent: public None
{
public:
};


// Size 0x1
class TutorialDialogOptionSelectEvent: public None
{
public:
	byte                                                         OptionSelected;                                    // 0x0(0x1)
};


// Size 0x1
class TutorialDialogEvent: public None
{
public:
	byte                                                         StepStarted;                                       // 0x0(0x1)
};


// Size 0x1
class PostSellTutorialItem: public None
{
public:
};


// Size 0x8
class PreSellTutorialItem: public None
{
public:
	Class ItemInfo*                                              SpawnedItem;                                       // 0x0(0x8)
};


// Size 0x1
class TutorialDisplayedMermaidNotificationTelemetryEvent: public None
{
public:
};


// Size 0x1
class TutorialResetMysteriousStrangersEvent: public None
{
public:
};


// Size 0x1
class TutorialLegendaryTavernStrangerPlaySummonSFXEvent: public None
{
public:
};


// Size 0x8
class TutorialStepExitedEvent: public None
{
public:
	struct FName                                                 StepName;                                          // 0x0(0x8)
};


// Size 0x8
class TutorialStepEnteredEvent: public None
{
public:
	struct FName                                                 StepName;                                          // 0x0(0x8)
};


// Size 0x18
class NPCDialogData: public None
{
public:
	Class NPCDialogHeader*                                       Header;                                            // 0x0(0x8)
	TArray<class Options*>                                       Options;                                           // 0x8(0x10)
};


// Size 0x18
class NPCDialogDataForOverrideType: public None
{
public:
	class                                                        OverrideType;                                      // 0x0(0x8)
	Class NPCDialogConditionalContext*                           OverrideTypeContext;                               // 0x8(0x8)
	Class NPCDialogTreeData*                                     DialogTreeData;                                    // 0x10(0x8)
};


// Size 0x30
class StartGameNarrative: public None
{
public:
	Struct FString                                               TexturePath;                                       // 0x0(0x10)
	Struct FString                                               Text;                                              // 0x10(0x10)
	float                                                        EnterDurationSeconds;                              // 0x20(0x4)
	float                                                        HoldDurationSeconds;                               // 0x24(0x4)
	float                                                        ExitDurationSeconds;                               // 0x28(0x4)
	byte                                                         AlignX;                                            // 0x2c(0x1)
	byte                                                         AlignY;                                            // 0x2d(0x1)
	byte                                                         Size;                                              // 0x2e(0x1)
};


// Size 0x20
class PetSpawnDefinition: public None
{
public:
	class                                                        PetDesc;                                           // 0x0(0x8)
	Struct PetCustomisation                                      PetCustomisation;                                  // 0x8(0x18)
};


// Size 0x10
class SpawnedPetData: public None
{
public:
	Class Pet*                                                   SpawnedPet;                                        // 0x0(0x8)
	Class PetItemInfo*                                           SpawnedInfo;                                       // 0x8(0x8)
};


// Size 0x20
class PetLoadoutContainer: public None
{
public:
	Struct PetLoadout                                            Loadout;                                           // 0x0(0x18)
	bool                                                         HasBeenSet;                                        // 0x18(0x1)
};


// Size 0x90
class PetShopPetSpecies: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	Struct StringAssetReference                                  Icon;                                              // 0x38(0x10)
	Struct FText                                                 Description;                                       // 0x48(0x38)
	TArray<Struct PetShopPetBreed>                               Breeds;                                            // 0x80(0x10)
};


// Size 0x90
class PetShopPetBreed: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	Struct StringAssetReference                                  Icon;                                              // 0x38(0x10)
	Struct FText                                                 Description;                                       // 0x48(0x38)
	TArray<Class Description>                                    Categories;                                        // 0x80(0x10)
};


// Size 0x20
class PlayModePhrases: public None
{
public:
	byte                                                         PlayModeKey;                                       // 0x0(0x1)
	Class PhrasesRadialDataAsset*                                PhraseDataAsset;                                   // 0x8(0x8)
	Class NonVerbalRadialDataAsset*                              QuickAccessDataAsset;                              // 0x10(0x8)
	Class NonVerbalRadialDataAsset*                              StrategyDataAsset;                                 // 0x18(0x8)
};


// Size 0x1
class PioneerObjectiveCompleteEvent: public None
{
public:
	bool                                                         HasReward;                                         // 0x0(0x1)
};


// Size 0x90
class PioneerRewardEpochCompleteEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x8(0x78)
	Struct Guid                                                  PlayerGameId;                                      // 0x80(0x10)
};


// Size 0xc8
class PirateGeneratorBakeFailureTelemetryEvent: public None
{
public:
	TArray<Str None>                                             CompleteTextures;                                  // 0xa8(0x10)
	TArray<Str >                                                 IncompleteTextures;                                // 0xb8(0x10)
};


// Size 0xa8
class PirateGeneratorBakeTelemetryEvent: public None
{
public:
	Struct PirateDescription                                     Desc;                                              // 0x0(0x80)
	byte                                                         Flags;                                             // 0x80(0x1)
	Struct FString                                               Operation;                                         // 0x88(0x10)
	Struct Guid                                                  OperationId;                                       // 0x98(0x10)
};


// Size 0x20
class QuestVarPLSection: public None
{
public:
};


// Size 0x20
class QuestVarPLSectionBundle: public None
{
public:
};


// Size 0x10
class PLSectionBundleEntry: public None
{
public:
	Class PirateLegendSection*                                   Section;                                           // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
};


// Size 0x1
class PiratePreviewShutdownEvent: public None
{
public:
};


// Size 0x1
class PiratePreviewBusyEvent: public None
{
public:
};


// Size 0x98
class PiratePreviewReadyEvent: public None
{
public:
	Struct PirateDescription                                     Desc;                                              // 0x10(0x80)
	bool                                                         Valid;                                             // 0x90(0x1)
};


// Size 0xc
class PiratePreviewMoveCameraEvent: public None
{
public:
	float                                                        Rotation;                                          // 0x0(0x4)
	float                                                        Pitch;                                             // 0x4(0x4)
	float                                                        Zoom;                                              // 0x8(0x4)
};


// Size 0xb0
class PiratePreviewGeneratePirateEvent: public None
{
public:
	Struct PirateDescription                                     PirateDescription;                                 // 0x0(0x80)
	Struct PiratePreviewView                                     View;                                              // 0x80(0x20)
	bool                                                         ForceRebuild;                                      // 0xa0(0x1)
};


// Size 0x20
class PiratePreviewView: public None
{
public:
	struct FName                                                 CameraName;                                        // 0x0(0x8)
	struct FName                                                 LookAtBoneName;                                    // 0x8(0x8)
	Class AnimationAsset*                                        Anim;                                              // 0x10(0x8)
	bool                                                         ShouldSpin;                                        // 0x18(0x1)
};


// Size 0x1
class PiratePreviewLoadingEvent: public None
{
public:
};


// Size 0x1
class PiratePreviewLoadedEvent: public None
{
public:
};


// Size 0x10
class PiratePreviewCreatedEvent: public None
{
public:
	Struct FString                                               PreviewURL;                                        // 0x0(0x10)
};


// Size 0x10
class RequestClearClothingCategoryPiratePreviewEvent: public None
{
public:
	TArray<Class RequestRandomiseClothingCategoryPiratePreviewEvent> ClothingCategories;                                // 0x0(0x10)
};


// Size 0x10
class RequestRandomiseClothingCategoryPiratePreviewEvent: public None
{
public:
	TArray<Class RequestEquipClothingPiratePreviewEvent>         ClothingCategories;                                // 0x0(0x10)
};


// Size 0x10
class RequestEquipClothingPiratePreviewEvent: public None
{
public:
	Struct FString                                               ClothingDesc;                                      // 0x0(0x10)
};


// Size 0x1
class RequestDestroyPiratePreviewEvent: public None
{
public:
};


// Size 0x8
class RequestCreatePiratePreviewEvent: public None
{
public:
	int                                                          ResolutionX;                                       // 0x0(0x4)
	int                                                          ResolutionY;                                       // 0x4(0x4)
};


// Size 0x28
class EmoteDataEntryFrontend: public None
{
public:
	struct FName                                                 EmoteIdent;                                        // 0x0(0x8)
};


// Size 0x40
class NoiseMakerController: public None
{
public:
	Class NoiseMakerControllerParams*                            NoiseMakerParams;                                  // 0x0(0x8)
	float                                                        MaxRunningSpeed;                                   // 0x8(0x4)
	float                                                        SimulatedMaxRunningSpeed;                          // 0xc(0x4)
};


// Size 0x30
class PoolDensityData: public None
{
public:
	Class WwiseObjectPoolWrapper*                                WwiseObjectPoolDensityWrapper;                     // 0x0(0x8)
	Struct WwiseEmitter                                          DensityEmitter;                                    // 0x8(0x20)
};


// Size 0x28
class PlayerCompanyProgress: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x0(0x8)
	Struct FString                                               Sig;                                               // 0x18(0x10)
};


// Size 0x58
class PlayerCompanyProgressCache: public None
{
public:
	byte                                                         CompanyProgressStatus;                             // 0x0(0x1)
};


// Size 0x1
class CrewCancelVoteToChangeMatchmakingVisibilityEvent: public None
{
public:
};


// Size 0x1
class CrewVoteToChangeMatchmakingVisibilityEvent: public None
{
public:
};


// Size 0x1
class InviteFriendsEvent: public None
{
public:
	bool                                                         IsFromCreatorMode;                                 // 0x0(0x1)
};


// Size 0x1
class ShipCancelVoteToScuttleEvent: public None
{
public:
};


// Size 0x1
class ShipVoteToScuttleEvent: public None
{
public:
};


// Size 0x10
class CrewCancelVoteOutOfBrigEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
};


// Size 0x10
class CrewVoteOutOfBrigEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
};


// Size 0x10
class CrewCancelVoteToBrigEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
};


// Size 0x10
class CrewVoteToBrigEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
};


// Size 0x58
class CrewManagementEvent: public None
{
public:
	Struct CrewManagementData                                    CrewDefinition;                                    // 0x0(0x58)
};


// Size 0x58
class CrewManagementData: public None
{
public:
	TArray<Struct CrewManagementMemberData>                      CrewMembers;                                       // 0x0(0x10)
	TArray<Struct ReservedCrewSlotData>                          CrewMembersThatAreNotConnectedToTheServerButHaveAReservedSlot; // 0x10(0x10)
	Struct CrewManagementOtherCrewData                           OtherCrews;                                        // 0x20(0x1)
	Struct CrewManagementShipData                                Ship;                                              // 0x24(0x10)
	Struct CrewManagementMatchmakingVisibilityData               MatchmakingVisibility;                             // 0x34(0x10)
	Struct CrewManagementArenaRivalVotingData                    ArenaRivalVoting;                                  // 0x44(0xc)
	bool                                                         CrewFull;                                          // 0x50(0x1)
};


// Size 0xc
class CrewManagementArenaRivalVotingData: public None
{
public:
	bool                                                         Voted;                                             // 0x0(0x1)
	int                                                          VotesCast;                                         // 0x4(0x4)
	int                                                          VotesRequired;                                     // 0x8(0x4)
};


// Size 0x10
class CrewManagementMatchmakingVisibilityData: public None
{
public:
	bool                                                         Voted;                                             // 0x0(0x1)
	int                                                          VotesCast;                                         // 0x4(0x4)
	int                                                          VotesRequired;                                     // 0x8(0x4)
	byte                                                         State;                                             // 0xc(0x1)
};


// Size 0x10
class CrewManagementShipData: public None
{
public:
	bool                                                         Voted;                                             // 0x0(0x1)
	int                                                          VotesCast;                                         // 0x4(0x4)
	int                                                          VotesRequired;                                     // 0x8(0x4)
	byte                                                         State;                                             // 0xc(0x1)
};


// Size 0x1
class CrewManagementOtherCrewData: public None
{
public:
	byte                                                         Muted;                                             // 0x0(0x1)
};


// Size 0x20
class ReservedCrewSlotData: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	Struct FString                                               GamerTag;                                          // 0x10(0x10)
};


// Size 0x38
class CrewManagementMemberData: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	Struct FString                                               GamerTag;                                          // 0x10(0x10)
	Struct CrewManagementMemberBrigState                         Brig;                                              // 0x20(0x10)
	byte                                                         Muted;                                             // 0x30(0x1)
};


// Size 0x10
class CrewManagementMemberBrigState: public None
{
public:
	bool                                                         Voted;                                             // 0x0(0x1)
	int                                                          VotesCast;                                         // 0x4(0x4)
	int                                                          VotesRequired;                                     // 0x8(0x4)
	byte                                                         State;                                             // 0xc(0x1)
};


// Size 0x1
class StopRequestCrewManagementEvent: public None
{
public:
};


// Size 0x1
class RequestCrewManagementEvent: public None
{
public:
};


// Size 0x1
class EventApplyStatusPlayerCurseEnd: public None
{
public:
};


// Size 0x20
class EventApplyStatusPlayerCurse: public None
{
public:
	Struct Status                                                Status;                                            // 0x8(0x18)
};


// Size 0x1
class EventCurseSleepEnd: public None
{
public:
};


// Size 0x1
class EventCurseSleep: public None
{
public:
};


// Size 0x1
class EventCurseBoogieEnd: public None
{
public:
};


// Size 0x1
class EventCurseBoogie: public None
{
public:
};


// Size 0x1
class EventCurseDrunkennessEnd: public None
{
public:
};


// Size 0x4
class EventCurseDrunkenness: public None
{
public:
};


// Size 0x1
class EventCurseLimpEnd: public None
{
public:
};


// Size 0x1
class EventCurseLimp: public None
{
public:
};


// Size 0xc
class PlayerCurseToAudioSwitchValue: public None
{
public:
	byte                                                         CurseTag;                                          // 0x0(0x1)
	struct FName                                                 SwitchValue;                                       // 0x4(0x8)
};


// Size 0x1
class CurseInfo: public None
{
public:
};


// Size 0x78
class Entitlements: public None
{
public:
	TArray<Class PlayerEntitlements>                             PreCachedEntitlementTypes;                         // 0x8(0x10)
	TArray<Class PreCachedEntitlementTypes>                      Entitlements;                                      // 0x18(0x10)
};


// Size 0x80
class PlayerEntitlements: public None
{
public:
	byte                                                         EntitlementsStatus;                                // 0x78(0x1)
};


// Size 0x38
class PlayerEntitlementsCompact: public None
{
public:
	byte                                                         Status;                                            // 0x0(0x1)
	TArray<Class Status>                                         Loose;                                             // 0x28(0x10)
};


// Size 0x30
class EntitlementIdInfo: public None
{
public:
	Struct FString                                               EntitlementId;                                     // 0x20(0x10)
};


// Size 0x8
class PlayerHeroStatUpdatedEvent: public None
{
public:
	byte                                                         Result;                                            // 0x0(0x1)
	Struct PlayerStat                                            Stat;                                              // 0x4(0x4)
};


// Size 0xc
class PlayerHeroStatUnit: public None
{
public:
	Struct PlayerStat                                            PlayerStat;                                        // 0x0(0x4)
	struct FName                                                 HeroStatId;                                        // 0x4(0x8)
};


// Size 0x30
class PlayerModerationReportablePlayers: public None
{
public:
	Struct FString                                               ReportingGamertag;                                 // 0x0(0x10)
	Struct FString                                               ReportingXUID;                                     // 0x10(0x10)
	TArray<Struct PlayerModerationReportablePlayerDetails>       Players;                                           // 0x20(0x10)
};


// Size 0x30
class PlayerModerationReportablePlayerDetails: public None
{
public:
	Struct FString                                               ReportableGamertag;                                // 0x0(0x10)
	Struct FString                                               ScrambledGamertag;                                 // 0x10(0x10)
	Struct FString                                               XUID;                                              // 0x20(0x10)
};


// Size 0x20
class RecentlyInteractedWithPlayers: public None
{
public:
	TArray<class RecentlyInteractedPlayers*>                     RecentlyInteractedPlayers;                         // 0x0(0x10)
	Class AthenaPlayerCharacter*                                 ReportingCharacter;                                // 0x10(0x8)
	Struct DateTime                                              InteractionTime;                                   // 0x18(0x8)
};


// Size 0x38
class RecentlyInteractedWithPlayer: public None
{
public:
	Struct FString                                               GamerTag;                                          // 0x0(0x10)
	Struct FString                                               ScrambledGamertag;                                 // 0x10(0x10)
	Struct FString                                               XUID;                                              // 0x20(0x10)
	Struct DateTime                                              LastInteractionTime;                               // 0x30(0x8)
};


// Size 0x10
class TinySharkMusicEvent: public None
{
public:
};


// Size 0x10
class MusicEvent: public None
{
public:
	Class WwiseEvent*                                            StartEvent;                                        // 0x0(0x8)
	Class WwiseEvent*                                            StopEvent;                                         // 0x8(0x8)
};


// Size 0x10
class KrakenMusicEvent: public None
{
public:
};


// Size 0x20
class PlayerNonVerbalComponentTelemetry: public None
{
public:
	Class AthenaPlayerController*                                PlayerController;                                  // 0x0(0x8)
};


// Size 0x90
class PlayerRelevancyRequest: public None
{
public:
	Class AthenaPlayerController*                                PlayerController;                                  // 0x0(0x8)
	byte                                                         RequestState;                                      // 0x8(0x1)
	float                                                        TimeRemaining;                                     // 0xc(0x4)
};


// Size 0x10
class WalletBalance: public None
{
public:
	TArray<Struct WalletBalanceItem>                             Balances;                                          // 0x0(0x10)
};


// Size 0x8
class WalletBalanceItem: public None
{
public:
	byte                                                         CurrencyId;                                        // 0x0(0x1)
};


// Size 0x20
class PocketWatchDateDisplay: public None
{
public:
	Class WwiseEvent*                                            DateSwitchSFX;                                     // 0x0(0x8)
	Class MaterialInstanceDynamic*                               FirstPersonMeshDynamicMaterialInstance;            // 0x8(0x8)
	Class MaterialInstanceDynamic*                               ThirdPersonMeshDynamicMaterialInstance;            // 0x10(0x8)
};


// Size 0x68
class PocketWatchHandParams: public None
{
public:
	TArray<Struct PioneerRewardInfo>                             PrimaryTickAnimations;                             // 0x0(0x10)
	Struct WeightedProbabilityRange                              PrimaryTickAnimationProbabilities;                 // 0x10(0x20)
	TArray<Struct PocketWatchTickAnimation>                      SpecialTickAnimations;                             // 0x30(0x10)
	Struct WeightedProbabilityRange                              SpecialTickAnimationProbabilities;                 // 0x40(0x20)
	float                                                        ProbabilityOfSpecialTick;                          // 0x60(0x4)
};


// Size 0x10
class PocketWatchTickAnimation: public None
{
public:
	Class CurveFloat*                                            AnimationCurve;                                    // 0x0(0x8)
	Class WwiseEvent*                                            AnimationSound;                                    // 0x8(0x8)
};


// Size 0x18
class PioneerRewardInfo: public None
{
public:
	Class PopUpMessageDesc*                                      PopUp;                                             // 0x0(0x8)
	Struct FString                                               RewardId;                                          // 0x8(0x10)
};


// Size 0xc
class EmissaryNotificationState: public None
{
public:
	float                                                        CurrentRepTotal;                                   // 0x0(0x4)
	struct FName                                                 CompanyId;                                         // 0x4(0x8)
};


// Size 0x20
class PosablePirateAnimation: public None
{
public:
	Class AnimSequence*                                          Animation;                                         // 0x0(0x8)
	Class SkeletalMesh*                                          SkeletalMeshProp;                                  // 0x8(0x8)
	Class StaticMesh*                                            StaticMeshProp;                                    // 0x10(0x8)
	struct FName                                                 PropSocketName;                                    // 0x18(0x8)
};


// Size 0x40
class ChestTabViewModel: public None
{
public:
	Struct FString                                               ItemCategory;                                      // 0x0(0x10)
	Struct FString                                               CategoryImageUrl;                                  // 0x10(0x10)
	Struct FString                                               Name;                                              // 0x20(0x10)
	TArray<Struct ChestEntitlementViewModel>                     EquippedEntitlements;                              // 0x30(0x10)
};


// Size 0x98
class ChestEntitlementViewModel: public None
{
public:
	byte                                                         Action;                                            // 0x0(0x1)
	Struct FString                                               ItemDesc;                                          // 0x8(0x10)
	Struct FString                                               Name;                                              // 0x18(0x10)
	Struct FString                                               ThumbnailImageUrl;                                 // 0x28(0x10)
	Struct FString                                               PreviewImageUrl;                                   // 0x38(0x10)
	Struct FString                                               Description;                                       // 0x48(0x10)
	int                                                          SlotId;                                            // 0x58(0x4)
	Struct FString                                               Category;                                          // 0x60(0x10)
	Struct FString                                               EmoteBackgroundImageUrl;                           // 0x70(0x10)
	Struct FString                                               EmoteIconImageUrl;                                 // 0x80(0x10)
	bool                                                         DoesPlayerOwnEntitlement;                          // 0x90(0x1)
};


// Size 0x10
class ClothingChestRandomFilter: public None
{
public:
	class                                                        Category;                                          // 0x0(0x8)
	float                                                        Likelihood;                                        // 0x8(0x4)
};


// Size 0x10
class ShipCustomizationChestMutualExclusion: public None
{
public:
	class                                                        A;                                                 // 0x0(0x8)
	class                                                        B;                                                 // 0x8(0x8)
};


// Size 0x78
class PremiumCatalogLandingPageTab: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FText                                                 DisplayName;                                       // 0x10(0x38)
	TArray<class Actor*>                                         Children;                                          // 0x48(0x10)
	struct FName                                                 FeatureToggle;                                     // 0x58(0x8)
	struct FName                                                 IncludeForPromotion;                               // 0x60(0x8)
	struct FName                                                 ExcludeFromPromotion;                              // 0x68(0x8)
	bool                                                         RealMoneyOnly;                                     // 0x70(0x1)
};


// Size 0x48
class PremiumCatalogItemSet: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	TArray<Struct PremiumShopOfferItem>                          Items;                                             // 0x38(0x10)
};


// Size 0x48
class PremiumShopOfferItem: public None
{
public:
	Class CatalogOfferDataAsset*                                 Offer;                                             // 0x0(0x8)
	bool                                                         IsSuperPremium;                                    // 0x8(0x1)
	Struct FText                                                 LockedReason;                                      // 0x10(0x38)
};


// Size 0x48
class PremiumShopBundleOfferItem: public None
{
public:
	Class CatalogOfferDataAsset*                                 Offer;                                             // 0x0(0x8)
	bool                                                         IsPurchasable;                                     // 0x8(0x1)
	Struct FText                                                 LockedReason;                                      // 0x10(0x38)
};


// Size 0x78
class CatalogOfferPrerequisites: public None
{
public:
	TArray<Str None>                                             Entitlements;                                      // 0x0(0x10)
	Struct FString                                               Sig;                                               // 0x68(0x10)
};


// Size 0x348
class CatalogOffer: public None
{
public:
	Struct Guid                                                  OfferId;                                           // 0x0(0x10)
	Struct FText                                                 DisplayName;                                       // 0x10(0x38)
	Struct FText                                                 DisplayDescription;                                // 0x48(0x38)
	Struct FString                                               CurrencyType;                                      // 0x88(0x10)
	TArray<Str >                                                 AssetPaths;                                        // 0x98(0x10)
	Struct FString                                               Thumbnail;                                         // 0xa8(0x10)
	TArray<Str >                                                 PurchaseStats;                                     // 0xb8(0x10)
	Struct CatalogOfferPrerequisites                             Prerequisites;                                     // 0xc8(0x78)
	Struct CatalogOfferPrerequisites                             ExclusionConditions;                               // 0x140(0x78)
	byte                                                         Availability;                                      // 0x1b8(0x1)
	Struct PremiumCatalogOfferData                               Premium;                                           // 0x210(0x128)
	Struct FString                                               Sig;                                               // 0x338(0x10)
};


// Size 0x128
class PremiumCatalogOfferData: public None
{
public:
	byte                                                         Type;                                              // 0x0(0x1)
	TArray<Str >                                                 TileImages;                                        // 0x8(0x10)
	int                                                          TileSize;                                          // 0x18(0x4)
	Struct FText                                                 PageTitle;                                         // 0x20(0x38)
	Struct FString                                               PageIcon;                                          // 0x58(0x10)
	TArray<Struct PremiumCatalogOfferGroup>                      Groups;                                            // 0x68(0x10)
	Struct FText                                                 LockedReason;                                      // 0x78(0x38)
	bool                                                         TimeLimited;                                       // 0xb0(0x1)
	bool                                                         TimeLimitedPrice;                                  // 0xb1(0x1)
	int                                                          PremiumCurrencyRealMoneyPrice;                     // 0xb4(0x4)
	bool                                                         Purchasable;                                       // 0xb8(0x1)
	bool                                                         SuperPremium;                                      // 0xb9(0x1)
	Struct FText                                                 Saving;                                            // 0xc0(0x38)
	Struct FString                                               Accent;                                            // 0xf8(0x10)
	Struct FString                                               TopBanner;                                         // 0x108(0x10)
	Struct FString                                               BottomBanner;                                      // 0x118(0x10)
};


// Size 0x48
class PremiumCatalogOfferGroup: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	TArray<Struct Title>                                         Children;                                          // 0x38(0x10)
};


// Size 0x18
class StoreOnlinePurchaseResult: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
	Struct FString                                               ProductId;                                         // 0x8(0x10)
};


// Size 0x10
class StoreCatalog: public None
{
public:
	TArray<Struct StoreCatalogItem>                              Items;                                             // 0x0(0x10)
};


// Size 0x98
class StoreCatalogItem: public None
{
public:
	Struct FString                                               ProductId;                                         // 0x0(0x10)
	Struct FString                                               Title;                                             // 0x10(0x10)
	Struct FString                                               Description;                                       // 0x20(0x10)
	Struct FString                                               FormattedPrice;                                    // 0x30(0x10)
	Struct FString                                               FormattedBasePrice;                                // 0x40(0x10)
	Struct FString                                               CurrencyCode;                                      // 0x50(0x10)
	bool                                                         IsOnSale;                                          // 0x60(0x1)
	Struct DateTime                                              SaleEndDate;                                       // 0x68(0x8)
	Struct FString                                               ImageUri;                                          // 0x70(0x10)
	TArray<Str >                                                 MetaTags;                                          // 0x80(0x10)
	int                                                          DisplayPriority;                                   // 0x90(0x4)
};


// Size 0x20
class StoreTokenModel: public None
{
public:
	Struct FString                                               AccessToken;                                       // 0x0(0x10)
	Struct FString                                               WsidToken;                                         // 0x10(0x10)
};


// Size 0x1
class PlayerLeftPremiumStoreEvent: public None
{
public:
};


// Size 0x1
class PlayerBrowsingPremiumStoreEvent: public None
{
public:
};


// Size 0x1
class PremiumStoreClosedEvent: public None
{
public:
};


// Size 0x28
class PremiumStoreOffersEvent: public None
{
public:
	Struct PremiumStoreLandingPage                               Data;                                              // 0x0(0x10)
	Struct FString                                               CurrencyCode;                                      // 0x18(0x10)
};


// Size 0x10
class PremiumStoreLandingPage: public None
{
public:
	TArray<Struct PremiumStoreLandingPageTab>                    Tabs;                                              // 0x0(0x10)
};


// Size 0x38
class PremiumStoreLandingPageTab: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FString                                               DisplayName;                                       // 0x10(0x10)
	TArray<Struct PremiumStoreLandingPageItem>                   Children;                                          // 0x20(0x10)
	bool                                                         RealMoneyOnly;                                     // 0x30(0x1)
};


// Size 0x620
class PremiumStoreLandingPageItem: public None
{
public:
	TArray<Str >                                                 Image;                                             // 0x0(0x10)
	Struct FString                                               Cost;                                              // 0x10(0x10)
	Struct FString                                               RealMoneyPrice;                                    // 0x20(0x10)
	Struct FString                                               Title;                                             // 0x30(0x10)
	Struct FString                                               Description;                                       // 0x40(0x10)
	bool                                                         Owned;                                             // 0x50(0x1)
	Struct PremiumStoreTimeLimited                               TimeLimited;                                       // 0x51(0x2)
	byte                                                         Type;                                              // 0x53(0x1)
	int                                                          Size;                                              // 0x54(0x4)
	Struct PremiumStoreBundleSetView                             BundleSetView;                                     // 0x58(0x2c8)
	Struct PremiumStoreItemsSetView                              ItemsSetView;                                      // 0x320(0x60)
	Struct PremiumStoreCardsView                                 CardsView;                                         // 0x380(0x60)
	Struct PremiumStoreItemView                                  ItemView;                                          // 0x3e0(0x230)
	Struct FString                                               AccentUrl;                                         // 0x610(0x10)
};


// Size 0x230
class PremiumStoreItemView: public None
{
public:
	Struct FString                                               TopBannerUrl;                                      // 0x210(0x10)
	Struct FString                                               BottomBannerUrl;                                   // 0x220(0x10)
};


// Size 0x210
class PremiumStoreOffer: public None
{
public:
	bool                                                         IsSuperPremium;                                    // 0x1e0(0x1)
	Struct FString                                               LockedReason;                                      // 0x1e8(0x10)
	Struct PremiumStoreTimeLimited                               TimeLimited;                                       // 0x1f8(0x2)
	Struct FString                                               RealMoneyPrice;                                    // 0x200(0x10)
};


// Size 0x1e0
class ShopOffer: public None
{
public:
	Struct Guid                                                  OfferId;                                           // 0x0(0x10)
	Struct FString                                               DisplayName;                                       // 0x10(0x10)
	Struct FString                                               Description;                                       // 0x20(0x10)
	Struct ShopOfferPrice                                        Price;                                             // 0x30(0x48)
	Struct FString                                               ThumbnailImageUrl;                                 // 0x78(0x10)
	TArray<Str >                                                 ClientIds;                                         // 0x88(0x10)
	Struct FString                                               CatalogName;                                       // 0x98(0x10)
	TArray<Str >                                                 PurchaseStats;                                     // 0xa8(0x10)
	Struct ShopOfferPrerequisites                                Prerequisites;                                     // 0xb8(0x68)
	Struct ShopOfferPrerequisites                                ExclusionConditions;                               // 0x120(0x68)
	byte                                                         Availability;                                      // 0x188(0x1)
};


// Size 0x68
class ShopOfferPrerequisites: public None
{
public:
	TArray<Str >                                                 Entitlements;                                      // 0x0(0x10)
};


// Size 0x48
class ShopOfferPrice: public None
{
public:
	byte                                                         Currency;                                          // 0x0(0x1)
	Struct FText                                                 DisplayPrice;                                      // 0x8(0x38)
};


// Size 0x2
class PremiumStoreTimeLimited: public None
{
public:
	bool                                                         Item;                                              // 0x0(0x1)
	bool                                                         Price;                                             // 0x1(0x1)
};


// Size 0x60
class PremiumStoreCardsView: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FString                                               PageTitle;                                         // 0x10(0x10)
	Struct FString                                               PageIcon;                                          // 0x20(0x10)
	TArray<Struct PremiumStoreCardView>                          CardViews;                                         // 0x30(0x10)
	Struct FString                                               TopBannerUrl;                                      // 0x40(0x10)
	Struct FString                                               BottomBannerUrl;                                   // 0x50(0x10)
};


// Size 0xb8
class PremiumStoreCardView: public None
{
public:
	TArray<Str >                                                 Image;                                             // 0x0(0x10)
	Struct FString                                               Cost;                                              // 0x10(0x10)
	Struct FString                                               RealMoneyPrice;                                    // 0x20(0x10)
	Struct FString                                               Title;                                             // 0x30(0x10)
	Struct FString                                               Description;                                       // 0x40(0x10)
	bool                                                         Owned;                                             // 0x50(0x1)
	Struct PremiumStoreTimeLimited                               TimeLimited;                                       // 0x51(0x2)
	Struct PremiumStoreItemsSetView                              SetView;                                           // 0x58(0x60)
};


// Size 0x60
class PremiumStoreItemsSetView: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FString                                               PageTitle;                                         // 0x10(0x10)
	Struct FString                                               PageIcon;                                          // 0x20(0x10)
	TArray<Struct PremiumStoreItemsView>                         Items;                                             // 0x30(0x10)
	Struct FString                                               TopBannerUrl;                                      // 0x40(0x10)
	Struct FString                                               BottomBannerUrl;                                   // 0x50(0x10)
};


// Size 0x40
class PremiumStoreItemsView: public None
{
public:
	Struct FString                                               Title;                                             // 0x0(0x10)
	TArray<Struct Title>                                         Items;                                             // 0x10(0x10)
	Struct FString                                               TopBannerUrl;                                      // 0x20(0x10)
	Struct FString                                               BottomBannerUrl;                                   // 0x30(0x10)
};


// Size 0x2c8
class PremiumStoreBundleSetView: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FString                                               PageTitle;                                         // 0x10(0x10)
	Struct FString                                               PageIcon;                                          // 0x20(0x10)
	Struct PremiumStoreBundleView                                Bundle;                                            // 0x30(0x238)
	Struct PremiumStoreItemsView                                 Items;                                             // 0x268(0x40)
	Struct FString                                               TopBannerUrl;                                      // 0x2a8(0x10)
	Struct FString                                               BottomBannerUrl;                                   // 0x2b8(0x10)
};


// Size 0x238
class PremiumStoreBundleView: public None
{
public:
	Struct FString                                               Title;                                             // 0x0(0x10)
	Struct PremiumStoreBundleOffer                               Offer;                                             // 0x10(0x218)
	TArray<Struct PremiumStoreBundleItem>                        Items;                                             // 0x228(0x10)
};


// Size 0x208
class PremiumStoreBundleItem: public None
{
public:
	bool                                                         EnablePurchase;                                    // 0x1e0(0x1)
	Struct PremiumStoreTimeLimited                               TimeLimited;                                       // 0x1e1(0x2)
	Struct FString                                               RealMoneyPrice;                                    // 0x1e8(0x10)
	Struct FString                                               LockedReason;                                      // 0x1f8(0x10)
};


// Size 0x218
class PremiumStoreBundleOffer: public None
{
public:
	Struct FString                                               Saving;                                            // 0x1e0(0x10)
	Struct FString                                               AccentUrl;                                         // 0x1f0(0x10)
	Struct PremiumStoreTimeLimited                               TimeLimited;                                       // 0x200(0x2)
	Struct FString                                               RealMoneyPrice;                                    // 0x208(0x10)
};


// Size 0x10
class RequestPremiumStoreOffersEvent: public None
{
public:
	Struct FString                                               CatalogName;                                       // 0x0(0x10)
};


// Size 0xd8
class OpenPremiumStoreFrontEvent: public None
{
public:
	Struct ShopDefinition                                        ShopDefinition;                                    // 0x0(0xd8)
};


// Size 0xd8
class ShopDefinition: public None
{
public:
	Struct FString                                               ShopName;                                          // 0x0(0x10)
	Struct FString                                               CatalogName;                                       // 0x10(0x10)
	TArray<Struct CatalogTab>                                    CatalogTabs;                                       // 0x20(0x10)
	Struct FString                                               Storefront;                                        // 0x30(0x10)
	Struct FString                                               OpenAudioCue;                                      // 0x40(0x10)
	Struct ShopDialogueMessages                                  Dialogue;                                          // 0x50(0x50)
	Struct FString                                               CompanyId;                                         // 0xa0(0x10)
	bool                                                         EnablePiratePreview;                               // 0xb0(0x1)
	byte                                                         CurrencyType;                                      // 0xb1(0x1)
	TArray<Struct CategoryTab>                                   Categories;                                        // 0xb8(0x10)
	Struct StringAssetReference                                  AllTabIcon;                                        // 0xc8(0x10)
};


// Size 0x58
class CategoryTab: public None
{
public:
	Struct FText                                                 Name;                                              // 0x0(0x38)
	Struct FString                                               UniqueTextIdentifier;                              // 0x38(0x10)
	Struct FString                                               IconPath;                                          // 0x48(0x10)
};


// Size 0x50
class ShopDialogueMessages: public None
{
public:
	Struct FString                                               ConfirmPurchaseMessage;                            // 0x0(0x10)
	Struct FString                                               PurchaseFailedMessage;                             // 0x10(0x10)
	Struct FString                                               PurchasePendingMessage;                            // 0x20(0x10)
	Struct FString                                               PurchaseSuccessMessage;                            // 0x30(0x10)
	Struct FString                                               GetShopOffersFailedMessage;                        // 0x40(0x10)
};


// Size 0x30
class CatalogTab: public None
{
public:
	Struct FString                                               CatalogName;                                       // 0x0(0x10)
	Struct FString                                               CatalogDisplayName;                                // 0x10(0x10)
	Struct FString                                               CatalogTabImageUrl;                                // 0x20(0x10)
};


// Size 0x1
class RequestPremiumStoreFrontOpenEvent: public None
{
public:
};


// Size 0x1
class PremiumShopClosedEvent: public None
{
public:
};


// Size 0x10
class PurchasePremiumCurrencyErrorEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x30
class PurchasePremiumCurrencyResponseEvent: public None
{
public:
	Struct FString                                               Id;                                                // 0x0(0x10)
	Struct FString                                               Title;                                             // 0x10(0x10)
	Struct FString                                               ImageUrl;                                          // 0x20(0x10)
};


// Size 0x10
class PurchasePremiumCurrencyRequestEvent: public None
{
public:
	Struct FString                                               Id;                                                // 0x0(0x10)
};


// Size 0x10
class PremiumCurrencyItemsErrorEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x10
class PremiumCurrencyItemsResponseEvent: public None
{
public:
	TArray<Struct PremiumCurrencyItem>                           PremiumCurrencyItems;                              // 0x0(0x10)
};


// Size 0x88
class PremiumCurrencyItem: public None
{
public:
	Struct FString                                               Description;                                       // 0x0(0x10)
	Struct FString                                               Id;                                                // 0x10(0x10)
	Struct FString                                               ImageUrl;                                          // 0x20(0x10)
	Struct FString                                               Price;                                             // 0x30(0x10)
	Struct FString                                               BasePrice;                                         // 0x40(0x10)
	bool                                                         IsOnSale;                                          // 0x50(0x1)
	Struct FString                                               SaleEndDate;                                       // 0x58(0x10)
	Struct FString                                               Title;                                             // 0x68(0x10)
	Struct FString                                               Quantity;                                          // 0x78(0x10)
};


// Size 0x1
class PremiumCurrencyItemsRequestEvent: public None
{
public:
};


// Size 0x1
class PurchasePremiumShopOfferFailedEvent: public None
{
public:
};


// Size 0x1
class PurchasePremiumShopOfferSucceededEvent: public None
{
public:
};


// Size 0x1
class PurchaseRealMoneyShopOfferFailedEvent: public None
{
public:
};


// Size 0x20
class SeasonPassRealMoneyPriceResponseEvent: public None
{
public:
	Struct FString                                               RealMoneyPrice;                                    // 0x0(0x10)
	Struct FString                                               CurrencyCode;                                      // 0x10(0x10)
};


// Size 0x4
class RequestSeasonPassRealMoneyPriceEvent: public None
{
public:
	int                                                          Price;                                             // 0x0(0x4)
};


// Size 0x28
class RequestRealMoneyPurchaseSeasonPassOfferEvent: public None
{
public:
	Struct FString                                               OfferId;                                           // 0x0(0x10)
	Struct FString                                               CatalogName;                                       // 0x10(0x10)
	int                                                          Price;                                             // 0x20(0x4)
};


// Size 0x20
class RequestPurchaseSeasonPassOfferEvent: public None
{
public:
	Struct FString                                               OfferId;                                           // 0x0(0x10)
	Struct FString                                               CatalogName;                                       // 0x10(0x10)
};


// Size 0x20
class RequestRealMoneyPurchasePremiumShopOfferEvent: public None
{
public:
	Struct Guid                                                  OfferId;                                           // 0x0(0x10)
	Struct FString                                               CatalogName;                                       // 0x10(0x10)
};


// Size 0x20
class RequestPurchasePremiumShopOfferEvent: public None
{
public:
	Struct Guid                                                  OfferId;                                           // 0x0(0x10)
	Struct FString                                               CatalogName;                                       // 0x10(0x10)
};


// Size 0x10
class RequestPremiumShopOffersEvent: public None
{
public:
	Struct FString                                               CatalogName;                                       // 0x0(0x10)
};


// Size 0x1
class PetShopErrorEvent: public None
{
public:
};


// Size 0x20
class PetShopResponseEvent: public None
{
public:
	Struct PetShopDefinition                                     Data;                                              // 0x0(0x20)
};


// Size 0x20
class PetShopDefinition: public None
{
public:
	Struct FString                                               Title;                                             // 0x0(0x10)
	TArray<Struct PetSpeciesViewModel>                           Species;                                           // 0x10(0x10)
};


// Size 0x48
class PetSpeciesViewModel: public None
{
public:
	Struct FString                                               Name;                                              // 0x0(0x10)
	Struct FString                                               Icon;                                              // 0x10(0x10)
	Struct FString                                               Description;                                       // 0x20(0x10)
	bool                                                         HasNewStuff;                                       // 0x30(0x1)
	bool                                                         HasOwnedOffer;                                     // 0x31(0x1)
	TArray<Struct PetBreedViewModel>                             Breeds;                                            // 0x38(0x10)
};


// Size 0x58
class PetBreedViewModel: public None
{
public:
	Struct FString                                               Name;                                              // 0x0(0x10)
	Struct FString                                               Icon;                                              // 0x10(0x10)
	Struct FString                                               Description;                                       // 0x20(0x10)
	bool                                                         HasNewStuff;                                       // 0x30(0x1)
	bool                                                         IsOwned;                                           // 0x31(0x1)
	TArray<Struct IsOwned>                                       Offers;                                            // 0x38(0x10)
	TArray<Struct Offers>                                        Categories;                                        // 0x48(0x10)
};


// Size 0x1
class PetShopRefreshEvent: public None
{
public:
};


// Size 0x1
class PetShopRequestEvent: public None
{
public:
};


// Size 0xd8
class OpenShopFrontEvent: public None
{
public:
	Struct ShopDefinition                                        ShopDefinition;                                    // 0x0(0xd8)
};


// Size 0x1
class RequestPremiumShopFrontOpenEvent: public None
{
public:
};


// Size 0x100
class ProjectileQueuedEffect: public None
{
public:
	int                                                          HitCount;                                          // 0x0(0x4)
	Struct HitResult                                             HitResult;                                         // 0x4(0x80)
	Struct WeaponProjectileEffectParams                          Effects;                                           // 0x84(0x68)
	Struct Vector                                                InitialShootingPosition;                           // 0xec(0xc)
	class                                                        DamagerType;                                       // 0xf8(0x8)
};


// Size 0x178
class ProjectileHitEvent: public None
{
public:
	Struct ImpactDamageEvent                                     DamageEvent;                                       // 0x0(0x58)
	Struct HitResult                                             HitResult;                                         // 0x58(0x80)
	class                                                        ProjectileId;                                      // 0xd8(0x8)
	Struct WeaponProjectileEffectParams                          Effects;                                           // 0xe0(0x68)
	Struct Vector                                                InitialPosition;                                   // 0x148(0xc)
	Struct Guid                                                  TelemetryAttackId;                                 // 0x154(0x10)
	TArray<Struct TelemetryAttackId>                             TrailData;                                         // 0x168(0x10)
};


// Size 0x340
class WeaponProjectile: public None
{
public:
	Struct ProjectileAim                                         AimData;                                           // 0xf0(0x50)
	Class Object*                                                WeaponMesh;                                        // 0x140(0x8)
};


// Size 0x1c0
class WeaponProjectileCreator: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct Guid                                                  AttackId;                                          // 0x10(0x10)
	Struct Vector                                                Origin;                                            // 0x28(0xc)
	Struct Vector                                                Direction;                                         // 0x34(0xc)
	Struct ProjectileAim                                         AimData;                                           // 0x40(0x50)
	TArray<class IgnoredActors*>                                 IgnoredActors;                                     // 0x90(0x10)
	Struct WeaponProjectileParams                                Params;                                            // 0xa0(0xb8)
	class                                                        DamagerType;                                       // 0x158(0x8)
	Struct Guid                                                  TelemetryAttackId;                                 // 0x160(0x10)
	int                                                          SubAttackGroupId;                                  // 0x170(0x4)
	Struct Transform                                             WeaponMeshTransform;                               // 0x180(0x30)
	Class Object*                                                WeaponMesh;                                        // 0x1b0(0x8)
	float                                                        DistanceBeforeGravity;                             // 0x1b8(0x4)
};


// Size 0x68
class ProjectileAttackGroup: public None
{
public:
	TArray<Struct ProjectileHitScanVFX>                          Projectiles;                                       // 0x0(0x10)
};


// Size 0xf8
class ProjectileHitScanVFX: public None
{
public:
	Struct Projectile                                            Projectile;                                        // 0x0(0x1c)
	Struct WeaponProjectileParams                                AmmoParams;                                        // 0x20(0xb8)
};


// Size 0x1
class TestProjectileWeaponParameters: public None
{
public:
	bool                                                         PassCanTrigger;                                    // 0x0(0x1)
};


// Size 0x30
class ConfigurationComboAndTrigger: public None
{
public:
	TArray<Int8 None>                                            RequiredConfigurationCombo;                        // 0x0(0x10)
	Class Actor*                                                 TriggerToActivate;                                 // 0x10(0x8)
	TArray<class TriggeredActionMechanisms*>                     TriggeredActionMechanisms;                         // 0x18(0x10)
	byte                                                         ActivatedMechanismType;                            // 0x28(0x1)
};


// Size 0x28
class StatueCosmeticTimingHandler: public None
{
public:
};


// Size 0x10
class ReactionSequenceStateInfo: public None
{
public:
	byte                                                         State;                                             // 0x0(0x1)
	byte                                                         ActivatedMechanismType;                            // 0x1(0x1)
	double                                                       TimeStateStarted;                                  // 0x8(0x8)
};


// Size 0x40
class PuzzleStatueConfigurationPosition: public None
{
public:
	Struct Transform                                             PivotTransform;                                    // 0x0(0x30)
	Class WwiseEvent*                                            PositionAudioEvent;                                // 0x30(0x8)
};


// Size 0xa90
class VaultButtonData: public None
{
public:
	Struct TransformBlendCurve                                   ButtonPressAnimation;                              // 0x0(0x500)
	Struct TransformBlendCurve                                   ButtonActivationAnimation;                         // 0x500(0x500)
	float                                                        IncorrectSolutionPenaltyInSeconds;                 // 0xa00(0x4)
	float                                                        ButtonHoldTime;                                    // 0xa04(0x4)
	Class StaticMeshComponent*                                   ButtonMesh;                                        // 0xa80(0x8)
};


// Size 0x14
class VaultReserved: public None
{
public:
	bool                                                         IsReserved;                                        // 0x0(0x1)
	Struct Guid                                                  CrewId;                                            // 0x4(0x10)
};


// Size 0x2
class QuestBookPageRenderingTriggerRedraw: public None
{
public:
	byte                                                         PreviousMode;                                      // 0x0(0x1)
	byte                                                         NewMode;                                           // 0x1(0x1)
};


// Size 0x18
class ValidRiddleOptions: public None
{
public:
	Struct RiddleActionLocation                                  RiddleActionLocation;                              // 0x0(0x8)
	TArray<Struct RiddleActionLocation>                          ValidRiddleActionLocations;                        // 0x8(0x10)
};


// Size 0x8
class RiddleActionLocation: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	byte                                                         RiddleLocation;                                    // 0x4(0x1)
	byte                                                         RiddleActionLocationOffset;                        // 0x5(0x1)
};


// Size 0x40
class RiddleActionInfo: public None
{
public:
	byte                                                         RiddleAction;                                      // 0x0(0x1)
	struct FName                                                 GotoLocationPhraseId;                              // 0x4(0x8)
	struct FName                                                 GotoLocationWithOffsetPhraseId;                    // 0xc(0x8)
	struct FName                                                 GotoOffsetPhraseId;                                // 0x14(0x8)
	struct FName                                                 GotoUndergroundLocationPhraseId;                   // 0x1c(0x8)
	struct FName                                                 GotoUndergroundLocationWithOffsetPhraseId;         // 0x24(0x8)
	struct FName                                                 GotoUndergroundOffsetPhraseId;                     // 0x2c(0x8)
	struct FName                                                 GotoNonVagueNonUniqueLandmarkPhraseId;             // 0x34(0x8)
	float                                                        TimeToTriggerGateCompletion;                       // 0x3c(0x4)
};


// Size 0x10
class RiddleTextPhrasebookEntry: public None
{
public:
	struct FName                                                 Id;                                                // 0x0(0x8)
	Class RiddleTextPhraseDataAsset*                             Phrase;                                            // 0x8(0x8)
};


// Size 0xc
class RiddleTextPhraseId: public None
{
public:
	struct FName                                                 PhraseId;                                          // 0x0(0x8)
	int                                                          VariantIndex;                                      // 0x8(0x4)
};


// Size 0x28
class VoyageProposalCompanyAssetData: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
	Struct StringAssetReference                                  OpenVoyageProposalMesh;                            // 0x8(0x10)
	TArray<Struct VoyageProposalAssetData>                       Ranks;                                             // 0x18(0x10)
};


// Size 0x30
class VoyageProposalAssetData: public None
{
public:
	Struct StringAssetReference                                  Mesh;                                              // 0x0(0x10)
	Struct StringAssetReference                                  IconInv;                                           // 0x10(0x10)
	Struct StringAssetReference                                  IconPrv;                                           // 0x20(0x10)
};


// Size 0x28
class EmissaryCompanyQuestIcons: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
	Struct StringAssetReference                                  Background;                                        // 0x8(0x10)
	TArray<Struct Background>                                    Icons;                                             // 0x18(0x10)
};


// Size 0x20
class VoyageProposalOverride: public None
{
public:
	TArray<Name None>                                            NecessaryFeatures;                                 // 0x0(0x10)
	class                                                        Proposal;                                          // 0x10(0x8)
	int                                                          ProposalIndex;                                     // 0x18(0x4)
};


// Size 0x90
class RatManagerRatInfestationLevel: public None
{
public:
	float                                                        WaterLevel;                                        // 0x0(0x4)
	Struct WeightedProbabilityRangeOfRanges                      RatSpawnFrequency;                                 // 0x8(0x30)
	Struct WeightedProbabilityRangeOfRanges                      RatSpeed;                                          // 0x38(0x30)
	TArray<Struct FName>                                         Locations;                                         // 0x68(0x10)
	double                                                       Modulo;                                            // 0x78(0x8)
	TArray<Struct RatManagerPseudoRandomEntry>                   Intervals;                                         // 0x80(0x10)
};


// Size 0x18
class RatManagerPseudoRandomEntry: public None
{
public:
	double                                                       TimeBoundary;                                      // 0x0(0x8)
	float                                                        RatSpeed;                                          // 0x8(0x4)
	float                                                        RatScale;                                          // 0xc(0x4)
	struct FName                                                 LocationName;                                      // 0x10(0x8)
};


// Size 0x18
class ReapersMarkLevelEntry: public None
{
public:
	int                                                          VoyageCount;                                       // 0x0(0x4)
	TArray<Struct ReapersMarkLevelMultiplier>                    CompanyMultipliers;                                // 0x8(0x10)
};


// Size 0x10
class ReapersMarkLevelMultiplier: public None
{
public:
	class                                                        CompanyId;                                         // 0x0(0x8)
	float                                                        GoldMultiplier;                                    // 0x8(0x4)
	float                                                        XPMultiplier;                                      // 0xc(0x4)
};


// Size 0x8
class ReapersMarkCurseStatInfo: public None
{
public:
	byte                                                         Curse;                                             // 0x0(0x1)
	Struct PlayerStat                                            StatToFire;                                        // 0x4(0x4)
};


// Size 0x10
class ReapersMarkStatusStatInfo: public None
{
public:
	class                                                        Status;                                            // 0x0(0x8)
	Struct PlayerStat                                            StatToFire;                                        // 0x8(0x4)
};


// Size 0x10
class ContentTypeSelectorPair: public None
{
public:
	Class ContentTypeSelectionConditional*                       ContentTypeSelectorCondition;                      // 0x0(0x8)
	Class StorageContainerContentTypeSelector*                   ContentTypeSelector;                               // 0x8(0x8)
};


// Size 0x10
class ResourceCacheEntry: public None
{
public:
	TArray<class Resources*>                                     Resources;                                         // 0x0(0x10)
};


// Size 0x20
class RewardDistributionModelData: public None
{
public:
	Struct ConsistentPercentageRewardDistributionModel           ConsistentPercentage;                              // 0x0(0x8)
	Struct RelativePercentageRewardDistributionModel             RelativePercentage;                                // 0x8(0x18)
};


// Size 0x18
class RelativePercentageRewardDistributionModel: public None
{
public:
	float                                                        DefaultPercentage;                                 // 0x0(0x4)
	TArray<Struct NumCrewsPercentageModel>                       NumCrewsPercentageMap;                             // 0x8(0x10)
};


// Size 0x8
class NumCrewsPercentageModel: public None
{
public:
	float                                                        Percentage;                                        // 0x4(0x4)
};


// Size 0x8
class ConsistentPercentageRewardDistributionModel: public None
{
public:
	float                                                        PrimaryCrewPercentage;                             // 0x0(0x4)
	float                                                        SecondaryCrewsPercentage;                          // 0x4(0x4)
};


// Size 0x10
class RewardPopUpNotificationInfo: public None
{
public:
	Struct RewardId                                              RewardId;                                          // 0x0(0x8)
	Class PopUpMessageDesc*                                      PopUp;                                             // 0x8(0x8)
};


// Size 0x58
class RiddleTextRenderer: public None
{
public:
	float                                                        MaskSizeScale;                                     // 0x0(0x4)
	Class Font*                                                  Font;                                              // 0x8(0x8)
	float                                                        FontScale;                                         // 0x10(0x4)
	float                                                        FontMaxScale;                                      // 0x14(0x4)
	float                                                        FontScaleChange;                                   // 0x18(0x4)
	float                                                        FontLineSpacingScale;                              // 0x1c(0x4)
	TArray<Str >                                                 DroppedTextCharacters;                             // 0x20(0x10)
	bool                                                         VerticallyCentredText;                             // 0x30(0x1)
	bool                                                         HorizontallyCentredText;                           // 0x31(0x1)
	float                                                        MaxTextHeightRatioForRiddleText;                   // 0x34(0x4)
	float                                                        MarginSize;                                        // 0x38(0x4)
	Struct Vector2D                                              OriginRatio;                                       // 0x3c(0x8)
	float                                                        StepSpacingRatio;                                  // 0x44(0x4)
	float                                                        StepSpacingWithDroppedTailInLastLineRatio;         // 0x48(0x4)
	float                                                        MaskOffsetRatio;                                   // 0x4c(0x4)
	Struct Vector2D                                              MaskBorderRatio;                                   // 0x50(0x8)
};


// Size 0x18
class RiddleMapContents: public None
{
public:
	TArray<Struct RumbleParameters>                              Text;                                              // 0x0(0x10)
	int                                                          Progress;                                          // 0x10(0x4)
};


// Size 0x20
class RumbleParameters: public None
{
public:
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x0(0x8)
	class                                                        CameraShakeEffect;                                 // 0x8(0x8)
	bool                                                         Looping;                                           // 0x10(0x1)
	struct FName                                                 Tag;                                               // 0x14(0x8)
};


// Size 0x44
class StatusScreenEffectParams: public None
{
public:
};


// Size 0x18
class SeagullManagerLocationBank: public None
{
public:
	TArray<Name None>                                            Locations;                                         // 0x0(0x10)
	Class ShipCreatureManagerCreatureInstanceMotionModifierDataAsset* MotionModifierDataAsset;                           // 0x10(0x8)
};


// Size 0x48
class SeagullManagerPseudoRandomEntry: public None
{
public:
	double                                                       TimeBoundary;                                      // 0x0(0x8)
	float                                                        SeagullSpeed;                                      // 0x8(0x4)
	float                                                        SeagullScale;                                      // 0xc(0x4)
	int                                                          BankIndex;                                         // 0x10(0x4)
	struct FName                                                 LocationName;                                      // 0x14(0x8)
	int                                                          NumInFormation;                                    // 0x1c(0x4)
	int                                                          FormationOffsetsIndex;                             // 0x20(0x4)
	int                                                          SpeedModifierCurveIndex;                           // 0x24(0x4)
	TArray<Int >                                                 RollCurveIndices;                                  // 0x28(0x10)
	TArray<Int >                                                 OffsetCurveIndices;                                // 0x38(0x10)
};


// Size 0x18
class SeagullManagerFormation: public None
{
public:
	int                                                          NumInFormation;                                    // 0x0(0x4)
	TArray<Struct SeagullManagerFormationOffset>                 FormationOffsets;                                  // 0x8(0x10)
};


// Size 0x10
class SeagullManagerFormationOffset: public None
{
public:
	TArray<Struct NumInFormation>                                Offsets;                                           // 0x0(0x10)
};


// Size 0xa8
class ServerStateUpdateMessage: public None
{
public:
	Struct Guid                                                  ServerId;                                          // 0x0(0x10)
	Struct FString                                               TitleVersion;                                      // 0x10(0x10)
	byte                                                         PlayMode;                                          // 0x20(0x1)
	TArray<Struct ServerUpdateCrewState>                         Crews;                                             // 0x28(0x10)
	TArray<Struct IncomingMigrationPreventionZone>               IncomingMigrationPreventionZones;                  // 0x38(0x10)
	Struct Timespan                                              TimeToLive;                                        // 0x48(0x8)
	Struct Timespan                                              Uptime;                                            // 0x50(0x8)
	Struct Timespan                                              TotalUptime;                                       // 0x58(0x8)
	Struct Timespan                                              MessageInterval;                                   // 0x60(0x8)
	int                                                          SequenceId;                                        // 0x68(0x4)
	Struct FString                                               ServerAddress;                                     // 0x70(0x10)
	Struct FString                                               ServerLocation;                                    // 0x80(0x10)
	Struct FString                                               ServerDataCentre;                                  // 0x90(0x10)
	bool                                                         HighPriorityForMatchmaking;                        // 0xa0(0x1)
	bool                                                         ServerIsActive;                                    // 0xa1(0x1)
	bool                                                         ContestMatchmaking;                                // 0xa2(0x1)
};


// Size 0x38
class ServerUpdateCrewState: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<Struct CrewId>                                        Locations;                                         // 0x10(0x10)
	byte                                                         SessionType;                                       // 0x20(0x1)
	TArray<UInt32 >                                              ContendedResources;                                // 0x28(0x10)
};


// Size 0x10
class ServiceStatusNotification: public None
{
public:
	Struct DateTime                                              ActivatedDateTimeUtc;                              // 0x8(0x8)
};


// Size 0x20
class FlameSpecificDataEntry: public None
{
public:
	byte                                                         FlameType;                                         // 0x0(0x1)
	Struct StringAssetReference                                  TextureAsset;                                      // 0x8(0x10)
	Struct PlayerStat                                            StatToFireWhenKilled;                              // 0x18(0x4)
};


// Size 0x4
class AIDeadActionStateParams: public None
{
public:
	float                                                        DeathDelay;                                        // 0x0(0x4)
};


// Size 0x20
class AISwimmingCreatureDeadActionStateParams: public None
{
public:
	float                                                        TimeLeftInStateToStartDithering;                   // 0x4(0x4)
	TArray<Struct AISwimmingCreatureDeadActionStateEventMapItem> CustomEvents;                                      // 0x8(0x10)
	float                                                        DoQuickDeathTestWhenLessThanTimeLeftInState;       // 0x18(0x4)
	float                                                        QuickDeathTime;                                    // 0x1c(0x4)
};


// Size 0x8
class AISwimmingCreatureDeadActionStateEventMapItem: public None
{
public:
	byte                                                         Event;                                             // 0x0(0x1)
	float                                                        FireAtTimeLeftInState;                             // 0x4(0x4)
};


// Size 0x48
class ShipHullAudioData: public None
{
public:
	Struct WwiseEmitter                                          Emitter;                                           // 0x0(0x20)
	Class WwiseObjectPoolWrapper*                                WwiseObjectPoolWrapper;                            // 0x20(0x8)
	Class WwiseEvent*                                            WwiseEvent;                                        // 0x28(0x8)
	struct FName                                                 Name;                                              // 0x30(0x8)
	Struct Vector                                                Offset;                                            // 0x38(0xc)
	bool                                                         ShipSinkingExceededRollThreshold;                  // 0x44(0x1)
	bool                                                         SetRTPC_Pitch;                                     // 0x44(0x1)
	bool                                                         SetRTPC_Roll;                                      // 0x44(0x1)
	bool                                                         SetRTPC_Velocity;                                  // 0x44(0x1)
	bool                                                         SetRTPC_Strain;                                    // 0x44(0x1)
};


// Size 0xa8
class ShipCreatureManagerCreatureInstance: public None
{
public:
	Class MeshComponent*                                         CreatureMeshComponent;                             // 0x0(0x8)
	Class WwiseEvent*                                            StopCreatureSounds;                                // 0x8(0x8)
};


// Size 0x18
class ShipCreatureManagerCreatureInstanceModifierCurves: public None
{
public:
	Class CurveFloat*                                            SpeedModifierCurve;                                // 0x0(0x8)
	Class CurveFloat*                                            RollCurve;                                         // 0x8(0x8)
	Class CurveVector*                                           OffsetCurve;                                       // 0x10(0x8)
};


// Size 0x10
class ShipPartsCatalogue: public None
{
public:
	TArray<Struct ShipPartsCataloguePartCustomisations>          Parts;                                             // 0x0(0x10)
};


// Size 0x20
class ShipPartsCataloguePartCustomisations: public None
{
public:
	Struct FString                                               PartName;                                          // 0x0(0x10)
	TArray<Struct ShipPartsCataloguePartCustomisation>           Customisations;                                    // 0x10(0x10)
};


// Size 0x20
class ShipPartsCataloguePartCustomisation: public None
{
public:
	Struct FString                                               FriendlyName;                                      // 0x0(0x10)
	TArray<Struct FriendlyName>                                  Customisation;                                     // 0x10(0x10)
};


// Size 0x10
class AllowedItemsToDetermineJettisonedContainerTypePair: public None
{
public:
	Class ContainerAllowedItemsDataAsset*                        AllowedItemsAsset;                                 // 0x0(0x8)
	class                                                        ContainerTypeToSpawn;                              // 0x8(0x8)
};


// Size 0x1c
class SiteGeneratorThresholdData: public None
{
public:
	float                                                        MinSpawnDistanceFromEndOfWorldZone;                // 0x0(0x4)
	float                                                        ClearanceRadius;                                   // 0x4(0x4)
	float                                                        MinDistanceFromClosestShipwreck;                   // 0x8(0x4)
	float                                                        MinDistanceFromClosestCrewShip;                    // 0xc(0x4)
	float                                                        MinDistanceFromClosestIsland;                      // 0x10(0x4)
	float                                                        MinDistanceFromClosestPlayer;                      // 0x14(0x4)
	float                                                        MinDistanceFromClosestRock;                        // 0x18(0x4)
};


// Size 0x18
class ShipwreckSite: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	Struct Rotator                                               Rotation;                                          // 0xc(0xc)
};


// Size 0x18
class ShipwreckSiteRotation: public None
{
public:
	Struct Rotator                                               Base;                                              // 0x0(0xc)
	Struct Rotator                                               MaxVariance;                                       // 0xc(0xc)
};


// Size 0x10
class FeatureToggledPremiumCatalog: public None
{
public:
	Struct FeatureFlag                                           FeatureToggle;                                     // 0x0(0x8)
	Class PremiumCatalogDataAsset*                               PremiumCatalog;                                    // 0x8(0x8)
};


// Size 0x18
class CatalogDescTab: public None
{
public:
	Struct StringAssetReference                                  FilterIcon;                                        // 0x0(0x10)
	Class CatalogDataAsset*                                      Catalog;                                           // 0x10(0x8)
};


// Size 0x78
class UpdatedEntitlementsAvailableEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0x8
class PurchaseConfigurationSettings: public None
{
public:
	float                                                        BackOffTimeInSeconds;                              // 0x0(0x4)
	float                                                        BackOffTimeGain;                                   // 0x4(0x4)
};


// Size 0x1
class InitialisePiratePreviewInShop: public None
{
public:
};


// Size 0x208
class CompanyShopOffersEvent: public None
{
public:
	Struct RankOffer                                             RankOffer;                                         // 0x0(0x1e8)
	TArray<Struct VoyageOffer>                                   VoyageOffers;                                      // 0x1e8(0x10)
	TArray<Struct VoyageOffers>                                  ItemOffers;                                        // 0x1f8(0x10)
};


// Size 0x200
class VoyageOffer: public None
{
public:
	Struct ShopOffer                                             ShopOffer;                                         // 0x0(0x1e0)
	Struct FString                                               BackgroundImage;                                   // 0x1e0(0x10)
	Struct FString                                               RibbonImage;                                       // 0x1f0(0x10)
};


// Size 0x1e8
class RankOffer: public None
{
public:
	Struct ShopOffer                                             ShopOffer;                                         // 0x0(0x1e0)
	int                                                          LevelRequirement;                                  // 0x1e0(0x4)
};


// Size 0x20
class RequestCompanyShopOffersEvent: public None
{
public:
	Struct FString                                               CatalogName;                                       // 0x0(0x10)
	Struct FString                                               CompanyId;                                         // 0x10(0x10)
};


// Size 0x1
class PurchaseShopOfferFailedEvent: public None
{
public:
};


// Size 0x1
class PurchaseShopOfferSucceededEvent: public None
{
public:
};


// Size 0x20
class RequestPurchaseShopOfferEvent: public None
{
public:
	Struct Guid                                                  OfferId;                                           // 0x0(0x10)
	Struct FString                                               CatalogName;                                       // 0x10(0x10)
};


// Size 0x30
class EventShopOffersEvent: public None
{
public:
	TArray<Struct ShopOffersEvent>                               Offers;                                            // 0x0(0x10)
	TArray<Str >                                                 Categories;                                        // 0x10(0x10)
	TArray<Struct Categories>                                    GildedVoyages;                                     // 0x20(0x10)
};


// Size 0x20
class ShopOffersEvent: public None
{
public:
	TArray<Struct RequestShopOffersFailedEvent>                  Offers;                                            // 0x0(0x10)
	TArray<Str >                                                 Categories;                                        // 0x10(0x10)
};


// Size 0x1
class RequestShopOffersFailedEvent: public None
{
public:
};


// Size 0x10
class RequestEventShopOffersEvent: public None
{
public:
	Struct FString                                               CatalogName;                                       // 0x0(0x10)
};


// Size 0x10
class RequestShopOffersEvent: public None
{
public:
	Struct FString                                               CatalogName;                                       // 0x0(0x10)
};


// Size 0x1
class ForceCloseShopEvent: public None
{
public:
};


// Size 0x1
class ShopClosedEvent: public None
{
public:
};


// Size 0xd8
class RequestOpenShopEvent: public None
{
public:
	Struct ShopDefinition                                        ShopDefinition;                                    // 0x0(0xd8)
};


// Size 0x8
class DigRequestInformation: public None
{
public:
	Class WwiseEvent*                                            RevealSFX;                                         // 0x0(0x8)
};


// Size 0x18
class DigAnimParams: public None
{
public:
	byte                                                         DigType;                                           // 0x0(0x1)
	float                                                        Duration;                                          // 0x4(0x4)
	float                                                        TimeStampOfUnlockingWielderMovement;               // 0x8(0x4)
	float                                                        TimeStampOfEnterGround;                            // 0xc(0x4)
	float                                                        TimeStampOfLeaveGround;                            // 0x10(0x4)
	byte                                                         AnimVariant;                                       // 0x14(0x1)
};


// Size 0x30
class SirenStatuesSelector_BasedOnShipSize_Entry: public None
{
public:
	TArray<AssetClass ShipSize>                                  SirenStatueTypes;                                  // 0x20(0x10)
};


// Size 0x38
class SkeletonAICharacterStrategyAudioEvents: public None
{
public:
	class                                                        AIStrategy;                                        // 0x0(0x8)
	Struct SkeletonAudioEvents                                   DefaultEvents;                                     // 0x8(0x20)
	TArray<Struct SkeletonAICharacterItemSpecificAudioEvents>    ItemSpecificEventOverrides;                        // 0x28(0x10)
};


// Size 0x30
class SkeletonAICharacterItemSpecificAudioEvents: public None
{
public:
	TArray<Class DefaultEvents>                                  ItemCategories;                                    // 0x0(0x10)
	Struct SkeletonAudioEvents                                   Events;                                            // 0x10(0x20)
};


// Size 0x20
class SkeletonAudioEvents: public None
{
public:
	Class WwiseEvent*                                            PlayLoop;                                          // 0x0(0x8)
	Class WwiseEvent*                                            StopLoop;                                          // 0x8(0x8)
	Class WwiseEvent*                                            StartOneShot;                                      // 0x10(0x8)
	Class WwiseEvent*                                            LeaveOneShot;                                      // 0x18(0x8)
};


// Size 0x40
class AdditionalWave: public None
{
public:
	TArray<Struct AdditionalCaptainTarget>                       TargetOptions;                                     // 0x0(0x10)
	Struct WeightedProbabilityRange                              NumberOfTargets;                                   // 0x10(0x20)
	bool                                                         RandomSelect;                                      // 0x30(0x1)
	class                                                        AICombatDialogue;                                  // 0x38(0x8)
};


// Size 0xc8
class AdditionalCaptainTarget: public None
{
public:
	class                                                        ClassId;                                           // 0x20(0x8)
	Class AthenaAIFormDataAsset*                                 Form;                                              // 0x28(0x8)
	Class AthenaAIControllerParamsDataAsset*                     Skillset;                                          // 0x30(0x8)
	Class LoadoutAsset*                                          Loadout;                                           // 0x58(0x8)
	Struct FText                                                 NameplateOverride;                                 // 0x60(0x38)
	TArray<Struct NameplateOverride>                             CrewStatsToFireWhenDefeated;                       // 0x98(0x10)
	TArray<Struct CrewStatsToFireWhenDefeated>                   AllianceStatsToFireWhenDefeated;                   // 0xa8(0x10)
	bool                                                         IsUsingDialogue;                                   // 0xb8(0x1)
	class                                                        OverrideAICombatDialogue;                          // 0xc0(0x8)
};


// Size 0x80
class SkellyFortFinder: public None
{
public:
};


// Size 0x30
class StaggerModifiersEntry: public None
{
public:
	byte                                                         StaggerToModify;                                   // 0x0(0x1)
	TArray<Byte StaggerToModify>                                 StaggersThatCancelThisModifier;                    // 0x8(0x10)
	bool                                                         OnlyWhenSprinting;                                 // 0x18(0x1)
	Struct StaggerModifiers                                      Modifiers;                                         // 0x1c(0x10)
};


// Size 0x10
class StaggerModifiers: public None
{
public:
	float                                                        StaggerSpeedModifierX;                             // 0x0(0x4)
	float                                                        StaggerSpeedModifierY;                             // 0x4(0x4)
	float                                                        StaggerAmplitudeModifierX;                         // 0x8(0x4)
	float                                                        StaggerAmplitudeModifierY;                         // 0xc(0x4)
};


// Size 0x18
class StunnedActionStateParams: public None
{
public:
	float                                                        StunDuration;                                      // 0x0(0x4)
	bool                                                         LockCameraMovement;                                // 0x4(0x1)
	bool                                                         TriggerStunScreenSpaceVFX;                         // 0x5(0x1)
	bool                                                         ApplyStunAnim;                                     // 0x6(0x1)
	byte                                                         StunAnimType;                                      // 0x7(0x1)
	bool                                                         InterruptMeleeAttacks;                             // 0x8(0x1)
	byte                                                         DurationType;                                      // 0x9(0x1)
	byte                                                         IsItemWieldingAllowed;                             // 0xa(0x1)
	class                                                        DamagerType;                                       // 0x10(0x8)
};


// Size 0xd0
class StormScalingParameters: public None
{
public:
	struct FName                                                 MaterialMaskPropertyName;                          // 0x0(0x8)
	struct FName                                                 RainOpacityPropertyName;                           // 0x8(0x8)
	Class CurveFloat*                                            RadiusCurve;                                       // 0x10(0x8)
	Class CurveFloat*                                            OuterRadiusCurve;                                  // 0x18(0x8)
	Class CurveFloat*                                            RainSheetOuterOpacityCurve;                        // 0x20(0x8)
	Class CurveFloat*                                            RainSheetInnerOpacityCurve;                        // 0x28(0x8)
	Class CurveFloat*                                            BaseCloudHeightCurve;                              // 0x30(0x8)
	Class CurveFloat*                                            BaseCloudMaskCurve;                                // 0x38(0x8)
	Class CurveFloat*                                            RingCloudHeightCurve;                              // 0x40(0x8)
	Class CurveFloat*                                            RingCloudMaskCurve;                                // 0x48(0x8)
	Class CurveFloat*                                            TopCloudHeightCurve;                               // 0x50(0x8)
	Class CurveFloat*                                            TopCloudMaskCurve;                                 // 0x58(0x8)
	Class CurveFloat*                                            PressureZoneRadiusCurve;                           // 0x60(0x8)
	Class CurveFloat*                                            PressureZoneTargetCurve;                           // 0x68(0x8)
	Class CurveFloat*                                            PressureZonePushCurve;                             // 0x70(0x8)
	Class CurveFloat*                                            PressureZoneWeightCurve;                           // 0x78(0x8)
	Class CurveFloat*                                            RainStrengthCurve;                                 // 0x80(0x8)
	Class CurveFloat*                                            WindStrengthCurve;                                 // 0x88(0x8)
	Class CurveFloat*                                            WindInnerRadiusCurve;                              // 0x90(0x8)
	Class CurveFloat*                                            WaterStrengthCurve;                                // 0x98(0x8)
	Class CurveLinearColor*                                      RainSheetOuterScaleCurve;                          // 0xa0(0x8)
	Class CurveLinearColor*                                      RainSheetInnerScaleCurve;                          // 0xa8(0x8)
	Class CurveLinearColor*                                      BaseCloudScaleCurve;                               // 0xb0(0x8)
	Class CurveLinearColor*                                      RingCloudScaleCurve;                               // 0xb8(0x8)
	Class CurveLinearColor*                                      TopCloudScaleCurve;                                // 0xc0(0x8)
	float                                                        AngryWaterLerpRatio;                               // 0xc8(0x4)
};


// Size 0x10
class StrongholdKeyInfo: public None
{
public:
	class                                                        SkellyFortEventType;                               // 0x0(0x8)
	class                                                        StrongholdKey;                                     // 0x8(0x8)
};


// Size 0x1
class EventSummonMegalodon: public None
{
public:
	byte                                                         SoulType;                                          // 0x0(0x1)
};


// Size 0x1
class EventHandInMegalodonSoul: public None
{
public:
	byte                                                         SoulType;                                          // 0x0(0x1)
};


// Size 0x1
class EventCollectedMegalodonSoul: public None
{
public:
	byte                                                         SoulType;                                          // 0x0(0x1)
};


// Size 0x10
class SwimmingCreatureLoadedMaterial: public None
{
public:
	Class MaterialInstance*                                      MaterialInstance;                                  // 0x0(0x8)
	bool                                                         CastShadows;                                       // 0x8(0x1)
};


// Size 0x58
class LoadoutCacheEntry: public None
{
public:
	Struct FString                                               PirateId;                                          // 0x0(0x10)
	Struct Loadout                                               Loadout;                                           // 0x10(0x48)
};


// Size 0x20
class QuestVariableAISpawner: public None
{
public:
};


// Size 0x20
class QuestVariableAIDioramaDesc: public None
{
public:
};


// Size 0x20
class QuestVariableCrewShipManifest: public None
{
public:
};


// Size 0x20
class QuestVariableActor: public None
{
public:
};


// Size 0x20
class QuestVariableNotificationDesc: public None
{
public:
};


// Size 0x20
class QuestVariableAISpawnerArray: public None
{
public:
};


// Size 0x20
class ForkedStep: public None
{
public:
	int                                                          Index;                                             // 0x0(0x4)
	Struct Guid                                                  Id;                                                // 0x4(0x10)
	Class TaleQuestStep*                                         Step;                                              // 0x18(0x8)
};


// Size 0x50
class CinematicCrewEvent: public None
{
public:
	TArray<Str None>                                             CrewMembers;                                       // 0x0(0x10)
	Struct FText                                                 Header;                                            // 0x10(0x38)
	struct FName                                                 Tag;                                               // 0x48(0x8)
};


// Size 0x60
class CinematicCrewNetworkEvent: public None
{
public:
	TArray<class CrewMembersPlayerStates*>                       CrewMembersPlayerStates;                           // 0x10(0x10)
	Struct FText                                                 Header;                                            // 0x20(0x38)
	struct FName                                                 Tag;                                               // 0x58(0x8)
};


// Size 0x18
class CampaignRanks: public None
{
public:
	struct FName                                                 CampaignId;                                        // 0x0(0x8)
	TArray<Class CampaignId>                                     Ranks;                                             // 0x8(0x10)
};


// Size 0x8
class EventReceiveTankardRefillerComponentState: public None
{
public:
	Class TankardRefillerComponent*                              Source;                                            // 0x0(0x8)
};


// Size 0xa0
class TelemetryStepContext: public None
{
public:
	Struct QuestVariableName                                     Name;                                              // 0x0(0x20)
	Struct QuestVariableDataAsset                                Asset;                                             // 0x20(0x20)
	Struct QuestVariableAsset                                    AssetRef;                                          // 0x40(0x20)
	Struct QuestVariableClass                                    Type;                                              // 0x60(0x20)
	Struct QuestVariableActor                                    Actor;                                             // 0x80(0x20)
};


// Size 0x20
class QuestVariableClass: public None
{
public:
};


// Size 0x20
class QuestVariableAsset: public None
{
public:
};


// Size 0x20
class QuestVariableDataAsset: public None
{
public:
};


// Size 0x20
class QuestVariableName: public None
{
public:
};


// Size 0xa8
class XMarksTheSpotQuestDesc: public None
{
public:
	TArray<Struct TreasureData>                                  Treasure;                                          // 0x28(0x10)
	float                                                        RotationFromNorth;                                 // 0x78(0x4)
	Struct Guid                                                  MapGroupGuid;                                      // 0x7c(0x10)
	TArray<class BoobyTrapSpawners*>                             BoobyTrapSpawners;                                 // 0x90(0x10)
	class                                                        OverrideTreasureMapItemDesc;                       // 0xa0(0x8)
};


// Size 0x28
class QuestDesc: public None
{
public:
	Struct FString                                               Title;                                             // 0x8(0x10)
	bool                                                         IsEmergent;                                        // 0x18(0x1)
	struct FName                                                 IslandName;                                        // 0x1c(0x8)
};


// Size 0x38
class TreasureData: public None
{
public:
	Struct TreasureLocationData                                  TreasureLocation;                                  // 0x0(0x20)
	class                                                        TreasureChestDesc;                                 // 0x20(0x8)
	Class ItemSpawnData*                                         TreasureSpawnData;                                 // 0x28(0x8)
	float                                                        DigRadius;                                         // 0x30(0x4)
};


// Size 0x20
class TreasureLocationData: public None
{
public:
	Struct Vector                                                WorldSpaceLocation;                                // 0x0(0xc)
	Struct Vector                                                IslandSpaceLocation;                               // 0xc(0xc)
	Struct Vector2D                                              MapSpaceLocation;                                  // 0x18(0x8)
};


// Size 0x30
class TinVoyageDebugEntry: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
	byte                                                         Difficulty;                                        // 0x8(0x1)
};


// Size 0x10
class XMarksTheSpotMapMark: public None
{
public:
	Struct Vector2D                                              Position;                                          // 0x0(0x8)
	float                                                        Rotation;                                          // 0x8(0x4)
	bool                                                         IsUnderground;                                     // 0xc(0x1)
};


// Size 0x38
class VaultTreasureRarity: public None
{
public:
	class                                                        VaultKeyDesc;                                      // 0x0(0x8)
	Struct ItemSpawnParams                                       SpawnParams;                                       // 0x8(0x28)
	Class WeightedItemDescSpawnDataAsset*                        ReferencedSpawnDistributionAsset;                  // 0x30(0x8)
};


// Size 0x28
class ItemSpawnParams: public None
{
public:
	Struct WeightedProbabilityRange                              Total;                                             // 0x0(0x20)
	float                                                        AllowedAngleDeviation;                             // 0x20(0x4)
	float                                                        MaxZ;                                              // 0x24(0x4)
};


// Size 0x58
class TutorialStepDependencies: public None
{
public:
	Class AthenaPlayerController*                                Controller;                                        // 0x0(0x8)
};


// Size 0x90
class TutorialSequence: public None
{
public:
	int                                                          CurrentStep;                                       // 0x8(0x4)
	Struct TutorialStepDependencies                              Dependencies;                                      // 0x20(0x58)
};


// Size 0x80
class TutorialStep: public None
{
public:
	Struct TutorialStepDependencies                              Dependencies;                                      // 0x20(0x58)
};


// Size 0xc8
class TutorialStepBeginTallTale: public None
{
public:
};


// Size 0x98
class TutorialStepBuyClothes: public None
{
public:
};


// Size 0x118
class TutorialStepBuyVoyage: public None
{
public:
};


// Size 0x80
class TutorialStepCycleWeapons: public None
{
public:
};


// Size 0x160
class TutorialStepEatBanana: public None
{
public:
};


// Size 0x80
class TutorialStepEndOfTutorial: public None
{
public:
};


// Size 0xa8
class TutorialStepPlayIntroAnimatic: public None
{
public:
	Class FirstPersonAnimationInstance*                          AnimInstance;                                      // 0x80(0x8)
};


// Size 0x160
class TutorialStepReturnToStranger: public None
{
public:
};


// Size 0x288
class TutorialStepSellTreasure: public None
{
public:
	Class ItemInfo*                                              SpawnedChest;                                      // 0x88(0x8)
};


// Size 0x170
class TutorialStepUseMap: public None
{
public:
	Class WieldableItem*                                         TutorialMap;                                       // 0x168(0x8)
};


// Size 0xba0
class MainTutorialSequence: public None
{
public:
	Struct TutorialStepPlayIntroAnimatic                         PlayIntro;                                         // 0xb8(0xa8)
	Struct TutorialStepEatBanana                                 EatBanana;                                         // 0x160(0x160)
	Struct TutorialStepUseMap                                    UseMap;                                            // 0x2c0(0x170)
	Struct TutorialStepBuyVoyage                                 BuyVoyage;                                         // 0x430(0x118)
	Struct TutorialStepCycleWeapons                              CycleWeapons;                                      // 0x548(0x80)
	Struct TutorialStepSellTreasure                              SellTreasure;                                      // 0x5c8(0x288)
	Struct TutorialStepBuyClothes                                BuyClothes;                                        // 0x850(0x98)
	Struct TutorialStepReturnToStranger                          ReturnToStranger;                                  // 0x8e8(0x160)
	Struct TutorialStepBeginTallTale                             BeginTallTale;                                     // 0xa48(0xc8)
	Struct TutorialStepEndOfTutorial                             EndOfTutorial;                                     // 0xb10(0x80)
};


// Size 0x10
class TutorialAnimationResult: public None
{
public:
	Class FirstPersonAnimationInstance*                          AnimInstance;                                      // 0x8(0x8)
};


// Size 0x10
class BlockDecalMaterials: public None
{
public:
	TArray<class BlockMaterials*>                                BlockMaterials;                                    // 0x0(0x10)
};


// Size 0x1
class VomitFacialAnim: public None
{
public:
};


// Size 0x50
class VomitProjectiles: public None
{
public:
	class                                                        VomitProjectileClass;                              // 0x0(0x8)
	struct FName                                                 SocketName;                                        // 0x8(0x8)
	float                                                        Speed;                                             // 0x10(0x4)
	float                                                        AdditionalLiftAngle;                               // 0x14(0x4)
	float                                                        Radius;                                            // 0x18(0x4)
	float                                                        ImpactDelay;                                       // 0x1c(0x4)
	float                                                        ImpactCutoff;                                      // 0x20(0x4)
	int                                                          ImpactsMin;                                        // 0x24(0x4)
	int                                                          ImpactsMax;                                        // 0x28(0x4)
	byte                                                         ChannelToIgnoreInShip;                             // 0x2c(0x1)
	bool                                                         DebugLaunchClientProjectiles;                      // 0x2d(0x1)
};


// Size 0x2c
class VomitScreenFX: public None
{
public:
	float                                                        EnterDuration;                                     // 0x0(0x4)
	float                                                        FullOnDuration;                                    // 0x4(0x4)
	float                                                        ExitDuration;                                      // 0x8(0x4)
	float                                                        DebugInterval;                                     // 0xc(0x4)
};


// Size 0x200
class VomitVFX: public None
{
public:
	float                                                        Delay;                                             // 0x0(0x4)
	TArray<Struct VomitVFXObject>                                VomitVFXObjects;                                   // 0x8(0x10)
	struct FName                                                 SocketName1st;                                     // 0x18(0x8)
	Struct Vector                                                Location1st;                                       // 0x20(0xc)
	Struct Rotator                                               Rotation1st;                                       // 0x2c(0xc)
	Class ParticleSystemComponent*                               Component1st;                                      // 0x38(0x8)
	struct FName                                                 SocketName3rd;                                     // 0x40(0x8)
	Struct Vector                                                Location3rd;                                       // 0x48(0xc)
	Struct Rotator                                               Rotation3rd;                                       // 0x54(0xc)
	Class ParticleSystemComponent*                               Component3rd;                                      // 0x60(0x8)
	TArray<Class Component3rd>                                   No1stObjects;                                      // 0x68(0x10)
	Class Controller*                                            Controller;                                        // 0x78(0x8)
};


// Size 0x18
class VomitVFXObject: public None
{
public:
	struct FName                                                 VFXName;                                           // 0x0(0x8)
	Class Object*                                                FirstPerson;                                       // 0x8(0x8)
	Class Object*                                                ThirdPerson;                                       // 0x10(0x8)
};


// Size 0x148
class MatchmakingVoyageRecipe: public None
{
public:
	byte                                                         ServerType;                                        // 0x140(0x1)
	byte                                                         ContestType;                                       // 0x141(0x1)
};


// Size 0x10
class WaterBarrelFeedbackLevel: public None
{
public:
	float                                                        Strength;                                          // 0x0(0x4)
	Class ForceFeedbackEffect*                                   Effect;                                            // 0x8(0x8)
};


// Size 0x8
class WaterSensitiveHealthChange: public None
{
public:
	bool                                                         HealthChangeEnabled;                               // 0x0(0x1)
	float                                                        HealthChangeAmount;                                // 0x4(0x4)
};


// Size 0x8
class EventReceiveWeepingComponentState: public None
{
public:
	Class WeepingComponent*                                      Source;                                            // 0x0(0x8)
};


// Size 0x8
class WheelDesc: public None
{
public:
	Class SkeletalMesh*                                          WheelMesh;                                         // 0x0(0x8)
};


// Size 0x8
class WheelEventProperties: public None
{
public:
	float                                                        VelocityThresholdForStopped;                       // 0x0(0x4)
	float                                                        DeadZoneForCenter;                                 // 0x4(0x4)
};


// Size 0x78
class WheelAnimationProperties: public None
{
public:
	float                                                        MaxWheelAngle;                                     // 0x0(0x4)
	float                                                        MinWheelAngle;                                     // 0x4(0x4)
	float                                                        MaxWheelSpeed;                                     // 0x8(0x4)
	float                                                        SpeedForFastTurns;                                 // 0xc(0x4)
	float                                                        SpeedForMidTurns;                                  // 0x10(0x4)
	float                                                        Left180ZoneAMin;                                   // 0x14(0x4)
	float                                                        Left180ZoneAMax;                                   // 0x18(0x4)
	float                                                        Left180ZoneBMin;                                   // 0x1c(0x4)
	float                                                        Left180ZoneBMax;                                   // 0x20(0x4)
	float                                                        Right180ZoneAMin;                                  // 0x24(0x4)
	float                                                        Right180ZoneAMax;                                  // 0x28(0x4)
	float                                                        Right180ZoneBMin;                                  // 0x2c(0x4)
	float                                                        Right180ZoneBMax;                                  // 0x30(0x4)
	float                                                        LeftMid180ZoneAMin;                                // 0x34(0x4)
	float                                                        LeftMid180ZoneAMax;                                // 0x38(0x4)
	float                                                        RightMid180ZoneAMin;                               // 0x3c(0x4)
	float                                                        RightMid180ZoneAMax;                               // 0x40(0x4)
	float                                                        Animation180AngleMap;                              // 0x44(0x4)
	float                                                        ServerWheelBlend;                                  // 0x48(0x4)
	float                                                        WheelBlend;                                        // 0x4c(0x4)
	float                                                        TurbulenceMaxDriftSpeed;                           // 0x50(0x4)
	Class CurveFloat*                                            TurbulenceInputScale;                              // 0x58(0x8)
	float                                                        TurbulenceMaxDriftPercentageCounter;               // 0x60(0x4)
	float                                                        TurbulenceMaxDriftBoostPercentage;                 // 0x64(0x4)
	float                                                        TurbulenceLockJitterRate;                          // 0x68(0x4)
	float                                                        TurbulenceLockJitter;                              // 0x6c(0x4)
	float                                                        TurbulenceSmoothRate;                              // 0x70(0x4)
	float                                                        SteeringAngleFeedbackThreshold;                    // 0x74(0x4)
};


// Size 0x48
class WheelPartsScales: public None
{
public:
	Struct Vector                                                FractureWestScale;                                 // 0x0(0xc)
	Struct Vector                                                FractureEastScale;                                 // 0xc(0xc)
	Struct Vector                                                FractureSouthScale;                                // 0x18(0xc)
	Struct Vector                                                PlankWestScale;                                    // 0x24(0xc)
	Struct Vector                                                PlankEastScale;                                    // 0x30(0xc)
	Struct Vector                                                PlankSouthScale;                                   // 0x3c(0xc)
};


// Size 0x10
class BlendAdditiveValues: public None
{
public:
	float                                                        HandAdditiveBlendValueON;                          // 0x0(0x4)
	float                                                        HandAdditiveBlendValueOFF;                         // 0x4(0x4)
	float                                                        FullBodyAdditiveBlendValueON;                      // 0x8(0x4)
	float                                                        FullBodyAdditiveBlendValueOFF;                     // 0xc(0x4)
};


// Size 0x20
class WheelAdditiveProperties: public None
{
public:
	float                                                        RightHandOnHandleAMin;                             // 0x0(0x4)
	float                                                        RightHandOnHandleAMax;                             // 0x4(0x4)
	float                                                        RightHandOnHandleBMin;                             // 0x8(0x4)
	float                                                        RightHandOnHandleBMax;                             // 0xc(0x4)
	float                                                        LeftHandOnHandleAMin;                              // 0x10(0x4)
	float                                                        LeftHandOnHandleAMax;                              // 0x14(0x4)
	float                                                        LeftHandOnHandleBMin;                              // 0x18(0x4)
	float                                                        LeftHandOnHandleBMax;                              // 0x1c(0x4)
};


// Size 0x24
class WheelAdditiveAlphaSets: public None
{
public:
	float                                                        IsAdditiveRightFingerIdle;                         // 0x0(0x4)
	float                                                        IsAdditiveLeftFingerIdle;                          // 0x4(0x4)
	float                                                        IsAdditiveIdle;                                    // 0x8(0x4)
	float                                                        LeftFingerAdditiveValue;                           // 0xc(0x4)
	float                                                        RightFingerAdditiveValue;                          // 0x10(0x4)
	float                                                        fullBodyAdditiveValue;                             // 0x14(0x4)
	float                                                        RHandAdditiveBlendValue;                           // 0x18(0x4)
	float                                                        LHandAdditiveBlendValue;                           // 0x1c(0x4)
	float                                                        FullBodyAdditiveBlendValue;                        // 0x20(0x4)
};


// Size 0x20
class WheelArmIKDownWithinRange: public None
{
public:
	float                                                        LeftArmDownRangeAMin;                              // 0x0(0x4)
	float                                                        LeftArmDownRangeAMax;                              // 0x4(0x4)
	float                                                        LeftArmDownRangeBMin;                              // 0x8(0x4)
	float                                                        LeftArmDownRangeBMax;                              // 0xc(0x4)
	float                                                        RightArmDownRangeAMin;                             // 0x10(0x4)
	float                                                        RightArmDownRangeAMax;                             // 0x14(0x4)
	float                                                        RightArmDownRangeBMin;                             // 0x18(0x4)
	float                                                        RightArmDownRangeBMax;                             // 0x1c(0x4)
};


// Size 0x4
class WheelArmIKBoolSets: public None
{
public:
	bool                                                         LeftIKOn;                                          // 0x0(0x1)
	bool                                                         RightIKOn;                                         // 0x1(0x1)
	bool                                                         LeftArmDown;                                       // 0x2(0x1)
	bool                                                         RightArmDown;                                      // 0x3(0x1)
};


// Size 0x18
class WielderInfo: public None
{
public:
	Class AthenaPlayerCharacter*                                 Character;                                         // 0x0(0x8)
	Class AthenaPlayerController*                                Controller;                                        // 0x8(0x8)
	Class AthenaPlayerState*                                     State;                                             // 0x10(0x8)
};


// Size 0x10
class WieldedItemData: public None
{
public:
	Class Actor*                                                 Wieldable;                                         // 0x0(0x8)
	class                                                        ItemCategory;                                      // 0x8(0x8)
};


// Size 0xe0
class AthenaAnimationPets: public None
{
public:
	byte                                                         PetSpawnState;                                     // 0x8(0x1)
	bool                                                         PetIsSad;                                          // 0x9(0x1)
	bool                                                         FlyingScared;                                      // 0xa(0x1)
	bool                                                         StaticBaseHeldPoseActive;                          // 0xb(0x1)
	bool                                                         UseAlternativeStrokeAnimations;                    // 0xc(0x1)
	bool                                                         CurrentlyLocomoting;                               // 0xd(0x1)
	bool                                                         UseShowingLocomotionSet;                           // 0xe(0x1)
	byte                                                         CurrentHeldState;                                  // 0xf(0x1)
	byte                                                         CurrentRoamingState;                               // 0x10(0x1)
	byte                                                         ParentCurrentWieldedState;                         // 0x11(0x1)
	Struct AthenaAnimationLocomotion                             ParentLocomotionData;                              // 0x18(0x68)
	byte                                                         ParentJumpingState;                                // 0x80(0x1)
	Class PetsAnimationData*                                     PetAnimations;                                     // 0x88(0x8)
	Struct AthenaAnimationPetSelectedArrayAnimations             PetSelectedArrayAnimations;                        // 0x90(0x10)
	byte                                                         ReactState;                                        // 0xa0(0x1)
	float                                                        JumpAlphaBlend;                                    // 0xa4(0x4)
	bool                                                         CurrentlyJumping;                                  // 0xa8(0x1)
	bool                                                         Submerged;                                         // 0xa9(0x1)
};


// Size 0x10
class AthenaAnimationPetSelectedArrayAnimations: public None
{
public:
	Class AnimSequence*                                          HeldBaseIdle_A;                                    // 0x0(0x8)
	Class AnimSequence*                                          HeldBaseIdle_B;                                    // 0x8(0x8)
};


// Size 0x4
class AnimationInterruptData: public None
{
public:
};


// Size 0x1c
class ServerWieldSet: public None
{
public:
	Struct NetActorPtr                                           WieldedItem;                                       // 0x0(0x14)
	int                                                          EpochId;                                           // 0x14(0x4)
	bool                                                         Fast;                                              // 0x18(0x1)
};


// Size 0x18
class SailsBillowStateChangeRpc: public None
{
public:
	bool                                                         AreSailsBillowed;                                  // 0x10(0x1)
};


// Size 0x1
class EventAIEndCustomAnimationSequenceLoop: public None
{
public:
};


// Size 0x8
class EventAITriggerCustomAnimationSequence: public None
{
public:
	struct FName                                                 SequenceName;                                      // 0x0(0x8)
};


// Size 0x1
class EventAISkeletalShipCaptainAnimState: public None
{
public:
	byte                                                         ActiveAnimationState;                              // 0x0(0x1)
};


// Size 0x10
class EventAIUseAlternateLocomotionSet: public None
{
public:
	bool                                                         UseAlternateLocomotionSet;                         // 0x0(0x1)
	class                                                        WieldedItemAnimationStoreId;                       // 0x8(0x8)
};


// Size 0x10
class EventAIEmoteActionAnimationChange: public None
{
public:
	byte                                                         ActiveEmoteActionState;                            // 0x0(0x1)
	Class AthenaCharacter*                                       Owner;                                             // 0x8(0x8)
};


// Size 0x10
class EventAISenseAnimationChange: public None
{
public:
	byte                                                         ActiveSenseState;                                  // 0x0(0x1)
	Class AthenaCharacter*                                       Owner;                                             // 0x8(0x8)
};


// Size 0x10
class EventAncientAIFormDespawned: public None
{
public:
	bool                                                         WasKilled;                                         // 0x0(0x1)
	Class Actor*                                                 KilledBy;                                          // 0x8(0x8)
};


// Size 0x10
class FogBankLocalPlayerPenetrationEvent: public None
{
public:
	byte                                                         FogBankType;                                       // 0x0(0x1)
	float                                                        PenetrationT3D;                                    // 0x4(0x4)
	float                                                        PenetrationTHorizontal;                            // 0x8(0x4)
	float                                                        PenetrationTVertical;                              // 0xc(0x4)
};


// Size 0x1
class EventAudioPlayerExitedHotFloorVicinity: public None
{
public:
};


// Size 0x1
class EventAudioPlayerEnteredHotFloorVicinity: public None
{
public:
};


// Size 0x10
class SpeechAccessibilityModel: public None
{
public:
	TArray<Struct SpeechAccessibilityProfileUser>                ProfileUsers;                                      // 0x0(0x10)
};


// Size 0x38
class SpeechAccessibilityProfileUser: public None
{
public:
	Struct FString                                               Id;                                                // 0x0(0x10)
	Struct FString                                               HostID;                                            // 0x10(0x10)
	TArray<Struct SpeechAccessibilitySetting>                    Settings;                                          // 0x20(0x10)
	bool                                                         IsSponsoredUser;                                   // 0x30(0x1)
};


// Size 0x20
class SpeechAccessibilitySetting: public None
{
public:
	Struct FString                                               Id;                                                // 0x0(0x10)
	Struct FString                                               Value;                                             // 0x10(0x10)
};


// Size 0x48
class SpeechAccessibilityOptions: public None
{
public:
	bool                                                         GameChatSTT;                                       // 0x0(0x1)
	bool                                                         GameChatTTS;                                       // 0x1(0x1)
	Struct FString                                               PersonaID;                                         // 0x8(0x10)
	Struct FString                                               PersonaName;                                       // 0x18(0x10)
	int                                                          PersonaGender;                                     // 0x28(0x4)
	Struct FString                                               PersonaLang;                                       // 0x30(0x10)
	bool                                                         GameTextSS;                                        // 0x40(0x1)
};


// Size 0x1
class LocalGameChatStatusEvent: public None
{
public:
	byte                                                         Status;                                            // 0x0(0x1)
};


// Size 0x1
class TeardownAndReloadUICompleted: public None
{
public:
};


// Size 0x1
class TeardownAndReloadUI: public None
{
public:
};


// Size 0x1
class SignOutButtonVisibilityEvent: public None
{
public:
	bool                                                         IsVisible;                                         // 0x0(0x1)
};


// Size 0x1
class UpdateSignOutButtonVisibilityEvent: public None
{
public:
};


// Size 0x1
class UseMaidenVoyageFlowEvent: public None
{
public:
	bool                                                         IsNewPlayer;                                       // 0x0(0x1)
};


// Size 0x1
class ClientInputMatchmakingResult: public None
{
public:
	bool                                                         IsAccepted;                                        // 0x0(0x1)
};


// Size 0x1
class BootFlowCrossInputMatchmakingStateEvent: public None
{
public:
	bool                                                         CrossInput;                                        // 0x0(0x1)
};


// Size 0x4
class EventBackfillWeightingChange: public None
{
public:
};


// Size 0x1
class HideGenericModalContinueEvent: public None
{
public:
};


// Size 0x10
class GenericModalContinueEvent: public None
{
public:
	Struct FString                                               DisplayMessage;                                    // 0x0(0x10)
};


// Size 0x1
class QueryGenericModalContinueEvent: public None
{
public:
};


// Size 0x1
class GenericModalContinueConfirmEvent: public None
{
public:
};


// Size 0x1
class HideGenericConfirmationEvent: public None
{
public:
};


// Size 0x10
class GenericConfirmationEvent: public None
{
public:
	Struct FString                                               DisplayMessage;                                    // 0x0(0x10)
};


// Size 0x1
class QueryGenericConfirmationEvent: public None
{
public:
};


// Size 0x1
class GenericConfirmEvent: public None
{
public:
};


// Size 0x1
class GenericRejectEvent: public None
{
public:
};


// Size 0x18
class ClientEndEngagementMessageEvent: public None
{
public:
	float                                                        ScreenDuration;                                    // 0x0(0x4)
	Struct FString                                               EndedScreen;                                       // 0x8(0x10)
};


// Size 0x1
class MapTableAnimationEvent_Advance: public None
{
public:
};


// Size 0x1
class MapTableAnimationEvent_End: public None
{
public:
};


// Size 0x1
class MapTableAnimationEvent_Start: public None
{
public:
};


// Size 0x1
class ArenaTutorialFinishedEvent: public None
{
public:
};


// Size 0x1
class ArenaTutorialEndEvent: public None
{
public:
};


// Size 0x1
class ArenaTutorialAnimationStartEvent: public None
{
public:
};


// Size 0x1
class ArenaTutorialStartEvent: public None
{
public:
};


// Size 0x1
class OptedIntoMarketingEvent: public None
{
public:
};


// Size 0x30
class GameNarrationStateChangeEvent: public None
{
public:
	bool                                                         Enabled;                                           // 0x0(0x1)
	Struct FString                                               PreferredVoice;                                    // 0x8(0x10)
	Struct FString                                               Language;                                          // 0x18(0x10)
	int                                                          Gender;                                            // 0x28(0x4)
};


// Size 0x10
class GamerTagUpdated: public None
{
public:
	Struct FString                                               GamerTag;                                          // 0x0(0x10)
};


// Size 0x1
class PirateRerollEvent_CancelRerollRequest: public None
{
public:
};


// Size 0x1
class PirateRerollEvent_RestartClient: public None
{
public:
};


// Size 0x1
class PirateRerollEvent_OpenReroll: public None
{
public:
};


// Size 0x1
class PirateRerollEvent_HideRequestRerollModal: public None
{
public:
};


// Size 0x1
class PirateRerollEvent_RequestReroll: public None
{
public:
};


// Size 0x1
class PirateRerollEvent_CancelReroll: public None
{
public:
};


// Size 0x1
class PirateRerollEvent_StartReroll: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_InitialModalRemoved: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_FavoriteButtonPressed: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_SelectButtonPressed: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_RefreshButtonPressed: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_End: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_CelebrationEnded: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_PirateSaved: public None
{
public:
};


// Size 0x90
class PirateCreationEvent_SavePirate: public None
{
public:
	Struct PirateDescription                                     Description;                                       // 0x0(0x80)
	TArray<Class Description>                                    Outfit;                                            // 0x80(0x10)
};


// Size 0x1
class PirateCreationEvent_UserExitGameRequest: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_UserConfirmationResponse: public None
{
public:
	bool                                                         ShouldSavePirate;                                  // 0x0(0x1)
};


// Size 0x1
class PirateCreationEvent_UserConfirmationRequest: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_UserPirateGenerateRequest: public None
{
public:
};


// Size 0x1
class PirateCreationEvent_Begin: public None
{
public:
};


// Size 0x10
class BootFlowSetWhatsNewArticleList: public None
{
public:
	TArray<Struct BootFlowWhatsNewArticle>                       WhatsNewArticleList;                               // 0x0(0x10)
};


// Size 0x70
class BootFlowWhatsNewArticle: public None
{
public:
	Struct FString                                               Title;                                             // 0x0(0x10)
	Struct FString                                               Description;                                       // 0x10(0x10)
	Struct FString                                               HeroImage;                                         // 0x20(0x10)
	Struct FString                                               GridImage;                                         // 0x30(0x10)
	Struct FString                                               GridPrimaryDescription;                            // 0x40(0x10)
	Struct FString                                               GridSecondaryDescription;                          // 0x50(0x10)
	Struct FString                                               DescriptionTimes;                                  // 0x60(0x10)
};


// Size 0x30
class BootFlowSetContentEngagementMessage: public None
{
public:
	Struct FString                                               Title;                                             // 0x0(0x10)
	Struct FString                                               Body;                                              // 0x10(0x10)
	Struct FString                                               KeyArt;                                            // 0x20(0x10)
};


// Size 0x10
class BootFlowSetEngagementMessage: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x1
class RequestSwitchAccountEvent: public None
{
public:
};


// Size 0x2
class RequestLobbyUIEvent: public None
{
public:
	byte                                                         SessionType;                                       // 0x0(0x1)
	byte                                                         SessionVisibility;                                 // 0x1(0x1)
};


// Size 0x5
class VisibleSessionTypeSelectionResponseEvent: public None
{
public:
	byte                                                         SessionVisibility;                                 // 0x0(0x1)
	byte                                                         SessionType;                                       // 0x1(0x1)
	byte                                                         SelectedPlayMode;                                  // 0x2(0x1)
	byte                                                         SessionGrouping;                                   // 0x3(0x1)
	byte                                                         SessionStyle;                                      // 0x4(0x1)
};


// Size 0x1
class SessionTypeSelectionResponseEvent: public None
{
public:
	byte                                                         SessionType;                                       // 0x0(0x1)
};


// Size 0x1
class RequestSessionTypeSelectionEvent: public None
{
public:
};


// Size 0x1
class BootFlowQuitLobbyEvent: public None
{
public:
};


// Size 0x1
class QuitMaidenVoyageEvent: public None
{
public:
};


// Size 0x1
class QuitGameEvent: public None
{
public:
};


// Size 0x1
class BootFlowUserDismissedErrorEvent: public None
{
public:
};


// Size 0x1
class BootFlowErrorMessageQueryEvent: public None
{
public:
};


// Size 0x1
class BootFlowStateQueryEvent: public None
{
public:
};


// Size 0x1
class BootFlowUserSelectedStartServerMatchmakingEvent: public None
{
public:
};


// Size 0x1
class BootFlowUserSelectedStartCrewMatchmakingEvent: public None
{
public:
};


// Size 0x1
class BootFlowUserSelectedEvent: public None
{
public:
};


// Size 0x1
class BootFlowEngagedViaControllerInputEvent: public None
{
public:
};


// Size 0x20
class QueryConfirmInviteResponse: public None
{
public:
	bool                                                         IsInviteConfirmationPending;                       // 0x0(0x1)
	Struct FString                                               ErrorMessage;                                      // 0x8(0x10)
	bool                                                         IsErrorMessage;                                    // 0x18(0x1)
};


// Size 0x4
class BootFlowSessionDetailsEvent: public None
{
public:
	byte                                                         SessionVisibility;                                 // 0x0(0x1)
	byte                                                         SessionType;                                       // 0x1(0x1)
	byte                                                         SelectedPlayMode;                                  // 0x2(0x1)
	bool                                                         CrossInput;                                        // 0x3(0x1)
};


// Size 0x1
class RejectInviteEvent: public None
{
public:
};


// Size 0x1
class ConfirmInviteEvent: public None
{
public:
};


// Size 0x1
class QueryConfirmInviteRequest: public None
{
public:
};


// Size 0x1
class HideInviteModalEvent: public None
{
public:
};


// Size 0x10
class ShowInviteErrorModalEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x1
class ShowInviteConfirmationModalEvent: public None
{
public:
};


// Size 0x1
class BootFlowInviteAcceptedEvent: public None
{
public:
};


// Size 0x10
class BootFlowUpdateTaskStatusEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x10
class BootFlowStateQueryResponseEvent: public None
{
public:
	Struct FString                                               StateName;                                         // 0x0(0x10)
};


// Size 0x10
class BootFlowErrorMessageQueryResponseEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
};


// Size 0x10
class BootFlowErrorOccurredEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
};


// Size 0x1
class BootFlowStartHandleErrorStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowEndInGameStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartInGameStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartLoadIntoGameEvent: public None
{
public:
};


// Size 0x1
class BootFlowEndContestMatchmakingStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartContestMatchmakingStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartCrewMatchmakingStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartLobbyStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartSetupServerConfigurationStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartSetupCrewSessionStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartEndMaidenVoyageStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartCheckForExistingSessionsStateEvent: public None
{
public:
};


// Size 0x90
class UpdateSelectedPirateEvent: public None
{
public:
	TArray<Class BootFlowStartAccessibilitySettingsStateEvent>   Outfit;                                            // 0x80(0x10)
};


// Size 0x1
class BootFlowStartAccessibilitySettingsStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartMarketingOptInStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartSwapServicesStampStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartSessionSelectStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowEndPirateSelectionStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartPirateSelectionStateEvent: public None
{
public:
};


// Size 0x28
class BootFlowWaitForLoadingScreenStateTransitionEvent: public None
{
public:
	Struct FString                                               OldState;                                          // 0x0(0x10)
	Struct FString                                               NewState;                                          // 0x10(0x10)
	float                                                        OldStateDuration;                                  // 0x20(0x4)
};


// Size 0x1
class BootFlowStartSetupServiceBridgeStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartEnumerateEntitlementsStateStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartSetupBannedHandlerStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartSetupConfigurationServiceStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartLoginTokenExchangeStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartLoadUserSettingsStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartStoreRedemptionStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartEmblemDefinitionRetrievalStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartWhatsNewArticleRetrievalStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartEngagementMessageRetrievalStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartLocalizationStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartWaitForLoadingScreenStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartServiceDiscoveryStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartSelectUserStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartEngageStateEvent_End: public None
{
public:
};


// Size 0x1
class BootFlowStartEngageStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartWaitForEntryLevelEvent: public None
{
public:
};


// Size 0x1
class BootFlowUserPromptRestartLocaleChangedStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowLocaleRefreshUIStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartCheckNarrationStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowAdvanceLegalSplashStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowEndLegalSplashStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartLegalSplashStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowPreLoadUserSettingStateEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartEntryLevelStateEvent: public None
{
public:
};


// Size 0x1
class RejectRejoinEvent: public None
{
public:
};


// Size 0x1
class ConfirmRejoinEvent: public None
{
public:
};


// Size 0x1
class HideRejoinModalEvent: public None
{
public:
};


// Size 0x1
class ShowRejoinModalEvent: public None
{
public:
};


// Size 0x28
class LobbyCrewInfo: public None
{
public:
	byte                                                         SessionType;                                       // 0x0(0x1)
	TArray<Struct LobbyCrewMember>                               Members;                                           // 0x8(0x10)
	Struct FString                                               SessionName;                                       // 0x18(0x10)
};


// Size 0x20
class LobbyCrewMember: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	Struct FString                                               GamerTag;                                          // 0x10(0x10)
};


// Size 0x20
class LobbySetupChangedEvent: public None
{
public:
};


// Size 0x20
class LobbySetup: public None
{
public:
	TArray<Struct EventSessionCodeTextboxTextFromVirtualKeyboard> Crews;                                             // 0x0(0x10)
	TArray<Struct Crews>                                         CrewlessMembers;                                   // 0x10(0x10)
};


// Size 0x10
class EventSessionCodeTextboxTextFromVirtualKeyboard: public None
{
public:
	Struct FString                                               Text;                                              // 0x0(0x10)
};


// Size 0x1
class EventSessionCodeTextboxFocusRequest: public None
{
public:
	bool                                                         ShouldFocusSessionCodeTextbox;                     // 0x0(0x1)
};


// Size 0x1
class SessionLaunchedFailedEvent: public None
{
public:
};


// Size 0x1
class SessionLaunchedEvent: public None
{
public:
};


// Size 0x1
class RequestLaunchSessionEvent: public None
{
public:
};


// Size 0x1
class RequestLeaveCrewEvent: public None
{
public:
};


// Size 0x10
class CrewChangeFailedEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x1
class CrewMembershipUpdatedEvent: public None
{
public:
};


// Size 0x4
class RequestJoinCrewEvent: public None
{
public:
	int                                                          CrewId;                                            // 0x0(0x4)
};


// Size 0x50
class SessionEvent: public None
{
public:
	Struct CreativeSession                                       Session;                                           // 0x0(0x50)
};


// Size 0x50
class CreativeSession: public None
{
public:
	TArray<Struct CreativeCrewConfig>                            CrewConfigs;                                       // 0x0(0x10)
	bool                                                         IsHost;                                            // 0x10(0x1)
	TArray<Struct CreativeCrewMember>                            Members;                                           // 0x18(0x10)
	Struct FString                                               SessionCode;                                       // 0x28(0x10)
	int                                                          State;                                             // 0x38(0x4)
	Struct FString                                               XUID;                                              // 0x40(0x10)
};


// Size 0x28
class CreativeCrewMember: public None
{
public:
	int                                                          CrewId;                                            // 0x0(0x4)
	Struct FString                                               GamerTag;                                          // 0x8(0x10)
	Struct FString                                               XUID;                                              // 0x18(0x10)
};


// Size 0x1
class CreativeCrewConfig: public None
{
public:
	byte                                                         CrewSessionType;                                   // 0x0(0x1)
};


// Size 0x1
class RequestSessionEvent: public None
{
public:
};


// Size 0x10
class JoinSessionFailedEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x1
class JoinSessionSuccessEvent: public None
{
public:
};


// Size 0x10
class CreateSessionFailedEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x1
class CreateSessionSuccessEvent: public None
{
public:
};


// Size 0x10
class RequestJoinSessionEvent: public None
{
public:
	Struct FString                                               SessionCode;                                       // 0x0(0x10)
};


// Size 0x10
class RequestCreateSessionEvent: public None
{
public:
	TArray<Byte EnableServerCreationEvent>                       SessionTypes;                                      // 0x0(0x10)
};


// Size 0x1
class EnableServerCreationEvent: public None
{
public:
	bool                                                         Value;                                             // 0x0(0x1)
};


// Size 0x1
class BootFlowCreatorLobbyQuitEvent: public None
{
public:
};


// Size 0x1
class BootFlowStartCreatorModeSessionStateEvent: public None
{
public:
};


// Size 0x10
class PirateDeletionSucceededEvent: public None
{
public:
	Struct FString                                               PirateId;                                          // 0x0(0x10)
};


// Size 0x4
class PirateDeletionFailedEvent: public None
{
public:
};


// Size 0x78
class PirateDeletionRequestedEvent: public None
{
public:
	Struct PirateIdentity                                        Target;                                            // 0x0(0x78)
};


// Size 0x1
class ConnectToServicesStateDiscoverySucceededPreLoginEvent: public None
{
public:
};


// Size 0x50
class LobbyServiceModel: public None
{
public:
	Struct LobbyInviteCode                                       InviteCode;                                        // 0x0(0x20)
	Struct FString                                               HostXuid;                                          // 0x20(0x10)
	Struct LobbyCreationRequestModel                             LobbyCreationRequest;                              // 0x30(0x10)
	Struct FString                                               CreationTimeUtc;                                   // 0x40(0x10)
};


// Size 0x10
class LobbyCreationRequestModel: public None
{
public:
	Struct FString                                               SessionName;                                       // 0x0(0x10)
};


// Size 0x20
class LobbyInviteCode: public None
{
public:
	Struct FString                                               Code;                                              // 0x0(0x10)
	Struct FString                                               CreatedUtc;                                        // 0x10(0x10)
};


// Size 0x10
class SessionCreationResponseModel: public None
{
public:
	TArray<Struct SessionCreationCrewResponseModel>              Crews;                                             // 0x0(0x10)
};


// Size 0x38
class SessionCreationCrewResponseModel: public None
{
public:
	Struct FString                                               SessionName;                                       // 0x0(0x10)
	Struct SessionCreationCrewModel                              Crew;                                              // 0x10(0x28)
};


// Size 0x28
class SessionCreationCrewModel: public None
{
public:
	Struct FString                                               CrewLeaderXuid;                                    // 0x0(0x10)
	TArray<Struct SessionCreationCrewMemberModel>                CrewMembers;                                       // 0x10(0x10)
	byte                                                         SessionType;                                       // 0x20(0x1)
};


// Size 0x10
class SessionCreationCrewMemberModel: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
};


// Size 0x20
class SessionCreationRequestModel: public None
{
public:
	Struct FString                                               PrivateServerId;                                   // 0x0(0x10)
	TArray<Struct PrivateServerId>                               Crews;                                             // 0x10(0x10)
};


// Size 0x18
class ContestMatchmakingLocationsResponseModel: public None
{
public:
	TArray<Str None>                                             Locations;                                         // 0x0(0x10)
	int                                                          MaxHops;                                           // 0x10(0x4)
};


// Size 0x10
class ContestMatchmakingClientResponseModel: public None
{
public:
	Struct Timespan                                              EstimatedWaitTime;                                 // 0x0(0x8)
	Struct Timespan                                              RetryAfter;                                        // 0x8(0x8)
};


// Size 0xb8
class ContestMatchmakingClientRequestModel: public None
{
public:
	TArray<Str None>                                             PlayModeTags;                                      // 0x0(0x10)
	TArray<Str >                                                 PlayModeStates;                                    // 0x10(0x10)
	TArray<Struct ContestMatchmakingCrewModel>                   Crews;                                             // 0x70(0x10)
	Struct FString                                               ServerLocation;                                    // 0x80(0x10)
	Struct FString                                               PrivateServerId;                                   // 0x98(0x10)
	Struct Guid                                                  RequestCorrelationId;                              // 0xa8(0x10)
};


// Size 0x30
class ContestMatchmakingCrewModel: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x10(0x18)
	int                                                          SessionType;                                       // 0x28(0x4)
};


// Size 0x10
class WhatsNewArticleClientResponseModel: public None
{
public:
	TArray<Struct WhatsNewArticleModel>                          WhatsNewArticleList;                               // 0x0(0x10)
};


// Size 0x70
class WhatsNewArticleModel: public None
{
public:
	Struct FString                                               Title;                                             // 0x0(0x10)
	Struct FString                                               Description;                                       // 0x10(0x10)
	Struct FString                                               HeroImage;                                         // 0x20(0x10)
	Struct FString                                               GridImage;                                         // 0x30(0x10)
	Struct FString                                               GridPrimaryDescription;                            // 0x40(0x10)
	Struct FString                                               GridSecondaryDescription;                          // 0x50(0x10)
	Struct FString                                               DescriptionTimes;                                  // 0x60(0x10)
};


// Size 0x1
class StoreRedemptionStateFailedTelemetryEvent: public None
{
public:
	byte                                                         Status;                                            // 0x0(0x1)
};


// Size 0x20
class ToggleCinematicModeRpc: public None
{
public:
	bool                                                         bInCinematicMode;                                  // 0x10(0x1)
	Class PlayerController*                                      PlayerController;                                  // 0x18(0x8)
};


// Size 0x30
class UpdateCameraPositionRpc: public None
{
public:
	Class AthenaPlayerController*                                AthenaPlayerController;                            // 0x10(0x8)
	Struct Vector                                                Location;                                          // 0x18(0xc)
	Struct Rotator                                               Rotation;                                          // 0x24(0xc)
};


// Size 0x4
class CompanyLevelDataTable: public None
{
public:
	int                                                          XpRequiredForLevel;                                // 0x0(0x4)
};


// Size 0x10
class ClientPlayerNewLevelTelemetryEvent: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x8(0x8)
};


// Size 0x20
class PlayerXpGrantedTelemetryEvent: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x8(0x8)
	Struct Guid                                                  BootyId;                                           // 0x10(0x10)
};


// Size 0x1
class ContestEventScoreUpdated: public None
{
public:
};


// Size 0x1
class ContestEventShipAssignmentsUpdated: public None
{
public:
};


// Size 0x10
class CrewMemberRivalVoteEvent: public None
{
public:
	Class PlayerState*                                           CrewMemberPlayerState;                             // 0x0(0x8)
	bool                                                         IsInFavourOfRivalChange;                           // 0x8(0x1)
};


// Size 0x10
class CrewRequestedRivalChangeEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x48
class ContestResultMessage: public None
{
public:
	Struct Guid                                                  SessionId;                                         // 0x0(0x10)
	Struct FString                                               ContestType;                                       // 0x10(0x10)
	Struct FString                                               ShipType;                                          // 0x20(0x10)
	TArray<Struct ContestCrewResultModel>                        CrewResults;                                       // 0x30(0x10)
	Struct DateTime                                              TimestampUtc;                                      // 0x40(0x8)
};


// Size 0x28
class ContestCrewResultModel: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<Struct ContestCrewMemberModel>                        Members;                                           // 0x10(0x10)
};


// Size 0x28
class ContestCrewMemberModel: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	Struct FString                                               GamerTag;                                          // 0x18(0x10)
};


// Size 0x14
class ContestCrewResult: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x10
class StreamersResponse: public None
{
public:
	TArray<Struct StreamingStatusModel>                          StreamingStatuses;                                 // 0x0(0x10)
};


// Size 0xc8
class StreamingStatusModel: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0x10
class StreamSnapshotModel: public None
{
public:
	int                                                          ViewerCount;                                       // 0x0(0x4)
	Struct DateTime                                              TimeStamp;                                         // 0x8(0x8)
};


// Size 0x10
class StreamersRequest: public None
{
public:
	TArray<Struct CreatorCrewSettings>                           StreamingStatuses;                                 // 0x0(0x10)
};


// Size 0x8
class CreatorCrewSettings: public None
{
public:
	float                                                        UpdateStreamersPollIntervalSeconds;                // 0x0(0x4)
	float                                                        UpdateStreamersRateLimitSeconds;                   // 0x4(0x4)
};


// Size 0x1
class CrewSessionLostEvent: public None
{
public:
};


// Size 0x18
class CrewSessionDetailsChangedEvent: public None
{
public:
};


// Size 0x1
class RequestCurrentCrewSessionEvent: public None
{
public:
};


// Size 0x28
class LargeSessionServerEncounterDevTelemetryEvent: public None
{
public:
	Struct FString                                               InitiatingUserId;                                  // 0x0(0x10)
	Struct FString                                               EncounteredUserId;                                 // 0x10(0x10)
	bool                                                         TaskSucceeded;                                     // 0x20(0x1)
};


// Size 0x18
class LargeSessionEncounterDevTelemetryEvent: public None
{
public:
	Struct FString                                               EncounteredUserId;                                 // 0x0(0x10)
	bool                                                         TaskSucceeded;                                     // 0x10(0x1)
};


// Size 0x30
class DebugFlyingActionStateConstructionInfo: public None
{
public:
};


// Size 0x30
class DebugSuperSailorActionStateConstructionInfo: public None
{
public:
};


// Size 0x18
class DebugSuperSailorSetSpeedAmpRPCEvent: public None
{
public:
	float                                                        FwdSpdAmp;                                         // 0x10(0x4)
	float                                                        YawSpdAmp;                                         // 0x14(0x4)
};


// Size 0x18
class DebugSuperSailorSetYawSpeedRPCEvent: public None
{
public:
	float                                                        YawSpd;                                            // 0x10(0x4)
};


// Size 0x18
class DebugSuperSailorSetFwdSpeedRPCEvent: public None
{
public:
	float                                                        FwdSpd;                                            // 0x10(0x4)
};


// Size 0x10
class QueryContendedResourcesRpc: public None
{
public:
};


// Size 0x10
class QueryEventSchedulerStatusRpc: public None
{
public:
};


// Size 0x18
class QueryMigrationStatusRpc: public None
{
public:
	Class AthenaPlayerController*                                AthenaPlayerController;                            // 0x10(0x8)
};


// Size 0x18
class QueryServerMemoryRpc: public None
{
public:
	Class AthenaPlayerController*                                AthenaPlayerController;                            // 0x10(0x8)
};


// Size 0x20
class ResponseContendedResourcesNetworkEvent: public None
{
public:
	Struct FString                                               ContendedResources;                                // 0x10(0x10)
};


// Size 0x20
class ResponseEventSchedulerStatusNetworkEvent: public None
{
public:
	TArray<Str None>                                             EventStatus;                                       // 0x10(0x10)
};


// Size 0x20
class ResponseMigrationStatusNetworkEvent: public None
{
public:
	Struct FString                                               MigrationStatusLog;                                // 0x10(0x10)
};


// Size 0x70
class ResponseServerMemoryNetworkEvent: public None
{
public:
	Struct MemoryCommonData                                      MemoryData;                                        // 0x10(0x50)
	TArray<Struct MemoryVisualiserCategory>                      VisualiserCategories;                              // 0x60(0x10)
};


// Size 0x1
class EmoteDescHelpers: public None
{
public:
};


// Size 0x40
class CheatPerformedByClientNetworkEvent: public None
{
public:
	Struct FString                                               CheatSource;                                       // 0x10(0x10)
	Struct FString                                               CheatFunction;                                     // 0x20(0x10)
	Struct FString                                               CheatArguments;                                    // 0x30(0x10)
};


// Size 0x1
class EventFireWeapon: public None
{
public:
	bool                                                         bForFirstPerson;                                   // 0x0(0x1)
};


// Size 0x4
class FallingIntoWaterEvent: public None
{
public:
	float                                                        FallingSpeed;                                      // 0x0(0x4)
};


// Size 0x8
class EventCustomAnimationPlayAnimation: public None
{
public:
	struct FName                                                 AnimSequenceName;                                  // 0x0(0x8)
};


// Size 0x1
class EventCustomAnimationStateChanged: public None
{
public:
	byte                                                         CustomAnimationState;                              // 0x0(0x1)
};


// Size 0x4
class EventCapstanArmIntentChanged: public None
{
public:
	float                                                        NewIntent;                                         // 0x0(0x4)
};


// Size 0x8
class PlayerObjectUsageTelemetryFragmentInput: public None
{
public:
};


// Size 0x10
class PlayerObjectUsageBaseTelemetryFragment: public None
{
public:
	Struct FString                                               ObjectId;                                          // 0x0(0x10)
};


// Size 0xc
class PlayerCapstanUsageEndTelemetryEvent: public None
{
public:
	int                                                          NumCurrentUsers;                                   // 0x0(0x4)
	float                                                        CapstanVelocity;                                   // 0x4(0x4)
	float                                                        CapstanState;                                      // 0x8(0x4)
};


// Size 0xc
class PlayerCapstanUsageStartTelemetryEvent: public None
{
public:
	int                                                          NumCurrentUsers;                                   // 0x0(0x4)
	float                                                        CapstanVelocity;                                   // 0x4(0x4)
	float                                                        CapstanState;                                      // 0x8(0x4)
};


// Size 0x10
class AthenaAnimationCannonConcealedAnimData: public None
{
public:
	Class AnimSequence*                                          InCannonIdle;                                      // 0x0(0x8)
	Class AnimSequence*                                          FiredFromCannon;                                   // 0x8(0x8)
};


// Size 0x28
class AthenaAnimationCannonAnimData: public None
{
public:
	Class BlendSpace1D*                                          Into;                                              // 0x0(0x8)
	TArray<class Idle*>                                          Idle;                                              // 0x8(0x10)
	Class BlendSpace1D*                                          Fire;                                              // 0x18(0x8)
	Class BlendSpace1D*                                          Outof;                                             // 0x20(0x8)
};


// Size 0x1
class AthenaAICharacterNewWaveGroupSpawned: public None
{
public:
};


// Size 0x18
class AthenaAICharacterWasKilledWhileCursed: public None
{
public:
	TArray<Byte AthenaPlayerZonePenetrationTrackerUpdateEvent>   Curses;                                            // 0x0(0x10)
	Class Actor*                                                 Instigator;                                        // 0x10(0x8)
};


// Size 0x20
class AthenaPlayerZonePenetrationTrackerUpdateEvent: public None
{
public:
	Class Actor*                                                 PenetratedActor;                                   // 0x0(0x8)
	Class Actor*                                                 Player;                                            // 0x8(0x8)
	float                                                        PenetrationT3D;                                    // 0x10(0x4)
	float                                                        PenetrationTHorizontal;                            // 0x14(0x4)
	float                                                        PenetrationTVertical;                              // 0x18(0x4)
};


// Size 0x1
class BlinkStrafeEvent: public None
{
public:
};


// Size 0xc
class AthenaCharacterDodgeEvent: public None
{
public:
	Struct Vector                                                DodgeDirection;                                    // 0x0(0xc)
};


// Size 0x1
class EventDeathBlackFadeStopped: public None
{
public:
};


// Size 0x4
class EventDeathBlackFadeTriggered: public None
{
public:
};


// Size 0x1
class EventDeathCameraDeactivated: public None
{
public:
};


// Size 0x4
class EventDeathCameraActivated: public None
{
public:
	float                                                        CameraDuration;                                    // 0x0(0x4)
};


// Size 0x8
class EventPlayerCharacterModelsReplaced: public None
{
public:
	Class Actor*                                                 PlayerCharacter;                                   // 0x0(0x8)
};


// Size 0x8
class EventPlayerCharacterExitedShip: public None
{
public:
	Class Actor*                                                 PlayerCharacter;                                   // 0x0(0x8)
};


// Size 0x8
class EventPlayerCharacterEnteredShip: public None
{
public:
	Class Actor*                                                 PlayerCharacter;                                   // 0x0(0x8)
};


// Size 0x8
class EventPlayerCharacterLeft: public None
{
public:
	Class AthenaPlayerCharacter*                                 AthenaCharacter;                                   // 0x0(0x8)
};


// Size 0x8
class EventPlayerCharacterJoined: public None
{
public:
	Class AthenaPlayerCharacter*                                 AthenaCharacter;                                   // 0x0(0x8)
};


// Size 0x20
class EventCharacterFootExitWater: public None
{
public:
	Struct CharacterFootWaterImpactResult                        Result;                                            // 0x0(0x20)
};


// Size 0x20
class EventCharacterFootEnterWater: public None
{
public:
	Struct CharacterFootWaterImpactResult                        Result;                                            // 0x0(0x20)
};


// Size 0xd0
class EventCharacterFootImpact: public None
{
public:
	Struct CharacterFootImpactResult                             Result;                                            // 0x0(0xd0)
};


// Size 0x50
class ClientMeleeHitRegInfoTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	int                                                          NumHits;                                           // 0x10(0x4)
	Struct FString                                               HitObjectId;                                       // 0x18(0x10)
	Struct FString                                               HitObjectType;                                     // 0x28(0x10)
	Struct FString                                               HitActorName;                                      // 0x38(0x10)
	bool                                                         IsDamageBlocked;                                   // 0x48(0x1)
};


// Size 0x50
class ServerMeleeHitRegInfoTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	int                                                          NumHits;                                           // 0x10(0x4)
	Struct FString                                               HitObjectId;                                       // 0x18(0x10)
	Struct FString                                               HitObjectType;                                     // 0x28(0x10)
	Struct FString                                               HitActorName;                                      // 0x38(0x10)
	bool                                                         IsDamageBlocked;                                   // 0x48(0x1)
	bool                                                         IsDamageConfirmed;                                 // 0x49(0x1)
	bool                                                         HasPerformedKnockBack;                             // 0x4a(0x1)
	bool                                                         HasPerformedStun;                                  // 0x4b(0x1)
};


// Size 0x40
class MeleeWeaponAttackTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               AttackType;                                        // 0x10(0x10)
	int                                                          ComboIndex;                                        // 0x20(0x4)
	Struct FString                                               WeaponName;                                        // 0x28(0x10)
	float                                                        RequesterLatencyMs;                                // 0x38(0x4)
	float                                                        RequesterTimeOffset;                               // 0x3c(0x4)
};


// Size 0x10
class MeleeAttackMoveSpeedValidationTelemetryEvent: public None
{
public:
	byte                                                         CorrectionReason;                                  // 0x0(0x1)
	float                                                        AllowedWindowStartTimeSeconds;                     // 0x4(0x4)
	float                                                        AllowedWindowFinishTimeSeconds;                    // 0x8(0x4)
	float                                                        CurrentAttackClientTimeSeconds;                    // 0xc(0x4)
};


// Size 0x48
class AIKnockbackActionStateConstructionInfo: public None
{
public:
	Struct Vector                                                KnockbackDirection;                                // 0x30(0xc)
	float                                                        KnockbackSpeed;                                    // 0x3c(0x4)
	float                                                        KnockbackAccel;                                    // 0x40(0x4)
	byte                                                         KnockbackStrengthType;                             // 0x44(0x1)
};


// Size 0x40
class AIShipCaptainActionStateSerialisableData: public None
{
public:
};


// Size 0x40
class ControlObjectActionStateSerialisableData: public None
{
public:
	Struct Vector                                                UndockLocation;                                    // 0x30(0xc)
	bool                                                         UndockRequested;                                   // 0x3c(0x1)
};


// Size 0x38
class BeingRetractedActionStateConstructionInfo: public None
{
public:
	Class SceneComponent*                                        RetractingComponent;                               // 0x30(0x8)
};


// Size 0x48
class CapturedByKrakenActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           Tentacle;                                          // 0x30(0x14)
};


// Size 0x30
class CharacterActionStateConstructionInfo: public None
{
public:
	Class AthenaCharacter*                                       CharacterOwner;                                    // 0x28(0x8)
};


// Size 0x10
class ClientConditionsCompleteNetworkEvent: public None
{
public:
};


// Size 0x90
class ControlPulleyActionStateConstructionInfo: public None
{
public:
	byte                                                         ControllableType;                                  // 0x48(0x1)
	class                                                        AnalogInputId;                                     // 0x50(0x8)
	Struct ControlPulleyActionStateParams                        ActionStateParamsOverride;                         // 0x58(0x34)
	bool                                                         UseActionStateParamsOverride;                      // 0x8c(0x1)
};


// Size 0x48
class ControlObjectActionStateConstructionInfo: public None
{
public:
};


// Size 0x48
class DockToObjectActionStateConstructionInfo: public None
{
public:
	Struct NetObjectPtr                                          DockToObject;                                      // 0x30(0x14)
	bool                                                         IsInteractingActorFemale;                          // 0x44(0x1)
};


// Size 0xd8
class EmoteActionStateConstructionInfo: public None
{
public:
	Struct EmoteData                                             EmoteData;                                         // 0x30(0x98)
	struct FName                                                 EmoteIdentifier;                                   // 0xc8(0x8)
	bool                                                         ForcedEmote;                                       // 0xd0(0x1)
};


// Size 0x1
class EmoteActionStateParams: public None
{
public:
};


// Size 0x68
class LaunchedFromKrakenActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           Tentacle;                                          // 0x50(0x14)
};


// Size 0x50
class FiredFromActorActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           FiringActor;                                       // 0x30(0x14)
	Struct Vector                                                LaunchVelocity;                                    // 0x44(0xc)
};


// Size 0x48
class IngestedByKrakenActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           Tentacle;                                          // 0x30(0x14)
};


// Size 0x68
class InteractLoadableActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           LoadableObject;                                    // 0x30(0x14)
	Struct NetActorPtr                                           Interactable;                                      // 0x44(0x14)
	bool                                                         ControllingLoadable;                               // 0x58(0x1)
	class                                                        DefaultItemDesc;                                   // 0x60(0x8)
};


// Size 0x10
class EventTriggerOverlayAction: public None
{
public:
	Class Object*                                                InteractObject;                                    // 0x0(0x8)
	byte                                                         InteractableActionType;                            // 0x8(0x1)
};


// Size 0x1
class InvertRadialYInputEvent: public None
{
public:
	bool                                                         InvertRadialYInputEvent;                           // 0x0(0x1)
};


// Size 0x1
class EnableMovementDuringRadialEvent: public None
{
public:
	bool                                                         EnableMovementDuringRadial;                        // 0x0(0x1)
};


// Size 0x70
class TransitionLadderActionStateConstructionInfo: public None
{
public:
	float                                                        StartingInteractionHeight;                         // 0x48(0x4)
	byte                                                         ClimbId;                                           // 0x4c(0x1)
	byte                                                         LadderTransitionMode;                              // 0x4d(0x1)
	Struct LadderDefinition                                      LadderDefinition;                                  // 0x50(0x1c)
};


// Size 0x1c
class LadderDefinition: public None
{
public:
	byte                                                         LadderType;                                        // 0x0(0x1)
	Struct LadderBlendParams                                     OnTopLadderBlendParams;                            // 0x4(0xc)
	Struct LadderBlendParams                                     OffTopLadderBlendParams;                           // 0x10(0xc)
};


// Size 0xc
class LadderBlendParams: public None
{
public:
	float                                                        RotationBlendStartByPercentage;                    // 0x0(0x4)
	float                                                        RotationBlendEndByPercentage;                      // 0x4(0x4)
	float                                                        LocationBlendEndByPercentage;                      // 0x8(0x4)
};


// Size 0x70
class LinearTransitionLadderActionStateConstructionInfo: public None
{
public:
};


// Size 0x58
class MeleeBlockingActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           WieldedItem;                                       // 0x30(0x14)
	class                                                        InputID;                                           // 0x48(0x8)
	float                                                        BlockMovementLockTime;                             // 0x50(0x4)
};


// Size 0x1
class MeleeBlockingActionStateParams: public None
{
public:
};


// Size 0x38
class MigrationActionStateConstructionInfo: public None
{
public:
	bool                                                         EnableMigrationUI;                                 // 0x30(0x1)
};


// Size 0x1
class ClientMigrationEndedEvent: public None
{
public:
};


// Size 0x1
class ServerMigrationStateChanged: public None
{
public:
};


// Size 0x10
class MigrationSetupCompleteNetworkEvent: public None
{
public:
};


// Size 0x48
class ModalInteractionActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           InteractionProxy;                                  // 0x30(0x14)
};


// Size 0x48
class ModalInteractionActionStateSerialisableData: public None
{
public:
	Struct NetActorPtr                                           Interaction;                                       // 0x30(0x14)
};


// Size 0x48
class MoveToLocationActionStateConstructionInfo: public None
{
public:
	Class SceneComponent*                                        RelativeToComponent;                               // 0x30(0x8)
	Struct Vector                                                TargetLocation;                                    // 0x38(0xc)
};


// Size 0x60
class RepairObjectActionStateConstructionInfo: public None
{
public:
	Struct NetSubObjectPtr                                       RepairableObject;                                  // 0x30(0x14)
	Struct NetActorPtr                                           WieldedItem;                                       // 0x44(0x14)
	class                                                        InputID;                                           // 0x58(0x8)
};


// Size 0x38
class RepairObjectActionStateSerialisableData: public None
{
public:
	bool                                                         SuccessfulRepair;                                  // 0x30(0x1)
};


// Size 0x10
class ServerActionStateClientStartedAckNetworkEvent: public None
{
public:
};


// Size 0x48
class ShovelDigActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           UsableObject;                                      // 0x30(0x14)
};


// Size 0x18
class SplineTransitionLadderActionFinishedMessage: public None
{
public:
	float                                                        TimeCompleted;                                     // 0x10(0x4)
};


// Size 0x70
class SplineTransitionLadderActionStateConstructionInfo: public None
{
public:
};


// Size 0xc
class StunnedEvent: public None
{
public:
	bool                                                         Stunned;                                           // 0x0(0x1)
	bool                                                         ApplyStunAnim;                                     // 0x1(0x1)
	byte                                                         StunAnimType;                                      // 0x2(0x1)
	bool                                                         TriggerStunnedVFX;                                 // 0x3(0x1)
	float                                                        Duration;                                          // 0x4(0x4)
	bool                                                         InterruptMeleeAttacks;                             // 0x8(0x1)
};


// Size 0x48
class StunnedActionStateConstructionInfo: public None
{
public:
	Struct StunnedActionStateParams                              Params;                                            // 0x30(0x18)
};


// Size 0x48
class SwallowedByKrakenActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           Tentacle;                                          // 0x30(0x14)
};


// Size 0x48
class TalkToNPCActionStateConstructionInfo: public None
{
public:
	Class NPCDialogComponent*                                    NPCDialogComp;                                     // 0x30(0x8)
};


// Size 0x30
class ClientRequestTeleportCompleteAckNetworkEvent: public None
{
public:
	Class SceneComponent*                                        Base;                                              // 0x10(0x8)
	Struct Vector                                                Location;                                          // 0x18(0xc)
	Struct Rotator                                               Rotation;                                          // 0x24(0xc)
};


// Size 0x18
class ServerAsyncLoadingCompleteAckNetworkEvent: public None
{
public:
	byte                                                         Reason;                                            // 0x10(0x1)
};


// Size 0x18
class ServerTeleportCompleteAckNetworkEvent: public None
{
public:
	byte                                                         Reason;                                            // 0x10(0x1)
};


// Size 0x18
class TeleportStageCompletedEvent: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	float                                                        Duration;                                          // 0x10(0x4)
	byte                                                         Reason;                                            // 0x14(0x1)
	byte                                                         CompletedStage;                                    // 0x15(0x1)
};


// Size 0x38
class TeleportActionStateSerialisableData: public None
{
public:
	bool                                                         IsTeleporting;                                     // 0x30(0x1)
};


// Size 0x50
class UndoRepairActionStateConstructionInfo: public None
{
public:
	Struct NetSubObjectPtr                                       RepairableObject;                                  // 0x30(0x14)
	class                                                        InputID;                                           // 0x48(0x8)
};


// Size 0x38
class UndoRepairActionStateSerialisableData: public None
{
public:
	bool                                                         SuccessfulUndo;                                    // 0x30(0x1)
};


// Size 0x70
class UseLadderActionStateConstructionInfo: public None
{
public:
	float                                                        StartingInteractionHeight;                         // 0x48(0x4)
	byte                                                         ClimbId;                                           // 0x4c(0x1)
	Struct LadderDefinition                                      LadderDefinition;                                  // 0x50(0x1c)
};


// Size 0x30
class WaitForDemoResetActionStateConstructionInfo: public None
{
public:
};


// Size 0x48
class WaitingToSpawnActionStateConstructionInfo: public None
{
public:
	Class Actor*                                                 StartSpot;                                         // 0x30(0x8)
	int                                                          StreamOutLevel;                                    // 0x38(0x4)
	int                                                          StreamInLevel;                                     // 0x3c(0x4)
	byte                                                         Reason;                                            // 0x40(0x1)
	bool                                                         ReceiveLoadout;                                    // 0x41(0x1)
	bool                                                         ReceiveEntitlement;                                // 0x42(0x1)
	bool                                                         WaitForRelevancy;                                  // 0x43(0x1)
};


// Size 0x1
class EventWaitingToSpawnNetRelevantActorsCreated: public None
{
public:
};


// Size 0x4
class EventRemoveStackableLocomotionActionState: public None
{
public:
};


// Size 0x30
class EventAddStackableLocomotionActionState: public None
{
public:
};


// Size 0x1
class StopUpdatingConstellationVisibility: public None
{
public:
};


// Size 0xc
class StartUpdatingConstellationVisibility: public None
{
public:
};


// Size 0x10
class ConstellationSpawnedEvent: public None
{
public:
};


// Size 0x18
class EventSwimmingCreatureShipBite: public None
{
public:
	Class Ship*                                                  Ship;                                              // 0x0(0x8)
	Struct Vector                                                BiteLocation;                                      // 0x8(0xc)
};


// Size 0x18
class PlayerTookFlameOfFateEvent: public None
{
public:
	Class AthenaPlayerCharacter*                                 PlayerCharacter;                                   // 0x0(0x8)
	Class Object*                                                Source;                                            // 0x8(0x8)
	byte                                                         FlameOfFateType;                                   // 0x10(0x1)
};


// Size 0x18
class PlayerSetFlameOfFateEvent: public None
{
public:
	Class AthenaPlayerCharacter*                                 PlayerCharacter;                                   // 0x0(0x8)
	Class Object*                                                Target;                                            // 0x8(0x8)
	byte                                                         FlameOfFateType;                                   // 0x10(0x1)
};


// Size 0x18
class SetShipFlameOfFateEvent: public None
{
public:
	byte                                                         FlameOfFateType;                                   // 0x0(0x1)
	Class Object*                                                Source;                                            // 0x8(0x8)
	Class Object*                                                Ship;                                              // 0x10(0x8)
};


// Size 0x10
class SetFlameOfFateEvent: public None
{
public:
	byte                                                         FlameOfFateType;                                   // 0x0(0x1)
	Class Object*                                                Source;                                            // 0x8(0x8)
};


// Size 0x30
class PlayerRecieveFlameTelemetryEvent: public None
{
public:
	Struct FString                                               LightSourceId;                                     // 0x0(0x10)
	Struct FString                                               LightSourceType;                                   // 0x10(0x10)
	Struct FString                                               FlameColour;                                       // 0x20(0x10)
};


// Size 0x30
class PlayerSetFlameOfFateTelemetryEvent: public None
{
public:
	Struct FString                                               LitObjectId;                                       // 0x0(0x10)
	Struct FString                                               FlameColour;                                       // 0x10(0x10)
	Struct FString                                               LitObjectType;                                     // 0x20(0x10)
};


// Size 0x1
class PlinthActivatedEvent: public None
{
public:
};


// Size 0x8
class DeactivateHatchEvent: public None
{
public:
	struct FName                                                 EventID;                                           // 0x0(0x8)
};


// Size 0xc
class ActivateHatchEvent: public None
{
public:
	struct FName                                                 EventID;                                           // 0x0(0x8)
	byte                                                         FlameSpecificPhobia;                               // 0x8(0x1)
};


// Size 0x1
class OnRepIsXboxGamePadOnlyServerEvent: public None
{
public:
	bool                                                         IsXboxGamePadOnlyServer;                           // 0x0(0x1)
};


// Size 0x1
class EventAthenaCharacterMovementTickFinished: public None
{
public:
};


// Size 0x1
class EventInitialNetRelevantActorsCreated: public None
{
public:
};


// Size 0x1
class EventHarpoonProjectileClientStateChanged: public None
{
public:
	byte                                                         ProjectileState;                                   // 0x0(0x1)
};


// Size 0x88
class IconCaptureDataRow: public None
{
public:
	Struct FString                                               MapToPositionIn;                                   // 0x20(0x10)
	struct FName                                                 FolderPath;                                        // 0x70(0x8)
	TArray<Struct FName>                                         AssetSearchFolderPaths;                            // 0x78(0x10)
};


// Size 0x8
class ClothingLoadoutUpdatedEvent: public None
{
public:
	Class Actor*                                                 Character;                                         // 0x0(0x8)
};


// Size 0x1
class EmoteLoadoutUpdatedEvent: public None
{
public:
};


// Size 0x20
class PlayerChangedShipLoadoutEvent: public None
{
public:
	Struct FString                                               ShipEquippedType;                                  // 0x0(0x10)
	Struct FString                                               ShipEquippedName;                                  // 0x10(0x10)
};


// Size 0x20
class PlayerChangedLoadoutEvent: public None
{
public:
	Struct FString                                               EquippedType;                                      // 0x0(0x10)
	Struct FString                                               EquippedName;                                      // 0x10(0x10)
};


// Size 0x1
class PetLoadoutUpdatedEvent: public None
{
public:
};


// Size 0x1
class TitleLoadoutUpdatedEvent: public None
{
public:
};


// Size 0x18
class MountedWeaponFireAcknowledgeRpc: public None
{
public:
	Class Object*                                                MountedWeaponObject;                               // 0x10(0x8)
};


// Size 0x18
class MountedWeaponFireRejectionRpc: public None
{
public:
	Class Object*                                                MountedWeaponObject;                               // 0x10(0x8)
};


// Size 0x1
class EventNPCServiceRegistered: public None
{
public:
};


// Size 0x1
class ShipRestockedTelemetryEvent: public None
{
public:
};


// Size 0x60
class PlayerExitsShopTelemetryEvent: public None
{
public:
	Struct FString                                               ShopLocation;                                      // 0x0(0x10)
	Struct FString                                               VisitStartDate;                                    // 0x10(0x10)
	Struct FString                                               ShopName;                                          // 0x28(0x10)
	Struct FString                                               CatalogName;                                       // 0x38(0x10)
	Struct Guid                                                  CatalogId;                                         // 0x48(0x10)
	bool                                                         ForcedExit;                                        // 0x58(0x1)
};


// Size 0x18
class ClientRequestCameraFadeCompleteAckNetworkEvent: public None
{
public:
	float                                                        AckTimeout;                                        // 0x10(0x4)
};


// Size 0x18
class ServerCameraFadeCompleteAckNetworkEvent: public None
{
public:
	byte                                                         Reason;                                            // 0x10(0x1)
};


// Size 0x18
class CampaignCompletedNetworkEvent: public None
{
public:
	struct FName                                                 Name;                                              // 0x10(0x8)
};


// Size 0x10
class EmblemUnlockedPopupEvent: public None
{
public:
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x0(0x8)
	Class PopUpAudioDesc*                                        PopUpAudioOverrides;                               // 0x8(0x8)
};


// Size 0x58
class EventEmblemUnlockedNotification: public None
{
public:
	struct FName                                                 CompanyName;                                       // 0x0(0x8)
	struct FName                                                 FriendlyName;                                      // 0x8(0x8)
	Struct FText                                                 EmblemName;                                        // 0x10(0x38)
	Struct FString                                               EmblemUrl;                                         // 0x48(0x10)
};


// Size 0x1
class CrewCostumeEntitlementHelpers: public None
{
public:
};


// Size 0x1
class ConsumeEntitlementRequestFailedTelemetryEvent: public None
{
public:
	byte                                                         Reason;                                            // 0x0(0x1)
};


// Size 0x48
class PlayerAttackTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               DamageType;                                        // 0x10(0x10)
	Struct FString                                               WeaponType;                                        // 0x20(0x10)
	Struct Vector                                                TargetPos;                                         // 0x30(0xc)
	float                                                        DamageDealt;                                       // 0x3c(0x4)
	bool                                                         Success;                                           // 0x40(0x1)
};


// Size 0xc
class EventPlayerConfigSetBooleanValue: public None
{
public:
	struct FName                                                 KeyName;                                           // 0x0(0x8)
	bool                                                         Value;                                             // 0x8(0x1)
};


// Size 0x50
class EventPlayerConfigRequestAllConfigsResponse: public None
{
public:
};


// Size 0x1
class EventPlayerConfigRequestAllConfigs: public None
{
public:
};


// Size 0x8
class EventPlayerTeleportComplete: public None
{
public:
	Class AthenaPlayerState*                                     PlayerState;                                       // 0x0(0x8)
};


// Size 0x8
class EventPlayerWaitingToSpawnComplete: public None
{
public:
	Class AthenaPlayerState*                                     PlayerState;                                       // 0x0(0x8)
};


// Size 0x1
class EventPlayerTriggeredTrapPressurePlate: public None
{
public:
};


// Size 0x8
class EventPlayerFellDistance: public None
{
public:
	float                                                        FallDamage;                                        // 0x0(0x4)
	float                                                        LandingSpeed;                                      // 0x4(0x4)
};


// Size 0x1
class EventPlayerLeftRainZone: public None
{
public:
};


// Size 0x1
class EventPlayerEnteredRainZone: public None
{
public:
};


// Size 0x1
class EventWielderHasExternalLightSource: public None
{
public:
	bool                                                         bOn;                                               // 0x0(0x1)
};


// Size 0x18
class EventPlayerTreasureMapSet: public None
{
public:
	TArray<Struct MapTexture>                                    Marks;                                             // 0x8(0x10)
};


// Size 0x10
class EventPlayerUseItemEnd: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class Actor*                                                 UsedItem;                                          // 0x8(0x8)
};


// Size 0x10
class EventPlayerUseItemStart: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class Actor*                                                 UsedItem;                                          // 0x8(0x8)
};


// Size 0x8
class EventPlayerItemEquip: public None
{
public:
	Class Actor*                                                 EquippedItem;                                      // 0x0(0x8)
};


// Size 0x4
class EventPlayerDrinkingConsumed: public None
{
public:
};


// Size 0x1
class EventPlayerDrinkingEnd: public None
{
public:
};


// Size 0x1
class EventPlayerDrinkingStart: public None
{
public:
};


// Size 0x1
class EventPlayerResetCrewOccurred: public None
{
public:
};


// Size 0x1
class EventPlayerCureAllAilments: public None
{
public:
};


// Size 0x8
class EventPlayerRepairObjectEnd: public None
{
public:
};


// Size 0x8
class EventPlayerRepairObjectCompleted: public None
{
public:
};


// Size 0x8
class EventPlayerRepairObjectStart: public None
{
public:
};


// Size 0x1
class EventPlayerSeamlessTravelStarted: public None
{
public:
};


// Size 0x8
class EventPlayerLoggedOut: public None
{
public:
	Class OnlineAthenaPlayerController*                          OnlineAthenaPlayerController;                      // 0x0(0x8)
};


// Size 0x1
class EventInitialPawnPossessed: public None
{
public:
};


// Size 0x1
class EventPlayerPawnLeavingGame: public None
{
public:
};


// Size 0x18
class EventPlayerLoggedIn: public None
{
public:
	Class OnlineAthenaPlayerController*                          OnlineAthenaPlayerController;                      // 0x0(0x8)
};


// Size 0x1
class EventPlayerProvidedInput: public None
{
public:
};


// Size 0x18
class PlayerActionBaseTelemetryFragmentInput: public None
{
public:
	Struct FString                                               ActionName;                                        // 0x8(0x10)
};


// Size 0x20
class PlayerActionBaseTelemetryFragment: public None
{
public:
	Struct FString                                               ObjectId;                                          // 0x0(0x10)
	Struct FString                                               ActionName;                                        // 0x10(0x10)
};


// Size 0x10
class PlayerItemUsageTelemetryFragmentInput: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
};


// Size 0x20
class PlayerItemUsageBaseTelemetryFragment: public None
{
public:
	Struct FString                                               InputID;                                           // 0x0(0x10)
	Struct FString                                               ItemId;                                            // 0x10(0x10)
};


// Size 0x38
class TeleportStageCompletedTelemetryEvent: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	float                                                        Duration;                                          // 0x10(0x4)
	Struct FString                                               Reason;                                            // 0x18(0x10)
	Struct FString                                               CompletedStage;                                    // 0x28(0x10)
};


// Size 0x18
class PlayerStatusEffectDeactivatedTelemetryEvent: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	struct FName                                                 StatusName;                                        // 0x10(0x8)
};


// Size 0x18
class PlayerStatusEffectActivatedTelemetryEvent: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	struct FName                                                 StatusName;                                        // 0x10(0x8)
};


// Size 0x4
class PlayerLeftGhostShipTelemetryEvent: public None
{
public:
	int                                                          LifetimeInSeconds;                                 // 0x0(0x4)
};


// Size 0x20
class PlayerChangedShipLoadoutTelemetryEvent: public None
{
public:
	Struct FString                                               ShipEquippedItemType;                              // 0x0(0x10)
	Struct FString                                               ShipEquippedItemName;                              // 0x10(0x10)
};


// Size 0x20
class PlayerChangedLoadoutTelemetryEvent: public None
{
public:
	Struct FString                                               EquippedItemType;                                  // 0x0(0x10)
	Struct FString                                               EquippedItemName;                                  // 0x10(0x10)
};


// Size 0x18
class PlayerHeroStatUpdatedTelemetryEvent: public None
{
public:
	Struct FString                                               Result;                                            // 0x0(0x10)
};


// Size 0x8
class ClientPlayerEmblemUnlockTelemetryEvent: public None
{
public:
	struct FName                                                 EmblemName;                                        // 0x0(0x8)
};


// Size 0x18
class PlayerEmoteTelemetryEvent: public None
{
public:
	Struct FString                                               EmoteName;                                         // 0x0(0x10)
};


// Size 0x1
class PlayerControllerTypeTelemetryEvent: public None
{
public:
	byte                                                         ControllerType;                                    // 0x0(0x1)
};


// Size 0x10
class PlayerEncounterEndTelemetryEvent: public None
{
public:
	Struct Guid                                                  EncounterId;                                       // 0x0(0x10)
};


// Size 0x28
class PlayerEncounterStartTelemetryEvent: public None
{
public:
	Struct Guid                                                  EncounterId;                                       // 0x0(0x10)
	Struct FString                                               EncounteredObjectId;                               // 0x10(0x10)
	byte                                                         EncounterType;                                     // 0x20(0x1)
	byte                                                         ShipRegion;                                        // 0x21(0x1)
	float                                                        EncounterDistance;                                 // 0x24(0x4)
};


// Size 0x20
class MoveSpeedValidationFailedTelemetryEvent: public None
{
public:
	Struct FString                                               Item;                                              // 0x0(0x10)
	int                                                          SpeedId;                                           // 0x10(0x4)
	int                                                          DurationMS;                                        // 0x14(0x4)
	int                                                          IgnoredRequestCount;                               // 0x18(0x4)
};


// Size 0x10
class PlayerTamperedTelemetryEvent: public None
{
public:
};


// Size 0x10
class PlayerSetFootLocationTelemetryEvent: public None
{
public:
	Struct FString                                               LocationName;                                      // 0x0(0x10)
};


// Size 0x10
class PlayerDepartLocationTelemetryEvent: public None
{
public:
	Struct FString                                               LocationName;                                      // 0x0(0x10)
};


// Size 0x10
class PlayerArriveLocationTelemetryEvent: public None
{
public:
	Struct FString                                               LocationName;                                      // 0x0(0x10)
};


// Size 0x30
class PlayerCheatTelemetryEvent: public None
{
public:
	Struct FString                                               CheatSource;                                       // 0x0(0x10)
	Struct FString                                               CheatFunction;                                     // 0x10(0x10)
	Struct FString                                               CheatArguments;                                    // 0x20(0x10)
};


// Size 0x30
class PlayerDeathTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               Location;                                          // 0x10(0x10)
	int                                                          LifetimeInSeconds;                                 // 0x20(0x4)
	double                                                       SecondsSinceSpawned;                               // 0x28(0x8)
};


// Size 0x30
class PlayerHealthChangeTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	float                                                        CurrentHealth;                                     // 0x10(0x4)
	float                                                        PreviousHealth;                                    // 0x14(0x4)
	float                                                        HealthDelta;                                       // 0x18(0x4)
	byte                                                         Reason;                                            // 0x1c(0x1)
	double                                                       SecondsSinceSpawned;                               // 0x28(0x8)
};


// Size 0x48
class PlayerHeartbeatTelemetryEvent: public None
{
public:
	Struct FString                                               MovementMode;                                      // 0x0(0x10)
	Struct FString                                               LocationOnShip;                                    // 0x10(0x10)
	float                                                        CurrentHealth;                                     // 0x20(0x4)
	int                                                          ActiveTime;                                        // 0x24(0x4)
	int                                                          IdleTime;                                          // 0x28(0x4)
	int                                                          CurrentStateTime;                                  // 0x2c(0x4)
	int                                                          MoveTimeStampReset;                                // 0x30(0x4)
	int                                                          MoveTimeStampExpired;                              // 0x34(0x4)
	int                                                          MoveDiscrepancyCorrections;                        // 0x38(0x4)
	int                                                          AverageNetActorConsiderCount;                      // 0x3c(0x4)
	int                                                          AverageNetActorEvaluatedCount;                     // 0x40(0x4)
	int                                                          AverageNetActorDormantCount;                       // 0x44(0x4)
};


// Size 0x1
class PlayerItemUsageEndTelemetryEvent: public None
{
public:
};


// Size 0x1
class PlayerItemUsageStartTelemetryEvent: public None
{
public:
};


// Size 0x10
class PlayerItemEquipTelemetryEvent: public None
{
public:
	Struct FString                                               ItemId;                                            // 0x0(0x10)
};


// Size 0x20
class PlayerActionCannonTelemetryEvent: public None
{
public:
	Struct FString                                               ProjectileId;                                      // 0x0(0x10)
	Struct Guid                                                  AttackId;                                          // 0x10(0x10)
};


// Size 0x1
class PlayerActionTelemetryEvent: public None
{
public:
};


// Size 0x1
class PlayerObjectUsageEndTelemetryEvent: public None
{
public:
};


// Size 0x1
class PlayerObjectUsageStartTelemetryEvent: public None
{
public:
};


// Size 0x40
class PlayerSpawnTelemetryEvent: public None
{
public:
	Struct FString                                               SpawnPointName;                                    // 0x0(0x10)
	Struct FString                                               IslandName;                                        // 0x10(0x10)
	byte                                                         SpawnType;                                         // 0x24(0x1)
	double                                                       SpawnDuration;                                     // 0x28(0x8)
	int                                                          PlayersCrewSize;                                   // 0x30(0x4)
	double                                                       DistanceToClosestOpponent;                         // 0x38(0x8)
};


// Size 0x10
class PlayerGameEndTelemetryEvent: public None
{
public:
	bool                                                         IsMigration;                                       // 0xc(0x1)
	bool                                                         HadSTTEnabled;                                     // 0xd(0x1)
	bool                                                         HadTTSEnabled;                                     // 0xe(0x1)
	bool                                                         HadTranslationEnabled;                             // 0xf(0x1)
};


// Size 0x14
class PlayerGameStartTelemetryEvent: public None
{
public:
	Struct Guid                                                  TitleSession;                                      // 0x0(0x10)
	bool                                                         IsMigration;                                       // 0x10(0x1)
};


// Size 0x28
class EmissaryLeaderboardScoreUpdatedNetworkEvent: public None
{
public:
	struct FName                                                 EmissaryAffiliation;                               // 0x10(0x8)
};


// Size 0x70
class ClientNPCDialogBeganTelemetryEvent: public None
{
public:
	Struct Guid                                                  NPCInteractionSessionId;                           // 0x0(0x10)
	Struct FString                                               NPCDialogTreeDataAsset;                            // 0x10(0x10)
	Struct FString                                               NPCDialogOverrideType;                             // 0x20(0x10)
	Struct FString                                               NPCDialogConditionalContext;                       // 0x30(0x10)
	Struct FString                                               NPCDialogConditionalContextData;                   // 0x40(0x10)
	Struct FString                                               NPCInteracted;                                     // 0x50(0x10)
	Struct FString                                               NPCInteractedType;                                 // 0x60(0x10)
};


// Size 0x20
class NPCDialogExecuteOptionOnServerRpc: public None
{
public:
	Class NPCDialogComponent*                                    DialogComponent;                                   // 0x10(0x8)
	int                                                          CurrentDialog;                                     // 0x18(0x4)
	int                                                          CurrentOption;                                     // 0x1c(0x4)
};


// Size 0x10
class ClientNPCDialogOptionUsedTelemetryEvent: public None
{
public:
	Struct FString                                               DialogOptionName;                                  // 0x0(0x10)
};


// Size 0x38
class ReplacementDialogue: public None
{
public:
	Struct FText                                                 ReplacementText;                                   // 0x0(0x38)
};


// Size 0x18
class PioneerObjectiveCompleteNetworkEvent: public None
{
public:
	bool                                                         Granted;                                           // 0x10(0x1)
};


// Size 0xf8
class PirateProfile: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct PirateDescription                                     Description;                                       // 0x78(0x80)
};


// Size 0x1
class PlayerInfoRequest: public None
{
public:
};


// Size 0x70
class PlayerInfoResponse: public None
{
public:
	Struct FText                                                 GamerTag;                                          // 0x0(0x38)
	Struct FText                                                 Title;                                             // 0x38(0x38)
};


// Size 0x10
class PlayerManagerServiceUninitialisedEvent: public None
{
public:
};


// Size 0x10
class PlayerManagerServiceInitialisedEvent: public None
{
public:
};


// Size 0x8
class RewardRequestSucceededNotificationEvent: public None
{
public:
};


// Size 0x1
class RewardRequestFailedNotificationEvent: public None
{
public:
};


// Size 0x60
class RewardGrantedNetworkEvent: public None
{
public:
	Struct FString                                               RewardId;                                          // 0x10(0x10)
	byte                                                         CurrencyId;                                        // 0x20(0x1)
	Struct FString                                               CompanyId;                                         // 0x28(0x10)
	TArray<Str >                                                 Entitlements;                                      // 0x40(0x10)
	Struct FString                                               DeferralReason;                                    // 0x50(0x10)
};


// Size 0x28
class XPGrantedNetworkEvent: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x1c(0x8)
};


// Size 0x30
class CurrencyGrantedNetworkEvent: public None
{
public:
	byte                                                         CurrencyId;                                        // 0x10(0x1)
	struct FName                                                 EmissaryAffiliation;                               // 0x18(0x8)
	float                                                        EmissaryMultiplier;                                // 0x20(0x4)
	struct FName                                                 RewardId;                                          // 0x24(0x8)
};


// Size 0x1
class EventApplySingleStickSettings: public None
{
public:
	byte                                                         UseSingleStick;                                    // 0x0(0x1)
};


// Size 0x1c
class PlayerStatsDispatcherSettings: public None
{
public:
	float                                                        DispatchFrequencySeconds;                          // 0x0(0x4)
	float                                                        PollIntervalSeconds;                               // 0x8(0x4)
	float                                                        BatchWindowMilliseconds;                           // 0xc(0x4)
};


// Size 0x80
class StatSingleMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0xd0
class StatBatchMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	byte                                                         PlayMode;                                          // 0x78(0x1)
	byte                                                         PlayModeVariant;                                   // 0x79(0x1)
};


// Size 0x10
class StatBatchMessageValues: public None
{
public:
	TArray<UInt64 >                                              Values;                                            // 0x0(0x10)
};


// Size 0x18
class EnableObjectLeakDetectionTelemetryRpc: public None
{
public:
	float                                                        Interval;                                          // 0x10(0x4)
};


// Size 0x18
class ObjectLeakDetectionDataReceivedEvent: public None
{
public:
	Class NetConnection*                                         Connection;                                        // 0x0(0x8)
	TArray<Byte Connection>                                      DataBlob;                                          // 0x8(0x10)
};


// Size 0x20
class ObjectLeakDetectionTelemetryRpc: public None
{
public:
	TArray<Byte RequestWalletBalanceUpdateHUDEvent>              DataBlob;                                          // 0x10(0x10)
};


// Size 0x1
class RequestWalletBalanceUpdateHUDEvent: public None
{
public:
};


// Size 0x10
class UpdateWalletBalanceHUDEvent: public None
{
public:
	TArray<Struct HUDWalletBalance>                              Balances;                                          // 0x0(0x10)
};


// Size 0x48
class HUDWalletBalance: public None
{
public:
	byte                                                         CurrencyId;                                        // 0x0(0x1)
	Struct FText                                                 DisplayBalance;                                    // 0x8(0x38)
};


// Size 0x10
class ArmoryChestEquipItemEvent: public None
{
public:
	class                                                        ItemDesc;                                          // 0x0(0x8)
	int                                                          SlotIndex;                                         // 0x8(0x4)
};


// Size 0x1
class PossessionsChestClosedEvent: public None
{
public:
	byte                                                         PossessionsChestType;                              // 0x0(0x1)
};


// Size 0x1
class RequestClosePossessionsChestEvent: public None
{
public:
	byte                                                         PossessionsChestType;                              // 0x0(0x1)
};


// Size 0x18
class RequestOpenPossessionsChestEvent: public None
{
public:
	byte                                                         PossessionsChestType;                              // 0x0(0x1)
	TArray<Str >                                                 Categories;                                        // 0x8(0x10)
};


// Size 0x1
class ClothingChestCloseRequestEvent: public None
{
public:
	Struct RequestClosePossessionsChestEvent                     ClosePossessionsChestEvent;                        // 0x0(0x1)
};


// Size 0x20
class ClothingChestOpenRequestEvent: public None
{
public:
	Struct RequestOpenPossessionsChestEvent                      OpenPossessionsChestEvent;                         // 0x0(0x18)
	Class Actor*                                                 Interaction;                                       // 0x18(0x8)
};


// Size 0x8
class ClothingChestUnequipEmoteEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
};


// Size 0x10
class ClothingChestEquipEmoteEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
	int                                                          Index;                                             // 0x8(0x4)
};


// Size 0x20
class ClothingChestChangeClothingEvent: public None
{
public:
	TArray<Class ClothingChestUnequipClothingEvent>              Adds;                                              // 0x0(0x10)
	TArray<Class Adds>                                           Removes;                                           // 0x10(0x10)
};


// Size 0x8
class ClothingChestUnequipClothingEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
};


// Size 0x8
class ClothingChestEquipClothingEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
};


// Size 0x8
class EquipmentChestEquipItemEvent: public None
{
public:
	class                                                        ItemDesc;                                          // 0x0(0x8)
};


// Size 0x1
class PetChestNamePetFeedbackEvent: public None
{
public:
	bool                                                         bSuccess;                                          // 0x0(0x1)
};


// Size 0x10
class PetChestNamePetEvent: public None
{
public:
	Struct FString                                               PetName;                                           // 0x0(0x10)
};


// Size 0x1
class PetChestCloseRequestEvent: public None
{
public:
	Struct RequestClosePossessionsChestEvent                     ClosePossessionsChestEvent;                        // 0x0(0x1)
};


// Size 0x20
class PetChestOpenRequestEvent: public None
{
public:
	Struct RequestOpenPossessionsChestEvent                      OpenPossessionsChestEvent;                         // 0x0(0x18)
	Class Actor*                                                 Interaction;                                       // 0x18(0x8)
};


// Size 0x10
class PetChestRemovePetEvent: public None
{
public:
	TArray<Class PetChestUnequipPetEvent>                        Removes;                                           // 0x0(0x10)
};


// Size 0x8
class PetChestUnequipPetEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
};


// Size 0x8
class PetChestEquipPetEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
};


// Size 0x30
class PetChestSuccessfulNameChangeTelemetryEvent: public None
{
public:
	Struct FString                                               PetName;                                           // 0x0(0x10)
	Struct FString                                               PetCategory;                                       // 0x10(0x10)
	Struct FString                                               PetVariantName;                                    // 0x20(0x10)
};


// Size 0x1
class ShipCustomizationChestLoadoutUpdatedEvent: public None
{
public:
};


// Size 0x8
class ShipCustomizationChestUnequipShipCustomizationEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
};


// Size 0x8
class ShipCustomizationChestEquipShipCustomizationEvent: public None
{
public:
	class                                                        Desc;                                              // 0x0(0x8)
};


// Size 0x1
class ShipFlagCustomizationChestEndedInteractionEvent: public None
{
public:
};


// Size 0x20
class PuzzleVaultKeyUsedTelemetryEvent: public None
{
public:
	Struct Guid                                                  VaultId;                                           // 0x0(0x10)
	struct FName                                                 VaultType;                                         // 0x10(0x8)
	struct FName                                                 VaultKeyUsed;                                      // 0x18(0x8)
};


// Size 0x18
class PuzzleVaultStartedTelemetryEvent: public None
{
public:
	Struct Guid                                                  VaultId;                                           // 0x0(0x10)
	struct FName                                                 VaultType;                                         // 0x10(0x8)
};


// Size 0x18
class PuzzleVaultCompletedTelemetryEvent: public None
{
public:
	Struct Guid                                                  VaultId;                                           // 0x0(0x10)
	struct FName                                                 VaultType;                                         // 0x10(0x8)
};


// Size 0x20
class CannonProjectileHitShipWithStatusEffectsEvent: public None
{
public:
	Class Ship*                                                  Ship;                                              // 0x0(0x8)
	TArray<Struct Ship>                                          Statuses;                                          // 0x8(0x10)
	Class Actor*                                                 Instigator;                                        // 0x18(0x8)
};


// Size 0x1
class EventCrewShipManifestEntitlementComponentUpdated: public None
{
public:
};


// Size 0x18
class EventCrewShipManifestCurrentActiveTaleUpdated: public None
{
public:
};


// Size 0x40
class EventEmissaryFlagMeshChanged: public None
{
public:
	Struct EmissaryFlagMeshReferences                            EmissaryFlagMeshReferences;                        // 0x0(0x20)
	Struct StringAssetReference                                  EmissaryFlotsamSpawnDataAsset;                     // 0x20(0x10)
	Struct StringAssetReference                                  EmissaryFlagTextureReference;                      // 0x30(0x10)
};


// Size 0x1
class EventSailFullyRaised: public None
{
public:
};


// Size 0x1
class EventSailFullyLowered: public None
{
public:
};


// Size 0x1
class EventSailLostPerfectWind: public None
{
public:
};


// Size 0x1
class EventSailGotPerfectWind: public None
{
public:
};


// Size 0x1
class ShipOnFireEndTelemetryEvent: public None
{
public:
};


// Size 0x1
class ShipOnFireBeginTelemetryEvent: public None
{
public:
};


// Size 0x1
class ShipMastCollapseStateTelemetryEvent: public None
{
public:
	bool                                                         MastCollapsedState;                                // 0x0(0x1)
};


// Size 0x38
class ShipUndoRepairTelemetryEvent: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
	Struct Vector                                                UndoRepairLocation;                                // 0x10(0xc)
	Struct FString                                               ShipPart;                                          // 0x20(0x10)
	int                                                          DamageLevel;                                       // 0x30(0x4)
	float                                                        UndoRepairPercentage;                              // 0x34(0x4)
};


// Size 0x38
class ShipRepairTelemetryEvent: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
	Struct Vector                                                DamageLocation;                                    // 0x10(0xc)
	Struct FString                                               RepairedShipPart;                                  // 0x20(0x10)
	int                                                          DamageLevel;                                       // 0x30(0x4)
	float                                                        RepairPercentage;                                  // 0x34(0x4)
};


// Size 0x48
class ShipDamagedTelemetryEvent: public None
{
public:
	Struct FString                                               DamageType;                                        // 0x0(0x10)
	Struct Vector                                                DamageLocation;                                    // 0x10(0xc)
	Struct FString                                               DamagedShipPart;                                   // 0x20(0x10)
	int                                                          DamageLevel;                                       // 0x30(0x4)
	Struct Guid                                                  AttackId;                                          // 0x34(0x10)
};


// Size 0x10
class ShipHeartbeatTelemetryEvent: public None
{
public:
	float                                                        Speed;                                             // 0x0(0x4)
	float                                                        Yaw;                                               // 0x4(0x4)
	float                                                        InternalWaterLevel;                                // 0x8(0x4)
	int                                                          FireCellsActive;                                   // 0xc(0x4)
};


// Size 0x1
class ShipDestroyedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ShipSpawnedTelemetryEvent: public None
{
public:
};


// Size 0x10
class EventStatueThreatWasDefeated: public None
{
public:
	Class Actor*                                                 Instigator;                                        // 0x0(0x8)
	Class Actor*                                                 DirectInstigator;                                  // 0x8(0x8)
};


// Size 0x58
class EventStatueThreatWasDamaged: public None
{
public:
	Struct ImpactDamageEvent                                     ImpactDamageEvent;                                 // 0x0(0x58)
};


// Size 0x30
class MermaidStatueDespawnedTelemetryEvent: public None
{
public:
	Struct FString                                               MermaidStatueId;                                   // 0x0(0x10)
	Struct FString                                               MermaidStatueDespawnReason;                        // 0x10(0x10)
	TArray<Struct MermaidStatueDespawnReason>                    Crews;                                             // 0x20(0x10)
};


// Size 0x30
class MermaidStatueSpawnTelemetryEvent: public None
{
public:
	Struct FString                                               LocationName;                                      // 0x0(0x10)
	Struct FString                                               MermaidStatueId;                                   // 0x10(0x10)
	Struct FString                                               MermaidStatueClass;                                // 0x20(0x10)
};


// Size 0x10
class EventStormLightningImpact: public None
{
public:
	Struct Vector                                                ImpactPoint;                                       // 0x0(0xc)
	float                                                        TimeTillImpact;                                    // 0xc(0x4)
};


// Size 0x10
class NewTitlesAvailableToBuyNotificationEvent: public None
{
public:
};


// Size 0x8
class TutorialEventControlledObjectDestroyed: public None
{
public:
	Class TutorialEventControlledObject*                         TutorialEventControlledObject;                     // 0x0(0x8)
};


// Size 0x8
class TutorialEventControlledObjectCreated: public None
{
public:
	Class TutorialEventControlledObject*                         TutorialEventControlledObject;                     // 0x0(0x8)
};


// Size 0x1
class OnHandleBackwardMovementStopped: public None
{
public:
};


// Size 0x1
class OnHandleBackwardMovementStarted: public None
{
public:
};


// Size 0x1
class OnHandleForwardMovementStopped: public None
{
public:
};


// Size 0x1
class OnHandleForwardMovementStarted: public None
{
public:
};


// Size 0x20
class PlayerBucketEmptyTelemetryEvent: public None
{
public:
	Struct Guid                                                  ScoopID;                                           // 0x0(0x10)
	Struct FString                                               EmptyBucketTo;                                     // 0x10(0x10)
};


// Size 0x38
class PlayerBucketScoopTelemetryEvent: public None
{
public:
	Struct FString                                               BucketContents;                                    // 0x0(0x10)
	Struct Guid                                                  ScoopID;                                           // 0x10(0x10)
	Struct FString                                               ScoopSource;                                       // 0x20(0x10)
	float                                                        ScoopVolume;                                       // 0x30(0x4)
};


// Size 0x20
class RequestBucketStateRpc: public None
{
public:
	byte                                                         RequestedBucketState;                              // 0x18(0x1)
};


// Size 0x18
class UseItemOnServerRpc: public None
{
public:
	Class WieldableItem*                                         Item;                                              // 0x10(0x8)
};


// Size 0x18
class RejectGrenadeThrowRpc: public None
{
public:
	Class Grenade*                                               Grenade;                                           // 0x10(0x8)
};


// Size 0x58
class ThrowGrenadeMulticastRpc: public None
{
public:
	Class Actor*                                                 Wielder;                                           // 0x10(0x8)
	Class Grenade*                                               Grenade;                                           // 0x18(0x8)
	Struct Vector                                                ServerThrowLocation;                               // 0x20(0xc)
	Struct Vector                                                LaunchVelocity;                                    // 0x2c(0xc)
	class                                                        ThrownProjectileType;                              // 0x38(0x8)
	float                                                        FirstPersonScaleModifier;                          // 0x40(0x4)
	float                                                        ProjectileGravityScale;                            // 0x44(0x4)
	Struct Vector                                                FirstPersonThrowOffset;                            // 0x48(0xc)
	bool                                                         UseVisualThrowOffset;                              // 0x54(0x1)
};


// Size 0x38
class ThrowGrenadeRpc: public None
{
public:
	Struct Vector                                                RelativeLocalThrowLocation;                        // 0x10(0xc)
	Struct Rotator                                               LocalLaunchAngle;                                  // 0x1c(0xc)
	float                                                        LocalLaunchSpeed;                                  // 0x28(0x4)
	Struct Vector                                                LocalWielderVelocity;                              // 0x2c(0xc)
};


// Size 0xe0
class FireLaunchableShotRpc: public None
{
public:
	Struct FireRequest                                           Request;                                           // 0x20(0x90)
	Class LaunchableShotActionComponent*                         Action;                                            // 0xb0(0x8)
	Struct Vector                                                LocalWielderVelocity;                              // 0xb8(0xc)
};


// Size 0x60
class SpawnLaunchableShotRpc: public None
{
public:
	Struct Transform                                             SpawnTransform;                                    // 0x20(0x30)
	Class LaunchableShotActionComponent*                         Action;                                            // 0x50(0x8)
};


// Size 0x18
class EventLanternIsLightOnStateChanged: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
	class                                                        InputID;                                           // 0x8(0x8)
	bool                                                         IsLightOn;                                         // 0x10(0x1)
};


// Size 0xb0
class FireWeaponOnServerRpc: public None
{
public:
	Struct FireRequest                                           FireRequest;                                       // 0x20(0x90)
};


// Size 0xc
class EventProjectileWeaponFire: public None
{
public:
};


// Size 0x1
class EventProjectileWeaponReload: public None
{
public:
};


// Size 0x30
class ProjectileWeaponFireAimClampTelemetryEvent: public None
{
public:
	Struct Guid                                                  TelemetryAttackId;                                 // 0x0(0x10)
	Struct FString                                               DamagerType;                                       // 0x10(0x10)
	float                                                        RequesterLatencyMs;                                // 0x20(0x4)
	Struct Vector                                                ClampedByAmmount;                                  // 0x24(0xc)
};


// Size 0x30
class ProjectileWeaponFireStatsTelemetryEvent: public None
{
public:
	float                                                        AimPositionDifference;                             // 0x0(0x4)
	float                                                        AimPositionCorrection;                             // 0x4(0x4)
	float                                                        LatencyMs;                                         // 0x8(0x4)
	Struct Guid                                                  AttackId;                                          // 0xc(0x10)
	Struct FString                                               WeaponType;                                        // 0x20(0x10)
};


// Size 0x50
class ProjectileWeaponFiredTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct Guid                                                  TelemetryAttackId;                                 // 0x10(0x10)
	Struct FString                                               DamagerType;                                       // 0x20(0x10)
	Struct FString                                               WeaponName;                                        // 0x30(0x10)
	bool                                                         WasLoaded;                                         // 0x40(0x1)
	bool                                                         WasAiming;                                         // 0x41(0x1)
	float                                                        RequesterLatencyMs;                                // 0x44(0x4)
	float                                                        RequesterTimeOffset;                               // 0x48(0x4)
};


// Size 0x1c
class WeaponProjectileMaxIterationsTelemetryEvent: public None
{
public:
	int                                                          MaxSimulationIterations;                           // 0x0(0x4)
	float                                                        MinTickTimeSecs;                                   // 0x4(0x4)
	float                                                        MaxSimulationTimeStep;                             // 0x8(0x4)
	Struct Guid                                                  TelemetryAttackId;                                 // 0xc(0x10)
};


// Size 0x20
class ShovelTelemetryEvent: public None
{
public:
	Struct FString                                               DigType;                                           // 0x0(0x10)
	Struct FString                                               Terrain;                                           // 0x10(0x10)
};


// Size 0x10
class WorldSnapshot: public None
{
public:
	struct FName                                                 Version;                                           // 0x8(0x8)
};


// Size 0x30
class ItemStateData: public None
{
public:
	Struct FString                                               ItemName;                                          // 0x20(0x10)
};


// Size 0x20
class ActorStateData: public None
{
public:
	int                                                          Id;                                                // 0x0(0x4)
	Struct Vector                                                Position;                                          // 0x4(0xc)
	Struct FString                                               IslandName;                                        // 0x10(0x10)
};


// Size 0x30
class VaultStateData: public None
{
public:
	bool                                                         IsActive;                                          // 0x20(0x1)
	Struct Vector                                                RewardPlinthPosition;                              // 0x24(0xc)
};


// Size 0x20
class SkeletonThroneStateData: public None
{
public:
};


// Size 0x28
class BeaconStateData: public None
{
public:
	byte                                                         FlameOfFate;                                       // 0x20(0x1)
	bool                                                         IsLit;                                             // 0x21(0x1)
};


// Size 0x28
class VolcanoActorStateData: public None
{
public:
	byte                                                         State;                                             // 0x20(0x1)
};


// Size 0x28
class GeyserStateData: public None
{
public:
	byte                                                         State;                                             // 0x20(0x1)
};


// Size 0x30
class ShipwreckStateData: public None
{
public:
	Struct FString                                               Name;                                              // 0x20(0x10)
};


// Size 0x20
class AmmoChestStateData: public None
{
public:
};


// Size 0x30
class NPCStateData: public None
{
public:
	Struct FString                                               Name;                                              // 0x20(0x10)
};


// Size 0x28
class CampfireStateData: public None
{
public:
	bool                                                         IsBuilt;                                           // 0x20(0x1)
	bool                                                         IsOnFire;                                          // 0x21(0x1)
	bool                                                         IsPartiallyBurned;                                 // 0x22(0x1)
};


// Size 0x70
class StorageContainerStateData: public None
{
public:
};


// Size 0x30
class CannonStateData: public None
{
public:
	Struct FString                                               LoadedItemId;                                      // 0x20(0x10)
};


// Size 0x48
class CrewSnapshotV1: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct FString                                               ShipSize;                                          // 0x10(0x10)
	int                                                          ShipId;                                            // 0x20(0x4)
	TArray<Struct PlayerStateSnapshot>                           Players;                                           // 0x28(0x10)
	TArray<Struct CollectedBootySnapshot>                        Booty;                                             // 0x38(0x10)
};


// Size 0x28
class CollectedBootySnapshot: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	byte                                                         BootyType;                                         // 0x10(0x1)
	Struct FString                                               Rarity;                                            // 0x18(0x10)
};


// Size 0x48
class PlayerStateSnapshot: public None
{
public:
	int                                                          PlayerStateId;                                     // 0x0(0x4)
	Struct Guid                                                  PlayerGameId;                                      // 0x4(0x10)
	Struct FString                                               GamerTag;                                          // 0x18(0x10)
	Struct PlayerCharacterSnapshot                               Character;                                         // 0x28(0x14)
};


// Size 0x14
class PlayerCharacterSnapshot: public None
{
public:
	int                                                          Id;                                                // 0x0(0x4)
	Struct Vector                                                Position;                                          // 0x4(0xc)
	float                                                        Health;                                            // 0x10(0x4)
};


// Size 0x8
class ShipTrackerSnapshot: public None
{
public:
	int                                                          ShipId;                                            // 0x0(0x4)
	byte                                                         Region;                                            // 0x4(0x1)
};


// Size 0x68
class ShipSnapshotV1: public None
{
public:
	int                                                          Id;                                                // 0x0(0x4)
	Struct Vector                                                Position;                                          // 0x4(0xc)
	Struct WheelSnapshot                                         Wheel;                                             // 0x10(0x8)
	Struct CapstanSnapshot                                       Capstan;                                           // 0x18(0x4)
	TArray<Struct MastSnapshot>                                  Masts;                                             // 0x20(0x10)
	TArray<Struct Masts>                                         Cannons;                                           // 0x30(0x10)
	TArray<Struct Cannons>                                       StorageContainers;                                 // 0x40(0x10)
};


// Size 0xc
class MastSnapshot: public None
{
public:
	float                                                        Length;                                            // 0x0(0x4)
	float                                                        Angle;                                             // 0x4(0x4)
	float                                                        Damage;                                            // 0x8(0x4)
};


// Size 0x4
class CapstanSnapshot: public None
{
public:
	float                                                        Raised;                                            // 0x0(0x4)
};


// Size 0x8
class WheelSnapshot: public None
{
public:
	float                                                        Angle;                                             // 0x0(0x4)
	float                                                        MaxAngle;                                          // 0x4(0x4)
};


// Size 0x20
class IslandSnapshotV1: public None
{
public:
	int                                                          Id;                                                // 0x0(0x4)
	Struct Vector                                                Position;                                          // 0x4(0xc)
	Struct FString                                               Name;                                              // 0x10(0x10)
};


// Size 0x10
class RowboatSnapshotV1: public None
{
public:
	int                                                          Id;                                                // 0x0(0x4)
	Struct Vector                                                Position;                                          // 0x4(0xc)
};


// Size 0x20
class WorldEventSnapshotV1: public None
{
public:
	Struct FString                                               EventID;                                           // 0x0(0x10)
	Struct FString                                               Status;                                            // 0x10(0x10)
};


// Size 0x60
class WorldSnapshotV2: public None
{
public:
	TArray<Struct RemoveStatusesData>                            Crews;                                             // 0x10(0x10)
	TArray<Struct Crews>                                         Ships;                                             // 0x20(0x10)
	TArray<Struct Ships>                                         Islands;                                           // 0x30(0x10)
	TArray<Struct Islands>                                       Rowboats;                                          // 0x40(0x10)
	TArray<Struct Rowboats>                                      WorldEvents;                                       // 0x50(0x10)
};


// Size 0x18
class RemoveStatusesData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	TArray<Str >                                                 Statuses;                                          // 0x8(0x10)
};


// Size 0x18
class AddStatusesData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	TArray<Str >                                                 Statuses;                                          // 0x8(0x10)
};


// Size 0x18
class GetItemsDataResponse: public None
{
public:
	TArray<Struct GetItemsInRadiusData>                          Data;                                              // 0x8(0x10)
};


// Size 0x1
class GetActorsInRadiusDataResponse: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
};


// Size 0x20
class GetItemsInRadiusData: public None
{
public:
	Struct FString                                               ItemName;                                          // 0x10(0x10)
};


// Size 0xc
class GetActorsInRadiusData: public None
{
public:
	Struct Vector2D                                              Position;                                          // 0x0(0x8)
	float                                                        Radius;                                            // 0x8(0x4)
};


// Size 0x18
class GetVaultsDataResponse: public None
{
public:
	TArray<Struct GetSkeletonThronesDataResponse>                Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetSkeletonThronesDataResponse: public None
{
public:
	TArray<Struct GetBeaconsDataResponse>                        Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetBeaconsDataResponse: public None
{
public:
	TArray<Struct GetGeysersDataResponse>                        Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetGeysersDataResponse: public None
{
public:
	TArray<Struct GetVolcanoesDataResponse>                      Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetVolcanoesDataResponse: public None
{
public:
	TArray<Struct GetShipwrecksDataResponse>                     Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetShipwrecksDataResponse: public None
{
public:
	TArray<Struct GetAmmoChestsDataResponse>                     Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetAmmoChestsDataResponse: public None
{
public:
	TArray<Struct GetNPCsDataResponse>                           Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetNPCsDataResponse: public None
{
public:
	TArray<Struct GetCampfiresDataResponse>                      Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetCampfiresDataResponse: public None
{
public:
	TArray<Struct GetStorageContainersDataResponse>              Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetStorageContainersDataResponse: public None
{
public:
	TArray<Struct GetCannonsDataResponse>                        Data;                                              // 0x8(0x10)
};


// Size 0x18
class GetCannonsDataResponse: public None
{
public:
	TArray<Struct RemoveAITypeSpawnRuleData>                     Data;                                              // 0x8(0x10)
};


// Size 0x20
class RemoveAITypeSpawnRuleData: public None
{
public:
	Struct FString                                               TypeName;                                          // 0x0(0x10)
	Struct FString                                               Region;                                            // 0x10(0x10)
};


// Size 0x28
class AddAITypeSpawnRuleData: public None
{
public:
	Struct FString                                               TypeName;                                          // 0x0(0x10)
	Struct FString                                               Region;                                            // 0x10(0x10)
	bool                                                         Enabled;                                           // 0x20(0x1)
};


// Size 0x1
class ResetDefaultWindData: public None
{
public:
};


// Size 0x4
class SetWindMagnitudeData: public None
{
public:
	float                                                        Magnitude;                                         // 0x0(0x4)
};


// Size 0x4
class SetWindAngleData: public None
{
public:
	float                                                        Angle;                                             // 0x0(0x4)
};


// Size 0x4
class RemoveFogBankData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
};


// Size 0x8
class CreateFogBankDataResponse: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
	int                                                          FogBankId;                                         // 0x4(0x4)
};


// Size 0x1c
class CreateFogBankData: public None
{
public:
	Struct Vector2D                                              Position;                                          // 0x0(0x8)
	float                                                        Density;                                           // 0x8(0x4)
	Struct Vector                                                SizeInKm;                                          // 0xc(0xc)
	float                                                        FadeDuration;                                      // 0x18(0x4)
};


// Size 0x1
class EnableDefaultFogBanksData: public None
{
public:
	bool                                                         Enable;                                            // 0x0(0x1)
};


// Size 0x10
class SetStormPropertiesData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	Struct Vector2D                                              StormCentre;                                       // 0x4(0x8)
	float                                                        StormStrength;                                     // 0xc(0x4)
};


// Size 0x4
class RemoveStormData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
};


// Size 0x8
class CreateStormDataResponse: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
	int                                                          StormId;                                           // 0x4(0x4)
};


// Size 0xc
class CreateStormData: public None
{
public:
	Struct Vector2D                                              StormCentre;                                       // 0x0(0x8)
	float                                                        StormStrength;                                     // 0x8(0x4)
};


// Size 0x1
class EnableDefaultStormsData: public None
{
public:
	bool                                                         Enable;                                            // 0x0(0x1)
};


// Size 0x30
class EntityEventSubscriptionData: public None
{
public:
	TArray<Struct EventEntityIdsSwitch>                          EventsSwitched;                                    // 0x0(0x10)
	TArray<Struct FName>                                         EventsWithAllIdsEnabled;                           // 0x10(0x10)
	TArray<Struct FName>                                         EventsWithAllIdsDisabled;                          // 0x20(0x10)
};


// Size 0x28
class EventEntityIdsSwitch: public None
{
public:
	struct FName                                                 Event;                                             // 0x0(0x8)
	TArray<Int >                                                 EnableEntityIds;                                   // 0x8(0x10)
	TArray<Int >                                                 DisableEntityIds;                                  // 0x18(0x10)
};


// Size 0x20
class GlobalEventSubscriptionData: public None
{
public:
	TArray<Name None>                                            EnableEvents;                                      // 0x0(0x10)
	TArray<Struct FName>                                         DisableEvents;                                     // 0x10(0x10)
};


// Size 0x4
class EmptyWaterFromVaultData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
};


// Size 0x8
class AddWaterToVaultData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	float                                                        WaterAmount;                                       // 0x4(0x4)
};


// Size 0x8
class SetVaultDoorStateData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	byte                                                         DoorType;                                          // 0x4(0x1)
	byte                                                         DoorState;                                         // 0x5(0x1)
};


// Size 0x58
class CustomModeInfoModel: public None
{
public:
	Struct FString                                               GameModeId;                                        // 0x0(0x10)
	Struct FString                                               UserId;                                            // 0x10(0x10)
	Struct FString                                               Name;                                              // 0x20(0x10)
	Struct FString                                               Description;                                       // 0x30(0x10)
	Struct FString                                               ControllerAddress;                                 // 0x40(0x10)
	bool                                                         ProgressionEnabled;                                // 0x50(0x1)
};


// Size 0x20
class CommandData: public None
{
public:
	Struct FString                                               Command;                                           // 0x0(0x10)
	Struct FString                                               Params;                                            // 0x10(0x10)
};


// Size 0x18
class EnableSkeletonSpawnerData: public None
{
public:
	bool                                                         Skeletons;                                         // 0x0(0x1)
	bool                                                         CannonSkeletons;                                   // 0x1(0x1)
	bool                                                         SkeletonCaptains;                                  // 0x2(0x1)
	bool                                                         AncientSkeletons;                                  // 0x3(0x1)
	Struct FString                                               IslandName;                                        // 0x8(0x10)
};


// Size 0xc
class SetTriggerDetectingEntityData: public None
{
public:
	int                                                          EntityNetId;                                       // 0x8(0x4)
};


// Size 0x8
class SetTriggerDetectingData: public None
{
public:
	int                                                          NetId;                                             // 0x0(0x4)
	bool                                                         Detecting;                                         // 0x4(0x1)
};


// Size 0x4
class RemoveTriggerData: public None
{
public:
	int                                                          TriggerId;                                         // 0x0(0x4)
};


// Size 0x10
class CreateSphereTriggerData: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	float                                                        Radius;                                            // 0xc(0x4)
};


// Size 0x18
class CreateBoxTriggerData: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	Struct Vector                                                Extent;                                            // 0xc(0xc)
};


// Size 0x60
class RemoveWorldEventData: public None
{
public:
	Struct FString                                               EventType;                                         // 0x0(0x10)
};


// Size 0x60
class AddWorldEventData: public None
{
public:
	Struct FString                                               EventType;                                         // 0x0(0x10)
};


// Size 0x1
class EnableDefaultGameEventSchedulerData: public None
{
public:
	bool                                                         Enabled;                                           // 0x0(0x1)
};


// Size 0x4
class AdvanceGameEventSchedulerData: public None
{
public:
	int                                                          Seconds;                                           // 0x0(0x4)
};


// Size 0x28
class LoadShipCannonData: public None
{
public:
	Struct FString                                               ItemName;                                          // 0x0(0x10)
	Struct Guid                                                  CrewId;                                            // 0x10(0x10)
	int                                                          CannonIndex;                                       // 0x20(0x4)
};


// Size 0x28
class AddItemToShipData: public None
{
public:
	Struct FString                                               ItemName;                                          // 0x0(0x10)
	Struct Guid                                                  CrewId;                                            // 0x10(0x10)
	int                                                          Quantity;                                          // 0x20(0x4)
};


// Size 0x10
class ReplenishShipData: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x4
class SetTimeData: public None
{
public:
	int                                                          Hours;                                             // 0x0(0x4)
};


// Size 0x20
class SetVulnerabilityData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	Struct FString                                               DamagerType;                                       // 0x8(0x10)
	float                                                        DamageMultipler;                                   // 0x18(0x4)
};


// Size 0x8
class SetHealthChangeLockData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	byte                                                         Reason;                                            // 0x4(0x1)
	bool                                                         EnableLock;                                        // 0x5(0x1)
};


// Size 0x10
class ApplyDamageData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	float                                                        Damage;                                            // 0x4(0x4)
	int                                                          InstigatorId;                                      // 0x8(0x4)
	byte                                                         Reason;                                            // 0xc(0x1)
};


// Size 0x4
class SetToMaxHealthData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
};


// Size 0xc
class SetHealthData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	float                                                        Health;                                            // 0x4(0x4)
	byte                                                         Reason;                                            // 0x8(0x1)
};


// Size 0x8
class SetMaxHealthData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	float                                                        MaxHealth;                                         // 0x4(0x4)
};


// Size 0x8
class SetInvincibilityData: public None
{
public:
	int                                                          ActorId;                                           // 0x0(0x4)
	bool                                                         Enable;                                            // 0x4(0x1)
};


// Size 0x8
class UpdateSnapshotVersionData: public None
{
public:
	struct FName                                                 Version;                                           // 0x0(0x8)
};


// Size 0x60
class WorldSnapshotV1: public None
{
public:
	TArray<Struct CustomTriggerOverlap>                          Crews;                                             // 0x10(0x10)
	TArray<Struct Crews>                                         Ships;                                             // 0x20(0x10)
	TArray<Struct Ships>                                         Islands;                                           // 0x30(0x10)
	TArray<Struct Islands>                                       Rowboats;                                          // 0x40(0x10)
	TArray<Struct Rowboats>                                      WorldEvents;                                       // 0x50(0x10)
};


// Size 0x30
class CustomTriggerOverlap: public None
{
public:
	int                                                          TriggerNetId;                                      // 0x28(0x4)
	int                                                          OtherNetId;                                        // 0x2c(0x4)
};


// Size 0x28
class GameServerWebSocketEntityEvent: public None
{
public:
	Struct FString                                               EventID;                                           // 0x0(0x10)
	Struct FString                                               ServerId;                                          // 0x10(0x10)
	Struct DateTime                                              ServerTimeUTC;                                     // 0x20(0x8)
};


// Size 0x20
class EventOverMemoryThreshold: public None
{
public:
	Struct FString                                               EventID;                                           // 0x0(0x10)
	Struct DateTime                                              ServerTimeUTC;                                     // 0x10(0x8)
	int                                                          MemoryUsedPercentage;                              // 0x18(0x4)
};


// Size 0x1
class AllianceJoinStatusChangedEvent: public None
{
public:
};


// Size 0x18
class AllianceStatusChangedNetworkEvent: public None
{
public:
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x20
class AllianceDisbandedTelemetryEvent: public None
{
public:
	Struct Guid                                                  AllianceId;                                        // 0x0(0x10)
	Struct Guid                                                  LeavingCrewSessionId;                              // 0x10(0x10)
};


// Size 0x20
class CrewLeftAllianceTelemetryEvent: public None
{
public:
	Struct Guid                                                  AllianceId;                                        // 0x0(0x10)
	Struct Guid                                                  LeavingCrewSessionId;                              // 0x10(0x10)
};


// Size 0x30
class CrewJoinedAllianceTelemetryEvent: public None
{
public:
	Struct Guid                                                  AllianceId;                                        // 0x0(0x10)
	Struct Guid                                                  OfferingCrewSessionId;                             // 0x10(0x10)
	Struct Guid                                                  AcceptingCrewSessionId;                            // 0x20(0x10)
};


// Size 0x30
class AllianceCreatedTelemetryEvent: public None
{
public:
	Struct Guid                                                  AllianceId;                                        // 0x0(0x10)
	Struct Guid                                                  OfferingCrewSessionId;                             // 0x10(0x10)
	Struct Guid                                                  AcceptingCrewSessionId;                            // 0x20(0x10)
};


// Size 0x10
class PlayerReleasedFromBrig: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x0(0x10)
};


// Size 0x10
class PlayerBanishedToBrig: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x0(0x10)
};


// Size 0x28
class PlayerBrigStatusChanged: public None
{
public:
	Struct NetActorPtr                                           NetPlayerState;                                    // 0x10(0x14)
	bool                                                         IsFree;                                            // 0x24(0x1)
};


// Size 0x1
class CrewServiceCrewsReplicatedEvent: public None
{
public:
};


// Size 0x1
class EventQueriedPlayerSpawnLocation: public None
{
public:
	byte                                                         CrewSpawnState;                                    // 0x0(0x1)
};


// Size 0x18
class FailedToFindPlayerSpawnLocationTelemetryEvent: public None
{
public:
	byte                                                         SpawnState;                                        // 0x0(0x1)
	bool                                                         IsInBrig;                                          // 0x1(0x1)
	bool                                                         IsInHideout;                                       // 0x2(0x1)
	bool                                                         IsFirstTimePlaying;                                // 0x3(0x1)
	bool                                                         IsOnContestServer;                                 // 0x4(0x1)
	bool                                                         IsInContestTavern;                                 // 0x5(0x1)
	TArray<Struct FailedToFindPlayerSpawnLocationPotentialLocation> PotentialLocations;                                // 0x8(0x10)
};


// Size 0x20
class FailedToFindPlayerSpawnLocationPotentialLocation: public None
{
public:
	Struct Vector                                                Position;                                          // 0x0(0xc)
	Struct FString                                               Description;                                       // 0x10(0x10)
};


// Size 0x38
class HideoutRevealedEvent: public None
{
public:
	Struct FText                                                 HideoutName;                                       // 0x0(0x38)
};


// Size 0x1
class PlayerExitedHideoutEvent: public None
{
public:
};


// Size 0x1
class PlayerEnteredHideoutEvent: public None
{
public:
};


// Size 0x48
class EventBuriableAdded: public None
{
public:
	Struct BuriedBuriable                                        BuryData;                                          // 0x0(0x48)
};


// Size 0x78
class PlayerDeemedInactiveTelemetryEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0x18
class LoadoutRepairFailedTelemetryEvent: public None
{
public:
	TArray<Int None>                                             CarouselSeeds;                                     // 0x8(0x10)
};


// Size 0x4
class LoadoutRepairTelemetryEventBase: public None
{
public:
	int                                                          PirateSeed;                                        // 0x0(0x4)
};


// Size 0x10
class LoadoutRepairSuccessTelemetryEvent: public None
{
public:
	int                                                          CarouselSeed;                                      // 0x4(0x4)
	int                                                          NumAppliedDescs;                                   // 0x8(0x4)
	int                                                          NumMissingCategories;                              // 0xc(0x4)
};


// Size 0x30
class RepairLoadoutFromSeedRpc: public None
{
public:
	TArray<Int None>                                             Seeds;                                             // 0x10(0x10)
	TArray<Struct Seeds>                                         CategoriesToApply;                                 // 0x20(0x10)
};


// Size 0x10
class CaptureChatMessagesRequestModel: public None
{
public:
	TArray<Struct CaptureChatMessage>                            ChatMessages;                                      // 0x0(0x10)
};


// Size 0x58
class CaptureChatMessage: public None
{
public:
	Struct Guid                                                  SessionId;                                         // 0x0(0x10)
	Struct FString                                               XUID;                                              // 0x10(0x10)
	Struct DateTime                                              TimeUtc;                                           // 0x20(0x8)
	Struct FString                                               RawMessage;                                        // 0x28(0x10)
	Struct FString                                               CensoredMessage;                                   // 0x38(0x10)
	Struct Vector                                                PlayerLocation;                                    // 0x48(0xc)
};


// Size 0x30
class ProjectileServiceUpdateRewindFailedEvent: public None
{
public:
	TArray<Struct ReapersMarkLevelChanged>                       AffectedProjectilesTelemetryAttackIds;             // 0x0(0x10)
	Struct FString                                               DamagerType;                                       // 0x10(0x10)
	float                                                        AttackGroupStartTime;                              // 0x20(0x4)
	float                                                        AttackGroupEndTime;                                // 0x24(0x4)
	int                                                          Count;                                             // 0x28(0x4)
};


// Size 0x14
class ReapersMarkLevelChanged: public None
{
public:
	int                                                          NewLevel;                                          // 0x0(0x4)
	Struct Guid                                                  AssociatedCrew;                                    // 0x4(0x10)
};


// Size 0x1
class ReapersMarkResetVoyageProgress: public None
{
public:
};


// Size 0x1
class ReapersMarkUpdateVoyageProgress: public None
{
public:
};


// Size 0x10
class RevealerDisabledEvent: public None
{
public:
};


// Size 0x10
class RevealerEnabledEvent: public None
{
public:
};


// Size 0x10
class RevealableComponentDespawnedEvent: public None
{
public:
};


// Size 0x10
class RevealableComponentSpawnedEvent: public None
{
public:
};


// Size 0x10
class DisplayShutdownTimerMessageClient: public None
{
public:
	Struct Timespan                                              TimeTillShutdown;                                  // 0x0(0x8)
	Struct Timespan                                              DisplayPeriod;                                     // 0x8(0x8)
};


// Size 0x8
class ServerStartingForcedShutdownEvent: public None
{
public:
	Struct Timespan                                              TimeTillShutdown;                                  // 0x0(0x8)
};


// Size 0x18
class ClientScheduleShutdownNetworkEvent: public None
{
public:
};


// Size 0x18
class ScheduledShutdownSettingsClient: public None
{
public:
	float                                                        StartScreenFadeWithTimeRemainingSeconds;           // 0x0(0x4)
	float                                                        ScreenFadeTimeSeconds;                             // 0x4(0x4)
	float                                                        QuitGameTimeRemainingSeconds;                      // 0x8(0x4)
	float                                                        UpperDisplayPeriodTimeSeconds;                     // 0xc(0x4)
	float                                                        LowerDisplayPeriodTimeSeconds;                     // 0x10(0x4)
	float                                                        SwitchToLowerTimePeriodWithTimeRemainingSeconds;   // 0x14(0x4)
};


// Size 0x80
class ServerPerformanceHeartbeatTelemetryEvent: public None
{
public:
	float                                                        FrameMSAverage;                                    // 0x0(0x4)
	float                                                        FrameMSMin;                                        // 0x4(0x4)
	float                                                        FrameMSMax;                                        // 0x8(0x4)
	float                                                        FPSAverage;                                        // 0xc(0x4)
	float                                                        FPSMin;                                            // 0x10(0x4)
	float                                                        FPSMax;                                            // 0x14(0x4)
	int                                                          NumOfPlayers;                                      // 0x78(0x4)
	int                                                          NumOfAI;                                           // 0x7c(0x4)
};


// Size 0x48
class DisplayServiceStatusNotificationClient: public None
{
public:
	Struct FText                                                 NotificationText;                                  // 0x8(0x38)
	Struct Timespan                                              Duration;                                          // 0x40(0x8)
};


// Size 0x8
class PlayerEnteredFortVicinityEvent: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x1
class FortOfTheDamnedCompletedEvent: public None
{
public:
};


// Size 0x1
class FortCompletedEvent: public None
{
public:
};


// Size 0x1
class FortStartedEvent: public None
{
public:
};


// Size 0x10
class ShipExitedStormEvent: public None
{
public:
};


// Size 0x10
class ShipEnteredStormEvent: public None
{
public:
};


// Size 0x10
class PlayerExitedStormEvent: public None
{
public:
};


// Size 0x10
class PlayerEnteredStormEvent: public None
{
public:
};


// Size 0x10
class InitRHIDiagnosticTelemetryEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
};


// Size 0xa0
class AimSensitivityRuntimeData: public None
{
public:
};


// Size 0x10
class AimSensitivityRuntimeDataEntry: public None
{
public:
	Struct AimSensitivitySettingParams                           SettingParams;                                     // 0x0(0xc)
	float                                                        CurrentAimSensitivity;                             // 0xc(0x4)
};


// Size 0xc
class AimSensitivitySettingParams: public None
{
public:
	Struct FloatInterval                                         Range;                                             // 0x0(0x8)
	float                                                        Default;                                           // 0x8(0x4)
};


// Size 0x18
class TriggerPlaceableReactionEvent: public None
{
public:
	Class PlaceableReaction*                                     PlaceableReaction;                                 // 0x10(0x8)
};


// Size 0x1
class EventLocalPlayerExitedIslandDanger: public None
{
public:
};


// Size 0x1
class EventLocalPlayerEnteredIslandDanger: public None
{
public:
};


// Size 0x20
class MatineeActorSetPositionNetworkEvent: public None
{
public:
	Class MatineeActor*                                          MatineeActor;                                      // 0x10(0x8)
	float                                                        InterpolationPosition;                             // 0x18(0x4)
	bool                                                         Jump;                                              // 0x1c(0x1)
};


// Size 0x18
class MatineeActorStopNetworkEvent: public None
{
public:
	Class MatineeActor*                                          MatineeActor;                                      // 0x10(0x8)
};


// Size 0x18
class MatineeActorPlayNetworkEvent: public None
{
public:
	Class MatineeActor*                                          MatineeActor;                                      // 0x10(0x8)
};


// Size 0x30
class PlayerRadialChatTelemetryEvent: public None
{
public:
	Struct Guid                                                  RadialChatID;                                      // 0x0(0x10)
	Struct FString                                               RadialChatString;                                  // 0x10(0x10)
	Struct FString                                               RadialContextType;                                 // 0x20(0x10)
};


// Size 0x30
class AchievementRemoteServiceLogTelemetry: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
	Struct FString                                               PirateId;                                          // 0x10(0x10)
	TArray<Str >                                                 LogLines;                                          // 0x20(0x10)
};


// Size 0x10
class AchievementUnlockedEvent: public None
{
public:
	Struct FString                                               AchievementId;                                     // 0x0(0x10)
};


// Size 0x88
class AchievementUnlockedMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct FString                                               AchievementId;                                     // 0x78(0x10)
};


// Size 0x10
class AchievementUpdatedTelemetry: public None
{
public:
	TArray<Struct AchievementUpdatedEvent>                       UpdatedAchievements;                               // 0x0(0x10)
};


// Size 0x28
class AeolusAchievementsUpdatedFromServicesTelemetry: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
	Struct FString                                               PirateId;                                          // 0x10(0x10)
	bool                                                         Success;                                           // 0x20(0x1)
	int                                                          AchievementsUpdatedCount;                          // 0x24(0x4)
};


// Size 0x28
class AeolusIncorrectAchievementsRemovedTelemetry: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
	Struct FString                                               PirateId;                                          // 0x10(0x10)
	bool                                                         Success;                                           // 0x20(0x1)
	int                                                          AchievementsRemovedCount;                          // 0x24(0x4)
};


// Size 0x10
class RemoteAchievementCompletionModel: public None
{
public:
	TArray<Str None>                                             AchievementIds;                                    // 0x0(0x10)
};


// Size 0x50
class RemoteAchievementProgressModel: public None
{
public:
};


// Size 0x30
class Catalog: public None
{
public:
	Struct FString                                               DisplayName;                                       // 0x0(0x10)
	Struct FString                                               DisplayDescription;                                // 0x10(0x10)
	TArray<Struct DisplayDescription>                            Offers;                                            // 0x20(0x10)
};


// Size 0x90
class CommerceRemoteServicePurchaseRequest: public None
{
public:
	Struct FString                                               StoreId;                                           // 0x0(0x10)
	Struct Guid                                                  OfferId;                                           // 0x10(0x10)
	byte                                                         CurrencyId;                                        // 0x20(0x1)
	Struct FString                                               TransactionId;                                     // 0x28(0x10)
	Struct PiratePurchaseClaims                                  PiratePurchaseClaims;                              // 0x38(0x50)
	byte                                                         PlayMode;                                          // 0x88(0x1)
	byte                                                         PlayModeVariant;                                   // 0x89(0x1)
};


// Size 0x50
class PiratePurchaseClaims: public None
{
public:
};


// Size 0x18
class CompanyLevelClaim: public None
{
public:
	Struct FString                                               Sig;                                               // 0x8(0x10)
};


// Size 0x118
class GetFilteredCatalogRequestModel: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0x78
class EntitlementsUpdatedMessage: public None
{
public:
	Struct PirateIdentity                                        Identity;                                          // 0x0(0x78)
};


// Size 0x10
class PurchaseOfferResponse: public None
{
public:
	TArray<Str None>                                             PurchasedItems;                                    // 0x0(0x10)
};


// Size 0x14
class PurchaseRequestFailedResponse: public None
{
public:
	Struct Guid                                                  TransactionId;                                     // 0x0(0x10)
	byte                                                         Reason;                                            // 0x10(0x1)
};


// Size 0x20
class PurchaseRequestSuccessResponse: public None
{
public:
	Struct Guid                                                  TransactionId;                                     // 0x0(0x10)
	TArray<Str >                                                 PurchasedItems;                                    // 0x10(0x10)
};


// Size 0x10
class RemoteEntitlementsModel: public None
{
public:
	TArray<Struct EntitlementInfo>                               Entitlements;                                      // 0x0(0x10)
};


// Size 0x30
class EntitlementInfo: public None
{
public:
	Struct FString                                               InstanceId;                                        // 0x0(0x10)
	Struct FString                                               CatalogItemId;                                     // 0x10(0x10)
	Struct FString                                               Signature;                                         // 0x20(0x10)
};


// Size 0x10
class WalletLastKnownBalanceUpdatedEvent: public None
{
public:
	Struct WalletBalance                                         Balance;                                           // 0x0(0x10)
};


// Size 0x78
class WalletUpdatedMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0x50
class CommerceRemoteServiceWalletBalanceResponse: public None
{
public:
};


// Size 0x10
class RequestCompanyProgressFailedEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
};


// Size 0x20
class RequestCompanyProgressSucceededEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	Struct CompanyReputationProgressModelCollection              PirateCompanyProgress;                             // 0x10(0x10)
};


// Size 0x88
class RequestCompanyProgressEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct Guid                                                  RequestID;                                         // 0x78(0x10)
};


// Size 0x28
class CompanyProgressUpdateEvent: public None
{
public:
	Struct CompanyReputationProgressModel                        CompanyProgress;                                   // 0x0(0x28)
};


// Size 0xb0
class CompanyProgressUpdateMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct CompanyReputationProgressModel                        CompanyProgress;                                   // 0x78(0x28)
	Struct Guid                                                  RequestID;                                         // 0xa0(0x10)
};


// Size 0x18
class ConfigurationRemoteServiceRequestConfigurationResultEvent: public None
{
public:
};


// Size 0x28
class ConfigurationRemoteServiceRequestConfigurationEvent: public None
{
public:
};


// Size 0x20
class RemoteConfigurationProviderUpdateConfigurationEvent: public None
{
public:
};


// Size 0x4
class RuntimeFeatureConfigurationAvailableEvent: public None
{
public:
};


// Size 0x30
class EmblemRemoteProgress: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	struct FName                                                 CompanyId;                                         // 0x10(0x8)
	bool                                                         IsCompleted;                                       // 0x18(0x1)
	TArray<Struct EmblemRemoteCriteriaProgress>                  CriteriaProgress;                                  // 0x20(0x10)
};


// Size 0x14
class EmblemRemoteCriteriaProgress: public None
{
public:
	struct FName                                                 StatName;                                          // 0x0(0x8)
	bool                                                         IsCompleted;                                       // 0x10(0x1)
};


// Size 0x2c0
class EmblemDefinitionModel: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	struct FName                                                 FriendlyName;                                      // 0x10(0x8)
	Struct FText                                                 CampaignDescription;                               // 0x18(0x38)
	struct FName                                                 CampaignId;                                        // 0x50(0x8)
	Struct StringAssetReference                                  CampaignImagePath;                                 // 0x58(0x10)
	Struct FText                                                 CampaignTitle;                                     // 0x68(0x38)
	Struct FString                                               CompanyId;                                         // 0xa0(0x10)
	class                                                        Company;                                           // 0xb0(0x8)
	Struct FText                                                 MoreInfoFirst;                                     // 0xb8(0x38)
	Struct FText                                                 MoreInfoSecond;                                    // 0xf0(0x38)
	Struct FText                                                 MoreInfoFirstLocked;                               // 0x128(0x38)
	Struct FText                                                 MoreInfoSecondLocked;                              // 0x160(0x38)
	Struct FString                                               RewardId;                                          // 0x198(0x10)
	bool                                                         HasActiveDuration;                                 // 0x1a8(0x1)
	bool                                                         MarkAsNew;                                         // 0x1a9(0x1)
	Struct DateTime                                              ActiveFrom;                                        // 0x1b0(0x8)
	Struct DateTime                                              ActiveUntil;                                       // 0x1b8(0x8)
	Struct FString                                               Name;                                              // 0x1c8(0x10)
	Struct EmblemSetDefinition                                   EmblemSet;                                         // 0x1d8(0xe8)
};


// Size 0xe8
class EmblemSetDefinition: public None
{
public:
	Struct FString                                               FriendlyName;                                      // 0x0(0x10)
	Struct FText                                                 Title;                                             // 0x10(0x38)
	Struct FText                                                 Description;                                       // 0x48(0x38)
	Struct FText                                                 CompletedDescription;                              // 0x80(0x38)
	float                                                        ValueArgScalar;                                    // 0xb8(0x4)
	TArray<Struct EmblemRankDefinition>                          Emblems;                                           // 0xc0(0x10)
	Class PopUpMessageDesc*                                      UnlockPopUp;                                       // 0xd0(0x8)
	Class PopUpAudioDesc*                                        UnlockPopUpAudioOverrides;                         // 0xd8(0x8)
	bool                                                         GrantsTitleAfterLastUnlock;                        // 0xe0(0x1)
	bool                                                         Hidden;                                            // 0xe1(0x1)
	bool                                                         HiddenIfNoProgress;                                // 0xe2(0x1)
	bool                                                         NoPopUp;                                           // 0xe3(0x1)
};


// Size 0x50
class EmblemRankDefinition: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct StringAssetReference                                  ImagePath;                                         // 0x10(0x10)
	Struct StringAssetReference                                  LockedImagePath;                                   // 0x20(0x10)
	TArray<Struct EmblemCriteria>                                UnlockCriteria;                                    // 0x30(0x10)
	Struct RewardId                                              RewardId;                                          // 0x40(0x8)
};


// Size 0x18
class EmblemCriteria: public None
{
public:
	Struct PlayerStat                                            PlayerStat;                                        // 0x0(0x4)
	byte                                                         Operator;                                          // 0x10(0x1)
};


// Size 0x1
class EmblemServiceFinishedUpdatingProgressEvent: public None
{
public:
};


// Size 0x10
class RequestEmblemProgressFailedEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
};


// Size 0x20
class RequestEmblemProgressSucceededEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	TArray<Struct EmblemProgress>                                EmblemProgress;                                    // 0x10(0x10)
};


// Size 0x30
class EmblemProgress: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	struct FName                                                 CompanyId;                                         // 0x10(0x8)
	bool                                                         IsCompleted;                                       // 0x18(0x1)
	TArray<Struct EmblemCriteriaProgress>                        CriteriaProgress;                                  // 0x20(0x10)
};


// Size 0x10
class EmblemCriteriaProgress: public None
{
public:
	Struct PlayerStat                                            Stat;                                              // 0x0(0x4)
	bool                                                         IsCompleted;                                       // 0xc(0x1)
};


// Size 0x1
class RequestEmblemDefinitionsFailedEvent: public None
{
public:
};


// Size 0x10
class RequestEmblemDefinitionsSucceededEvent: public None
{
public:
	TArray<class DataAssets*>                                    DataAssets;                                        // 0x0(0x10)
};


// Size 0x88
class RequestEmblemProgressEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct Guid                                                  RequestID;                                         // 0x78(0x10)
};


// Size 0x10
class EmblemUnlockedEvent: public None
{
public:
	Struct Guid                                                  EmblemId;                                          // 0x0(0x10)
};


// Size 0x78
class RequestEmblemProgressMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0x88
class EmblemUnlockedMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct Guid                                                  EmblemId;                                          // 0x78(0x10)
};


// Size 0x30
class EngagementMessageServiceResultEvent: public None
{
public:
};


// Size 0x10
class EvictPlayerMessage: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
};


// Size 0x20
class RemoteLocalizationData: public None
{
public:
	TArray<Struct LocText>                                       LocDictionary;                                     // 0x0(0x10)
	Struct FString                                               Locale;                                            // 0x10(0x10)
};


// Size 0x30
class LocText: public None
{
public:
	Struct FString                                               Namespace;                                         // 0x0(0x10)
	Struct FString                                               Key;                                               // 0x10(0x10)
	Struct FString                                               LocalizedText;                                     // 0x20(0x10)
};


// Size 0x20
class RemoteLocalizationModel: public None
{
public:
	Struct RemoteLocalizationData                                LocalizationData;                                  // 0x0(0x20)
};


// Size 0x30
class ServerMigrationClientFailedTelemetryEvent: public None
{
public:
	Struct Guid                                                  MigrationId;                                       // 0x0(0x10)
	Struct FString                                               Stage;                                             // 0x10(0x10)
	Struct FString                                               Error;                                             // 0x20(0x10)
};


// Size 0x20
class ServerMigrationFailedDevTelemetryEvent: public None
{
public:
	Struct Guid                                                  MigrationId;                                       // 0x0(0x10)
	Struct FString                                               Stage;                                             // 0x10(0x10)
};


// Size 0x30
class ServerMigrationCompletedDevTelemetryEvent: public None
{
public:
	Struct Guid                                                  MigrationId;                                       // 0x0(0x10)
	TArray<Struct ServerMigrationCompletedTelemetryActorData>    ActorDetails;                                      // 0x10(0x10)
	float                                                        TotalTime;                                         // 0x20(0x4)
	int                                                          NumClients;                                        // 0x24(0x4)
	int                                                          NumActorsMigrated;                                 // 0x28(0x4)
	int                                                          ActorSerialisationBytes;                           // 0x2c(0x4)
};


// Size 0x18
class ServerMigrationCompletedTelemetryActorData: public None
{
public:
	Struct FString                                               ActorClass;                                        // 0x0(0x10)
	int                                                          Count;                                             // 0x10(0x4)
};


// Size 0x10
class ServerMigrateToTelemetryEvent: public None
{
public:
	Struct Guid                                                  MigrationId;                                       // 0x0(0x10)
};


// Size 0x10
class ServerMigrateFromTelemetryEvent: public None
{
public:
	Struct Guid                                                  MigrationId;                                       // 0x0(0x10)
};


// Size 0x68
class PeriodObjectiveCompleteMessage: public None
{
public:
	Struct FString                                               PeriodId;                                          // 0x0(0x10)
	Struct DateTime                                              PeriodStartDateTime;                               // 0x10(0x8)
	Struct DateTime                                              PeriodEndDateTime;                                 // 0x18(0x8)
	Struct FString                                               PeriodObjectiveId;                                 // 0x20(0x10)
	Struct FString                                               UserId;                                            // 0x30(0x10)
	TArray<Struct UserId>                                        PlayerGameIds;                                     // 0x40(0x10)
	bool                                                         HasReward;                                         // 0x50(0x1)
	Struct FString                                               RewardId;                                          // 0x58(0x10)
};


// Size 0x40
class PioneerProgressMessage: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
	Struct Guid                                                  PlayerGameId;                                      // 0x10(0x10)
	Struct FString                                               ObjectiveKey;                                      // 0x20(0x10)
	Struct DateTime                                              DateTimeStampUtc;                                  // 0x38(0x8)
};


// Size 0x38
class RetrieveAllPiratesRequestSuccessEvent: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	TArray<Struct UserId>                                        PirateProfiles;                                    // 0x18(0x10)
	Struct Guid                                                  RequestID;                                         // 0x28(0x10)
};


// Size 0x28
class RetrieveAllPiratesRequestFailedEvent: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	Struct Guid                                                  RequestID;                                         // 0x18(0x10)
};


// Size 0x28
class RetrieveAllPiratesRequestEvent: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	Struct Guid                                                  RequestID;                                         // 0x18(0x10)
};


// Size 0x120
class CreatePirateRequestSuccessEvent: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	Struct PirateProfile                                         PirateProfile;                                     // 0x18(0xf8)
	Struct Guid                                                  RequestID;                                         // 0x110(0x10)
};


// Size 0x28
class CreatePirateRequestFailedEvent: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	Struct Guid                                                  RequestID;                                         // 0x18(0x10)
};


// Size 0xa8
class CreatePirateRequestEvent: public None
{
public:
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x0(0x18)
	Struct Guid                                                  RequestID;                                         // 0x18(0x10)
	Struct PirateDescription                                     Description;                                       // 0x28(0x80)
};


// Size 0x10
class PirateProfileImageModel: public None
{
public:
	Struct FString                                               Hash;                                              // 0x0(0x10)
};


// Size 0xb0
class PirateReRollRequestModel: public None
{
public:
	Struct PirateInventoryItemModel                              EntitlementItem;                                   // 0x0(0x30)
	Struct PirateDescription                                     PirateDescription;                                 // 0x30(0x80)
};


// Size 0x30
class PirateInventoryItemModel: public None
{
public:
	Struct FString                                               InstanceId;                                        // 0x0(0x10)
	Struct FString                                               CatalogItemId;                                     // 0x10(0x10)
	Struct FString                                               Signature;                                         // 0x20(0x10)
};


// Size 0x10
class PirateRemoteServiceModel: public None
{
public:
	TArray<Struct PlayerActiveInWorldMessage>                    Pirates;                                           // 0x0(0x10)
};


// Size 0x80
class PlayerActiveInWorldMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	byte                                                         PlayMode;                                          // 0x78(0x1)
	byte                                                         PlayModeVariant;                                   // 0x79(0x1)
};


// Size 0x50
class PromptCountersModel: public None
{
public:
};


// Size 0x140
class RemotePreferencesModel: public None
{
public:
	Struct RemotePreferences                                     Preferences;                                       // 0x0(0x140)
};


// Size 0x140
class RemotePreferences: public None
{
public:
	TArray<Struct HttpResponseTelemetryFragmentInput>            ActionBindings;                                    // 0x0(0x10)
	TArray<Struct KeyBindingRemote>                              AxisBindings;                                      // 0x10(0x10)
	Struct Guid                                                  Tag;                                               // 0x20(0x10)
	float                                                        ForceFeedbackIntensity;                            // 0x30(0x4)
	float                                                        MouseSensitivity;                                  // 0x34(0x4)
	float                                                        ControllerSensitivity;                             // 0x38(0x4)
	float                                                        ControllerDeadzone;                                // 0x3c(0x4)
	float                                                        ControllerNonLinearity;                            // 0x40(0x4)
	float                                                        FieldOfView;                                       // 0x44(0x4)
	float                                                        MasterVolume;                                      // 0x48(0x4)
	float                                                        SfxVolume;                                         // 0x4c(0x4)
	float                                                        MusicVolume;                                       // 0x50(0x4)
	float                                                        ShantyVolume;                                      // 0x54(0x4)
	float                                                        CrewChatVolume;                                    // 0x58(0x4)
	float                                                        NonCrewChatVolume;                                 // 0x5c(0x4)
	bool                                                         UsePushToTalk;                                     // 0x60(0x1)
	bool                                                         UseVirtualKeyboard;                                // 0x61(0x1)
	bool                                                         InvertYAxisGamepad;                                // 0x62(0x1)
	bool                                                         InvertYAxisMouse;                                  // 0x63(0x1)
	bool                                                         InvertXAxisGamepad;                                // 0x64(0x1)
	bool                                                         InvertXAxisMouse;                                  // 0x65(0x1)
	bool                                                         UsePlatformForUnattenuatedChat;                    // 0x66(0x1)
	bool                                                         UseProximityChatDirection;                         // 0x67(0x1)
	int                                                          NumberOfLogins;                                    // 0x68(0x4)
	bool                                                         OptedInToMarketing;                                // 0x6c(0x1)
	int                                                          KeyboardLayout;                                    // 0x70(0x4)
	bool                                                         ShowPlayerTalkingIndicator;                        // 0x74(0x1)
	bool                                                         MuteCopyrightedAudio;                              // 0x75(0x1)
	bool                                                         UseAltMapMarkTexture;                              // 0x76(0x1)
	float                                                        MouseSensitivity_Blunderbuss;                      // 0x78(0x4)
	float                                                        ControllerSensitivity_Blunderbuss;                 // 0x7c(0x4)
	float                                                        MouseSensitivity_Flintlock;                        // 0x80(0x4)
	float                                                        ControllerSensitivity_Flintlock;                   // 0x84(0x4)
	float                                                        MouseSensitivity_EyeOfReach;                       // 0x88(0x4)
	float                                                        ControllerSensitivity_EyeOfReach;                  // 0x8c(0x4)
	float                                                        MouseSensitivity_Spyglass;                         // 0x90(0x4)
	float                                                        ControllerSensitivity_Spyglass;                    // 0x94(0x4)
	float                                                        MouseSensitivity_TridentOfDarkTides;               // 0x98(0x4)
	float                                                        ControllerSensitivity_TridentOfDarkTides;          // 0x9c(0x4)
	bool                                                         VariableRefreshRate;                               // 0xa0(0x1)
	float                                                        HighDynamicRangeCalib;                             // 0xa4(0x4)
	int                                                          CVDMode;                                           // 0xa8(0x4)
	float                                                        CVDStrength;                                       // 0xac(0x4)
	float                                                        ColorSaturationScale;                              // 0xb0(0x4)
	float                                                        NotificationScale;                                 // 0xb4(0x4)
	bool                                                         Joinable;                                          // 0xb8(0x1)
	bool                                                         ShowOwnCrewNameplates;                             // 0xb9(0x1)
	bool                                                         ShowOtherCrewNameplates;                           // 0xba(0x1)
	bool                                                         ShowFishNameplates;                                // 0xbb(0x1)
	bool                                                         ShowOwnCrewStatusTags;                             // 0xbc(0x1)
	bool                                                         ScrambleGamertags;                                 // 0xbd(0x1)
	bool                                                         ShowTallTalesOnMapTable;                           // 0xbe(0x1)
	bool                                                         AutoVoteOnProposedVoyage;                          // 0xbf(0x1)
	bool                                                         NotificationsInMenus;                              // 0xc0(0x1)
	bool                                                         ToggleRadialMenu;                                  // 0xc1(0x1)
	bool                                                         StickyRadialItems;                                 // 0xc2(0x1)
	bool                                                         EnableMovementDuringRadial;                        // 0xc3(0x1)
	bool                                                         EnableLookWhenControllingObject;                   // 0xc4(0x1)
	bool                                                         EnableAutoCentreLook;                              // 0xc5(0x1)
	float                                                        AutoCentreLookTimeDelay;                           // 0xc8(0x4)
	float                                                        AutoCentreLookSpeed;                               // 0xcc(0x4)
	bool                                                         HoldActionsDontRequireHold;                        // 0xd0(0x1)
	bool                                                         HoldActionsWithHeldItemsDontRequireHold;           // 0xd1(0x1)
	int                                                          TTSOverride;                                       // 0xd4(0x4)
	int                                                          STTOverride;                                       // 0xd8(0x4)
	int                                                          LGRTMOverride;                                     // 0xdc(0x4)
	bool                                                         TranslateOtherPlayers;                             // 0xe0(0x1)
	bool                                                         ScreenSpaceTooltips;                               // 0xe1(0x1)
	bool                                                         NarrateToasts;                                     // 0xe2(0x1)
	float                                                        ToastHoldDurationMultiplier;                       // 0xe4(0x4)
	bool                                                         NarrateOnHover;                                    // 0xe8(0x1)
	bool                                                         NarrateChangeOnly;                                 // 0xe9(0x1)
	bool                                                         EscapeAsBackAccessibilityOption;                   // 0xea(0x1)
	bool                                                         CrossInputPreference;                              // 0xeb(0x1)
	bool                                                         AdventureCrossInputPreference;                     // 0xec(0x1)
	int                                                          AdventureIslandBanners;                            // 0xf0(0x4)
	int                                                          ArenaIslandBanners;                                // 0xf4(0x4)
	bool                                                         OutpostLocationBanners;                            // 0xf8(0x1)
	int                                                          UseSingleStick;                                    // 0xfc(0x4)
	int                                                          UseSingleStickSettingsApplied;                     // 0x100(0x4)
	int                                                          UseSingleStickCameraToggle;                        // 0x104(0x4)
	bool                                                         DisableControllerOnPC;                             // 0x108(0x1)
	bool                                                         RecenterMouseInMenus;                              // 0x109(0x1)
	bool                                                         AutoFloatInWater;                                  // 0x10a(0x1)
	int                                                          PushToTalkMode;                                    // 0x10c(0x4)
	bool                                                         CircularUINavigation;                              // 0x110(0x1)
	bool                                                         Enable120Hz;                                       // 0x111(0x1)
	bool                                                         AlwaysSkipMapTableAnimation;                       // 0x112(0x1)
	bool                                                         AudioMonoMix;                                      // 0x113(0x1)
	bool                                                         AudioOutputHeadphones;                             // 0x114(0x1)
	bool                                                         DisableSeasonsNotifications;                       // 0x115(0x1)
	bool                                                         DisableInviteNotifications;                        // 0x116(0x1)
	bool                                                         ControlledTextAlignment;                           // 0x117(0x1)
	bool                                                         ControlledLineHeight;                              // 0x118(0x1)
	int                                                          OtherCrewsMuteState;                               // 0x11c(0x4)
	int                                                          NauticalNarrationEnabled;                          // 0x120(0x4)
	bool                                                         FishNameplateNarrationEnabled;                     // 0x124(0x1)
	bool                                                         UseContinuousNarration;                            // 0x125(0x1)
	float                                                        ContinuousNarrationDelay;                          // 0x128(0x4)
	bool                                                         DisableFlashes;                                    // 0x12c(0x1)
	bool                                                         DisableBlur;                                       // 0x12d(0x1)
	bool                                                         DisableScreenShake;                                // 0x12e(0x1)
	bool                                                         DisableOnScreenEffects;                            // 0x12f(0x1)
	bool                                                         EnchantedCompassProximityAnnouncerEnabled;         // 0x130(0x1)
	bool                                                         DisableRats;                                       // 0x131(0x1)
	bool                                                         EnableSqueakyWheel;                                // 0x132(0x1)
	float                                                        SqueakyWheelVolume;                                // 0x134(0x4)
	int                                                          RemoteGameLanguage;                                // 0x138(0x4)
};


// Size 0x20
class KeyBindingRemote: public None
{
public:
	Struct FString                                               BindingName;                                       // 0x0(0x10)
	struct FName                                                 KeyName;                                           // 0x10(0x8)
	byte                                                         ControllerType;                                    // 0x18(0x1)
};


// Size 0x68
class HttpResponseTelemetryFragmentInput: public None
{
public:
	Struct FString                                               Method;                                            // 0x0(0x10)
	Struct FString                                               Endpoint;                                          // 0x10(0x10)
	Struct FString                                               Context;                                           // 0x20(0x10)
	byte                                                         Result;                                            // 0x30(0x1)
	int                                                          StatusCode;                                        // 0x34(0x4)
	int                                                          DurationMS;                                        // 0x38(0x4)
	Struct FString                                               ResponseBody;                                      // 0x40(0x10)
	TArray<Str >                                                 ResponseHeaders;                                   // 0x50(0x10)
	int                                                          Attempts;                                          // 0x60(0x4)
};


// Size 0x68
class HttpResponseTelemetryFragment: public None
{
public:
	Struct FString                                               Method;                                            // 0x0(0x10)
	Struct FString                                               Endpoint;                                          // 0x10(0x10)
	Struct FString                                               Context;                                           // 0x20(0x10)
	byte                                                         Result;                                            // 0x30(0x1)
	int                                                          StatusCode;                                        // 0x34(0x4)
	int                                                          DurationMS;                                        // 0x38(0x4)
	Struct FString                                               ResponseBody;                                      // 0x40(0x10)
	TArray<Str >                                                 ResponseHeaders;                                   // 0x50(0x10)
	int                                                          Attempts;                                          // 0x60(0x4)
};


// Size 0x1
class PlayerClientHttpRequestTelemetryEvent: public None
{
public:
};


// Size 0x1
class PlayerServerHttpRequestTelemetryEvent: public None
{
public:
};


// Size 0x48
class RemoteRewardRequestModel: public None
{
public:
	TArray<Struct RewardGrantedMessage>                          Pirates;                                           // 0x0(0x10)
	Struct Guid                                                  RequestID;                                         // 0x10(0x10)
	Struct FString                                               CrewId;                                            // 0x20(0x10)
	struct FName                                                 RewardId;                                          // 0x30(0x8)
	struct FName                                                 Company;                                           // 0x38(0x8)
	bool                                                         NotifyPlayer;                                      // 0x40(0x1)
};


// Size 0x60
class RewardGrantedMessage: public None
{
public:
	Struct FString                                               RewardId;                                          // 0x0(0x10)
	byte                                                         CurrencyId;                                        // 0x10(0x1)
	Struct FString                                               CompanyId;                                         // 0x18(0x10)
	TArray<Str >                                                 Entitlements;                                      // 0x30(0x10)
	Struct Guid                                                  RequestID;                                         // 0x40(0x10)
	Struct FString                                               DeferralReason;                                    // 0x50(0x10)
};


// Size 0xb0
class CompanyXpGrantedMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	struct FName                                                 CompanyId;                                         // 0x78(0x8)
	Struct Guid                                                  RequestID;                                         // 0x84(0x10)
	Struct Guid                                                  BootyId;                                           // 0x94(0x10)
	struct FName                                                 EmissaryAffiliation;                               // 0xa4(0x8)
};


// Size 0x30
class CurrencyGrantedMessage: public None
{
public:
	byte                                                         Currency;                                          // 0x4(0x1)
	Struct Guid                                                  TransactionId;                                     // 0x8(0x10)
	struct FName                                                 EmissaryAffiliation;                               // 0x18(0x8)
	double                                                       EmissaryMultiplier;                                // 0x28(0x8)
};


// Size 0x38
class RewardRequestFailedMessage: public None
{
public:
	TArray<Struct RewardRequestSucceededMessage>                 PirateIdentities;                                  // 0x0(0x10)
	Struct Guid                                                  RequestID;                                         // 0x10(0x10)
	Struct Guid                                                  CrewId;                                            // 0x20(0x10)
	byte                                                         FailureReason;                                     // 0x30(0x1)
};


// Size 0x10
class RewardRequestSucceededMessage: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
};


// Size 0x90
class PenaltyRequestMessage: public None
{
public:
	Struct PirateIdentity                                        Pirate;                                            // 0x0(0x78)
	Struct Guid                                                  RequestID;                                         // 0x78(0x10)
	struct FName                                                 PenaltyId;                                         // 0x88(0x8)
};


// Size 0xa8
class RewardRequestForPirateMessage: public None
{
public:
	Struct PirateIdentity                                        Pirate;                                            // 0x0(0x78)
	Struct Guid                                                  RequestID;                                         // 0x78(0x10)
	struct FName                                                 RewardId;                                          // 0x88(0x8)
	struct FName                                                 CompanyAffiliation;                                // 0x90(0x8)
	struct FName                                                 EmissaryAffiliation;                               // 0x98(0x8)
	int                                                          EmissaryLevel;                                     // 0xa0(0x4)
	bool                                                         NotifyPlayer;                                      // 0xa4(0x1)
	byte                                                         PlayMode;                                          // 0xa5(0x1)
	byte                                                         PlayModeVariant;                                   // 0xa6(0x1)
};


// Size 0x60
class DeferredRewardRequestMessage: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	struct FName                                                 CompanyAffiliation;                                // 0x10(0x8)
	struct FName                                                 RewardId;                                          // 0x18(0x8)
	Struct FString                                               UserId;                                            // 0x20(0x10)
	Struct FString                                               PirateId;                                          // 0x30(0x10)
	bool                                                         RewardAccount;                                     // 0x40(0x1)
	bool                                                         NotifyPlayer;                                      // 0x41(0x1)
	bool                                                         DontRewardCurrency;                                // 0x42(0x1)
	bool                                                         DontRewardXp;                                      // 0x43(0x1)
	bool                                                         DontRewardSeasonXp;                                // 0x44(0x1)
	Struct FString                                               DeferralReason;                                    // 0x48(0x10)
	double                                                       RewardMultiplier;                                  // 0x58(0x8)
};


// Size 0x90
class AllianceRewardRequestMessage: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	Struct Guid                                                  AllianceId;                                        // 0x10(0x10)
	Struct RewardRequestCrew                                     PrimaryRecipient;                                  // 0x20(0x30)
	TArray<Struct RewardRequestCrew>                             SecondaryRecipients;                               // 0x50(0x10)
	struct FName                                                 RewardId;                                          // 0x60(0x8)
	struct FName                                                 CompanyAffiliation;                                // 0x68(0x8)
	Struct Guid                                                  BootyId;                                           // 0x70(0x10)
	struct FName                                                 NPCName;                                           // 0x80(0x8)
	bool                                                         NotifyPlayer;                                      // 0x88(0x1)
	byte                                                         PlayMode;                                          // 0x89(0x1)
	byte                                                         PlayModeVariant;                                   // 0x8a(0x1)
	bool                                                         DontRewardCurrency;                                // 0x8b(0x1)
	bool                                                         DontRewardXp;                                      // 0x8c(0x1)
	bool                                                         DontRewardSeasonXp;                                // 0x8d(0x1)
};


// Size 0x30
class RewardRequestCrew: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<Struct CrewId>                                        Pirates;                                           // 0x10(0x10)
	struct FName                                                 EmissaryAffiliation;                               // 0x20(0x8)
};


// Size 0x50
class RewardRequestMessage: public None
{
public:
	TArray<Struct AwardGoldMessage>                              Pirates;                                           // 0x0(0x10)
	Struct Guid                                                  RequestID;                                         // 0x10(0x10)
	Struct Guid                                                  CrewId;                                            // 0x20(0x10)
	struct FName                                                 RewardId;                                          // 0x30(0x8)
	struct FName                                                 CompanyAffiliation;                                // 0x38(0x8)
	struct FName                                                 EmissaryAffiliation;                               // 0x40(0x8)
	int                                                          EmissaryLevel;                                     // 0x48(0x4)
	bool                                                         NotifyPlayer;                                      // 0x4c(0x1)
	byte                                                         PlayMode;                                          // 0x4d(0x1)
	byte                                                         PlayModeVariant;                                   // 0x4e(0x1)
};


// Size 0x40
class AwardGoldMessage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<Struct PirateGoldReward>                              Rewards;                                           // 0x10(0x10)
	Struct Guid                                                  TransactionId;                                     // 0x20(0x10)
	Struct FString                                               Source;                                            // 0x30(0x10)
};


// Size 0x80
class PirateGoldReward: public None
{
public:
	Struct PirateIdentity                                        Pirate;                                            // 0x0(0x78)
};


// Size 0x4
class ServerMatchmakingConfigChangedEvent: public None
{
public:
};


// Size 0x10
class ServerMatchmakingCrewLeftEvent: public None
{
public:
};


// Size 0xb8
class ServerMatchmakingPlayerServerAssignmentEvent: public None
{
public:
};


// Size 0x28
class ServerMatchmakingResultEvent: public None
{
public:
};


// Size 0x90
class ServerMatchmakingPlayerCrewAssignmentEvent: public None
{
public:
};


// Size 0xa8
class ServerMatchmakingRequestEvent: public None
{
public:
};


// Size 0x88
class ServerMatchmakingRefusedEvent: public None
{
public:
};


// Size 0x10
class PlayerJoinRefusedMessage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x14
class ServerMatchmakingFailedMessage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	byte                                                         Reason;                                            // 0x10(0x1)
};


// Size 0x38
class PlayerServerAssignmentMessage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct FString                                               ServerAddress;                                     // 0x10(0x10)
	Struct FString                                               ConnectionKey;                                     // 0x20(0x10)
};


// Size 0x40
class PlayerJoinCrewInProgressRequestMessage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x10(0x18)
	Struct FString                                               PirateId;                                          // 0x28(0x10)
	byte                                                         SessionType;                                       // 0x38(0x1)
};


// Size 0x40
class PlayerCrewAssignmentMessage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct UniqueNetIdRepl                                       UserId;                                            // 0x10(0x18)
	Struct FString                                               PirateId;                                          // 0x28(0x10)
	byte                                                         SessionType;                                       // 0x38(0x1)
	int                                                          ServerCrewCapacity;                                // 0x3c(0x4)
};


// Size 0x48
class CrewServerRequestMessage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct FString                                               PirateId;                                          // 0x10(0x10)
	Struct FString                                               BuildId;                                           // 0x20(0x10)
	bool                                                         JoinInProgress;                                    // 0x30(0x1)
	byte                                                         SessionType;                                       // 0x31(0x1)
	TArray<Str >                                                 ServerLocations;                                   // 0x38(0x10)
};


// Size 0x10
class ServiceStatusNotificationCollectionModel: public None
{
public:
	TArray<Struct ServiceStatusNotificationModel>                Notifications;                                     // 0x0(0x10)
};


// Size 0x20
class ServiceStatusNotificationModel: public None
{
public:
	Struct DateTime                                              ActivatedDateTimeUtc;                              // 0x8(0x8)
	Struct Guid                                                  CorrelationId;                                     // 0x10(0x10)
};


// Size 0x1
class StickyNotificationUpdatedMessage: public None
{
public:
};


// Size 0x68
class RewardHandInPopupNetworkEvent: public None
{
public:
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
	Class PopUpAudioDesc*                                        AudioOverride;                                     // 0x18(0x8)
	Struct FText                                                 FormattingText;                                    // 0x20(0x38)
	TArray<Str >                                                 Images;                                            // 0x58(0x10)
};


// Size 0x80
class ServerAllocationSessionCookie: public None
{
public:
	Struct FString                                               ServerLocation;                                    // 0x0(0x10)
	Struct FString                                               PrivateServerId;                                   // 0x10(0x10)
	Struct PlayModeDefiniton                                     PlayModeDefinition;                                // 0x20(0x28)
	int                                                          CrewCountBucket;                                   // 0x48(0x4)
	Struct FString                                               TitleVersion;                                      // 0x50(0x10)
	Struct FString                                               StampId;                                           // 0x68(0x10)
	bool                                                         ProgressionEnabled;                                // 0x78(0x1)
};


// Size 0x70
class ShutdownServerMessage: public None
{
public:
	Struct FString                                               ShutdownReason;                                    // 0x0(0x10)
	bool                                                         ShutdownNonActiveServers;                          // 0x10(0x1)
	Struct ServerShutdownRequestFilter                           ServerShutdownRequestFilter;                       // 0x18(0x58)
};


// Size 0x58
class ServerShutdownRequestFilter: public None
{
public:
	Struct DateTime                                              ShutdownTimeUtc;                                   // 0x0(0x8)
	Struct FString                                               VersionNumber;                                     // 0x8(0x10)
	byte                                                         PlayMode;                                          // 0x18(0x1)
	byte                                                         PlayModeVariant;                                   // 0x19(0x1)
	byte                                                         ServerEnvironmentStatus;                           // 0x1a(0x1)
	Struct FString                                               FeatureHash;                                       // 0x20(0x10)
	Struct FString                                               BuildId;                                           // 0x30(0x10)
	Struct Guid                                                  SessionId;                                         // 0x44(0x10)
};


// Size 0x28
class FeatureConfigTelemetryEvent: public None
{
public:
	Struct FString                                               FeatureConfigHash;                                 // 0x0(0x10)
	Struct JsonObjectWrapper                                     Json;                                              // 0x10(0x18)
};


// Size 0x28
class ServerHeartbeatTelemetryEvent: public None
{
public:
	Struct Timespan                                              ServerUptime;                                      // 0x0(0x8)
	Struct Timespan                                              ServerTimeToLive;                                  // 0x8(0x8)
	Struct FString                                               ServerAddress;                                     // 0x10(0x10)
	bool                                                         ForcingShutdown;                                   // 0x20(0x1)
};


// Size 0x1
class EventScreenSizeInfoRequest: public None
{
public:
};


// Size 0x1c
class EventScreenSizeInfo: public None
{
public:
	int                                                          ScreenWidth;                                       // 0x0(0x4)
	int                                                          ScreenHeight;                                      // 0x4(0x4)
	int                                                          WindowWidth;                                       // 0x8(0x4)
	int                                                          WindowHeight;                                      // 0xc(0x4)
	int                                                          AutoDetectedMaxVerticalResolution;                 // 0x10(0x4)
	int                                                          AutoDetectedMachineSpec;                           // 0x14(0x4)
	bool                                                         IsFullScreen;                                      // 0x18(0x1)
};


// Size 0x1
class AlwaysSkipMapTableAnimationChangeEvent: public None
{
public:
	bool                                                         AlwaysSkipMapTableAnimation;                       // 0x0(0x1)
};


// Size 0x4
class GameNarrationOverrideStateChangeEvent: public None
{
public:
	int                                                          Status;                                            // 0x0(0x4)
};


// Size 0x28
class ClientBootFlowStampSwapResultTelemetryEvent: public None
{
public:
	Struct FString                                               FromStampId;                                       // 0x0(0x10)
	Struct FString                                               ToStampId;                                         // 0x10(0x10)
	bool                                                         StampSwapOccurred;                                 // 0x20(0x1)
};


// Size 0x18
class ClientBootFlowExistingSessionsRetrievedTelemetryEvent: public None
{
public:
	int                                                          OfferedSessionIndex;                               // 0x0(0x4)
	TArray<Struct ClientBootFlowExistingSessionTelemetry>        ExistingSessions;                                  // 0x8(0x10)
};


// Size 0x40
class ClientBootFlowExistingSessionTelemetry: public None
{
public:
	Struct FString                                               SessionId;                                         // 0x0(0x10)
	Struct FString                                               PlayMode;                                          // 0x10(0x10)
	Struct FString                                               SessionType;                                       // 0x20(0x10)
	Struct FString                                               OwningUserId;                                      // 0x30(0x10)
};


// Size 0x20
class InvalidDependencyRootPackageEncounteredTelemetryEvent: public None
{
public:
	Struct FString                                               DependencyRootPackageName;                         // 0x0(0x10)
	Struct FString                                               ImportPackageName;                                 // 0x10(0x10)
};


// Size 0x10
class ServerPlayerBannedTelemetryEvent: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
};


// Size 0x1
class ClientInputMatchmakingNotificationResultTelemetryEvent: public None
{
public:
	bool                                                         Accepted;                                          // 0x0(0x1)
};


// Size 0x18
class ClientEndEngagementMessageTelemetryEvent: public None
{
public:
	float                                                        ScreenDuration;                                    // 0x0(0x4)
	Struct FString                                               EndedScreen;                                       // 0x8(0x10)
};


// Size 0x10
class ClientBootFlowErrorOccurredTelemetryEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
};


// Size 0x10
class ClientPirateDeleteTelemetryEvent: public None
{
public:
	Struct FString                                               PirateId;                                          // 0x0(0x10)
};


// Size 0x1
class ClientOptedIntoMarketingTelemetryEvent: public None
{
public:
};


// Size 0x20
class SyncLoadPackageTelemetryEvent: public None
{
public:
	Struct FString                                               ObjectName;                                        // 0x0(0x10)
	Struct FString                                               PackageName;                                       // 0x10(0x10)
};


// Size 0x30
class ClientReachedInGameTelemetryEvent: public None
{
public:
	Struct Guid                                                  PlayerGameId;                                      // 0x0(0x10)
	Struct FString                                               SessionType;                                       // 0x10(0x10)
	Struct Guid                                                  MatchmakingAttemptId;                              // 0x20(0x10)
};


// Size 0x10
class ClientStartConnectingToServerTelemetryEvent: public None
{
public:
	Struct Guid                                                  MatchmakingAttemptId;                              // 0x0(0x10)
};


// Size 0x30
class ClientStartServerMatchmakingTelemetryEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct FString                                               SessionType;                                       // 0x10(0x10)
	Struct Guid                                                  MatchmakingAttemptId;                              // 0x20(0x10)
};


// Size 0x30
class ClientStartCrewMatchmakingTelemetryEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct FString                                               SessionType;                                       // 0x10(0x10)
	Struct Guid                                                  MatchmakingAttemptId;                              // 0x20(0x10)
};


// Size 0x10
class ClientStartLobbyTelemetryEvent: public None
{
public:
	Struct FString                                               SessionType;                                       // 0x0(0x10)
};


// Size 0x1
class ClientStartSessionSelectionTelemetryEvent: public None
{
public:
};


// Size 0x1
class ClientStartPirateSelectionTelemetryEvent: public None
{
public:
};


// Size 0x28
class WaitForLoadingScreenTelemetryEvent: public None
{
public:
	Struct FString                                               OldStateName;                                      // 0x0(0x10)
	Struct FString                                               NewStateName;                                      // 0x10(0x10)
	float                                                        OldStateDuration;                                  // 0x20(0x4)
};


// Size 0x1
class ClientProfileLogInTelemetryEvent: public None
{
public:
};


// Size 0x28
class BootFlowNetworkErrorTelemetryEvent: public None
{
public:
	double                                                       TimeConnected;                                     // 0x0(0x8)
	Struct FString                                               ServerAddress;                                     // 0x8(0x10)
	Struct FString                                               Message;                                           // 0x18(0x10)
};


// Size 0x10
class ClientInputBlockedTelemetryEvent: public None
{
public:
	Struct FString                                               BlockedKey;                                        // 0x0(0x10)
};


// Size 0x10
class ContestTavernStagingTelemetryFragmentInput: public None
{
public:
};


// Size 0x14
class ContestTavernStagingTelemetryFragment: public None
{
public:
	int                                                          CrewCountNeeded;                                   // 0x0(0x4)
	int                                                          OpenCrewMemberCountNeeded;                         // 0x4(0x4)
	bool                                                         TickingCountdown;                                  // 0x8(0x1)
	bool                                                         HasServerRecruitmentTimeEnded;                     // 0x9(0x1)
	int                                                          TavernPlayersAwaitingSpawn;                        // 0xc(0x4)
	bool                                                         AreCrewsReadyToStart;                              // 0x10(0x1)
};


// Size 0x20
class ContestCrewPositionTelemetryFragmentInput: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x14
class ContestCrewPositionTelemetryFragment: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	int                                                          CrewPositionInLastContest;                         // 0x10(0x4)
};


// Size 0x10
class ContestBaseTelemetryFragmentInput: public None
{
public:
};


// Size 0x38
class ContestBaseTelemetryFragment: public None
{
public:
	Struct Guid                                                  ContestUniqueId;                                   // 0x0(0x10)
	Struct FString                                               ContestVoyageName;                                 // 0x10(0x10)
	byte                                                         ContestScoreIdentifier;                            // 0x20(0x1)
	float                                                        TimeRemainingInCurrentContestState;                // 0x24(0x4)
	Struct FString                                               ShipSize;                                          // 0x28(0x10)
};


// Size 0x10
class ContestParticipantTelemetryFragmentInput: public None
{
public:
};


// Size 0x18
class ContestParticipantTelemetryFragment: public None
{
public:
	int                                                          NumberOfCrews;                                     // 0x0(0x4)
	int                                                          NumberOfParticipants;                              // 0x4(0x4)
	TArray<Struct ContestParticipantData>                        ContestParticipants;                               // 0x8(0x10)
};


// Size 0x14
class ContestParticipantData: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	int                                                          NumberOfCrewMembers;                               // 0x10(0x4)
};


// Size 0x10
class ContestScoreTelemetryFragmentInput: public None
{
public:
};


// Size 0x10
class ContestScoreTelemetryFragment: public None
{
public:
	TArray<Struct CrewScore>                                     CrewScores;                                        // 0x0(0x10)
};


// Size 0x18
class CrewScore: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	int                                                          Score;                                             // 0x10(0x4)
	byte                                                         ScoreId;                                           // 0x14(0x1)
};


// Size 0x1
class ServerTavernCrewMatchmakingVisibilityChangedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerTavernServerRecruitmentEndedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerTavernStagingCountdownStoppedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerTavernStagingCountdownStartedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerTavernRecruitmentEndedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerTavernSinglePlayerSpawnedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerTavernHeartbeatTelemetryEvent: public None
{
public:
};


// Size 0x10
class RivalChangeTelemetryEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x1
class ServerPlayerContestLeftTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerPlayerContestJoinedTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerContestStateUpdateTelemetryEvent: public None
{
public:
	byte                                                         CurrentContestState;                               // 0x0(0x1)
};


// Size 0x30
class ServerContestScoreUpdateTelemetryEvent: public None
{
public:
	byte                                                         ReasonForScoreChange;                              // 0x0(0x1)
	int                                                          CurrentCrewScore;                                  // 0x4(0x4)
	int                                                          ScoreChangeAmount;                                 // 0x8(0x4)
	Struct FString                                               ScoreContext;                                      // 0x10(0x10)
	Struct Guid                                                  InstigatorId;                                      // 0x20(0x10)
};


// Size 0x28
class ServerDeniedClientAtPreLoginTelemetryEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
	Struct FString                                               UserId;                                            // 0x10(0x10)
	byte                                                         ReasonCode;                                        // 0x20(0x1)
};


// Size 0x10
class FireTelemetryInput: public None
{
public:
};


// Size 0x8
class FireTelemetryFragment: public None
{
public:
	int                                                          NumOfShipWithActiveCells;                          // 0x0(0x4)
	int                                                          NumOfActiveCells;                                  // 0x4(0x4)
};


// Size 0x1
class ErrorHappeningEvent: public None
{
public:
};


// Size 0x1
class ClientMemoryReportSentTelemetryEvent: public None
{
public:
};


// Size 0x1
class ClientOutOfMemoryTelemetryEvent: public None
{
public:
};


// Size 0x20
class ClientPanicGarbageCollectionTelemetryEvent: public None
{
public:
	int                                                          GCPanicMemThreshold;                               // 0x0(0x4)
};


// Size 0x1
class ClientHighMemoryPerformanceTelemetryEvent: public None
{
public:
};


// Size 0x1
class ClientPerformanceTelemetryEvent: public None
{
public:
};


// Size 0x1
class ServerPerformanceTelemetryEvent: public None
{
public:
};


// Size 0x2
class VoiceChatStatusTelemetryEvent: public None
{
public:
	byte                                                         Device;                                            // 0x0(0x1)
	bool                                                         IsInPartyChat;                                     // 0x1(0x1)
};


// Size 0x4
class GraphicalSettingsTelemetryEvent: public None
{
public:
};


// Size 0x38
class LevelCancelCompletedTelemetryEvent: public None
{
public:
	float                                                        TimeSinceCancelRequested;                          // 0x30(0x4)
};


// Size 0x30
class StreamingTelemetryBaseEvent: public None
{
public:
	Struct FString                                               LevelName;                                         // 0x0(0x10)
	int                                                          LodLevel;                                          // 0x10(0x4)
	Struct Vector                                                PlayerPosition;                                    // 0x14(0xc)
	float                                                        DistanceFromPlayer;                                // 0x20(0x4)
	float                                                        DistanceFromBoundsToPlayer;                        // 0x24(0x4)
	bool                                                         PlayerIsWaitingToSpawn;                            // 0x28(0x1)
	bool                                                         PlayerIsTeleporting;                               // 0x29(0x1)
};


// Size 0x38
class LevelCancelRequestedTelemetryEvent: public None
{
public:
	float                                                        TimeCancelRequested;                               // 0x30(0x4)
};


// Size 0x30
class LevelUnloadCompletedTelemetryEvent: public None
{
public:
};


// Size 0x30
class LevelUnloadRequestedTelemetryEvent: public None
{
public:
};


// Size 0x30
class LevelMadeHiddenTelemetryEvent: public None
{
public:
};


// Size 0x48
class LevelMadeVisibleTelemetryEvent: public None
{
public:
	float                                                        DistancePlayerTravelledSinceLoadCompleted;         // 0x40(0x4)
	float                                                        TimeSinceLoadCompleted;                            // 0x44(0x4)
};


// Size 0x40
class LevelLoadCompletedTelemetryEvent: public None
{
public:
	bool                                                         WasCancelRequested;                                // 0x30(0x1)
	bool                                                         WasCancelActioned;                                 // 0x31(0x1)
	float                                                        DistancePlayerTravelledSinceLoadRequest;           // 0x34(0x4)
	float                                                        TimeSinceLoadRequested;                            // 0x38(0x4)
};


// Size 0x30
class LevelLoadRequestedTelemetryEvent: public None
{
public:
};


// Size 0x10
class StreamingTelemetryConfigurationSettings: public None
{
public:
	int                                                          PercentageOfPlayersToSendTelemetryFromForHighLOD;  // 0x0(0x4)
	int                                                          PercentageOfPlayersToSendTelemetryFromForLowLOD;   // 0x4(0x4)
	int                                                          PercentageOfPlayersToSendVerboseTelemetryFromForHighLOD; // 0x8(0x4)
	int                                                          PercentageOfPlayersToSendVerboseTelemetryFromForLowLOD; // 0xc(0x4)
};


// Size 0x190
class UserSettingsTelemetryEvent: public None
{
public:
	int                                                          AutoDetectedMachineSpec;                           // 0x0(0x4)
	Struct PersistentUserGameSettings                            UserSettings;                                      // 0x8(0x180)
	bool                                                         RHIThread;                                         // 0x188(0x1)
};


// Size 0x180
class PersistentUserGameSettings: public None
{
public:
	bool                                                         InvertYAxisGamepad;                                // 0x0(0x1)
	bool                                                         InvertYAxisMouse;                                  // 0x1(0x1)
	bool                                                         InvertXAxisGamepad;                                // 0x2(0x1)
	bool                                                         InvertXAxisMouse;                                  // 0x3(0x1)
	bool                                                         UseVirtualKeyboard;                                // 0x4(0x1)
	bool                                                         UsePlatformForUnattenuatedChat;                    // 0x5(0x1)
	bool                                                         UsePushToTalk;                                     // 0x6(0x1)
	bool                                                         UseProximityChatDirection;                         // 0x7(0x1)
	float                                                        ForceFeedbackIntensity;                            // 0x8(0x4)
	float                                                        FieldOfView;                                       // 0xc(0x4)
	float                                                        MouseSensitivity;                                  // 0x10(0x4)
	float                                                        MasterVolume;                                      // 0x14(0x4)
	float                                                        SfxVolume;                                         // 0x18(0x4)
	float                                                        MusicVolume;                                       // 0x1c(0x4)
	float                                                        ShantyVolume;                                      // 0x20(0x4)
	float                                                        CrewChatVolume;                                    // 0x24(0x4)
	float                                                        NonCrewChatVolume;                                 // 0x28(0x4)
	float                                                        Brightness;                                        // 0x2c(0x4)
	int                                                          VSync;                                             // 0x30(0x4)
	int                                                          MaxFPS;                                            // 0x34(0x4)
	bool                                                         Fullscreen;                                        // 0x38(0x1)
	int                                                          MaxVerticalResolution;                             // 0x3c(0x4)
	int                                                          DefaultDetail;                                     // 0x40(0x4)
	int                                                          ShadowDetail;                                      // 0x44(0x4)
	int                                                          ModelDetail;                                       // 0x48(0x4)
	int                                                          TextureDetail;                                     // 0x4c(0x4)
	int                                                          WaterDetail;                                       // 0x50(0x4)
	int                                                          AnimationQuality;                                  // 0x54(0x4)
	int                                                          MMCThresholdScale;                                 // 0x58(0x4)
	int                                                          ParticleEmitterQuality;                            // 0x5c(0x4)
	int                                                          ParticleResolutionQuality;                         // 0x60(0x4)
	float                                                        ResolutionScaling;                                 // 0x64(0x4)
	int                                                          LightingDetail;                                    // 0x68(0x4)
	int                                                          BackBufferCount;                                   // 0x6c(0x4)
	float                                                        ControllerSensitivity;                             // 0x70(0x4)
	float                                                        ControllerDeadzone;                                // 0x74(0x4)
	float                                                        ControllerNonLinearity;                            // 0x78(0x4)
	float                                                        MouseSensitivity_Blunderbuss;                      // 0x7c(0x4)
	float                                                        ControllerSensitivity_Blunderbuss;                 // 0x80(0x4)
	float                                                        MouseSensitivity_Flintlock;                        // 0x84(0x4)
	float                                                        ControllerSensitivity_Flintlock;                   // 0x88(0x4)
	float                                                        MouseSensitivity_EyeOfReach;                       // 0x8c(0x4)
	float                                                        ControllerSensitivity_EyeOfReach;                  // 0x90(0x4)
	float                                                        MouseSensitivity_Spyglass;                         // 0x94(0x4)
	float                                                        ControllerSensitivity_Spyglass;                    // 0x98(0x4)
	float                                                        MouseSensitivity_TridentOfDarkTides;               // 0x9c(0x4)
	float                                                        ControllerSensitivity_TridentOfDarkTides;          // 0xa0(0x4)
	TArray<Struct ControllerSensitivity_TridentOfDarkTides>      ActionBindings;                                    // 0xa8(0x10)
	TArray<Struct KeyBinding>                                    AxisBindings;                                      // 0xb8(0x10)
	int                                                          ShowPerformanceCounters;                           // 0xc8(0x4)
	int                                                          NumberOfLogins;                                    // 0xcc(0x4)
	bool                                                         OptedInToMarketing;                                // 0xd0(0x1)
	int                                                          KeyboardLayout;                                    // 0xd4(0x4)
	int                                                          GameLanguage;                                      // 0xd8(0x4)
	bool                                                         ShowPlayerTalkingIndicator;                        // 0xdc(0x1)
	bool                                                         MuteCopyrightedAudio;                              // 0xdd(0x1)
	bool                                                         UseAltMapMarkTexture;                              // 0xde(0x1)
	bool                                                         VariableRefreshRate;                               // 0xdf(0x1)
	float                                                        HighDynamicRangeCalib;                             // 0xe0(0x4)
	bool                                                         HDR;                                               // 0xe4(0x1)
	int                                                          CVDMode;                                           // 0xe8(0x4)
	float                                                        CVDStrength;                                       // 0xec(0x4)
	float                                                        ColorSaturationScale;                              // 0xf0(0x4)
	float                                                        NotificationScale;                                 // 0xf4(0x4)
	bool                                                         Joinable;                                          // 0xf8(0x1)
	bool                                                         ShowOwnCrewNameplates;                             // 0xf9(0x1)
	bool                                                         ShowOtherCrewNameplates;                           // 0xfa(0x1)
	bool                                                         ShowFishNameplates;                                // 0xfb(0x1)
	bool                                                         ShowOwnCrewStatusTags;                             // 0xfc(0x1)
	bool                                                         ScrambleGamertags;                                 // 0xfd(0x1)
	bool                                                         ShowTallTalesOnMapTable;                           // 0xfe(0x1)
	bool                                                         AutoVoteOnProposedVoyage;                          // 0xff(0x1)
	bool                                                         NotificationsInMenus;                              // 0x100(0x1)
	bool                                                         ToggleRadialMenu;                                  // 0x101(0x1)
	bool                                                         StickyRadialItems;                                 // 0x102(0x1)
	bool                                                         EnableMovementDuringRadial;                        // 0x103(0x1)
	bool                                                         EnableLookWhenControllingObject;                   // 0x104(0x1)
	bool                                                         EnableAutoCentreLook;                              // 0x105(0x1)
	float                                                        AutoCentreLookTimeDelay;                           // 0x108(0x4)
	float                                                        AutoCentreLookSpeed;                               // 0x10c(0x4)
	bool                                                         HoldActionsDontRequireHold;                        // 0x110(0x1)
	bool                                                         HoldActionsWithHeldItemsDontRequireHold;           // 0x111(0x1)
	int                                                          TTSOverride;                                       // 0x114(0x4)
	int                                                          STTOverride;                                       // 0x118(0x4)
	int                                                          LGRTMOverride;                                     // 0x11c(0x4)
	bool                                                         TranslateOtherPlayers;                             // 0x120(0x1)
	bool                                                         ScreenSpaceTooltips;                               // 0x121(0x1)
	bool                                                         NarrateToasts;                                     // 0x122(0x1)
	float                                                        ToastHoldDurationMultiplier;                       // 0x124(0x4)
	bool                                                         NarrateOnHover;                                    // 0x128(0x1)
	bool                                                         NarrateChangeOnly;                                 // 0x129(0x1)
	bool                                                         EscapeAsBackAccessibilityOption;                   // 0x12a(0x1)
	bool                                                         CrossInputPreference;                              // 0x12b(0x1)
	bool                                                         AdventureCrossInputPreference;                     // 0x12c(0x1)
	int                                                          AdventureIslandBanners;                            // 0x130(0x4)
	int                                                          ArenaIslandBanners;                                // 0x134(0x4)
	bool                                                         OutpostLocationBanners;                            // 0x138(0x1)
	int                                                          UseSingleStick;                                    // 0x13c(0x4)
	int                                                          UseSingleStickSettingsApplied;                     // 0x140(0x4)
	int                                                          UseSingleStickCameraToggle;                        // 0x144(0x4)
	int                                                          SingleStickState;                                  // 0x148(0x4)
	bool                                                         DisableControllerOnPC;                             // 0x14c(0x1)
	bool                                                         RecenterMouseInMenus;                              // 0x14d(0x1)
	bool                                                         AutoFloatInWater;                                  // 0x14e(0x1)
	int                                                          PushToTalkMode;                                    // 0x150(0x4)
	bool                                                         CircularUINavigation;                              // 0x154(0x1)
	bool                                                         Enable120Hz;                                       // 0x155(0x1)
	bool                                                         AlwaysSkipMapTableAnimation;                       // 0x156(0x1)
	bool                                                         AudioMonoMix;                                      // 0x157(0x1)
	bool                                                         AudioOutputHeadphones;                             // 0x158(0x1)
	bool                                                         AudioOutputSpatialAudio;                           // 0x159(0x1)
	bool                                                         DisableSeasonsNotifications;                       // 0x15a(0x1)
	bool                                                         DisableInviteNotifications;                        // 0x15b(0x1)
	bool                                                         ControlledTextAlignment;                           // 0x15c(0x1)
	bool                                                         ControlledLineHeight;                              // 0x15d(0x1)
	int                                                          OtherCrewsMuteState;                               // 0x160(0x4)
	int                                                          NauticalNarrationEnabled;                          // 0x164(0x4)
	bool                                                         FishNameplateNarrationEnabled;                     // 0x168(0x1)
	float                                                        ContinuousNarrationDelay;                          // 0x16c(0x4)
	bool                                                         DisableFlashes;                                    // 0x170(0x1)
	bool                                                         DisableBlur;                                       // 0x171(0x1)
	bool                                                         DisableScreenShake;                                // 0x172(0x1)
	bool                                                         DisableOnScreenEffects;                            // 0x173(0x1)
	bool                                                         EnchantedCompassProximityAnnouncerEnabled;         // 0x174(0x1)
	bool                                                         DisableRats;                                       // 0x175(0x1)
	bool                                                         EnableSqueakyWheel;                                // 0x176(0x1)
	float                                                        SqueakyWheelVolume;                                // 0x178(0x4)
};


// Size 0x20
class KeyBinding: public None
{
public:
	Struct FString                                               BindingName;                                       // 0x0(0x10)
	struct FName                                                 KeyName;                                           // 0x10(0x8)
	byte                                                         ControllerType;                                    // 0x18(0x1)
};


// Size 0x1
class EventTestControlStateEnd: public None
{
public:
};


// Size 0x1
class EventTestControlStateFullyDocked: public None
{
public:
};


// Size 0x1
class EventTestControlStateStart: public None
{
public:
};


// Size 0x1
class EventTestControlStateUpdate: public None
{
public:
};


// Size 0x50
class TestControlObjectActionStateConstructionInfo: public None
{
public:
	float                                                        DockTime;                                          // 0x48(0x4)
};


// Size 0x18
class TestNetworkEvent: public None
{
public:
	int                                                          Data;                                              // 0x10(0x4)
};


// Size 0x18
class PrepareInstantFireRpc: public None
{
public:
	Class TestProjectileWeapon*                                  Weapon;                                            // 0x10(0x8)
};


// Size 0x1
class RenderToTextureTestReadyEvent: public None
{
public:
};


// Size 0x10
class RenderToTextureTestStringEvent: public None
{
public:
	Struct FString                                               Message;                                           // 0x0(0x10)
};


// Size 0x8
class RenderToTextureTestChangeEvent: public None
{
public:
	Class Actor*                                                 Object;                                            // 0x0(0x8)
};


// Size 0x18
class FinishIntroAnimaticTutorialStepRpc: public None
{
public:
	Class AthenaTutorialComponent*                               TutorialComponent;                                 // 0x10(0x8)
};


// Size 0xc
class CinematicEmissaryEvent: public None
{
public:
	int                                                          Level;                                             // 0x0(0x4)
	struct FName                                                 Tag;                                               // 0x4(0x8)
};


// Size 0x20
class CinematicEmissaryNetworkEvent: public None
{
public:
	int                                                          Level;                                             // 0x10(0x4)
	struct FName                                                 Tag;                                               // 0x14(0x8)
};


// Size 0x10
class CrewUpdateEvent: public None
{
public:
	Struct FrontendCrewDefinition                                CrewDefinition;                                    // 0x0(0x10)
};


// Size 0x10
class FrontendCrewDefinition: public None
{
public:
	TArray<Struct FrontendCrewMember>                            CrewMembers;                                       // 0x0(0x10)
};


// Size 0x28
class FrontendCrewMember: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	Struct FString                                               GamerTag;                                          // 0x10(0x10)
	bool                                                         CurrentPlayer;                                     // 0x20(0x1)
	bool                                                         Captain;                                           // 0x21(0x1)
	bool                                                         ReservedForPlayerThatDroppedConnection;            // 0x22(0x1)
};


// Size 0x5
class SetContestShipTypes: public None
{
public:
	bool                                                         IsGalleonEnabled;                                  // 0x0(0x1)
	bool                                                         IsBrigantineEnabled;                               // 0x1(0x1)
	bool                                                         IsSloopEnabled;                                    // 0x2(0x1)
	bool                                                         IsSloopDuoEnabled;                                 // 0x3(0x1)
	bool                                                         IsMixedGalleonBrigantineEnabled;                   // 0x4(0x1)
};


// Size 0x5
class SetFrontEndSelection: public None
{
public:
	bool                                                         IsAdventureActive;                                 // 0x0(0x1)
	bool                                                         IsArenaActive;                                     // 0x1(0x1)
	bool                                                         IsTutorialActive;                                  // 0x2(0x1)
	bool                                                         IsCreativeActive;                                  // 0x3(0x1)
	bool                                                         IsBeachNPCSpawnActive;                             // 0x4(0x1)
};


// Size 0x1
class NotifyFrontendOfCurrentPirateStatus: public None
{
public:
	bool                                                         Locked;                                            // 0x0(0x1)
};


// Size 0x1
class NotifyFrontendOfPirateDeletionFailure: public None
{
public:
};


// Size 0x1
class FrontendRequestPirateDeletionEvent: public None
{
public:
};


// Size 0x38
class PirateSelectedTelemetryEvent: public None
{
public:
	Struct FString                                               PirateEthnicity;                                   // 0x0(0x10)
	Struct FString                                               PirateGender;                                      // 0x10(0x10)
	Struct FString                                               HighestWeightedBodyShape;                          // 0x20(0x10)
	float                                                        PirateAge;                                         // 0x30(0x4)
	int                                                          PirateGenerationRequestCount;                      // 0x34(0x4)
};


// Size 0x110
class CrosshairUI: public None
{
public:
	Class ProjectileWeapon*                                      WieldedWeapon;                                     // 0x0(0x8)
};


// Size 0x10
class ItemPreviewItemChanged: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
};


// Size 0x1
class ItemPreviewLoadingEvent: public None
{
public:
};


// Size 0x10
class ItemPreviewCreatedEvent: public None
{
public:
	Struct FString                                               PreviewURL;                                        // 0x0(0x10)
};


// Size 0x1
class RequestDestroyItemPreviewEvent: public None
{
public:
};


// Size 0x8
class RequestCreateItemPreviewEvent: public None
{
public:
	int                                                          ResolutionX;                                       // 0x0(0x4)
	int                                                          ResolutionY;                                       // 0x4(0x4)
};


// Size 0x20
class PirateProfileRTTGeneratedPNGEvent: public None
{
public:
};


// Size 0x1
class RequestPirateProfileRTTDestroyEvent: public None
{
public:
};


// Size 0x18
class RequestPirateProfileRTTEvent: public None
{
public:
};


// Size 0x60
class WorldLocationBannerEvent: public None
{
public:
	Struct GenericPopupAudioDescriptor                           Audio;                                             // 0x0(0x40)
	Struct FString                                               IconPath;                                          // 0x40(0x10)
	Struct FString                                               Text;                                              // 0x50(0x10)
};


// Size 0x40
class GenericPopupAudioDescriptor: public None
{
public:
	Struct FString                                               SfxEventName;                                      // 0x0(0x10)
	Struct FString                                               EventName;                                         // 0x10(0x10)
	Struct FString                                               SwitchName;                                        // 0x20(0x10)
	Struct FString                                               SwitchValue;                                       // 0x30(0x10)
};


// Size 0x1
class EmissaryDeactivatedNotificationUIEvent: public None
{
public:
};


// Size 0x68
class EmissaryProgressUpdatedNotificationUIEvent: public None
{
public:
	float                                                        Old;                                               // 0x0(0x4)
	float                                                        New;                                               // 0x4(0x4)
	Struct FString                                               CompanyId;                                         // 0x8(0x10)
	Struct FString                                               RankIncreaseAudioCue;                              // 0x18(0x10)
	Struct FString                                               RankIncreaseStopAudioCue;                          // 0x28(0x10)
	Struct FString                                               RankLevelUpAudioCue;                               // 0x38(0x10)
	Struct FString                                               RankTriggerAudioCue;                               // 0x48(0x10)
	Struct FString                                               RankLevelUpMusicCue;                               // 0x58(0x10)
};


// Size 0x10
class PopupQueueFinished: public None
{
public:
	Struct FString                                               Id;                                                // 0x0(0x10)
};


// Size 0x10
class PopupQueueStarted: public None
{
public:
	Struct FString                                               Id;                                                // 0x0(0x10)
};


// Size 0x30
class PopupQueuePlay: public None
{
public:
	Struct FString                                               Id;                                                // 0x0(0x10)
	Struct FString                                               EventName;                                         // 0x10(0x10)
	Struct FString                                               EventData;                                         // 0x20(0x10)
};


// Size 0x108
class ProgressUpdatedNotificationUIEvent: public None
{
public:
	Struct ProgressPoint                                         Old;                                               // 0x0(0x18)
	Struct ProgressPoint                                         New;                                               // 0x18(0x18)
	Struct FString                                               RibbonImage;                                       // 0x30(0x10)
	Struct FString                                               BackgroundImage;                                   // 0x40(0x10)
	Struct FText                                                 Title;                                             // 0x50(0x38)
	Struct FText                                                 Body;                                              // 0x88(0x38)
	byte                                                         Style;                                             // 0xc0(0x1)
	Struct FString                                               RankIncreaseAudioCue;                              // 0xc8(0x10)
	Struct FString                                               RankIncreaseStopAudioCue;                          // 0xd8(0x10)
	Struct FString                                               RankLevelUpAudioCue;                               // 0xe8(0x10)
	Struct FString                                               RankTriggerAudioCue;                               // 0xf8(0x10)
};


// Size 0x18
class ProgressPoint: public None
{
public:
	float                                                        Progress;                                          // 0x0(0x4)
	Struct FString                                               Image;                                             // 0x8(0x10)
};


// Size 0x20
class EmissaryValueChangeUIEvent: public None
{
public:
	Struct FString                                               EmissaryId;                                        // 0x10(0x10)
};


// Size 0x38
class CurrencyGrantedNotificationUIEvent: public None
{
public:
	byte                                                         CurrencyId;                                        // 0x0(0x1)
	int                                                          Amount;                                            // 0x4(0x4)
	Struct FString                                               DisplayAmount;                                     // 0x8(0x10)
	Struct FString                                               EmissaryAddition;                                  // 0x18(0x10)
	Struct FString                                               EmissaryId;                                        // 0x28(0x10)
};


// Size 0xa8
class PopUpNotificationUIEvent: public None
{
public:
	Struct FString                                               BackgroundImage;                                   // 0x0(0x10)
	Struct FString                                               ForegroundImage;                                   // 0x10(0x10)
	Struct FText                                                 Text;                                              // 0x20(0x38)
	Struct FString                                               AudioSfxEventName;                                 // 0x58(0x10)
	Struct FString                                               AudioEventName;                                    // 0x68(0x10)
	Struct FString                                               AudioSwitchName;                                   // 0x78(0x10)
	Struct FString                                               AudioSwitchValue;                                  // 0x88(0x10)
	Struct FString                                               StyleModifier;                                     // 0x98(0x10)
};


// Size 0x1
class HideTutorialNotificationUIEvent: public None
{
public:
};


// Size 0xb0
class ShowTutorialNotificationUIEvent: public None
{
public:
};


// Size 0xb0
class GenericNotificationUIEvent: public None
{
public:
	TArray<Text None>                                            Text;                                              // 0x0(0x10)
	TArray<Str >                                                 Images;                                            // 0x10(0x10)
	Struct FString                                               Background;                                        // 0x20(0x10)
	TArray<Str >                                                 FlagIcons;                                         // 0x30(0x10)
	Struct FString                                               StampIcon;                                         // 0x40(0x10)
	Struct GenericPopupAudioDescriptor                           Audio;                                             // 0x50(0x40)
	TArray<Byte Audio>                                           StyleModifiers;                                    // 0x90(0x10)
	bool                                                         OnlyPlayAudio;                                     // 0xa0(0x1)
	bool                                                         PlayAudio;                                         // 0xa1(0x1)
	float                                                        HoldDuration;                                      // 0xa4(0x4)
	int                                                          Multiplier;                                        // 0xa8(0x4)
	bool                                                         SupportsHotlinkToMenus;                            // 0xac(0x1)
};


// Size 0x60
class VoyageCompleteAnimationEvent: public None
{
public:
	Struct FText                                                 VoyageTitle;                                       // 0x0(0x38)
	Struct FString                                               AudioSwitchName;                                   // 0x38(0x10)
	Struct FString                                               AudioSwitchValue;                                  // 0x48(0x10)
	struct FName                                                 CompanyId;                                         // 0x58(0x8)
};


// Size 0x68
class VoyageChapterBegunAnimationEvent: public None
{
public:
	int                                                          ChapterIndex;                                      // 0x0(0x4)
	int                                                          ChapterCount;                                      // 0x4(0x4)
	Struct FText                                                 VoyageTitle;                                       // 0x8(0x38)
	Struct FString                                               AudioSwitchName;                                   // 0x40(0x10)
	Struct FString                                               AudioSwitchValue;                                  // 0x50(0x10)
	struct FName                                                 CompanyId;                                         // 0x60(0x8)
};


// Size 0xb0
class VoyageBegunAnimationEvent: public None
{
public:
	Struct FText                                                 ShipName;                                          // 0x0(0x38)
	TArray<Str >                                                 CrewMembers;                                       // 0x38(0x10)
	int                                                          ChapterIndex;                                      // 0x48(0x4)
	int                                                          ChapterCount;                                      // 0x4c(0x4)
	Struct FText                                                 VoyageTitle;                                       // 0x50(0x38)
	Struct FString                                               AudioSwitchName;                                   // 0x88(0x10)
	Struct FString                                               AudioSwitchValue;                                  // 0x98(0x10)
	struct FName                                                 CompanyId;                                         // 0xa8(0x8)
};


// Size 0x48
class RequestPlayerNameplateUIEventData: public None
{
public:
	int                                                          Index;                                             // 0x0(0x4)
	int                                                          Id;                                                // 0x4(0x4)
	Struct PlayerNameplateUIInfo                                 Data;                                              // 0x8(0x40)
};


// Size 0x40
class PlayerNameplateUIInfo: public None
{
public:
	Struct FString                                               GamerTag;                                          // 0x0(0x10)
	Struct FString                                               Title;                                             // 0x10(0x10)
	byte                                                         Attitude;                                          // 0x20(0x1)
	byte                                                         ChatState;                                         // 0x21(0x1)
	float                                                        Health;                                            // 0x24(0x4)
	bool                                                         HealthVisible;                                     // 0x28(0x1)
	bool                                                         TitleVisible;                                      // 0x29(0x1)
	Struct FString                                               NameplateIconReference;                            // 0x30(0x10)
};


// Size 0xc
class UpdateRivalVoteCountUIEvent: public None
{
public:
	int                                                          VoteCount;                                         // 0x0(0x4)
	int                                                          VoteLimit;                                         // 0x4(0x4)
	bool                                                         HasPlayerVotedInFavour;                            // 0x8(0x1)
};


// Size 0x28
class SetRivalVotingUIEvent: public None
{
public:
	Struct FString                                               TitleTextAsString;                                 // 0x0(0x10)
	Struct FString                                               BodyTextAsString;                                  // 0x10(0x10)
	class                                                        NotificationInputId;                               // 0x20(0x8)
};


// Size 0x1
class HideRivalVotingUIEvent: public None
{
public:
};


// Size 0x1
class ShowRivalVotingUIEvent: public None
{
public:
};


// Size 0x10
class UIWhatsNewAvailableArticlesTelemetryEvent: public None
{
public:
	TArray<Str None>                                             Articles;                                          // 0x0(0x10)
};


// Size 0x20
class UIAdventuresDataErrorTelemetryEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
	Struct FString                                               ErrorStack;                                        // 0x10(0x10)
};


// Size 0x20
class UILiveCampaignDataErrorTelemetryEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
	Struct FString                                               ErrorStack;                                        // 0x10(0x10)
};


// Size 0x20
class UISeasonsDataErrorTelemetryEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
	Struct FString                                               ErrorStack;                                        // 0x10(0x10)
};


// Size 0x8
class PopUpQueueServicePausedTelemetryEvent: public None
{
public:
	bool                                                         Paused;                                            // 0x0(0x1)
	int                                                          Reason;                                            // 0x4(0x4)
};


// Size 0x60
class UIPremiumStoreItemInteractTelemetryEvent: public None
{
public:
	Struct FString                                               CurrencyUsed;                                      // 0x0(0x10)
	Struct FString                                               EngagementOutcome;                                 // 0x10(0x10)
	Struct FString                                               ItemCost;                                          // 0x20(0x10)
	Struct FString                                               ItemName;                                          // 0x30(0x10)
	Struct FString                                               PageName;                                          // 0x40(0x10)
	Struct FString                                               SessionId;                                         // 0x50(0x10)
};


// Size 0x38
class UIPremiumStorePanelHighlightTelemetryEvent: public None
{
public:
	Struct FString                                               CurrentPage;                                       // 0x0(0x10)
	Struct FString                                               CurrentPanel;                                      // 0x10(0x10)
	Struct FString                                               SessionId;                                         // 0x20(0x10)
	float                                                        TimeOnPanel;                                       // 0x30(0x4)
};


// Size 0x48
class UIPremiumStorePageTransitionTelemetryEvent: public None
{
public:
	Struct FString                                               CurrentPage;                                       // 0x0(0x10)
	Struct FString                                               PreviousHighlight;                                 // 0x10(0x10)
	Struct FString                                               PreviousPage;                                      // 0x20(0x10)
	Struct FString                                               SessionId;                                         // 0x30(0x10)
	float                                                        TimeOnPreviousPage;                                // 0x40(0x4)
};


// Size 0x18
class UIPremiumStoreOpenTelemetryEvent: public None
{
public:
	bool                                                         IsFrontend;                                        // 0x0(0x1)
	Struct FString                                               SessionId;                                         // 0x8(0x10)
};


// Size 0x20
class UIScreenTransitionTelemetryEvent: public None
{
public:
	Struct FString                                               CurrentScreen;                                     // 0x0(0x10)
	Struct FString                                               PreviousScreen;                                    // 0x10(0x10)
};


// Size 0x20
class UISetAudioSwitchEvent: public None
{
public:
	Struct FString                                               SwitchGroup;                                       // 0x0(0x10)
	Struct FString                                               SwitchValue;                                       // 0x10(0x10)
};


// Size 0x10
class UIAudioCueEvent: public None
{
public:
	Struct FString                                               CueKey;                                            // 0x0(0x10)
};


// Size 0x10
class ArmoryItemLoadoutUpdatedEvent: public None
{
public:
	TArray<Struct ArmoryItemEntitlementsUpdatedEvent>            ItemLoadout;                                       // 0x0(0x10)
};


// Size 0x10
class ArmoryItemEntitlementsUpdatedEvent: public None
{
public:
	TArray<Struct RequestArmoryItemLoadoutEvent>                 ItemEntitlements;                                  // 0x0(0x10)
};


// Size 0x10
class RequestArmoryItemLoadoutEvent: public None
{
public:
	TArray<Str None>                                             Categories;                                        // 0x0(0x10)
};


// Size 0x10
class RequestArmoryItemEntitlementsEvent: public None
{
public:
	Struct FString                                               ItemCategory;                                      // 0x0(0x10)
};


// Size 0x18
class RequestArmoryEquipSlotEvent: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
	int                                                          SlotId;                                            // 0x10(0x4)
};


// Size 0x8
class CappedCount: public None
{
public:
};


// Size 0x10
class ClothingChestClothingLoadoutUpdatedEvent: public None
{
public:
	TArray<Struct ClothingChestClothingEntitlementsUpdatedEvent> Loadout;                                           // 0x0(0x10)
};


// Size 0x10
class ClothingChestClothingEntitlementsUpdatedEvent: public None
{
public:
	TArray<Struct RequestEmoteSelectEquipEvent>                  Entitlements;                                      // 0x0(0x10)
};


// Size 0x18
class RequestEmoteSelectEquipEvent: public None
{
public:
	int                                                          Index;                                             // 0x0(0x4)
	Struct FString                                               ItemDesc;                                          // 0x8(0x10)
};


// Size 0x10
class RequestClothingChestClothingLoadoutEvent: public None
{
public:
	TArray<Str None>                                             Categories;                                        // 0x0(0x10)
};


// Size 0x10
class RequestClothingChestClothingEntitlementsEvent: public None
{
public:
	Struct FString                                               ItemCategory;                                      // 0x0(0x10)
};


// Size 0x18
class RequestClothingChestPreviewUpdateEvent: public None
{
public:
	byte                                                         Action;                                            // 0x0(0x1)
	Struct FString                                               Subject;                                           // 0x8(0x10)
};


// Size 0x18
class RequestClothingChestActionEvent: public None
{
public:
	byte                                                         Action;                                            // 0x0(0x1)
	Struct FString                                               Subject;                                           // 0x8(0x10)
};


// Size 0x10
class EventSingleCompanyProgressUpdate: public None
{
public:
	Struct UICompanyProgress                                     Progress;                                          // 0x0(0x10)
};


// Size 0x10
class UICompanyProgress: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x0(0x8)
	float                                                        Level;                                             // 0x8(0x4)
};


// Size 0x1
class EventCompanyProgressRequest: public None
{
public:
};


// Size 0x10
class EventCompanyProgressData: public None
{
public:
	TArray<Struct EventCompanyDataResponse>                      CompanyProgress;                                   // 0x0(0x10)
};


// Size 0x10
class EventCompanyDataResponse: public None
{
public:
	TArray<Struct UICompanyData>                                 CompanyData;                                       // 0x0(0x10)
};


// Size 0xf0
class UICompanyData: public None
{
public:
	Struct FString                                               CompanyId;                                         // 0x0(0x10)
	Struct FString                                               DisplayName;                                       // 0x10(0x10)
	Struct UICompanySkin                                         Skin;                                              // 0x20(0x80)
	Struct UICompanyShopInfo                                     ShopInfo;                                          // 0xa0(0x50)
};


// Size 0x50
class UICompanyShopInfo: public None
{
public:
	bool                                                         ShouldShowCompanyInfo;                             // 0x0(0x1)
	Struct FText                                                 InfoTitle;                                         // 0x8(0x38)
	TArray<Struct FText>                                         InfoTips;                                          // 0x40(0x10)
};


// Size 0x80
class UICompanySkin: public None
{
public:
	byte                                                         Style;                                             // 0x0(0x1)
	Struct FString                                               BackgroundImageUrl;                                // 0x8(0x10)
	Struct FString                                               RibbonImageUrl;                                    // 0x18(0x10)
	int                                                          ProgressStep;                                      // 0x28(0x4)
	TArray<Str >                                                 ProgressIconUrls;                                  // 0x30(0x10)
	Struct FString                                               ShopTopBannerUrl;                                  // 0x40(0x10)
	Struct FString                                               ShopBottomBannerUrl;                               // 0x50(0x10)
	TArray<Struct UIRankSkin>                                    Ranks;                                             // 0x60(0x10)
	Struct FString                                               ShopInfoUrl;                                       // 0x70(0x10)
};


// Size 0x30
class UIRankSkin: public None
{
public:
	Struct FString                                               DisplayName;                                       // 0x0(0x10)
	Struct FString                                               Description;                                       // 0x10(0x10)
	Struct FString                                               RibbonImageUrl;                                    // 0x20(0x10)
};


// Size 0x1
class EventCompanyDataRequest: public None
{
public:
};


// Size 0x10
class EquipmentChestItemLoadoutUpdatedEvent: public None
{
public:
	TArray<Struct EquipmentChestItemEntitlementsUpdatedEvent>    ItemLoadout;                                       // 0x0(0x10)
};


// Size 0x10
class EquipmentChestItemEntitlementsUpdatedEvent: public None
{
public:
	TArray<Struct RequestEquipmentChestItemLoadoutEvent>         ItemEntitlements;                                  // 0x0(0x10)
};


// Size 0x10
class RequestEquipmentChestItemLoadoutEvent: public None
{
public:
	TArray<Str None>                                             Categories;                                        // 0x0(0x10)
};


// Size 0x10
class RequestEquipmentChestItemEntitlementsEvent: public None
{
public:
	Struct FString                                               ItemCategory;                                      // 0x0(0x10)
};


// Size 0x10
class RequestEquipmentChestEquipItemEvent: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
};


// Size 0x10
class ShowPendingInviteEvent: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
};


// Size 0x10
class PendingInvitesListEvent: public None
{
public:
	TArray<Struct PendingInviteViewModel>                        Invites;                                           // 0x0(0x10)
};


// Size 0x20
class PendingInviteViewModel: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	Struct FString                                               GamerTag;                                          // 0x10(0x10)
};


// Size 0x1
class GetPendingInvitesRequest: public None
{
public:
};


// Size 0x10
class GetOnlineFriendsSuccessEvent: public None
{
public:
};


// Size 0x18
class InviteFriendRequest: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	byte                                                         Platform;                                          // 0x10(0x1)
};


// Size 0x10
class FriendsListError: public None
{
public:
	Struct FString                                               Error;                                             // 0x0(0x10)
};


// Size 0x10
class FriendsListResponse: public None
{
public:
	TArray<Struct FriendViewModel>                               Friends;                                           // 0x0(0x10)
};


// Size 0x58
class FriendViewModel: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
	Struct FString                                               GamerTag;                                          // 0x10(0x10)
	Struct FString                                               GamerpicUrl;                                       // 0x20(0x10)
	Struct FString                                               RealName;                                          // 0x30(0x10)
	Struct FString                                               RichPresence;                                      // 0x40(0x10)
	byte                                                         Status;                                            // 0x50(0x1)
	byte                                                         Platform;                                          // 0x51(0x1)
};


// Size 0x1
class FriendsListInvoked: public None
{
public:
};


// Size 0x1
class PetChestPetNameUpdateSucceedEvent: public None
{
public:
};


// Size 0x1
class PetChestPetNameUpdateFailedEvent: public None
{
public:
};


// Size 0x10
class PetChestPetNameUpdatedEvent: public None
{
public:
	Struct FString                                               PetName;                                           // 0x0(0x10)
};


// Size 0x10
class PetChestPetLoadoutUpdatedEvent: public None
{
public:
	TArray<Struct PetChestPetEntitlementsUpdatedEvent>           Loadout;                                           // 0x0(0x10)
};


// Size 0x10
class PetChestPetEntitlementsUpdatedEvent: public None
{
public:
	TArray<Struct RequestPetChestPetLoadoutEvent>                Entitlements;                                      // 0x0(0x10)
};


// Size 0x10
class RequestPetChestPetLoadoutEvent: public None
{
public:
	TArray<Str None>                                             Categories;                                        // 0x0(0x10)
};


// Size 0x10
class RequestPetChestPetEntitlementsEvent: public None
{
public:
	Struct FString                                               ItemCategory;                                      // 0x0(0x10)
};


// Size 0x18
class RequestPetChestPreviewUpdateEvent: public None
{
public:
	byte                                                         Action;                                            // 0x0(0x1)
	Struct FString                                               Subject;                                           // 0x8(0x10)
};


// Size 0x18
class RequestPetChestActionEvent: public None
{
public:
	byte                                                         Action;                                            // 0x0(0x1)
	Struct FString                                               Subject;                                           // 0x8(0x10)
};


// Size 0x10
class InventoryEquipEvent: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
};


// Size 0x30
class InventoryResponseEvent: public None
{
public:
	TArray<Struct InventoryRequestEvent>                         Equipment;                                         // 0x0(0x10)
	TArray<Struct IInventoryItem>                                Resources;                                         // 0x10(0x10)
	TArray<Struct IInventoryItemDescription>                     Descriptions;                                      // 0x20(0x10)
};


// Size 0x58
class IInventoryItemDescription: public None
{
public:
	Struct FString                                               ThumbnailImageUrl;                                 // 0x0(0x10)
	Struct FString                                               PreviewImageUrl;                                   // 0x10(0x10)
	Struct FString                                               DisplayName;                                       // 0x20(0x10)
	Struct FString                                               Description;                                       // 0x30(0x10)
	Struct FString                                               ItemDesc;                                          // 0x40(0x10)
	class                                                        DescKey;                                           // 0x50(0x8)
};


// Size 0x20
class IInventoryItem: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
	int                                                          Count;                                             // 0x10(0x4)
	bool                                                         IsFull;                                            // 0x14(0x1)
	bool                                                         IsBlocked;                                         // 0x15(0x1)
	byte                                                         State;                                             // 0x16(0x1)
	class                                                        DescKey;                                           // 0x18(0x8)
};


// Size 0x1
class InventoryRequestEvent: public None
{
public:
};


// Size 0x40
class InventoryCountsResponseEvent: public None
{
public:
	Struct CappedCount                                           Cannonballs;                                       // 0x0(0x8)
	Struct CappedCount                                           CursedCannonballs;                                 // 0x8(0x8)
	Struct CappedCount                                           Food;                                              // 0x10(0x8)
	Struct CappedCount                                           Hardware;                                          // 0x18(0x8)
	Struct CappedCount                                           Bait;                                              // 0x20(0x8)
	Struct CappedCount                                           Firebombs;                                         // 0x28(0x8)
	Struct CappedCount                                           ChainShots;                                        // 0x30(0x8)
	Struct CappedCount                                           Fireworks;                                         // 0x38(0x8)
};


// Size 0x1
class RequestInventoryCountsEvent: public None
{
public:
};


// Size 0x50
class EventCompanyReputationCampaignDetail: public None
{
public:
	Struct FString                                               Title;                                             // 0x0(0x10)
	Struct FString                                               Description;                                       // 0x10(0x10)
	Struct FString                                               ImageUrl;                                          // 0x20(0x10)
	Struct CappedCount                                           CommendationProgress;                              // 0x30(0x8)
	Struct CappedCount                                           TitleProgress;                                     // 0x38(0x8)
	TArray<Struct EmblemSetInformation>                          EmblemSets;                                        // 0x40(0x10)
};


// Size 0x18
class EmblemSetInformation: public None
{
public:
	bool                                                         LockedStatus;                                      // 0x0(0x1)
	TArray<Struct EmblemInformation>                             Emblems;                                           // 0x8(0x10)
};


// Size 0x70
class EmblemInformation: public None
{
public:
	Struct FString                                               BackgroundImageUrl;                                // 0x0(0x10)
	Struct FText                                                 Name;                                              // 0x10(0x38)
	TArray<Struct FText>                                         ProgressDescriptions;                              // 0x48(0x10)
	TArray<Struct ProgressDescriptions>                          Progressions;                                      // 0x58(0x10)
};


// Size 0x70
class EventCompanyReputationCampaignInformation: public None
{
public:
	Struct FString                                               CampaignId;                                        // 0x0(0x10)
	Struct FString                                               Title;                                             // 0x10(0x10)
	Struct FString                                               Description;                                       // 0x20(0x10)
	Struct CappedCount                                           Progress;                                          // 0x30(0x8)
	Struct FString                                               ImageUrl;                                          // 0x38(0x10)
	bool                                                         MarkAsNew;                                         // 0x48(0x1)
	bool                                                         Locked;                                            // 0x49(0x1)
	Struct MoreInfoDetails                                       MoreInfo;                                          // 0x50(0x20)
};


// Size 0x20
class MoreInfoDetails: public None
{
public:
	Struct FString                                               DescriptionFirst;                                  // 0x0(0x10)
	Struct FString                                               DescriptionSecond;                                 // 0x10(0x10)
};


// Size 0x170
class CompanyScreenInformation: public None
{
public:
	Struct ReputationCompanyDisplayInformation                   CompanySummary;                                    // 0x0(0xe8)
	Struct CappedCount                                           CompanyProgression;                                // 0xe8(0x8)
	Struct FText                                                 CompanyFlavourText1;                               // 0xf0(0x38)
	Struct FText                                                 CompanyFlavourText2;                               // 0x128(0x38)
	TArray<Struct CompanyFlavourText2>                           EmblemSets;                                        // 0x160(0x10)
};


// Size 0xe8
class ReputationCompanyDisplayInformation: public None
{
public:
	Struct FText                                                 CompanyName;                                       // 0x0(0x38)
	Struct FText                                                 Motto;                                             // 0x38(0x38)
	Struct FText                                                 CurrentRank;                                       // 0x70(0x38)
	Struct FString                                               BackgroundImageUrl;                                // 0xa8(0x10)
	Struct FString                                               RibbonImageUrl;                                    // 0xb8(0x10)
	struct FName                                                 CompanyId;                                         // 0xc8(0x8)
	byte                                                         Style;                                             // 0xd0(0x1)
	float                                                        CompanyLevel;                                      // 0xd4(0x4)
	Struct EmissaryState                                         EmissaryState;                                     // 0xd8(0x8)
	bool                                                         Retired;                                           // 0xe0(0x1)
};


// Size 0x8
class EmissaryState: public None
{
public:
	bool                                                         EmissaryActive;                                    // 0x0(0x1)
	float                                                        Level;                                             // 0x4(0x4)
};


// Size 0x10
class ReputationDisplayInformation: public None
{
public:
	TArray<Struct CompanyReputationSummary>                      CompanyReputationSummaries;                        // 0x0(0x10)
};


// Size 0x108
class CompanyReputationSummary: public None
{
public:
	Struct ReputationCompanyDisplayInformation                   CompanyData;                                       // 0x0(0xe8)
	Struct CappedCount                                           Commendations;                                     // 0xe8(0x8)
	Struct CappedCount                                           Items;                                             // 0xf0(0x8)
	Struct CappedCount                                           Promotions;                                        // 0xf8(0x8)
	Struct CappedCount                                           Titles;                                            // 0x100(0x8)
};


// Size 0x1
class EventFriendsListFailed: public None
{
public:
};


// Size 0x10
class EventFriendsListChanged: public None
{
public:
	TArray<Str None>                                             FriendsList;                                       // 0x0(0x10)
};


// Size 0x10
class EventFriendsListResponse: public None
{
public:
	TArray<Str None>                                             FriendsList;                                       // 0x0(0x10)
};


// Size 0x1
class EventFriendsListRequest: public None
{
public:
};


// Size 0x50
class EventCompanyReputationCampaignDetailResponse: public None
{
public:
	Struct EventCompanyReputationCampaignDetail                  CampaignDetail;                                    // 0x0(0x50)
};


// Size 0x10
class EventCompanyReputationCampaignDetailRequest: public None
{
public:
	Struct FString                                               CampaignId;                                        // 0x0(0x10)
};


// Size 0x10
class EventCompanyReputationCampaignInformationResponse: public None
{
public:
	TArray<Struct EventCompanyReputationCampaignInformationRequest> CampaignInformation;                               // 0x0(0x10)
};


// Size 0x10
class EventCompanyReputationCampaignInformationRequest: public None
{
public:
	Struct FString                                               CompanyId;                                         // 0x0(0x10)
};


// Size 0x170
class EventCompanyScreenDisplayInformationResponse: public None
{
public:
	Struct CompanyScreenInformation                              CompanyData;                                       // 0x0(0x170)
};


// Size 0x10
class EventCompanyScreenDisplayInformationRequest: public None
{
public:
	Struct FString                                               CompanyId;                                         // 0x0(0x10)
};


// Size 0x10
class EventReputationDisplayInformationResponse: public None
{
public:
	TArray<Struct EventReputationDisplayInformationRequest>      ReputationData;                                    // 0x0(0x10)
};


// Size 0x1
class EventReputationDisplayInformationRequest: public None
{
public:
};


// Size 0x10
class ShipCustomizationChestShipCustomizationLoadoutUpdatedEvent: public None
{
public:
	TArray<Struct ShipCustomizationChestShipCustomizationEntitlementsUpdatedEvent> Loadout;                                           // 0x0(0x10)
};


// Size 0x10
class ShipCustomizationChestShipCustomizationEntitlementsUpdatedEvent: public None
{
public:
	TArray<Struct RequestShipCustomizationChestShipCustomizationLoadoutEvent> Entitlements;                                      // 0x0(0x10)
};


// Size 0x10
class RequestShipCustomizationChestShipCustomizationLoadoutEvent: public None
{
public:
	TArray<Str None>                                             Categories;                                        // 0x0(0x10)
};


// Size 0x10
class RequestShipCustomizationChestShipCustomizationEntitlementsEvent: public None
{
public:
	Struct FString                                               ItemCategory;                                      // 0x0(0x10)
};


// Size 0x10
class RequestShipCustomizationChestUnequipShipCustomizationEvent: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
};


// Size 0x10
class RequestShipCustomizationChestEquipShipCustomizationEvent: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
};


// Size 0x20
class VoyageProposedTelemetryEvent: public None
{
public:
	Struct Guid                                                  VoyageProposalSessionId;                           // 0x0(0x10)
	Struct FString                                               VoyageProposalEntitlementId;                       // 0x10(0x10)
};


// Size 0x28
class VoyageDiscardedTelemetryEvent: public None
{
public:
	Struct FString                                               VoyageRecipeAsset;                                 // 0x0(0x10)
	Struct FString                                               CompanyId;                                         // 0x10(0x10)
	int                                                          VoyageRank;                                        // 0x20(0x4)
};


// Size 0x28
class VoyageProposalLostVotingSessionTelemetryEvent: public None
{
public:
	Struct Guid                                                  VoyageProposalSessionId;                           // 0x0(0x10)
	Struct FString                                               VoyageProposalEntitlementId;                       // 0x10(0x10)
	int                                                          NumberOfVotes;                                     // 0x20(0x4)
};


// Size 0x28
class VoyageProposalWonVotingSessionTelemetryEvent: public None
{
public:
	Struct Guid                                                  VoyageProposalSessionId;                           // 0x0(0x10)
	Struct FString                                               VoyageProposalEntitlementId;                       // 0x10(0x10)
	int                                                          NumberOfVotes;                                     // 0x20(0x4)
	int                                                          SessionLength;                                     // 0x24(0x4)
};


// Size 0x28
class PlayerVoyageProposalVoteTelemetryEvent: public None
{
public:
	Struct Guid                                                  VoyageProposalSessionId;                           // 0x0(0x10)
	int                                                          VoyageProposalSlot;                                // 0x10(0x4)
	Struct FString                                               VoyageProposalEntitlementId;                       // 0x18(0x10)
};


// Size 0x18
class BoxedRpcDiscardVoyage: public None
{
public:
	class                                                        VoyageToDiscard;                                   // 0x10(0x8)
};


// Size 0x1
class VoyageInventoryClosedEvent: public None
{
public:
};


// Size 0x28
class VoyageAndTaleProposalsUpdatedEvent: public None
{
public:
	TArray<Struct VoyageProposalsUpdatedEvent>                   VoyageProposalEntitlements;                        // 0x0(0x10)
	TArray<Struct VoyageProposalEntitlements>                    TaleProposalEntitlements;                          // 0x10(0x10)
	bool                                                         VoyageIsActive;                                    // 0x20(0x1)
	bool                                                         TaleIsActive;                                      // 0x21(0x1)
};


// Size 0x10
class VoyageProposalsUpdatedEvent: public None
{
public:
	TArray<Struct ForceCloseVoyageInventoryEvent>                Entitlements;                                      // 0x0(0x10)
};


// Size 0x1
class ForceCloseVoyageInventoryEvent: public None
{
public:
};


// Size 0x1
class OpenVoyageInventoryEvent: public None
{
public:
};


// Size 0x1
class RequestVoyageProposalsEvent: public None
{
public:
};


// Size 0x10
class VoyageProposalDiscardEvent: public None
{
public:
	Struct FString                                               ProposalDesc;                                      // 0x0(0x10)
};


// Size 0x10
class VoyageProposalSelectedEvent: public None
{
public:
	Struct FString                                               ProposalDesc;                                      // 0x0(0x10)
};


// Size 0x1
class ClientBannedHandlerRetrieveDataResponse: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
};


// Size 0x1
class ClientBannedHandlerRetrieveDataRequest: public None
{
public:
};


// Size 0x8
class AthenaPlayerControllerEndingPlayInContestStage: public None
{
public:
	Class AthenaPlayerController*                                Controller;                                        // 0x0(0x8)
};


// Size 0x8
class ArenaSuspensionState: public None
{
public:
	bool                                                         IsUserSuspended;                                   // 0x0(0x1)
	int                                                          SuspensionTimeRemainingInMinutes;                  // 0x4(0x4)
};


// Size 0x4
class SuspensionStatusResponse: public None
{
public:
	int                                                          StrikeCount;                                       // 0x0(0x4)
};


// Size 0x1
class SuspensionStatusRequest: public None
{
public:
};


// Size 0x10
class RandomParticleSystemPicker: public None
{
public:
	TArray<Struct RandomParticleSystemPickerEntry>               Effects;                                           // 0x0(0x10)
};


// Size 0x10
class RandomParticleSystemPickerEntry: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	Class Object*                                                Effect;                                            // 0x8(0x8)
};


// Size 0x10
class DistanceThrottledRandomParticleSystemPicker: public None
{
public:
	TArray<Struct DistanceThrottledRandomParticleSystemPickerEntry> Entries;                                           // 0x0(0x10)
};


// Size 0x20
class DistanceThrottledRandomParticleSystemPickerEntry: public None
{
public:
	float                                                        DistanceInMetres;                                  // 0x0(0x4)
	TArray<Struct DistanceThrottledRandomParticleSystemPickerSurfaceTypeEntry> EffectsBySurfaceType;                              // 0x8(0x10)
	int                                                          MaxNumber;                                         // 0x18(0x4)
};


// Size 0x18
class DistanceThrottledRandomParticleSystemPickerSurfaceTypeEntry: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
	Struct RandomParticleSystemPicker                            Effect;                                            // 0x8(0x10)
};


// Size 0x1c0
class BountyQuestDesc: public None
{
public:
	Class AIBountySpawner*                                       Spawner;                                           // 0x28(0x8)
	Class BountyMapLayout*                                       Layout;                                            // 0x30(0x8)
	Struct TreasureMapTextDesc                                   Location;                                          // 0x38(0x48)
	TArray<Struct Location>                                      Descriptions;                                      // 0x80(0x10)
	TArray<Struct Descriptions>                                  Targets;                                           // 0x90(0x10)
	TArray<Class Targets>                                        BountyRewards;                                     // 0xa0(0x10)
	TArray<class BountyRewardsSpawnData*>                        BountyRewardsSpawnData;                            // 0xb0(0x10)
	Class Landmark*                                              Landmark;                                          // 0xc0(0x8)
	float                                                        IslandRotation;                                    // 0xc8(0x4)
	Struct AIBountySpawnerParams                                 SpawnerGeneratedData;                              // 0xf0(0xc8)
	class                                                        OverrideTreasureMapItemDesc;                       // 0x1b8(0x8)
};


// Size 0x50
class BountyQuestTargetDefeatedNetworkEvent: public None
{
public:
	Struct FText                                                 TargetName;                                        // 0x10(0x38)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x48(0x8)
};


// Size 0x10
class BountyQuestApproachesLandmarkTelemetryEvent: public None
{
public:
	Struct FString                                               LandmarkName;                                      // 0x0(0x10)
};


// Size 0x20
class BountyQuestTargetKilledTelemetryEvent: public None
{
public:
	Struct FString                                               BountyTargetName;                                  // 0x0(0x10)
	Struct Guid                                                  BootyId;                                           // 0x10(0x10)
};


// Size 0x18
class BountyQuestWaveCompletedTelemetryEvent: public None
{
public:
	Struct FString                                               LandmarkName;                                      // 0x0(0x10)
	int                                                          BountyWaveIndex;                                   // 0x10(0x4)
	int                                                          TotalBountyWaves;                                  // 0x14(0x4)
};


// Size 0x20
class QuestStartBountyTelemetryEvent: public None
{
public:
	Struct FString                                               IslandName;                                        // 0x0(0x10)
	Struct FString                                               LandmarkName;                                      // 0x10(0x10)
};


// Size 0x68
class CargoRunQuestDesc: public None
{
public:
	TArray<Class CargoDeliveredTelemetryEvent>                   CrateItemDesc;                                     // 0x50(0x10)
	class                                                        OverrideTreasureMapItemDesc;                       // 0x60(0x8)
};


// Size 0x38
class CargoDeliveredTelemetryEvent: public None
{
public:
	bool                                                         GoldAwarded;                                       // 0x0(0x1)
	Struct Guid                                                  BootyId;                                           // 0x4(0x10)
	byte                                                         BootyType;                                         // 0x14(0x1)
	Struct FString                                               Rarity;                                            // 0x18(0x10)
	int                                                          MaxQuality;                                        // 0x28(0x4)
	int                                                          DeliveredQuality;                                  // 0x2c(0x4)
	bool                                                         DeliveredOnTime;                                   // 0x30(0x1)
};


// Size 0x20
class CargoRunCratePickedUpTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	Struct FString                                               Rarity;                                            // 0x10(0x10)
};


// Size 0x38
class QuestStartCargoRunTelemetryEvent: public None
{
public:
	TArray<Struct CargoRunQuestCrateEntries>                     ContractList;                                      // 0x0(0x10)
	Struct FString                                               DeliveryLocationIslandName;                        // 0x10(0x10)
	Struct FString                                               PickupLocationIslandName;                          // 0x20(0x10)
	int                                                          DeliveryTimeLimitInMinutes;                        // 0x30(0x4)
};


// Size 0x18
class CargoRunQuestCrateEntries: public None
{
public:
	Struct FString                                               Rarity;                                            // 0x0(0x10)
	int                                                          CargoCount;                                        // 0x10(0x4)
};


// Size 0x30
class PlayNpcAnimationNetworkEvent: public None
{
public:
	Class Actor*                                                 TargetActor;                                       // 0x10(0x8)
	struct FName                                                 AnimationNameToPlay;                               // 0x18(0x8)
	class                                                        LocalMusicZone;                                    // 0x20(0x8)
	Class PlaceableReaction*                                     PlaceableReaction;                                 // 0x28(0x8)
};


// Size 0x20
class StopNpcAnimationNetworkEvent: public None
{
public:
	Class Actor*                                                 TargetActor;                                       // 0x10(0x8)
	Class PlaceableReaction*                                     PlaceableReaction;                                 // 0x18(0x8)
};


// Size 0x28
class EmergantVoyageQuestDesc: public None
{
public:
};


// Size 0x28
class MatchmakeQuestDesc: public None
{
public:
};


// Size 0x28
class RewardQuestDesc: public None
{
public:
};


// Size 0x28
class StagingQuestDesc: public None
{
public:
};


// Size 0x1b0
class MerchantQuestDesc: public None
{
public:
	Class MerchantMapLayout*                                     Layout;                                            // 0x28(0x8)
	Struct FText                                                 PickupLocationLocalisedIslandName;                 // 0x30(0x38)
	Struct FText                                                 DeliveryLocationLocalisedIslandName;               // 0x68(0x38)
	Struct TreasureMapTextDesc                                   PickupLocation;                                    // 0xa0(0x48)
	Struct TreasureMapTextDesc                                   DeliveryLocation;                                  // 0xe8(0x48)
	Struct TreasureMapTextDesc                                   DeliverByTimeText;                                 // 0x130(0x48)
	TArray<Struct DeliverByTimeText>                             ItemData;                                          // 0x178(0x10)
	TArray<Struct MerchantItemGroupDesc>                         ItemGroupDescs;                                    // 0x188(0x10)
	int                                                          TimeLimitInMinutes;                                // 0x198(0x4)
	Struct GameTime                                              DeliverByTime;                                     // 0x1a0(0x8)
	class                                                        OverrideTreasureMapItemDesc;                       // 0x1a8(0x8)
};


// Size 0x10
class MerchantItemGroupDesc: public None
{
public:
	TArray<class Items*>                                         Items;                                             // 0x0(0x10)
};


// Size 0x1
class MerchantCratesReadyForCollectionEvent: public None
{
public:
};


// Size 0x18
class MerchantQuestContractExpiredNetworkEvent: public None
{
public:
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x18
class MerchantQuestContractCompleteNetworkEvent: public None
{
public:
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x30
class MerchantQuestCrateFilledNetworkEvent: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x10(0x10)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x20(0x8)
	bool                                                         OnlyPlayAudio;                                     // 0x28(0x1)
};


// Size 0x20
class MerchantCrateAllocatedTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	Struct FString                                               Rarity;                                            // 0x10(0x10)
};


// Size 0x20
class QuestMerchantCrateAllocatedTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	Struct FString                                               Rarity;                                            // 0x10(0x10)
};


// Size 0x48
class MerchantQuestStartTelemetryEvent: public None
{
public:
	Struct FString                                               PickupLocationIslandName;                          // 0x0(0x10)
	Struct FString                                               DeliveryLocationIslandName;                        // 0x10(0x10)
	int                                                          RealTimeLimitInMins;                               // 0x20(0x4)
	Struct FString                                               DeliverByTimeText;                                 // 0x28(0x10)
	TArray<Struct MerchantQuestStartTelemetryEventRequiredItemEntry> ContractList;                                      // 0x38(0x10)
};


// Size 0x18
class MerchantQuestStartTelemetryEventRequiredItemEntry: public None
{
public:
	int                                                          NumItems;                                          // 0x0(0x4)
	Struct FString                                               Rarity;                                            // 0x8(0x10)
};


// Size 0x30
class ClientTallTaleDebugInfoNetworkEvent: public None
{
public:
	Struct TallTaleDebugInfo                                     QuestInfo;                                         // 0x10(0x20)
};


// Size 0x20
class TallTaleDebugInfo: public None
{
public:
	TArray<Str None>                                             StepNames;                                         // 0x0(0x10)
	TArray<Str >                                                 VariableStringBlobs;                               // 0x10(0x10)
};


// Size 0x10
class QuestWeightedDistance: public None
{
public:
	float                                                        Min;                                               // 0x0(0x4)
	float                                                        Max;                                               // 0x4(0x4)
	float                                                        MinWeight;                                         // 0x8(0x4)
	float                                                        MaxWeight;                                         // 0xc(0x4)
};


// Size 0x98
class RiddleQuestDesc: public None
{
public:
	TArray<Struct RiddleQuestGateDesc>                           Gates;                                             // 0x28(0x10)
	float                                                        IslandRotation;                                    // 0x38(0x4)
	Struct Vector                                                TreasureChestWorldSpaceLocation;                   // 0x60(0xc)
	class                                                        TreasureChestDesc;                                 // 0x70(0x8)
	Class ItemSpawnData*                                         TreasureSpawnData;                                 // 0x78(0x8)
	float                                                        DigRadius;                                         // 0x80(0x4)
	Class AIBoobyTrapSpawner*                                    BoobyTrapSpawner;                                  // 0x88(0x8)
	class                                                        OverrideTreasureMapItemDesc;                       // 0x90(0x8)
};


// Size 0x70
class RiddleQuestGateDesc: public None
{
public:
	byte                                                         RiddleLocation;                                    // 0x0(0x1)
	byte                                                         RiddleActionLocationOffset;                        // 0x1(0x1)
	byte                                                         RiddleAction;                                      // 0x2(0x1)
	Struct TreasureMapTextDesc                                   Text;                                              // 0x8(0x48)
	Class Landmark*                                              Landmark;                                          // 0x50(0x8)
	Struct Vector                                                TargetPositionIfNotLandmark;                       // 0x58(0xc)
	struct FName                                                 NonVagueNonUniqueLandmarkPhraseId;                 // 0x64(0x8)
};


// Size 0x28
class RiddleQuestGateStartedTelemetryEvent: public None
{
public:
	byte                                                         RiddleLocation;                                    // 0x0(0x1)
	byte                                                         RiddleActionLocationOffset;                        // 0x1(0x1)
	byte                                                         RiddleAction;                                      // 0x2(0x1)
	Struct FString                                               LandmarkName;                                      // 0x8(0x10)
	Struct FString                                               GateDescription;                                   // 0x18(0x10)
};


// Size 0x10
class QuestStartRiddleTelemetryEvent: public None
{
public:
	Struct FString                                               IslandName;                                        // 0x0(0x10)
};


// Size 0x18
class QuestStartXMarksTheSpotTelemetryEvent: public None
{
public:
	Struct FString                                               IslandName;                                        // 0x0(0x10)
	int                                                          NumTreasures;                                      // 0x10(0x4)
};


// Size 0x10
class QuestPageListPopulator: public None
{
public:
	TArray<class PageListsToUpdate*>                             PageListsToUpdate;                                 // 0x0(0x10)
};


// Size 0x18
class ItemBuriedTaleQuestAutomationEvent: public None
{
public:
	class                                                        ItemBuried;                                        // 0x0(0x8)
	Struct Vector                                                Location;                                          // 0x8(0xc)
};


// Size 0x10
class AggressiveGhostShipEncounterStartFromTaleTelemetryEvent: public None
{
public:
	Struct Guid                                                  EncounterId;                                       // 0x0(0x10)
};


// Size 0x10
class SpawnerCreatedAutomationEvent: public None
{
public:
	Class Actor*                                                 SpawnerLocation;                                   // 0x0(0x8)
	Class AISpawner*                                             Spawner;                                           // 0x8(0x8)
};


// Size 0x10
class VaultAssignedAutomationEvent: public None
{
public:
	Class Actor*                                                 Vault;                                             // 0x0(0x8)
	class                                                        Key;                                               // 0x8(0x8)
};


// Size 0x20
class VoyageProposalCompletedNetworkEvent: public None
{
public:
	TArray<Str None>                                             VoyageProposalIds;                                 // 0x10(0x10)
};


// Size 0x8
class TaleAvailableForCancel: public None
{
public:
	Class VoyageDescDataAsset*                                   TaleData;                                          // 0x0(0x8)
};


// Size 0x8
class VoyageAvailableForCancel: public None
{
public:
	Class VoyageProposalDesc*                                    ProposalDesc;                                      // 0x0(0x8)
};


// Size 0x8
class VoyageWithdrawnEvent: public None
{
public:
	Class PlayerState*                                           Proposer;                                          // 0x0(0x8)
};


// Size 0x30
class TaleProposalVoteSlotUpdatedEvent: public None
{
public:
	Struct ProposedTaleEntry                                     TaleProposal;                                      // 0x0(0x18)
	Class VoyageDescDataAsset*                                   CurrentActiveTale;                                 // 0x18(0x8)
	Struct Guid                                                  CrewId;                                            // 0x20(0x10)
};


// Size 0x18
class VoyageProposalVoteSlotUpdatedEvent: public None
{
public:
	Struct ProposedVoyageEntry                                   Proposal;                                          // 0x0(0x10)
	int                                                          VoteIndex;                                         // 0x10(0x4)
};


// Size 0x18
class VoyageProposedEvent: public None
{
public:
	Class VoyageProposalDesc*                                    ProposalDesc;                                      // 0x0(0x8)
	Class PlayerState*                                           Proposer;                                          // 0x8(0x8)
	bool                                                         AutoVoteOnVoyage;                                  // 0x10(0x1)
};


// Size 0x48
class EventPlayerWithdrewVoyage: public None
{
public:
	Struct FText                                                 Title;                                             // 0x10(0x38)
};


// Size 0x10
class EventBroadcastWwiseEventToInstigatorsCrew: public None
{
public:
	Class Actor*                                                 Instigator;                                        // 0x0(0x8)
	Class WwiseEvent*                                            WwiseEvent;                                        // 0x8(0x8)
};


// Size 0x1
class SlidingDoorOpenedEvent: public None
{
public:
};


// Size 0x1
class SwingDoorOpenedEvent: public None
{
public:
};


// Size 0x1
class NarrationRequestedEvent: public None
{
public:
};


// Size 0x40
class NPCOnSurfaceCannonManagerCrewSizeSettings: public None
{
public:
	int                                                          CrewSize;                                          // 0x0(0x4)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenShots;                                  // 0x8(0x30)
	float                                                        ChanceOfNearMiss;                                  // 0x38(0x4)
};


// Size 0x40
class NPCOnSurfaceCannonManagerCannon: public None
{
public:
	Class Cannon*                                                Cannon;                                            // 0x0(0x8)
	Struct Transform                                             NearestLocation;                                   // 0x10(0x30)
};


// Size 0x18
class NPCOnSurfaceShipSizeFloodedLevels: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	TArray<Struct NPCOnSurfaceFloodedLevel>                      FloodedLevels;                                     // 0x8(0x10)
};


// Size 0x8
class NPCOnSurfaceFloodedLevel: public None
{
public:
	float                                                        NormalisedWaterLevel;                              // 0x0(0x4)
	byte                                                         FloodedLevel;                                      // 0x4(0x1)
};


// Size 0x18
class NPCOnSurfaceLocationGroup: public None
{
public:
	struct FName                                                 GroupName;                                         // 0x0(0x8)
	TArray<Struct NPCOnSurfaceLocationsEntry>                    LocationsEntries;                                  // 0x8(0x10)
};


// Size 0x78
class NPCOnSurfaceLocationsEntry: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	struct FName                                                 SpawnLocationsName;                                // 0x4(0x8)
	byte                                                         InvalidWhen;                                       // 0xc(0x1)
	float                                                        FadeOutDelay;                                      // 0x30(0x4)
	float                                                        AlternateFadeOutDelay;                             // 0x34(0x4)
	bool                                                         CheckPlayerIsNearby;                               // 0x38(0x1)
	bool                                                         UsesActiveAnimations;                              // 0x39(0x1)
	struct FName                                                 PlayerNearbyVOGroupName;                           // 0x3c(0x8)
	Struct WeightedProbabilityRangeOfRanges                      PlayerNearbyVOCooldown;                            // 0x48(0x30)
};


// Size 0xd8
class NPCOnSurfaceStateInfo: public None
{
public:
	struct FName                                                 StateName;                                         // 0x0(0x8)
	struct FName                                                 LocationGroupName;                                 // 0x8(0x8)
	bool                                                         PeriodicallyChangeLocation;                        // 0x10(0x1)
	bool                                                         ChangeLocationEvenIfPlayerIsNearby;                // 0x11(0x1)
	Struct WeightedProbabilityRangeOfRanges                      ChangeLocationTime;                                // 0x18(0x30)
	bool                                                         HideWhenInDanger;                                  // 0x48(0x1)
	float                                                        InternalWaterWarningDepth;                         // 0x4c(0x4)
	struct FName                                                 InternalWaterWarningVOGroupName;                   // 0x50(0x8)
	Struct WeightedProbabilityRangeOfRanges                      InternalWaterWarningVOCooldown;                    // 0x58(0x30)
	bool                                                         UseCannons;                                        // 0x88(0x1)
	bool                                                         DespawnIfNoCrewOnShip;                             // 0x89(0x1)
	struct FName                                                 AppearVOGroupName;                                 // 0x8c(0x8)
	TArray<Struct NPCOnDespawnVOEntry>                           DespawnVOGroupEntries;                             // 0x98(0x10)
	TArray<Struct DespawnVOGroupEntries>                         OnActorDamagedReactions;                           // 0xa8(0x10)
	TArray<Struct NPCReactionVOEntry>                            OnActorKilledReactions;                            // 0xb8(0x10)
	TArray<Struct NPCReactionDualActorVOEntry>                   OnActorSpawnedActorReactions;                      // 0xc8(0x10)
};


// Size 0x78
class NPCReactionDualActorVOEntry: public None
{
public:
	struct FName                                                 VOGroupName;                                       // 0x40(0x8)
	Struct WeightedProbabilityRangeOfRanges                      VOCooldown;                                        // 0x48(0x30)
};


// Size 0x58
class NPCReactionVOEntry: public None
{
public:
	struct FName                                                 VOGroupName;                                       // 0x20(0x8)
	Struct WeightedProbabilityRangeOfRanges                      VOCooldown;                                        // 0x28(0x30)
};


// Size 0xc
class NPCOnDespawnVOEntry: public None
{
public:
	byte                                                         DespawnReason;                                     // 0x0(0x1)
	struct FName                                                 VOGroupName;                                       // 0x4(0x8)
};


// Size 0x18
class NPCOnSurfaceVOGroup: public None
{
public:
	struct FName                                                 GroupName;                                         // 0x0(0x8)
	TArray<Struct NPCOnSurfaceVOEntry>                           VOEntries;                                         // 0x8(0x10)
};


// Size 0x10
class NPCOnSurfaceVOEntry: public None
{
public:
	Class SceneDialogueData*                                     DialogueData;                                      // 0x0(0x8)
	Class WwiseEvent*                                            VOEvent;                                           // 0x8(0x8)
};


// Size 0x8
class EventReceiveOpenableItemComponentState: public None
{
public:
	Class OpenableItemComponent*                                 Source;                                            // 0x0(0x8)
};


// Size 0x1
class EventOpenableItemAnimationFinished: public None
{
public:
};


// Size 0x2
class EventOpenableItemStateChanged: public None
{
public:
};


// Size 0x1
class EventNotifyOpenableItemState: public None
{
public:
};


// Size 0x40
class OpenableItemMaterialAnimationReactionComponentAnimationNameAndS: public None
{
public:
	struct FName                                                 Open;                                              // 0x0(0x8)
	struct FName                                                 OpeningFirstTime;                                  // 0x8(0x8)
	Class WwiseEvent*                                            OpeningFirstTimeSfx;                               // 0x10(0x8)
	struct FName                                                 Opening;                                           // 0x18(0x8)
	Class WwiseEvent*                                            OpeningSfx;                                        // 0x20(0x8)
	struct FName                                                 Closing;                                           // 0x28(0x8)
	Class WwiseEvent*                                            ClosingSfx;                                        // 0x30(0x8)
	struct FName                                                 Closed;                                            // 0x38(0x8)
};


// Size 0x40
class OpenableItemMeshAnimationReactionComponentAnimationNameAndSfxCu: public None
{
public:
	struct FName                                                 Open;                                              // 0x0(0x8)
	struct FName                                                 OpeningFirstTime;                                  // 0x8(0x8)
	Class WwiseEvent*                                            OpeningFirstTimeSfx;                               // 0x10(0x8)
	struct FName                                                 Opening;                                           // 0x18(0x8)
	Class WwiseEvent*                                            OpeningSfx;                                        // 0x20(0x8)
	struct FName                                                 Closing;                                           // 0x28(0x8)
	Class WwiseEvent*                                            ClosingSfx;                                        // 0x30(0x8)
	struct FName                                                 Closed;                                            // 0x38(0x8)
};


// Size 0x80
class TradeRouteMapData: public None
{
public:
	Struct InterpCurveVector2D                                   TradeRoutePath;                                    // 0x48(0x18)
	Struct Vector2D                                              TradeRoutePathOffset;                              // 0x60(0x8)
	float                                                        TradeRoutePathSpacing;                             // 0x68(0x4)
	float                                                        TradeRoutePathSegmentTextureWidth;                 // 0x6c(0x4)
	float                                                        TradeRoutePathSegmentTextureLength;                // 0x70(0x4)
	bool                                                         NormalizeSplinePointSpacing;                       // 0x74(0x1)
	float                                                        NormalizeAdjustment;                               // 0x78(0x4)
	bool                                                         IgnoreFirstPoint;                                  // 0x7c(0x1)
};


// Size 0x48
class RegionMapData: public None
{
public:
	Struct Vector2D                                              RegionCenter;                                      // 0x0(0x8)
	Struct Vector2D                                              RegionMin;                                         // 0x8(0x8)
	Struct Vector2D                                              RegionMax;                                         // 0x10(0x8)
	Struct Vector2D                                              RegionExtents;                                     // 0x18(0x8)
	Struct Vector2D                                              CenterOffset;                                      // 0x20(0x8)
	float                                                        DistanceScaling;                                   // 0x28(0x4)
	float                                                        MapRotation;                                       // 0x2c(0x4)
	float                                                        GlobalTextureScaling;                              // 0x30(0x4)
	TArray<Struct RegionMapIslandData>                           IslandData;                                        // 0x38(0x10)
};


// Size 0x24
class RegionMapIslandData: public None
{
public:
	Struct IslandSelectionType                                   Island;                                            // 0x0(0x8)
	bool                                                         RenderToMap;                                       // 0x8(0x1)
	float                                                        Scale;                                             // 0xc(0x4)
	float                                                        RotationOffset;                                    // 0x10(0x4)
	Struct Vector2D                                              LocationOffset;                                    // 0x14(0x8)
	bool                                                         Selectable;                                        // 0x1c(0x1)
	int                                                          MaxNumSelections;                                  // 0x20(0x4)
};


// Size 0x8
class IslandSelectionType: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
};


// Size 0x10
class ClueSiteTypeToMarkId: public None
{
public:
	class                                                        ClueSiteType;                                      // 0x0(0x8)
	class                                                        MapMarkId;                                         // 0x8(0x8)
};


// Size 0x10
class TradeRouteMapTextLayout: public None
{
public:
	TArray<Struct TradeRouteMapTextData>                         TextFields;                                        // 0x0(0x10)
};


// Size 0x78
class TradeRouteMapTextData: public None
{
public:
	Struct FText                                                 Text;                                              // 0x0(0x38)
	byte                                                         TextId;                                            // 0x38(0x1)
	Struct TreasureMapWidgetText                                 TextLayout;                                        // 0x3c(0x38)
};


// Size 0x10
class ActorId: public None
{
public:
	Struct FString                                               ActorLocalName;                                    // 0x0(0x10)
};


// Size 0x28
class WeakActorHandle: public None
{
public:
	Struct ActorId                                               ActorId;                                           // 0x0(0x10)
	Struct NetActorPtr                                           NetActorPtr;                                       // 0x10(0x14)
	bool                                                         Valid;                                             // 0x24(0x1)
};


// Size 0x4
class EventActorRoleChanged: public None
{
public:
};


// Size 0x10
class EventAIOnDelayedAssignedMeshConsumed: public None
{
public:
	Class SkeletalMeshComponent*                                 MeshComponent;                                     // 0x0(0x8)
	Class SkeletalMesh*                                          ConsumedMesh;                                      // 0x8(0x8)
};


// Size 0x18
class EntitlementMapEntry: public None
{
public:
	struct FName                                                 Identifier;                                        // 0x0(0x8)
	Struct StringClassReference                                  EntitlementDesc;                                   // 0x8(0x10)
};


// Size 0x28
class FeaturedEntitlements: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	Struct StringAssetReference                                  EntitlementsAsset;                                 // 0x8(0x10)
	Struct StringAssetReference                                  SupplementalEntitlementMap;                        // 0x18(0x10)
};


// Size 0x18
class UnlockableEntitlementCategory: public None
{
public:
	struct FName                                                 Category;                                          // 0x0(0x8)
	TArray<Class Category>                                       Entitlements;                                      // 0x8(0x10)
};


// Size 0x1
class PlayerEntitlementUpdatedEvent: public None
{
public:
};


// Size 0x78
class EventPlayerPirateIdentityDeemedInactive: public None
{
public:
};


// Size 0x78
class EventPlayerPirateIdentityInvalidated: public None
{
public:
};


// Size 0x78
class EventPlayerPirateIdentityReady: public None
{
public:
};


// Size 0x28
class DeveloperTelemetryPayload: public None
{
public:
	Struct FString                                               EventTag;                                          // 0x0(0x10)
	Struct JsonObjectWrapper                                     Json;                                              // 0x10(0x18)
};


// Size 0x40
class BaseTelemetryFragment: public None
{
public:
	Struct FString                                               DateLogged;                                        // 0x0(0x10)
	Struct FString                                               Sandbox;                                           // 0x10(0x10)
	Struct FString                                               FeatureConfigHash;                                 // 0x20(0x10)
	Struct FString                                               StampId;                                           // 0x30(0x10)
};


// Size 0x78
class ClientTelemetryFragment: public None
{
public:
	Struct Guid                                                  TitleSession;                                      // 0x0(0x10)
	Struct FString                                               UserId;                                            // 0x10(0x10)
	byte                                                         PlatformId;                                        // 0x20(0x1)
	byte                                                         DeviceSpecScore;                                   // 0x21(0x1)
	Struct FString                                               DeviceID;                                          // 0x28(0x10)
	Struct Guid                                                  PlayerGameId;                                      // 0x38(0x10)
	Struct FString                                               BuildId;                                           // 0x48(0x10)
	Struct FString                                               ClientPlayMode;                                    // 0x58(0x10)
	Struct FString                                               PlayModeState;                                     // 0x68(0x10)
};


// Size 0x28
class ClientDeveloperTelemetryEvent: public None
{
public:
};


// Size 0x8
class PlayerBaseTelemetryFragmentInput: public None
{
public:
};


// Size 0x48
class PlayerBaseTelemetryFragment: public None
{
public:
	Struct Guid                                                  PlayerGameId;                                      // 0x0(0x10)
	Struct FString                                               UserId;                                            // 0x10(0x10)
	Struct FString                                               PirateId;                                          // 0x20(0x10)
	byte                                                         PlatformId;                                        // 0x30(0x1)
	Struct FString                                               DeviceID;                                          // 0x38(0x10)
};


// Size 0x8
class PlayerPositionTelemetryFragmentInput: public None
{
public:
};


// Size 0x20
class PlayerPositionTelemetryFragment: public None
{
public:
	Struct Vector                                                Position;                                          // 0x0(0xc)
	Struct FString                                               WorldLocationName;                                 // 0x10(0x10)
};


// Size 0x40
class ServerTenancyTelemetryFragment: public None
{
public:
	Struct FString                                               VmId;                                              // 0x0(0x10)
	Struct FString                                               InstanceId;                                        // 0x10(0x10)
	Struct FString                                               ClusterId;                                         // 0x20(0x10)
	Struct FString                                               GsiId;                                             // 0x30(0x10)
};


// Size 0x60
class ServerTelemetryFragment: public None
{
public:
	Struct Guid                                                  ServerSessionId;                                   // 0x4(0x10)
	Struct FString                                               ServerBuildId;                                     // 0x18(0x10)
	Struct FString                                               ServerLocation;                                    // 0x28(0x10)
	Struct FString                                               ServerPlayMode;                                    // 0x38(0x10)
	Struct FString                                               PlayModeState;                                     // 0x48(0x10)
	bool                                                         ServerIsActive;                                    // 0x58(0x1)
	bool                                                         ServerIsXboxPadOnlySession;                        // 0x59(0x1)
};


// Size 0x28
class PlayerDeveloperTelemetryEvent: public None
{
public:
};


// Size 0x28
class ServerDeveloperTelemetryEvent: public None
{
public:
};


// Size 0x10
class PlayerAggregatePositionTelemetryFragmentInput: public None
{
public:
	TArray<Struct PlayerAggregatePositionTelemetryFragment>      PositionData;                                      // 0x0(0x10)
};


// Size 0x10
class PlayerAggregatePositionTelemetryFragment: public None
{
public:
	TArray<Struct RPCTelemetryFragment>                          PositionData;                                      // 0x0(0x10)
};


// Size 0xc0
class RPCTelemetryFragment: public None
{
public:
	Struct RPCStats                                              RPCStats;                                          // 0x0(0xc0)
};


// Size 0x40
class TeamCityBuildFragment: public None
{
public:
	int                                                          Id;                                                // 0x0(0x4)
	int                                                          Changelist;                                        // 0x4(0x4)
	Struct FString                                               BuildTypeId;                                       // 0x8(0x10)
	Struct FString                                               StartedBy;                                         // 0x18(0x10)
	bool                                                         Personal;                                          // 0x28(0x1)
	Struct FString                                               StreamName;                                        // 0x30(0x10)
};


// Size 0x30
class TelemetryFragmentListenerHandle: public None
{
public:
	Class ScriptStruct*                                          FragmentType;                                      // 0x8(0x8)
};


// Size 0x18
class StoryInfoModel: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	Struct DateTime                                              StartTime;                                         // 0x8(0x8)
	Struct DateTime                                              EndTime;                                           // 0x10(0x8)
};


// Size 0x28
class DebugStoryInfoModelSchedule: public None
{
public:
	TArray<Struct CampaignGoalProgressEvent>                     Stories;                                           // 0x0(0x10)
	Struct Timespan                                              RepeatDuration;                                    // 0x10(0x8)
	Struct Timespan                                              RepeatDelay;                                       // 0x18(0x8)
	bool                                                         AlwaysRelevant;                                    // 0x20(0x1)
};


// Size 0xb0
class CampaignGoalProgressEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct Guid                                                  GoalId;                                            // 0x90(0x10)
	Struct DateTime                                              ActiveFrom;                                        // 0xa0(0x8)
	Struct DateTime                                              ActiveUntil;                                       // 0xa8(0x8)
};


// Size 0x70
class CampaignGoalModel: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct DateTime                                              ActiveFrom;                                        // 0x10(0x8)
	Struct DateTime                                              ActiveUntil;                                       // 0x18(0x8)
};


// Size 0xb0
class CampaignGoalProgressMessage: public None
{
public:
	Struct Guid                                                  GoalId;                                            // 0x18(0x10)
	Struct DateTime                                              ActiveFrom;                                        // 0x28(0x8)
	Struct DateTime                                              ActiveUtil;                                        // 0x30(0x8)
	Struct PirateIdentity                                        Pirate;                                            // 0x38(0x78)
};


// Size 0x8
class CaptaincyRequestIsValidCaptaincySessionModel: public None
{
public:
	float                                                        ShipX;                                             // 0x0(0x4)
	float                                                        ShipY;                                             // 0x4(0x4)
};


// Size 0x1
class CaptaincyRequestSessionTokenInvalidationModel: public None
{
public:
};


// Size 0x10
class CaptaincyReponseSessionTokenModel: public None
{
public:
	Struct FString                                               SessionToken;                                      // 0x0(0x10)
};


// Size 0x10
class CaptaincyRequestSessionTokenModel: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
};


// Size 0x10
class CommodityDemandModel: public None
{
public:
	TArray<Struct RemoteCommodityDemandData>                     NPCTradeRouteMultipliers;                          // 0x0(0x10)
};


// Size 0x38
class RemoteCommodityDemandData: public None
{
public:
	struct FName                                                 TradeRouteId;                                      // 0x0(0x8)
	TArray<Struct PeriodicCommodityMultipliers>                  TradeRoutes;                                       // 0x8(0x10)
	Struct DateTime                                              OverrideFromDate;                                  // 0x18(0x8)
	Struct DateTime                                              OverrideToDate;                                    // 0x20(0x8)
	TArray<Struct CommodityDemandMultipliers>                    OverrideMultipliers;                               // 0x28(0x10)
};


// Size 0x18
class CommodityDemandMultipliers: public None
{
public:
	struct FName                                                 RewardId;                                          // 0x0(0x8)
	TArray<Struct NPCDemandMultiplier>                           NPCMultipliers;                                    // 0x8(0x10)
};


// Size 0xc
class NPCDemandMultiplier: public None
{
public:
	struct FName                                                 NPCId;                                             // 0x0(0x8)
	float                                                        Multiplier;                                        // 0x8(0x4)
};


// Size 0x20
class PeriodicCommodityMultipliers: public None
{
public:
	Struct DateTime                                              DateFrom;                                          // 0x0(0x8)
	Struct DateTime                                              DateTo;                                            // 0x8(0x8)
	TArray<Struct DateTo>                                        Rewards;                                           // 0x10(0x10)
};


// Size 0x90
class EmissaryLeaderboardScoreUpdatedEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	struct FName                                                 EmissaryAffiliation;                               // 0x78(0x8)
};


// Size 0x90
class LeaderboardScoreUpdateMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	struct FName                                                 EmissaryAffiliation;                               // 0x78(0x8)
};


// Size 0x88
class NoteDeletedEvent: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct Guid                                                  NoteId;                                            // 0x78(0x10)
};


// Size 0x88
class NoteDeletedMessage: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
	Struct Guid                                                  NoteId;                                            // 0x78(0x10)
};


// Size 0x14
class NotesManagementAddNoteScheduleResponseModel: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
	Struct Guid                                                  ScheduleId;                                        // 0x4(0x10)
};


// Size 0x40
class NotesManagementRemoteServiceAddNoteScheduleModel: public None
{
public:
	Struct Guid                                                  NoteId;                                            // 0x0(0x10)
	Struct DateTime                                              ActiveFrom;                                        // 0x10(0x8)
	Struct DateTime                                              ActiveTo;                                          // 0x18(0x8)
	TArray<Str >                                                 CompletionEventIds;                                // 0x20(0x10)
	Struct FString                                               RewardId;                                          // 0x30(0x10)
};


// Size 0x14
class NotesManagementAddNoteResponseModel: public None
{
public:
	bool                                                         Success;                                           // 0x0(0x1)
	Struct Guid                                                  NoteId;                                            // 0x4(0x10)
};


// Size 0x20
class NotesManagementRemoteServiceAddNoteModel: public None
{
public:
	Struct FString                                               Type;                                              // 0x0(0x10)
	TArray<Struct NotesManagementRemoteServiceNoteTextModel>     NoteText;                                          // 0x10(0x10)
};


// Size 0x30
class NotesManagementRemoteServiceNoteTextModel: public None
{
public:
	Struct FString                                               Locale;                                            // 0x0(0x10)
	Struct FString                                               Title;                                             // 0x10(0x10)
	Struct FString                                               Text;                                              // 0x20(0x10)
};


// Size 0x10
class CompletionEventsRemoteServiceModel: public None
{
public:
	TArray<Str None>                                             CompletionEvents;                                  // 0x0(0x10)
};


// Size 0x10
class NotesRemoteServiceModel: public None
{
public:
	TArray<Struct NotesRemoteServiceNoteDetailModel>             Notes;                                             // 0x0(0x10)
};


// Size 0x40
class NotesRemoteServiceNoteDetailModel: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FString                                               NoteType;                                          // 0x10(0x10)
	Struct FString                                               Title;                                             // 0x20(0x10)
	Struct FString                                               Note;                                              // 0x30(0x10)
};


// Size 0x88
class NotesRemoteServiceNoteModel: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct DateTime                                              ActiveFromUtc;                                     // 0x10(0x8)
	Struct DateTime                                              ActiveToUtc;                                       // 0x18(0x8)
	bool                                                         IsRead;                                            // 0x20(0x1)
	TArray<Str >                                                 CompletionEventIds;                                // 0x28(0x10)
};


// Size 0x58
class PromptsCounterModel: public None
{
public:
	Struct DateTime                                              NowUtc;                                            // 0x50(0x8)
};


// Size 0x10
class DefinitionUpdatedMessage: public None
{
public:
	Struct FString                                               ContentHash;                                       // 0x0(0x10)
};


// Size 0xa0
class SeasonRewardEarnedMessage: public None
{
public:
	Struct PirateIdentity                                        Pirate;                                            // 0x0(0x78)
	Struct Guid                                                  SeasonId;                                          // 0x78(0x10)
	bool                                                         MultipleRewards;                                   // 0x88(0x1)
	TArray<Struct MultipleRewards>                               Rewards;                                           // 0x90(0x10)
};


// Size 0xa0
class LevelCompletionMessage: public None
{
public:
	Struct PirateIdentity                                        Pirate;                                            // 0x0(0x78)
	Struct Guid                                                  SeasonId;                                          // 0x78(0x10)
	int                                                          Level;                                             // 0x88(0x4)
	int                                                          TimeSpentInLevel;                                  // 0x8c(0x4)
	int                                                          Tier;                                              // 0x90(0x4)
	int                                                          TimeSpentInTier;                                   // 0x94(0x4)
	bool                                                         TierCompleted;                                     // 0x98(0x1)
	bool                                                         SeasonCompleted;                                   // 0x99(0x1)
};


// Size 0xb0
class SeasonGoalCompletionMessage: public None
{
public:
	Struct PirateIdentity                                        Pirate;                                            // 0x0(0x78)
	Struct Guid                                                  SeasonId;                                          // 0x78(0x10)
	Struct Guid                                                  GoalId;                                            // 0x88(0x10)
	byte                                                         GoalType;                                          // 0x98(0x1)
	Struct Guid                                                  GoalGroupId;                                       // 0x9c(0x10)
};


// Size 0xb8
class SeasonGoalProgressionMessage: public None
{
public:
	Struct PirateIdentity                                        Pirate;                                            // 0x0(0x78)
	int                                                          PreviousProgress;                                  // 0x78(0x4)
	int                                                          CurrentProgress;                                   // 0x7c(0x4)
	int                                                          CompletionThreshold;                               // 0x80(0x4)
	Struct Guid                                                  SeasonId;                                          // 0x84(0x10)
	Struct Guid                                                  GoalId;                                            // 0x94(0x10)
	byte                                                         GoalType;                                          // 0xa4(0x1)
	Struct Guid                                                  GoalGroupId;                                       // 0xa8(0x10)
};


// Size 0x10
class SeasonInfoModelContainer: public None
{
public:
	TArray<Struct SeasonInfoModel>                               Seasons;                                           // 0x0(0x10)
};


// Size 0x70
class SeasonInfoModel: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FString                                               ThemeId;                                           // 0x10(0x10)
	Struct DateTime                                              ActiveFrom;                                        // 0x20(0x8)
	Struct DateTime                                              ActiveUntil;                                       // 0x28(0x8)
	Struct FString                                               LocalizedTitle;                                    // 0x30(0x10)
	TArray<Struct SeasonTierInfo>                                Tiers;                                             // 0x40(0x10)
	TArray<Struct SeasonChallengeGroupInfo>                      ChallengeGroups;                                   // 0x50(0x10)
	TArray<Struct SeasonGoalInfo>                                IndividualGoals;                                   // 0x60(0x10)
};


// Size 0x38
class SeasonGoalInfo: public None
{
public:
	Struct Guid                                                  GoalId;                                            // 0x0(0x10)
	Struct FString                                               XPGain;                                            // 0x18(0x10)
	Struct FString                                               LocalizedTitle;                                    // 0x28(0x10)
};


// Size 0x40
class SeasonChallengeGroupInfo: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct FString                                               LocalizedTitle;                                    // 0x10(0x10)
	Struct FString                                               LocalizedCopy;                                     // 0x20(0x10)
	TArray<Struct SeasonChallengeInfo>                           Challenges;                                        // 0x30(0x10)
};


// Size 0x68
class SeasonChallengeInfo: public None
{
public:
	Struct Guid                                                  GoalId;                                            // 0x0(0x10)
	Struct FString                                               XPGain;                                            // 0x18(0x10)
	Struct FString                                               Category;                                          // 0x28(0x10)
	Struct FString                                               LocalizedTitle;                                    // 0x38(0x10)
	Struct FString                                               LocalizedCopy;                                     // 0x48(0x10)
	TArray<Struct LocalizedCopy>                                 Goals;                                             // 0x58(0x10)
};


// Size 0x18
class SeasonTierInfo: public None
{
public:
	int                                                          Number;                                            // 0x0(0x4)
	Struct FString                                               LocalizedTitle;                                    // 0x8(0x10)
};


// Size 0x1
class ForceStoryServiceRefreshEvent: public None
{
public:
};


// Size 0x1
class ForceStoryServiceRefreshMessage: public None
{
public:
};


// Size 0x38
class LoginTokenServiceResultEvent: public None
{
public:
};


// Size 0x18
class LoginTokenServiceRequestTokenEvent: public None
{
public:
};


// Size 0x78
class EventAthenaLocalPlayerPirateIdentitySet: public None
{
public:
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x0(0x78)
};


// Size 0x1
class EventAthenaLocalPlayerRequestRequiredControllersConnectedRespon: public None
{
public:
	bool                                                         ControllerConnected;                               // 0x0(0x1)
};


// Size 0x1
class EventAthenaLocalPlayerRequestRequiredControllersConnected: public None
{
public:
};


// Size 0x1
class EventLocalPrimaryPlayerReset: public None
{
public:
};


// Size 0x1
class EventAthenaLocalPlayerFocalUserSet: public None
{
public:
	bool                                                         FocalUserSet;                                      // 0x0(0x1)
};


// Size 0x1
class EventPrimaryPlayerProfileDisconnected: public None
{
public:
};


// Size 0x1
class EventPrimaryPlayerProfileConnected: public None
{
public:
};


// Size 0x4
class EventAthenaLocalPlayerControllerPairingChanged: public None
{
public:
	int                                                          ControllerId;                                      // 0x0(0x4)
};


// Size 0x1
class EventHideControllerDisconnectedUI: public None
{
public:
};


// Size 0x1
class EventShowControllerDisconnectedUI: public None
{
public:
};


// Size 0x4
class EventAthenaLocalPlayerControllerDisconnected: public None
{
public:
	int                                                          ControllerId;                                      // 0x0(0x4)
};


// Size 0x4
class EventAthenaLocalPlayerControllerConnected: public None
{
public:
	int                                                          ControllerId;                                      // 0x0(0x4)
};


// Size 0x1
class EventAthenaLocalPlayerClearControllerId: public None
{
public:
};


// Size 0x1
class EventAthenaLocalPlayerControllerTypeOverride: public None
{
public:
	byte                                                         ControllerType;                                    // 0x0(0x1)
};


// Size 0x1
class EventAthenaLocalPlayerControllerTypeRequest: public None
{
public:
};


// Size 0x1
class EventAthenaLocalPlayerControllerTypeChange: public None
{
public:
	byte                                                         ControllerType;                                    // 0x0(0x1)
};


// Size 0x4
class EventAthenaLocalPlayerSetControllerId: public None
{
public:
	int                                                          ControllerId;                                      // 0x0(0x4)
};


// Size 0x10
class AimSensitivitySettingsDefaults: public None
{
public:
	TArray<Struct AimSensitivitySettingsEntry>                   Entries;                                           // 0x0(0x10)
};


// Size 0x1c
class AimSensitivitySettingsEntry: public None
{
public:
	byte                                                         SettingCategory;                                   // 0x0(0x1)
	Struct AimSensitivitySettingParams                           SettingParams_Mouse;                               // 0x4(0xc)
	Struct AimSensitivitySettingParams                           SettingParams_Controller;                          // 0x10(0xc)
};


// Size 0x1
class LocalisationChangedEvent: public None
{
public:
};


// Size 0x50
class EventUserGameSettingsRadialMappings: public None
{
public:
	struct FName                                                 RadialSlotIndex0SelectedKeyboard;                  // 0x0(0x8)
	struct FName                                                 RadialSlotIndex1SelectedKeyboard;                  // 0x8(0x8)
	struct FName                                                 RadialSlotIndex2SelectedKeyboard;                  // 0x10(0x8)
	struct FName                                                 RadialSlotIndex3SelectedKeyboard;                  // 0x18(0x8)
	struct FName                                                 RadialSlotIndex4SelectedKeyboard;                  // 0x20(0x8)
	struct FName                                                 RadialSlotIndex5SelectedKeyboard;                  // 0x28(0x8)
	struct FName                                                 RadialSlotIndex6SelectedKeyboard;                  // 0x30(0x8)
	struct FName                                                 RadialSlotIndex7SelectedKeyboard;                  // 0x38(0x8)
	struct FName                                                 RadialSlotClockwise;                               // 0x40(0x8)
	struct FName                                                 RadialSlotCounterClockwise;                        // 0x48(0x8)
};


// Size 0x1
class EventUserGameSettingsRadialMappingsRequest: public None
{
public:
};


// Size 0xc
class EventUserGameSettingsFloatChanged: public None
{
public:
	struct FName                                                 KeyName;                                           // 0x0(0x8)
	float                                                        Value;                                             // 0x8(0x4)
};


// Size 0xc
class EventUserGameSettingsIntegerChanged: public None
{
public:
	struct FName                                                 KeyName;                                           // 0x0(0x8)
	int                                                          Value;                                             // 0x8(0x4)
};


// Size 0xc
class EventUserGameSettingsBooleanChanged: public None
{
public:
	struct FName                                                 KeyName;                                           // 0x0(0x8)
	bool                                                         Value;                                             // 0x8(0x1)
};


// Size 0x8
class EventResetSettingsGroup: public None
{
public:
	struct FName                                                 SettingsGroupNameToReset;                          // 0x0(0x8)
};


// Size 0x18
class EventRegisterSettingsGroup: public None
{
public:
	struct FName                                                 SettingsGroupName;                                 // 0x0(0x8)
	TArray<Struct FName>                                         SettingsGroupSettings;                             // 0x8(0x10)
};


// Size 0x3
class EventUserGameSettingsResetToDefaultBindings: public None
{
public:
	byte                                                         ControllerTypeToReset;                             // 0x0(0x1)
	bool                                                         ResetActions;                                      // 0x1(0x1)
	bool                                                         ResetAxes;                                         // 0x2(0x1)
};


// Size 0x20
class EventUserGameSettingsSetKeyBindingToInvalid: public None
{
public:
	byte                                                         BindingSet;                                        // 0x0(0x1)
	Struct FString                                               BindingName;                                       // 0x8(0x10)
	byte                                                         ControllerType;                                    // 0x18(0x1)
};


// Size 0x28
class EventUserGameSettingsSetKeyBinding: public None
{
public:
	byte                                                         BindingSet;                                        // 0x0(0x1)
	Struct FString                                               BindingName;                                       // 0x8(0x10)
	Struct FString                                               KeyName;                                           // 0x18(0x10)
};


// Size 0xc
class EventUserGameSettingsSetInteger: public None
{
public:
	struct FName                                                 KeyName;                                           // 0x0(0x8)
	int                                                          Value;                                             // 0x8(0x4)
};


// Size 0xc
class EventUserGameSettingsSetFloat: public None
{
public:
	struct FName                                                 KeyName;                                           // 0x0(0x8)
	float                                                        Value;                                             // 0x8(0x4)
};


// Size 0xc
class EventUserGameSettingsSetBoolean: public None
{
public:
	struct FName                                                 KeyName;                                           // 0x0(0x8)
	bool                                                         Value;                                             // 0x8(0x1)
};


// Size 0x28
class EventGetAllKeybindingsResponse: public None
{
public:
	TArray<Struct EventGetAllKeybindingsRequest>                 ActionBindings;                                    // 0x0(0x10)
	TArray<Struct ActionBindings>                                AxisBindings;                                      // 0x10(0x10)
	int                                                          DefaultKeyboardLayout;                             // 0x20(0x4)
};


// Size 0x1
class EventGetAllKeybindingsRequest: public None
{
public:
};


// Size 0x1
class EventHdrSettingsVisible: public None
{
public:
	bool                                                         Visible;                                           // 0x0(0x1)
};


// Size 0x1
class EventsRequestAccessibilitySettingsReset: public None
{
public:
};


// Size 0x1
class EventSaveUserGameSettingsCompleted: public None
{
public:
};


// Size 0x1
class EventSaveUserGameSettingsRequest: public None
{
public:
};


// Size 0x180
class EventUserGameSettingsResponse: public None
{
public:
	Struct PersistentUserGameSettings                            CurrentSettings;                                   // 0x0(0x180)
};


// Size 0x1
class EventUserGameSettingsRequest: public None
{
public:
};


// Size 0x8
class EventUserGameSettingsSingleChange: public None
{
public:
	struct FName                                                 SettingName;                                       // 0x0(0x8)
};


// Size 0x1
class EventUserGameSettingsAllChanged: public None
{
public:
};


// Size 0x18
class ResettableSettingsGroup: public None
{
public:
	struct FName                                                 SettingsGroupName;                                 // 0x0(0x8)
	TArray<Struct FName>                                         SettingsNames;                                     // 0x8(0x10)
};


// Size 0x10
class ResettableUserSettingData: public None
{
public:
};


// Size 0x30
class UIKeyBindingOptionSelectedTelemetryEvent: public None
{
public:
	Struct FString                                               BindingSet;                                        // 0x0(0x10)
	Struct KeyBinding                                            Value;                                             // 0x10(0x20)
};


// Size 0x18
class UIIntegerOptionSelectedTelemetryEvent: public None
{
public:
	Struct FString                                               Option;                                            // 0x0(0x10)
	int                                                          Value;                                             // 0x10(0x4)
};


// Size 0x18
class UIFloatOptionSelectedTelemetryEvent: public None
{
public:
	Struct FString                                               Option;                                            // 0x0(0x10)
	float                                                        Value;                                             // 0x10(0x4)
};


// Size 0x18
class UIBooleanOptionSelectedTelemetryEvent: public None
{
public:
	Struct FString                                               Option;                                            // 0x0(0x10)
	bool                                                         Value;                                             // 0x10(0x1)
};


// Size 0x30
class MeshScoring: public None
{
public:
	struct FName                                                 MeshName;                                          // 0x0(0x8)
	TArray<Struct IndividualMeshScoring>                         RegisteredComponents;                              // 0x8(0x10)
};


// Size 0x18
class IndividualMeshScoring: public None
{
public:
	Struct Guid                                                  RegistrationToken;                                 // 0x0(0x10)
	Class Actor*                                                 MeshOwner;                                         // 0x10(0x8)
};


// Size 0x18
class IndividualMeshScoringToRemove: public None
{
public:
	struct FName                                                 MeshName;                                          // 0x0(0x8)
	Struct Guid                                                  RegistrationToken;                                 // 0x8(0x10)
};


// Size 0x20
class IndividualMeshScoringToAdd: public None
{
public:
	struct FName                                                 MeshName;                                          // 0x0(0x8)
	Struct IndividualMeshScoring                                 IndividualMeshScoring;                             // 0x8(0x18)
};


// Size 0x40
class MeshRegistration: public None
{
public:
	TArray<Struct IndividualMeshConsumer>                        RegisteredComponents;                              // 0x0(0x10)
	class                                                        MeshFallbackCategory;                              // 0x18(0x8)
	Class Object*                                                FallbackMeshToAssign;                              // 0x20(0x8)
};


// Size 0x80
class IndividualMeshConsumer: public None
{
public:
	TArray<class OverrideMaterials*>                             OverrideMaterials;                                 // 0x18(0x10)
	TArray<class OverrideFallbackMaterials*>                     OverrideFallbackMaterials;                         // 0x28(0x10)
};


// Size 0x10
class MeshMemoryConstraintTelemetryFragment: public None
{
public:
	TArray<Struct MeshMemoryConstraintTelemetryBudgetFragment>   BudgetData;                                        // 0x0(0x10)
};


// Size 0x38
class MeshMemoryConstraintTelemetryBudgetFragment: public None
{
public:
	Struct FString                                               Budget;                                            // 0x0(0x10)
	int                                                          MemoryUsedInBytes;                                 // 0x10(0x4)
	int                                                          MaximumMemoryUsedInBytes;                          // 0x14(0x4)
	int                                                          NumUniqueMeshes;                                   // 0x18(0x4)
	int                                                          NumUniqueMeshesUsingFallback;                      // 0x1c(0x4)
	int                                                          NumTotalMeshesUsingFallback;                       // 0x20(0x4)
	int                                                          MemoryUsedOfNoFallbackMeshesInBytes;               // 0x24(0x4)
	int                                                          NumUniqueNoFallbackMeshes;                         // 0x28(0x4)
	int                                                          NumTotalNoFallbackMeshes;                          // 0x2c(0x4)
	int                                                          ThresholdScale;                                    // 0x30(0x4)
};


// Size 0x10
class MeshMemoryConstraintUnregistrationFailedTelemetryEvent: public None
{
public:
	Struct FString                                               MeshReference;                                     // 0x0(0x10)
};


// Size 0x10
class MeshMemoryConstraintRegistrationFailedTelemetryEvent: public None
{
public:
	Struct FString                                               MeshReference;                                     // 0x0(0x10)
};


// Size 0x10
class MeshMemoryConstraintRegistrationDelayedTelemetryEvent: public None
{
public:
	Struct FString                                               MeshReference;                                     // 0x0(0x10)
};


// Size 0x28
class AppearMaterialParams: public None
{
public:
	struct FName                                                 ParameterName;                                     // 0x0(0x8)
	Class CurveFloat*                                            AppearCurveAsset;                                  // 0x8(0x8)
	Class CurveFloat*                                            DisppearCurveAsset;                                // 0x10(0x8)
};


// Size 0x10
class DynamicMaterialsList: public None
{
public:
	TArray<Weakclass MaterialAnimatorGroupInstance>              Materials;                                         // 0x0(0x10)
};


// Size 0x20
class MaterialAnimatorGroupInstance: public None
{
public:
	struct FName                                                 MaterialParamName;                                 // 0x0(0x8)
	struct FName                                                 CurrentAnimation;                                  // 0x8(0x8)
	struct FName                                                 WantedAnimation;                                   // 0x10(0x8)
	float                                                        CurrentAnimTime;                                   // 0x18(0x4)
	float                                                        AnimDuration;                                      // 0x1c(0x4)
};


// Size 0x18
class MaterialAnimatorGroup: public None
{
public:
	struct FName                                                 MaterialParamName;                                 // 0x0(0x8)
	TArray<Struct MaterialAnimatorAnimationEntry>                Animations;                                        // 0x8(0x10)
};


// Size 0x18
class MaterialAnimatorAnimationEntry: public None
{
public:
	struct FName                                                 AnimationName;                                     // 0x0(0x8)
	struct FName                                                 NextAnimationName;                                 // 0x8(0x8)
	Class CurveFloat*                                            AnimationCurve;                                    // 0x10(0x8)
};


// Size 0x10
class DynamicMaterialListContainer: public None
{
public:
	TArray<class MaterialsList*>                                 MaterialsList;                                     // 0x0(0x10)
};


// Size 0x30
class MaterialManipulationSettings: public None
{
public:
	TArray<Struct MeshAnimatorInstance>                          ScalarParameterValues;                             // 0x0(0x10)
	TArray<Struct ScalarParameterValues>                         TextureParameterValues;                            // 0x10(0x10)
	TArray<Struct TextureParameterValues>                        VectorParameterValues;                             // 0x20(0x10)
};


// Size 0x70
class MeshAnimatorInstance: public None
{
public:
	TArray<class Meshes*>                                        Meshes;                                            // 0x60(0x10)
};


// Size 0x20
class MeshAnimatorAnimationEntry: public None
{
public:
	struct FName                                                 AnimationName;                                     // 0x0(0x8)
	struct FName                                                 NextAnimationName;                                 // 0x8(0x8)
	TArray<Struct MeshAnimatorAnimationMeshEntry>                PerMeshAnimations;                                 // 0x10(0x10)
};


// Size 0x458
class MeshAnimatorAnimationMeshEntry: public None
{
public:
	Struct RuntimeVectorCurve                                    Position;                                          // 0x0(0x170)
	Struct RuntimeVectorCurve                                    Rotation;                                          // 0x170(0x170)
	bool                                                         ModifyScale;                                       // 0x2e0(0x1)
	Struct RuntimeVectorCurve                                    Scale;                                             // 0x2e8(0x170)
};


// Size 0x10
class MeshAnimatorSyncData: public None
{
public:
	double                                                       AnimationStartTime;                                // 0x0(0x8)
	int                                                          AnimationIndex;                                    // 0x8(0x4)
};


// Size 0x1
class DitherComponentFinishedApplyingMaterialsEvent: public None
{
public:
};


// Size 0x1
class DitherFadeOutEvent: public None
{
public:
};


// Size 0x1
class DitherFadeInEvent: public None
{
public:
};


// Size 0x1
class EventDynamicMaterialMeshLoaded: public None
{
public:
};


// Size 0x80
class BaseLightTemplate: public None
{
public:
	Struct BaseLightData                                         BaseLightData;                                     // 0x0(0x80)
};


// Size 0x80
class BaseLightData: public None
{
public:
	float                                                        Intensity;                                         // 0x0(0x4)
	Struct Color                                                 LightColor;                                        // 0x4(0x4)
	bool                                                         bAffectsWorld;                                     // 0x8(0x1)
	bool                                                         CastShadows;                                       // 0x8(0x1)
	bool                                                         CastStaticShadows;                                 // 0x8(0x1)
	bool                                                         CastDynamicShadows;                                // 0x8(0x1)
	bool                                                         bAffectTranslucentLighting;                        // 0x8(0x1)
	bool                                                         bPrecomputedLightingIsValid;                       // 0x8(0x1)
	bool                                                         RainOcclusion;                                     // 0x8(0x1)
	float                                                        IndirectLightingIntensity;                         // 0xc(0x4)
	float                                                        ScaleForTranslucency;                              // 0x10(0x4)
	float                                                        CapForTranslucency;                                // 0x14(0x4)
	float                                                        Temperature;                                       // 0x18(0x4)
	bool                                                         bUseTemperature;                                   // 0x1c(0x1)
	float                                                        MinRoughness;                                      // 0x20(0x4)
	float                                                        ShadowBias;                                        // 0x24(0x4)
	float                                                        ShadowSharpen;                                     // 0x28(0x4)
	float                                                        ShadowResMaxDynamicDegradation;                    // 0x2c(0x4)
	bool                                                         CastTranslucentShadows;                            // 0x30(0x1)
	bool                                                         bCastShadowsFromCinematicObjectsOnly;              // 0x30(0x1)
	bool                                                         bAffectDynamicIndirectLighting;                    // 0x30(0x1)
	Class MaterialInterface*                                     LightFunctionMaterial;                             // 0x38(0x8)
	Struct Vector                                                LightFunctionScale;                                // 0x40(0xc)
	Class TextureLightProfile*                                   IESTexture;                                        // 0x50(0x8)
	bool                                                         bUseIESBrightness;                                 // 0x58(0x1)
	float                                                        IESBrightnessScale;                                // 0x5c(0x4)
	float                                                        LightFunctionFadeDistance;                         // 0x60(0x4)
	float                                                        DisabledBrightness;                                // 0x64(0x4)
	bool                                                         bEnableLightShaftBloom;                            // 0x68(0x1)
	float                                                        BloomScale;                                        // 0x6c(0x4)
	float                                                        BloomThreshold;                                    // 0x70(0x4)
	Struct Color                                                 BloomTint;                                         // 0x74(0x4)
	bool                                                         bUseRayTracedDistanceFieldShadows;                 // 0x78(0x1)
	float                                                        RayStartOffsetDepthScale;                          // 0x7c(0x4)
};


// Size 0xc0
class PointLightTemplate: public None
{
public:
	Struct PointLightData                                        PointLightData;                                    // 0x80(0x3c)
};


// Size 0x3c
class PointLightData: public None
{
public:
	float                                                        AttenuationRadius;                                 // 0x0(0x4)
	bool                                                         bUseInverseSquaredFalloff;                         // 0x4(0x1)
	float                                                        LightFalloffExponent;                              // 0x8(0x4)
	float                                                        IntensityScaleForWater;                            // 0xc(0x4)
	float                                                        MinDistanceToLightAssumed;                         // 0x10(0x4)
	float                                                        SourceRadius;                                      // 0x14(0x4)
	float                                                        SourceLength;                                      // 0x18(0x4)
	byte                                                         SimpleFunctionType;                                // 0x1c(0x1)
	float                                                        ScaleOffset;                                       // 0x20(0x4)
	float                                                        PulsePhase;                                        // 0x24(0x4)
	float                                                        FlickerFrequency;                                  // 0x28(0x4)
	int                                                          FlickerPerlinRow;                                  // 0x2c(0x4)
	Struct LightmassPointLightSettings                           LightmassSettings;                                 // 0x30(0xc)
};


// Size 0xd0
class SpotLightTemplate: public None
{
public:
	Struct SpotLightData                                         SpotLightData;                                     // 0xc0(0xc)
};


// Size 0xc
class SpotLightData: public None
{
public:
	float                                                        InnerConeAngle;                                    // 0x0(0x4)
	float                                                        OuterConeAngle;                                    // 0x4(0x4)
	float                                                        KickBackRatio;                                     // 0x8(0x4)
};


// Size 0xd0
class GenericLightTemplate: public None
{
public:
	byte                                                         LightType;                                         // 0x0(0x1)
	Struct BaseLightData                                         BaseLightData;                                     // 0x8(0x80)
	Struct PointLightData                                        PointLightData;                                    // 0x88(0x3c)
	Struct SpotLightData                                         SpotLightData;                                     // 0xc4(0xc)
};


// Size 0x18
class ClientRequestAsyncLoadingCompleteAckNetworkEvent: public None
{
public:
	int                                                          StreamOutLevelId;                                  // 0x10(0x4)
	int                                                          StreamInLevelId;                                   // 0x14(0x4)
};


// Size 0x10
class MaterialInformationAudioData: public None
{
public:
	struct FName                                                 SurfaceSwitch;                                     // 0x0(0x8)
	Struct WwiseAudioAcousticSurfaceParams                       Acoustics;                                         // 0x8(0x8)
};


// Size 0x10
class MaterialInformationTranslationData: public None
{
public:
	struct FName                                                 AudioSurfaceType;                                  // 0x0(0x8)
	struct FName                                                 VFXSurfaceType;                                    // 0x8(0x8)
};


// Size 0x4
class MaterialInformationVFXData: public None
{
public:
	float                                                        DummyVFXValue;                                     // 0x0(0x4)
};


// Size 0x80
class CinematicQuestEvent: public None
{
public:
	Struct FText                                                 Message;                                           // 0x0(0x38)
	Struct FText                                                 Header;                                            // 0x38(0x38)
	struct FName                                                 Tag;                                               // 0x70(0x8)
	bool                                                         DisableMusic;                                      // 0x78(0x1)
};


// Size 0x90
class CinematicQuestNetworkEvent: public None
{
public:
	Struct CinematicQuestEvent                                   BannerData;                                        // 0x10(0x80)
};


// Size 0x4
class PlayModeVariantResponse: public None
{
public:
	int                                                          Variant;                                           // 0x0(0x4)
};


// Size 0x1
class RequestPlayModeVariant: public None
{
public:
};


// Size 0x8
class EventPopUpQueueServicePaused: public None
{
public:
	bool                                                         Paused;                                            // 0x0(0x1)
	int                                                          Reason;                                            // 0x4(0x4)
};


// Size 0x4
class SetArenaIslandBanners: public None
{
public:
	int                                                          Value;                                             // 0x0(0x4)
};


// Size 0x4
class SetAdventureIslandBanners: public None
{
public:
	int                                                          Value;                                             // 0x0(0x4)
};


// Size 0x1
class NarrationStateRequestEvent: public None
{
public:
};


// Size 0x1
class NarrationStateEvent: public None
{
public:
	bool                                                         IsEnabled;                                         // 0x0(0x1)
};


// Size 0x10
class NarrationRequestEvent: public None
{
public:
	Struct FString                                               Text;                                              // 0x0(0x10)
};


// Size 0x4
class SetToastHoldDurationMultiplier: public None
{
public:
	float                                                        Multiplier;                                        // 0x0(0x4)
};


// Size 0x1
class SetNarrateToasts: public None
{
public:
	bool                                                         IsEnabled;                                         // 0x0(0x1)
};


// Size 0x1
class SetScreenSpaceTooltips: public None
{
public:
	bool                                                         IsEnabled;                                         // 0x0(0x1)
};


// Size 0x4
class SetNotificationScale: public None
{
public:
	float                                                        ScaleValue;                                        // 0x0(0x4)
};


// Size 0x1
class SendMarketingOptInResponse: public None
{
public:
	bool                                                         OptedIn;                                           // 0x0(0x1)
};


// Size 0x1
class AccessibiltySettingsModalEvent: public None
{
public:
};


// Size 0x1
class RequestShowMarketingOptInPopUp: public None
{
public:
};


// Size 0x10
class RequestShowGamerCard: public None
{
public:
	Struct FString                                               XUID;                                              // 0x0(0x10)
};


// Size 0x10
class EventSendCapturedKeybind: public None
{
public:
	Struct FString                                               CapturedKey;                                       // 0x0(0x10)
};


// Size 0x1
class EventKeybindCaptureCancelRequest: public None
{
public:
};


// Size 0x1
class EventKeybindCaptureRequest: public None
{
public:
	byte                                                         ControllerTypeKeyToExpect;                         // 0x0(0x1)
};


// Size 0x1
class EventFrontendSetSceneVisibility: public None
{
public:
	bool                                                         Visible;                                           // 0x0(0x1)
};


// Size 0x1
class EventInGameUISetMigrationMode: public None
{
public:
	bool                                                         MigrationModeEnabled;                              // 0x0(0x1)
};


// Size 0x1
class EventToggleNonCrewVoiceMuteState: public None
{
public:
};


// Size 0x1
class EventToggleScrambleGamertags: public None
{
public:
};


// Size 0x1
class EventToggleCrewNameplates: public None
{
public:
};


// Size 0x1
class EventToggleOtherCrewNameplates: public None
{
public:
};


// Size 0x1
class EventTogglePhotoMode: public None
{
public:
};


// Size 0x1
class EventInGameUISetPhotoMode: public None
{
public:
	bool                                                         PhotoModeEnabled;                                  // 0x0(0x1)
};


// Size 0x8
class EventHUDSetMousePosition: public None
{
public:
	Struct Vector2D                                              Position;                                          // 0x0(0x8)
};


// Size 0x1
class EventHUDMouseCursorCentre: public None
{
public:
};


// Size 0x1
class EventHUDMouseFocusRequest: public None
{
public:
	bool                                                         RequestFocus;                                      // 0x0(0x1)
};


// Size 0x1
class EventHUDScriptingReady: public None
{
public:
};


// Size 0x10
class TextboxTextFromVirtualKeyboard: public None
{
public:
	Struct FString                                               Text;                                              // 0x0(0x10)
};


// Size 0x10
class EventPetNameTextboxTextFromVirtualKeyboard: public None
{
public:
	Struct FString                                               Text;                                              // 0x0(0x10)
};


// Size 0x10
class EventChatboxTextFromVirtualKeyboard: public None
{
public:
	Struct FString                                               Text;                                              // 0x0(0x10)
};


// Size 0x1
class EventPlayerOpenChatbox: public None
{
public:
};


// Size 0x1
class EventPlayerOpenQuickMenu: public None
{
public:
};


// Size 0x1
class NavigateToMenuEvent: public None
{
public:
	byte                                                         Action;                                            // 0x0(0x1)
};


// Size 0x1
class EventPlayerOpenEscapeMenu: public None
{
public:
};


// Size 0x1
class EventInGameBlurRequest: public None
{
public:
	bool                                                         ShouldBlurGame;                                    // 0x0(0x1)
};


// Size 0x1
class TextboxFocusRequest: public None
{
public:
	bool                                                         ShouldFocusTextbox;                                // 0x0(0x1)
};


// Size 0x1
class EventPetNameTextboxFocusRequest: public None
{
public:
	bool                                                         ShouldFocusPetNameTextbox;                         // 0x0(0x1)
};


// Size 0x1
class EventChatboxFocusRequest: public None
{
public:
	bool                                                         ShouldFocusChatbox;                                // 0x0(0x1)
};


// Size 0x1
class EventInGameUIFocusRequest: public None
{
public:
	bool                                                         ShouldFocusUI;                                     // 0x0(0x1)
};


// Size 0x10
class UIWhatsNewAvailableArticlesEvent: public None
{
public:
	TArray<Str None>                                             Articles;                                          // 0x0(0x10)
};


// Size 0x20
class UIAdventuresDataErrorEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
	Struct FString                                               ErrorStack;                                        // 0x10(0x10)
};


// Size 0x20
class UILiveCampaignDataErrorEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
	Struct FString                                               ErrorStack;                                        // 0x10(0x10)
};


// Size 0x20
class UISeasonsDataErrorEvent: public None
{
public:
	Struct FString                                               ErrorMessage;                                      // 0x0(0x10)
	Struct FString                                               ErrorStack;                                        // 0x10(0x10)
};


// Size 0x60
class UIPremiumStoreItemInteractEvent: public None
{
public:
	Struct FString                                               CurrencyUsed;                                      // 0x0(0x10)
	Struct FString                                               EngagementOutcome;                                 // 0x10(0x10)
	Struct FString                                               ItemCost;                                          // 0x20(0x10)
	Struct FString                                               ItemName;                                          // 0x30(0x10)
	Struct FString                                               PageName;                                          // 0x40(0x10)
	Struct FString                                               SessionId;                                         // 0x50(0x10)
};


// Size 0x38
class UIPremiumStorePanelHighlightEvent: public None
{
public:
	Struct FString                                               CurrentPage;                                       // 0x0(0x10)
	Struct FString                                               CurrentPanel;                                      // 0x10(0x10)
	Struct FString                                               SessionId;                                         // 0x20(0x10)
	float                                                        TimeOnPanel;                                       // 0x30(0x4)
};


// Size 0x48
class UIPremiumStorePageTransitionEvent: public None
{
public:
	Struct FString                                               CurrentPage;                                       // 0x0(0x10)
	Struct FString                                               PreviousHighlight;                                 // 0x10(0x10)
	Struct FString                                               PreviousPage;                                      // 0x20(0x10)
	Struct FString                                               SessionId;                                         // 0x30(0x10)
	float                                                        TimeOnPreviousPage;                                // 0x40(0x4)
};


// Size 0x18
class UIPremiumStoreOpenEvent: public None
{
public:
	bool                                                         IsFrontend;                                        // 0x0(0x1)
	Struct FString                                               SessionId;                                         // 0x8(0x10)
};


// Size 0x20
class UIScreenTransitionEvent: public None
{
public:
	Struct FString                                               CurrentScreen;                                     // 0x0(0x10)
	Struct FString                                               PreviousScreen;                                    // 0x10(0x10)
};


// Size 0x1
class OnHUDDestruction: public None
{
public:
};


// Size 0x1e8
class OfferPurchasedEvent: public None
{
public:
	Struct ShopOffer                                             Purchase;                                          // 0x0(0x1e0)
	struct FName                                                 NPCName;                                           // 0x1e0(0x8)
};


// Size 0x18
class LaunchableProjectileDamageEvent: public None
{
public:
	Class Actor*                                                 Instigator;                                        // 0x0(0x8)
	Class Actor*                                                 ProjectileActor;                                   // 0x8(0x8)
	Class Actor*                                                 ActorHit;                                          // 0x10(0x8)
};


// Size 0x10
class DamageableVulnerabilityPair: public None
{
public:
	class                                                        DamagerType;                                       // 0x0(0x8)
	float                                                        DamageMultiplier;                                  // 0x8(0x4)
};


// Size 0x28
class DamageInstance: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Class Actor*                                                 DirectInstigator;                                  // 0x10(0x8)
	Class Actor*                                                 RootInstigator;                                    // 0x18(0x8)
	float                                                        Amount;                                            // 0x20(0x4)
	byte                                                         Reason;                                            // 0x24(0x1)
};


// Size 0x1
class EventRecoveredMaxHealth: public None
{
public:
};


// Size 0x1
class EventHealthChangeContinuousEnd: public None
{
public:
};


// Size 0x8
class EventHealthChangeContinuousStart: public None
{
public:
	float                                                        CurrentHealth;                                     // 0x0(0x4)
	float                                                        ChangeRate;                                        // 0x4(0x4)
};


// Size 0x1
class EventHealthChangeAllContinuousChangesRemoved: public None
{
public:
};


// Size 0x1
class EventHealthChangeContinuousRemoved: public None
{
public:
	byte                                                         Reason;                                            // 0x0(0x1)
};


// Size 0x8
class EventHealthChangeContinuousApplied: public None
{
public:
	float                                                        ChangeDelta;                                       // 0x0(0x4)
	byte                                                         Reason;                                            // 0x4(0x1)
};


// Size 0x48
class EventHealthChanged: public None
{
public:
	Struct HealthChange                                          ChangePayload;                                     // 0x0(0x40)
	bool                                                         IsLocalPrediction;                                 // 0x40(0x1)
	bool                                                         IsRepetitionOfPrediction;                          // 0x41(0x1)
};


// Size 0x40
class HealthChange: public None
{
public:
	float                                                        From;                                              // 0x0(0x4)
	float                                                        To;                                                // 0x4(0x4)
	byte                                                         Reason;                                            // 0x8(0x1)
	Class Actor*                                                 DirectInstigator;                                  // 0x10(0x8)
	Class Actor*                                                 RootInstigator;                                    // 0x18(0x8)
	Struct Guid                                                  IncidentId;                                        // 0x20(0x10)
	Struct Vector_NetQuantize10                                  DirectInstigatorLocation;                          // 0x30(0xc)
};


// Size 0x18
class CurrentHealthInfo: public None
{
public:
	float                                                        Health;                                            // 0x0(0x4)
	byte                                                         LastChangedReason;                                 // 0x4(0x1)
	Struct Vector_NetQuantize10                                  LastInstigatorLocation;                            // 0x8(0xc)
};


// Size 0xc
class ContinuousHealthChange: public None
{
public:
	float                                                        Rate;                                              // 0x0(0x4)
	float                                                        ChangeApplied;                                     // 0x4(0x4)
	byte                                                         Reason;                                            // 0x8(0x1)
};


// Size 0x8
class HealthRegenState: public None
{
public:
	float                                                        CurrentPoolAmount;                                 // 0x0(0x4)
	byte                                                         State;                                             // 0x4(0x1)
};


// Size 0x28
class TeleportLocation: public None
{
public:
	bool                                                         Valid;                                             // 0x0(0x1)
	Class SceneComponent*                                        TeleportBase;                                      // 0x8(0x8)
	Struct Vector                                                TeleportLocation;                                  // 0x10(0xc)
	Struct Rotator                                               TeleportRotation;                                  // 0x1c(0xc)
};


// Size 0x70
class TeleportActionStateConstructionInfo: public None
{
public:
	Struct TeleportLocation                                      TeleportLocationOverride;                          // 0x30(0x28)
	byte                                                         TeleportFadeType;                                  // 0x58(0x1)
	int                                                          StreamInLevelId;                                   // 0x5c(0x4)
	int                                                          StreamOutLevelId;                                  // 0x60(0x4)
	byte                                                         TeleportConditions;                                // 0x64(0x1)
	bool                                                         ShouldPlayTeleportSFX;                             // 0x65(0x1)
	bool                                                         ShouldWaitForLoadout;                              // 0x67(0x1)
	bool                                                         ShouldWaitForEntitlements;                         // 0x68(0x1)
	bool                                                         CallFinishSpawningOnEnd;                           // 0x69(0x1)
	byte                                                         Reason;                                            // 0x6a(0x1)
	byte                                                         TeleportSpace;                                     // 0x6b(0x1)
};


// Size 0x28
class EventTeleportLocationDestroyed: public None
{
public:
	Struct TeleportLocation                                      TeleportLocation;                                  // 0x0(0x28)
};


// Size 0x28
class EventTeleportLocationCreated: public None
{
public:
	Struct TeleportLocation                                      TeleportLocation;                                  // 0x0(0x28)
};


// Size 0x10
class CharacterHitReactionDamagerTypeToAnimTypePair: public None
{
public:
	class                                                        DamagerType;                                       // 0x0(0x8)
};


// Size 0x18
class EventFinishedSpawning: public None
{
public:
	byte                                                         SpawnType;                                         // 0x10(0x1)
};


// Size 0x8
class EventFiredFromActorEnd: public None
{
public:
};


// Size 0x8
class EventFiredFromActorStart: public None
{
public:
};


// Size 0x40
class EventRequestRespawn: public None
{
public:
	Class Pawn*                                                  Character;                                         // 0x0(0x8)
	byte                                                         RespawnType;                                       // 0x8(0x1)
};


// Size 0x1
class SetFirstPersonMeshVisibleEvent: public None
{
public:
	bool                                                         IsVisible;                                         // 0x0(0x1)
};


// Size 0x8
class EventCharacterKnockedBack: public None
{
public:
	struct FName                                                 RumbleTag;                                         // 0x0(0x8)
};


// Size 0x8
class EventCharacterDespawned: public None
{
public:
	Class Character*                                             Character;                                         // 0x0(0x8)
};


// Size 0x8
class EventCharacterSpawned: public None
{
public:
	Class Character*                                             Character;                                         // 0x0(0x8)
};


// Size 0x10
class EventCharacterEndTeleport: public None
{
public:
	Class Actor*                                                 Character;                                         // 0x0(0x8)
	bool                                                         PlayOnTeleportEndSounds;                           // 0x8(0x1)
	byte                                                         TeleportNotificationSource;                        // 0x9(0x1)
};


// Size 0x10
class EventCharacterBeginTeleport: public None
{
public:
	Class Actor*                                                 Character;                                         // 0x0(0x8)
	bool                                                         PlayOnTeleportBeginSounds;                         // 0x8(0x1)
	byte                                                         TeleportNotificationSource;                        // 0x9(0x1)
};


// Size 0x4
class EventCharacterMovementModeChanged: public None
{
public:
	byte                                                         PreviousMovementMode;                              // 0x0(0x1)
	byte                                                         NewMovementMode;                                   // 0x1(0x1)
	byte                                                         PreviousCustomMovementMode;                        // 0x2(0x1)
	byte                                                         NewCustomMovementMode;                             // 0x3(0x1)
};


// Size 0x1
class EventCharacterInert: public None
{
public:
	bool                                                         bIsInert;                                          // 0x0(0x1)
};


// Size 0x18
class EventPlayerInteractedWithObject: public None
{
public:
};


// Size 0x10
class EventPlayerStatePawnUnPossessed: public None
{
public:
	Class PlayerState*                                           PlayerState;                                       // 0x0(0x8)
	Class Pawn*                                                  UnPossessedPawn;                                   // 0x8(0x8)
};


// Size 0x18
class EventPlayerStatePawnPossessed: public None
{
public:
	Class PlayerState*                                           PlayerState;                                       // 0x0(0x8)
	Class Pawn*                                                  PossessedPawn;                                     // 0x8(0x8)
	bool                                                         IsLocalPlayer;                                     // 0x10(0x1)
};


// Size 0x8
class EventRemovePlayerOnLogOut: public None
{
public:
	Class Controller*                                            Controller;                                        // 0x0(0x8)
};


// Size 0x8
class OtherPartyTelemetryFragmentInput: public None
{
public:
};


// Size 0x30
class OtherPartyTelemetryFragment: public None
{
public:
	Struct FString                                               OtherPartyType;                                    // 0x0(0x10)
	Struct FString                                               OtherPartyId;                                      // 0x10(0x10)
	double                                                       OtherPartySecondsSinceSpawned;                     // 0x28(0x8)
};


// Size 0x8
class EventPlayerLeftProximity: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x8
class EventPlayerEnteredProximity: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x30
class TrackedActorEntry: public None
{
public:
};


// Size 0x10
class TrackedActorTelemetryFragmentInput: public None
{
public:
};


// Size 0x18
class TrackedActorTelemetryFragment: public None
{
public:
	Struct JsonObjectWrapper                                     Json;                                              // 0x0(0x18)
};


// Size 0x18
class VisualFeedbackList: public None
{
public:
	TArray<Struct VisualFeedbackEntry>                           Entires;                                           // 0x0(0x10)
	float                                                        StartDelay;                                        // 0x10(0x4)
	float                                                        TransitionTime;                                    // 0x14(0x4)
};


// Size 0x8
class VisualFeedbackEntry: public None
{
public:
	Class EffectBlendObjectBase*                                 Effect;                                            // 0x0(0x8)
};


// Size 0x20
class ParticleSystemPicker: public None
{
public:
	Class ParticleSystem*                                        ObserverAboveEffectAboveWater;                     // 0x0(0x8)
	Class ParticleSystem*                                        ObserverBelowEffectBelowWater;                     // 0x8(0x8)
	Class ParticleSystem*                                        ObserverAboveEffectBelowWater;                     // 0x10(0x8)
	Class ParticleSystem*                                        ObserverBelowEffectAboveWater;                     // 0x18(0x8)
};


// Size 0x90
class VfxSpawner: public None
{
public:
	Class Object*                                                EmitterTemplate;                                   // 0x8(0x8)
	Class SceneComponent*                                        AttachToComponent;                                 // 0x10(0x8)
	Class SceneComponent*                                        SocketOwnerComponent;                              // 0x18(0x8)
	Class Object*                                                Owner;                                             // 0x20(0x8)
};


// Size 0x30
class VfxSelectorRange: public None
{
public:
	float                                                        MinValue;                                          // 0x0(0x4)
	float                                                        MaxValue;                                          // 0x4(0x4)
	Struct VfxSelectorEntry                                      EffectParams;                                      // 0x8(0x28)
};


// Size 0x28
class VfxSelectorEntry: public None
{
public:
	Class Object*                                                ParticleSystem;                                    // 0x0(0x8)
	Class WwiseEvent*                                            WiseEvent;                                         // 0x8(0x8)
	Class WwiseObjectPoolWrapper*                                WwisePoolToUse;                                    // 0x10(0x8)
	struct FName                                                 RTPCName;                                          // 0x18(0x8)
	float                                                        RTPCValue;                                         // 0x20(0x4)
};


// Size 0x40
class VFXHandlerComponentParams: public None
{
public:
	Class ParticleSystem*                                        ParticleSystem;                                    // 0x0(0x8)
	Struct Vector                                                VFXRelativeOffset;                                 // 0x8(0xc)
	Struct Vector                                                VFXScale;                                          // 0x14(0xc)
	Struct Rotator                                               VFXRotationOffset;                                 // 0x20(0xc)
	struct FName                                                 VFXAttachSocket;                                   // 0x2c(0x8)
	float                                                        VFXDrivingCurveValue;                              // 0x34(0x4)
	byte                                                         VFXCustomLocalSpaceMode;                           // 0x38(0x1)
};


// Size 0x18
class PersistenceIdentifier: public None
{
public:
	Struct FString                                               Identifier;                                        // 0x0(0x10)
	struct FName                                                 Name;                                              // 0x10(0x8)
};


// Size 0x1
class PersistenceModel: public None
{
public:
};


// Size 0x10
class ConditionalStatContext: public None
{
public:
	Class Object*                                                ObjectOfInterest1;                                 // 0x0(0x8)
	Class Object*                                                ObjectOfInterest2;                                 // 0x8(0x8)
};


// Size 0x30
class ConditionalStat: public None
{
public:
	Struct PlayerStat                                            Stat;                                              // 0x0(0x4)
	byte                                                         StatType;                                          // 0x4(0x1)
	Struct PlayerTrackedObjective                                TrackedObjective;                                  // 0x8(0x10)
	byte                                                         TrackedObjectiveType;                              // 0x18(0x1)
	byte                                                         TrackedObjectiveTargetType;                        // 0x19(0x1)
	TArray<class Conditions*>                                    Conditions;                                        // 0x20(0x10)
};


// Size 0x18
class ConditionalStatsTriggerUnit: public None
{
public:
	class                                                        TriggerType;                                       // 0x0(0x8)
	TArray<class ConditionalStatsAssets*>                        ConditionalStatsAssets;                            // 0x8(0x10)
};


// Size 0x18
class AllianceStatEvent: public None
{
public:
};


// Size 0x10
class HeroStatEvent: public None
{
public:
};


// Size 0x18
class CrewStatEvent: public None
{
public:
};


// Size 0x10
class StatEvent: public None
{
public:
};


// Size 0x28
class StandardAnchorDynamicsParameters: public None
{
public:
	float                                                        AnchorForce;                                       // 0x0(0x4)
	float                                                        VelocityDeadZoneThreshold;                         // 0x4(0x4)
	Class CurveFloat*                                            UnaryWheelAngleBasedTorque;                        // 0x8(0x8)
	Class CurveFloat*                                            ForwardSpeedBasedTorque;                           // 0x10(0x8)
	float                                                        BaseHandbrakeTorque;                               // 0x18(0x4)
	float                                                        TimeAfterAnchorDownToGrabWantedYaw;                // 0x1c(0x4)
	Class CurveFloat*                                            YawDeltaVsCorrectiveTorquePerKgMass;               // 0x20(0x8)
};


// Size 0x18
class StandardHullDragDynamicsParameters: public None
{
public:
	float                                                        ForwardDragForcePerMPS;                            // 0x0(0x4)
	float                                                        BackwardsDragForcePerMPS;                          // 0x4(0x4)
	float                                                        SidewaysDragCounterForcePerMPS;                    // 0x8(0x4)
	float                                                        MaxSailFractionToCountAsFullyUpForDragCalc;        // 0xc(0x4)
	float                                                        ForwardDragWhenBeached;                            // 0x10(0x4)
	float                                                        WaterZoneDragAmp;                                  // 0x14(0x4)
};


// Size 0x8
class StandardRudderDynamicsParameters: public None
{
public:
	float                                                        SteeringBoostMultiplier;                           // 0x0(0x4)
	float                                                        RudderBrakeAmplitude;                              // 0x4(0x4)
};


// Size 0xc
class StandardSailDynamicsParameters: public None
{
public:
	float                                                        ForceGeneratedByWindSpeedPerMPS;                   // 0x0(0x4)
	float                                                        AirDragPerSailPerMPS;                              // 0x4(0x4)
	float                                                        PowerRatioOfSailForwardForceToFullForce;           // 0x8(0x4)
};


// Size 0x130
class BowSplashProbe: public None
{
public:
	byte                                                         ShipAlignmentType;                                 // 0x128(0x1)
};


// Size 0x18
class ShipSizePartCustomizationInfo: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	TArray<Struct ShipPartCustomizationInfo>                     Customizations;                                    // 0x8(0x10)
};


// Size 0x18
class ShipPartCustomizationInfo: public None
{
public:
	struct FName                                                 PartName;                                          // 0x0(0x8)
	Struct StringAssetReference                                  Customization;                                     // 0x8(0x10)
};


// Size 0x28
class ShipCustomizationLoadout: public None
{
public:
	TArray<Class ShipDesc>                                       Customizations;                                    // 0x0(0x10)
	TArray<Class Customizations>                                 InitialCustomizations;                             // 0x10(0x10)
	bool                                                         HasInitialCustomizationsSet;                       // 0x20(0x1)
};


// Size 0x48
class ShipDesc: public None
{
public:
	Struct ShipMetadata                                          MetaData;                                          // 0x0(0x20)
	Struct ShipTemplate                                          Template;                                          // 0x20(0x8)
	Struct PartsCustomisation                                    Customisation;                                     // 0x28(0x20)
};


// Size 0x20
class PartsCustomisation: public None
{
public:
	TArray<Struct Template>                                      Parts;                                             // 0x0(0x10)
	TArray<Class Parts>                                          InitialEntitlements;                               // 0x10(0x10)
};


// Size 0x8
class ShipTemplate: public None
{
public:
	class                                                        ShipSizeObject;                                    // 0x0(0x8)
};


// Size 0x20
class ShipMetadata: public None
{
public:
	Struct FString                                               Name;                                              // 0x0(0x10)
	class                                                        ShipTypeObject;                                    // 0x10(0x8)
	class                                                        ShipCategoryObject;                                // 0x18(0x8)
};


// Size 0x20
class ShipLivery: public None
{
public:
	TArray<Struct ShipLiveryTextureSwap>                         LiveryTextureSwaps;                                // 0x0(0x10)
	TArray<Struct ShipLiveryRGBSwap>                             LiveryRGBSwaps;                                    // 0x10(0x10)
};


// Size 0x20
class ShipLiveryRGBSwap: public None
{
public:
	Class MaterialInterface*                                     TargetMaterial;                                    // 0x0(0x8)
	struct FName                                                 TargetParameterName;                               // 0x8(0x8)
	Struct LinearColor                                           TargetRGBValue;                                    // 0x10(0x10)
};


// Size 0x18
class ShipLiveryTextureSwap: public None
{
public:
	Class MaterialInterface*                                     TargetMaterial;                                    // 0x0(0x8)
	struct FName                                                 TargetParameterName;                               // 0x8(0x8)
	Class Texture2D*                                             TargetTexture;                                     // 0x10(0x8)
};


// Size 0x10
class EventCustomizableActorChanged: public None
{
public:
	Class Actor*                                                 CustomizableActor;                                 // 0x0(0x8)
	bool                                                         StripOverrideMaterials;                            // 0x8(0x1)
};


// Size 0x10
class ShipCustomizationLoadoutUpdatedEvent: public None
{
public:
};


// Size 0x10
class ShipCustomizationPersistenceModel: public None
{
public:
	TArray<Name None>                                            EntitlementKeys;                                   // 0x0(0x10)
};


// Size 0xa0
class ShipDynamics: public None
{
public:
	bool                                                         bProcessSailBasedFakeRoll;                         // 0x0(0x1)
	float                                                        SidewaysForceFromSailsForMaxFakeRoll;              // 0x4(0x4)
	float                                                        BuoyancyProbeZOffsetAtMaxFakeRoll;                 // 0x8(0x4)
	float                                                        MinHullSubmersionToApplyNoHullDragOrRudder;        // 0xc(0x4)
	float                                                        CapsizedAngleThreshold;                            // 0x10(0x4)
};


// Size 0x10
class EventCapstanDamageLevelChanged: public None
{
public:
	Class Actor*                                                 Capstan;                                           // 0x0(0x8)
	int                                                          DamageLevel;                                       // 0x8(0x4)
};


// Size 0x8
class EventPlayerCapstanUsageEnd: public None
{
public:
	Class Actor*                                                 ObjectBeingUsed;                                   // 0x0(0x8)
};


// Size 0x8
class EventPlayerCapstanUsageStart: public None
{
public:
	Class Actor*                                                 ObjectBeingUsed;                                   // 0x0(0x8)
};


// Size 0x1
class EventCapstanObjectDestroyed: public None
{
public:
};


// Size 0x10
class EventCrewReleasedCapstan: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x1
class EventCapstanReleased: public None
{
public:
};


// Size 0x1
class EventCapstanFullyLowered: public None
{
public:
};


// Size 0x1
class EventCapstanFullyRaised: public None
{
public:
};


// Size 0x1
class EventCapstanStoppedMoving: public None
{
public:
};


// Size 0x1
class EventCapstanStartedMoving: public None
{
public:
};


// Size 0x8
class EventShipExitedSafeZone: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x10
class EventShipEnteredSafeZone: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x1
class EventShipExitedWater: public None
{
public:
};


// Size 0x1
class EventShipEnteredWater: public None
{
public:
};


// Size 0x10
class EventShipSailedDistance: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	float                                                        DistanceSailedMetres;                              // 0x8(0x4)
};


// Size 0x10
class EventShipWaterAddedOnOffEvent: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	float                                                        WaterAdded;                                        // 0x8(0x4)
	float                                                        PrevWaterAdded;                                    // 0xc(0x4)
};


// Size 0x8
class EventShipSetSail: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x8
class EventShipBecameUseless: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x8
class EventShipDestroyed: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x8
class EventShipBuilt: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x8
class EventShipCreated: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x18
class EventShipRegionChanged: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	Class Actor*                                                 Actor;                                             // 0x8(0x8)
	byte                                                         ShipRegion;                                        // 0x10(0x1)
	byte                                                         PreviousShipRegion;                                // 0x11(0x1)
};


// Size 0x8
class EventCurrentShipChanged: public None
{
public:
	Class Actor*                                                 CurrentShip;                                       // 0x0(0x8)
};


// Size 0x10
class EventShipTopDeckUnblocked: public None
{
public:
	Struct Guid                                                  BlockerId;                                         // 0x0(0x10)
};


// Size 0x10
class EventShipTopDeckBlocked: public None
{
public:
	Struct Guid                                                  BlockerId;                                         // 0x0(0x10)
};


// Size 0x8
class EventShipStoppedBurning: public None
{
public:
};


// Size 0x10
class EventShipLightStateChange: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	Class Actor*                                                 Light;                                             // 0x8(0x8)
};


// Size 0x10
class EventCrewShipManifestChanged: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	Class Actor*                                                 Manifest;                                          // 0x8(0x8)
};


// Size 0x8
class EventSinkingShipTeleportTime: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x8
class EventBeginningToSink: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x1
class EventPreShipSink: public None
{
public:
};


// Size 0x10
class EventExitedShip: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	Class Actor*                                                 Actor;                                             // 0x8(0x8)
};


// Size 0x10
class EventEnteredShip: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	Class Actor*                                                 Actor;                                             // 0x8(0x8)
};


// Size 0x10
class EventWheelDamageLevelChanged: public None
{
public:
	Class Actor*                                                 Wheel;                                             // 0x0(0x8)
	int                                                          DamageLevel;                                       // 0x8(0x4)
};


// Size 0x1
class EventWheelTurningThresholdExceeded: public None
{
public:
};


// Size 0x1
class EventFightingWheelAgainstTurbulenceStop: public None
{
public:
};


// Size 0x1
class EventFightingWheelAgainstTurbulenceStart: public None
{
public:
};


// Size 0x1
class EventWheelCentered: public None
{
public:
};


// Size 0x1
class EventWheelStoppedMoving: public None
{
public:
	bool                                                         IsAtEnd;                                           // 0x0(0x1)
};


// Size 0x1
class EventWheelStartedMoving: public None
{
public:
};


// Size 0x10
class MapTablePersistenceModel: public None
{
public:
	TArray<Struct ShipBaseTelemetryFragmentInput>                MapPins;                                           // 0x0(0x10)
};


// Size 0x8
class ShipBaseTelemetryFragmentInput: public None
{
public:
};


// Size 0x60
class ShipBaseTelemetryFragment: public None
{
public:
	Struct FString                                               ShipObjectId;                                      // 0x0(0x10)
	Struct Vector                                                Position;                                          // 0x10(0xc)
	Struct Guid                                                  CrewId;                                            // 0x1c(0x10)
	Struct Guid                                                  CrewSessionId;                                     // 0x2c(0x10)
	Struct Guid                                                  ShipId;                                            // 0x3c(0x10)
	Struct FString                                               ShipSize;                                          // 0x50(0x10)
};


// Size 0x18
class ShipSizePartCustomizationNameData: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	TArray<Struct FName>                                         PartNames;                                         // 0x8(0x10)
};


// Size 0x38
class AlliancePennantData: public None
{
public:
	Struct StringAssetReference                                  PennantDesc;                                       // 0x0(0x10)
	TArray<Struct AllianceNotificationData>                      PopUpNotificationDescs;                            // 0x10(0x10)
	Struct StringAssetReference                                  GenericPopupAllianceIcon;                          // 0x20(0x10)
	Class Texture*                                               MapFlagIcon;                                       // 0x30(0x8)
};


// Size 0x10
class AllianceNotificationData: public None
{
public:
	byte                                                         NotificationType;                                  // 0x0(0x1)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x8(0x8)
};


// Size 0x18
class LoadableProjectileData: public None
{
public:
	Struct StringAssetReference                                  DataAsset;                                         // 0x0(0x10)
	int                                                          GeneratedDataRNGSeed;                              // 0x10(0x4)
	bool                                                         ShouldProjectileTrailDoReflections;                // 0x14(0x1)
};


// Size 0x1
class EventCharacterConcealedInLoadableEnd: public None
{
public:
};


// Size 0x10
class EventCharacterConcealedInLoadableBegin: public None
{
public:
};


// Size 0x1
class EventLoadableItemUnloadingEnd: public None
{
public:
};


// Size 0x1
class EventLoadableItemUnloadingBegin: public None
{
public:
};


// Size 0x1
class EventLoadableItemLoadingEnd: public None
{
public:
};


// Size 0x1
class EventLoadableItemLoadingBegin: public None
{
public:
};


// Size 0x1
class EventLoadableObjectUnloaded: public None
{
public:
};


// Size 0x1
class EventLoadableObjectLoaded: public None
{
public:
};


// Size 0x1
class EventLoadableObjectDestroyed: public None
{
public:
};


// Size 0x20
class SingleStickSettings: public None
{
public:
	TArray<Struct SingleStickMappingUserSettingsBoolean>         UserSettingsBooleans;                              // 0x0(0x10)
	TArray<Struct SingleStickMappingUserSettingsInteger>         UserSettingsIntegers;                              // 0x10(0x10)
};


// Size 0xc
class SingleStickMappingUserSettingsInteger: public None
{
public:
	struct FName                                                 SettingName;                                       // 0x0(0x8)
	int                                                          Value;                                             // 0x8(0x4)
};


// Size 0xc
class SingleStickMappingUserSettingsBoolean: public None
{
public:
	struct FName                                                 SettingName;                                       // 0x0(0x8)
	bool                                                         Value;                                             // 0x8(0x1)
};


// Size 0x50
class SingleStickMapping: public None
{
public:
	TArray<Struct ActionMappingKeyLookupFallback>                BindToLeftX;                                       // 0x0(0x10)
	TArray<Struct BindToLeftX>                                   BindToLeftY;                                       // 0x10(0x10)
	TArray<Struct BindToLeftY>                                   BindToRightX;                                      // 0x20(0x10)
	TArray<Struct SingleStickMappingAxis>                        BindToRightY;                                      // 0x30(0x10)
	TArray<Str >                                                 Unbind;                                            // 0x40(0x10)
};


// Size 0x18
class SingleStickMappingAxis: public None
{
public:
	Struct FString                                               BindingName;                                       // 0x0(0x10)
	bool                                                         Invert;                                            // 0x10(0x1)
};


// Size 0x10
class ActionMappingKeyLookupFallback: public None
{
public:
	struct FName                                                 ActionBeingLookedUp;                               // 0x0(0x8)
	struct FName                                                 ActionToAlsoLookup;                                // 0x8(0x8)
};


// Size 0x48
class VirtualAxisBindingDefinition: public None
{
public:
	TArray<Name None>                                            AxisNames;                                         // 0x0(0x10)
	TArray<Struct FName>                                         CombinedAxisNamesX;                                // 0x10(0x10)
	TArray<Struct FName>                                         CombinedAxisNamesY;                                // 0x20(0x10)
	Struct FString                                               BindingName;                                       // 0x30(0x10)
	float                                                        Scale;                                             // 0x40(0x4)
};


// Size 0x20
class VirtualActionBindingDefinition: public None
{
public:
	TArray<Name None>                                            ActionNames;                                       // 0x0(0x10)
	Struct FString                                               BindingName;                                       // 0x10(0x10)
};


// Size 0xc
class GhostPlayModeParameters: public None
{
public:
	byte                                                         PlayMode;                                          // 0x0(0x1)
	float                                                        RotationPerSecond;                                 // 0x4(0x4)
	float                                                        DisplacementPerSecond;                             // 0x8(0x4)
};


// Size 0x30
class EventPlayerCharacterDeath: public None
{
public:
	Class Character*                                             PirateKilled;                                      // 0x0(0x8)
	Struct DamageInstance                                        FinalBlowInformation;                              // 0x8(0x28)
};


// Size 0x30
class EventCharacterDead: public None
{
public:
	Struct DamageInstance                                        FinalBlow;                                         // 0x0(0x28)
	byte                                                         DeathType;                                         // 0x28(0x1)
};


// Size 0x8
class EventKilledCharacter: public None
{
public:
	Class Actor*                                                 KilledCharacter;                                   // 0x0(0x8)
};


// Size 0x78
class EventCharacterDeath: public None
{
public:
	Struct DamageInstance                                        DamageInstance;                                    // 0x0(0x28)
};


// Size 0x60
class DeadActionStateConstructionInfo: public None
{
public:
	Struct DamageInstance                                        FinalBlow;                                         // 0x30(0x28)
	byte                                                         DeathType;                                         // 0x58(0x1)
	byte                                                         RespawnCharacterType;                              // 0x59(0x1)
};


// Size 0x58
class DeadActionStateParams: public None
{
public:
	float                                                        FadeDelay;                                         // 0x0(0x4)
	float                                                        FadeDuration;                                      // 0x4(0x4)
	float                                                        FadeEventTimeout;                                  // 0x8(0x4)
	float                                                        FadeServerTimeout;                                 // 0xc(0x4)
	Struct LinearColor                                           FadeColour;                                        // 0x10(0x10)
	bool                                                         FadeAudio;                                         // 0x20(0x1)
	float                                                        DeathCameraBlackFadeDelay;                         // 0x24(0x4)
	float                                                        DeathCameraBlackFadeDuration;                      // 0x28(0x4)
	float                                                        DeathCameraBlackFadeEventTimeout;                  // 0x2c(0x4)
	float                                                        DeathCameraBlackFadeServerTimeout;                 // 0x30(0x4)
	Struct LinearColor                                           DeathCameraBlackFadeColour;                        // 0x34(0x10)
	float                                                        DeathCameraDelayBeforeEvaporate;                   // 0x44(0x4)
	bool                                                         DeathCameraFadeAudio;                              // 0x48(0x1)
	float                                                        DeathCameraDelay;                                  // 0x4c(0x4)
	Class GhostDataAsset*                                        PlayerGhostDataAsset;                              // 0x50(0x8)
};


// Size 0x1
class ActorDeactivationCompleted: public None
{
public:
};


// Size 0x4
class ActorDeactivationRequested: public None
{
public:
	float                                                        DeactivationDuration;                              // 0x0(0x4)
};


// Size 0x1
class ActorActivationCompleted: public None
{
public:
};


// Size 0x8
class ActorActivationRequested: public None
{
public:
	bool                                                         Reset;                                             // 0x0(0x1)
	float                                                        ActivationDuration;                                // 0x4(0x4)
};


// Size 0x20
class Locator: public None
{
public:
	byte                                                         Location;                                          // 0x0(0x1)
	Struct Vector                                                Position;                                          // 0x4(0xc)
	Struct Quat                                                  Rotation;                                          // 0x10(0x10)
};


// Size 0x4
class BlueprintableIntegerHandle: public None
{
public:
	int                                                          Handle;                                            // 0x0(0x4)
};


// Size 0x10
class ClassFunctionSelectionType: public None
{
public:
	class                                                        Class;                                             // 0x0(0x8)
	struct FName                                                 Function;                                          // 0x8(0x8)
};


// Size 0x30
class LocomotionActionStateConstructionInfo: public None
{
public:
};


// Size 0x1
class SqueakyWheelEnabledEvent: public None
{
public:
	bool                                                         SqueakyWheelEnabled;                               // 0x0(0x1)
};


// Size 0x1
class UseSingleStickCameraToggleModeChangedEvent: public None
{
public:
	byte                                                         UseSingleStickCameraToggleMode;                    // 0x0(0x1)
};


// Size 0x1
class UseSingleStickChangedEvent: public None
{
public:
	byte                                                         UseSingleStick;                                    // 0x0(0x1)
};


// Size 0x1
class PushToTalkModeChangedEvent: public None
{
public:
	byte                                                         PushToTalkMode;                                    // 0x0(0x1)
};


// Size 0x1
class ResetAutoCentreLookEvent: public None
{
public:
};


// Size 0x8
class CameraSpringArmPlayModeParameters: public None
{
public:
	byte                                                         PlayMode;                                          // 0x0(0x1)
	float                                                        CameraPullbackSpeed;                               // 0x4(0x4)
};


// Size 0xa0
class LookAtOffset: public None
{
public:
	float                                                        LookAtPitchRate;                                   // 0x0(0x4)
	float                                                        LookAtYawRate;                                     // 0x4(0x4)
	float                                                        LookAtYawRawScale;                                 // 0x8(0x4)
	float                                                        LookAtPitchRawScale;                               // 0xc(0x4)
};


// Size 0x14
class RewindComponentParameters: public None
{
public:
	float                                                        MaxTimeSpan;                                       // 0x0(0x4)
	float                                                        TimeStampModifier;                                 // 0x4(0x4)
	float                                                        MaxPredictionTimeDelta;                            // 0x8(0x4)
	float                                                        TimeStampEstimationForwardVectorDistance;          // 0xc(0x4)
	int                                                          MaxRecordPerSecond;                                // 0x10(0x4)
};


// Size 0x30
class RewindPhysicsServiceEntry: public None
{
public:
	Class RewindComponent*                                       Rewindable;                                        // 0x0(0x8)
};


// Size 0x4
class ItemBlockingParameters: public None
{
public:
	float                                                        BlockingHalfAngle;                                 // 0x0(0x4)
};


// Size 0x10
class ActivePlayerActivity: public None
{
public:
};


// Size 0x18
class PlayerActivityIconInfo: public None
{
public:
	byte                                                         ActivityType;                                      // 0x0(0x1)
	Struct StringAssetReference                                  ActivityIcon;                                      // 0x8(0x10)
};


// Size 0xc
class PlayerActivityLifetimeRule: public None
{
public:
	byte                                                         ActivityType;                                      // 0x0(0x1)
	float                                                        ActivityDuration;                                  // 0x4(0x4)
	byte                                                         ActivityToEnd;                                     // 0x8(0x1)
};


// Size 0x20
class EventRequestSayPhraseWithNonLocalisedArgument: public None
{
public:
	Struct FString                                               PhraseKey;                                         // 0x0(0x10)
	Struct FString                                               Argument;                                          // 0x10(0x10)
};


// Size 0x20
class EventRequestSayPhraseWithArgument: public None
{
public:
	Struct FString                                               PhraseKey;                                         // 0x0(0x10)
	Struct FString                                               ArgumentKey;                                       // 0x10(0x10)
};


// Size 0x10
class EventRequestSayPhrase: public None
{
public:
	Struct FString                                               PhraseKey;                                         // 0x0(0x10)
};


// Size 0x48
class NonVerbalPageData: public None
{
public:
	TArray<Struct NonVerbalPhraseData>                           Phrases;                                           // 0x0(0x10)
	Struct FText                                                 PageName;                                          // 0x10(0x38)
};


// Size 0x40
class NonVerbalPhraseData: public None
{
public:
	Struct FText                                                 TextToBroadcast;                                   // 0x0(0x38)
	bool                                                         RequiresWieldedItemObjectNameAsArgument;           // 0x38(0x1)
	bool                                                         WieldedItemObjectNameIsNotLocalised;               // 0x39(0x1)
};


// Size 0x40
class PhraseData: public None
{
public:
	Struct FText                                                 TextToBroadcast;                                   // 0x0(0x38)
	bool                                                         RequiresWieldedItemObjectNameAsArgument;           // 0x38(0x1)
	bool                                                         WieldedItemObjectNameIsNotLocalised;               // 0x39(0x1)
};


// Size 0x10
class ContextAction: public None
{
public:
	Class RadialContextBase*                                     Context;                                           // 0x0(0x8)
	Class RadialCreationRuleAsset*                               Radial;                                            // 0x8(0x8)
};


// Size 0x20
class RadialActionGroup: public None
{
public:
	Class RadialAction*                                          PrimaryAction;                                     // 0x0(0x8)
	Class RadialAction*                                          SecondaryAction;                                   // 0x8(0x8)
	Class RadialAction*                                          TertiaryAction;                                    // 0x10(0x8)
	Class RadialAction*                                          QuaternaryAction;                                  // 0x18(0x8)
};


// Size 0x78
class RadialInstance: public None
{
public:
	Struct FText                                                 Name;                                              // 0x8(0x38)
	Class RadialContentRule*                                     Content;                                           // 0x40(0x8)
	Class RadialAction*                                          PrimaryAction;                                     // 0x48(0x8)
	Class RadialAction*                                          SecondaryAction;                                   // 0x50(0x8)
	Class RadialAction*                                          TertiaryAction;                                    // 0x58(0x8)
	Class RadialAction*                                          QuaternaryAction;                                  // 0x60(0x8)
	Class RadialManagerInputComponent*                           InputComponent;                                    // 0x68(0x8)
	bool                                                         ShouldActionsUpdateWhenContextChanges;             // 0x70(0x1)
	bool                                                         ShouldContentUpdateWhenContextChanges;             // 0x71(0x1)
	bool                                                         ShouldRadialCloseWhenWieldingNewItem;              // 0x72(0x1)
	bool                                                         ShouldRadialCloseWhenStowingWieldedItem;           // 0x73(0x1)
};


// Size 0x80
class RadialRuleInstanceMapping: public None
{
public:
	Class RadialCreationRuleAsset*                               Rule;                                              // 0x0(0x8)
	Struct RadialInstance                                        Instance;                                          // 0x8(0x78)
};


// Size 0x20
class BaseRadialEntry: public None
{
public:
	Struct RadialInputBindings                                   RadialBindings;                                    // 0x0(0x10)
	Class RadialCreationRuleAsset*                               RadialCreationRule;                                // 0x10(0x8)
	Class RadialContextBase*                                     RadialContextBase;                                 // 0x18(0x8)
};


// Size 0x10
class RadialInputBindings: public None
{
public:
	class                                                        GamepadActivatedId;                                // 0x0(0x8)
	class                                                        GamepadDectivatedId;                               // 0x8(0x8)
};


// Size 0x18
class RadialContext: public None
{
public:
};


// Size 0x40
class PushCachedSlotActionEvent: public None
{
public:
	TArray<Class RadialContextChanged>                           NotificationIDs;                                   // 0x0(0x10)
};


// Size 0x2
class RadialContextChanged: public None
{
public:
};


// Size 0x20
class RadialActionBindings: public None
{
public:
	struct FName                                                 PrimaryActionKeyBinding;                           // 0x0(0x8)
	struct FName                                                 SecondaryActionKeyBinding;                         // 0x8(0x8)
	struct FName                                                 TertiaryActionKeyBinding;                          // 0x10(0x8)
	struct FName                                                 QuaternaryActionKeyBinding;                        // 0x18(0x8)
};


// Size 0x18
class UpdateRadialIconUrls: public None
{
public:
	TArray<Str None>                                             ItemUrlCacheList;                                  // 0x8(0x10)
};


// Size 0x4
class RadialPageChanged: public None
{
public:
};


// Size 0xc
class RadialInventoryCenterUpdated: public None
{
public:
	float                                                        X;                                                 // 0x4(0x4)
	float                                                        Y;                                                 // 0x8(0x4)
};


// Size 0x4
class RadialInventoryClearHighlight: public None
{
public:
};


// Size 0x8
class RadialInventorySlotHighlighted: public None
{
public:
	int                                                          SlotIndex;                                         // 0x4(0x4)
};


// Size 0x8
class FocusRadialInventorySlot: public None
{
public:
	int                                                          SlotIndex;                                         // 0x4(0x4)
};


// Size 0x40
class CanShowQuaternaryActionButton: public None
{
public:
	bool                                                         CanShow;                                           // 0x4(0x1)
	Struct FText                                                 Text;                                              // 0x8(0x38)
};


// Size 0x40
class CanShowTertiaryActionButton: public None
{
public:
	bool                                                         CanShow;                                           // 0x4(0x1)
	Struct FText                                                 Text;                                              // 0x8(0x38)
};


// Size 0x40
class CanShowSecondaryActionButton: public None
{
public:
	bool                                                         CanShow;                                           // 0x4(0x1)
	Struct FText                                                 Text;                                              // 0x8(0x38)
};


// Size 0x8
class CanShowPrimaryActionButton: public None
{
public:
	bool                                                         CanShow;                                           // 0x4(0x1)
};


// Size 0x8
class HideRadialInventory: public None
{
public:
	bool                                                         IsSwitchingToLinkedRadial;                         // 0x4(0x1)
};


// Size 0x4
class EnableRadialInventoryMouseControl: public None
{
public:
};


// Size 0x4
class ClearRadialInventory: public None
{
public:
};


// Size 0x40
class SetRadialTitleText: public None
{
public:
	Struct FText                                                 Text;                                              // 0x8(0x38)
};


// Size 0x68
class ShowRadialInventory: public None
{
public:
	Struct FText                                                 ActionText;                                        // 0x8(0x38)
	Struct RadialActionBindings                                  ActionBindings;                                    // 0x40(0x20)
	bool                                                         AsLinkedRadial;                                    // 0x60(0x1)
};


// Size 0x1
class EventDockableObjectDestroyed: public None
{
public:
};


// Size 0x1
class EventDockingStateChanged: public None
{
public:
};


// Size 0x18
class EventPlayerDockToObjectEnd: public None
{
public:
	bool                                                         CanLookAtBeDisabledWhenDockedToObject;             // 0x10(0x1)
};


// Size 0x18
class EventPlayerDockToObjectStart: public None
{
public:
	bool                                                         CanLookAtBeDisabledWhenDockedToObject;             // 0x10(0x1)
};


// Size 0x1
class EventUndockedFromObject: public None
{
public:
};


// Size 0x50
class InteractionInputComponentTickFunction: public None
{
public:
	Class InteractionInputComponent*                             Target;                                            // 0x48(0x8)
};


// Size 0x30
class InteractOnServerRpc: public None
{
public:
	Struct NetSubObjectPtr                                       Interactable;                                      // 0x10(0x14)
	class                                                        NotificationInputId;                               // 0x28(0x8)
};


// Size 0x48
class InteractObjectActionStateConstructionInfo: public None
{
public:
	Struct NetSubObjectPtr                                       InteractObject;                                    // 0x30(0x14)
};


// Size 0x8
class PlayerFinishedInteractingWithNPCDialog: public None
{
public:
	Class Actor*                                                 Interactee;                                        // 0x0(0x8)
};


// Size 0x1
class PlayerStartedInteractingWithNPCDialog: public None
{
public:
};


// Size 0x8
class EventStartDialogueOnServer: public None
{
public:
	Class Actor*                                                 Interactor;                                        // 0x0(0x8)
};


// Size 0x1
class InteractionClosedEvent: public None
{
public:
};


// Size 0x1c
class InteractionOptionSelectedNonUI: public None
{
public:
	struct FName                                                 EventName;                                         // 0x0(0x8)
	Struct Guid                                                  InstagatorCrewID;                                  // 0x8(0x10)
	int                                                          Index;                                             // 0x18(0x4)
};


// Size 0xc
class InteractionOptionSelected: public None
{
public:
	struct FName                                                 EventName;                                         // 0x0(0x8)
	int                                                          Index;                                             // 0x8(0x4)
};


// Size 0x1
class RequestCloseInteractionEvent: public None
{
public:
};


// Size 0x20
class UpdateInteractionEvent: public None
{
public:
	Struct InteractionDefinition                                 Definition;                                        // 0x0(0x20)
};


// Size 0x20
class InteractionDefinition: public None
{
public:
	Struct FString                                               Header;                                            // 0x0(0x10)
	TArray<Struct InteractionOption>                             Options;                                           // 0x10(0x10)
};


// Size 0x18
class InteractionOption: public None
{
public:
	Struct FString                                               Text;                                              // 0x0(0x10)
	int                                                          Index;                                             // 0x10(0x4)
};


// Size 0x20
class StartInteractionEvent: public None
{
public:
	Struct InteractionDefinition                                 Definition;                                        // 0x0(0x20)
};


// Size 0x8
class ItemUseSpeedParams: public None
{
public:
	float                                                        LookSpeedScalar;                                   // 0x0(0x4)
	float                                                        MaxMoveSpeedScalar;                                // 0x4(0x4)
};


// Size 0x30
class DetailAppearenceDesc: public None
{
public:
	Struct StringAssetReference                                  Mesh;                                              // 0x0(0x10)
	TArray<Struct DetailAppearenceMaterialDesc>                  Materials;                                         // 0x10(0x10)
	Struct StringAssetReference                                  CustomDepthMaterial;                               // 0x20(0x10)
};


// Size 0x18
class DetailAppearenceMaterialDesc: public None
{
public:
	Struct StringAssetReference                                  Material;                                          // 0x0(0x10)
	int                                                          MaterialIndex;                                     // 0x10(0x4)
};


// Size 0x18
class WieldableItemActionVisuals: public None
{
public:
	TArray<Class ItemActionEffectHandle>                         BlockActions;                                      // 0x0(0x10)
	byte                                                         AnimVariant;                                       // 0x10(0x1)
	bool                                                         IsAlternate;                                       // 0x11(0x1)
	bool                                                         HideItem;                                          // 0x12(0x1)
};


// Size 0x10
class ItemActionEffectHandle: public None
{
public:
};


// Size 0x1
class EventWieldableItemIsAboutToBeStowed: public None
{
public:
};


// Size 0x8
class EventItemDroppedOnActor: public None
{
public:
	Class Actor*                                                 DroppedActor;                                      // 0x0(0x8)
};


// Size 0x18
class EventWieldableItemDropped: public None
{
public:
	class                                                        DroppedItemCategory;                               // 0x0(0x8)
	Class Actor*                                                 ContactActor;                                      // 0x8(0x8)
	float                                                        DropDistance;                                      // 0x10(0x4)
	bool                                                         InDeepWater;                                       // 0x14(0x1)
};


// Size 0x8
class EventExplosionDidDestroyWieldedItem: public None
{
public:
	Class WieldableItem*                                         DestroyedItem;                                     // 0x0(0x8)
};


// Size 0x1
class LockedWieldableItemCategoriesUpdatedEvent: public None
{
public:
};


// Size 0x1
class WieldableItemsUpdatedEvent: public None
{
public:
};


// Size 0x1
class EventUseAlternateIdle: public None
{
public:
	bool                                                         UseAlternateIdle;                                  // 0x0(0x1)
};


// Size 0x8
class EventClientItemUseSpeedScaled: public None
{
public:
	float                                                        ClientTimeStamp;                                   // 0x0(0x4)
	bool                                                         bItemUseSlowed;                                    // 0x4(0x1)
};


// Size 0x10
class EventWieldableItemSetIsWielded: public None
{
public:
	Class Actor*                                                 Wielder;                                           // 0x0(0x8)
	bool                                                         bIsWielded;                                        // 0x8(0x1)
	bool                                                         bGettingDropped;                                   // 0x9(0x1)
	bool                                                         bIsUnstashing;                                     // 0xa(0x1)
};


// Size 0x10
class EventWieldableItemUseStoppedAndFullyHidden: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
	byte                                                         PerspectiveType;                                   // 0x8(0x1)
};


// Size 0x18
class EventWieldableItemUseStopped: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
	class                                                        InputID;                                           // 0x8(0x8)
	byte                                                         ItemUseStoppedReason;                              // 0x10(0x1)
	byte                                                         TrackId;                                           // 0x11(0x1)
};


// Size 0x30
class EventWieldableItemUseStarted: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
	class                                                        InputID;                                           // 0x8(0x8)
	Struct WieldableItemActionVisuals                            Visuals;                                           // 0x10(0x18)
	byte                                                         TrackId;                                           // 0x28(0x1)
};


// Size 0x10
class EventWieldableItemUseStartingAndJustMadeVisible: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
	byte                                                         PerspectiveType;                                   // 0x8(0x1)
};


// Size 0x28
class EventOneShotUseTriggered: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
	class                                                        InputID;                                           // 0x8(0x8)
	Struct WieldableItemActionVisuals                            Visuals;                                           // 0x10(0x18)
};


// Size 0x18
class ItemInfoTogglePair: public None
{
public:
	struct FName                                                 Toggle;                                            // 0x0(0x8)
	Struct StringClassReference                                  ItemInfo;                                          // 0x8(0x10)
};


// Size 0x48
class DropItemParams: public None
{
public:
	TArray<AssetClass StartPickupObjectActionRuleParams>         AttachOnDropParentTypes;                           // 0x0(0x10)
	Struct Vector                                                DropItemOffset;                                    // 0x10(0xc)
	float                                                        MaxShallowWaterHeightToAllowItemDrop;              // 0x1c(0x4)
	byte                                                         DropItemPosTestTraceChannel;                       // 0x20(0x1)
	float                                                        WaterVolumeOverlapRadius;                          // 0x24(0x4)
	float                                                        MaxDroppedItemPitchRoll;                           // 0x28(0x4)
	float                                                        ItemWorldProxyCapsuleCastRadius;                   // 0x2c(0x4)
	float                                                        ItemWorldProxyCapsuleCastHeight;                   // 0x30(0x4)
	float                                                        ItemWorldProxyCapsuleDownCastRadiusModifier;       // 0x34(0x4)
	float                                                        LineTraceDepth;                                    // 0x38(0x4)
	float                                                        SweepPercentageOnHit;                              // 0x3c(0x4)
	float                                                        HitDiffTolerance;                                  // 0x40(0x4)
	float                                                        LineTraceOffsetUpwardsFromStart;                   // 0x44(0x4)
};


// Size 0x10
class StartPickupObjectActionRuleParams: public None
{
public:
	TArray<Byte ItemProxyImpactVfxParams>                        WieldableItemSizesDisablePickup;                   // 0x0(0x10)
};


// Size 0x10
class ItemProxyImpactVfxParams: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
	Class Object*                                                Particles;                                         // 0x8(0x8)
};


// Size 0x20
class ActionVisualsOverride: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Struct WieldableItemActionVisuals                            ActionVisuals;                                     // 0x8(0x18)
};


// Size 0x40
class HoldToUseInput: public None
{
public:
	struct FName                                                 FeatureFlag;                                       // 0x0(0x8)
	class                                                        StartUse;                                          // 0x8(0x8)
	class                                                        StopUse;                                           // 0x10(0x8)
	Struct WieldableItemActionVisuals                            ActionVisuals;                                     // 0x18(0x18)
	Class HoldToUseInputVisualModifier*                          WieldableVisualModifier;                           // 0x30(0x8)
	bool                                                         SplitActionRules;                                  // 0x38(0x1)
};


// Size 0x20
class InputMontagePair: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class AnimSequenceBase*                                      Into;                                              // 0x8(0x8)
	Class AnimSequenceBase*                                      Loop;                                              // 0x10(0x8)
	Class AnimSequenceBase*                                      Outof;                                             // 0x18(0x8)
};


// Size 0x10
class InputSequencePair: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class AnimMontage*                                           Sequence;                                          // 0x8(0x8)
};


// Size 0x40
class WieldAnimationParams: public None
{
public:
	byte                                                         WieldLocation;                                     // 0x0(0x1)
	Struct Transform                                             PropOffset;                                        // 0x10(0x30)
};


// Size 0x18
class WieldingParamsAssetLookup: public None
{
public:
	class                                                        Class;                                             // 0x0(0x8)
	Struct StringAssetReference                                  Params;                                            // 0x8(0x10)
};


// Size 0x48
class PickupObjectActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           PickupableObject;                                  // 0x30(0x14)
};


// Size 0x50
class UseItemActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           UsableObject;                                      // 0x30(0x14)
	class                                                        InputID;                                           // 0x48(0x8)
};


// Size 0x1
class UseItemActionStateParams: public None
{
public:
};


// Size 0x8
class EventItemConsumed: public None
{
public:
	Class Actor*                                                 Consumer;                                          // 0x0(0x8)
};


// Size 0x1
class ContestBootyItemReleasedEvent: public None
{
public:
};


// Size 0x10
class EventItemWielded: public None
{
public:
	Class WieldableItem*                                         WieldedItem;                                       // 0x0(0x8)
	Class Actor*                                                 Wielder;                                           // 0x8(0x8)
};


// Size 0x8
class EventRemoveItemFromSpawner: public None
{
public:
};


// Size 0x18
class EventTransferObjectState: public None
{
public:
	Class Actor*                                                 TargetActor;                                       // 0x10(0x8)
};


// Size 0x1
class EventUnhideItem: public None
{
public:
};


// Size 0x1
class EventHideItem: public None
{
public:
};


// Size 0x1
class EventStowComplete: public None
{
public:
};


// Size 0x18
class EventStartStow: public None
{
public:
	bool                                                         FastStow;                                          // 0x10(0x1)
	byte                                                         StowMethod;                                        // 0x11(0x1)
};


// Size 0x1
class EventPreStartStow: public None
{
public:
	byte                                                         StowMethod;                                        // 0x0(0x1)
};


// Size 0x1
class EventVisibleWield: public None
{
public:
};


// Size 0x10
class EventStartWield: public None
{
public:
};


// Size 0x10
class EventObjectWielded: public None
{
public:
};


// Size 0x18
class EventObjectStowed: public None
{
public:
	bool                                                         FastStow;                                          // 0x10(0x1)
	byte                                                         StowMethod;                                        // 0x11(0x1)
};


// Size 0x10
class CanLoadItemCategoryEntry: public None
{
public:
	class                                                        CanLoadItemCategory;                               // 0x0(0x8)
	struct FName                                                 FeatureToggle;                                     // 0x8(0x8)
};


// Size 0x10
class EventPickupableObjectPickedUp: public None
{
public:
	Class PickupableObject*                                      PickupableObject;                                  // 0x0(0x8)
	Class Actor*                                                 InteractingPlayer;                                 // 0x8(0x8)
};


// Size 0x1
class EventPickupableObjectDropped: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
};


// Size 0x1
class EventPickupableObjectDestroyed: public None
{
public:
};


// Size 0x18
class UseItemNoParamsOnServerRpc: public None
{
public:
};


// Size 0x8
class EventItemTransmuted: public None
{
public:
	Class ItemInfo*                                              NewItem;                                           // 0x0(0x8)
};


// Size 0x20
class EventUseItemStopped: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class Actor*                                                 ActionSource;                                      // 0x8(0x8)
	Class Actor*                                                 Usable;                                            // 0x10(0x8)
	byte                                                         TrackToUse;                                        // 0x18(0x1)
};


// Size 0x20
class EventUseItemForceStop: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class Actor*                                                 ActionSource;                                      // 0x8(0x8)
	Class Actor*                                                 Usable;                                            // 0x10(0x8)
	byte                                                         TrackToUse;                                        // 0x18(0x1)
};


// Size 0x20
class TriggerStopUseEvent: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class Actor*                                                 ActionSource;                                      // 0x8(0x8)
	Class Actor*                                                 Usable;                                            // 0x10(0x8)
	byte                                                         TrackToUse;                                        // 0x18(0x1)
};


// Size 0x20
class TriggerStartUseEvent: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
	Class Actor*                                                 ActionSource;                                      // 0x8(0x8)
	Class Actor*                                                 Usable;                                            // 0x10(0x8)
	byte                                                         TrackToUse;                                        // 0x18(0x1)
};


// Size 0x8
class EventCharacterStoppedContinuousUse: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
};


// Size 0x8
class EventCharacterStartedContinuousUse: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
};


// Size 0x8
class EventCharacterStartedOneShotUse: public None
{
public:
	class                                                        InputID;                                           // 0x0(0x8)
};


// Size 0x1
class EventAthenaAnimationCurrentAnimationCanBeInterrupted: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemEquipStarted: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemEquipBlendFinished: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemUnequipFinished: public None
{
public:
};


// Size 0x1
class EventWieldedItemOutOfContinuousUseStateEntered: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemOutOfUseFinished: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemIntoContinuousUseFinished: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemContinuousUseStateEntered: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemOneShotInitialised: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemOneShotEntered: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemOneShotFinished: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemEquipFinished: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemStateChanged: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemComplexOneShotFinished: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemBlockingFeedbackFinished: public None
{
public:
};


// Size 0x1
class EventAnimationWieldedItemBlockingFinished: public None
{
public:
};


// Size 0x10
class EventWieldableStashedToStashPoint: public None
{
public:
	Class PrimitiveComponent*                                    StashPointAttachParent;                            // 0x0(0x8)
	bool                                                         Visible;                                           // 0x8(0x1)
};


// Size 0x18
class WieldableItemFirstTimeEquipRpc: public None
{
public:
	Class WwiseEvent*                                            FirstTimeEquipSfx;                                 // 0x10(0x8)
};


// Size 0x14
class RainZoneParametersAndLocation: public None
{
public:
	Struct RainZoneParameters                                    RainZoneParameters;                                // 0x0(0xc)
	Struct Vector2D                                              Location;                                          // 0xc(0x8)
};


// Size 0xc
class RainZoneParameters: public None
{
public:
	float                                                        OuterRadius;                                       // 0x0(0x4)
	float                                                        InnerRadius;                                       // 0x4(0x4)
	float                                                        Strength;                                          // 0x8(0x4)
};


// Size 0x1
class EventExposedToRainChanged: public None
{
public:
	bool                                                         IsExposedToRain;                                   // 0x0(0x1)
};


// Size 0x1
class EventWithinRainZoneChanged: public None
{
public:
	bool                                                         IsWithinRainZone;                                  // 0x0(0x1)
};


// Size 0x30
class WaterModifierDrowningParams: public None
{
public:
	Struct BlendableDrowningParams                               BlendableDrowningParams;                           // 0x0(0x28)
};


// Size 0x28
class BlendableDrowningParams: public None
{
public:
	float                                                        TimeToEmptyLungs;                                  // 0x0(0x4)
	float                                                        TimeToFillLungs;                                   // 0x4(0x4)
	float                                                        DamagePerMinute;                                   // 0x8(0x4)
	float                                                        DrownWaterLevel;                                   // 0xc(0x4)
	float                                                        GulpingStartTime;                                  // 0x10(0x4)
	float                                                        GulpingPeakTime;                                   // 0x14(0x4)
	float                                                        ClientErrorOxygenDifference;                       // 0x18(0x4)
	Class Object*                                                ExtraBubblesFirstPerson;                           // 0x20(0x8)
};


// Size 0x38
class ShipInternalWaterParams: public None
{
public:
	Class CurveFloat*                                            SloshinessCurve;                                   // 0x0(0x8)
	float                                                        MaxWaterAmount;                                    // 0x8(0x4)
	float                                                        MaxWaterHeight;                                    // 0xc(0x4)
	float                                                        CorrectiveSpeed;                                   // 0x10(0x4)
	float                                                        MaxClientWaterError;                               // 0x14(0x4)
	float                                                        WaterStartHeight;                                  // 0x18(0x4)
	float                                                        VisibleWaterLevelSpringAccel;                      // 0x1c(0x4)
	float                                                        MinShowAmount;                                     // 0x20(0x4)
	float                                                        MaxTipAdjustmentDepth;                             // 0x24(0x4)
	float                                                        MaxTipAdjustmentRoll;                              // 0x28(0x4)
	float                                                        MinTipAdjustmentAmount;                            // 0x2c(0x4)
	Class CurveFloat*                                            FillPercentageVSMaxRollAngleCurve;                 // 0x30(0x8)
};


// Size 0x88
class WaterModifierZoneParametersAndLocation: public None
{
public:
	Struct WaterModifierZoneParameters                           WaterModifierZoneParameters;                       // 0x0(0x78)
	Struct Vector                                                Location;                                          // 0x78(0xc)
};


// Size 0x78
class WaterModifierZoneParameters: public None
{
public:
	float                                                        OuterRadius;                                       // 0x0(0x4)
	float                                                        InnerRadius;                                       // 0x4(0x4)
	float                                                        Strength;                                          // 0x8(0x4)
	bool                                                         UseDragScalar;                                     // 0xc(0x1)
	float                                                        DragScalar;                                        // 0x10(0x4)
	Struct BlendableDrowningParams                               DrowningParameters;                                // 0x18(0x28)
	Struct BlendableDrowningParams                               ShipInternalWaterDrowningParameters;               // 0x40(0x28)
	bool                                                         IsSuperHeatedWater;                                // 0x68(0x1)
	bool                                                         ResetOxygenLevel;                                  // 0x69(0x1)
	bool                                                         Is3DWaterModifierZone;                             // 0x6a(0x1)
	float                                                        OuterCylinderHalfHeight;                           // 0x6c(0x4)
	float                                                        InnerCylinderHalfHeight;                           // 0x70(0x4)
};


// Size 0x4
class EventWaterAmountChanged: public None
{
public:
	float                                                        NewWaterAmount;                                    // 0x0(0x4)
};


// Size 0x1
class EventSubmergedStateChanged: public None
{
public:
	byte                                                         SubmergedState;                                    // 0x0(0x1)
};


// Size 0x1
class EventLocalPlayerSuperheatedWaterZoneChanged: public None
{
public:
	bool                                                         IsInSuperheatedWaterZone;                          // 0x0(0x1)
};


// Size 0x1
class EventPlayerViewUnderWaterStateChanged: public None
{
public:
	bool                                                         NewUnderWaterState;                                // 0x0(0x1)
};


// Size 0x4
class IntentSignChangedEvent: public None
{
public:
	int                                                          NewIntentSign;                                     // 0x0(0x4)
};


// Size 0x4
class IntentChangedEvent: public None
{
public:
	float                                                        NewIntent;                                         // 0x0(0x4)
};


// Size 0x1c
class IntentPredictor: public None
{
public:
	Struct IntentPredictorParams                                 Params;                                            // 0x4(0x18)
};


// Size 0x18
class IntentPredictorParams: public None
{
public:
	float                                                        MaxError;                                          // 0x0(0x4)
	float                                                        MinError;                                          // 0x4(0x4)
	float                                                        MinCorrectionVelocity;                             // 0x8(0x4)
	float                                                        MinValue;                                          // 0xc(0x4)
	float                                                        MaxValue;                                          // 0x10(0x4)
	bool                                                         WrapCorrectionToValueRange;                        // 0x14(0x1)
};


// Size 0x60
class ClamberActionStateConstructionInfo: public None
{
public:
	float                                                        NormalisedInteractionWidth;                        // 0x48(0x4)
	byte                                                         ClimbId;                                           // 0x4c(0x1)
	Struct LadderBlendParams                                     ClamberBlendParams;                                // 0x50(0xc)
};


// Size 0x1
class ClamberEndEvent: public None
{
public:
};


// Size 0xc
class ClamberBeginEvent: public None
{
public:
	Struct LadderBlendParams                                     ClamberBlendParams;                                // 0x0(0xc)
};


// Size 0x10
class ControlObjectActionRuleParams: public None
{
public:
	TArray<Byte EventPlayerReliquishedControlOfControllable>     WieldableItemSizesToDisableControl;                // 0x0(0x10)
};


// Size 0x8
class EventPlayerReliquishedControlOfControllable: public None
{
public:
	Class Actor*                                                 ControllableObject;                                // 0x0(0x8)
};


// Size 0x8
class EventPlayerTakenControlOfControllable: public None
{
public:
	Class Actor*                                                 ControllableObject;                                // 0x0(0x8)
};


// Size 0x1
class StartedUndockingFromControllableObjectEvent: public None
{
public:
};


// Size 0x10
class ClientRequestExitControlObjectActionStateNetworkEvent: public None
{
public:
};


// Size 0x34
class DockableBaseActionStateParams: public None
{
public:
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x18(0x1c)
};


// Size 0x40
class TakeControlActionStateConstructionInfo: public None
{
public:
};


// Size 0x1
class EventDockedToObject: public None
{
public:
	byte                                                         ObjectType;                                        // 0x0(0x1)
};


// Size 0x8
class EventRelinquishedControlOfObject: public None
{
public:
	Class Object*                                                RelinquishedObject;                                // 0x0(0x8)
};


// Size 0x18
class EventTakenControlOfObject: public None
{
public:
	byte                                                         ControllableType;                                  // 0x10(0x1)
};


// Size 0x8
class EventReceiveMountpointComponentState: public None
{
public:
	Class MountpointComponent*                                   Source;                                            // 0x0(0x8)
};


// Size 0x60
class MountpointParams: public None
{
public:
	class                                                        PreviewTrinket;                                    // 0x0(0x8)
	Struct Transform                                             MountpointRelativePosition;                        // 0x10(0x30)
	Struct Vector                                                InteractionBoxExtent;                              // 0x40(0xc)
	TArray<Class InteractionBoxExtent>                           AcceptedMountableTypes;                            // 0x50(0x10)
};


// Size 0x10
class ReplicatedMountpointData: public None
{
public:
	Class InteractableComponentWithActionRules*                  InteractableComponentWithActionRules;              // 0x0(0x8)
	class                                                        CurrentTrinketClass;                               // 0x8(0x8)
};


// Size 0x8
class MountpointState: public None
{
public:
	Class MountpointComponent*                                   MountpointComponent;                               // 0x0(0x8)
};


// Size 0x18
class MountTrinketActionRuleParams: public None
{
public:
	class                                                        PressedNotificationInputId;                        // 0x0(0x8)
	class                                                        ReleasedNotificationInputId;                       // 0x8(0x8)
	float                                                        InteractionInputHoldTime;                          // 0x10(0x4)
};


// Size 0x1
class EventMountedItemFullyInterpolatedToMountpoint: public None
{
public:
};


// Size 0x20
class UnmountedFromMountpointEvent: public None
{
public:
};


// Size 0x18
class MountCompleteEvent: public None
{
public:
	Class Actor*                                                 MountedToActor;                                    // 0x0(0x8)
	Class Actor*                                                 MountedActor;                                      // 0x8(0x8)
	Class Actor*                                                 MountedByActor;                                    // 0x10(0x8)
};


// Size 0x20
class MountedOnMountpointEvent: public None
{
public:
};


// Size 0x1
class TransitionLadderEndEvent: public None
{
public:
	byte                                                         LadderTransitionMode;                              // 0x0(0x1)
};


// Size 0x20
class TransitionLadderBeginEvent: public None
{
public:
	byte                                                         LadderTransitionMode;                              // 0x0(0x1)
	Struct LadderDefinition                                      LadderDefinition;                                  // 0x4(0x1c)
};


// Size 0x4
class UseLadderUpdateIntentEvent: public None
{
public:
};


// Size 0x8
class UseLadderUpdateHeightEvent: public None
{
public:
};


// Size 0x1
class UseLadderEndEvent: public None
{
public:
};


// Size 0x1c
class UseLadderBeginEvent: public None
{
public:
	Struct LadderDefinition                                      LadderDefinition;                                  // 0x0(0x1c)
};


// Size 0x10
class InvalidFireRequestDetected: public None
{
public:
	Class Object*                                                RequestingObject;                                  // 0x0(0x8)
};


// Size 0x20
class RequestAuthoritativeFire: public None
{
public:
	Class Object*                                                RequestingObject;                                  // 0x0(0x8)
};


// Size 0x10
class StunAttackerOnHitSurfacePair: public None
{
public:
	Class PhysicalMaterial*                                      PhysMaterial;                                      // 0x0(0x8)
	float                                                        StunDuration;                                      // 0x8(0x4)
};


// Size 0x8
class AttackTimingWindow: public None
{
public:
	float                                                        StartTime;                                         // 0x0(0x4)
	float                                                        EndTime;                                           // 0x4(0x4)
};


// Size 0x1
class EventMeleeAttackProcessorInterrupted: public None
{
public:
};


// Size 0x8
class EventMeleeAttackStarted: public None
{
public:
	Class MeleeAttackDataAsset*                                  AttackData;                                        // 0x0(0x8)
};


// Size 0x1
class EventPlayerNameOverridesLoaded: public None
{
public:
};


// Size 0x2c
class LightingZoneParametersAndLocation: public None
{
public:
	Struct LightingZoneParameters                                LightingZoneParameters;                            // 0x0(0x20)
	Struct Vector                                                Location;                                          // 0x20(0xc)
};


// Size 0x20
class LightingZoneParameters: public None
{
public:
	int                                                          PriorityLayer;                                     // 0x0(0x4)
	int                                                          TargetLightingIndex;                               // 0x4(0x4)
	float                                                        OuterRadius;                                       // 0x8(0x4)
	float                                                        InnerRadius;                                       // 0xc(0x4)
	float                                                        Weight;                                            // 0x10(0x4)
	bool                                                         IsUnderwaterZone;                                  // 0x14(0x1)
	bool                                                         Is3DLightingZone;                                  // 0x15(0x1)
	float                                                        OuterCylinderHalfHeight;                           // 0x18(0x4)
	float                                                        InnerCylinderHalfHeight;                           // 0x1c(0x4)
};


// Size 0x8
class LightingZoneBlendValues: public None
{
public:
	int                                                          LightingSetIndex;                                  // 0x0(0x4)
	float                                                        LightingZoneWeight;                                // 0x4(0x4)
};


// Size 0x1c
class AtmosphericPressureZoneParametersAndLocation: public None
{
public:
	Struct AtmosphericPressureZoneParameters                     PressureZoneParameters;                            // 0x0(0x14)
	Struct Vector2D                                              Location;                                          // 0x14(0x8)
};


// Size 0x14
class AtmosphericPressureZoneParameters: public None
{
public:
	float                                                        Radius;                                            // 0x0(0x4)
	float                                                        TargetPressure;                                    // 0x4(0x4)
	float                                                        PushForce;                                         // 0x8(0x4)
	float                                                        TwistForce;                                        // 0xc(0x4)
	float                                                        Weight;                                            // 0x10(0x4)
};


// Size 0xb0
class GameEventSettings: public None
{
public:
	class                                                        GameEventType;                                     // 0x0(0x8)
	float                                                        RepeatQueryTime;                                   // 0x8(0x4)
	float                                                        InertQueryTime;                                    // 0xc(0x4)
	float                                                        InertCancelTime;                                   // 0x10(0x4)
	Struct WeightedProbabilityRangeOfRanges                      FirstRegenInterval;                                // 0x18(0x30)
	Struct WeightedProbabilityRangeOfRanges                      RegenInterval;                                     // 0x48(0x30)
	Struct WeightedProbabilityRangeOfRanges                      SpawnTime;                                         // 0x78(0x30)
	bool                                                         Required;                                          // 0xa8(0x1)
};


// Size 0x38
class GameEventSchedulerConfiguration: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	struct FName                                                 ServerConfigName;                                  // 0x8(0x8)
	TArray<Struct ServerConfigName>                              MainEvents;                                        // 0x10(0x10)
	TArray<Struct GameEventWeightedList>                         SubConfigs;                                        // 0x20(0x10)
	float                                                        Weight;                                            // 0x30(0x4)
};


// Size 0x20
class GameEventWeightedList: public None
{
public:
	struct FName                                                 ServerConfigName;                                  // 0x0(0x8)
	TArray<Struct GameEventCount>                                Events;                                            // 0x8(0x10)
	float                                                        Weight;                                            // 0x18(0x4)
};


// Size 0x10
class GameEventCount: public None
{
public:
	class                                                        GameEventType;                                     // 0x0(0x8)
	int                                                          NumAllowed;                                        // 0x8(0x4)
};


// Size 0xc
class GameEventExclusionZone: public None
{
public:
	Struct Vector2D                                              Location;                                          // 0x0(0x8)
	float                                                        Radius;                                            // 0x8(0x4)
};


// Size 0x10
class GameEventServiceDesc: public None
{
public:
	Struct StringAssetReference                                  ServiceParamsAssetPath;                            // 0x0(0x10)
};


// Size 0x20
class GameEventSchedulerConfigChangeTelemetryEvent: public None
{
public:
	Struct Guid                                                  ConfigId;                                          // 0x0(0x10)
	TArray<Struct GameEventSchedulerConfigTelemetry>             Events;                                            // 0x10(0x10)
};


// Size 0x8
class GameEventSchedulerConfigTelemetry: public None
{
public:
	byte                                                         TrackedActorType;                                  // 0x0(0x1)
	int                                                          NumAllowed;                                        // 0x4(0x4)
};


// Size 0x1
class EventApplicationAccountLinkingEventRequest: public None
{
public:
};


// Size 0x1
class EventApplicationSignOutRequest: public None
{
public:
};


// Size 0x1
class EventApplicationStartRequest: public None
{
public:
};


// Size 0x1
class EventApplicationExitRequest: public None
{
public:
};


// Size 0x1
class EventApplicationResumed: public None
{
public:
};


// Size 0x1
class EventApplicationSuspended: public None
{
public:
};


// Size 0x1
class EventApplicationReactivated: public None
{
public:
};


// Size 0x1
class EventApplicationDeactivated: public None
{
public:
};


// Size 0x10
class GameSessionIdTelemetryFragmentInput: public None
{
public:
};


// Size 0x20
class GameSessionIdTelemetryFragment: public None
{
public:
	Struct FString                                               SessionHostId;                                     // 0x0(0x10)
	Struct Guid                                                  SessionId;                                         // 0x10(0x10)
};


// Size 0x1c
class BuryDecal: public None
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct Vector                                                Location;                                          // 0x10(0xc)
};


// Size 0x14
class BuriedFactor: public None
{
public:
	int                                                          CurrentBuriedFactor;                               // 0x0(0x4)
	int                                                          FactorToConsiderFullyBuried;                       // 0x4(0x4)
	int                                                          BuryStep;                                          // 0x8(0x4)
	int                                                          ExhumeStep;                                        // 0xc(0x4)
	byte                                                         LastDigDirection;                                  // 0x10(0x1)
};


// Size 0x28
class ItemDiggingMergedConfig: public None
{
public:
	Class ItemDiggingBaseConfig*                                 BaseConfig;                                        // 0x0(0x8)
	Class ItemDiggingAnimationConfig*                            AnimationConfig;                                   // 0x8(0x8)
	Class ItemDiggingEffectsConfig*                              EffectsConfig;                                     // 0x10(0x8)
	Class ItemDiggingAudioConfig*                                AudioConfig;                                       // 0x18(0x8)
	Class ItemDiggingBuryConfig*                                 BuryingConfig;                                     // 0x20(0x8)
};


// Size 0x8
class EventBuriedItemRevealed: public None
{
public:
	Class ItemInfo*                                              BuriedItem;                                        // 0x0(0x8)
};


// Size 0x8
class PlayerStartedDiggingEvent: public None
{
public:
	Class Actor*                                                 ActorBeingDugUp;                                   // 0x0(0x8)
};


// Size 0x10
class EventDiggingStarted: public None
{
public:
	byte                                                         DigDirection;                                      // 0x0(0x1)
	Class Actor*                                                 ActorBeingDugUp;                                   // 0x8(0x8)
};


// Size 0x14
class EncounterHandle: public None
{
public:
};


// Size 0x30
class Encounter: public None
{
public:
	Class Actor*                                                 EncounterActor;                                    // 0x0(0x8)
};


// Size 0x18
class EncounterListener: public None
{
public:
	Class Actor*                                                 EncounterListenerActor;                            // 0x0(0x8)
	Struct Vector                                                EncounterListenerLocation;                         // 0x8(0xc)
	byte                                                         EncounterListenerType;                             // 0x14(0x1)
};


// Size 0x20
class EncounterServiceParams: public None
{
public:
	TArray<Struct EncounterServiceEntry>                         EncounterList;                                     // 0x0(0x10)
	int                                                          MinEventsToTriggerPerCycle;                        // 0x10(0x4)
	double                                                       SecondsToSpendTriggeringEventsPerCycle;            // 0x18(0x8)
};


// Size 0x18
class EncounterServiceEntry: public None
{
public:
	byte                                                         EncounterListenerType;                             // 0x0(0x1)
	TArray<Byte EncounterListenerType>                           ValidEncounterTypes;                               // 0x8(0x10)
};


// Size 0x40
class EncounterListenerData: public None
{
public:
	TArray<Byte EventEncounterEnd>                               EncounterListenerTypes;                            // 0x0(0x10)
	TArray<class EncounterListenerActors*>                       EncounterListenerActors;                           // 0x10(0x10)
	TArray<Struct EncounterListenerActors>                       EncounterListenerLocations;                        // 0x20(0x10)
};


// Size 0x20
class EventEncounterEnd: public None
{
public:
};


// Size 0x20
class EventEncounterBase: public None
{
public:
	Struct Guid                                                  EncounterId;                                       // 0x0(0x10)
	Class Actor*                                                 EncounterActor;                                    // 0x10(0x8)
	byte                                                         EncounterType;                                     // 0x18(0x1)
	float                                                        EncounterRadiusSquared;                            // 0x1c(0x4)
};


// Size 0x20
class EventEncounterStart: public None
{
public:
};


// Size 0x10
class FeedStruct: public None
{
public:
	Class Actor*                                                 ActorToFeed;                                       // 0x0(0x8)
	bool                                                         WantRules;                                         // 0x8(0x1)
};


// Size 0x1
class EventStarved: public None
{
public:
};


// Size 0x4
class EventStarvingAmountChanged: public None
{
public:
	float                                                        PercentageStarved;                                 // 0x0(0x4)
};


// Size 0x8
class EventJustBeenFed: public None
{
public:
	Class Actor*                                                 FedBy;                                             // 0x0(0x8)
};


// Size 0x8
class EventStartedBeingFed: public None
{
public:
	Class Actor*                                                 FedBy;                                             // 0x0(0x8)
};


// Size 0x50
class CappedItemsByGroup: public None
{
public:
};


// Size 0x10
class ManagedItems: public None
{
public:
	TArray<class Items*>                                         Items;                                             // 0x0(0x10)
};


// Size 0x10
class ItemSpawnDistribution: public None
{
public:
	TArray<Struct ItemSpawnWeightedType>                         WeightedList;                                      // 0x0(0x10)
};


// Size 0x28
class ItemSpawnWeightedType: public None
{
public:
	class                                                        Type;                                              // 0x0(0x8)
	struct FName                                                 Feature;                                           // 0x8(0x8)
	int                                                          Weight;                                            // 0x10(0x4)
	TArray<class Requirements*>                                  Requirements;                                      // 0x18(0x10)
};


// Size 0x10
class WeightedItemDescSpawnDataWithRandomQuantityResult: public None
{
public:
	Class ItemSpawnData*                                         ItemSpawnData;                                     // 0x0(0x8)
	bool                                                         CustomLifetimeManagement;                          // 0xc(0x1)
};


// Size 0x10
class WeightedItemDescSpawnDataAssetsWithWeights: public None
{
public:
	TArray<Struct WeightedItemDescSpawnDataAssetWithWeight>      WeightedItemSpawnDatas;                            // 0x0(0x10)
};


// Size 0x18
class WeightedItemDescSpawnDataAssetWithWeight: public None
{
public:
	Class WeightedItemDescSpawnDataAsset*                        WeightedItemSpawnDataAsset;                        // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
	bool                                                         LimitMaxSpawnedItems;                              // 0xc(0x1)
	int                                                          MaxTimesCanBeSelected;                             // 0x10(0x4)
};


// Size 0x50
class WeightedItemDescSpawnDataWithRandomQuantity: public None
{
public:
	Struct WeightedProbabilityRange                              ProbabilityRange;                                  // 0x30(0x20)
};


// Size 0x30
class WeightedItemDescSpawnData: public None
{
public:
	Class ItemSpawnData*                                         ItemSpawnData;                                     // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
	struct FName                                                 Feature;                                           // 0xc(0x8)
	TArray<class Requirements*>                                  Requirements;                                      // 0x18(0x10)
	bool                                                         CustomLifetimeManagement;                          // 0x28(0x1)
};


// Size 0x50
class SpawnedItem: public None
{
public:
	Class ItemSpawnData*                                         ItemSpawnData;                                     // 0x8(0x8)
	bool                                                         CustomLifetimeManagement;                          // 0x40(0x1)
};


// Size 0x40
class SpawnInstance: public None
{
public:
	Class ItemSpawnData*                                         ItemSpawnData;                                     // 0x30(0x8)
	bool                                                         CustomLifetimeManagement;                          // 0x38(0x1)
};


// Size 0x40
class ItemSpawnTransformWithRandomQuantity: public None
{
public:
	Struct Transform                                             Transform;                                         // 0x0(0x30)
	Class WeightedItemDescSpawnDataAssetWithRandomQuantity*      ReferencedSpawnDistributionAssetWithRandomQuantity; // 0x30(0x8)
	float                                                        SpawnRadius;                                       // 0x38(0x4)
};


// Size 0x40
class ItemSpawnTransform: public None
{
public:
	Struct Transform                                             Transform;                                         // 0x0(0x30)
	Class WeightedItemDescSpawnDataAsset*                        ReferencedSpawnDistributionAsset;                  // 0x30(0x8)
	int                                                          Weight;                                            // 0x38(0x4)
};


// Size 0x18
class TaleQuestWeightedItemDescSpawnData: public None
{
public:
	Class ItemSpawnData*                                         ItemSpawnData;                                     // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
	bool                                                         LimitMaxSpawnedItems;                              // 0xc(0x1)
	int                                                          MaxTimesCanBeSelected;                             // 0x10(0x4)
};


// Size 0x18
class CauseOfDeathItemSpawnDistribution: public None
{
public:
	TArray<Byte WeightedItemDescSpawner>                         CauseOfDeath;                                      // 0x0(0x10)
	Class WeightedItemDescSpawnDataAsset*                        ItemSpawnDistributionAsset;                        // 0x10(0x8)
};


// Size 0x58
class WeightedItemDescSpawner: public None
{
public:
	byte                                                         SpawnSource;                                       // 0x0(0x1)
	TArray<Struct SpawnerData>                                   SpawnList;                                         // 0x8(0x10)
	TArray<Weakclass SpawnList>                                  SpawnedItems;                                      // 0x18(0x10)
};


// Size 0x40
class SpawnerData: public None
{
public:
	Class ItemSpawnData*                                         ItemSpawnData;                                     // 0x0(0x8)
};


// Size 0x1
class EventItemSpawnedFromSpawner: public None
{
public:
};


// Size 0x1
class ItemSpawnerFinishedSpawningEvent: public None
{
public:
};


// Size 0x1
class EventItemSpawnerOwnershipChanged: public None
{
public:
};


// Size 0xc
class CanvasLOD: public None
{
public:
	bool                                                         IsCanvasCountLimited;                              // 0x0(0x1)
	int                                                          MaxNumCanvasesAtThisLOD;                           // 0x4(0x4)
	float                                                        ResolutionScaler;                                  // 0x8(0x4)
};


// Size 0x70
class TreasureMapWidgetTextWithScaledWidthBackground: public None
{
public:
	Struct TreasureMapWidgetTexture                              Background;                                        // 0x38(0x28)
	float                                                        MaxTextWidthForDefaultTextureScale;                // 0x60(0x4)
	float                                                        MinScaleModifier;                                  // 0x64(0x4)
	float                                                        MaxScaleModifier;                                  // 0x68(0x4)
};


// Size 0x30
class TreasureMapWidgetStreamedTexture: public None
{
public:
	Struct StringAssetReference                                  TexturePath;                                       // 0x18(0x10)
	float                                                        RelativeHeightModifier;                            // 0x28(0x4)
	bool                                                         FlipX;                                             // 0x2c(0x1)
};


// Size 0x20
class ClientCargoRunCrewDataUnit: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<Struct CrewId>                                        NPCPickUpPoints;                                   // 0x10(0x10)
};


// Size 0x28
class CargoRunItemDropOffData: public None
{
public:
	Struct Guid                                                  PickUpId;                                          // 0x0(0x10)
	Struct Guid                                                  DeliveryLocationId;                                // 0x10(0x10)
};


// Size 0x1
class ItemLoadoutSetEvent: public None
{
public:
};


// Size 0x1
class ItemLoadoutSlotsUpdatedEvent: public None
{
public:
};


// Size 0x8
class ItemLoadoutItemCategoryRemovedEvent: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
};


// Size 0x8
class ItemLoadoutItemRemovedEvent: public None
{
public:
	Class ItemInfo*                                              Item;                                              // 0x0(0x8)
};


// Size 0x8
class ItemLoadoutItemCategoryAddedEvent: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
};


// Size 0x8
class ItemLoadoutItemAddedEvent: public None
{
public:
	Class ItemInfo*                                              Item;                                              // 0x0(0x8)
};


// Size 0x48
class CategorisedLoadout: public None
{
public:
	TArray<Struct RewardDefinition>                              ItemLoadout;                                       // 0x0(0x10)
	TArray<Struct LoadoutCategory>                               ClothingLoadout;                                   // 0x10(0x10)
	TArray<Struct LoadoutPetCategory>                            PetLoadout;                                        // 0x20(0x10)
	bool                                                         PetNamingDisallowed;                               // 0x30(0x1)
	bool                                                         InitialLoadout;                                    // 0x31(0x1)
	Struct FString                                               Hash;                                              // 0x38(0x10)
};


// Size 0x30
class LoadoutPetCategory: public None
{
public:
	Struct FString                                               PetEntitlementId;                                  // 0x0(0x10)
	Struct FString                                               PetCustomizationEntitlementId;                     // 0x10(0x10)
	Struct FString                                               PetName;                                           // 0x20(0x10)
};


// Size 0x20
class LoadoutCategory: public None
{
public:
	Struct FString                                               CategoryName;                                      // 0x0(0x10)
	Struct FString                                               EntitlementId;                                     // 0x10(0x10)
};


// Size 0x40
class RewardDefinition: public None
{
public:
	struct FName                                                 RewardIdentifier;                                  // 0x0(0x8)
	Class PopUpMessageDesc*                                      PopUp;                                             // 0x8(0x8)
	bool                                                         IgnorePopUp;                                       // 0x10(0x1)
	TArray<class Rewards*>                                       Rewards;                                           // 0x18(0x10)
	TArray<Class Rewards>                                        PrerequisiteEntitlements;                          // 0x28(0x10)
	bool                                                         AllowedFromInsecureSources;                        // 0x38(0x1)
	bool                                                         AwardToAccountAndNotJustToPirate;                  // 0x39(0x1)
	bool                                                         EmissaryExempt;                                    // 0x3a(0x1)
};


// Size 0x30
class RewardRequestCrewGame: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<Struct CrewId>                                        Pirates;                                           // 0x10(0x10)
	struct FName                                                 EmissaryAffiliation;                               // 0x20(0x8)
};


// Size 0x60
class RewardGrantedEvent: public None
{
public:
	Struct FString                                               RewardId;                                          // 0x0(0x10)
	byte                                                         CurrencyId;                                        // 0x10(0x1)
	Struct FString                                               CompanyId;                                         // 0x18(0x10)
	TArray<Str >                                                 Entitlements;                                      // 0x30(0x10)
	Struct Guid                                                  RequestID;                                         // 0x40(0x10)
	Struct FString                                               DeferralReason;                                    // 0x50(0x10)
};


// Size 0x38
class XPGrantedEvent: public None
{
public:
	struct FName                                                 CompanyId;                                         // 0x4(0x8)
	Struct Guid                                                  RequestID;                                         // 0xc(0x10)
	Struct Guid                                                  BootyId;                                           // 0x1c(0x10)
	struct FName                                                 EmissaryAffiliation;                               // 0x2c(0x8)
};


// Size 0x30
class CurrencyGrantedEvent: public None
{
public:
	byte                                                         Currency;                                          // 0x4(0x1)
	Struct Guid                                                  TransactionId;                                     // 0x8(0x10)
	struct FName                                                 EmissaryAffiliation;                               // 0x18(0x8)
	double                                                       EmissaryMultiplier;                                // 0x28(0x8)
};


// Size 0x18
class RewardRequestSucceededEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	struct FName                                                 RewardId;                                          // 0x10(0x8)
};


// Size 0x14
class RewardRequestFailedEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	byte                                                         FailureReason;                                     // 0x10(0x1)
};


// Size 0x90
class PenaltyRequestEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x10(0x78)
	struct FName                                                 PenaltyId;                                         // 0x88(0x8)
};


// Size 0xb8
class RewardRequestForPirateEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x10(0x78)
	Struct Guid                                                  CrewId;                                            // 0x88(0x10)
	struct FName                                                 RewardId;                                          // 0x98(0x8)
	struct FName                                                 CompanyAffiliation;                                // 0xa0(0x8)
	struct FName                                                 EmissaryAffiliation;                               // 0xa8(0x8)
	int                                                          EmissaryLevel;                                     // 0xb0(0x4)
	bool                                                         FromInsecureSource;                                // 0xb4(0x1)
	bool                                                         NotifyPlayer;                                      // 0xb5(0x1)
};


// Size 0x60
class DeferredRewardRequestEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	struct FName                                                 CompanyAffiliation;                                // 0x10(0x8)
	struct FName                                                 RewardId;                                          // 0x18(0x8)
	Struct FString                                               UserId;                                            // 0x20(0x10)
	Struct FString                                               PirateId;                                          // 0x30(0x10)
	bool                                                         RewardAccount;                                     // 0x40(0x1)
	bool                                                         NotifyPlayer;                                      // 0x41(0x1)
	bool                                                         DontRewardCurrency;                                // 0x42(0x1)
	bool                                                         DontRewardXp;                                      // 0x43(0x1)
	bool                                                         DontRewardSeasonXp;                                // 0x44(0x1)
	Struct FString                                               DeferralReason;                                    // 0x48(0x10)
	double                                                       RewardMultiplier;                                  // 0x58(0x8)
};


// Size 0x90
class AllianceRewardRequestEvent: public None
{
public:
	Struct Guid                                                  AllianceId;                                        // 0x0(0x10)
	Struct Guid                                                  RequestID;                                         // 0x10(0x10)
	Struct RewardRequestCrewGame                                 PrimaryRecipient;                                  // 0x20(0x30)
	TArray<Struct PrimaryRecipient>                              SecondaryRecipients;                               // 0x50(0x10)
	struct FName                                                 RewardId;                                          // 0x60(0x8)
	struct FName                                                 CompanyAffiliation;                                // 0x68(0x8)
	Struct Guid                                                  BootyId;                                           // 0x70(0x10)
	struct FName                                                 NPCName;                                           // 0x80(0x8)
	bool                                                         NotifyPlayer;                                      // 0x88(0x1)
	bool                                                         DontRewardCurrency;                                // 0x89(0x1)
	bool                                                         DontRewardXp;                                      // 0x8a(0x1)
	bool                                                         DontRewardSeasonXp;                                // 0x8b(0x1)
};


// Size 0x50
class RewardRequestEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	TArray<Struct RequestID>                                     PirateIdentities;                                  // 0x10(0x10)
	Struct Guid                                                  CrewId;                                            // 0x20(0x10)
	struct FName                                                 RewardId;                                          // 0x30(0x8)
	struct FName                                                 CompanyAffiliation;                                // 0x38(0x8)
	struct FName                                                 EmissaryAffiliation;                               // 0x40(0x8)
	int                                                          EmissaryLevel;                                     // 0x48(0x4)
	bool                                                         NotifyPlayer;                                      // 0x4c(0x1)
};


// Size 0x18
class WeightedRewardDistribution: public None
{
public:
	TArray<Struct WeightedRewardEntry>                           RewardWeightings;                                  // 0x0(0x10)
};


// Size 0x20
class WeightedRewardEntry: public None
{
public:
	Struct RewardId                                              Reward;                                            // 0x0(0x8)
	Struct FString                                               WeightingConfigurationKey;                         // 0x8(0x10)
	float                                                        FallbackWeight;                                    // 0x18(0x4)
};


// Size 0x10
class WeightedRewardTable: public None
{
public:
	TArray<Struct WeightedRewardTableUnit>                       Rewards;                                           // 0x0(0x10)
};


// Size 0x10
class WeightedRewardTableUnit: public None
{
public:
	class                                                        Entitlement;                                       // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
};


// Size 0x38
class RewardRuntimeDefinition: public None
{
public:
	Class PopUpMessageDesc*                                      PopUp;                                             // 0x8(0x8)
	TArray<Class PopUp>                                          PrerequisiteEntitlements;                          // 0x20(0x10)
};


// Size 0x40
class StorageContainerBackingStore: public None
{
public:
	TArray<Struct AllowedItemsBasedOnFeature>                    AllowedItems;                                      // 0x0(0x10)
	int                                                          MaxCapacityPerNode;                                // 0x10(0x4)
	int                                                          MaxNumNodes;                                       // 0x14(0x4)
	int                                                          MaxCapacityTotal;                                  // 0x18(0x4)
	TArray<Struct StorageContainerNode>                          ContainerNodes;                                    // 0x20(0x10)
	bool                                                         AllowedItemsAreCached;                             // 0x30(0x1)
	Class ContainerAllowedItemsDataAsset*                        CachedAllowedItems;                                // 0x38(0x8)
};


// Size 0x10
class StorageContainerNode: public None
{
public:
	class                                                        ItemDesc;                                          // 0x0(0x8)
	int                                                          NumItems;                                          // 0x8(0x4)
};


// Size 0x10
class AllowedItemsBasedOnFeature: public None
{
public:
	struct FName                                                 FeatureName;                                       // 0x0(0x8)
	Class ContainerAllowedItemsDataAsset*                        AllowedItems;                                      // 0x8(0x8)
};


// Size 0x30
class InventoryInteractionUpdateEvent: public None
{
public:
	TArray<Struct InventoryInteractionTakeAllRequestEvent>       Current;                                           // 0x0(0x10)
	TArray<Struct Current>                                       Available;                                         // 0x10(0x10)
	TArray<Struct Available>                                     Descriptions;                                      // 0x20(0x10)
};


// Size 0x4
class InventoryInteractionTakeAllRequestEvent: public None
{
public:
	int                                                          Index;                                             // 0x0(0x4)
};


// Size 0x4
class InventoryInteractionTakeRequestEvent: public None
{
public:
	int                                                          Index;                                             // 0x0(0x4)
};


// Size 0x10
class InventoryInteractionStowAllRequestEvent: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
};


// Size 0x10
class InventoryInteractionStowRequestEvent: public None
{
public:
	Struct FString                                               ItemDesc;                                          // 0x0(0x10)
};


// Size 0x1
class InventoryInteractionClosedEvent: public None
{
public:
};


// Size 0x1
class CloseInventoryInteractionEvent: public None
{
public:
};


// Size 0x48
class OpenInventoryInteractionEvent: public None
{
public:
	Struct FString                                               InventoryName;                                     // 0x0(0x10)
	TArray<Struct InventoryName>                                 Current;                                           // 0x10(0x10)
	TArray<Struct Current>                                       Available;                                         // 0x20(0x10)
	TArray<Struct Available>                                     Descriptions;                                      // 0x30(0x10)
	bool                                                         CanPlayerStoreItems;                               // 0x40(0x1)
};


// Size 0x8
class EventStorageContainerContentsChanged: public None
{
public:
	Class StorageContainerComponent*                             Source;                                            // 0x0(0x8)
};


// Size 0x8
class EventReceiveStorageContainerComponentState: public None
{
public:
	Class StorageContainerComponent*                             Source;                                            // 0x0(0x8)
};


// Size 0x10
class StorageContainerContentSpawnerOutput: public None
{
public:
	class                                                        ItemDesc;                                          // 0x0(0x8)
};


// Size 0x40
class StorageContainerContentSpawnerEntry: public None
{
public:
	class                                                        ItemDesc;                                          // 0x0(0x8)
	Class StorageContainerSpawnerItemListBase*                   ItemList;                                          // 0x8(0x8)
	Struct WeightedProbabilityRangeOfRanges                      AmountToStock;                                     // 0x10(0x30)
};


// Size 0x18
class StorageContainerWeightedItemListFeatureGroup: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	TArray<Struct StorageContainerWeightedItemListEntry>         Entries;                                           // 0x8(0x10)
};


// Size 0x10
class StorageContainerWeightedItemListEntry: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	class                                                        ItemDesc;                                          // 0x8(0x8)
};


// Size 0x18
class StorageContainerWeightedItemListEntryList: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	TArray<Struct Weight>                                        Entries;                                           // 0x8(0x10)
};


// Size 0x10
class SpawnerTypeMappings: public None
{
public:
	TArray<Struct SpawnerTypeMapping>                            Mappings;                                          // 0x0(0x10)
};


// Size 0x10
class SpawnerTypeMapping: public None
{
public:
	class                                                        Type;                                              // 0x0(0x8)
	Class StorageContainerContentSpawner*                        Spawner;                                           // 0x8(0x8)
};


// Size 0x18
class TypedStorageContainerContentTypeSelectorEntry: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	int                                                          MinimumUses;                                       // 0x4(0x4)
	int                                                          MaximumUses;                                       // 0x8(0x4)
	class                                                        ContentSpawnerType;                                // 0x10(0x8)
};


// Size 0x18
class StorageContainerContentTypeSelectorEntry: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	int                                                          MinimumUses;                                       // 0x4(0x4)
	int                                                          MaximumUses;                                       // 0x8(0x4)
	Class StorageContainerContentSpawner*                        ContentSpawner;                                    // 0x10(0x8)
};


// Size 0x10
class StorageContainerHealthChangedCloseInventoryRpc: public None
{
public:
};


// Size 0x18
class StorageContainerUnregisterServerEventsRpc: public None
{
public:
	Class Object*                                                InStorageContainerOwnerObject;                     // 0x10(0x8)
};


// Size 0x30
class StowAllItemsToContainerRPC: public None
{
public:
	Struct NetSubObjectPtr                                       Container;                                         // 0x10(0x14)
	class                                                        ItemDescToStow;                                    // 0x28(0x8)
};


// Size 0x30
class StowItemToContainerRPC: public None
{
public:
	Struct NetSubObjectPtr                                       Container;                                         // 0x10(0x14)
	class                                                        ItemDescToStow;                                    // 0x28(0x8)
};


// Size 0x28
class TakeAllItemsFromContainerRPC: public None
{
public:
	Struct NetSubObjectPtr                                       Container;                                         // 0x10(0x14)
	int                                                          IndexToTake;                                       // 0x24(0x4)
};


// Size 0x28
class TakeItemFromContainerRPC: public None
{
public:
	Struct NetSubObjectPtr                                       Container;                                         // 0x10(0x14)
	int                                                          IndexToTake;                                       // 0x24(0x4)
};


// Size 0x8
class EventObtainedFromContainer: public None
{
public:
};


// Size 0x8
class EventStorageContainerDestroyed: public None
{
public:
	Class Object*                                                Replenishable;                                     // 0x0(0x8)
};


// Size 0x8
class EventStorageContainerCreated: public None
{
public:
	Class Object*                                                Replenishable;                                     // 0x0(0x8)
};


// Size 0x30
class QuickTransferTelemetryEvent: public None
{
public:
	Struct FString                                               SrcClass;                                          // 0x0(0x10)
	Struct FString                                               DestClass;                                         // 0x10(0x10)
	float                                                        TransferTime;                                      // 0x20(0x4)
	int                                                          NumTransferred;                                    // 0x24(0x4)
	bool                                                         Giving;                                            // 0x28(0x1)
};


// Size 0x28
class PlayerItemAddToContainerTelemetryEvent: public None
{
public:
	Struct FString                                               ContainerId;                                       // 0x0(0x10)
	Struct FString                                               ItemType;                                          // 0x10(0x10)
	int                                                          NumberOfItemsInContainer;                          // 0x20(0x4)
};


// Size 0x28
class PlayerItemRetrievalFromContainerTelemetryEvent: public None
{
public:
	Struct FString                                               ContainerId;                                       // 0x0(0x10)
	Struct FString                                               ItemType;                                          // 0x10(0x10)
	int                                                          NumberOfItemsRemainingInContainer;                 // 0x20(0x4)
};


// Size 0x20
class ItemConsumptionStatusChanceEntry: public None
{
public:
	float                                                        Chance;                                            // 0x0(0x4)
	Struct Status                                                Status;                                            // 0x8(0x18)
};


// Size 0x20
class ConditionalHandInStat: public None
{
public:
	Struct PlayerStat                                            Stat;                                              // 0x18(0x4)
};


// Size 0x10
class BootyItemSellPrerequisites: public None
{
public:
	TArray<Class BootyItemShipDroppedInfo>                       Entitlements;                                      // 0x0(0x10)
};


// Size 0x14
class BootyItemShipDroppedInfo: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	bool                                                         DroppedOnOwnShip;                                  // 0x10(0x1)
	bool                                                         DroppedOnAnotherShip;                              // 0x11(0x1)
};


// Size 0x18
class SpawnableItemCategory: public None
{
public:
	struct FName                                                 Category;                                          // 0x0(0x8)
	TArray<Class Category>                                       SpawnableItems;                                    // 0x8(0x10)
};


// Size 0x18
class BootyItemDroppedOnShipEvent: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	Class ItemInfo*                                              ItemOnShip;                                        // 0x8(0x8)
	bool                                                         FirstTimeDroppedOnOwnOrAnotherShipByCrew;          // 0x10(0x1)
};


// Size 0x18
class BootyItemTransferredToVendor: public None
{
public:
	Class BootyItemInfo*                                         ItemInfo;                                          // 0x0(0x8)
	Struct Guid                                                  CrewId;                                            // 0x8(0x10)
};


// Size 0x3c
class BootyItemOwnershipChangedParams: public None
{
public:
	Struct Guid                                                  NewCrewId;                                         // 0x0(0x10)
	Struct Guid                                                  PreviousCrewId;                                    // 0x10(0x10)
	Struct Guid                                                  BootyId;                                           // 0x20(0x10)
	byte                                                         BootyType;                                         // 0x30(0x1)
	struct FName                                                 Rarity;                                            // 0x34(0x8)
};


// Size 0x10
class BootyItemShipOwnershipChangeEvent: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
	Class ItemInfo*                                              ItemOnShip;                                        // 0x8(0x8)
};


// Size 0x18
class EventCargoRunCrateDelivered: public None
{
public:
	Struct Guid                                                  PickUpId;                                          // 0x0(0x10)
	Class BootyItemInfo*                                         ItemInfo;                                          // 0x10(0x8)
};


// Size 0x40
class EventCargoRunCratePickedUp: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct Guid                                                  BatchId;                                           // 0x10(0x10)
	Struct Guid                                                  PickUpId;                                          // 0x20(0x10)
	Class BootyItemInfo*                                         ItemInfo;                                          // 0x30(0x8)
	Class WieldableItem*                                         Item;                                              // 0x38(0x8)
};


// Size 0x28
class EventCargoRunCrateSetDropOff: public None
{
public:
	Struct Guid                                                  PickUpId;                                          // 0x0(0x10)
	Struct Guid                                                  DropOffLocationId;                                 // 0x10(0x10)
};


// Size 0x8
class EventAttachedRetractableToItemProxy: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
};


// Size 0x28
class RewardPouchGivenRewardTelemetryEvent: public None
{
public:
	Struct Guid                                                  PouchId;                                           // 0x0(0x10)
	struct FName                                                 RewardId;                                          // 0x10(0x8)
	byte                                                         BootyType;                                         // 0x18(0x1)
	struct FName                                                 Rarity;                                            // 0x1c(0x8)
	byte                                                         TrackedActorType;                                  // 0x24(0x1)
};


// Size 0x28
class ConsumedIngestibleTelemetryEvent: public None
{
public:
	Struct FString                                               ItemName;                                          // 0x0(0x10)
	byte                                                         CookState;                                         // 0x10(0x1)
	TArray<Str >                                                 StatusesApplied;                                   // 0x18(0x10)
};


// Size 0x40
class ItemSpawnTelemetryEvent: public None
{
public:
	Struct Guid                                                  ItemId;                                            // 0x0(0x10)
	struct FName                                                 SpawnedClass;                                      // 0x10(0x8)
	byte                                                         Source;                                            // 0x18(0x1)
	Struct FString                                               SourceId;                                          // 0x20(0x10)
	Struct Vector                                                SpawnLocation;                                     // 0x30(0xc)
};


// Size 0x20
class MessageInABottleGivenVoyageTelemetryEvent: public None
{
public:
	Struct Guid                                                  BottleId;                                          // 0x0(0x10)
	Struct Guid                                                  VoyageId;                                          // 0x10(0x10)
};


// Size 0x58
class TreasureBuriedTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	byte                                                         BootyType;                                         // 0x10(0x1)
	Struct FString                                               Rarity;                                            // 0x18(0x10)
	Struct Vector                                                TreasureLocation;                                  // 0x28(0xc)
	Struct Guid                                                  MapId;                                             // 0x34(0x10)
	Struct Guid                                                  BuriedByCrewId;                                    // 0x44(0x10)
};


// Size 0x50
class TreasureSpawnedTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	byte                                                         BootyType;                                         // 0x10(0x1)
	Struct FString                                               Rarity;                                            // 0x18(0x10)
	byte                                                         Source;                                            // 0x28(0x1)
	Struct FString                                               SourceId;                                          // 0x30(0x10)
	Struct Vector                                                TreasureLocation;                                  // 0x40(0xc)
};


// Size 0x30
class TreasureSoldTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	byte                                                         BootyType;                                         // 0x10(0x1)
	Struct FString                                               Rarity;                                            // 0x18(0x10)
	bool                                                         GoldAwarded;                                       // 0x28(0x1)
	byte                                                         Source;                                            // 0x29(0x1)
};


// Size 0x38
class TreasureDroppedTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	byte                                                         BootyType;                                         // 0x10(0x1)
	Struct FString                                               Rarity;                                            // 0x18(0x10)
	Struct FString                                               LocationOnShip;                                    // 0x28(0x10)
};


// Size 0x28
class TreasurePickedUpTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	byte                                                         BootyType;                                         // 0x10(0x1)
	Struct FString                                               Rarity;                                            // 0x18(0x10)
};


// Size 0x20
class TreasureSurfacedTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	Struct FString                                               Rarity;                                            // 0x10(0x10)
};


// Size 0x38
class TreasureFoundTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	Struct Guid                                                  QuestId;                                           // 0x10(0x10)
	Struct FString                                               Rarity;                                            // 0x20(0x10)
	bool                                                         IsBoobyTrapped;                                    // 0x30(0x1)
};


// Size 0x48
class BuriedTreasureChestParams: public None
{
public:
	int                                                          MaxSmallCrewSizeForNumDigsSelection;               // 0x0(0x4)
	Struct WeightedProbabilityRange                              NumDigsRequiredForSmallCrewSize;                   // 0x8(0x20)
	Struct WeightedProbabilityRange                              NumDigsRequiredForBiggerCrewSize;                  // 0x28(0x20)
};


// Size 0x8
class TreasureChestSoldClientPredictionEvent: public None
{
public:
	class                                                        Company;                                           // 0x0(0x8)
};


// Size 0x78
class TreasureChestSoldInContestNetworkEvent: public None
{
public:
	struct FName                                                 RewardId;                                          // 0x10(0x8)
	Struct FText                                                 CrewName;                                          // 0x18(0x38)
	Struct StringAssetReference                                  ToastBackgroundImage;                              // 0x50(0x10)
	Struct StringAssetReference                                  BackgroundImage;                                   // 0x60(0x10)
	struct FName                                                 AudioEventName;                                    // 0x70(0x8)
};


// Size 0x38
class TreasureChestSoldInAllianceNetworkEvent: public None
{
public:
	struct FName                                                 RewardId;                                          // 0x10(0x8)
	Struct StringAssetReference                                  AllianceIcon;                                      // 0x18(0x10)
	Struct StringAssetReference                                  StampIcon;                                         // 0x28(0x10)
};


// Size 0x28
class TreasureChestSoldNetworkEvent: public None
{
public:
	struct FName                                                 RewardId;                                          // 0x10(0x8)
	Struct StringAssetReference                                  StampIcon;                                         // 0x18(0x10)
};


// Size 0x18
class ImpactProjectileData: public None
{
public:
	class                                                        ProjectileId;                                      // 0x0(0x8)
	TArray<Struct ImpactSurfaceData>                             SurfaceList;                                       // 0x8(0x10)
};


// Size 0x10
class ImpactSurfaceData: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
	Class ImpactDataAsset*                                       ImpactData;                                        // 0x8(0x8)
};


// Size 0x1
class EventImpactVfxSpawned: public None
{
public:
};


// Size 0x1c
class DeepSeaRegionData: public None
{
public:
	float                                                        DeepSeaRegionRadius;                               // 0x8(0x4)
	float                                                        MaxSwimDepth;                                      // 0xc(0x4)
	bool                                                         ShouldUseDeepSeaSwimmingBounds;                    // 0x10(0x1)
	float                                                        SwimmingBoundsRadius;                              // 0x14(0x4)
	float                                                        SlowDownZoneWidth;                                 // 0x18(0x4)
};


// Size 0x18
class DeepSeaRegionAmbienceAudio: public None
{
public:
	Class WwiseEvent*                                            PlayerInDeepSeaStart;                              // 0x0(0x8)
	Class WwiseEvent*                                            PlayerInDeepSeaStop;                               // 0x8(0x8)
	bool                                                         OnlyPostMoodMusicEventsWhenSubmerged;              // 0x10(0x1)
};


// Size 0x10
class DeepSeaRegionScreenEffects: public None
{
public:
	bool                                                         ShouldUseScreenEffects;                            // 0x0(0x1)
	float                                                        DepthFadeEnd;                                      // 0x4(0x4)
	float                                                        RadialFadeStart;                                   // 0x8(0x4)
	float                                                        RadialFadeEnd;                                     // 0xc(0x4)
};


// Size 0x1
class OnExitedDeepSeaRegion: public None
{
public:
};


// Size 0x10
class OnEnteredDeepSeaRegion: public None
{
public:
};


// Size 0x50
class BuoyantObjectSpawnParams: public None
{
public:
	Class BuoyantObjectSpawnProfileDataAsset*                    DefaultSpawnProfile;                               // 0x0(0x8)
	Class BuoyantObjectSpawnProfileDataAsset*                    ArenaSpawnProfile;                                 // 0x8(0x8)
	Class BuoyantObjectSpawnProfileDataAsset*                    FloatingItemsWithBarrelsOfPlentySpawnProfile;      // 0x10(0x8)
	Class BuoyantObjectSpawnProfileDataAsset*                    MerchantAllianceBarrelsOfPlentySpawnProfile;       // 0x18(0x8)
	byte                                                         HitTestTraceChannel;                               // 0x20(0x1)
	TArray<Class HitTestTraceChannel>                            ExcludedShipSizes;                                 // 0x28(0x10)
	Struct BuoyantObjectSpawnDistributionParams                  SpawnDistributionParams;                           // 0x38(0x14)
};


// Size 0x14
class BuoyantObjectSpawnDistributionParams: public None
{
public:
	Struct FloatRange                                            ObjectDistanceFromSpawnCentre;                     // 0x0(0x10)
	float                                                        MinDistanceBetweenObjects;                         // 0x10(0x4)
};


// Size 0xe8
class BuoyantObjectSpawnProfile: public None
{
public:
	Struct WeightedProbabilityRangeOfRanges                      TravelDistanceToSpawnObjects;                      // 0x0(0x30)
	Struct WeightedProbabilityRange                              NumberOfBarrelsToSpawn;                            // 0x30(0x20)
	Struct WeightedProbabilityRange                              NumberOfSpecialItemTypesToSpawn;                   // 0x50(0x20)
	Struct FloatRange                                            SpawnCentreDistanceInFrontOfShip;                  // 0x70(0x10)
	Struct FloatRange                                            SpawnCentreOffsetFromShipPath;                     // 0x80(0x10)
	Struct FloatRange                                            ObjectSpawnDepth;                                  // 0x90(0x10)
	Struct FloatRange                                            ObjectLifetime;                                    // 0xa0(0x10)
	float                                                        ObjectSinkingTime;                                 // 0xb0(0x4)
	float                                                        ObjectSinkRadius;                                  // 0xb4(0x4)
	float                                                        MinShipSpeedInKnotsToSpawnObjects;                 // 0xb8(0x4)
	float                                                        WildlifeSpawnHeight;                               // 0xbc(0x4)
	float                                                        ChanceOfSpawningSpecialItems;                      // 0xc0(0x4)
	class                                                        WildlifeType;                                      // 0xc8(0x8)
	class                                                        BarrelType;                                        // 0xd0(0x8)
	TArray<Struct BuoyantObjectWeightedGroup>                    SpecialItemTypes;                                  // 0xd8(0x10)
};


// Size 0x30
class BuoyantObjectWeightedGroup: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	Struct WeightedProbabilityRange                              NumberOfItems;                                     // 0x8(0x20)
	Class ItemSpawnDistributionAsset*                            Items;                                             // 0x28(0x8)
};


// Size 0x18
class BuoyantObjectSpawnDesc: public None
{
public:
	float                                                        LifeTime;                                          // 0x0(0x4)
	float                                                        SpawnDepth;                                        // 0x4(0x4)
	Struct Vector2D                                              Location;                                          // 0x8(0x8)
	class                                                        Type;                                              // 0x10(0x8)
};


// Size 0x10
class BuoyantObjectSpawnGroup: public None
{
public:
	TArray<Struct AthenaStreamedLevelData>                       Objects;                                           // 0x0(0x10)
};


// Size 0x70
class AthenaStreamedLevelData: public None
{
public:
	int                                                          LevelId;                                           // 0x0(0x4)
	struct FName                                                 PackagePath;                                       // 0x4(0x8)
	TArray<class Levels*>                                        Levels;                                            // 0x10(0x10)
};


// Size 0x28
class AthenaStreamedLevelItem: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	Class AthenaStreamedLevelDataAsset*                          DataAsset;                                         // 0x10(0x8)
	struct FName                                                 FeatureToggle;                                     // 0x18(0x8)
	bool                                                         ShouldBeVisibleOnLoad;                             // 0x20(0x1)
};


// Size 0x4
class EventAmmoChanged: public None
{
public:
	int                                                          Ammo;                                              // 0x0(0x4)
};


// Size 0x40
class AmmoChangeEffectParams: public None
{
public:
	float                                                        InputRangeMin;                                     // 0x0(0x4)
	float                                                        InputRangeMax;                                     // 0x4(0x4)
	float                                                        OutputRangeMin;                                    // 0x8(0x4)
	float                                                        OutputRangeMax;                                    // 0xc(0x4)
	float                                                        OutputRangeThreshold;                              // 0x10(0x4)
	bool                                                         UseThresholdValueAsNewOutputRangeMax;              // 0x14(0x1)
	Class CurveFloat*                                            LerpSpeedCurve;                                    // 0x18(0x8)
	Struct ScalarParameterValue                                  ScalarParameterValue;                              // 0x20(0x1c)
};


// Size 0x80
class OutOfAmmoDestructionEffects: public None
{
public:
	float                                                        DestroyDelayDuration;                              // 0x0(0x4)
	float                                                        DestroyDuration;                                   // 0x4(0x4)
	float                                                        InterpTarget;                                      // 0x8(0x4)
	Class CurveFloat*                                            DestroyLerpCurve;                                  // 0x10(0x8)
	Struct ScalarParameterValue                                  ScalarParameterValue;                              // 0x18(0x1c)
	Class Object*                                                DestroyVfx;                                        // 0x38(0x8)
	struct FName                                                 VfxSocketName;                                     // 0x40(0x8)
	Class WwiseEvent*                                            DestroyAudioEvent;                                 // 0x48(0x8)
	Class WwiseObjectPoolWrapper*                                DestroyAudioPool;                                  // 0x50(0x8)
	Struct WwiseEmitterCreationParams                            DestroySfxParams;                                  // 0x58(0x28)
};


// Size 0x8
class EventReceiveAmmoEffectsComponentState: public None
{
public:
};


// Size 0x8
class AmmoEffectState: public None
{
public:
	Struct EventAmmoChanged                                      LastAmmoEvent;                                     // 0x0(0x4)
	bool                                                         ShouldSkipUpdates;                                 // 0x4(0x1)
};


// Size 0x8
class EventReceiveAmmoStoreComponentState: public None
{
public:
	Class AmmoStoreComponent*                                    Source;                                            // 0x0(0x8)
};


// Size 0x8
class EventReceiveAmmoTransferComponentState: public None
{
public:
	Class AmmoTransferComponent*                                 Source;                                            // 0x0(0x8)
};


// Size 0x18
class FeatureToggledChapters: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	TArray<Struct ChapterQuests>                                 Chapters;                                          // 0x8(0x10)
};


// Size 0x10
class ChapterQuests: public None
{
public:
	TArray<Assetclass Feature>                                   QuestDescAssets;                                   // 0x0(0x10)
};


// Size 0x10
class FeatureToggledIsland: public None
{
public:
	struct FName                                                 FeatureName;                                       // 0x0(0x8)
	struct FName                                                 IslandName;                                        // 0x8(0x8)
};


// Size 0x2
class EmergentVoyageSourceIconInfo: public None
{
public:
	byte                                                         IconType;                                          // 0x0(0x1)
	byte                                                         VoyageSource;                                      // 0x1(0x1)
};


// Size 0x18
class PerChapterRankRewardEntry: public None
{
public:
	int                                                          Rank;                                              // 0x0(0x4)
	int                                                          Payout;                                            // 0x4(0x4)
	TArray<Struct RewardGroupList>                               Rewards;                                           // 0x8(0x10)
};


// Size 0x18
class RewardGroupList: public None
{
public:
	int                                                          NumRewards;                                        // 0x0(0x4)
	TArray<Struct RewardGroup>                                   RewardGroups;                                      // 0x8(0x10)
};


// Size 0x10
class RewardGroup: public None
{
public:
	TArray<Class NumRewards>                                     Rewards;                                           // 0x0(0x10)
};


// Size 0x14
class CrewCompletedEmergentVoyageEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x10(0x1)
};


// Size 0x10
class CrewCancelledTaleEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x10
class CrewCancelledPrimaryVoyageEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x14
class CrewCompletedTaleEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	bool                                                         DontNotifyParticipants;                            // 0x10(0x1)
};


// Size 0x14
class CrewCompletedPrimaryVoyageEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x10(0x1)
};


// Size 0x10
class CrewBeganTaleEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x10
class CrewBeganPrimaryVoyageEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x60
class DiscoveryNotificationEvent: public None
{
public:
	int                                                          Count;                                             // 0x0(0x4)
	TArray<Str >                                                 Images;                                            // 0x8(0x10)
	Struct FString                                               Background;                                        // 0x18(0x10)
	Struct FText                                                 Text;                                              // 0x28(0x38)
};


// Size 0x28
class QuestInfo: public None
{
public:
	Struct Guid                                                  QuestId;                                           // 0x0(0x10)
	Struct FString                                               Name;                                              // 0x10(0x10)
	byte                                                         Status;                                            // 0x20(0x1)
	byte                                                         Type;                                              // 0x21(0x1)
};


// Size 0x90
class VoyageMembershipInfo: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	Struct Guid                                                  Id;                                                // 0x38(0x10)
	TArray<Struct Id>                                            QuestStatus;                                       // 0x48(0x10)
	class                                                        Company;                                           // 0x58(0x8)
	bool                                                         IsEmergent;                                        // 0x60(0x1)
	bool                                                         IsTale;                                            // 0x61(0x1)
	byte                                                         EmergentSource;                                    // 0x62(0x1)
	Struct ViewVoyageBanners                                     ViewVoyageBanners;                                 // 0x63(0x2)
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x65(0x1)
	int                                                          Rank;                                              // 0x68(0x4)
	TArray<Struct Rank>                                          VoyageCompletionStats;                             // 0x70(0x10)
	TArray<Struct VoyageCompletionStats>                         ReapersMarkCompletionStats;                        // 0x80(0x10)
};


// Size 0x1
class QuestCompleteTelemetryEvent: public None
{
public:
};


// Size 0x1
class QuestAbortedTelemetryEvent: public None
{
public:
};


// Size 0x1
class QuestStopTelemetryEvent: public None
{
public:
};


// Size 0x1
class QuestStartTelemetryEvent: public None
{
public:
	byte                                                         QuestType;                                         // 0x0(0x1)
};


// Size 0x10
class QuestBaseTelemetryFragmentInput: public None
{
public:
	Struct Guid                                                  QuestId;                                           // 0x0(0x10)
};


// Size 0x20
class QuestBaseTelemetryFragment: public None
{
public:
	Struct Guid                                                  QuestId;                                           // 0x0(0x10)
	Struct Guid                                                  VoyageId;                                          // 0x10(0x10)
};


// Size 0x28
class PlayerGameLeftVoyageTelemetryEvent: public None
{
public:
	Struct FString                                               VoyageTitle;                                       // 0x0(0x10)
	Struct Guid                                                  VoyageId;                                          // 0x10(0x10)
	byte                                                         LeaveStatus;                                       // 0x20(0x1)
	bool                                                         IsTale;                                            // 0x21(0x1)
	bool                                                         IsStarlightTale;                                   // 0x22(0x1)
};


// Size 0x28
class PlayerGameStartVoyageTelemetryEvent: public None
{
public:
	Struct FString                                               VoyageTitle;                                       // 0x0(0x10)
	Struct Guid                                                  VoyageId;                                          // 0x10(0x10)
	byte                                                         JoinStatus;                                        // 0x20(0x1)
	bool                                                         IsTale;                                            // 0x21(0x1)
	bool                                                         IsStarlightTale;                                   // 0x22(0x1)
};


// Size 0x1
class VoyageCompleteTelemetryEvent: public None
{
public:
};


// Size 0x1
class VoyageAbortedTelemetryEvent: public None
{
public:
};


// Size 0x1
class VoyageEndTelemetryEvent: public None
{
public:
};


// Size 0x18
class VoyageStartTelemetryEvent: public None
{
public:
	bool                                                         IsEmergent;                                        // 0x0(0x1)
	TArray<Struct VoyageStartTelemetryEventPerQuest>             Quests;                                            // 0x8(0x10)
};


// Size 0x20
class VoyageStartTelemetryEventPerQuest: public None
{
public:
	Struct Guid                                                  QuestId;                                           // 0x0(0x10)
	Struct FString                                               QuestType;                                         // 0x10(0x10)
};


// Size 0x40
class VoyageCreatedTelemetryEvent: public None
{
public:
	Struct FString                                               VoyageRecipeAsset;                                 // 0x0(0x10)
	Struct FString                                               VoyageGenerationLocation;                          // 0x10(0x10)
	int                                                          VoyageRank;                                        // 0x20(0x4)
	int                                                          NumIslandsToAvoid;                                 // 0x24(0x4)
	TArray<Struct RewardIdCount>                                 GeneratedRewards;                                  // 0x30(0x10)
};


// Size 0xc
class RewardIdCount: public None
{
public:
	struct FName                                                 RewardId;                                          // 0x0(0x8)
	int                                                          Count;                                             // 0x8(0x4)
};


// Size 0x10
class VoyageBaseTelemetryFragmentInput: public None
{
public:
	Struct Guid                                                  VoyageId;                                          // 0x0(0x10)
};


// Size 0x10
class VoyageBaseTelemetryFragment: public None
{
public:
	Struct Guid                                                  VoyageId;                                          // 0x0(0x10)
};


// Size 0x40
class VoyageGeneratorSimBlackboard: public None
{
public:
};


// Size 0x80
class VoyageInfo: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	Struct Guid                                                  Id;                                                // 0x38(0x10)
	class                                                        Company;                                           // 0x48(0x8)
	bool                                                         IsEmergent;                                        // 0x50(0x1)
	bool                                                         IsTale;                                            // 0x51(0x1)
	byte                                                         EmergentSource;                                    // 0x52(0x1)
	Struct ViewVoyageBanners                                     ViewVoyageBanners;                                 // 0x53(0x2)
	int                                                          Rank;                                              // 0x58(0x4)
	TArray<Struct Rank>                                          VoyageCompletionStats;                             // 0x60(0x10)
	TArray<Struct VoyageCompletionStats>                         ReapersMarkCompletionStats;                        // 0x70(0x10)
};


// Size 0x38
class LandmarkReaction: public None
{
public:
	bool                                                         Enabled;                                           // 0x0(0x1)
	float                                                        RelevantRadiusInMetres;                            // 0x4(0x4)
	TArray<Byte RelevantRadiusInMetres>                          ActionsThatTriggerThisReaction;                    // 0x8(0x10)
	Class WwiseEvent*                                            GateCompletedAudioCue;                             // 0x18(0x8)
	Class WwiseEvent*                                            GateCompletedMusicCue;                             // 0x20(0x8)
	TArray<Struct LandmarkReactionKeyFrame>                      Events;                                            // 0x28(0x10)
};


// Size 0x10
class LandmarkReactionKeyFrame: public None
{
public:
	Class LandmarkReactionEvent*                                 Event;                                             // 0x0(0x8)
	float                                                        KeyFrame;                                          // 0x8(0x4)
};


// Size 0x20
class LandmarkTreasureLocationEntry: public None
{
public:
	Struct FString                                               LandmarkName;                                      // 0x0(0x10)
	TArray<Struct LandmarkName>                                  Locations;                                         // 0x10(0x10)
};


// Size 0x30
class LandmarkSoundPlayedEvent: public None
{
public:
	int                                                          PlayingId;                                         // 0x0(0x4)
	Class WwiseEvent*                                            AudioEvent;                                        // 0x8(0x8)
	Struct WwiseEmitter                                          Emitter;                                           // 0x10(0x20)
};


// Size 0x20
class PlayLandmarkReactionRPC: public None
{
public:
	Class Landmark*                                              Landmark;                                          // 0x10(0x8)
	int                                                          LandmarkReactionIndex;                             // 0x18(0x4)
};


// Size 0x10
class EventClearCrewProgressOverride: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x18
class EventSetCrewProgressOverride: public None
{
public:
	class                                                        ProgressId;                                        // 0x0(0x8)
	Struct Guid                                                  CrewId;                                            // 0x8(0x10)
};


// Size 0x8
class EventNamedProgressLocationDestroyed: public None
{
public:
	Class ProgressSpawnLocation*                                 SpawnLocation;                                     // 0x0(0x8)
};


// Size 0x8
class EventNamedProgressLocationCreated: public None
{
public:
	Class ProgressSpawnLocation*                                 SpawnLocation;                                     // 0x0(0x8)
};


// Size 0x8
class EventShipSpawnLocationDestroyed: public None
{
public:
	Class ShipSpawnLocation*                                     SpawnLocation;                                     // 0x0(0x8)
};


// Size 0x8
class EventShipSpawnLocationCreated: public None
{
public:
	Class ShipSpawnLocation*                                     SpawnLocation;                                     // 0x0(0x8)
};


// Size 0x8
class EventGhostShipPlayerSpawnLocationDestroyed: public None
{
public:
	Class GhostShipPlayerSpawnLocation*                          SpawnLocation;                                     // 0x0(0x8)
};


// Size 0x8
class EventGhostShipPlayerSpawnLocationCreated: public None
{
public:
	Class GhostShipPlayerSpawnLocation*                          SpawnLocation;                                     // 0x0(0x8)
};


// Size 0x8
class EventSpawnLocationDestroyed: public None
{
public:
	Class SpawnLocation*                                         SpawnLocation;                                     // 0x0(0x8)
};


// Size 0x8
class EventSpawnLocationCreated: public None
{
public:
	Class SpawnLocation*                                         SpawnLocation;                                     // 0x0(0x8)
};


// Size 0xb8
class NPCData: public None
{
public:
	Struct NetActorPtr                                           NPC;                                               // 0x0(0x14)
	Struct Guid                                                  Id;                                                // 0x14(0x10)
	Struct FText                                                 Name;                                              // 0x28(0x38)
	Struct Vector                                                Location;                                          // 0x60(0xc)
	struct FName                                                 IslandName;                                        // 0x6c(0x8)
	Struct FText                                                 IslandNameLocalised;                               // 0x78(0x38)
	byte                                                         GrammaticalGender;                                 // 0xb0(0x1)
};


// Size 0x18
class NPCDialogOverrideTypeWithConditionalsUnit: public None
{
public:
	class                                                        OverrideType;                                      // 0x0(0x8)
	TArray<class Conditionals*>                                  Conditionals;                                      // 0x8(0x10)
};


// Size 0x78
class SceneDialogueStructure: public None
{
public:
	Struct FText                                                 LocalisableName;                                   // 0x0(0x38)
	Struct FText                                                 Text;                                              // 0x38(0x38)
	byte                                                         ChatType;                                          // 0x70(0x1)
	float                                                        DelayAfter;                                        // 0x74(0x4)
};


// Size 0x38
class ClientNPCDialogOptionSelectedTelemetryEvent: public None
{
public:
	Struct Guid                                                  NPCInteractionSessionId;                           // 0x0(0x10)
	Struct FString                                               NPCDialogOverrideType;                             // 0x10(0x10)
	Struct FString                                               NPCDialogTreeDataAsset;                            // 0x20(0x10)
	int                                                          DialogIndex;                                       // 0x30(0x4)
	int                                                          OptionChosenIndex;                                 // 0x34(0x4)
};


// Size 0x1
class NPCSubtitleEnd: public None
{
public:
};


// Size 0x1
class NPCSubtitleBegin: public None
{
public:
};


// Size 0x8
class EventSceneDialogueFinished: public None
{
public:
	Class SceneDialogueCoordinator*                              Sender;                                            // 0x0(0x8)
};


// Size 0x10
class SceneDialogueEndNetworkEvent: public None
{
public:
};


// Size 0x10
class SceneDialogueBaseNetworkEvent: public None
{
public:
};


// Size 0x10
class SceneDialogueStartNetworkEvent: public None
{
public:
};


// Size 0x98
class BountyMapLayoutTarget: public None
{
public:
	Struct TreasureMapWidgetTextWithScaledWidthBackground        Name;                                              // 0x0(0x70)
	Struct TreasureMapWidgetTexture                              MugShot;                                           // 0x70(0x28)
};


// Size 0x20
class EventAIBountySpawnerAllTargetsKilled: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	Struct Guid                                                  CrewId;                                            // 0x8(0x10)
	Class Actor*                                                 InstigatorOfFinalAIPawnDeath;                      // 0x18(0x8)
};


// Size 0x10
class ReapersMarkTrackedBootyItem: public None
{
public:
	Class Actor*                                                 Item;                                              // 0x0(0x8)
	byte                                                         ItemType;                                          // 0x8(0x1)
};


// Size 0x10
class ReapersMarkTrackedBootyItemInfo: public None
{
public:
	Struct Vector                                                ItemLocation;                                      // 0x0(0xc)
	byte                                                         ItemType;                                          // 0xc(0x1)
};


// Size 0x48
class UserSettingsMapMarkDefinition: public None
{
public:
	class                                                        MarkId;                                            // 0x0(0x8)
};


// Size 0x20
class MapTextureRenderData: public None
{
public:
	Class MapRenderResource*                                     RenderResource;                                    // 0x0(0x8)
	Class MaterialInstance*                                      Material;                                          // 0x8(0x8)
	TArray<Struct MapTransformRenderData>                        Transforms;                                        // 0x10(0x10)
};


// Size 0x24
class MapTransformRenderData: public None
{
public:
	Struct Vector2D                                              Pivot;                                             // 0x0(0x8)
	Struct Vector2D                                              Position;                                          // 0x8(0x8)
	byte                                                         BlendMode;                                         // 0x10(0x1)
	Struct Vector2D                                              Size;                                              // 0x14(0x8)
	float                                                        RotationToNorth;                                   // 0x1c(0x4)
	float                                                        RotationOffset;                                    // 0x20(0x4)
};


// Size 0x38
class WorldMapShipLocation: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	class                                                        ShipSize;                                          // 0x10(0x8)
	Struct Vector2D                                              Location;                                          // 0x18(0x8)
	float                                                        Rotation;                                          // 0x20(0x4)
	byte                                                         ReplicatedRotation;                                // 0x24(0x1)
	byte                                                         Flags;                                             // 0x25(0x1)
	Class Texture*                                               CrewLiveryOverlayIcon;                             // 0x28(0x8)
	byte                                                         ReapersMarkLevel;                                  // 0x30(0x1)
	byte                                                         EmissaryLevel;                                     // 0x31(0x1)
};


// Size 0x1
class EventMapTablePinsChanged: public None
{
public:
};


// Size 0x1
class RiddleQuestGateCompletedEvent: public None
{
public:
};


// Size 0x60
class FaunaAnimationCurrentPlayingAnimations: public None
{
public:
	Class BlendSpace1D*                                          LandLocomotionA;                                   // 0x0(0x8)
	Class BlendSpace1D*                                          LandLocomotionB;                                   // 0x8(0x8)
	Class BlendSpace1D*                                          SeaLocomotionA;                                    // 0x10(0x8)
	Class BlendSpace1D*                                          SeaLocomotionB;                                    // 0x18(0x8)
	Class BlendSpace1D*                                          UnderwaterLocomotionA;                             // 0x20(0x8)
	Class BlendSpace1D*                                          UnderwaterLocomotionB;                             // 0x28(0x8)
	Class AnimSequence*                                          LandIdleA;                                         // 0x30(0x8)
	Class AnimSequence*                                          LandIdleB;                                         // 0x38(0x8)
	Class AnimSequence*                                          SeaIdleA;                                          // 0x40(0x8)
	Class AnimSequence*                                          SeaIdleB;                                          // 0x48(0x8)
	Class AnimSequence*                                          UnderwaterIdleA;                                   // 0x50(0x8)
	Class AnimSequence*                                          UnderwaterIdleB;                                   // 0x58(0x8)
};


// Size 0x54
class FaunaAnimationIndexStruct: public None
{
public:
};


// Size 0x6c0
class FaunaAnimationStructure: public None
{
public:
	Struct FaunaAnimationLocationStructure                       FreeRange;                                         // 0x0(0x360)
	Struct FaunaAnimationLocationStructure                       Caged;                                             // 0x360(0x360)
};


// Size 0x360
class FaunaAnimationLocationStructure: public None
{
public:
	Struct FaunaAnimationBaseStructure                           OnLand;                                            // 0x0(0x120)
	Struct FaunaAnimationBaseStructure                           OnSea;                                             // 0x120(0x120)
	Struct FaunaAnimationBaseStructure                           Underwater;                                        // 0x240(0x120)
};


// Size 0x120
class FaunaAnimationBaseStructure: public None
{
public:
	TArray<class Idle*>                                          Idle;                                              // 0x0(0x10)
	TArray<class Locomotion*>                                    Locomotion;                                        // 0x10(0x10)
	Struct FaunaAnimationTurningStructure                        Turning;                                           // 0x20(0x10)
	Struct FaunaAnimationStartledStructure                       Startled;                                          // 0x30(0x18)
	TArray<class Impact*>                                        Impact;                                            // 0x48(0x10)
	TArray<class DyingLoop*>                                     DyingLoop;                                         // 0x58(0x10)
	TArray<class Death*>                                         Death;                                             // 0x68(0x10)
	TArray<class Special*>                                       Special;                                           // 0x78(0x10)
	Struct FaunaAnimationPigStarvingStructure                    PigStarving;                                       // 0x88(0x30)
	Struct FaunaAnimationEatingStructure                         Eating;                                            // 0xb8(0x10)
	Struct FaunaAnimationSnakeAttack                             SnakeAttack;                                       // 0xc8(0x58)
};


// Size 0x58
class FaunaAnimationSnakeAttack: public None
{
public:
	Struct FaunaAnimationSnakeBiteStructure                      BiteForwards;                                      // 0x0(0x20)
	Struct FaunaAnimationSnakeBiteStructure                      BiteBackwards;                                     // 0x20(0x20)
	Struct FaunaAnimationSnakeCharmStructure                     Charm;                                             // 0x40(0x18)
};


// Size 0x18
class FaunaAnimationSnakeCharmStructure: public None
{
public:
	Class AnimSequence*                                          CharmIn;                                           // 0x0(0x8)
	Class AnimSequence*                                          CharmLoop;                                         // 0x8(0x8)
	Class AnimSequence*                                          CharmOut;                                          // 0x10(0x8)
};


// Size 0x20
class FaunaAnimationSnakeBiteStructure: public None
{
public:
	Class AnimSequence*                                          BiteStanceIn;                                      // 0x0(0x8)
	Class AnimSequence*                                          BiteStanceOut;                                     // 0x8(0x8)
	Class AnimSequence*                                          BiteStanceLoopIdle;                                // 0x10(0x8)
	Class AnimSequence*                                          BiteStanceAttack;                                  // 0x18(0x8)
};


// Size 0x10
class FaunaAnimationEatingStructure: public None
{
public:
	Class AnimSequence*                                          EatingNormal;                                      // 0x0(0x8)
	Class AnimSequence*                                          EatingStarving;                                    // 0x8(0x8)
};


// Size 0x30
class FaunaAnimationPigStarvingStructure: public None
{
public:
	Class AnimSequence*                                          StarveIn;                                          // 0x0(0x8)
	Class AnimSequence*                                          StarveLoop;                                        // 0x8(0x8)
	Class AnimSequence*                                          StarveOut;                                         // 0x10(0x8)
	Class AnimSequence*                                          StarveDeath;                                       // 0x18(0x8)
	Class AnimSequence*                                          StarveStartledLow;                                 // 0x20(0x8)
	Class AnimSequence*                                          StarveStartledHigh;                                // 0x28(0x8)
};


// Size 0x18
class FaunaAnimationStartledStructure: public None
{
public:
	Class AnimSequence*                                          StartledLowAgitation;                              // 0x0(0x8)
	Class AnimSequence*                                          StartledHighAgitation;                             // 0x8(0x8)
	Class AnimSequence*                                          StartledOneShot;                                   // 0x10(0x8)
};


// Size 0x10
class FaunaAnimationTurningStructure: public None
{
public:
	Class AnimSequence*                                          TurnLeft;                                          // 0x0(0x8)
	Class AnimSequence*                                          TurnRight;                                         // 0x8(0x8)
};


// Size 0x1
class EventFaunaAnimationStartSnakeStrike: public None
{
public:
};


// Size 0x1
class EventFaunaAnimationSnakeInCharmStance: public None
{
public:
	bool                                                         SnakeInCharmStance;                                // 0x0(0x1)
};


// Size 0x2
class EventFaunaAnimationSnakeInAttackStance: public None
{
public:
	bool                                                         SnakeInAttackStance;                               // 0x0(0x1)
	byte                                                         SnakeAttackDirection;                              // 0x1(0x1)
};


// Size 0x1
class EventFaunaAnimationAgitated: public None
{
public:
	bool                                                         Agitated;                                          // 0x0(0x1)
};


// Size 0x1
class EventFaunaAnimationStartEating: public None
{
public:
};


// Size 0x1
class EventFaunaAnimationStarving: public None
{
public:
	bool                                                         PigIsStarving;                                     // 0x0(0x1)
};


// Size 0x8
class EventFaunaAnimationSpecial: public None
{
public:
	bool                                                         LoopAnimation;                                     // 0x0(0x1)
};


// Size 0x4
class EventFaunaAnimationImpact: public None
{
public:
	float                                                        ImpactStrength;                                    // 0x0(0x4)
};


// Size 0x1
class EventFaunaAnimationLocationChanged: public None
{
public:
	byte                                                         Location;                                          // 0x0(0x1)
};


// Size 0x1
class EventFaunaAnimationIsCaged: public None
{
public:
	bool                                                         IsCaged;                                           // 0x0(0x1)
};


// Size 0x1
class EventFaunaAnimationTransition: public None
{
public:
	byte                                                         AnimationState;                                    // 0x0(0x1)
};


// Size 0x1
class EventFaunaAddedToEmptyCrate: public None
{
public:
};


// Size 0x60
class MerchantMapLayoutItem: public None
{
public:
	Struct TreasureMapWidgetText                                 Name;                                              // 0x0(0x38)
	Struct TreasureMapWidgetTexture                              IconImage;                                         // 0x38(0x28)
};


// Size 0x10
class VaultKeyMapping: public None
{
public:
	class                                                        VaultKey;                                          // 0x0(0x8)
	class                                                        VaultMedallion;                                    // 0x8(0x8)
};


// Size 0x1
class PuzzleVaultRewardItemSpawnedEvent: public None
{
public:
};


// Size 0x570
class LockData: public None
{
public:
	bool                                                         UnlockBySpecificKey;                               // 0x0(0x1)
	class                                                        RequiredKey;                                       // 0x8(0x8)
	Struct Transform                                             KeyMeshTargetTransform;                            // 0x10(0x30)
	bool                                                         StartLocked;                                       // 0x40(0x1)
	float                                                        HandToLockLerpDuration;                            // 0x44(0x4)
	float                                                        LocalPredictionTimeout;                            // 0x48(0x4)
	float                                                        UnlockAudioCueTriggerTime;                         // 0x4c(0x4)
	Class WwiseEvent*                                            UnlockAudioCue;                                    // 0x50(0x8)
	Class WwiseEvent*                                            CrewOnlyUnlockMusic;                               // 0x58(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x60(0x8)
	Struct TransformBlendCurve                                   UnlockAnimationLerp;                               // 0x70(0x500)
};


// Size 0x630
class LockState: public None
{
public:
	Struct LockData                                              LockData;                                          // 0x0(0x570)
	bool                                                         Locked;                                            // 0x570(0x1)
	class                                                        RequiredKey;                                       // 0x578(0x8)
	Class ItemInfo*                                              KeyItem;                                           // 0x580(0x8)
	Class StaticMeshMemoryConstraintComponent*                   TargetKeyMesh;                                     // 0x588(0x8)
	bool                                                         UnlockBySpecificKey;                               // 0x590(0x1)
	Class ItemInfo*                                              RequiredSpecificKey;                               // 0x598(0x8)
	Class LockComponent*                                         OwnerLockComponent;                                // 0x5a0(0x8)
	float                                                        CurrentAnimationSequenceTime;                      // 0x5a8(0x4)
	bool                                                         IsInUnlockingSequence;                             // 0x5ac(0x1)
	byte                                                         AnimationSequenceState;                            // 0x5ad(0x1)
	Class InterpolatingItem*                                     InterpolatingItem;                                 // 0x5b0(0x8)
	Class Actor*                                                 UnlockingInteractor;                               // 0x5b8(0x8)
};


// Size 0x590
class VaultLock: public None
{
public:
	int                                                          Tier;                                              // 0x0(0x4)
	Struct LockData                                              VaultLock;                                         // 0x10(0x570)
	Class StaticMeshMemoryConstraintComponent*                   MeshComponent;                                     // 0x580(0x8)
};


// Size 0x8
class KeyTakenEvent: public None
{
public:
	Class ItemInfo*                                              KeyTaken;                                          // 0x0(0x8)
};


// Size 0x20
class StorableLockState: public None
{
public:
	bool                                                         Locked;                                            // 0x0(0x1)
	Struct StringAssetReference                                  RequiredKey;                                       // 0x8(0x10)
	bool                                                         IsInUnlockingSequence;                             // 0x18(0x1)
};


// Size 0x20
class AmmoStoreMetaWrapper: public None
{
public:
	int                                                          AmmoCount;                                         // 0x18(0x4)
};


// Size 0x20
class AmmoTransferMetaWrapper: public None
{
public:
	int                                                          AmmoCount;                                         // 0x18(0x4)
};


// Size 0x28
class BootyItemInfoMetaWrapper: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x18(0x10)
};


// Size 0x40
class CargoRunCrateMetaWrapper: public None
{
public:
	Struct CargoRunItemDropOffData                               DropOffData;                                       // 0x18(0x28)
};


// Size 0x20
class CommoditySourceMetaWrapper: public None
{
public:
	struct FName                                                 NPCIdentifier;                                     // 0x18(0x8)
};


// Size 0x98
class CrewOwnershipTrackingComponentMetaWrapper: public None
{
public:
	Struct Guid                                                  SpawningCrewId;                                    // 0x18(0x10)
	Struct Guid                                                  CurrentOwnedByCrewId;                              // 0x28(0x10)
	Struct OwnerListEntry                                        PreviousOwnedByCrewIdList;                         // 0x38(0x10)
};


// Size 0x20
class ItemHealthMetaWrapper: public None
{
public:
	float                                                        MaxHealth;                                         // 0x18(0x4)
	float                                                        CurrentHealth;                                     // 0x1c(0x4)
};


// Size 0x20
class ItemInfoHealthMetaWrapper: public None
{
public:
	float                                                        CurrentHealth;                                     // 0x18(0x4)
	float                                                        MaxHealth;                                         // 0x1c(0x4)
};


// Size 0x48
class LockMetaWrapper: public None
{
public:
	TArray<Struct OpenableItemMetaWrapper>                       LockStates;                                        // 0x18(0x10)
};


// Size 0x20
class OpenableItemMetaWrapper: public None
{
public:
	byte                                                         OpenState;                                         // 0x18(0x1)
	bool                                                         HasEverClosed;                                     // 0x19(0x1)
};


// Size 0x28
class StorageContainerMetaWrapper: public None
{
public:
};


// Size 0x38
class ItemSnapshot: public None
{
public:
	Class ItemInfo*                                              ProtectedItemInfo;                                 // 0x10(0x8)
	Struct StringAssetReference                                  ItemDesc;                                          // 0x18(0x10)
	Struct Guid                                                  Id;                                                // 0x28(0x10)
};


// Size 0x20
class ItemSnapshotOwnerDestroyed: public None
{
public:
	Struct Guid                                                  SnapshotID;                                        // 0x0(0x10)
};


// Size 0x28
class ItemSnapshotSwapInstigatedEvent: public None
{
public:
	Struct Guid                                                  SnapshotID;                                        // 0x0(0x10)
	Class Actor*                                                 WorldContextObject;                                // 0x20(0x8)
};


// Size 0x18
class ItemSnapshotExpandedEvent: public None
{
public:
	Struct Guid                                                  SnapshotID;                                        // 0x0(0x10)
	Class Object*                                                CreatedObject;                                     // 0x10(0x8)
};


// Size 0x28
class ItemSnapshotTakenEvent: public None
{
public:
	Struct Guid                                                  SnapshotID;                                        // 0x10(0x10)
	Class Object*                                                SnapshotObject;                                    // 0x20(0x8)
};


// Size 0xc
class WeightedGoldReward: public None
{
public:
	Struct RewardId                                              RewardId;                                          // 0x0(0x8)
	float                                                        Weight;                                            // 0x8(0x4)
};


// Size 0x40
class CollectorsChestItemSlotDefinition: public None
{
public:
	TArray<AssetClass CollectorsChestStoredItemInfo>             TargetObjectTypes;                                 // 0x0(0x10)
	Struct Transform                                             RelativeTransform;                                 // 0x10(0x30)
};


// Size 0x58
class CollectorsChestStoredItemInfo: public None
{
public:
	Class ItemInfo*                                              ItemInfo;                                          // 0x0(0x8)
	struct FName                                                 SourceAttachSocket;                                // 0x10(0x8)
	Struct ItemSnapshot                                          StoredItemSnapshot;                                // 0x20(0x38)
};


// Size 0x8
class EventReceiveCollectorsChestItemSlotsState: public None
{
public:
	Class CollectorsChestItemSlotInteractable*                   Source;                                            // 0x0(0x8)
};


// Size 0x30
class CollectorsChestMetaWrapper: public None
{
public:
	TArray<Struct GoldInContainerData>                           StoredItemSnapshots;                               // 0x18(0x10)
};


// Size 0x28
class GoldInContainerData: public None
{
public:
	Struct RewardId                                              RewardIdentifier;                                  // 0x0(0x8)
	Struct Vector                                                Position;                                          // 0x8(0xc)
	Struct Vector                                                Scale;                                             // 0x14(0xc)
	Class StaticMesh*                                            GoldMesh;                                          // 0x20(0x8)
};


// Size 0x8
class EventReceiveQuestBookPagesInContainerComponentState: public None
{
public:
	Class QuestBookPagesInContainerComponent*                    Source;                                            // 0x0(0x8)
};


// Size 0x8
class ItemStoredInChestEvent: public None
{
public:
	Class ItemInfo*                                              StoredItem;                                        // 0x0(0x8)
};


// Size 0x8
class PickedUpItemFromChestEvent: public None
{
public:
	Class Actor*                                                 PickupActor;                                       // 0x0(0x8)
};


// Size 0x1
class EventPagesInContainerTaken: public None
{
public:
};


// Size 0x1
class EventGoldInContainerTaken: public None
{
public:
};


// Size 0xc
class MermaidAnimMapping: public None
{
public:
	byte                                                         State;                                             // 0x0(0x1)
	struct FName                                                 MontageLabel;                                      // 0x4(0x8)
};


// Size 0x38
class MarkerVariantDesc: public None
{
public:
	class                                                        Variant;                                           // 0x0(0x8)
	class                                                        MarkerType;                                        // 0x8(0x8)
	bool                                                         UseActorMarker;                                    // 0x10(0x1)
	Struct StringAssetReference                                  MarkerVfx;                                         // 0x18(0x10)
	Struct StringClassReference                                  MarkerClass;                                       // 0x28(0x10)
};


// Size 0x10
class ClientMarkerRepresentation: public None
{
public:
	Class BaseWorldMarker*                                       MarkerPtr;                                         // 0x0(0x8)
	Class Object*                                                MarkerVisualObjectPtr;                             // 0x8(0x8)
};


// Size 0x20
class WorldMarkerDesc: public None
{
public:
	Class BaseWorldMarker*                                       Marker;                                            // 0x0(0x8)
	class                                                        Variant;                                           // 0x18(0x8)
};


// Size 0x30
class CachedIslandStore: public None
{
public:
};


// Size 0x30
class LocationBootyStorage: public None
{
public:
	byte                                                         IslandHash;                                        // 0x0(0x1)
	struct FName                                                 IslandName;                                        // 0x4(0x8)
	Struct Vector                                                IslandLocation;                                    // 0xc(0xc)
	TArray<Struct IslandLocation>                                StoredTreasure;                                    // 0x18(0x10)
	byte                                                         StoredTreasureCount;                               // 0x28(0x1)
};


// Size 0x20
class CrewBootyStorage: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	TArray<Struct CrewId>                                        CrewStorage;                                       // 0x10(0x10)
};


// Size 0x14
class EventItemsRetrieved: public None
{
public:
	Struct Guid                                                  CrewRetrieving;                                    // 0x0(0x10)
};


// Size 0x14
class EventOnCrewStorageUpdate: public None
{
public:
	Struct Guid                                                  CrewStoring;                                       // 0x0(0x10)
};


// Size 0x14
class EventOnCrewStorageFull: public None
{
public:
	Struct Guid                                                  CrewStoring;                                       // 0x0(0x10)
};


// Size 0x1
class RetrieveBootyActorDespawnedEvent: public None
{
public:
};


// Size 0x1
class RetrieveBootyActorSpawnedEvent: public None
{
public:
};


// Size 0x8
class InitRetrieveBootyActorEvent: public None
{
public:
};


// Size 0x1
class DismissRetrieveBootyActorEvent: public None
{
public:
};


// Size 0x10
class CampfireDamageLightingChance: public None
{
public:
	class                                                        DamageType;                                        // 0x0(0x8)
	float                                                        Chance;                                            // 0x8(0x4)
};


// Size 0x28
class EventGameNarrationClientNotificationMessage: public None
{
public:
	byte                                                         NotificationType;                                  // 0x0(0x1)
	Struct FString                                               Sender;                                            // 0x8(0x10)
	Struct FString                                               Text;                                              // 0x18(0x10)
};


// Size 0x40
class EventPlayerSendOutDirectTextMessage: public None
{
public:
	Class PlayerState*                                           Sender;                                            // 0x0(0x8)
	Struct FText                                                 Message;                                           // 0x8(0x38)
};


// Size 0x38
class EventSendNewTextMessageToServer: public None
{
public:
	Struct FText                                                 Message;                                           // 0x0(0x38)
};


// Size 0x48
class EventPlayerTextChatMessageUINotification: public None
{
public:
	Struct PlayerTextChatMessage                                 PlayerTextChatMessage;                             // 0x0(0x48)
};


// Size 0x1
class EventUINotification: public None
{
public:
};


// Size 0x48
class PlayerTextChatMessage: public None
{
public:
	Struct UniqueNetIdRepl                                       SenderNetId;                                       // 0x0(0x18)
	Struct FString                                               GamerTag;                                          // 0x18(0x10)
	Struct FString                                               Text;                                              // 0x28(0x10)
	byte                                                         NotificationType;                                  // 0x38(0x1)
	Struct NotificationStickiness                                Stickiness;                                        // 0x3c(0x8)
};


// Size 0x8
class NotificationStickiness: public None
{
public:
	byte                                                         Type;                                              // 0x0(0x1)
};


// Size 0x40
class EventNPCChatUINotification: public None
{
public:
	Struct NPCChat                                               NpcMessage;                                        // 0x0(0x40)
};


// Size 0x40
class NPCChat: public None
{
public:
	Struct FString                                               SenderName;                                        // 0x0(0x10)
	Struct FString                                               Text;                                              // 0x10(0x10)
	byte                                                         Type;                                              // 0x20(0x1)
	Struct FString                                               Image;                                             // 0x28(0x10)
	int                                                          Timeout;                                           // 0x38(0x4)
};


// Size 0x10
class StateChangeCoordination: public None
{
public:
	Class CoordinatedCutsceneTrigger*                            OtherCutscene;                                     // 0x0(0x8)
	byte                                                         OtherCutsceneStateChangeCondition;                 // 0x8(0x1)
	byte                                                         CutsceneStateChangeResponse;                       // 0x9(0x1)
};


// Size 0x3
class CutsceneTriggerEditorOnlyData: public None
{
public:
	bool                                                         AlwaysShowCutsceneName;                            // 0x0(0x1)
	bool                                                         AlwaysShowShapeComponentOutlines;                  // 0x1(0x1)
	bool                                                         PrintStateChangesToScreen;                         // 0x2(0x1)
};


// Size 0x18
class CutsceneAnimationElement: public None
{
public:
	struct FName                                                 SequenceName;                                      // 0x0(0x8)
	TArray<class OneShotSequences*>                              OneShotSequences;                                  // 0x8(0x10)
};


// Size 0x18
class CutsceneGroup: public None
{
public:
	float                                                        GroupCooldown;                                     // 0x0(0x4)
	TArray<Struct CutscenePool>                                  Pools;                                             // 0x8(0x10)
};


// Size 0x40
class CutscenePool: public None
{
public:
	struct FName                                                 CutsceneName;                                      // 0x0(0x8)
	int                                                          Priority;                                          // 0x8(0x4)
	int                                                          ActivationChance;                                  // 0xc(0x4)
	bool                                                         ShouldQueue;                                       // 0x10(0x1)
	float                                                        AdditionalPoolCooldown;                            // 0x14(0x4)
	Class CutscenePoolType*                                      PoolType;                                          // 0x18(0x8)
	TArray<class DialogueData*>                                  DialogueData;                                      // 0x20(0x10)
	TArray<Float >                                               CutsceneLengths;                                   // 0x30(0x10)
};


// Size 0x8
class CutsceneResponseResult: public None
{
public:
};


// Size 0x8
class CutsceneResponseData: public None
{
public:
	struct FName                                                 CutsceneName;                                      // 0x0(0x8)
};


// Size 0x10
class CutscenePriorityQueueEntry: public None
{
public:
	TArray<Struct QueuedCutsceneData>                            QueuedCutscenes;                                   // 0x0(0x10)
};


// Size 0x1c
class QueuedCutsceneData: public None
{
public:
	struct FName                                                 CutsceneName;                                      // 0x0(0x8)
};


// Size 0x30
class CutsceneTimestampData: public None
{
public:
};


// Size 0x30
class PeriodicResponse: public None
{
public:
	Struct FloatRange                                            PeriodRange;                                       // 0x0(0x10)
	Class Object*                                                Owner;                                             // 0x10(0x8)
};


// Size 0x18
class PossessableSequence: public None
{
public:
	Class Actor*                                                 ActorToPossess;                                    // 0x0(0x8)
	Struct FString                                               TrackNameToPossess;                                // 0x8(0x10)
};


// Size 0x38
class CutScenePlayData: public None
{
public:
	int                                                          PlayIndex;                                         // 0x0(0x4)
	double                                                       StartTimeInSeconds;                                // 0x8(0x8)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x10(0x8)
	TArray<Struct FText>                                         LocalisableNames;                                  // 0x18(0x10)
	TArray<Struct LocalisableNames>                              PossessableSequences;                              // 0x28(0x10)
};


// Size 0x18
class CutSceneLoadData: public None
{
public:
	Struct StringAssetReference                                  SequenceToPlayAssetReference;                      // 0x0(0x10)
	Class Actor*                                                 SpawnablesParent;                                  // 0x10(0x8)
};


// Size 0x1
class CutsceneStateChangedEvent: public None
{
public:
	byte                                                         NewState;                                          // 0x0(0x1)
};


// Size 0x28
class PlayCutsceneNetworkEvent: public None
{
public:
	Class CutsceneComponent*                                     TargetComponent;                                   // 0x10(0x8)
	int                                                          GroupIdx;                                          // 0x18(0x4)
	int                                                          PoolIdx;                                           // 0x1c(0x4)
	int                                                          VariantIdx;                                        // 0x20(0x4)
};


// Size 0x1
class EventSequencerCutSceneEnded: public None
{
public:
};


// Size 0x1
class EventSequencerCutSceneStarted: public None
{
public:
};


// Size 0x28
class NamedPointsCollectionGroup: public None
{
public:
	struct FName                                                 GroupName;                                         // 0x0(0x8)
	TArray<Struct GroupName>                                     GroupPoints;                                       // 0x8(0x10)
	TArray<Byte GroupPoints>                                     GroupTags;                                         // 0x18(0x10)
};


// Size 0x10
class StaticMeshVoteIndicator: public None
{
public:
	int                                                          VoteId;                                            // 0x0(0x4)
	Class StaticMeshComponent*                                   Mesh;                                              // 0x8(0x8)
};


// Size 0x18
class InlineVotingParameterSet: public None
{
public:
	float                                                        HoldTime;                                          // 0x0(0x4)
	Class VoteConsumerInlineBase*                                Consumer;                                          // 0x8(0x8)
	Class VoteValidatorInlineBase*                               Validator;                                         // 0x10(0x8)
};


// Size 0x18
class VotersByOption: public None
{
public:
	int                                                          VoteOption;                                        // 0x0(0x4)
	TArray<class Voters*>                                        Voters;                                            // 0x8(0x10)
};


// Size 0x28
class VoteSessionData: public None
{
public:
	TArray<Struct PrioritisedPromptWithHandle>                   Votes;                                             // 0x0(0x10)
	Struct Guid                                                  SessionId;                                         // 0x10(0x10)
	bool                                                         IsLocked;                                          // 0x20(0x1)
};


// Size 0x20
class QuestVariableVectorArray: public None
{
public:
};


// Size 0x20
class QuestVariableAssetArray: public None
{
public:
};


// Size 0x20
class QuestVariableNameArray: public None
{
public:
};


// Size 0x20
class QuestVariableTextArray: public None
{
public:
};


// Size 0x20
class QuestVariableText: public None
{
public:
};


// Size 0x20
class QuestVariableUObject: public None
{
public:
};


// Size 0x20
class QuestVariableInt: public None
{
public:
};


// Size 0x20
class QuestVariableFloat: public None
{
public:
};


// Size 0x20
class QuestVariableBool: public None
{
public:
};


// Size 0x20
class QuestVariableGuid: public None
{
public:
};


// Size 0x8
class TaleResourceHandle: public None
{
public:
	int                                                          ResourceHandle;                                    // 0x0(0x4)
	int                                                          ValidationId;                                      // 0x4(0x4)
};


// Size 0x28
class QuestVariableTransform: public None
{
public:
	struct FName                                                 SocketName;                                        // 0x20(0x8)
};


// Size 0x20
class QuestVariableOrientedPoint: public None
{
public:
};


// Size 0x20
class QuestVariableVector: public None
{
public:
};


// Size 0x30
class TaleQuestNotificationStepEvent: public None
{
public:
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
	Struct NetActorPtr                                           DiscoveringPlayerStateNetPtr;                      // 0x18(0x14)
};


// Size 0x20
class QuestVariableItemSpawnDataTypeArray: public None
{
public:
};


// Size 0x20
class QuestVariableItemSpawnDataType: public None
{
public:
};


// Size 0x10
class TaleQuestFailedTelemetryEvent: public None
{
public:
	Struct FString                                               FailReason;                                        // 0x0(0x10)
};


// Size 0x10
class TaleQuestTaskCompleteTelemetryEvent: public None
{
public:
	Struct Guid                                                  TaskId;                                            // 0x0(0x10)
};


// Size 0x30
class TaleQuestTaskStartedTelemetryEvent: public None
{
public:
	Struct FString                                               Description;                                       // 0x0(0x10)
	TArray<Str >                                                 Context;                                           // 0x10(0x10)
	Struct Guid                                                  TaskId;                                            // 0x20(0x10)
};


// Size 0x20
class TaleQuestProgressTelemetryEvent: public None
{
public:
	Struct FString                                               ProgressDescription;                               // 0x0(0x10)
	TArray<Str >                                                 Context;                                           // 0x10(0x10)
};


// Size 0x10
class TaleQuestStateTelemetryEvent: public None
{
public:
	Struct FString                                               TaleState;                                         // 0x0(0x10)
};


// Size 0x18
class TaleQuestFailedNetworkEvent: public None
{
public:
	class                                                        FailureRunnable;                                   // 0x10(0x8)
};


// Size 0xc
class SeaRock: public None
{
public:
	Struct Vector2D                                              Location;                                          // 0x0(0x8)
	float                                                        Radius;                                            // 0x8(0x4)
};


// Size 0x70
class CampaignInfo: public None
{
public:
};


// Size 0x18
class ActiveCampaignInfo: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
};


// Size 0x20
class CaptainedCrew: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	struct FName                                                 ShipId;                                            // 0x10(0x8)
	struct FName                                                 SessionToken;                                      // 0x18(0x8)
};


// Size 0xe0
class HitRegProjectileSnapshotData: public None
{
public:
	Struct HitRegProjectileAttackData                            AttackerClientData;                                // 0x0(0x70)
	Struct HitRegProjectileAttackData                            ServerData;                                        // 0x70(0x70)
};


// Size 0x70
class HitRegProjectileAttackData: public None
{
public:
	bool                                                         HasValidData;                                      // 0x0(0x1)
	Struct Vector                                                AimDirection;                                      // 0x4(0xc)
	Struct Vector                                                AimPosition;                                       // 0x10(0xc)
	Struct Transform                                             WeaponMeshTransform;                               // 0x20(0x30)
	Class Object*                                                WeaponMesh;                                        // 0x50(0x8)
	TArray<Struct HitRegTrailData>                               ProjectileTrails;                                  // 0x58(0x10)
};


// Size 0x40
class HitRegTrailData: public None
{
public:
	TArray<Struct WeaponMesh>                                    Trail;                                             // 0x0(0x10)
	float                                                        DistanceBeforeGravity;                             // 0x10(0x4)
	bool                                                         GravityActivated;                                  // 0x14(0x1)
	bool                                                         HitSomething;                                      // 0x15(0x1)
	Struct Vector                                                GravityStartPoint;                                 // 0x18(0xc)
	Struct Vector                                                ImpactPoint;                                       // 0x24(0xc)
	Class PrimitiveComponent*                                    ImpactedComponent;                                 // 0x30(0x8)
	Class Actor*                                                 ImpactedActor;                                     // 0x38(0x8)
};


// Size 0x4
class HitRegSnapshotDisplaySettings: public None
{
public:
	bool                                                         DisplaySnapshot;                                   // 0x0(0x1)
	bool                                                         DisplayAttackingClientData;                        // 0x1(0x1)
	bool                                                         DisplayServerData;                                 // 0x2(0x1)
	bool                                                         ShowDetailedExplanations;                          // 0x3(0x1)
};


// Size 0x20
class MeshVertexData: public None
{
public:
};


// Size 0xa0
class HitRegSnapshotProjectileRecord: public None
{
public:
	Struct Vector                                                AimDirection;                                      // 0x0(0xc)
	Struct Vector                                                AimPosition;                                       // 0xc(0xc)
	float                                                        BulletLifetime;                                    // 0x18(0x4)
	Struct Transform                                             WeaponMeshTransform;                               // 0x20(0x30)
	Class Object*                                                WeaponMesh;                                        // 0x50(0x8)
	int                                                          AttackGroupSize;                                   // 0x58(0x4)
	int                                                          SubAttackGroupId;                                  // 0x5c(0x4)
	Struct HitRegTrailData                                       ProjectileTrail;                                   // 0x60(0x40)
};


// Size 0x18
class ActiveHitRegSnapshot: public None
{
public:
	Class Actor*                                                 AttackingActor;                                    // 0x0(0x8)
	Class Actor*                                                 SnapshotActor;                                     // 0x8(0x8)
	Class HitRegSnapshotComponent*                               SnapshotComponent;                                 // 0x10(0x8)
};


// Size 0x78
class PartialHitRegProjectileSnapshotData: public None
{
public:
	TArray<Struct HitRegRecordProjectileShotRpc>                 AttackerClientRecords;                             // 0x0(0x10)
	TArray<Struct AttackerClientRecords>                         ServerRecords;                                     // 0x10(0x10)
	Class Actor*                                                 ServerAttacker;                                    // 0x20(0x8)
};


// Size 0x18
class PartialClientHitRegProjectileSnapshotData: public None
{
public:
	Class Actor*                                                 SendingPlayer;                                     // 0x0(0x8)
	TArray<Struct SendingPlayer>                                 AttackRecords;                                     // 0x8(0x10)
};


// Size 0xc0
class HitRegRecordProjectileShotRpc: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x10(0x10)
	Struct HitRegSnapshotProjectileRecord                        AttackRecord;                                      // 0x20(0xa0)
};


// Size 0x8
class StormStrengthType: public None
{
public:
	float                                                        Strength;                                          // 0x0(0x4)
	float                                                        Chance;                                            // 0x4(0x4)
};


// Size 0x40
class StormAvoidanceArea: public None
{
public:
	Struct Vector2D                                              Location;                                          // 0x0(0x8)
	float                                                        Radius;                                            // 0x8(0x4)
};


// Size 0x10
class InitialShipSpawnLocations: public None
{
public:
	TArray<class ShipSpawnLocations*>                            ShipSpawnLocations;                                // 0x0(0x10)
};


// Size 0x1
class DeactivateContestZoneEvent: public None
{
public:
};


// Size 0x1
class ActivateContestZoneEvent: public None
{
public:
};


// Size 0x1
class InitialiseContestZoneEvent: public None
{
public:
};


// Size 0x8
class RomeBeaconVelocityMap: public None
{
public:
	byte                                                         AttachType;                                        // 0x0(0x1)
	float                                                        AssociatedMaxVelocity;                             // 0x4(0x4)
};


// Size 0x20
class ContestLeaderboardUpdateEvent: public None
{
public:
	TArray<Struct PlayersCompletedContestSpawnInRewardStage>     Leaderboard;                                       // 0x10(0x10)
};


// Size 0x1
class PlayersCompletedContestSpawnInRewardStage: public None
{
public:
};


// Size 0x1
class PlayersCompletedContestSpawn: public None
{
public:
};


// Size 0x1
class PrepareTavernForContestMigration: public None
{
public:
};


// Size 0x10
class ContestParticipantJoinedServerEvent: public None
{
public:
	Struct Guid                                                  NewCrewJoining;                                    // 0x0(0x10)
};


// Size 0x1
class ClientContestManagerServiceCurrentContestStateRepEvent: public None
{
public:
};


// Size 0x1
class ClientContestManagerServiceDestructionEvent: public None
{
public:
};


// Size 0x10
class ServerContestManagerServiceInitialisationCompleteEvent: public None
{
public:
};


// Size 0x8
class EventPlayerStoppedSwimming: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x8
class EventPlayerStartedSwimming: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x1
class EventCharacterStoppedDrowning: public None
{
public:
};


// Size 0x4
class EventCharacterStartedDrowning: public None
{
public:
	float                                                        TimeTillDrown;                                     // 0x0(0x4)
};


// Size 0x1
class EventCharacterDrowning: public None
{
public:
	bool                                                         Drowning;                                          // 0x0(0x1)
};


// Size 0x18
class EmblemDefinitionActiveDuration: public None
{
public:
	bool                                                         HasActiveDuration;                                 // 0x0(0x1)
	Struct DateTime                                              ActiveFrom;                                        // 0x8(0x8)
	Struct DateTime                                              ActiveUntil;                                       // 0x10(0x8)
};


// Size 0x18
class EmblemId: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	Struct Guid                                                  Id;                                                // 0x8(0x10)
};


// Size 0x10
class EmblemSetRuntimeDefinition: public None
{
public:
};


// Size 0x140
class EmblemRuntimeDefinition: public None
{
public:
	Class PopUpMessageDesc*                                      UnlockPopUp;                                       // 0x130(0x8)
	Class PopUpAudioDesc*                                        UnlockPopUpAudioOverrides;                         // 0x138(0x8)
};


// Size 0x18
class EmblemProgressRuntimeDefinition: public None
{
public:
};


// Size 0xb0
class MastDamageAudioParams: public None
{
public:
	Struct WwiseEmitter                                          MastHingeAudioEmitter;                             // 0x0(0x20)
	Class WwiseObjectPoolWrapper*                                MastHingeAudioPool;                                // 0x20(0x8)
	Struct WwiseEmitter                                          MastImpactAudioEmitter;                            // 0x28(0x20)
	Class WwiseObjectPoolWrapper*                                MastImpactAudioPool;                               // 0x48(0x8)
	Class WwiseEvent*                                            MastDamaged;                                       // 0x50(0x8)
	Class WwiseEvent*                                            MastFallingStart;                                  // 0x58(0x8)
	Class WwiseEvent*                                            MastFallingStop;                                   // 0x60(0x8)
	Class WwiseEvent*                                            MasthHoistingStart;                                // 0x68(0x8)
	Class WwiseEvent*                                            MastHoistingStop;                                  // 0x70(0x8)
	Class WwiseEvent*                                            MastHoistingComplete;                              // 0x78(0x8)
	Class WwiseEvent*                                            MastFallComplete;                                  // 0x80(0x8)
	Class WwiseEvent*                                            MastFallenStop;                                    // 0x88(0x8)
	struct FName                                                 MastDamageLevelAudioSwitch;                        // 0x90(0x8)
	struct FName                                                 MastHoistingSpeedAudioSwitch;                      // 0x98(0x8)
	struct FName                                                 MastAngleRTPC;                                     // 0xa0(0x8)
	struct FName                                                 MastFallingSpeedRTPC;                              // 0xa8(0x8)
};


// Size 0x38
class MastDesc: public None
{
public:
	Class StaticMesh*                                            MastUnbrokenMesh;                                  // 0x0(0x8)
	Class StaticMesh*                                            MastMainYardMesh;                                  // 0x8(0x8)
	Class StaticMesh*                                            MastTopYardMesh;                                   // 0x10(0x8)
	Class StaticMesh*                                            MastTopgallantYardMesh;                            // 0x18(0x8)
	Class StaticMesh*                                            MastPennantMesh;                                   // 0x20(0x8)
	Class StaticMesh*                                            MastSecondaryPennantMesh;                          // 0x28(0x8)
	Class StaticMesh*                                            MastCrowsNestMesh;                                 // 0x30(0x8)
};


// Size 0x10
class EventMastDamageLevelChanged: public None
{
public:
	Class Actor*                                                 Mast;                                              // 0x0(0x8)
	int                                                          DamageLevel;                                       // 0x8(0x4)
};


// Size 0x10
class MastDamageStateChangedEvent: public None
{
public:
	byte                                                         NewMastDamageState;                                // 0x0(0x1)
	Class Actor*                                                 Mast;                                              // 0x8(0x8)
};


// Size 0x4
class MastFallingProportionBecameStationaryEvent: public None
{
public:
	float                                                        Proportion;                                        // 0x0(0x4)
};


// Size 0x1
class MastReachedFallenPositionEvent: public None
{
public:
};


// Size 0x1
class MastReachedUprightPositionEvent: public None
{
public:
};


// Size 0x4
class MastFallenAngleChangedEvent: public None
{
public:
	float                                                        Angle;                                             // 0x0(0x4)
};


// Size 0xc
class MastReceivedDamageEvent: public None
{
public:
	int                                                          OldLevelsOfDamage;                                 // 0x0(0x4)
	int                                                          DamageReceived;                                    // 0x4(0x4)
	int                                                          CurrentLevelsOfDamage;                             // 0x8(0x4)
};


// Size 0x1
class EventMastSailsUnbillowed: public None
{
public:
};


// Size 0x10
class EventMastSailsBillowed: public None
{
public:
	byte                                                         MastType;                                          // 0x0(0x1)
	Class Actor*                                                 ParentShip;                                        // 0x8(0x8)
};


// Size 0x4
class MastSailLoweredProportionBecameStationaryEvent: public None
{
public:
	float                                                        Proportion;                                        // 0x0(0x4)
};


// Size 0xc
class MastSailLoweredProportionChangedEvent: public None
{
public:
	float                                                        Proportion;                                        // 0x0(0x4)
	float                                                        DeltaTime;                                         // 0x4(0x4)
	float                                                        MovementRate;                                      // 0x8(0x4)
};


// Size 0x4
class MastSailAngleBecameStationaryEvent: public None
{
public:
	float                                                        Angle;                                             // 0x0(0x4)
};


// Size 0xc
class MastSailAngleChangedEvent: public None
{
public:
	float                                                        Angle;                                             // 0x0(0x4)
	float                                                        DeltaTime;                                         // 0x4(0x4)
	float                                                        SailTurnRate;                                      // 0x8(0x4)
};


// Size 0x1
class EventMastGotPerfectWind: public None
{
public:
};


// Size 0x18
class RammableDamageSpeedEntry: public None
{
public:
	class                                                        SpeedBand;                                         // 0x0(0x8)
	TArray<Struct RammableDamageEntry>                           DamageRammerTypes;                                 // 0x8(0x10)
};


// Size 0x18
class RammableDamageEntry: public None
{
public:
	class                                                        RammerType;                                        // 0x0(0x8)
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x8(0x8)
	int                                                          DamageAmount;                                      // 0x10(0x4)
};


// Size 0x10
class ShroudBreakerSoftTearDownEvent: public None
{
public:
	Struct Guid                                                  ShroudBreakerId;                                   // 0x0(0x10)
};


// Size 0x10
class ShroudBreakerDeactivateEffectsEvent: public None
{
public:
	Struct Guid                                                  ShroudBreakerId;                                   // 0x0(0x10)
};


// Size 0x10
class ShroudBreakerActivateEffectsEvent: public None
{
public:
	Struct Guid                                                  ShroudBreakerId;                                   // 0x0(0x10)
};


// Size 0x10
class ShroudBreakerDeactivatedEvent: public None
{
public:
	Struct Guid                                                  ShroudBreakerId;                                   // 0x0(0x10)
};


// Size 0x10
class ShroudBreakerActivatedEvent: public None
{
public:
	Struct Guid                                                  ShroudBreakerId;                                   // 0x0(0x10)
};


// Size 0x140
class ExplosionInfo: public None
{
public:
	class                                                        DamagerType;                                       // 0x0(0x8)
	byte                                                         HealthChangedReason;                               // 0x8(0x1)
	byte                                                         CollisionChannel;                                  // 0x9(0x1)
	float                                                        MaxExplosionRadius;                                // 0xc(0x4)
	float                                                        BaseDamageAmount;                                  // 0x10(0x4)
	Class CurveFloat*                                            PlayerDamageCurve;                                 // 0x18(0x8)
	Class CurveFloat*                                            OtherPawnDamageCurve;                              // 0x20(0x8)
	float                                                        PlayerInsideShipDamageMultiplier;                  // 0x28(0x4)
	bool                                                         DealFriendlyFireDamage;                            // 0x2c(0x1)
	Struct ShipDamageParams                                      ShipDamageParams;                                  // 0x30(0x10)
	int                                                          MaxNumDamageHolesPerShip;                          // 0x40(0x4)
	Class CurveFloat*                                            ShipDamageCurveInMetres;                           // 0x48(0x8)
	bool                                                         ShouldIgnoreZForShipHullDamage;                    // 0x50(0x1)
	Struct WeightedProbabilityRangeOfRanges                      ForceToApplyToShip;                                // 0x58(0x30)
	float                                                        ForceModifierToApplyToKrakenWrappedShip;           // 0x88(0x4)
	struct FName                                                 IgnitionFeatureName;                               // 0x8c(0x8)
	Class FireGridCellSelectionParamsDataAsset*                  IgnitionParameters;                                // 0x98(0x8)
	TArray<Struct IgnitionParameters>                            StatusesToApply;                                   // 0xa0(0x10)
	bool                                                         ApplyStatusEffectsWhenUnderwater;                  // 0xb0(0x1)
	float                                                        StatusEffectInnerRadiusMultiplier;                 // 0xb4(0x4)
	Struct KnockBackInfo                                         KnockbackParams;                                   // 0xb8(0x50)
	float                                                        KnockbackInnerRadiusMultiplier;                    // 0x108(0x4)
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x110(0x8)
	Class ForceFeedbackEffect*                                   ForceFeedbackEffectLower;                          // 0x118(0x8)
	float                                                        ForceFeedbackEffectInnerRadiusMultiplier;          // 0x120(0x4)
	struct FName                                                 ForceFeedbackTag;                                  // 0x124(0x8)
	class                                                        CameraShake;                                       // 0x130(0x8)
	float                                                        CameraShakeInnerRadiusMultiplier;                  // 0x138(0x4)
};


// Size 0x10
class MechanismMaterialMapEntry: public None
{
public:
	TArray<Struct MechanismMaterialOverride>                     Materials;                                         // 0x0(0x10)
};


// Size 0x18
class MechanismMaterialOverride: public None
{
public:
	class                                                        Group;                                             // 0x0(0x8)
	Struct StringAssetReference                                  Material;                                          // 0x8(0x10)
};


// Size 0x28
class AllowedInteractableTypes: public None
{
public:
	Struct CollisionProfileName                                  CollisionProfileName;                              // 0x20(0x8)
};


// Size 0x18
class AnimatedMechanismActionState: public None
{
public:
	int                                                          AnimationID;                                       // 0x0(0x4)
	double                                                       StartTime;                                         // 0x8(0x8)
	double                                                       EndTime;                                           // 0x10(0x8)
};


// Size 0x40
class AnimatedMaterialData: public None
{
public:
	struct FName                                                 ParamName;                                         // 0x0(0x8)
	float                                                        BlendDuration;                                     // 0x8(0x4)
	Class CurveFloat*                                            InCurve;                                           // 0x10(0x8)
	Class CurveFloat*                                            OutCurve;                                          // 0x18(0x8)
	TArray<class FoundMaterials*>                                FoundMaterials;                                    // 0x20(0x10)
	Class CurveFloat*                                            CurrentBlendCurve;                                 // 0x30(0x8)
};


// Size 0x8
class MechanismTransformAnimationCurve: public None
{
public:
	Class MechanismAnimationCurve_Transform*                     CurveAsset;                                        // 0x0(0x8)
};


// Size 0x50
class MechanismAnimationEventContainer: public None
{
public:
	TArray<class AnimationStartedEvents*>                        AnimationStartedEvents;                            // 0x0(0x10)
	TArray<class OneShotTimelineEvents*>                         OneShotTimelineEvents;                             // 0x10(0x10)
	TArray<class ContinuousTimelineEvents*>                      ContinuousTimelineEvents;                          // 0x20(0x10)
	TArray<class AnimationStoppedEvents*>                        AnimationStoppedEvents;                            // 0x30(0x10)
};


// Size 0xc
class TimedDoorState: public None
{
public:
	byte                                                         State;                                             // 0x0(0x1)
	int                                                          JammedLandmarkReactionIndex;                       // 0x4(0x4)
	int                                                          LoweringLandmarkReactionIndex;                     // 0x8(0x4)
};


// Size 0x10
class TimedDoorLandmarkReactions: public None
{
public:
	TArray<Struct KeySequence>                                   Reactions;                                         // 0x0(0x10)
};


// Size 0x28
class KeySequence: public None
{
public:
	class                                                        VaultKeyDesc;                                      // 0x0(0x8)
	TArray<Struct VaultKeyDesc>                                  ActiveToInactiveSequenceCheckpoints;               // 0x8(0x10)
	TArray<Struct MechanismCheckpoint>                           InactiveToActiveSequenceCheckpoints;               // 0x18(0x10)
};


// Size 0x10
class MechanismCheckpoint: public None
{
public:
	Struct MechanismTransformAnimationCurve                      AnimationCurve;                                    // 0x0(0x8)
	float                                                        StartDelay;                                        // 0x8(0x4)
	byte                                                         ClosingState;                                      // 0xc(0x1)
};


// Size 0x8
class MechanismFloatAnimationCurve: public None
{
public:
	Class MechanismAnimationCurve_Float*                         CurveAsset;                                        // 0x0(0x8)
};


// Size 0x20
class MechanismMaterialAnimationContext: public None
{
public:
	Class MeshComponent*                                         Mesh;                                              // 0x8(0x8)
	TArray<class DynamicMaterials*>                              DynamicMaterials;                                  // 0x10(0x10)
};


// Size 0x20
class SpikeMechanismMaterialAnimationContext: public None
{
public:
};


// Size 0x20
class SwingMechanismMaterialAnimationContext: public None
{
public:
};


// Size 0x30
class FlamethrowerStatusOverride: public None
{
public:
	TArray<Struct ActorType>                                     StatusesToApplyOnOverlap;                          // 0x20(0x10)
};


// Size 0xa8
class MechanismBinding: public None
{
public:
	TArray<class Actions*>                                       Actions;                                           // 0x0(0x10)
	TArray<class Triggers*>                                      Triggers;                                          // 0x10(0x10)
	Struct MechanismBindingSettings                              Settings;                                          // 0x20(0x68)
	TArray<class SelectedActions*>                               SelectedActions;                                   // 0x88(0x10)
	TArray<class SelectedTriggers*>                              SelectedTriggers;                                  // 0x98(0x10)
};


// Size 0x68
class MechanismBindingSettings: public None
{
public:
	byte                                                         ActionActivationMode;                              // 0x0(0x1)
	Struct WeightedProbabilityRangeOfRanges                      NumActionsToSelect;                                // 0x8(0x30)
	Struct WeightedProbabilityRangeOfRanges                      NumTriggersToSelect;                               // 0x38(0x30)
};


// Size 0x18
class FeatureToggledMechanismGroups: public None
{
public:
	struct FName                                                 Feature;                                           // 0x0(0x8)
	TArray<class MechanismGroups*>                               MechanismGroups;                                   // 0x8(0x10)
};


// Size 0x10
class PressurePlateAnimationComponent: public None
{
public:
	Class SceneComponent*                                        Component;                                         // 0x0(0x8)
	Class TransformBlendCurveComponent*                          Curve;                                             // 0x8(0x8)
};


// Size 0x50
class SwitchMechanismTriggerPosition: public None
{
public:
	byte                                                         MechanismState;                                    // 0x0(0x1)
	Struct Transform                                             PivotTransform;                                    // 0x10(0x30)
	Class WwiseEvent*                                            SwitchStartTransitionAudioEvent;                   // 0x40(0x8)
	Class WwiseEvent*                                            SwitchStopTransitionAudioEvent;                    // 0x48(0x8)
};


// Size 0x48
class MechanismAnimationEvent_VFXParams: public None
{
public:
	Class ParticleSystem*                                        ParticleSystem;                                    // 0x0(0x8)
	byte                                                         Mode;                                              // 0x8(0x1)
	struct FName                                                 MechanismVFXComponentTag;                          // 0xc(0x8)
	struct FName                                                 AttachParentComponentTag;                          // 0x14(0x8)
	byte                                                         AttachType;                                        // 0x1c(0x1)
	Struct Vector                                                LocationOffset;                                    // 0x20(0xc)
	Struct Rotator                                               RotationOffset;                                    // 0x2c(0xc)
	Struct Vector                                                Scale;                                             // 0x38(0xc)
	bool                                                         IsUnderwater;                                      // 0x44(0x1)
	byte                                                         VFXRegion;                                         // 0x45(0x1)
};


// Size 0x20
class ActorsOverlappingMechanismData: public None
{
public:
};


// Size 0x14
class InteractingActorData: public None
{
public:
	struct FName                                                 PreviousCollisionProfile;                          // 0x8(0x8)
};


// Size 0x18
class InteractableMechanismIslandData: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
};


// Size 0x38
class OneShotToggleCollisionAudioParams: public None
{
public:
	Class WwiseEvent*                                            OverlapBeginAudioEvent;                            // 0x0(0x8)
	Class WwiseEvent*                                            OverlapEndAudioEvent;                              // 0x8(0x8)
	Class WwiseObjectPoolWrapper*                                OverlapEventAudioPool;                             // 0x10(0x8)
	Struct WwiseEmitter                                          OverlapEmitter;                                    // 0x18(0x20)
};


// Size 0x1
class TimedDoorFinishedLoadingKeySequenceEvent: public None
{
public:
};


// Size 0x1
class TimedDoorStartClosingEvent: public None
{
public:
};


// Size 0x1
class TimedDoorStartOpeningEvent: public None
{
public:
};


// Size 0x1
class TimedDoorClosedEvent: public None
{
public:
};


// Size 0x1
class TimedDoorOpenedEvent: public None
{
public:
};


// Size 0x38
class ElevatorHeightCallback: public None
{
public:
};


// Size 0x38
class BattleElevatorEventRoomPhase: public None
{
public:
	struct FName                                                 PhaseName;                                         // 0x0(0x8)
	bool                                                         IsFinalPhase;                                      // 0x8(0x1)
	struct FName                                                 NextPhaseName;                                     // 0xc(0x8)
	TArray<class Policies*>                                      Policies;                                          // 0x18(0x10)
	TArray<class Actions*>                                       Actions;                                           // 0x28(0x10)
};


// Size 0x40
class CurrentPhaseData: public None
{
public:
	Struct BattleElevatorEventRoomPhase                          CurrentPhase;                                      // 0x0(0x38)
};


// Size 0x10
class ClientRequestExitConcealingObjectNetworkEvent: public None
{
public:
};


// Size 0x8
class EventConcealingObjectUsed: public None
{
public:
	Class Actor*                                                 UsingActor;                                        // 0x0(0x8)
};


// Size 0x14
class NameplateVisibilityFactors: public None
{
public:
};


// Size 0x1c
class CustomWreckEntry: public None
{
public:
	Struct Guid                                                  OwningCrewID;                                      // 0x0(0x10)
	bool                                                         WreckExpired;                                      // 0x18(0x1)
};


// Size 0x48
class ShipwreckHullAudioData: public None
{
public:
	Struct WwiseEmitter                                          Emitter;                                           // 0x0(0x20)
	Class WwiseObjectPoolWrapper*                                WwiseObjectPoolWrapper;                            // 0x20(0x8)
	Class WwiseEvent*                                            WwiseEvent;                                        // 0x28(0x8)
	struct FName                                                 Name;                                              // 0x30(0x8)
	Struct Vector                                                Offset;                                            // 0x38(0xc)
};


// Size 0x10
class WreckSpawnQueryPriorityData: public None
{
public:
	TArray<Struct WreckQueryPriorityEntry>                       PriorityTable;                                     // 0x0(0x10)
};


// Size 0x2
class WreckQueryPriorityEntry: public None
{
public:
	byte                                                         FlagIdent;                                         // 0x0(0x1)
	byte                                                         BlockType;                                         // 0x1(0x1)
};


// Size 0x60
class WreckSpawnBlockingData: public None
{
public:
};


// Size 0x78
class WreckSpawnBlockingObjectArrays: public None
{
public:
	TArray<Struct QuestVariableShipwreck>                        ShipsLocations;                                    // 0x20(0x10)
	TArray<Interface ShipsLocations>                             AmbientShipwrecks;                                 // 0x30(0x10)
	TArray<Interface AmbientShipwrecks>                          ActiveCustomShipwrecks;                            // 0x40(0x10)
	TArray<Struct ActiveCustomShipwrecks>                        AmbientWrecksWithoutClosePlayers;                  // 0x50(0x10)
	TArray<Struct WreckMatch>                                    AmbientWrecksWithClosePlayers;                     // 0x60(0x10)
};


// Size 0x48
class WreckMatch: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	float                                                        DistanceData;                                      // 0x30(0x4)
	Struct Guid                                                  OwningCrewID;                                      // 0x34(0x10)
};


// Size 0x20
class QuestVariableShipwreck: public None
{
public:
};


// Size 0x18
class ShipwreckDiscoveredRpc: public None
{
public:
	Class Shipwreck*                                             Wreck;                                             // 0x10(0x8)
};


// Size 0x38
class EventShipwreckDiscoveredNotification: public None
{
public:
	Struct FText                                                 WreckName;                                         // 0x0(0x38)
};


// Size 0x18
class EventPlayerEnteredShipwreckVicinity: public None
{
public:
	Class Controller*                                            PirateController;                                  // 0x0(0x8)
};


// Size 0xc
class WreckEvictionAfterMigrationFailedTelemetryEvent: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
};


// Size 0x10
class DestroyingUnsafeWreckTelemetryEvent: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	bool                                                         IsCustomWreck;                                     // 0xc(0x1)
};


// Size 0xc
class NoValidWreckLocationFoundTelemetryEvent: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
};


// Size 0xc
class DestroyingUnsafeExpiredWreckTelemetryEvent: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
};


// Size 0x30
class TaleQuestSelectWreckLocationTelemetryEvent: public None
{
public:
	Struct FString                                               EventIdent;                                        // 0x0(0x10)
	int                                                          NumLocations;                                      // 0x10(0x4)
	int                                                          LocationIndex;                                     // 0x14(0x4)
	int                                                          KeyIndex;                                          // 0x18(0x4)
	TArray<Int >                                                 FlagResponses;                                     // 0x20(0x10)
};


// Size 0x20
class DestroyingUnsafeWreckEvent: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	Struct Guid                                                  CrewId;                                            // 0xc(0x10)
	bool                                                         IsCustomWreck;                                     // 0x1c(0x1)
};


// Size 0x1c
class NoValidWreckLocationFoundEvent: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	Struct Guid                                                  CrewId;                                            // 0xc(0x10)
};


// Size 0x1c
class DestroyingUnsafeExpiredWreckEvent: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	Struct Guid                                                  CrewId;                                            // 0xc(0x10)
};


// Size 0x10
class ExpireCustomWreckEvent: public None
{
public:
	Struct Guid                                                  CrewOwner;                                         // 0x0(0x10)
};


// Size 0x1
class EventSkeletonFortDoorUnlocked: public None
{
public:
};


// Size 0x10
class FishSizeAndType: public None
{
public:
	byte                                                         Size;                                              // 0x0(0x1)
	class                                                        Type;                                              // 0x8(0x8)
};


// Size 0x8
class FishSizeAndWeight: public None
{
public:
	byte                                                         Size;                                              // 0x0(0x1)
	float                                                        Weight;                                            // 0x4(0x4)
};


// Size 0x88
class FishAnimationSequences: public None
{
public:
	Struct FishAnimationSwimmingLoops                            FishAnimationSwimmingLoops;                        // 0x0(0x60)
	Class AnimMontage*                                           FishAnimationOnHookFighting;                       // 0x60(0x8)
	Class AnimMontage*                                           FishAnimationOnHookTired;                          // 0x68(0x8)
	Class AnimMontage*                                           FishAnimationOnHookCaught;                         // 0x70(0x8)
	Class AnimMontage*                                           FishAnimationOnHookCaughtIdle;                     // 0x78(0x8)
	Class AnimMontage*                                           FishAnimationEscaping;                             // 0x80(0x8)
};


// Size 0x60
class FishAnimationSwimmingLoops: public None
{
public:
	Struct FishAnimationSwimmingLoopAnimations                   TurnLeftLoopAnimations;                            // 0x0(0x20)
	Struct FishAnimationSwimmingLoopAnimations                   TurnRightLoopAnimations;                           // 0x20(0x20)
	Struct FishAnimationSwimmingLoopAnimations                   JumpingLoopAnimations;                             // 0x40(0x20)
};


// Size 0x20
class FishAnimationSwimmingLoopAnimations: public None
{
public:
	Class AnimMontage*                                           IdleLoopEndingForwards;                            // 0x0(0x8)
	Class AnimMontage*                                           IdleLoopEndingRight;                               // 0x8(0x8)
	Class AnimMontage*                                           IdleLoopEndingLeft;                                // 0x10(0x8)
	Class AnimMontage*                                           IdleLoopEndingBackwards;                           // 0x18(0x8)
};


// Size 0x8
class FishAnimationParams: public None
{
public:
	byte                                                         FishAnimationState;                                // 0x0(0x1)
	int                                                          FishLoopEndingDirection;                           // 0x4(0x4)
};


// Size 0x40
class FishingFishFishingRodDebugDrawInfo: public None
{
public:
};


// Size 0x60
class FishingFishFishingRodInfo: public None
{
public:
};


// Size 0x3
class FishingMiniGamePlayerInput: public None
{
public:
	byte                                                         InputDirection;                                    // 0x0(0x1)
	byte                                                         BattlingDirection;                                 // 0x1(0x1)
	bool                                                         IsReeling;                                         // 0x2(0x1)
};


// Size 0x50
class FishingMiniGame: public None
{
public:
	Struct FishingMiniGameData                                   Data;                                              // 0x0(0x10)
};


// Size 0x10
class FishingMiniGameData: public None
{
public:
	Class FishingMiniGameSetupDataAsset*                         SetupDataAsset;                                    // 0x0(0x8)
	Class FishingMiniGameFishDataAsset*                          FishDataAsset;                                     // 0x8(0x8)
};


// Size 0xd8
class FishingFishSelector: public None
{
public:
	Class AvailableFishForSpawning*                              AvailableFish;                                     // 0x0(0x8)
	TArray<class SelectedFishCache*>                             SelectedFishCache;                                 // 0xb0(0x10)
	Class Object*                                                Root;                                              // 0xc0(0x8)
	Class FishSpawnParamsDataAsset*                              GatheredConditions;                                // 0xc8(0x8)
	Class VoyageLocationOnlyNamedIslandListDataAsset*            GatheredIsland;                                    // 0xd0(0x8)
};


// Size 0x50
class PlayerGameFishingTelemetryEvent: public None
{
public:
	float                                                        FishingDuration;                                   // 0x0(0x4)
	byte                                                         TimeOfDay;                                         // 0x4(0x1)
	bool                                                         InPool;                                            // 0x5(0x1)
	bool                                                         CloseToActiveFortOrSkellyShip;                     // 0x6(0x1)
	bool                                                         InStorm;                                           // 0x7(0x1)
	bool                                                         CloseToShipwreck;                                  // 0x8(0x1)
	Struct FString                                               Sea;                                               // 0x10(0x10)
	Struct FString                                               IslandInRange;                                     // 0x20(0x10)
	byte                                                         BaitType;                                          // 0x30(0x1)
	Struct FString                                               RewardId;                                          // 0x38(0x10)
	byte                                                         ServerState;                                       // 0x48(0x1)
};


// Size 0x10
class FishingRodReplicatedFishState: public None
{
public:
	Class FishingFish*                                           FishingFish;                                       // 0x0(0x8)
	byte                                                         FishingFishState;                                  // 0x8(0x1)
	bool                                                         FishHasEscaped;                                    // 0x9(0x1)
};


// Size 0x10
class FishingRodForceFeedbackLevel: public None
{
public:
	float                                                        MinimumTensionFactor;                              // 0x0(0x4)
	Class ForceFeedbackEffect*                                   ForceFeedback;                                     // 0x8(0x8)
};


// Size 0x40
class FishingComedyItemInfo: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	class                                                        ItemDesc;                                          // 0x8(0x8)
	Struct Transform                                             SpawnOffset;                                       // 0x10(0x30)
};


// Size 0x10
class FishBaitInfo: public None
{
public:
	byte                                                         BaitType;                                          // 0x0(0x1)
	class                                                        BaitItemDesc;                                      // 0x8(0x8)
};


// Size 0x20
class DebugFishSelectionBreed: public None
{
public:
	Struct FString                                               BreedName;                                         // 0x0(0x10)
	TArray<Struct DebugFishSelectionColour>                      FishColours;                                       // 0x10(0x10)
};


// Size 0x18
class DebugFishSelectionColour: public None
{
public:
	int                                                          ColourIndex;                                       // 0x0(0x4)
	TArray<Struct DebugFishSelectionSize>                        FishSizes;                                         // 0x8(0x10)
};


// Size 0x10
class DebugFishSelectionSize: public None
{
public:
	int                                                          SizeIndex;                                         // 0x0(0x4)
	class                                                        FishClass;                                         // 0x8(0x8)
};


// Size 0x30
class FishingActionStateConstructionInfo: public None
{
public:
};


// Size 0x1
class EventFishingFishCollisionDetected: public None
{
public:
};


// Size 0x1
class EventFishingFishEscaping: public None
{
public:
};


// Size 0x8
class EventFishingFishCaught: public None
{
public:
	Class Actor*                                                 CaughtActor;                                       // 0x0(0x8)
};


// Size 0x1
class EventFishingFishBecameTired: public None
{
public:
};


// Size 0x1
class EventFishingFishStartedBattling: public None
{
public:
};


// Size 0x1
class EventFishingFishFloatBitten: public None
{
public:
};


// Size 0x1
class EventFishingReelingWhileBattlingStateChange: public None
{
public:
	bool                                                         IsReelingWhileBattling;                            // 0x0(0x1)
};


// Size 0x1
class EventSetJIPFishingAnimationState: public None
{
public:
	byte                                                         State;                                             // 0x0(0x1)
};


// Size 0x1
class EventFishingRodFishCaught: public None
{
public:
};


// Size 0x2
class EventFishingRodFishingStateChanged: public None
{
public:
	bool                                                         IsInFishingState;                                  // 0x0(0x1)
	bool                                                         IsFishHooked;                                      // 0x1(0x1)
};


// Size 0x1
class EventSetFishingIsComedyItem: public None
{
public:
	bool                                                         IsComedyItem;                                      // 0x0(0x1)
};


// Size 0x8
class EventSetFishingFloatActor: public None
{
public:
	Class Actor*                                                 FishingFloat;                                      // 0x0(0x8)
};


// Size 0x8
class EventSetRemappedPlayerDirection: public None
{
public:
	Struct Vector2D                                              PlayerDirection;                                   // 0x0(0x8)
};


// Size 0x8
class EventSetFishingRodWieldedItem: public None
{
public:
	Class Actor*                                                 FishingRod;                                        // 0x0(0x8)
};


// Size 0x4
class EventSetFishingLineSnapShake: public None
{
public:
	float                                                        LineSnapShake;                                     // 0x0(0x4)
};


// Size 0x4
class EventSetFishingTensionShake: public None
{
public:
	float                                                        TensionShake;                                      // 0x0(0x4)
};


// Size 0x8
class EventSetFishingRodBend: public None
{
public:
	Struct Vector2D                                              RodBend;                                           // 0x0(0x8)
};


// Size 0x4
class EventSetFishingReelingSpeed: public None
{
public:
	float                                                        ReelingSpeed;                                      // 0x0(0x4)
};


// Size 0x1
class EventSetFishingAnimationState: public None
{
public:
	byte                                                         State;                                             // 0x0(0x1)
};


// Size 0x1
class EventFishingCastingFailed: public None
{
public:
};


// Size 0x30
class ShantyData: public None
{
public:
	struct FName                                                 ShantyName;                                        // 0x0(0x8)
	TArray<Struct ShantyInstrumentData>                          InstrumentData;                                    // 0x8(0x10)
	int                                                          LengthOfShantyInMs;                                // 0x18(0x4)
	class                                                        UnlockEntitlement;                                 // 0x20(0x8)
	bool                                                         CanRandomPlay;                                     // 0x28(0x1)
	bool                                                         CanBeSelected;                                     // 0x29(0x1)
	bool                                                         DisableMigrationWhilePlaying;                      // 0x2a(0x1)
};


// Size 0x28
class ShantyInstrumentData: public None
{
public:
	byte                                                         InstrumentType;                                    // 0x0(0x1)
	Class WwiseEvent*                                            PlayLead;                                          // 0x8(0x8)
	Class WwiseEvent*                                            PlayAccompaniment;                                 // 0x10(0x8)
	Class WwiseEvent*                                            StopLead;                                          // 0x18(0x8)
	Class WwiseEvent*                                            StopAccompaniment;                                 // 0x20(0x8)
};


// Size 0x20
class InstrumentHandlePairedWithActor: public None
{
public:
	Class Actor*                                                 InstrumentActor;                                   // 0x0(0x8)
};


// Size 0x8
class EventPlayerStoppedPlayingShanty: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x18
class EventNewPlayerStartedPlayingShanty: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
	Class Actor*                                                 Instrument;                                        // 0x8(0x8)
	Class Actor*                                                 Ensemble;                                          // 0x10(0x8)
};


// Size 0x1
class EventTavernStepsOpened: public None
{
public:
};


// Size 0x1
class EventBellRung: public None
{
public:
};


// Size 0x30
class HiddenActionStateConstructionInfo: public None
{
public:
};


// Size 0x5
class HiddenActionStateParams: public None
{
public:
	bool                                                         MakeInvincibleWhileInState;                        // 0x0(0x1)
	bool                                                         DisableCollisionWhileInState;                      // 0x1(0x1)
	bool                                                         MakeInvisibleWhileInState;                         // 0x2(0x1)
	bool                                                         HideNamePlatesWhileInState;                        // 0x3(0x1)
	bool                                                         DisableGravityWhileInState;                        // 0x4(0x1)
};


// Size 0x60
class HideInObjectActionStateConstructionInfo: public None
{
public:
	Struct NetActorPtr                                           LoadableObject;                                    // 0x48(0x14)
};


// Size 0x48
class PetRoamingAnimationStateDefinitionWrapper: public None
{
public:
	Struct StringAssetReference                                  LoadableDefinition;                                // 0x0(0x10)
	TArray<Struct PetRoamingAnimationStateLoadableWeightedDefinition> LoadableWeightedDefinitions;                       // 0x10(0x10)
	byte                                                         AnimationState;                                    // 0x20(0x1)
	Class PetRoamingAnimationStateDefinitionDataAsset*           DefinitionAsset;                                   // 0x28(0x8)
	TArray<Struct PetRoamingAnimationStateDefinitionWeightedDataAsset> WeightedDefinitionAssets;                          // 0x30(0x10)
	bool                                                         LoadOnDemand;                                      // 0x40(0x1)
	bool                                                         UseWeightedAnimationArray;                         // 0x41(0x1)
};


// Size 0x10
class PetRoamingAnimationStateDefinitionWeightedDataAsset: public None
{
public:
	Class PetRoamingAnimationStateDefinitionDataAsset*           AnimationDefinitionData;                           // 0x0(0x8)
	float                                                        Weighting;                                         // 0x8(0x4)
};


// Size 0x18
class PetRoamingAnimationStateLoadableWeightedDefinition: public None
{
public:
	Struct StringAssetReference                                  LoadableDefinition;                                // 0x0(0x10)
	float                                                        Weight;                                            // 0x10(0x4)
};


// Size 0x38
class PetRoamingAnimationStateDefinition: public None
{
public:
	byte                                                         AnimationType;                                     // 0x0(0x1)
	Class AnimMontage*                                           MontageData;                                       // 0x8(0x8)
	Struct PetAnimationCycleMontage                              CycleData;                                         // 0x10(0x18)
	byte                                                         CurrentWieldableLocation;                          // 0x28(0x1)
	byte                                                         ResetWieldableLocation;                            // 0x29(0x1)
	float                                                        BlendInTime;                                       // 0x2c(0x4)
	float                                                        BlendOutTime;                                      // 0x30(0x4)
	bool                                                         Uninterruptable;                                   // 0x34(0x1)
	bool                                                         ResetWieldableIfInterrupted;                       // 0x35(0x1)
	bool                                                         AllowHappyReact;                                   // 0x36(0x1)
};


// Size 0x18
class PetAnimationCycleMontage: public None
{
public:
	Class AnimMontage*                                           In;                                                // 0x0(0x8)
	Class AnimMontage*                                           Loop;                                              // 0x8(0x8)
	Class AnimMontage*                                           Out;                                               // 0x10(0x8)
};


// Size 0x10
class WeightedPetAnimations: public None
{
public:
	TArray<Struct WeightedPetAnimation>                          Weightings;                                        // 0x0(0x10)
};


// Size 0x10
class WeightedPetAnimation: public None
{
public:
	Class AnimSequence*                                          Animation;                                         // 0x0(0x8)
	float                                                        Weighting;                                         // 0x8(0x4)
};


// Size 0x218
class PetAnimationDataStructure: public None
{
public:
	Struct PetAnimationDataBeingHeld                             BeingHeld;                                         // 0x0(0x160)
	Struct PetAnimationDataRoaming                               Roaming;                                           // 0x160(0xa0)
	Class WeightedAnimationLoadOnDemandDataAsset*                WeightedAnimationLoadOnDemandDataRoaming;          // 0x200(0x8)
	Class WeightedAnimationLoadOnDemandDataAsset*                WeightedAnimationLoadOnDemandDataHeld;             // 0x208(0x8)
	Class WeightedAnimationLoadOnDemandDataAsset*                WeightedAnimationLoadOnDemandDataShow;             // 0x210(0x8)
};


// Size 0xa0
class PetAnimationDataRoaming: public None
{
public:
	Class PetRoamingAnimationStateDefinitionsDataAsset*          RoamingAnimationStateDefinitionsAsset;             // 0x0(0x8)
	Class AnimSequenceBase*                                      Locomotion_In;                                     // 0x8(0x8)
	Class BlendSpace1D*                                          Locomotion;                                        // 0x10(0x8)
	Class AnimSequenceBase*                                      Locomotion_Out;                                    // 0x18(0x8)
	Class AnimSequenceBase*                                      Locomotion_Scared;                                 // 0x20(0x8)
	Class AnimSequenceBase*                                      Locomotion_Sad_Additive;                           // 0x28(0x8)
	Class AnimSequenceBase*                                      TurnLeft;                                          // 0x30(0x8)
	Class AnimSequenceBase*                                      TurnRight;                                         // 0x38(0x8)
	Class AnimSequenceBase*                                      TurnLeftIntoLocomotion;                            // 0x40(0x8)
	Class AnimSequenceBase*                                      TurnRightIntoLocomotion;                           // 0x48(0x8)
	Class AnimSequenceBase*                                      Arrive;                                            // 0x50(0x8)
	Class AnimSequenceBase*                                      Exit;                                              // 0x58(0x8)
	Class AnimSequenceBase*                                      LandingLoop;                                       // 0x60(0x8)
	Class AnimSequenceBase*                                      Landing_Out;                                       // 0x68(0x8)
	Class AnimSequenceBase*                                      TakingOff_In;                                      // 0x70(0x8)
	Class AnimSequenceBase*                                      TakingOffLoop;                                     // 0x78(0x8)
	Class BlendSpace1D*                                          Flying;                                            // 0x80(0x8)
	Class AnimSequenceBase*                                      Flying_Scared;                                     // 0x88(0x8)
	Class AnimSequenceBase*                                      PositiveMood;                                      // 0x90(0x8)
	Class AnimSequenceBase*                                      CloseRadiusPositiveMood;                           // 0x98(0x8)
};


// Size 0x160
class PetAnimationDataBeingHeld: public None
{
public:
	Struct WeightedPetAnimations                                 WeightedBaseIdle;                                  // 0x0(0x10)
	Struct WeightedAnimationTimeoutSelector                      WeightedIdleTimeouts;                              // 0x10(0x10)
	Class AnimSequenceBase*                                      DefaultIdle;                                       // 0x20(0x8)
	Class AnimSequenceBase*                                      Equip;                                             // 0x28(0x8)
	Class AnimSequenceBase*                                      Drop;                                              // 0x30(0x8)
	Class AnimSequenceBase*                                      Chew;                                              // 0x38(0x8)
	Class AnimSequenceBase*                                      PositiveFeedingReact;                              // 0x40(0x8)
	Class AnimSequenceBase*                                      PositiveFeedingReactShown;                         // 0x48(0x8)
	Class AnimSequenceBase*                                      NegativeFeedingReact;                              // 0x50(0x8)
	Class AnimSequenceBase*                                      NegativeFeedingReactShown;                         // 0x58(0x8)
	Class AnimSequenceBase*                                      RefuseFeedingReact;                                // 0x60(0x8)
	Class AnimSequenceBase*                                      RefuseFeedingReactShown;                           // 0x68(0x8)
	Struct PetAnimationCycle                                     Stroke;                                            // 0x70(0x18)
	Struct PetAnimationCycle                                     StrokeAlternate;                                   // 0x88(0x18)
	Struct PetAnimationCycle                                     Give;                                              // 0xa0(0x18)
	Class BlendSpace*                                            Locomotion;                                        // 0xb8(0x8)
	Class BlendSpace*                                            ShowingLocomotion;                                 // 0xc0(0x8)
	Class AnimSequenceBase*                                      Underwater;                                        // 0xc8(0x8)
	Class AnimSequenceBase*                                      ShowingUnderwater;                                 // 0xd0(0x8)
	Struct PetAnimationDataJump                                  Jump;                                              // 0xd8(0x20)
	Struct PetAnimationDataJump                                  JumpAlternateStroke;                               // 0xf8(0x20)
	Struct PetAnimationDataJump                                  JumpShowing;                                       // 0x118(0x20)
	Struct JumpHeldAdditiveBlendWeight                           JumpHeldAdditiveBlendWeight;                       // 0x138(0x18)
	Struct AlternateHeldPose                                     AlternateHeldPose;                                 // 0x150(0x10)
};


// Size 0x10
class AlternateHeldPose: public None
{
public:
	Class AnimSequenceBase*                                      AlternateHeldPose;                                 // 0x0(0x8)
	float                                                        AlternateHeldPoseStrength;                         // 0x8(0x4)
};


// Size 0x18
class JumpHeldAdditiveBlendWeight: public None
{
public:
	TArray<Struct HeldStateSpecificBlendWeight>                  HeldStateSpecificBlendWeights;                     // 0x0(0x10)
	float                                                        DefaultBlendWeight;                                // 0x10(0x4)
};


// Size 0x8
class HeldStateSpecificBlendWeight: public None
{
public:
	byte                                                         HeldState;                                         // 0x0(0x1)
	float                                                        BlendWeight;                                       // 0x4(0x4)
};


// Size 0x20
class PetAnimationDataJump: public None
{
public:
	Class AnimSequenceBase*                                      JumpStart;                                         // 0x0(0x8)
	Class AnimSequenceBase*                                      JumpCycle;                                         // 0x8(0x8)
	Class AnimSequenceBase*                                      PreImpact;                                         // 0x10(0x8)
	Class AnimSequenceBase*                                      LandLight;                                         // 0x18(0x8)
};


// Size 0x18
class PetAnimationCycle: public None
{
public:
	Class AnimSequenceBase*                                      In;                                                // 0x0(0x8)
	Class AnimSequenceBase*                                      Loop;                                              // 0x8(0x8)
	Class AnimSequenceBase*                                      Out;                                               // 0x10(0x8)
};


// Size 0x10
class PetAnimationDataPreview: public None
{
public:
	Struct StringAssetReference                                  MontageData;                                       // 0x0(0x10)
};


// Size 0x38
class PetRoamingAnimationState: public None
{
public:
	byte                                                         AnimationType;                                     // 0x0(0x1)
	Class AnimMontage*                                           MontageData;                                       // 0x8(0x8)
	Struct PetAnimationCycleMontage                              CycleData;                                         // 0x10(0x18)
	byte                                                         CurrentWieldableLocation;                          // 0x28(0x1)
	byte                                                         ResetWieldableLocation;                            // 0x29(0x1)
	float                                                        BlendInTime;                                       // 0x2c(0x4)
	float                                                        BlendOutTime;                                      // 0x30(0x4)
	bool                                                         Uninterruptable;                                   // 0x34(0x1)
	bool                                                         ResetWieldableIfInterrupted;                       // 0x35(0x1)
	bool                                                         AllowHappyReact;                                   // 0x36(0x1)
};


// Size 0x1
class EventAnimationAllowInterrupt: public None
{
public:
};


// Size 0x1
class EventAnimationBlockInterrupt: public None
{
public:
};


// Size 0xa0
class WeightedPetAnimationSelector: public None
{
public:
	TArray<Struct PetAnimationWeighting>                         Weightings;                                        // 0x0(0x10)
};


// Size 0x8
class PetAnimationWeighting: public None
{
public:
	byte                                                         AnimationState;                                    // 0x0(0x1)
	float                                                        Weighting;                                         // 0x4(0x4)
};


// Size 0x10
class PetCustomizationPartMapping: public None
{
public:
	Struct AIPartId                                              AppliedToPetPartId;                                // 0x0(0x8)
	Struct AIPartId                                              CustomizationPetPartId;                            // 0x8(0x8)
};


// Size 0x80
class LinearTransitionActionStateConstructionInfo: public None
{
public:
	Class SceneComponent*                                        SceneComponent;                                    // 0x30(0x8)
	Struct Vector                                                TargetLocation;                                    // 0x38(0xc)
	Struct Quat                                                  TargetRotation;                                    // 0x50(0x10)
};


// Size 0x14
class LinearTransitionActionStateParams: public None
{
public:
	float                                                        Duration;                                          // 0x10(0x4)
};


// Size 0x38
class LocationMapBannerParams: public None
{
public:
	int                                                          NumChests;                                         // 0x0(0x4)
	Struct StringAssetReference                                  BannerTexture;                                     // 0x8(0x10)
	Struct Vector2D                                              BannerSize;                                        // 0x18(0x8)
	Struct Vector2D                                              BannerLocation;                                    // 0x20(0x8)
	TArray<Struct BannerLocation>                                ChestCanvasOffsets;                                // 0x28(0x10)
};


// Size 0x1
class EventLocationMapChestFound: public None
{
public:
};


// Size 0x28
class TornMapTearingParams: public None
{
public:
	int                                                          NumPieces;                                         // 0x0(0x4)
	Struct StringAssetReference                                  VisibilityMask1;                                   // 0x8(0x10)
	Struct StringAssetReference                                  VisibilityMask2;                                   // 0x18(0x10)
};


// Size 0x4
class EventMapPiecedObtained: public None
{
public:
};


// Size 0x28
class ActivePortal: public None
{
public:
	Struct PortalSpawningInfo                                    PortalSpawnInfo;                                   // 0x0(0x10)
	Class TunnelOfTheDamnedPortal*                               Portal;                                            // 0x10(0x8)
	Struct Guid                                                  CrewId;                                            // 0x18(0x10)
};


// Size 0x10
class PortalSpawningInfo: public None
{
public:
	Class PortalLocatorActor*                                    Locator;                                           // 0x8(0x8)
};


// Size 0x10
class ShipSpecificData: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	Class LevelSequence*                                         VignetteSequence;                                  // 0x8(0x8)
};


// Size 0x18
class ShipCameraAnimation: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	Class CameraAnim*                                            Animation;                                         // 0x8(0x8)
	Class CurveFloat*                                            BlendCurve;                                        // 0x10(0x8)
};


// Size 0x28
class TunnelOfTheDamnedInstance: public None
{
public:
};


// Size 0x28
class TunnelDestinationInfo: public None
{
public:
};


// Size 0x10
class TunnelOfTheDamnedClass: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	class                                                        TunnelClass;                                       // 0x8(0x8)
};


// Size 0x10
class TunnelOfTheDamnedMigrationFailedTelemetryEvent: public None
{
public:
	Struct FString                                               Reason;                                            // 0x0(0x10)
};


// Size 0x1
class TunnelOfTheDamnedMigrationSucceededTelemetryEvent: public None
{
public:
};


// Size 0x1
class LastPlayerArrivedInTunnelOfTheDamnedTelemetryEvent: public None
{
public:
};


// Size 0x1
class FirstPlayerArrivedInTunnelOfTheDamnedTelemetryEvent: public None
{
public:
};


// Size 0x1
class CrewMemberLeftTunnelOfTheDamnedTelemetryEvent: public None
{
public:
};


// Size 0x1
class CrewMemberEnteredTunnelOfTheDamnedTelemetryEvent: public None
{
public:
};


// Size 0x1
class TunnelOfTheDamnedHandoverCompletedTelemetryEvent: public None
{
public:
};


// Size 0x1
class TunnelOfTheDamnedDestroyedTelemetryEvent: public None
{
public:
};


// Size 0x10
class TunnelOfTheDamnedInitializedTelemetryEvent: public None
{
public:
	Struct FString                                               RequestedMatchmakingPlayModeTag;                   // 0x0(0x10)
};


// Size 0x10
class TunnelOfTheDamnedBaseTelemetryFragmentInput: public None
{
public:
	Struct Guid                                                  TunnelInstanceId;                                  // 0x0(0x10)
};


// Size 0x10
class TunnelOfTheDamnedBaseTelemetryFragment: public None
{
public:
	Struct Guid                                                  TunnelInstanceId;                                  // 0x0(0x10)
};


// Size 0x8
class TeleportShipToTunnelEvent: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x1
class TunnelOfTheDamnedTransitionDynamicFogEvent: public None
{
public:
};


// Size 0x8
class CrewEnteredTunnelOfTheDamnedPortalProximityEvent: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x4
class TunnelOfTheDamnedDestroyedEvent: public None
{
public:
};


// Size 0x4
class TunnelOfTheDamnedMigrationSucceededEvent: public None
{
public:
};


// Size 0x4
class CrewEnteredTunnelOfTheDamnedEvent: public None
{
public:
};


// Size 0x60
class EjectFromTunnelOfTheDamnedActionStateConstructionInfo: public None
{
public:
	int                                                          TunnelId;                                          // 0x30(0x4)
	int                                                          TunnelStreamingLevelId;                            // 0x34(0x4)
	Struct TeleportLocation                                      TeleportLocation;                                  // 0x38(0x28)
};


// Size 0x1
class EjectFromTunnelOfTheDamnedFadeComplete: public None
{
public:
};


// Size 0x20
class EjectFromTunnelOfTheDamnedActionStateParams: public None
{
public:
	float                                                        FadeDuration;                                      // 0x0(0x4)
	float                                                        FadeEventTimeout;                                  // 0x4(0x4)
	float                                                        FadeServerTimeout;                                 // 0x8(0x4)
	Struct LinearColor                                           FadeColour;                                        // 0xc(0x10)
	bool                                                         FadeAudio;                                         // 0x1c(0x1)
};


// Size 0x60
class EnterTunnelOfTheDamnedActionStateConstructionInfo: public None
{
public:
	int                                                          TunnelId;                                          // 0x30(0x4)
	int                                                          TunnelStreamingLevelId;                            // 0x34(0x4)
	Struct TeleportLocation                                      TeleportLocation;                                  // 0x38(0x28)
};


// Size 0x10
class MapTableStateForTunnel: public None
{
public:
	Class Actor*                                                 Table;                                             // 0x0(0x8)
	bool                                                         Enabled;                                           // 0x8(0x1)
};


// Size 0x10
class LastCrewMemberEnteredTunnel: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x1
class EnterTunnelOfTheDamnedFadeComplete: public None
{
public:
};


// Size 0x20
class EnterTunnelOfTheDamnedActionStateParams: public None
{
public:
	float                                                        FadeDuration;                                      // 0x0(0x4)
	float                                                        FadeEventTimeout;                                  // 0x4(0x4)
	float                                                        FadeServerTimeout;                                 // 0x8(0x4)
	Struct LinearColor                                           FadeColour;                                        // 0xc(0x10)
	bool                                                         FadeAudio;                                         // 0x1c(0x1)
};


// Size 0x50
class ExitTunnelOfTheDamnedActionStateConstructionInfo: public None
{
public:
	Struct Vector                                                TunnelLocation;                                    // 0x30(0xc)
	Class CameraAnim*                                            CameraAnim;                                        // 0x40(0x8)
	Class CurveFloat*                                            CameraBlendCurve;                                  // 0x48(0x8)
};


// Size 0x14
class ExitTunnelOfTheDamnedActionStateParams: public None
{
public:
	float                                                        ClientSetupResponseTimeout;                        // 0x0(0x4)
	float                                                        CameraAnimationRate;                               // 0x4(0x4)
	float                                                        CameraAnimationScale;                              // 0x8(0x4)
	float                                                        CameraAnimationBlendInTime;                        // 0xc(0x4)
	float                                                        CameraAnimationBlendOutTime;                       // 0x10(0x4)
};


// Size 0x10
class TunnelOfTheDamnedMigrationFailed: public None
{
public:
};


// Size 0x40
class TunnelsOfTheDamnedMigrationDataHolder: public None
{
public:
	Struct Transform                                             ShipsTransform;                                    // 0x0(0x30)
	Struct Guid                                                  CrewId;                                            // 0x30(0x10)
};


// Size 0x8
class MigrationRequestedAutomationEvent: public None
{
public:
	Class WaitForTunnelOfTheDamnedMigrationTaleQuestStep*        MigrationStep;                                     // 0x0(0x8)
};


// Size 0x158
class ItemBuriedHistoryMetaWrapper: public None
{
public:
};


// Size 0x14
class PlayerBuriedItemServiceNumMapsTakenFromStoreThisDayPerCrew: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	int                                                          NumMaps;                                           // 0x10(0x4)
};


// Size 0x8
class PlayerBuriedItemServiceItemDigUpRadiusSurfaceOverride: public None
{
public:
	byte                                                         SurfaceType;                                       // 0x0(0x1)
	float                                                        ItemDigUpRadius;                                   // 0x4(0x4)
};


// Size 0x40
class PlayerBuriedItemServiceHaulSizeEntry: public None
{
public:
	Struct FText                                                 Title;                                             // 0x0(0x38)
	int                                                          MinHaulSize;                                       // 0x38(0x4)
};


// Size 0x18
class PlayerBuriedItemServiceDataAssetMapStorePopulationSeaRegion: public None
{
public:
	class                                                        SeaId;                                             // 0x0(0x8)
	TArray<Struct PlayerBuriedItemServiceDataAssetMapStorePopulationHaul> Hauls;                                             // 0x8(0x10)
};


// Size 0x40
class PlayerBuriedItemServiceDataAssetMapStorePopulationHaul: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	struct FName                                                 MapName;                                           // 0x4(0x8)
	Class VoyageLocationOnlyNamedIslandListDataAsset*            NamedIslands;                                      // 0x10(0x8)
	Struct WeightedProbabilityRange                              NumXs;                                             // 0x18(0x20)
	Class WeightedItemDescSpawnDataAsset*                        WeightedItemDescSpawnDataAsset;                    // 0x38(0x8)
};


// Size 0x4
class HaulItemDescSpawnDataKey: public None
{
public:
	byte                                                         SeaRegionIndex;                                    // 0x0(0x1)
	byte                                                         HaulIndex;                                         // 0x1(0x1)
};


// Size 0x1
class TavernBoardCreateMapFailEvent: public None
{
public:
};


// Size 0x1
class TavernBoardCreateMapSuccessEvent: public None
{
public:
};


// Size 0x68
class TavernBoardCreateMapRequestEvent: public None
{
public:
	Struct ITavernBoardMap                                       Map;                                               // 0x0(0x68)
};


// Size 0x68
class ITavernBoardMap: public None
{
public:
	TArray<Str None>                                             Creators;                                          // 0x0(0x10)
	Struct FString                                               IconPath;                                          // 0x10(0x10)
	float                                                        IconRotation;                                      // 0x20(0x4)
	Struct Guid                                                  Id;                                                // 0x24(0x10)
	bool                                                         IsAvailable;                                       // 0x34(0x1)
	Struct FString                                               Name;                                              // 0x38(0x10)
	byte                                                         WorldRegion;                                       // 0x48(0x1)
};


// Size 0x1
class TavernBoardTakeMapFailEvent: public None
{
public:
};


// Size 0x8
class TavernBoardTakeMapSuccessEvent: public None
{
public:
	Struct CappedCount                                           TakeLimit;                                         // 0x0(0x8)
};


// Size 0x68
class TavernBoardTakeMapRequestEvent: public None
{
public:
	Struct ITavernBoardMap                                       Map;                                               // 0x0(0x68)
};


// Size 0x1
class TavernBoardForceCloseEvent: public None
{
public:
};


// Size 0x1
class TavernBoardClosedEvent: public None
{
public:
};


// Size 0x8
class TavernBoardRequestOpenEvent: public None
{
public:
	Struct CappedCount                                           TakeLimit;                                         // 0x0(0x8)
};


// Size 0x1
class TavernBoardAvailableMapsRequestEvent: public None
{
public:
};


// Size 0x10
class TavernBoardAvailableMapsEvent: public None
{
public:
	TArray<Struct TavernBoardMyMapsRequestEvent>                 Maps;                                              // 0x0(0x10)
};


// Size 0x1
class TavernBoardMyMapsRequestEvent: public None
{
public:
};


// Size 0x10
class TavernBoardMyMapsEvent: public None
{
public:
	TArray<Struct WorldRegionMapping>                            MyMaps;                                            // 0x0(0x10)
};


// Size 0x10
class WorldRegionMapping: public None
{
public:
	class                                                        SeaId;                                             // 0x0(0x8)
	byte                                                         WorldRegion;                                       // 0x8(0x1)
};


// Size 0x40
class PlayerGeneratedMapDisplayData: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	int                                                          IslandIndex;                                       // 0x10(0x4)
	int                                                          NumXs;                                             // 0x14(0x4)
	int                                                          MapCreatedByPlayerNameOverrideIndex;               // 0x18(0x4)
	Struct Guid                                                  MapId;                                             // 0x1c(0x10)
	Struct FString                                               MapCreatedByPlayerName;                            // 0x30(0x10)
};


// Size 0x1
class PlayerBuriedItemServiceStoreMapsChangedEvent: public None
{
public:
};


// Size 0x10
class PlayerBuriedItemServiceCrewMapsChangedEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x18
class PlayerBuriedItemServiceMapTakenFromTavernBoardEvent: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x0(0x10)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x18
class PlayerBuriedItemServiceMapAddedToTavernBoardEvent: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x0(0x10)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x18
class PlayerBuriedItemServiceMapBundleGiftedEvent: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x0(0x10)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x18
class PlayerBuriedItemServiceMapBundlePickedUpEvent: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x0(0x10)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x18
class PlayerBuriedItemServiceMapBundlePlacedOnTableEvent: public None
{
public:
	Struct FString                                               PlayerName;                                        // 0x0(0x10)
	Class PopUpMessageDesc*                                      PopUpDesc;                                         // 0x10(0x8)
};


// Size 0x60
class PlayerBuriedItemsDeferredRewardCompensationTelemetryEvent: public None
{
public:
	Struct Guid                                                  RequestID;                                         // 0x0(0x10)
	struct FName                                                 CompanyAffiliation;                                // 0x10(0x8)
	struct FName                                                 RewardId;                                          // 0x18(0x8)
	Struct FString                                               UserId;                                            // 0x20(0x10)
	Struct FString                                               PirateId;                                          // 0x30(0x10)
	bool                                                         DontRewardCurrency;                                // 0x40(0x1)
	bool                                                         DontRewardXp;                                      // 0x41(0x1)
	bool                                                         DontRewardSeasonXp;                                // 0x42(0x1)
	Struct FString                                               DeferralReason;                                    // 0x48(0x10)
	double                                                       RewardMultiplier;                                  // 0x58(0x8)
};


// Size 0x44
class PlayerBuriedItemsMapTakenFromStoreTelemetryEvent: public None
{
public:
	Struct Guid                                                  MapBundleId;                                       // 0x0(0x10)
	Struct Guid                                                  TakingCrewId;                                      // 0x10(0x10)
	Struct Guid                                                  TakingCrewSessionId;                               // 0x20(0x10)
	Struct Guid                                                  MapId;                                             // 0x30(0x10)
	bool                                                         IsPlayerGenerated;                                 // 0x40(0x1)
};


// Size 0x44
class PlayerBuriedItemsMapAddedToStoreTelemetryEvent: public None
{
public:
	Struct Guid                                                  MapBundleId;                                       // 0x0(0x10)
	Struct Guid                                                  OwningCrewID;                                      // 0x10(0x10)
	Struct Guid                                                  OwningCrewSessionId;                               // 0x20(0x10)
	Struct Guid                                                  MapId;                                             // 0x30(0x10)
};


// Size 0x70
class PlayerBuriedItemServicePlayerTreasureDiscoveredTelemetryEvent: public None
{
public:
	byte                                                         BootyType;                                         // 0x0(0x1)
	Struct Guid                                                  BootyId;                                           // 0x4(0x10)
	Struct FString                                               ItemName;                                          // 0x18(0x10)
	Struct Guid                                                  BuriedByCrewId;                                    // 0x28(0x10)
	Struct Guid                                                  DiscoveredByCrewId;                                // 0x38(0x10)
	TArray<Struct DiscoveredByCrewId>                            CrewBuryHistory;                                   // 0x48(0x10)
	TArray<Struct CrewBuryHistory>                               CrewDiscoverHistory;                               // 0x58(0x10)
	bool                                                         WasDeferredRewardSent;                             // 0x68(0x1)
};


// Size 0x1
class PlayerBuriedItemsMapBundleBecameVisible: public None
{
public:
};


// Size 0x38
class AddMapToContainerRPC: public None
{
public:
	Struct NetSubObjectPtr                                       Container;                                         // 0x10(0x14)
	Struct Guid                                                  MapToAddToContainer;                               // 0x24(0x10)
};


// Size 0x1
class ApproachedPlayerGeneratedMapsContainer: public None
{
public:
};


// Size 0x10
class PlayerGeneratedMapsContainerHealthChangedCloseInventoryRpc: public None
{
public:
};


// Size 0x18
class PlayerGeneratedMapsContainerUnregisterServerEventsRpc: public None
{
public:
	Class Object*                                                InPlayerGeneratedMapsContainerOwnerObject;         // 0x10(0x8)
};


// Size 0x38
class TakeMapFromContainerRPC: public None
{
public:
	Struct NetSubObjectPtr                                       Container;                                         // 0x10(0x14)
	Struct Guid                                                  MapToTake;                                         // 0x24(0x10)
};


// Size 0x80
class PlayerBuriedItemsMapBundlePickedUpTelemetryEvent: public None
{
public:
	Struct Guid                                                  MapBundleId;                                       // 0x0(0x10)
	Struct Guid                                                  OwningCrewID;                                      // 0x10(0x10)
	Struct Guid                                                  PickedUpByPlayerId;                                // 0x20(0x10)
	Struct Guid                                                  PickedUpByCrewId;                                  // 0x30(0x10)
	Struct Guid                                                  OwningCrewSessionId;                               // 0x40(0x10)
	Struct Guid                                                  PickedUpByCrewSessionId;                           // 0x50(0x10)
	TArray<Struct PickedUpByCrewSessionId>                       PlayerBuriedItemMapIds;                            // 0x60(0x10)
	TArray<Struct PlayerBuriedItemMapIds>                        MapIdsOriginalOwners;                              // 0x70(0x10)
};


// Size 0x20
class FortTogglerUnit: public None
{
public:
	Class AIProximityPlayerTracker*                              AIProxPlayerTracker;                               // 0x8(0x8)
	TArray<class AISpawners*>                                    AISpawners;                                        // 0x10(0x10)
};


// Size 0x24
class FortCompletedTelemetryEvent: public None
{
public:
	Struct Guid                                                  FortId;                                            // 0x0(0x10)
	struct FName                                                 FortIsland;                                        // 0x10(0x8)
	struct FName                                                 FortType;                                          // 0x18(0x8)
	bool                                                         PresentForCompletion;                              // 0x20(0x1)
};


// Size 0x20
class FortStartedTelemetryEvent: public None
{
public:
	Struct Guid                                                  FortId;                                            // 0x0(0x10)
	struct FName                                                 FortIsland;                                        // 0x10(0x8)
	struct FName                                                 FortType;                                          // 0x18(0x8)
};


// Size 0x1c
class FortDespawnTelemetryEvent: public None
{
public:
	Struct Guid                                                  FortId;                                            // 0x0(0x10)
	byte                                                         DestructionReason;                                 // 0x10(0x1)
	struct FName                                                 FortType;                                          // 0x14(0x8)
};


// Size 0x30
class FortSpawnTelemetryEvent: public None
{
public:
	Struct Guid                                                  FortId;                                            // 0x0(0x10)
	Struct Guid                                                  ConfigSpawnId;                                     // 0x10(0x10)
	struct FName                                                 FortName;                                          // 0x20(0x8)
	struct FName                                                 FortType;                                          // 0x28(0x8)
};


// Size 0x20
class FortKeyUsedTelemetryEvent: public None
{
public:
	Struct Guid                                                  FortKeyId;                                         // 0x0(0x10)
	struct FName                                                 FortName;                                          // 0x10(0x8)
	struct FName                                                 KeyType;                                           // 0x18(0x8)
};


// Size 0x20
class FortTargetKilledTelemetryEvent: public None
{
public:
	Struct Guid                                                  FortKeyId;                                         // 0x0(0x10)
	Struct FString                                               FortTargetName;                                    // 0x10(0x10)
};


// Size 0x18
class FortWaveCompletedTelemetryEvent: public None
{
public:
	Struct Guid                                                  EncounteredObjectId;                               // 0x0(0x10)
	int                                                          FortWaveIndex;                                     // 0x10(0x4)
	int                                                          TotalFortWaves;                                    // 0x14(0x4)
};


// Size 0x40
class SpawnTransformToPositionMapping: public None
{
public:
	Struct Transform                                             SpawnTransform;                                    // 0x0(0x30)
	byte                                                         Position;                                          // 0x30(0x1)
};


// Size 0x18
class PrisonerToPositionMapping: public None
{
public:
	TArray<Struct SpawnablePrisoner>                             SpawnablePrisoners;                                // 0x0(0x10)
	byte                                                         Position;                                          // 0x10(0x1)
};


// Size 0x10
class SpawnablePrisoner: public None
{
public:
	class                                                        SpawnablePrisoner;                                 // 0x0(0x8)
	struct FName                                                 AnimationMontageName;                              // 0x8(0x8)
};


// Size 0x40
class SeaFortDistantLightsSignal: public None
{
public:
	Struct Transform                                             SeaFortIslandTransform;                            // 0x0(0x30)
	struct FName                                                 SeaFortIslandName;                                 // 0x30(0x8)
	bool                                                         ShouldShowLights;                                  // 0x38(0x1)
};


// Size 0x28
class SeaFortDistantLightsAssetLoader: public None
{
public:
	Class SeaFortsService*                                       Owner;                                             // 0x0(0x8)
	class                                                        LoadedDistantLightsAsset;                          // 0x8(0x8)
};


// Size 0x20
class SeaFortKeyPickedUpNetworkEvent: public None
{
public:
	Class PopUpMessageDesc*                                      KeyDiscoveredPopUpDesc;                            // 0x10(0x8)
	Class PopUpMessageDesc*                                      KeyHandInHintPopUpDesc;                            // 0x18(0x8)
};


// Size 0x1c
class SeaFortStateChangeTelemetryEvent: public None
{
public:
	Struct Guid                                                  FortId;                                            // 0x0(0x10)
	struct FName                                                 FortIslandName;                                    // 0x10(0x8)
	byte                                                         OldState;                                          // 0x18(0x1)
	byte                                                         NewState;                                          // 0x19(0x1)
};


// Size 0x40
class ShipPersistenceModel: public None
{
public:
	TArray<Struct ServerSpireInfo>                               PartDamagePersistenceModels;                       // 0x0(0x10)
	Struct HullDamagePersistenceModel                            HullDamageModel;                                   // 0x10(0x10)
	Struct HullCharringPersistenceModel                          HullCharringModel;                                 // 0x20(0x10)
	Struct MapTablePersistenceModel                              MapTablePersistenceModel;                          // 0x30(0x10)
};


// Size 0x30
class SwimmingCreatureMovementReplicatedData: public None
{
public:
	Struct Vector                                                CurrentServerGoalLocation;                         // 0x0(0xc)
	Struct RotationUpdateResult                                  CurrentServerRotationData;                         // 0xc(0x18)
	float                                                        CurrentServerMaxSpeed;                             // 0x24(0x4)
	float                                                        CurrentServerVelocitySmoothingFactor;              // 0x28(0x4)
	bool                                                         CurrentServerIsSharkArcCorrectionTurn;             // 0x2c(0x1)
};


// Size 0x30
class SwimmingCreatureAIStrategyMovementProperties: public None
{
public:
	class                                                        AIStrategy;                                        // 0x0(0x8)
	byte                                                         SwimRotationMode;                                  // 0x8(0x1)
	float                                                        RotationRate;                                      // 0xc(0x4)
	float                                                        CorrectingMaxSpeed;                                // 0x10(0x4)
	float                                                        CorrectingYawTurnRate;                             // 0x14(0x4)
	float                                                        MaxAbsPitch;                                       // 0x18(0x4)
	float                                                        MaxSpeed;                                          // 0x1c(0x4)
	float                                                        VelocitySmoothingFactor;                           // 0x20(0x4)
	float                                                        TrackedActorVelocityScaling;                       // 0x24(0x4)
	float                                                        TrackedActorVelocityScalingSmoothingFactor;        // 0x28(0x4)
};


// Size 0x10
class SwimmingCreatureImpactAnimData: public None
{
public:
	Class AnimSequenceBase*                                      ImpactAnim;                                        // 0x0(0x8)
	float                                                        MinDamageRange;                                    // 0x8(0x4)
	float                                                        MaxDamageRange;                                    // 0xc(0x4)
};


// Size 0x10
class AIStrategySpeedOverride: public None
{
public:
	class                                                        Strategy;                                          // 0x0(0x8)
	float                                                        Speed;                                             // 0x8(0x4)
};


// Size 0x1
class EventSwimmingCreatureUnderwaterStateChange: public None
{
public:
	bool                                                         IsAboveWater;                                      // 0x0(0x1)
};


// Size 0x1
class EventSwimmingCreatureDeathCustomEvent: public None
{
public:
	byte                                                         EventType;                                         // 0x0(0x1)
};


// Size 0x10
class EventSwimmingCreatureCollided: public None
{
public:
	Class Actor*                                                 SwimmingCreatureActor;                             // 0x0(0x8)
};


// Size 0x1
class EventSwimmingCreatureCrested: public None
{
public:
};


// Size 0x38
class VomitSFX: public None
{
public:
	Class WwiseObjectPoolWrapper*                                VomitSfxPool;                                      // 0x0(0x8)
	Class WwiseEvent*                                            VomitSfxEvent;                                     // 0x8(0x8)
	Class WwiseEvent*                                            VomitInBucketSfxEvent;                             // 0x10(0x8)
};


// Size 0x2
class BeckonTag: public None
{
public:
	byte                                                         NPCGroup;                                          // 0x0(0x1)
	byte                                                         BeckonGesture;                                     // 0x1(0x1)
};


// Size 0xc
class FeatureToggledBeckonTag: public None
{
public:
	Struct BeckonTag                                             BeckonTag;                                         // 0x0(0x2)
	struct FName                                                 FeatureToggle;                                     // 0x4(0x8)
};


// Size 0x18
class NPCBeckonGroupEntry: public None
{
public:
	byte                                                         NPCGroup;                                          // 0x0(0x1)
	TArray<Struct NPCBeckonGestureEntry>                         NPCBeckonGestures;                                 // 0x8(0x10)
};


// Size 0x18
class NPCBeckonGestureEntry: public None
{
public:
	byte                                                         BeckonGesture;                                     // 0x0(0x1)
	Struct StringAssetReference                                  BeckonGestureDataAsset;                            // 0x8(0x10)
};


// Size 0x1
class EventClientQueryCrewBeckonTagsFromCrewShipManifest: public None
{
public:
};


// Size 0x10
class EventServerQueryCrewBeckonTagsFromBeckonService: public None
{
public:
};


// Size 0x20
class EventSyncBeckonTagsToBeckonServiceForMigratedCrew: public None
{
public:
};


// Size 0x20
class EventCrewBeckonTags: public None
{
public:
};


// Size 0x14
class EventRemoveCrewBeckonTag: public None
{
public:
};


// Size 0x14
class EventAddCrewBeckonTag: public None
{
public:
};


// Size 0x14
class EventRemoveCrewFromBeingBeckonedByNPCGroup: public None
{
public:
};


// Size 0x14
class EventAddCrewToBeBeckoned: public None
{
public:
};


// Size 0x18
class AggressiveGhostShipRewardData: public None
{
public:
	TArray<Struct GhostShipRewardData>                           Rewards;                                           // 0x0(0x10)
	float                                                        SpawnRate;                                         // 0x10(0x4)
};


// Size 0x38
class GhostShipRewardData: public None
{
public:
	Class WeightedItemDescSpawnDataAsset*                        Rewards;                                           // 0x0(0x8)
	Struct WeightedProbabilityRange                              NumberOfItemsToSpawn;                              // 0x8(0x20)
	TArray<Struct NumberOfItemsToSpawn>                          SpawnTransforms;                                   // 0x28(0x10)
};


// Size 0x50
class AggressiveGhostShipSplineData: public None
{
public:
	Struct AggressiveGhostShipSplineDataVariables                Variables;                                         // 0x0(0x38)
	Struct AggressiveGhostShipSplineDataOffsets                  Offsets;                                           // 0x38(0x18)
};


// Size 0x18
class AggressiveGhostShipSplineDataOffsets: public None
{
public:
	float                                                        FormationForwardOffsetInMetres;                    // 0x0(0x4)
	float                                                        FormationForwardOffsetVarianceInMetres;            // 0x4(0x4)
	float                                                        FormationForwardOffsetVarianceSpeed;               // 0x8(0x4)
	float                                                        FormationSidewaysOffsetInMetres;                   // 0xc(0x4)
	float                                                        FormationSidewaysOffsetVarianceInMetres;           // 0x10(0x4)
	float                                                        FormationSidewaysOffsetVarianceSpeed;              // 0x14(0x4)
};


// Size 0x38
class AggressiveGhostShipSplineDataVariables: public None
{
public:
	double                                                       StartTime;                                         // 0x0(0x8)
	double                                                       StartTimeOffset;                                   // 0x8(0x8)
	TArray<Float >                                               SplineOffsets;                                     // 0x10(0x10)
	Struct Vector                                                CentrePoint;                                       // 0x20(0xc)
	float                                                        StartAngleOffset;                                  // 0x2c(0x4)
	bool                                                         ReverseDirection;                                  // 0x30(0x1)
};


// Size 0x8
class AggressiveGhostShipState: public None
{
public:
	bool                                                         IsShipVisible;                                     // 0x0(0x1)
	bool                                                         IsShipDead;                                        // 0x1(0x1)
	float                                                        ShipSpeed;                                         // 0x4(0x4)
};


// Size 0x18
class AggressiveGhostShipNameBucket: public None
{
public:
	struct FName                                                 Key;                                               // 0x0(0x8)
	TArray<Struct FText>                                         Names;                                             // 0x8(0x10)
};


// Size 0x8
class AggressiveGhostHealthToVfxLevel: public None
{
public:
	int                                                          NumShotsLeftToKill;                                // 0x0(0x4)
	float                                                        VfxLevel;                                          // 0x4(0x4)
};


// Size 0xa0
class AggressiveGhostShipEncounterWaveDesc: public None
{
public:
	bool                                                         BackfillActive;                                    // 0x0(0x1)
	int                                                          NumGrunts;                                         // 0x4(0x4)
	int                                                          NumGruntsToKill;                                   // 0x8(0x4)
	TArray<Struct AggressiveGhostShipEncounterWaveFormationDesc> Formations;                                        // 0x10(0x10)
	Struct WeightedProbabilityRangeOfRanges                      SpawnDelay;                                        // 0x20(0x30)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenBackfillSpawns;                         // 0x50(0x30)
	TArray<Struct AggressiveGhostShipEncounterShipDesc>          GruntShipDescs;                                    // 0x80(0x10)
	class                                                        WaveMusicZoneActorClass;                           // 0x90(0x8)
	byte                                                         WaveAnnouncementType;                              // 0x98(0x1)
	bool                                                         PreventGoingToNextWaveUntilNotified;               // 0x99(0x1)
};


// Size 0x48
class AggressiveGhostShipEncounterShipDesc: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	Class AggressiveGhostShipDifficultyDataAsset*                Difficulty;                                        // 0x8(0x8)
	Class AggressiveGhostShipShotSelectionDataAsset*             ShotSelection;                                     // 0x10(0x8)
	class                                                        Ship;                                              // 0x18(0x8)
	Class AggressiveGhostShipVisualsDataAsset*                   Visuals;                                           // 0x20(0x8)
	TArray<Struct AggressiveGhostShipLocationEntryDesc>          Locations;                                         // 0x28(0x10)
	TArray<Struct Locations>                                     StatsToFireOnDeath;                                // 0x38(0x10)
};


// Size 0x10
class AggressiveGhostShipLocationEntryDesc: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	Class AggressiveGhostShipLocationDataAsset*                  Location;                                          // 0x8(0x8)
};


// Size 0xc8
class AggressiveGhostShipEncounterWaveFormationDesc: public None
{
public:
	int                                                          NumShipsInFormation;                               // 0x0(0x4)
	Struct AggressiveGhostShipEncounterShipDesc                  FormationShipDesc;                                 // 0x8(0x48)
	Struct AggressiveGhostShipEncounterShipDesc                  FormationLeaderShipDesc;                           // 0x50(0x48)
	TArray<class FormationGruntVisuals*>                         FormationGruntVisuals;                             // 0x98(0x10)
	bool                                                         FormationLeaderIsCaptain;                          // 0xa8(0x1)
	bool                                                         IsBurningBlade;                                    // 0xa9(0x1)
	bool                                                         IsHellishMermaid;                                  // 0xaa(0x1)
	bool                                                         IsReaper;                                          // 0xab(0x1)
	bool                                                         PreventSpawningFormationGruntsUntilNotified;       // 0xac(0x1)
	bool                                                         DespawnShipsInFormationWhenLeaderIsDestroyed;      // 0xad(0x1)
	byte                                                         SpawnDirection;                                    // 0xae(0x1)
	bool                                                         SpawnShipOnTopOfPlayer;                            // 0xaf(0x1)
	float                                                        SpawnShipOnTopOfPlayerSpawnAheadDistanceInMetres;  // 0xb0(0x4)
	Class AggressiveGhostShipFixedSplinesDataAsset*              FixedSpline;                                       // 0xb8(0x8)
	int                                                          DoNotDamageFormationLeaderShipBelowThisNumShots;   // 0xc0(0x4)
	bool                                                         ImmuneToLightning;                                 // 0xc4(0x1)
	bool                                                         FlipSideOffsetIfReversed;                          // 0xc5(0x1)
};


// Size 0x18
class AggressiveGhostShipEncounterFormationDescGroup: public None
{
public:
	int                                                          NumShipsInFormation;                               // 0x0(0x4)
	TArray<Struct AggressiveGhostShipEncounterFormationDesc>     FormationDescs;                                    // 0x8(0x10)
};


// Size 0x10
class AggressiveGhostShipEncounterFormationDesc: public None
{
public:
	TArray<Struct AggressiveGhostShipEncounterFormationLocationDesc> Locations;                                         // 0x0(0x10)
};


// Size 0x70
class AggressiveGhostShipEncounterFormationLocationDesc: public None
{
public:
	float                                                        ForwardOffsetInMetres;                             // 0x0(0x4)
	Struct WeightedProbabilityRangeOfRanges                      ForwardOffsetVarianceInMetres;                     // 0x8(0x30)
	float                                                        SidewaysOffsetInMetres;                            // 0x38(0x4)
	Struct WeightedProbabilityRangeOfRanges                      SidewaysOffsetVarianceInMetres;                    // 0x40(0x30)
};


// Size 0x18
class AggressiveGhostShipFixedSpline: public None
{
public:
	float                                                        StartAngleOffset;                                  // 0x0(0x4)
	TArray<Float >                                               Offsets;                                           // 0x8(0x10)
};


// Size 0x18
class AggressiveGhostShipMineFormationOptions: public None
{
public:
	int                                                          NumMinesInFormation;                               // 0x0(0x4)
	TArray<Struct AggressiveGhostShipMineFormation>              Formations;                                        // 0x8(0x10)
};


// Size 0x10
class AggressiveGhostShipMineFormation: public None
{
public:
	TArray<Struct NumMinesInFormation>                           OffsetsInMetres;                                   // 0x0(0x10)
};


// Size 0xc
class AggressiveGhostShipsEncounterHeightPerIslandOffsets: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	float                                                        EventSignalHeightOffset;                           // 0x8(0x4)
};


// Size 0x10
class AggressiveGhostShipsEncounterServiceDesc: public None
{
public:
};


// Size 0x30
class AggressiveGhostShipShotSelection: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	class                                                        ProjectileClass;                                   // 0x8(0x8)
	TArray<Struct AggressiveGhostShipDifficultyShipSizeTargetSelection> ShipSizeTargetSelection;                           // 0x10(0x10)
	TArray<Struct AggressiveGhostShipDifficultyTargetSelection>  LongRangeTargetSelection;                          // 0x20(0x10)
};


// Size 0x8
class AggressiveGhostShipDifficultyTargetSelection: public None
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	byte                                                         Target;                                            // 0x4(0x1)
};


// Size 0x18
class AggressiveGhostShipDifficultyShipSizeTargetSelection: public None
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	TArray<Struct ShipSize>                                      TargetSelection;                                   // 0x8(0x10)
};


// Size 0x30
class AggressiveGhostShipVisualsExtraMesh: public None
{
public:
	Struct StringAssetReference                                  Mesh;                                              // 0x0(0x10)
	Struct Vector                                                Offset;                                            // 0x10(0xc)
	TArray<Struct AggressiveGhostShipVisualsMaterialOverride>    MaterialOverrides;                                 // 0x20(0x10)
};


// Size 0x28
class AggressiveGhostShipVisualsMaterialOverride: public None
{
public:
	int                                                          MaterialIndexToReplace;                            // 0x0(0x4)
	Struct StringAssetReference                                  OriginalMaterial;                                  // 0x8(0x10)
	Struct StringAssetReference                                  ReplacementMaterial;                               // 0x18(0x10)
};


// Size 0x20
class AggressiveGhostShipSpawnedRewardsTelemetryEvent: public None
{
public:
	TArray<Str None>                                             RewardTypes;                                       // 0x0(0x10)
	Struct Guid                                                  ShipId;                                            // 0x10(0x10)
};


// Size 0x10
class AggressiveGhostShipPortalJumpedTelemetryEvent: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
};


// Size 0x10
class AggressiveGhostShipAnchorDropTelemetryEvent: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
};


// Size 0x10
class AggressiveGhostShipDroppedMineTelemetryEvent: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
};


// Size 0x20
class AggressiveGhostShipProjectileCollidedTelemetryEvent: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
	Struct FString                                               ProjectileType;                                    // 0x10(0x10)
};


// Size 0x38
class AggressiveGhostShipProjectileShotTelemetryEvent: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
	Struct Guid                                                  ProjectileAttackId;                                // 0x10(0x10)
	Struct FString                                               ProjectileType;                                    // 0x20(0x10)
	byte                                                         Target;                                            // 0x30(0x1)
};


// Size 0x28
class AggressiveGhostShipDespawnTelemetryEvent: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
	byte                                                         ShipType;                                          // 0x10(0x1)
	Struct Guid                                                  EncounterId;                                       // 0x14(0x10)
	byte                                                         Reason;                                            // 0x24(0x1)
};


// Size 0x28
class AggressiveGhostShipSpawnTelemetryEvent: public None
{
public:
	Struct Guid                                                  ShipId;                                            // 0x0(0x10)
	byte                                                         ShipType;                                          // 0x10(0x1)
	Struct Guid                                                  EncounterId;                                       // 0x14(0x10)
	int                                                          WaveIndex;                                         // 0x24(0x4)
};


// Size 0x14
class AggressiveGhostShipEncounterEndTelemetryEvent: public None
{
public:
	Struct Guid                                                  EncounterId;                                       // 0x0(0x10)
	bool                                                         WasSuccessfullyCompleted;                          // 0x10(0x1)
};


// Size 0x10
class AggressiveGhostShipEncounterStartTelemetryEvent: public None
{
public:
	Struct Guid                                                  EncounterId;                                       // 0x0(0x10)
};


// Size 0x10
class AshenLordEncounterServiceDesc: public None
{
public:
};


// Size 0x68
class FlamethrowerCollisionsParams: public None
{
public:
	float                                                        CollisionCapsuleRadius;                            // 0x0(0x4)
	float                                                        FlamePointTravelDistance;                          // 0x4(0x4)
	float                                                        InheritOwnerForwardVelocityScalar;                 // 0x8(0x4)
	float                                                        FlamePointTravelTime;                              // 0xc(0x4)
	float                                                        FlamePointFireRate;                                // 0x10(0x4)
	float                                                        MaxDistanceSquaredBetweenPointsBeforeDiscontinuity; // 0x14(0x4)
	int                                                          MaxNumOfHitsProccessedPerFlameCollision;           // 0x18(0x4)
	Struct Vector                                                FlameOriginOffset;                                 // 0x1c(0xc)
	Struct Rotator                                               FlameOrientationOffset;                            // 0x28(0xc)
	Class CurveFloat*                                            FlamePointsTravelCurve;                            // 0x38(0x8)
	byte                                                         CollisionChannel;                                  // 0x40(0x1)
	Struct CollisionResponseContainer                            CollisionResponse;                                 // 0x41(0x20)
};


// Size 0x58
class ActorInsideFlameInformation: public None
{
public:
	Class Actor*                                                 HitActor;                                          // 0x0(0x8)
	Class Actor*                                                 ActorWithFirePropagationInterface;                 // 0x28(0x8)
};


// Size 0x38
class AshenWindsSkullMissfireParams: public None
{
public:
	float                                                        ChargeThreshold;                                   // 0x0(0x4)
	Struct FloatRange                                            SecondsBetweenMissfires;                           // 0x4(0x10)
	Struct FloatRange                                            MissfireDurationInSeconds;                         // 0x14(0x10)
	Class WwiseEvent*                                            MissfireStartedSFX;                                // 0x28(0x8)
	Class WwiseEvent*                                            MissfireStoppedSFX;                                // 0x30(0x8)
};


// Size 0x20
class AshenWindsSkullRewardLevel: public None
{
public:
	float                                                        MaximumChargePercentage;                           // 0x0(0x4)
	Struct RewardId                                              DefaultRewardId;                                   // 0x4(0x8)
	TArray<Struct DefaultRewardId>                               CompanyRewardIds;                                  // 0x10(0x10)
};


// Size 0x8
class AshenLordNewHealthStageTelemetryEvent: public None
{
public:
};


// Size 0x14
class AshenWindSkullUseItemTelemetryEvent: public None
{
public:
	Struct Guid                                                  BootyId;                                           // 0x0(0x10)
	float                                                        Charge;                                            // 0x10(0x4)
};


// Size 0x28
class ChainLink: public None
{
public:
	Class Actor*                                                 Source;                                            // 0x0(0x8)
	Class Actor*                                                 Target;                                            // 0x8(0x8)
	Struct Vector_NetQuantize                                    LastSourceLocation;                                // 0x10(0xc)
	Struct Vector_NetQuantize                                    LastTargetLocation;                                // 0x1c(0xc)
};


// Size 0x18
class ChainData: public None
{
public:
	TArray<Struct ChainLightningParameters>                      Chain;                                             // 0x0(0x10)
	float                                                        LifeTime;                                          // 0x10(0x4)
};


// Size 0x20
class ChainLightningParameters: public None
{
public:
	float                                                        ChainLightningOverlapRadius;                       // 0x0(0x4)
	float                                                        InitialSelectionRadiusSquared;                     // 0x4(0x4)
	int                                                          InitialNumberOfNodesSelected;                      // 0x8(0x4)
	float                                                        MaxDistanceBetweenChainsSquared;                   // 0xc(0x4)
	int                                                          MaxNumberOfLinks;                                  // 0x10(0x4)
	bool                                                         OverrideMaxFramesBeforeReplication;                // 0x14(0x1)
	int                                                          MaxFramesBeforeReplicationOverride;                // 0x18(0x4)
	float                                                        ChainVisualActorLifetime;                          // 0x1c(0x4)
};


// Size 0x8
class PotentialChainNode: public None
{
public:
	Class Actor*                                                 NodeActor;                                         // 0x0(0x8)
};


// Size 0x18
class MeleeAIAbilityAngleChecker: public None
{
public:
};


// Size 0x18
class EnchantedCompassTarget: public None
{
public:
	int                                                          TargetID;                                          // 0x0(0x4)
	Struct Vector                                                TargetLocation;                                    // 0x4(0xc)
};


// Size 0x1
class HauntedFortPhaseChanged: public None
{
public:
};


// Size 0x1
class HauntedFortTargetDestroyed: public None
{
public:
};


// Size 0x10
class NavigationOptions: public None
{
public:
	int                                                          UpKeyID;                                           // 0x0(0x4)
	int                                                          DownKeyID;                                         // 0x4(0x4)
	int                                                          LeftKeyID;                                         // 0x8(0x4)
	int                                                          RightKeyID;                                        // 0xc(0x4)
};


// Size 0x10
class SequenceResponseContainer: public None
{
public:
	int                                                          SequenceIndexToTrigger;                            // 0x0(0x4)
	Class Actor*                                                 ResponseActor;                                     // 0x8(0x8)
};


// Size 0x1c
class PlayDockableKeyedInstrumentActionStateParams: public None
{
public:
	float                                                        CameraDockTime;                                    // 0x18(0x4)
};


// Size 0x10
class ShipAnnouncementCache: public None
{
public:
};


// Size 0x20
class ShipAnnouncementCacheEntry: public None
{
public:
};


// Size 0x70
class ShipAnnouncementShipDescription: public None
{
public:
	Struct FText                                                 ShipName;                                          // 0x0(0x38)
	Struct FText                                                 ShipTitle;                                         // 0x38(0x38)
};


// Size 0x70
class ShipAnnouncementCinematicEvent: public None
{
public:
	Struct FText                                                 ShipName;                                          // 0x0(0x38)
	Struct FText                                                 ShipTitle;                                         // 0x38(0x38)
};


// Size 0x30
class StartUpdatingShipAnnouncementVisibility: public None
{
public:
	Class Character*                                             Character;                                         // 0x0(0x8)
};


// Size 0x28
class SendShipStatsServerRpc: public None
{
public:
	Class Controller*                                            Controller;                                        // 0x10(0x8)
	TArray<Struct Controller>                                    Stats;                                             // 0x18(0x10)
};


// Size 0x50
class CrewEventLogEntry: public None
{
public:
};


// Size 0x40
class EventLogParams: public None
{
public:
};


// Size 0x40
class EventLogDefinition: public None
{
public:
	Struct FText                                                 LogEntryText;                                      // 0x0(0x38)
	byte                                                         Type;                                              // 0x38(0x1)
};


// Size 0x24
class CaptainsLogCrewSessionStatsEntry: public None
{
public:
};


// Size 0x10
class TransientActorEntry: public None
{
public:
	Class Actor*                                                 Actor;                                             // 0x0(0x8)
};


// Size 0x10
class OpenForListEntry: public None
{
public:
	Class Pawn*                                                  Pawn;                                              // 0x0(0x8)
	float                                                        TimeUntilDoorFullyOpen;                            // 0x8(0x4)
};


// Size 0x38
class LeaveGhostShipActionStateConstructionInfo: public None
{
public:
	int                                                          GhostShipLevelId;                                  // 0x30(0x4)
};


// Size 0x24
class LeaveGhostShipActionStateParams: public None
{
public:
	float                                                        FadeDelay;                                         // 0x0(0x4)
	float                                                        FadeDuration;                                      // 0x4(0x4)
	float                                                        FadeEventTimeout;                                  // 0x8(0x4)
	float                                                        FadeServerTimeout;                                 // 0xc(0x4)
	Struct LinearColor                                           FadeColour;                                        // 0x10(0x10)
	bool                                                         FadeAudio;                                         // 0x20(0x1)
};


// Size 0x230
class GhostShipCoordinator: public None
{
public:
	TArray<Struct GhostPawnEntry>                                GhostPawns;                                        // 0x0(0x10)
	Class Object*                                                Parent;                                            // 0x10(0x8)
	Class GhostShipPlayerSpawnLocation*                          SpawnLocation;                                     // 0x20(0x8)
	Class GhostShipDoor*                                         GhostShipDoor;                                     // 0x28(0x8)
};


// Size 0x60
class GhostPawnEntry: public None
{
public:
	float                                                        TimeRemaining;                                     // 0x0(0x4)
	Class Pawn*                                                  Pawn;                                              // 0x8(0x8)
	bool                                                         RespawnCompleted;                                  // 0x10(0x1)
	bool                                                         IsDoorOpen;                                        // 0x11(0x1)
	Struct ObjectMessagingHandle                                 FinishedSpawningHandle;                            // 0x18(0x48)
};


// Size 0x4
class EventGhostShipLevelLoaded: public None
{
public:
	int                                                          LevelId;                                           // 0x0(0x4)
};


// Size 0x38
class EventSpawnedAsGhostNotification: public None
{
public:
	Struct FText                                                 NotificationText;                                  // 0x0(0x38)
};


// Size 0x8
class EventGhostShipDoorDestroyed: public None
{
public:
	Class GhostShipDoor*                                         GhostShipDoor;                                     // 0x0(0x8)
};


// Size 0x8
class EventGhostShipDoorCreated: public None
{
public:
	Class GhostShipDoor*                                         GhostShipDoor;                                     // 0x0(0x8)
};


// Size 0x28
class StrainDamage: public None
{
public:
	TArray<Struct DamageParamWeights>                            DamageParams;                                      // 0x0(0x10)
	class                                                        DamagerType;                                       // 0x10(0x8)
};


// Size 0xa0
class DamageParamWeights: public None
{
public:
	float                                                        StrainUpperBound;                                  // 0x0(0x4)
	float                                                        ArenaStrainUpperBound;                             // 0x4(0x4)
	Struct WeightedProbabilityRangeOfRanges                      MinMaxRanges;                                      // 0x8(0x30)
	Struct WeightedProbabilityRangeOfRanges                      AnticipationRanges;                                // 0x38(0x30)
	Struct WeightedProbabilityRangeOfRanges                      DamageRanges;                                      // 0x68(0x30)
	float                                                        BottomDeckWeight;                                  // 0x98(0x4)
	float                                                        ExistingHoleWeight;                                // 0x9c(0x4)
};


// Size 0x78
class LaunchableProjectileCreator: public None
{
public:
	Class PrimitiveComponent*                                    AimBase;                                           // 0x50(0x8)
	TArray<class IgnoredActors*>                                 IgnoredActors;                                     // 0x58(0x10)
	TArray<class IgnoredComponents*>                             IgnoredComponents;                                 // 0x68(0x10)
};


// Size 0xe0
class LaunchableProjectileData: public None
{
public:
};


// Size 0x110
class LaunchableActiveProjectileData: public None
{
public:
	Struct LaunchableProjectileData                              Projectile;                                        // 0x0(0xe0)
};


// Size 0x1
class FlashbangEffectEvent: public None
{
public:
	bool                                                         IsFlashbanged;                                     // 0x0(0x1)
};


// Size 0x70
class ClientProjectileImpactHitRegInfoTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               ProjectileId;                                      // 0x10(0x10)
	Struct FString                                               DamagerTypeId;                                     // 0x20(0x10)
	Struct Vector                                                HitLocation;                                       // 0x30(0xc)
	Struct FString                                               InstigatorObjectId;                                // 0x40(0x10)
	Struct FString                                               InstigatorObjectType;                              // 0x50(0x10)
	Struct FString                                               InstigatorActorName;                               // 0x60(0x10)
};


// Size 0x70
class ServerProjectileImpactHitRegInfoTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               ProjectileId;                                      // 0x10(0x10)
	Struct FString                                               DamagerTypeId;                                     // 0x20(0x10)
	Struct Vector                                                HitLocation;                                       // 0x30(0xc)
	Struct FString                                               InstigatorObjectId;                                // 0x40(0x10)
	Struct FString                                               InstigatorObjectType;                              // 0x50(0x10)
	Struct FString                                               InstigatorActorName;                               // 0x60(0x10)
};


// Size 0x50
class ProjectileImpactTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               ProjectileId;                                      // 0x10(0x10)
	Struct FString                                               DamagerTypeId;                                     // 0x20(0x10)
	Struct FString                                               InstigatorObjectId;                                // 0x30(0x10)
	Struct FString                                               InstigatorObjectType;                              // 0x40(0x10)
};


// Size 0x60
class ClientProjectileHitRegInfoTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               ProjectileId;                                      // 0x10(0x10)
	Struct FString                                               HitObjectId;                                       // 0x20(0x10)
	Struct FString                                               HitObjectType;                                     // 0x30(0x10)
	Struct FString                                               HitActorName;                                      // 0x40(0x10)
	Struct Vector                                                HitLocation;                                       // 0x50(0xc)
};


// Size 0x70
class ServerProjectileHitRegInfoTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               ProjectileId;                                      // 0x10(0x10)
	Struct FString                                               HitObjectId;                                       // 0x20(0x10)
	Struct FString                                               HitObjectType;                                     // 0x30(0x10)
	Struct FString                                               HitActorName;                                      // 0x40(0x10)
	Struct FString                                               InstigatorName;                                    // 0x50(0x10)
	Struct Vector                                                HitLocation;                                       // 0x60(0xc)
};


// Size 0x40
class ProjectileHitTelemetryEvent: public None
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	Struct FString                                               ProjectileId;                                      // 0x10(0x10)
	Struct FString                                               HitObjectId;                                       // 0x20(0x10)
	Struct FString                                               HitObjectType;                                     // 0x30(0x10)
};


// Size 0x1
class OnLiquidProjectileImpactEvent: public None
{
public:
	bool                                                         ImpactFilledShip;                                  // 0x0(0x1)
};


// Size 0x8
class LiquidProjectileImpactEvent: public None
{
public:
	class                                                        ProjectileType;                                    // 0x0(0x8)
};


// Size 0x28
class SeatAnimationDefinition: public None
{
public:
	class                                                        AnimationID;                                       // 0x0(0x8)
	Struct StringAssetReference                                  Into;                                              // 0x8(0x10)
	Struct StringAssetReference                                  Loop;                                              // 0x18(0x10)
};


// Size 0xa0
class SittingActionStateParams: public None
{
public:
	byte                                                         ControllableObjectType;                            // 0x18(0x1)
	class                                                        SeatAnimationId;                                   // 0x20(0x8)
	Struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x28(0x1c)
	bool                                                         ShouldHideFirstPersonMesh;                         // 0x44(0x1)
	Class WwiseEvent*                                            OnSitSfx;                                          // 0x48(0x8)
	Class WwiseEvent*                                            OnStandSfx;                                        // 0x50(0x8)
	Class WwiseObjectPoolWrapper*                                SeatPool;                                          // 0x58(0x8)
	bool                                                         AllowInteractWithOtherObjectsWhileSitting;         // 0x60(0x1)
	TArray<Class AllowInteractWithOtherObjectsWhileSitting>      AllowedInteractableTypes;                          // 0x68(0x10)
	TArray<Class AllowedInteractableTypes>                       AllowedInteractionNotificationInputIds;            // 0x78(0x10)
	byte                                                         DockingMode;                                       // 0x88(0x1)
	bool                                                         ThirdPersonCameraEnabled;                          // 0x89(0x1)
	Class AthenaSpringArmComponentParams*                        ThirdPersonCameraParams;                           // 0x90(0x8)
	bool                                                         CameraRollEnabled;                                 // 0x98(0x1)
};


// Size 0x50
class SleepingActionStateParams: public None
{
public:
	byte                                                         ControllableObjectType;                            // 0x18(0x1)
	class                                                        BedAnimationId;                                    // 0x20(0x8)
	float                                                        CameraFadeDuration;                                // 0x28(0x4)
	float                                                        TooltipDelay;                                      // 0x2c(0x4)
	float                                                        HealthRegenDelay;                                  // 0x30(0x4)
	float                                                        HealthRegenTickInterval;                           // 0x34(0x4)
	float                                                        HealthRegenTickAmount;                             // 0x38(0x4)
	bool                                                         ShouldHideFirstPersonMesh;                         // 0x3c(0x1)
	byte                                                         DockingMode;                                       // 0x3d(0x1)
	float                                                        SleepingSfxDelay;                                  // 0x40(0x4)
	float                                                        SleepingAudioStateDelay;                           // 0x44(0x4)
	bool                                                         NeverFartWhileSleeping;                            // 0x48(0x1)
	float                                                        UnderwaterDepthThreshold;                          // 0x4c(0x4)
};


// Size 0xe8
class SittingActionStateConstructionInfo: public None
{
public:
	Struct SittingActionStateParams                              SittingActionStateParams;                          // 0x48(0xa0)
};


// Size 0x1
class EventLocalPlayerEnteredSittingThirdPersonCameraState: public None
{
public:
};


// Size 0x1
class EventLocalPlayerExittedSittingState: public None
{
public:
};


// Size 0x8
class EventPlayerEnteredSittingState: public None
{
public:
	class                                                        SeatAnimationId;                                   // 0x0(0x8)
};


// Size 0x1
class EventLocalPlayerEnteredSittingState: public None
{
public:
	bool                                                         SeatSupportsThirdPersonCamera;                     // 0x0(0x1)
};


// Size 0x40
class SittingActionStateSerialisableData: public None
{
public:
};


// Size 0x40
class SittingThirdPersonCameraActionStateConstructionInfo: public None
{
public:
	Class AthenaSpringArmComponentParams*                        SpringArmParams;                                   // 0x30(0x8)
	float                                                        VerticalOffsetFactorWhenZoomed;                    // 0x38(0x4)
};


// Size 0x98
class SleepingActionStateConstructionInfo: public None
{
public:
	Struct SleepingActionStateParams                             SleepingActionStateParams;                         // 0x48(0x50)
};


// Size 0x1
class EventPlayerExittedSleepingState: public None
{
public:
	bool                                                         NoFarting;                                         // 0x0(0x1)
};


// Size 0xc
class EventPlayerEnteredSleepingState: public None
{
public:
	float                                                        AudioEventDelay;                                   // 0x0(0x4)
	float                                                        AudioStateDelay;                                   // 0x4(0x4)
	bool                                                         NoFarting;                                         // 0x8(0x1)
};


// Size 0x40
class SleepingActionStateSerialisableData: public None
{
public:
};


// Size 0x10
class AthenaAnimationSittingAnimData: public None
{
public:
	Class AnimSequence*                                          Into;                                              // 0x0(0x8)
	Class AnimSequence*                                          Loop;                                              // 0x8(0x8)
};


// Size 0x70
class AthenaAnimationSitting: public None
{
public:
	Struct AthenaAnimationSittingAnimData                        SittingAnimData;                                   // 0x0(0x10)
	bool                                                         AnimationLoaded;                                   // 0x10(0x1)
	Class AthenaAnimationSittingDataAsset*                       SittingDataAsset;                                  // 0x18(0x8)
};


// Size 0x1
class EventActorStoppedUsingSeat: public None
{
public:
};


// Size 0x1
class EventActorStartedUsingSeat: public None
{
public:
};


// Size 0x158
class AthenaAnimationCapstan: public None
{
public:
	float                                                        IntentInterpSpeed;                                 // 0x0(0x4)
	Struct Vector2D                                              CapstanAngularVelocityRange;                       // 0x4(0x8)
	Struct Vector2D                                              AnimationRemapSpeedRange;                          // 0xc(0x8)
	float                                                        AngularVelocityInterpSpeed;                        // 0x14(0x4)
	Struct SocketId                                              LeftHandMaleSocket;                                // 0x18(0x20)
	Struct SocketId                                              RightHandMaleSocket;                               // 0x38(0x20)
	Struct SocketId                                              LeftHandFemaleSocket;                              // 0x58(0x20)
	Struct SocketId                                              RightHandFemaleSocket;                             // 0x78(0x20)
	float                                                        TranslationStrength;                               // 0x98(0x4)
	float                                                        RotationStrength;                                  // 0x9c(0x4)
	float                                                        BlendInSpeed;                                      // 0xa0(0x4)
	float                                                        BlendOutSpeed;                                     // 0xa4(0x4)
	bool                                                         AnimationOverride;                                 // 0xa8(0x1)
	byte                                                         CapstanState;                                      // 0xa9(0x1)
	float                                                        AngularVelocityWanted;                             // 0xac(0x4)
	Class Actor*                                                 ControlledObject;                                  // 0xb0(0x8)
};


// Size 0x30
class AthenaAnimationServerAnimAISpawnData: public None
{
public:
	float                                                        MaxSpawnAnimDurations;                             // 0x20(0x4)
};


// Size 0x78
class AthenaAnimationJumpingAnimData: public None
{
public:
	Struct AthenaAnimationJumpingFirstPersonAnimData             Jumping1stPerson;                                  // 0x0(0x28)
	Struct AthenaAnimationJumpingThirdPersonAnimData             Jumping3rdPerson;                                  // 0x28(0x50)
};


// Size 0x50
class AthenaAnimationJumpingThirdPersonAnimData: public None
{
public:
	TArray<class JumpStart*>                                     JumpStart;                                         // 0x0(0x10)
	TArray<class JumpCycle*>                                     JumpCycle;                                         // 0x10(0x10)
	TArray<class PreImpact*>                                     PreImpact;                                         // 0x20(0x10)
	TArray<class LandLight*>                                     LandLight;                                         // 0x30(0x10)
	TArray<class LandHeavy*>                                     LandHeavy;                                         // 0x40(0x10)
};


// Size 0x28
class AthenaAnimationJumpingFirstPersonAnimData: public None
{
public:
	Class AnimSequence*                                          JumpStart;                                         // 0x0(0x8)
	Class BlendSpace*                                            JumpCycle;                                         // 0x8(0x8)
	Class AnimSequence*                                          PreImpact;                                         // 0x10(0x8)
	Class BlendSpace*                                            LandLight;                                         // 0x18(0x8)
	Class BlendSpace*                                            LandHeavy;                                         // 0x20(0x8)
};


// Size 0x70
class AthenaAnimationObjectFacial: public None
{
public:
	TArray<class PrimaryContinuous*>                             PrimaryContinuous;                                 // 0x0(0x10)
	TArray<class SecondaryContinuous*>                           SecondaryContinuous;                               // 0x10(0x10)
	TArray<class PrimaryOneShot*>                                PrimaryOneShot;                                    // 0x20(0x10)
	TArray<class SecondaryOneShot*>                              SecondaryOneShot;                                  // 0x30(0x10)
	TArray<class MeleeBlocking*>                                 MeleeBlocking;                                     // 0x40(0x10)
	TArray<class MeleeAttack*>                                   MeleeAttack;                                       // 0x50(0x10)
	TArray<class MeleeBlockReact*>                               MeleeBlockReact;                                   // 0x60(0x10)
};


// Size 0x60
class AthenaAnimationAsyncLoadedObjectIdleAnimations: public None
{
public:
};


// Size 0x18
class AthenaAnimationObjectIdleAnimations: public None
{
public:
	Class AnimSequence*                                          Idle1;                                             // 0x0(0x8)
	Class AnimSequence*                                          Idle2;                                             // 0x8(0x8)
	Class AnimSequence*                                          Idle3;                                             // 0x10(0x8)
};


// Size 0x20
class AthenaAnimationObjectJumpingAnimationsPitchOverride: public None
{
public:
	Class BlendSpace1D*                                          Start;                                             // 0x0(0x8)
	Class BlendSpace1D*                                          Cycle;                                             // 0x8(0x8)
	Class BlendSpace1D*                                          PreImpact;                                         // 0x10(0x8)
	Class BlendSpace1D*                                          LandLight;                                         // 0x18(0x8)
};


// Size 0x40
class AthenaAnimationObjectEquipAnimations: public None
{
public:
	Class AnimSequence*                                          Equip;                                             // 0x0(0x8)
	Class BlendSpace*                                            EquipAsBlendSpace;                                 // 0x8(0x8)
	Class BlendSpace*                                            EquipSwimming;                                     // 0x10(0x8)
	Class AnimSequence*                                          UnEquip;                                           // 0x18(0x8)
	Class BlendSpace*                                            UnEquipAsBlendSpace;                               // 0x20(0x8)
	Class AnimSequence*                                          Pickup;                                            // 0x28(0x8)
	Class AnimSequence*                                          Drop;                                              // 0x30(0x8)
	bool                                                         UseEquipBlendSpace;                                // 0x38(0x1)
	bool                                                         UseUnequipBlendSpace;                              // 0x39(0x1)
};


// Size 0x100
class AthenaAnimationAsyncLoadedLocomotionAnimations: public None
{
public:
};


// Size 0x40
class AthenaAnimationObjectLocomotionAnimations: public None
{
public:
	Class BlendSpace*                                            Locomotion1;                                       // 0x0(0x8)
	Class BlendSpace*                                            Locomotion2;                                       // 0x8(0x8)
	Class BlendSpace*                                            Locomotion3;                                       // 0x10(0x8)
	Class BlendSpace*                                            Locomotion4;                                       // 0x18(0x8)
	Class AnimSequence*                                          LocomotionTurningLeft;                             // 0x20(0x8)
	Class AnimSequence*                                          LocomotionTurningRight;                            // 0x28(0x8)
	Class AnimSequence*                                          LocomotionOutOf;                                   // 0x30(0x8)
	Class BlendSpace*                                            LocomotionSwimming;                                // 0x38(0x8)
};


// Size 0x80
class AthenaAnimationAsyncLoadedObjectJumpingAnimations: public None
{
public:
};


// Size 0x20
class AthenaAnimationObjectJumpingAnimations: public None
{
public:
	Class BlendSpace*                                            Start;                                             // 0x0(0x8)
	Class BlendSpace*                                            Cycle;                                             // 0x8(0x8)
	Class BlendSpace*                                            PreImpact;                                         // 0x10(0x8)
	Class BlendSpace*                                            LandLight;                                         // 0x18(0x8)
};


// Size 0xe0
class AthenaAnimationPersistentItemAnimations: public None
{
public:
	Struct AthenaAnimationObjectEquipAnimations                  EquipAnimations;                                   // 0x0(0x40)
	Struct AthenaAnimationFallbackLocomotionAnimations           FallbackLocomotionAnimations;                      // 0x40(0x20)
	Struct AthenaAnimationJumpingAnimData                        FallbackJumpingAnimations;                         // 0x60(0x78)
	Class AnimSequence*                                          FallbackIdleAnimation;                             // 0xd8(0x8)
};


// Size 0x20
class AthenaAnimationFallbackLocomotionAnimations: public None
{
public:
	Class BlendSpace*                                            FallbackLocomotionMovement;                        // 0x0(0x8)
	Class AnimSequence*                                          FallbackTurningLeft;                               // 0x8(0x8)
	Class AnimSequence*                                          FallbackTurningRight;                              // 0x10(0x8)
	Class BlendSpace*                                            FallbackLocomotionSwimming;                        // 0x18(0x8)
};


// Size 0x240
class AthenaAnimationAsyncLoadedFishingAnimations: public None
{
public:
};


// Size 0x90
class AthenaAnimationFishingAnimations: public None
{
public:
	Class AnimSequence*                                          CastIntoHoldBack;                                  // 0x0(0x8)
	Class BlendSpace*                                            CastHoldBackLoop;                                  // 0x8(0x8)
	Class AnimSequence*                                          CastForwards;                                      // 0x10(0x8)
	Class AnimSequence*                                          CastHoldLoop;                                      // 0x18(0x8)
	Class AnimSequence*                                          CastToFishing;                                     // 0x20(0x8)
	Class AnimSequence*                                          CastFail;                                          // 0x28(0x8)
	Class BlendSpace*                                            Fishing;                                           // 0x30(0x8)
	Class BlendSpace1D*                                          FishingAdditive;                                   // 0x38(0x8)
	Class BlendSpace1D*                                          IntoFighting;                                      // 0x40(0x8)
	Class BlendSpace*                                            FightingCentral;                                   // 0x48(0x8)
	Class BlendSpace1D*                                          FightingAdditive;                                  // 0x50(0x8)
	Class BlendSpace1D*                                          Linesnap;                                          // 0x58(0x8)
	Class AnimSequence*                                          SuccessReelIn;                                     // 0x60(0x8)
	Class AnimSequence*                                          ComedyItemSuccessReelIn;                           // 0x68(0x8)
	Class AnimSequence*                                          ShakingAdditive;                                   // 0x70(0x8)
	Class AnimSequence*                                          LineSnapShakingAdditive;                           // 0x78(0x8)
	Class AnimSequence*                                          FishingToIdle;                                     // 0x80(0x8)
	Class AnimSequence*                                          FishingToUnequip;                                  // 0x88(0x8)
};


// Size 0x18
class FallbackSittingDataAsset: public None
{
public:
	Class AthenaAnimationSittingDataAsset*                       SittingAnimCorrectionDataAsset;                    // 0x0(0x8)
	float                                                        NormalizedWheelAngle;                              // 0x8(0x4)
	float                                                        MinSliderRange;                                    // 0xc(0x4)
	float                                                        MaxSliderRange;                                    // 0x10(0x4)
};


// Size 0x18
class NamedFirstPersonAnimatic: public None
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	Struct StringAssetReference                                  Anim;                                              // 0x8(0x10)
};


// Size 0x88
class AthenaAnimationEmoteAnimations: public None
{
public:
	struct FName                                                 EmoteName;                                         // 0x0(0x8)
	byte                                                         EmoteSequenceType;                                 // 0x8(0x1)
	TArray<Assetclass ContinuousIn>                              ContinuousCycle;                                   // 0x50(0x10)
	class                                                        UseWithObject;                                     // 0x80(0x8)
};


// Size 0x20
class AthenaAnimationItemListingMappingType: public None
{
public:
	TArray<Struct AthenaAnimationJumping>                        FirstPersonListing;                                // 0x0(0x10)
	TArray<Struct AthenaAnimationItemListingMappings>            ThirdPersonListing;                                // 0x10(0x10)
};


// Size 0x10
class AthenaAnimationItemListingMappings: public None
{
public:
	class                                                        AnimDataBodyTypeID;                                // 0x0(0x8)
	Class AthenaAnimationItemListingAsset*                       ItemListing;                                       // 0x8(0x8)
};


// Size 0xd0
class AthenaAnimationJumping: public None
{
public:
	byte                                                         JumpingState;                                      // 0x0(0x1)
	float                                                        PreImpactTime;                                     // 0x4(0x4)
	int                                                          JumpSequence;                                      // 0x8(0x4)
	int                                                          LandingSequence;                                   // 0xc(0x4)
	bool                                                         FiredFromActor;                                    // 0x10(0x1)
	bool                                                         Jumping;                                           // 0x10(0x1)
};


// Size 0x2b0
class AthenaAnimationLadder: public None
{
public:
	float                                                        TranslationStrength;                               // 0x0(0x4)
	float                                                        RotationStrength;                                  // 0x4(0x4)
	float                                                        BlendInSpeed;                                      // 0x8(0x4)
	float                                                        BlendOutSpeed;                                     // 0xc(0x4)
	bool                                                         AnimationOverride;                                 // 0x10(0x1)
	float                                                        AnimationLoopMod;                                  // 0x14(0x4)
	float                                                        HeightPerStep;                                     // 0x18(0x4)
	struct FName                                                 LeftHandSocketName;                                // 0x1c(0x8)
	struct FName                                                 RightHandSocketName;                               // 0x24(0x8)
	struct FName                                                 LeftFootSocketName;                                // 0x2c(0x8)
	struct FName                                                 RightFootSocketName;                               // 0x34(0x8)
	byte                                                         LadderState;                                       // 0x3c(0x1)
	byte                                                         LadderTransitionState;                             // 0x3d(0x1)
	Struct LadderDefinition                                      LadderDefinition;                                  // 0x40(0x1c)
	float                                                        ClimbDistance;                                     // 0x5c(0x4)
	float                                                        AnimationDistance;                                 // 0x60(0x4)
	float                                                        PlayerIntent;                                      // 0x64(0x4)
	bool                                                         ClimbOnComplete;                                   // 0x68(0x1)
	bool                                                         ClimbOffComplete;                                  // 0x69(0x1)
	bool                                                         IsClambering;                                      // 0x6a(0x1)
};


// Size 0x3
class AthenaAnimationLODSettings: public None
{
public:
	byte                                                         IKState;                                           // 0x0(0x1)
	byte                                                         IKSolverType;                                      // 0x1(0x1)
	byte                                                         IKFootPlantingState;                               // 0x2(0x1)
};


// Size 0x20
class AthenaAnimationPulleyDataAssetEntry: public None
{
public:
	Class AnimSequence*                                          Into;                                              // 0x0(0x8)
	Class AnimSequence*                                          Idle;                                              // 0x8(0x8)
	Class AnimSequence*                                          Action;                                            // 0x10(0x8)
	Class AnimSequence*                                          Outof;                                             // 0x18(0x8)
};


// Size 0x140
class AthenaAnimationObjectMeleeV2: public None
{
public:
	TArray<Struct AthenaAnimationObjectMeleeBlocking>            ComboAttacks;                                      // 0x0(0x10)
	TArray<Struct ComboAttacks>                                  ComboAttacksStatic;                                // 0x10(0x10)
	TArray<Struct ComboAttacksStatic>                            SwimmingComboAttacks;                              // 0x20(0x10)
	Struct AthenaAnimationObjectComplexOneShot                   HeavyAttack;                                       // 0x30(0x28)
	Struct AthenaAnimationObjectComplexOneShot                   SwimmingHeavyAttack;                               // 0x58(0x28)
	TArray<Struct AthenaAnimationObjectMeleeV2SpecialAttack>     SpecialAttacks;                                    // 0x80(0x10)
	Class AnimSequence*                                          BlockingMainInto;                                  // 0x90(0x8)
	Class AnimSequence*                                          BlockingIntoFromCombat;                            // 0x98(0x8)
	Class BlendSpace*                                            BlockingMainBlendSpace;                            // 0xa0(0x8)
	TArray<class BlockingFeedbackSequences*>                     BlockingFeedbackSequences;                         // 0xa8(0x10)
	Class AnimSequence*                                          BlockingOut;                                       // 0xb8(0x8)
	Class AnimSequence*                                          BlockingMainIntoSwimming;                          // 0xc0(0x8)
	Class BlendSpace*                                            BlockingMainBlendSpaceSwimming;                    // 0xc8(0x8)
	TArray<class BlockingFeedbackSequencesSwimming*>             BlockingFeedbackSequencesSwimming;                 // 0xd0(0x10)
	Class AnimSequence*                                          BlockingOutSwimming;                               // 0xe0(0x8)
	Struct AthenaAnimationObjectJumpingAnimations                BlockingJump;                                      // 0xe8(0x20)
	Class BlendSpace*                                            CombatLocomotion;                                  // 0x108(0x8)
	Class AnimSequence*                                          CombatLocomotionTurningLeft;                       // 0x110(0x8)
	Class AnimSequence*                                          CombatLocomotionTurningRight;                      // 0x118(0x8)
	Class AnimSequence*                                          CombatLocomotionTurnOut;                           // 0x120(0x8)
	Class BlendSpace*                                            Dodge;                                             // 0x128(0x8)
	Class BlendSpace*                                            LungeWarmupLocomotion;                             // 0x130(0x8)
	bool                                                         AttacksRespectFullBodyFlag;                        // 0x138(0x1)
};


// Size 0x50
class AthenaAnimationObjectMeleeV2SpecialAttack: public None
{
public:
	Struct AthenaAnimationObjectComplexOneShot                   Attack;                                            // 0x0(0x28)
	Struct AthenaAnimationObjectComplexOneShot                   SwimmingAttack;                                    // 0x28(0x28)
};


// Size 0x28
class AthenaAnimationObjectComplexOneShot: public None
{
public:
	Class AnimSequence*                                          WarmUp;                                            // 0x0(0x8)
	Class AnimSequence*                                          WarmUpFromBlock;                                   // 0x8(0x8)
	Class AnimSequence*                                          Action;                                            // 0x10(0x8)
	Class AnimSequence*                                          Recover;                                           // 0x18(0x8)
	Class AnimSequence*                                          HeavyAttackStunRecover;                            // 0x20(0x8)
};


// Size 0x60
class AthenaAnimationObjectMeleeBlocking: public None
{
public:
	Class AnimSequence*                                          BlockingInto;                                      // 0x0(0x8)
	Class AnimSequence*                                          BlockingIntoFromCombat;                            // 0x8(0x8)
	Class BlendSpace*                                            BlockingMainBlendSpace;                            // 0x10(0x8)
	Class AnimSequence*                                          BlockingFeedbackSequenceA;                         // 0x18(0x8)
	Class AnimSequence*                                          BlockingFeedbackSequenceB;                         // 0x20(0x8)
	Class AnimSequence*                                          BlockingOut;                                       // 0x28(0x8)
	Class BlendSpace*                                            Dodge;                                             // 0x30(0x8)
	Class AnimSequence*                                          BlockingIntoSwimming;                              // 0x38(0x8)
	Class BlendSpace*                                            BlockingMainBlendSpaceSwimming;                    // 0x40(0x8)
	Class AnimSequence*                                          BlockingFeedbackSequenceASwimming;                 // 0x48(0x8)
	Class AnimSequence*                                          BlockingFeedbackSequenceBSwimming;                 // 0x50(0x8)
	Class AnimSequence*                                          BlockingOutSwimming;                               // 0x58(0x8)
};


// Size 0x14
class AthenaAnimationObjectComplexOneShotPlaySpeeds: public None
{
public:
	float                                                        WarmUpPlaySpeed;                                   // 0x0(0x4)
	float                                                        WarmUpFromBlockPlaySpeed;                          // 0x4(0x4)
	float                                                        ActionPlaySpeed;                                   // 0x8(0x4)
	float                                                        RecoverPlaySpeed;                                  // 0xc(0x4)
	float                                                        HeavyAttackStunRecoverPlaySpeed;                   // 0x10(0x4)
};


// Size 0x48
class AthenaAnimationWeaponData: public None
{
public:
	TArray<Struct AthenaAnimationWheel>                          ComboAttacks;                                      // 0x0(0x10)
	TArray<Struct ComboAttacks>                                  StaticComboAttacks;                                // 0x10(0x10)
	Struct AthenaAnimationObjectComplexOneShot                   HeavyAttack;                                       // 0x20(0x28)
};


// Size 0x1d0
class AthenaAnimationWheel: public None
{
public:
	Struct SocketId                                              LeftHandMaleSocket;                                // 0x0(0x20)
	Struct SocketId                                              RightHandMaleSocket;                               // 0x20(0x20)
	Struct SocketId                                              LeftHandFemaleSocket;                              // 0x40(0x20)
	Struct SocketId                                              RightHandFemaleSocket;                             // 0x60(0x20)
	float                                                        TranslationStrength;                               // 0x80(0x4)
	float                                                        RotationStrength;                                  // 0x84(0x4)
	float                                                        BlendInSpeed;                                      // 0x88(0x4)
	float                                                        BlendOutSpeed;                                     // 0x8c(0x4)
	Struct HandOnWheelAnimationRanges                            HandOnWheelAnimationRanges;                        // 0x90(0x40)
	Struct WheelIKActivationRanges                               WheelArmIKDownWithinRange;                         // 0xd0(0x40)
	byte                                                         WheelAnimationType;                                // 0x110(0x1)
	float                                                        WheelTime;                                         // 0x114(0x4)
	float                                                        WheelDirection;                                    // 0x118(0x4)
	float                                                        RightFingerAlpha;                                  // 0x11c(0x4)
	float                                                        LeftFingerAlpha;                                   // 0x120(0x4)
	float                                                        FullBodyAlpha;                                     // 0x124(0x4)
	float                                                        WheelDockingHandClaspAlpha;                        // 0x128(0x4)
	bool                                                         LeftWheelArmDown;                                  // 0x12c(0x1)
	bool                                                         RightWheelArmDown;                                 // 0x12d(0x1)
	Class Actor*                                                 ControlledObject;                                  // 0x130(0x8)
};


// Size 0x40
class WheelIKActivationRanges: public None
{
public:
	Struct FloatRange                                            LeftArmDownRangeA;                                 // 0x0(0x10)
	Struct FloatRange                                            LeftArmDownRangeB;                                 // 0x10(0x10)
	Struct FloatRange                                            RightArmDownRangeA;                                // 0x20(0x10)
	Struct FloatRange                                            RightArmDownRangeB;                                // 0x30(0x10)
};


// Size 0x40
class HandOnWheelAnimationRanges: public None
{
public:
	Struct FloatRange                                            LeftHandOnWheelA;                                  // 0x0(0x10)
	Struct FloatRange                                            LeftHandOnWheelB;                                  // 0x10(0x10)
	Struct FloatRange                                            RightHandOnWheelA;                                 // 0x20(0x10)
	Struct FloatRange                                            RightHandOnWheelB;                                 // 0x30(0x10)
};


// Size 0x4
class AthenaAnimationSkeletonAIFastPathData: public None
{
public:
	bool                                                         FullBodyAISensingCanActivate;                      // 0x0(0x1)
	bool                                                         ArmOverlayAISensingCanActivate;                    // 0x0(0x1)
	bool                                                         AIShadowStunActive;                                // 0x0(0x1)
	bool                                                         CanBeKnockedBack;                                  // 0x0(0x1)
	bool                                                         AICanFlee;                                         // 0x0(0x1)
	bool                                                         AICanEmote;                                        // 0x0(0x1)
	bool                                                         AIControllingCaptainWheel;                         // 0x0(0x1)
};


// Size 0x28
class AthenaAnimationCharacterSelect: public None
{
public:
	Class AnimSequence*                                          Idle;                                              // 0x0(0x8)
	Class AnimSequence*                                          IntoHighlight;                                     // 0x8(0x8)
	Class AnimSequence*                                          Highlighted;                                       // 0x10(0x8)
	Class AnimSequence*                                          OutOfHighlight;                                    // 0x18(0x8)
	Class AnimSequence*                                          Selected;                                          // 0x20(0x8)
};


// Size 0x40
class AthenaAnimationDeathAnimData: public None
{
public:
	Class AnimSequence*                                          SwimmingSurfaceDeath;                              // 0x0(0x8)
	Class AnimSequence*                                          LocomotionDeath;                                   // 0x8(0x8)
	Class AnimSequence*                                          DrowningDeath;                                     // 0x10(0x8)
	Class AnimSequence*                                          WakeUp;                                            // 0x18(0x8)
	Class AnimSequence*                                          WakeUpSwimming;                                    // 0x20(0x8)
	Class BlendSpace1D*                                          DrowningDeath3rdPerson;                            // 0x28(0x8)
	Class AnimSequence*                                          BeckonInto;                                        // 0x30(0x8)
	Class AnimSequence*                                          BeckonLoop;                                        // 0x38(0x8)
};


// Size 0x30
class AthenaAnimationDeathData: public None
{
public:
	Struct DamageInstance                                        KillingDamage;                                     // 0x0(0x28)
	byte                                                         DeathType;                                         // 0x28(0x1)
	bool                                                         IsDead;                                            // 0x2c(0x1)
	bool                                                         Reviving;                                          // 0x2c(0x1)
};


// Size 0xf8
class AthenaAnimationDeath: public None
{
public:
	Struct AthenaAnimationDeathData                              DeathData;                                         // 0x8(0x30)
	Struct AthenaAnimationDeathAnimData                          DeathAnimData;                                     // 0x38(0x40)
	Class AthenaAnimationDeathDataAsset*                         DeathDataAsset;                                    // 0x78(0x8)
};


// Size 0x2c
class AthenaAnimationHitReactParams: public None
{
public:
	int                                                          StandardIndex0;                                    // 0x0(0x4)
	int                                                          StandardIndex1;                                    // 0x4(0x4)
	bool                                                         HitReactTransition;                                // 0x8(0x1)
	float                                                        DirectionYaw;                                      // 0xc(0x4)
	int                                                          ItemIndex0;                                        // 0x10(0x4)
	int                                                          ItemIndex1;                                        // 0x14(0x4)
	int                                                          ActionIndex0;                                      // 0x18(0x4)
	int                                                          ActionIndex1;                                      // 0x1c(0x4)
	int                                                          SubtleIndex0;                                      // 0x20(0x4)
	int                                                          SubtleIndex1;                                      // 0x24(0x4)
	byte                                                         AnimationType;                                     // 0x28(0x1)
};


// Size 0x48
class AthenaAnimationHitReactsSelectedAnimations: public None
{
public:
	Class BlendSpace1D*                                          SelectedHitReact0;                                 // 0x0(0x8)
	Class BlendSpace1D*                                          SelectedHitReactItem0;                             // 0x8(0x8)
	Class BlendSpace1D*                                          SelectedHitReactItemAction0;                       // 0x10(0x8)
	Class BlendSpace1D*                                          SelectedHitReactSubtle0;                           // 0x18(0x8)
	Class BlendSpace1D*                                          SelectedHitReact1;                                 // 0x20(0x8)
	Class BlendSpace1D*                                          SelectedHitReactItem1;                             // 0x28(0x8)
	Class BlendSpace1D*                                          SelectedHitReactItemAction1;                       // 0x30(0x8)
	Class BlendSpace1D*                                          SelectedHitReactSubtle1;                           // 0x38(0x8)
	Class BlendSpace1D*                                          SelectedOverrideHitReact;                          // 0x40(0x8)
};


// Size 0x40
class AthenaAnimationHitReactsAnimData: public None
{
public:
	TArray<class HitReact*>                                      HitReact;                                          // 0x0(0x10)
	TArray<class HitReactItem*>                                  HitReactItem;                                      // 0x10(0x10)
	TArray<class HitReactItemAction*>                            HitReactItemAction;                                // 0x20(0x10)
	TArray<class HitReactSubtle*>                                HitReactSubtle;                                    // 0x30(0x10)
};


// Size 0x40
class AthenaAnimationPlayingFacialAnimations: public None
{
public:
	Class BlendSpace1D*                                          Capstan;                                           // 0x0(0x8)
	Class AnimSequence*                                          SailAction;                                        // 0x8(0x8)
	Class AnimSequence*                                          SailIdle;                                          // 0x10(0x8)
	Class AnimSequence*                                          CannonFire;                                        // 0x18(0x8)
	Class AnimSequence*                                          CannonAim;                                         // 0x20(0x8)
	Class AnimSequence*                                          HarpoonFire;                                       // 0x28(0x8)
	Class AnimSequence*                                          FacialIdle0;                                       // 0x30(0x8)
	Class AnimSequence*                                          FacialIdle1;                                       // 0x38(0x8)
};


// Size 0x90
class AthenaAnimationFacialAnimData: public None
{
public:
	int                                                          FacialIdleAnimationIndex0;                         // 0x0(0x4)
	int                                                          FacialIdleAnimationIndex1;                         // 0x4(0x4)
	TArray<class IdleAnimations*>                                IdleAnimations;                                    // 0x8(0x10)
	Class AnimSequence*                                          Death;                                             // 0x18(0x8)
	Class AnimSequence*                                          HitReact;                                          // 0x20(0x8)
	Struct AthenaAnimationControllableFacialAnimData             Controllables;                                     // 0x28(0x30)
	Class AnimMontage*                                           Sick;                                              // 0x58(0x8)
	Class AnimSequence*                                          Cough;                                             // 0x60(0x8)
	Class AnimSequence*                                          Talk;                                              // 0x68(0x8)
	Class AnimSequence*                                          UnderwaterIdle;                                    // 0x70(0x8)
	Class AnimMontage*                                           CurrentFacialMontage;                              // 0x78(0x8)
	Class AnimMontage*                                           PlayingFacialMontage;                              // 0x80(0x8)
	byte                                                         CurrentFacialPriority;                             // 0x88(0x1)
};


// Size 0x30
class AthenaAnimationControllableFacialAnimData: public None
{
public:
	Class BlendSpace1D*                                          Capstan;                                           // 0x0(0x8)
	Class AnimSequence*                                          SailAction;                                        // 0x8(0x8)
	Class AnimSequence*                                          SailIdle;                                          // 0x10(0x8)
	Class AnimSequence*                                          CannonFire;                                        // 0x18(0x8)
	Class AnimSequence*                                          CannonAim;                                         // 0x20(0x8)
	Class AnimSequence*                                          HarpoonFire;                                       // 0x28(0x8)
};


// Size 0x18
class AthenaAnimationCamera: public None
{
public:
	float                                                        CameraAlpha;                                       // 0x0(0x4)
	float                                                        CameraLookYawTime;                                 // 0x4(0x4)
	float                                                        CameraLookPitchTime;                               // 0x8(0x4)
	float                                                        CameraYaw;                                         // 0xc(0x4)
	float                                                        CameraPitch;                                       // 0x10(0x4)
	byte                                                         CameraObjectAttachmentType;                        // 0x14(0x1)
};


// Size 0x50
class AthenaAnimationCameraAdditiveAnimData: public None
{
public:
	Class AnimSequence*                                          CameraDefaultYaw;                                  // 0x0(0x8)
	Class AnimSequence*                                          CameraDefaultPitch;                                // 0x8(0x8)
	Class AnimSequence*                                          CameraWheelYaw;                                    // 0x10(0x8)
	Class AnimSequence*                                          CameraWheelPitch;                                  // 0x18(0x8)
	Class AnimSequence*                                          CameraCapstanYaw;                                  // 0x20(0x8)
	Class AnimSequence*                                          CameraCapstanPitch;                                // 0x28(0x8)
	Class AnimSequence*                                          CameraSailYaw;                                     // 0x30(0x8)
	Class AnimSequence*                                          CameraSailPitch;                                   // 0x38(0x8)
	Class AnimSequence*                                          CameraLadderYaw;                                   // 0x40(0x8)
	Class AnimSequence*                                          CameraLadderPitch;                                 // 0x48(0x8)
};


// Size 0x80
class AthenaAnimationFirstPersonAnimatic: public None
{
public:
	bool                                                         IsFirstPersonAnimaticActive;                       // 0x0(0x1)
	bool                                                         IsFirstPersonCustomAnimatic;                       // 0x0(0x1)
	Class AnimSequence*                                          FirstPersonAnimationToPlay;                        // 0x8(0x8)
	Class FirstPersonAnimaticList*                               FirstPersonAnimaticList;                           // 0x10(0x8)
};


// Size 0x20
class AthenaAnimationFirstPersonTurnDelayStates: public None
{
public:
	Struct AthenaAnimationFirstPersonTurnDelay                   PassiveState;                                      // 0x0(0xc)
	Struct AthenaAnimationFirstPersonTurnDelay                   ContinuousUse;                                     // 0xc(0xc)
	float                                                        TurnDelayAngle;                                    // 0x18(0x4)
	float                                                        InvTurnDelayAngle;                                 // 0x1c(0x4)
};


// Size 0xc
class AthenaAnimationFirstPersonTurnDelay: public None
{
public:
	float                                                        MaxAngle;                                          // 0x0(0x4)
	float                                                        DelayOutSpeed;                                     // 0x4(0x4)
	float                                                        DelayInSpeed;                                      // 0x8(0x4)
};


// Size 0xc
class AthenaAnimationIKLimbStretch: public None
{
public:
	float                                                        IKStretchArms;                                     // 0x0(0x4)
	float                                                        IKStretchLegs;                                     // 0x4(0x4)
	float                                                        IKStretchSpine;                                    // 0x8(0x4)
};


// Size 0x28
class AthenaAnimationIKFootplantingAnimData: public None
{
public:
	bool                                                         Active;                                            // 0x0(0x1)
	float                                                        HipHeight;                                         // 0x4(0x4)
	float                                                        HipPullStrength;                                   // 0x8(0x4)
	float                                                        FloorContactDownDistance;                          // 0xc(0x4)
	float                                                        RelativePlantDownDistance;                         // 0x10(0x4)
	float                                                        FloorContactToRangeStart;                          // 0x14(0x4)
	float                                                        FloorContactToRangeEnd;                            // 0x18(0x4)
	float                                                        RelativePlantToRangeStart;                         // 0x1c(0x4)
	float                                                        RelativePlantToRangeEnd;                           // 0x20(0x4)
	float                                                        IKLegStretch;                                      // 0x24(0x4)
};


// Size 0x10
class AthenaAnimationIdlesAnimData: public None
{
public:
	TArray<class IdleAnimations*>                                IdleAnimations;                                    // 0x0(0x10)
};


// Size 0x50
class AthenaAnimationLocomotionAlternateAnimData: public None
{
public:
	Class AnimSequence*                                          Idle;                                              // 0x0(0x8)
	Class BlendSpace*                                            MainMovement;                                      // 0x8(0x8)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningLeft;                                       // 0x10(0x8)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningRight;                                      // 0x18(0x8)
	Class AnimSequence*                                          TurnOut;                                           // 0x20(0x8)
	Class BlendSpace*                                            RunStop;                                           // 0x28(0x8)
	Struct AthenaAnimationLocomotionStairsAnimData               StairsLocomotion;                                  // 0x30(0x20)
};


// Size 0x20
class AthenaAnimationLocomotionStairsAnimData: public None
{
public:
	Class BlendSpace*                                            UpStairsLeft;                                      // 0x0(0x8)
	Class BlendSpace*                                            UpStairsRight;                                     // 0x8(0x8)
	Class BlendSpace*                                            DownStairsLeft;                                    // 0x10(0x8)
	Class BlendSpace*                                            DownStairsRight;                                   // 0x18(0x8)
};


// Size 0x8
class AthenaAnimationLocomotionTurningAnimData: public None
{
public:
	Class AnimSequence*                                          Turn90;                                            // 0x0(0x8)
};


// Size 0x50
class AthenaAnimationLocomotionAnimData: public None
{
public:
	Class BlendSpace*                                            MainMovement;                                      // 0x0(0x8)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningLeft;                                       // 0x8(0x8)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningRight;                                      // 0x10(0x8)
	Class AnimSequence*                                          MovementOutOf;                                     // 0x18(0x8)
	Class AnimSequence*                                          TurnOut;                                           // 0x20(0x8)
	Class BlendSpace*                                            RunStop;                                           // 0x28(0x8)
	Struct AthenaAnimationLocomotionStairsAnimData               StairsLocomotion;                                  // 0x30(0x20)
};


// Size 0x8
class AthenaAnimationLocomotionTurningAnimDataPitchOverride: public None
{
public:
	Class BlendSpace1D*                                          Turn90;                                            // 0x0(0x8)
};


// Size 0x68
class AthenaAnimationSwimmingAnimData: public None
{
public:
	Class BlendSpace*                                            SwimmingMovement;                                  // 0x0(0x8)
	Class BlendSpace*                                            SwimmingMovementUnderwater;                        // 0x8(0x8)
	Class BlendSpace1D*                                          UnderwaterTreadwater;                              // 0x10(0x8)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningLeft;                                       // 0x18(0x8)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningRight;                                      // 0x20(0x8)
	TArray<class Idles*>                                         Idles;                                             // 0x28(0x10)
	TArray<class IdlesUnderwater*>                               IdlesUnderwater;                                   // 0x38(0x10)
	Struct AthenaAnimationSwimmingSprintAnimData                 SwimSprint;                                        // 0x48(0x20)
};


// Size 0x20
class AthenaAnimationSwimmingSprintAnimData: public None
{
public:
	Class AnimSequence*                                          Into;                                              // 0x0(0x8)
	Class AnimSequence*                                          Loop;                                              // 0x8(0x8)
	Class AnimSequence*                                          IntoUnderwater;                                    // 0x10(0x8)
	Class AnimSequence*                                          LoopUnderwater;                                    // 0x18(0x8)
};


// Size 0x20
class AthenaAnimationSpawnAnimData: public None
{
public:
	TArray<class Spawn*>                                         Spawn;                                             // 0x0(0x10)
	TArray<class Despawn*>                                       Despawn;                                           // 0x10(0x10)
};


// Size 0x30
class AthenaAnimationSpawnBase: public None
{
public:
	class                                                        ObjectId;                                          // 0x0(0x8)
	Class AnimSequence*                                          SpawnOnLand;                                       // 0x8(0x8)
	Class AnimSequence*                                          SpawnOnShip;                                       // 0x10(0x8)
	Class AnimSequence*                                          SpawnSummoned;                                     // 0x18(0x8)
	Class AnimSequence*                                          SpawnBoarding;                                     // 0x20(0x8)
	Class AnimSequence*                                          Despawn;                                           // 0x28(0x8)
};


// Size 0x1c
class AthenaAnimationPitchShoulders: public None
{
public:
	Struct Rotator                                               Shoulder;                                          // 0x0(0xc)
	Struct Rotator                                               Clavicle;                                          // 0xc(0xc)
	bool                                                         ActiveLeft;                                        // 0x18(0x1)
	bool                                                         ActiveRight;                                       // 0x19(0x1)
};


// Size 0x168
class AthenaAnimationPitchControlStates: public None
{
public:
	Struct AthenaAnimationObjectTargetingOptions                 StandardPassive;                                   // 0x0(0x3c)
	Struct AthenaAnimationObjectTargetingOptions                 StandardWater;                                     // 0x3c(0x3c)
	Struct AthenaAnimationObjectTargetingOptions                 Action1;                                           // 0x78(0x3c)
	Struct AthenaAnimationObjectTargetingOptions                 Action1Water;                                      // 0xb4(0x3c)
	Struct AthenaAnimationObjectTargetingOptions                 Action2;                                           // 0xf0(0x3c)
	Struct AthenaAnimationObjectTargetingOptions                 Action2Water;                                      // 0x12c(0x3c)
};


// Size 0x3c
class AthenaAnimationObjectTargetingOptions: public None
{
public:
	byte                                                         ArmSelection;                                      // 0x0(0x1)
	float                                                        UpperClampTargetingAngle;                          // 0x4(0x4)
	float                                                        LowerClampTargetingAngle;                          // 0x8(0x4)
	float                                                        ShoulderInfluenceUpper;                            // 0xc(0x4)
	float                                                        ShoulderInfluenceLower;                            // 0x10(0x4)
	Struct Vector                                                VirtualPivotOffsetUpper;                           // 0x14(0xc)
	Struct Vector                                                VirtualPivotOffsetLower;                           // 0x20(0xc)
	bool                                                         LockHandOrientation;                               // 0x2c(0x1)
	Struct Vector                                                VirtualPivotOffsetLerped;                          // 0x30(0xc)
};


// Size 0x14
class AthenaAnimationPitchAlpha: public None
{
public:
	float                                                        ArmPitchAlphaLeft;                                 // 0x0(0x4)
	float                                                        ArmPitchAlphaRight;                                // 0x4(0x4)
	float                                                        ArmPitchInterpSpeed;                               // 0x8(0x4)
	struct FName                                                 BaseRotationIKSocketName;                          // 0xc(0x8)
};


// Size 0x10
class AthenaAnimationUndoRepairAnimData: public None
{
public:
	Class AnimSequence*                                          UndoRepairInto;                                    // 0x0(0x8)
	Class AnimSequence*                                          UndoRepairLoop;                                    // 0x8(0x8)
};


// Size 0x70
class AthenaAnimationUndoRepair: public None
{
public:
	Struct AthenaAnimationUndoRepairAnimData                     UndoRepairAnimData;                                // 0x0(0x10)
	bool                                                         UndoingRepair;                                     // 0x10(0x1)
	Class AthenaAnimationUndoRepairDataAsset*                    UndoRepairDataAsset;                               // 0x18(0x8)
};


// Size 0x4
class AthenaAnimationDebugTrackingParams: public None
{
public:
	bool                                                         TrackObjectActive;                                 // 0x0(0x1)
	bool                                                         TrackOverlayState;                                 // 0x1(0x1)
	bool                                                         TrackActiveAnimations;                             // 0x2(0x1)
	bool                                                         TrackOverlayFlags;                                 // 0x3(0x1)
};


// Size 0x128
class AthenaAnimationEmoteAnimgraphStructure: public None
{
public:
	TArray<Struct AthenaAnimationFire>                           EmoteAnimationArray;                               // 0x0(0x10)
	Class AnimSequence*                                          OneShotAnimationToUse;                             // 0x10(0x8)
	Class AnimSequence*                                          ContinuousInAnimationToUse;                        // 0x18(0x8)
	Class AnimSequence*                                          ContinuousLoopAnimationToUseA;                     // 0x20(0x8)
	Class AnimSequence*                                          ContinuousLoopAnimationToUseB;                     // 0x28(0x8)
	bool                                                         EmoteActive;                                       // 0x30(0x1)
	bool                                                         OneShotEmoteActive;                                // 0x31(0x1)
	bool                                                         ContinuousEmoteActive;                             // 0x32(0x1)
	bool                                                         ContinuousEmoteLoopExit;                           // 0x33(0x1)
};


// Size 0x20
class AthenaAnimationFire: public None
{
public:
	float                                                        MinimumDistanceToStartCoughing;                    // 0x0(0x4)
	bool                                                         Coughing;                                          // 0x4(0x1)
};


// Size 0x68
class AthenaAnimationCapstanAnimData: public None
{
public:
	Class AnimSequence*                                          Attach;                                            // 0x0(0x8)
	Class AnimSequence*                                          Detach;                                            // 0x8(0x8)
	TArray<class NeutralForce*>                                  NeutralForce;                                      // 0x10(0x10)
	TArray<class PushForce*>                                     PushForce;                                         // 0x20(0x10)
	TArray<class PullForce*>                                     PullForce;                                         // 0x30(0x10)
	Class BlendSpace1D*                                          PullToNeutral;                                     // 0x40(0x8)
	Class BlendSpace1D*                                          PushToPull;                                        // 0x48(0x8)
	Class BlendSpace1D*                                          PullToPush;                                        // 0x50(0x8)
	float                                                        RemapSpeed;                                        // 0x58(0x4)
	Class BlendSpace1D*                                          UpperIntent;                                       // 0x60(0x8)
};


// Size 0x38
class AthenaAnimationActiveItemComplexAnimData: public None
{
public:
	Class AnimSequence*                                          WarmUp;                                            // 0x0(0x8)
	Class AnimSequence*                                          HeavyWarmUp;                                       // 0x8(0x8)
	Class AnimSequence*                                          Action;                                            // 0x10(0x8)
	Class AnimSequence*                                          Recover;                                           // 0x18(0x8)
	Class AnimSequence*                                          HeavyAttackStunRecover;                            // 0x20(0x8)
	byte                                                         AnimType;                                          // 0x28(0x1)
	float                                                        WarmUpPlaySpeed;                                   // 0x2c(0x4)
	bool                                                         IsHeavyAttackActive;                               // 0x30(0x1)
};


// Size 0x20
class AthenaAnimationActiveOneShotAnimationStruct: public None
{
public:
	Class AnimSequence*                                          Action;                                            // 0x0(0x8)
	Class BlendSpace1D*                                          ActionPitchOverride;                               // 0x8(0x8)
	Class BlendSpace*                                            ActionLocomotion;                                  // 0x10(0x8)
	bool                                                         UsePitchOverride;                                  // 0x18(0x1)
	bool                                                         LocomotingWithPitchOverrideDisabled;               // 0x19(0x1)
	bool                                                         IdleWithPitchOverrideDisabled;                     // 0x1a(0x1)
};


// Size 0x28
class AthenaAnimationObjectActionOneShotPlayingStructPitchOverride: public None
{
public:
	Class BlendSpace1D*                                          Action;                                            // 0x0(0x8)
	Class BlendSpace1D*                                          ActionVariant1;                                    // 0x8(0x8)
	Class BlendSpace1D*                                          ActionVariant2;                                    // 0x10(0x8)
	Class BlendSpace1D*                                          ActionVariant3;                                    // 0x18(0x8)
	Class BlendSpace1D*                                          ActionVariant4;                                    // 0x20(0x8)
};


// Size 0x20
class AthenaAnimationObjectActionOneShotPitchOverride: public None
{
public:
	TArray<class MainAction*>                                    MainAction;                                        // 0x0(0x10)
	TArray<class AlternateAction*>                               AlternateAction;                                   // 0x10(0x10)
};


// Size 0x28
class AthenaAnimationObjectActionOneShotPlayingStruct: public None
{
public:
	Class AnimSequence*                                          Action;                                            // 0x0(0x8)
	Class AnimSequence*                                          ActionVariant1;                                    // 0x8(0x8)
	Class AnimSequence*                                          ActionVariant2;                                    // 0x10(0x8)
	Class AnimSequence*                                          ActionVariant3;                                    // 0x18(0x8)
	Class AnimSequence*                                          ActionVariant4;                                    // 0x20(0x8)
};


// Size 0x40
class AthenaAnimationObjectActionOneShot: public None
{
public:
	TArray<class MainAction*>                                    MainAction;                                        // 0x0(0x10)
	TArray<class MainActionLocomotion*>                          MainActionLocomotion;                              // 0x10(0x10)
	TArray<class AlternateAction*>                               AlternateAction;                                   // 0x20(0x10)
	TArray<class AlternateActionLocomotion*>                     AlternateActionLocomotion;                         // 0x30(0x10)
};


// Size 0xf0
class AthenaAnimationObjectActionContinuousPitchOverride: public None
{
public:
	Struct AthenaAnimationObjectActionContinuousStructPitchOverride MainContinuousActions;                             // 0x0(0x78)
	Struct AthenaAnimationObjectActionContinuousStructPitchOverride AlternateContinuousActions;                        // 0x78(0x78)
};


// Size 0x78
class AthenaAnimationObjectActionContinuousStructPitchOverride: public None
{
public:
	Class BlendSpace1D*                                          MainInto;                                          // 0x0(0x8)
	Class BlendSpace1D*                                          MainCycleIdle;                                     // 0x8(0x8)
	Class BlendSpace1D*                                          MainCycleLocomotion;                               // 0x10(0x8)
	TArray<class VariantCycleIdle*>                              VariantCycleIdle;                                  // 0x18(0x10)
	bool                                                         UseMainCycleJump;                                  // 0x28(0x1)
	bool                                                         IgnoreFullBody;                                    // 0x29(0x1)
	Struct AthenaAnimationObjectJumpingAnimationsPitchOverride   MainCycleJump;                                     // 0x30(0x20)
	Class BlendSpace1D*                                          MainOutOf;                                         // 0x50(0x8)
	Struct AthenaAnimationObjectActionContinuousSwimming         MainSwimming;                                      // 0x58(0x20)
};


// Size 0x20
class AthenaAnimationObjectActionContinuousSwimming: public None
{
public:
	Class BlendSpace*                                            MainInSwimming;                                    // 0x0(0x8)
	Class BlendSpace*                                            MainOneShotInSwimming;                             // 0x8(0x8)
	Class BlendSpace*                                            MainCycleSwimming;                                 // 0x10(0x8)
	Class BlendSpace*                                            MainOutSwimming;                                   // 0x18(0x8)
};


// Size 0x150
class AthenaAnimationObjectActionContinuous: public None
{
public:
	Struct AthenaAnimationObjectActionContinuousStruct           MainContinuousActions;                             // 0x0(0xa8)
	Struct AthenaAnimationObjectActionContinuousStruct           AlternateContinuousActions;                        // 0xa8(0xa8)
};


// Size 0xa8
class AthenaAnimationObjectActionContinuousStruct: public None
{
public:
	Class AnimSequence*                                          MainInto;                                          // 0x0(0x8)
	Class BlendSpace*                                            MainIntoLocomotion;                                // 0x8(0x8)
	Class AnimSequence*                                          OneShotInto;                                       // 0x10(0x8)
	Class AnimSequence*                                          MainCycleIdle;                                     // 0x18(0x8)
	Class BlendSpace*                                            MainCycleLocomotion;                               // 0x20(0x8)
	bool                                                         UseMainCycleJump;                                  // 0x28(0x1)
	Struct AthenaAnimationObjectJumpingAnimations                MainCycleJump;                                     // 0x30(0x20)
	Class AnimSequence*                                          MainOutOf;                                         // 0x50(0x8)
	Class BlendSpace*                                            MainOutOfLocomotion;                               // 0x58(0x8)
	Struct AthenaAnimationObjectActionContinuousSwimming         MainSwimming;                                      // 0x60(0x20)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningLeftAlt;                                    // 0x80(0x8)
	Struct AthenaAnimationLocomotionTurningAnimData              TurningRightAlt;                                   // 0x88(0x8)
	Class AnimSequence*                                          TurnOutAlt;                                        // 0x90(0x8)
	bool                                                         IgnoreOverlayHandAdditiveForAction;                // 0x98(0x1)
	Class AnimSequence*                                          CustomAdditiveForAction;                           // 0xa0(0x8)
};


// Size 0x9a0
class AthenaAnimationCoreObjectAnimations: public None
{
public:
	Struct AthenaAnimationObjectLocomotionAnimations             Locomotion;                                        // 0x0(0x40)
	Struct AthenaAnimationObjectLocomotionAnimations             AlternateLocomotion;                               // 0x40(0x40)
	Struct AthenaAnimationObjectJumpingAnimations                Jumping;                                           // 0x80(0x20)
	Struct AthenaAnimationObjectJumpingAnimations                AlternateJumping;                                  // 0xa0(0x20)
	Struct AthenaAnimationObjectEquipAnimations                  Equipping;                                         // 0xc0(0x40)
	Struct AthenaAnimationObjectIdleAnimations                   Idles;                                             // 0x100(0x18)
	Struct AthenaAnimationObjectIdleAnimations                   AlternateIdles;                                    // 0x118(0x18)
	Struct AthenaAnimationObjectActionOneShot                    ActionPrimarySingle;                               // 0x130(0x40)
	Struct AthenaAnimationObjectActionContinuous                 ActionPrimaryContinuous;                           // 0x170(0x150)
	bool                                                         PrimaryActionPitchOverride;                        // 0x2c0(0x1)
	Struct AthenaAnimationObjectActionOneShotPitchOverride       ActionPrimarySinglePitchOverride;                  // 0x2c8(0x20)
	Struct AthenaAnimationObjectActionContinuousPitchOverride    ActionPrimaryContinuousPitchOverride;              // 0x2e8(0xf0)
	Struct AthenaAnimationObjectActionOneShot                    ActionSecondarySingle;                             // 0x3d8(0x40)
	Struct AthenaAnimationObjectActionContinuous                 ActionSecondaryContinuous;                         // 0x418(0x150)
	bool                                                         SecondaryActionPitchOverride;                      // 0x568(0x1)
	Struct AthenaAnimationObjectActionOneShotPitchOverride       ActionSecondarySinglePitchOverride;                // 0x570(0x20)
	Struct AthenaAnimationObjectActionContinuousPitchOverride    ActionSecondaryContinuousPitchOverride;            // 0x590(0xf0)
	Struct AthenaAnimationObjectMeleeV2                          MeleeV2;                                           // 0x680(0x140)
	Class AnimSequence*                                          HandAdditive;                                      // 0x7c0(0x8)
	float                                                        HandAdditiveDeactivationBlendTime;                 // 0x7c8(0x4)
	Struct Transform                                             OffsetLeftHand;                                    // 0x7d0(0x30)
	Struct Transform                                             OffsetRightHand;                                   // 0x800(0x30)
	Struct WieldAnimationParams                                  Params;                                            // 0x830(0x40)
	Struct AthenaAnimationObjectFacial                           Facial;                                            // 0x870(0x70)
	bool                                                         RangedWeapon;                                      // 0x8e0(0x1)
	bool                                                         UseAlternateAsTransition;                          // 0x8e1(0x1)
	Struct AthenaAnimationSkeletonKnockbackLocomotionStrength    KnockBack;                                         // 0x8e8(0x20)
	Struct AthenaAnimationFishingAnimations                      Fishing;                                           // 0x908(0x90)
	Class AnimSequence*                                          ScreamStun;                                        // 0x998(0x8)
};


// Size 0x4
class AthenaAnimationActionRelevancy: public None
{
public:
	bool                                                         UsePrimary;                                        // 0x0(0x1)
	bool                                                         UsePrimaryAlt;                                     // 0x1(0x1)
	bool                                                         UseSecondary;                                      // 0x2(0x1)
	bool                                                         UseSecondaryAlt;                                   // 0x3(0x1)
};


// Size 0x18
class AthenaAnimationPlayingEquipAnimations: public None
{
public:
	Class AnimSequence*                                          Equip;                                             // 0x0(0x8)
	Class BlendSpace*                                            EquipAsBlendSpace;                                 // 0x8(0x8)
	Class BlendSpace*                                            EquipSwimming;                                     // 0x10(0x8)
};


// Size 0x20
class AthenaAnimationHandHeldItemParams: public None
{
public:
	bool                                                         LeftArmOverlayActive;                              // 0x0(0x1)
	bool                                                         RightArmOverlayActive;                             // 0x1(0x1)
	bool                                                         UpperBodyOverlayActive;                            // 0x2(0x1)
	bool                                                         FullBodyOverlayActive;                             // 0x3(0x1)
	bool                                                         SpineOverlayActive;                                // 0x4(0x1)
	bool                                                         SpineLockActive;                                   // 0x5(0x1)
	bool                                                         ObjectActive;                                      // 0x6(0x1)
	bool                                                         ObjectOverrideStateActive;                         // 0x7(0x1)
	Struct FString                                               OverlayAnimationName;                              // 0x8(0x10)
	byte                                                         ObjectPassiveState;                                // 0x18(0x1)
	bool                                                         QuickStow;                                         // 0x19(0x1)
	bool                                                         Reload;                                            // 0x1a(0x1)
	bool                                                         ContinuousInteractionCustomLocomotionEnabled;      // 0x1b(0x1)
};


// Size 0xb30
class AthenaAnimationLoadObjectsWrapper: public None
{
public:
	Struct AthenaAnimationCoreObjectAnimations                   ObjectAnimation;                                   // 0x0(0x9a0)
	Struct AthenaAnimationPitchControlStates                     ObjectTargeting3rdPerson;                          // 0x9a0(0x168)
	Struct AthenaAnimationFirstPersonTurnDelayStates             FirstPersonTurnDelay;                              // 0xb08(0x20)
	class                                                        ObjectId;                                          // 0xb28(0x8)
};


// Size 0x9c0
class AthenaAnimationLoadObjectByID: public None
{
public:
	int                                                          LoadedObjectID;                                    // 0x0(0x4)
	bool                                                         ObjectFound;                                       // 0x4(0x1)
	class                                                        CharacterType;                                     // 0x8(0x8)
	Class ScriptStruct*                                          DestinationStruct;                                 // 0x10(0x8)
	Struct AthenaAnimationCoreObjectAnimations                   LoadedObjectAnimations;                            // 0x20(0x9a0)
};


// Size 0x18
class AthenaAnimationKeyedInstrumentAnimData: public None
{
public:
	Class AnimSequence*                                          Into;                                              // 0x0(0x8)
	Class AnimSequence*                                          Action;                                            // 0x8(0x8)
	Class AnimSequence*                                          Outof;                                             // 0x10(0x8)
};


// Size 0x68
class AthenaAnimationLadderAnimData: public None
{
public:
	Class AnimSequence*                                          Climb;                                             // 0x0(0x8)
	Class AnimSequence*                                          Slide;                                             // 0x8(0x8)
	Class BlendSpace1D*                                          SlideStop;                                         // 0x10(0x8)
	Struct AthenaAnimationLadderTransitionsAnimData              Mast;                                              // 0x18(0x28)
	Struct AthenaAnimationLadderTransitionsAnimData              ShipSide;                                          // 0x40(0x28)
};


// Size 0x28
class AthenaAnimationLadderTransitionsAnimData: public None
{
public:
	Class AnimSequence*                                          ClimbOnTop;                                        // 0x0(0x8)
	Class AnimSequence*                                          ClimbOffTop;                                       // 0x8(0x8)
	Class AnimSequence*                                          ClimbOnBottom;                                     // 0x10(0x8)
	Class AnimSequence*                                          ClimbOffBottom;                                    // 0x18(0x8)
	Class AnimSequence*                                          ClamberOffTop;                                     // 0x20(0x8)
};


// Size 0x30
class AthenaAnimationMapTable: public None
{
public:
	TArray<class Into*>                                          Into;                                              // 0x0(0x10)
	TArray<class IdleCycle*>                                     IdleCycle;                                         // 0x10(0x10)
	TArray<class Outof*>                                         Outof;                                             // 0x20(0x10)
};


// Size 0x48
class AthenaAnimationPulleyControlAnimData: public None
{
public:
	Class AnimSequence*                                          Entry;                                             // 0x0(0x8)
	Class AnimSequence*                                          IntoLeft;                                          // 0x8(0x8)
	Class AnimSequence*                                          IdleLeft;                                          // 0x10(0x8)
	Class AnimSequence*                                          ActionLeft;                                        // 0x18(0x8)
	Class AnimSequence*                                          OutOfLeft;                                         // 0x20(0x8)
	Class AnimSequence*                                          IntoRight;                                         // 0x28(0x8)
	Class AnimSequence*                                          IdleRight;                                         // 0x30(0x8)
	Class AnimSequence*                                          ActionRight;                                       // 0x38(0x8)
	Class AnimSequence*                                          OutOfRight;                                        // 0x40(0x8)
};


// Size 0x40
class AthenaAnimationPulleyControl: public None
{
public:
	TArray<Byte AthenaAnimationWaterPump>                        PulleyObjectTypes;                                 // 0x0(0x10)
	float                                                        MaxRate;                                           // 0x10(0x4)
	float                                                        ForceMultiplier;                                   // 0x14(0x4)
	float                                                        PulleyMovementForce;                               // 0x18(0x4)
	bool                                                         UsingPulley;                                       // 0x1c(0x1)
	bool                                                         MovingPulley;                                      // 0x1d(0x1)
	bool                                                         LookAtOffsetSet;                                   // 0x1e(0x1)
	bool                                                         LookingRight;                                      // 0x1f(0x1)
};


// Size 0x30
class AthenaAnimationWaterPump: public None
{
public:
	Class Actor*                                                 WaterPump;                                         // 0x10(0x8)
};


// Size 0xc
class AthenaAnimationWaterPumpParams: public None
{
public:
	float                                                        WaterPumpHandlePosition;                           // 0x0(0x4)
	float                                                        WaterPumpHandlePreviousPosition;                   // 0x4(0x4)
	bool                                                         WaterPumpHandleInMotion;                           // 0x8(0x1)
};


// Size 0x28
class AthenaAnimationWaterPumpAnimData: public None
{
public:
	Class AnimSequence*                                          IntoWaterPump;                                     // 0x0(0x8)
	Class AnimSequence*                                          WaterPumpIdle;                                     // 0x8(0x8)
	Class AnimSequence*                                          WaterPumpAction;                                   // 0x10(0x8)
	Class AnimSequence*                                          WaterPumpActionOverlay;                            // 0x18(0x8)
	Class AnimSequence*                                          OutOfWaterPump;                                    // 0x20(0x8)
};


// Size 0xb8
class AthenaAnimationWeapon: public None
{
public:
	Struct AthenaAnimationActiveItemComplexAnimData              AnimData;                                          // 0x18(0x38)
	bool                                                         Attacking;                                         // 0x50(0x1)
	bool                                                         NewAttack;                                         // 0x51(0x1)
	Struct AthenaAnimationWeaponData                             WeaponData;                                        // 0x58(0x48)
};


// Size 0x88
class AthenaAnimationWheelAnimData: public None
{
public:
	Class AnimSequence*                                          Into;                                              // 0x0(0x8)
	Struct AthenaAnimationWheelTurnsAnimData                     LeftTurn;                                          // 0x8(0x18)
	Struct AthenaAnimationWheelTurnsAnimData                     RightTurn;                                         // 0x20(0x18)
	Struct AthenaAnimationWheelArmOverlayAnimData                LeftArm;                                           // 0x38(0x10)
	Struct AthenaAnimationWheelArmOverlayAnimData                RightArm;                                          // 0x48(0x10)
	TArray<class Idles*>                                         Idles;                                             // 0x58(0x10)
	TArray<class LeftFingerIdles*>                               LeftFingerIdles;                                   // 0x68(0x10)
	TArray<class RightFingerIdles*>                              RightFingerIdles;                                  // 0x78(0x10)
};


// Size 0x10
class AthenaAnimationWheelArmOverlayAnimData: public None
{
public:
	Class BlendSpace1D*                                          ArmLower;                                          // 0x0(0x8)
	Class BlendSpace1D*                                          ArmRaise;                                          // 0x8(0x8)
};


// Size 0x18
class AthenaAnimationWheelTurnsAnimData: public None
{
public:
	Class AnimSequence*                                          Turn;                                              // 0x0(0x8)
	Class AnimSequence*                                          TurnFast;                                          // 0x8(0x8)
	Class AnimSequence*                                          TurnFast180;                                       // 0x10(0x8)
};


// Size 0x30
class AthenaAnimationShopInteractionParams: public None
{
public:
	TArray<Struct AthenaAnimationShopInteractionAnimations>      AllLoadedInteractionAnimations;                    // 0x0(0x10)
	Class AnimSequence*                                          IntoAnimToPlay;                                    // 0x10(0x8)
	Class AnimSequence*                                          LoopAnimToPlay;                                    // 0x18(0x8)
	Class AnimSequence*                                          OutOfAnimToPlay;                                   // 0x20(0x8)
	bool                                                         Active;                                            // 0x28(0x1)
};


// Size 0x28
class AthenaAnimationShopInteractionAnimations: public None
{
public:
	byte                                                         ObjectType;                                        // 0x0(0x1)
	Class AnimSequence*                                          Into;                                              // 0x8(0x8)
	TArray<class Loop*>                                          Loop;                                              // 0x10(0x10)
	Class AnimSequence*                                          Out;                                               // 0x20(0x8)
};


// Size 0x20
class AthenaAnimationWaterSlideControlAnimData: public None
{
public:
	Class AnimSequence*                                          Into;                                              // 0x0(0x8)
	Class AnimSequence*                                          Action;                                            // 0x8(0x8)
	Class AnimSequence*                                          Outof;                                             // 0x10(0x8)
	bool                                                         IsSliding;                                         // 0x18(0x1)
};


// Size 0x60
class AthenaAnimationLoadOnDemandFishingAnimationData: public None
{
public:
};


// Size 0x60
class AthenaAnimationLoadOnDemandItemsAnimgraphStructure: public None
{
public:
};


// Size 0x40
class AthenaAnimationTalking: public None
{
public:
	bool                                                         Talking;                                           // 0x0(0x1)
};


// Size 0x20
class ManagedVulnerabilityLayer: public None
{
public:
	struct FName                                                 LayerName;                                         // 0x0(0x8)
	Class DamageableVulnerabilityLayer*                          VulnerabilityLayerToApply;                         // 0x10(0x8)
};


// Size 0x18
class ItemCategoryAIStrategyMovementPropertiesOverride: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	TArray<Struct ItemCategory>                                  AIStrategyMovementPropertiesOverrides;             // 0x8(0x10)
};


// Size 0x18
class AthenaAIItemEngageEnemyMethods: public None
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	TArray<Struct AthenaAIEngageEnemyData>                       EngageEnemyDataList;                               // 0x8(0x10)
};


// Size 0x10
class AthenaAIEngageEnemyData: public None
{
public:
	class                                                        EngageEnemyMethod;                                 // 0x0(0x8)
	float                                                        BestTargetRange;                                   // 0x8(0x4)
};


// Size 0x18
class SharkMaterialEntry: public None
{
public:
	Struct StringAssetReference                                  MaterialReference;                                 // 0x0(0x10)
	bool                                                         CastShadows;                                       // 0x10(0x1)
};


// Size 0x8
class SharkPlayerStats: public None
{
public:
	Struct PlayerStat                                            SharkDefeatStat;                                   // 0x0(0x4)
	Struct PlayerStat                                            SharkDefeatStatLegend;                             // 0x4(0x4)
};


// Size 0x40
class AISpawnActionStateConstructionInfo: public None
{
public:
	class                                                        HeldItemToBeginSpawn;                              // 0x30(0x8)
	byte                                                         SpawnType;                                         // 0x38(0x1)
	bool                                                         QuickSpawn;                                        // 0x39(0x1)
};


// Size 0x10
class AISpawnActionStateParams: public None
{
public:
	float                                                        SpawnTimeMax;                                      // 0x0(0x4)
	bool                                                         BeginInvis;                                        // 0x4(0x1)
	float                                                        InvisTime;                                         // 0x8(0x4)
	bool                                                         SkipAnimTimeCheck;                                 // 0xc(0x1)
};


// Size 0x18
class IslandItemSpawnLocationData: public None
{
public:
	Struct Vector                                                SpawnLocation;                                     // 0x0(0xc)
	Struct Vector                                                SpawnLocationNormal;                               // 0xc(0xc)
};


// Size 0x20
class AirGivingVolumeData: public None
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	float                                                        Radius;                                            // 0x18(0x4)
	bool                                                         UseLineOfSight;                                    // 0x1c(0x1)
	bool                                                         CanBeUsedOutsideIslandBounds;                      // 0x1d(0x1)
};


// Size 0x8
class IslandShipVisitor: public None
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x68
class Island: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	byte                                                         IslandType;                                        // 0x8(0x1)
	class                                                        Sea;                                               // 0x10(0x8)
	Struct Vector                                                IslandBoundsCentre;                                // 0x18(0xc)
	float                                                        IslandBoundsRadius;                                // 0x24(0x4)
	float                                                        IslandTriggerRadius;                               // 0x28(0x4)
	float                                                        IslandSafeZoneRadius;                              // 0x2c(0x4)
	float                                                        Rotation;                                          // 0x30(0x4)
	Struct Vector                                                CompassDirectionIslandCentre;                      // 0x34(0xc)
	Class AICreatureMovementModifierParamsDataAsset*             PetMovementParamsData;                             // 0x40(0x8)
	TArray<Struct FName>                                         IslandFeatureNames;                                // 0x58(0x10)
};


// Size 0x28
class IslandTeleportLocation: public None
{
public:
	Struct FString                                               Description;                                       // 0x0(0x10)
	Struct Vector                                                TeleportLocation;                                  // 0x10(0xc)
	float                                                        TeleportYaw;                                       // 0x1c(0x4)
	class                                                        SeaId;                                             // 0x20(0x8)
};


// Size 0x18
class TypedIslandItemSpawnLocationData: public None
{
public:
	class                                                        LocationType;                                      // 0x0(0x8)
	TArray<Struct LocationType>                                  Locations;                                         // 0x8(0x10)
};


// Size 0x20
class IslandMaterialZoneStatusMapping: public None
{
public:
	Class PhysicalMaterial*                                      SurfaceMaterial;                                   // 0x0(0x8)
	bool                                                         ActivateOnStart;                                   // 0x8(0x1)
	TArray<Struct ActivateOnStart>                               Status;                                            // 0x10(0x10)
};


// Size 0x28
class TreasureMapData: public None
{
public:
	Class TreasureMapDataAsset*                                  Map;                                               // 0x0(0x8)
	Class GeneratedLocationsDataAsset*                           LocationSource;                                    // 0x8(0x8)
	TArray<Struct LocationSource>                                TreasureLocations;                                 // 0x10(0x10)
	float                                                        RotationFromNorth;                                 // 0x20(0x4)
};


// Size 0x10
class ToggledSpawnerOverride: public None
{
public:
	Class AISpawner*                                             Spawner;                                           // 0x0(0x8)
	struct FName                                                 Toggle;                                            // 0x8(0x8)
};


// Size 0x4
class EventShipEnteredIslandVicinity: public None
{
public:
};


// Size 0x1
class EventIslandsSucessfullyCached: public None
{
public:
};


// Size 0x1
class EventIslandDiscoveredServer: public None
{
public:
};


// Size 0x1
class EventAllIslandsLoaded: public None
{
public:
};


// Size 0x48
class EventIslandDiscoveredNotification: public None
{
public:
	Struct FText                                                 IslandName;                                        // 0x0(0x38)
	byte                                                         IslandType;                                        // 0x38(0x1)
	struct FName                                                 SeaName;                                           // 0x3c(0x8)
	byte                                                         IslandActiveEventType;                             // 0x44(0x1)
};


// Size 0x10
class EventPlayerSetFootOnIsland: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x20
class EventPlayerLeftIslandVicinity: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
	struct FName                                                 IslandName;                                        // 0x10(0x8)
};


// Size 0x20
class EventPlayerEnteredIslandVicinity: public None
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
	struct FName                                                 IslandName;                                        // 0x10(0x8)
};


// Size 0x10
class EventSpawnComponentRequest: public None
{
public:
	Class SalvageItemSpawnComponent*                             SalvageItemSpawnComponent;                         // 0x0(0x8)
	int                                                          NumberOfLocationsRequested;                        // 0x8(0x4)
};


// Size 0x20
class SpawnLocationReservation: public None
{
public:
	class                                                        LocationType;                                      // 0x0(0x8)
	Struct IslandItemSpawnLocationData                           SpawnData;                                         // 0x8(0x18)
};


// Size 0x10
class SpawnRequests: public None
{
public:
	TArray<Struct SalvageSpawnCompRequest>                       Requests;                                          // 0x0(0x10)
};


// Size 0x10
class SalvageSpawnCompRequest: public None
{
public:
	Class SalvageItemSpawnComponent*                             SalvageItemSpawnComp;                              // 0x0(0x8)
};


// Size 0x10
class GameplayEventExclusionInfo: public None
{
public:
	class                                                        Type;                                              // 0x0(0x8)
	float                                                        ExclusionRadius;                                   // 0x8(0x4)
};


// Size 0x40
class TreasureMapDataCaptureParams: public None
{
public:
	Struct Vector                                                CameraPosition;                                    // 0x0(0xc)
	Struct Rotator                                               CameraOrientation;                                 // 0xc(0xc)
	Struct Vector                                                WorldSpaceCameraPosition;                          // 0x18(0xc)
	float                                                        CameraFOV;                                         // 0x24(0x4)
	float                                                        CameraAspect;                                      // 0x28(0x4)
	float                                                        CameraOrthoWidth;                                  // 0x2c(0x4)
	float                                                        CameraNearClip;                                    // 0x30(0x4)
	float                                                        CameraFarClip;                                     // 0x34(0x4)
	int                                                          TextureWidth;                                      // 0x38(0x4)
	int                                                          TextureHeight;                                     // 0x3c(0x4)
};


// Size 0x40
class WorldMapIslandDataCaptureParams: public None
{
public:
	Struct Vector                                                CameraPosition;                                    // 0x0(0xc)
	Struct Rotator                                               CameraOrientation;                                 // 0xc(0xc)
	Struct Vector                                                WorldSpaceCameraPosition;                          // 0x18(0xc)
	float                                                        CameraFOV;                                         // 0x24(0x4)
	float                                                        CameraAspect;                                      // 0x28(0x4)
	float                                                        CameraOrthoWidth;                                  // 0x2c(0x4)
	float                                                        CameraNearClip;                                    // 0x30(0x4)
	float                                                        CameraFarClip;                                     // 0x34(0x4)
	int                                                          TextureWidth;                                      // 0x38(0x4)
	int                                                          TextureHeight;                                     // 0x3c(0x4)
};


// Size 0x18
class IslandDiscoveredRpc: public None
{
public:
	struct FName                                                 IslandName;                                        // 0x10(0x8)
};


// Size 0x1
class EventSpawnedAsSalvageItem: public None
{
public:
	bool                                                         SpawnedAsSunkenItem;                               // 0x0(0x1)
};


// Size 0x28
class ServerMigrationCrewMigrationStatus: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	bool                                                         Migratable;                                        // 0x10(0x1)
	TArray<Struct Migratable>                                    Locations;                                         // 0x18(0x10)
};


// Size 0x2
class CrewArenaRivalVotingData: public None
{
public:
	bool                                                         IsCrewMemberInFavourOfChangingArenaLobby;          // 0x0(0x1)
	byte                                                         NumberOfVotes;                                     // 0x1(0x1)
};


// Size 0x3
class CrewMatchmakingVisibilityData: public None
{
public:
	bool                                                         Vote;                                              // 0x0(0x1)
	byte                                                         NumVotes;                                          // 0x1(0x1)
	byte                                                         MatchmakingVisibilityState;                        // 0x2(0x1)
};


// Size 0x10
class CrewMemberData: public None
{
public:
	bool                                                         Vote;                                              // 0x0(0x1)
	byte                                                         NumVotes;                                          // 0x1(0x1)
	byte                                                         BrigState;                                         // 0x2(0x1)
	Class PlayerState*                                           PlayerState;                                       // 0x8(0x8)
};


// Size 0x3
class CrewShipData: public None
{
public:
	bool                                                         Vote;                                              // 0x0(0x1)
	byte                                                         NumVotes;                                          // 0x1(0x1)
	byte                                                         ScuttleState;                                      // 0x2(0x1)
};


// Size 0x90
class Crew: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct Guid                                                  SessionId;                                         // 0x10(0x10)
	TArray<class Players*>                                       Players;                                           // 0x20(0x10)
	Struct CrewSessionTemplate                                   CrewSessionTemplate;                               // 0x30(0x38)
	Struct Guid                                                  LiveryID;                                          // 0x68(0x10)
	TArray<class AssociatedActors*>                              AssociatedActors;                                  // 0x80(0x10)
};


// Size 0x20
class CaptainedSessionSettings: public None
{
public:
	Struct FString                                               PirateId;                                          // 0x0(0x10)
	Struct Guid                                                  ShipId;                                            // 0x10(0x10)
};


// Size 0x10
class CrewMember: public None
{
public:
	Struct FString                                               UserId;                                            // 0x0(0x10)
};


// Size 0x18
class CrewShipEntry: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Class Actor*                                                 Ship;                                              // 0x10(0x8)
};


// Size 0x1
class ShipCustomizationCaptainOnlyChangedEvent: public None
{
public:
	bool                                                         IsShipCustomizationCaptainOnly;                    // 0x0(0x1)
};


// Size 0x1
class CaptainedSessionChangedEvent: public None
{
public:
	bool                                                         IsCaptainedSession;                                // 0x0(0x1)
};


// Size 0x88
class PlayerJoinedCrew: public None
{
public:
	Struct FText                                                 PlayerName;                                        // 0x10(0x38)
	Struct FText                                                 PlayerNameOverride;                                // 0x48(0x38)
	bool                                                         IsJoining;                                         // 0x80(0x1)
};


// Size 0x14
class ServerCrewChangedVisibilityStateEvent: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	byte                                                         CrewVisibilityState;                               // 0x10(0x1)
};


// Size 0x1
class EventChangeMatchmakingVisibility: public None
{
public:
	bool                                                         MatchmakingEnabled;                                // 0x0(0x1)
};


// Size 0x1
class EventScuttleShip: public None
{
public:
};


// Size 0x18
class EventPlayerRemovedFromCrew: public None
{
public:
	Class PlayerState*                                           UniqueId;                                          // 0x10(0x8)
};


// Size 0x18
class EventPlayerAddedToCrew: public None
{
public:
	Class PlayerState*                                           UniqueId;                                          // 0x10(0x8)
};


// Size 0x10
class EventShipRemovedFromCrew: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x18
class EventShipAddedToCrew: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Class Actor*                                                 ShipActor;                                         // 0x10(0x8)
};


// Size 0x4
class EventPlayerTaleProgressUpdated: public None
{
public:
};


// Size 0x8
class CrewBaseTelemetryFragmentPlayerControllerLookupInput: public None
{
public:
	Class PlayerState*                                           CrewMemberPlayerState;                             // 0x0(0x8)
};


// Size 0x8
class CrewBaseTelemetryFragmentPlayerCharacterLookupInput: public None
{
public:
	Class Character*                                             CrewMemberCharacter;                               // 0x0(0x8)
};


// Size 0x10
class CrewBaseTelemetryFragmentInput: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
};


// Size 0x8
class ServerPopulationTelemetryFragment: public None
{
public:
	int                                                          NumberOfPlayers;                                   // 0x0(0x4)
	int                                                          NumberOfCrews;                                     // 0x4(0x4)
};


// Size 0x58
class CrewBaseTelemetryFragment: public None
{
public:
	Struct Guid                                                  CrewId;                                            // 0x0(0x10)
	Struct Guid                                                  CrewSessionId;                                     // 0x10(0x10)
	Struct Guid                                                  AllianceId;                                        // 0x20(0x10)
	int                                                          CurrentCrewCount;                                  // 0x30(0x4)
	Struct FString                                               SessionType;                                       // 0x38(0x10)
	Struct FString                                               CrewType;                                          // 0x48(0x10)
};


// Size 0x20
class PlayerBriggedEndTelemetryEvent: public None
{
public:
	Struct Guid                                                  BriggedId;                                         // 0x0(0x10)
	Struct DateTime                                              BriggedStartDateTime;                              // 0x10(0x8)
	byte                                                         ReleaseReason;                                     // 0x18(0x1)
};


// Size 0x10
class SessionVisibilityChangedTelemetryEvent: public None
{
public:
	Struct FString                                               SessionVisibility;                                 // 0x0(0x10)
};


// Size 0x1
class ShipScuttledTelemetryEvent: public None
{
public:
};


// Size 0x1
class CrewPlayerLeftTelemetryEvent: public None
{
public:
};


// Size 0x1
class CrewPlayerJoinedTelemetryEvent: public None
{
public:
};


// Size 0x1
class CrewDestroyedTelemetryEvent: public None
{
public:
};


// Size 0x1
class CrewCreatedTelemetryEvent: public None
{
public:
};


// Size 0x1
class EventWaterSplashExitWater: public None
{
public:
};


// Size 0x1
class EventWaterSplashEnterWater: public None
{
public:
};


// Size 0x8
class BuoyancyComponentExclusionParams: public None
{
public:
	float                                                        MaxDistanceCheck;                                  // 0x0(0x4)
	byte                                                         HitsChannel;                                       // 0x4(0x1)
};


// Size 0x1c
class BuoyancyComponentLockToSurfaceParams: public None
{
public:
	bool                                                         Enabled;                                           // 0x0(0x1)
	float                                                        SpringAcceleration;                                // 0x4(0x4)
	float                                                        EnterLockStateBlendTime;                           // 0x8(0x4)
	float                                                        ExitLockStateBlendTime;                            // 0xc(0x4)
	float                                                        ChoppinessScalar;                                  // 0x10(0x4)
	float                                                        SubmersionHint;                                    // 0x14(0x4)
	float                                                        DistanceFromWaterSurfaceToConsiderSurfaced;        // 0x18(0x4)
};


// Size 0x34
class BuoyancyComponentSinkingParams: public None
{
public:
	float                                                        BuoyancyBlendTimeWhenSinking;                      // 0x0(0x4)
	byte                                                         FloatingToSinkingBuoyancyCurveTransition;          // 0x4(0x1)
	float                                                        FloatingToSinkingBuoyancyCurveBlendTime;           // 0x8(0x4)
	float                                                        FinalSinkingBuoyancy;                              // 0xc(0x4)
	float                                                        SinkingTimeUntilDestroy;                           // 0x10(0x4)
	float                                                        DisappearingTime;                                  // 0x14(0x4)
	bool                                                         AutomaticSinkingEnabled;                           // 0x18(0x1)
	Struct FloatRange                                            TimeInFloatingStateBeforeSinking;                  // 0x1c(0x10)
	float                                                        WaterDepthToAllowItemToSink;                       // 0x2c(0x4)
	byte                                                         WorldHitsTraceChannel;                             // 0x30(0x1)
};


// Size 0x10
class BuoyancyStateChanged: public None
{
public:
};


// Size 0x10
class EventBuoyantSpawnedObjectOwnershipTransferred: public None
{
public:
};


}