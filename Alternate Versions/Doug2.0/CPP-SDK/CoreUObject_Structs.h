// Generated by DougTheDruid#2784 on Discord
// https://github.com/DougTheDruid
namespace DougsSDKDumper
{
//-----
// Classes
//-----

// Size 0x0
class Default__ScriptStruct: public None
{
public:
};


// Size 0x10
class Guid: public None
{
public:
	int                                                          A;                                                 // 0x0(0x4)
	int                                                          B;                                                 // 0x4(0x4)
	int                                                          C;                                                 // 0x8(0x4)
	int                                                          D;                                                 // 0xc(0x4)
};


// Size 0xc
class Vector: public None
{
public:
	float                                                        X;                                                 // 0x0(0x4)
	float                                                        Y;                                                 // 0x4(0x4)
	float                                                        Z;                                                 // 0x8(0x4)
};


// Size 0x10
class Vector4: public None
{
public:
	float                                                        X;                                                 // 0x0(0x4)
	float                                                        Y;                                                 // 0x4(0x4)
	float                                                        Z;                                                 // 0x8(0x4)
	float                                                        W;                                                 // 0xc(0x4)
};


// Size 0x8
class Vector2D: public None
{
public:
	float                                                        X;                                                 // 0x0(0x4)
	float                                                        Y;                                                 // 0x4(0x4)
};


// Size 0x18
class TwoVectors: public None
{
public:
	Struct Vector                                                v1;                                                // 0x0(0xc)
	Struct Vector                                                v2;                                                // 0xc(0xc)
};


// Size 0x10
class Plane: public None
{
public:
	float                                                        W;                                                 // 0xc(0x4)
};


// Size 0xc
class Rotator: public None
{
public:
	float                                                        Pitch;                                             // 0x0(0x4)
	float                                                        Yaw;                                               // 0x4(0x4)
	float                                                        Roll;                                              // 0x8(0x4)
};


// Size 0x10
class Quat: public None
{
public:
	float                                                        X;                                                 // 0x0(0x4)
	float                                                        Y;                                                 // 0x4(0x4)
	float                                                        Z;                                                 // 0x8(0x4)
	float                                                        W;                                                 // 0xc(0x4)
};


// Size 0x4
class PackedNormal: public None
{
public:
	byte                                                         X;                                                 // 0x0(0x1)
	byte                                                         Y;                                                 // 0x1(0x1)
	byte                                                         Z;                                                 // 0x2(0x1)
	byte                                                         W;                                                 // 0x3(0x1)
};


// Size 0x8
class IntPoint: public None
{
public:
	int                                                          X;                                                 // 0x0(0x4)
	int                                                          Y;                                                 // 0x4(0x4)
};


// Size 0xc
class IntVector: public None
{
public:
	int                                                          X;                                                 // 0x0(0x4)
	int                                                          Y;                                                 // 0x4(0x4)
	int                                                          Z;                                                 // 0x8(0x4)
};


// Size 0x4
class Color: public None
{
public:
	byte                                                         B;                                                 // 0x0(0x1)
	byte                                                         G;                                                 // 0x1(0x1)
	byte                                                         R;                                                 // 0x2(0x1)
	byte                                                         A;                                                 // 0x3(0x1)
};


// Size 0x10
class LinearColor: public None
{
public:
	float                                                        R;                                                 // 0x0(0x4)
	float                                                        G;                                                 // 0x4(0x4)
	float                                                        B;                                                 // 0x8(0x4)
	float                                                        A;                                                 // 0xc(0x4)
};


// Size 0x1c
class Box: public None
{
public:
	Struct Vector                                                Min;                                               // 0x0(0xc)
	Struct Vector                                                Max;                                               // 0xc(0xc)
	byte                                                         IsValid;                                           // 0x18(0x1)
};


// Size 0x14
class Box2D: public None
{
public:
	Struct Vector2D                                              Min;                                               // 0x0(0x8)
	Struct Vector2D                                              Max;                                               // 0x8(0x8)
	byte                                                         IsValid;                                           // 0x10(0x1)
};


// Size 0x1c
class BoxSphereBounds: public None
{
public:
	Struct Vector                                                Origin;                                            // 0x0(0xc)
	Struct Vector                                                BoxExtent;                                         // 0xc(0xc)
	float                                                        SphereRadius;                                      // 0x18(0x4)
};


// Size 0x3c
class OrientedBox: public None
{
public:
	Struct Vector                                                Center;                                            // 0x0(0xc)
	Struct Vector                                                AxisX;                                             // 0xc(0xc)
	Struct Vector                                                AxisY;                                             // 0x18(0xc)
	Struct Vector                                                AxisZ;                                             // 0x24(0xc)
	float                                                        ExtentX;                                           // 0x30(0x4)
	float                                                        ExtentY;                                           // 0x34(0x4)
	float                                                        ExtentZ;                                           // 0x38(0x4)
};


// Size 0x40
class Matrix: public None
{
public:
	Struct Plane                                                 XPlane;                                            // 0x0(0x10)
	Struct Plane                                                 YPlane;                                            // 0x10(0x10)
	Struct Plane                                                 ZPlane;                                            // 0x20(0x10)
	Struct Plane                                                 WPlane;                                            // 0x30(0x10)
};


// Size 0x14
class InterpCurvePointFloat: public None
{
public:
	float                                                        InVal;                                             // 0x0(0x4)
	float                                                        OutVal;                                            // 0x4(0x4)
	float                                                        ArriveTangent;                                     // 0x8(0x4)
	float                                                        LeaveTangent;                                      // 0xc(0x4)
	byte                                                         InterpMode;                                        // 0x10(0x1)
};


// Size 0x18
class InterpCurveFloat: public None
{
public:
	TArray<Struct InterpCurvePointVector2D>                      Points;                                            // 0x0(0x10)
	bool                                                         bIsLooped;                                         // 0x10(0x1)
	float                                                        LoopKeyOffset;                                     // 0x14(0x4)
};


// Size 0x20
class InterpCurvePointVector2D: public None
{
public:
	float                                                        InVal;                                             // 0x0(0x4)
	Struct Vector2D                                              OutVal;                                            // 0x4(0x8)
	Struct Vector2D                                              ArriveTangent;                                     // 0xc(0x8)
	Struct Vector2D                                              LeaveTangent;                                      // 0x14(0x8)
	byte                                                         InterpMode;                                        // 0x1c(0x1)
};


// Size 0x18
class InterpCurveVector2D: public None
{
public:
	TArray<Struct InterpCurvePointVector>                        Points;                                            // 0x0(0x10)
	bool                                                         bIsLooped;                                         // 0x10(0x1)
	float                                                        LoopKeyOffset;                                     // 0x14(0x4)
};


// Size 0x2c
class InterpCurvePointVector: public None
{
public:
	float                                                        InVal;                                             // 0x0(0x4)
	Struct Vector                                                OutVal;                                            // 0x4(0xc)
	Struct Vector                                                ArriveTangent;                                     // 0x10(0xc)
	Struct Vector                                                LeaveTangent;                                      // 0x1c(0xc)
	byte                                                         InterpMode;                                        // 0x28(0x1)
};


// Size 0x18
class InterpCurveVector: public None
{
public:
	TArray<Struct InterpCurvePointQuat>                          Points;                                            // 0x0(0x10)
	bool                                                         bIsLooped;                                         // 0x10(0x1)
	float                                                        LoopKeyOffset;                                     // 0x14(0x4)
};


// Size 0x50
class InterpCurvePointQuat: public None
{
public:
	float                                                        InVal;                                             // 0x0(0x4)
	Struct Quat                                                  OutVal;                                            // 0x10(0x10)
	Struct Quat                                                  ArriveTangent;                                     // 0x20(0x10)
	Struct Quat                                                  LeaveTangent;                                      // 0x30(0x10)
	byte                                                         InterpMode;                                        // 0x40(0x1)
};


// Size 0x18
class InterpCurveQuat: public None
{
public:
	TArray<Struct InterpCurvePointTwoVectors>                    Points;                                            // 0x0(0x10)
	bool                                                         bIsLooped;                                         // 0x10(0x1)
	float                                                        LoopKeyOffset;                                     // 0x14(0x4)
};


// Size 0x50
class InterpCurvePointTwoVectors: public None
{
public:
	float                                                        InVal;                                             // 0x0(0x4)
	Struct TwoVectors                                            OutVal;                                            // 0x4(0x18)
	Struct TwoVectors                                            ArriveTangent;                                     // 0x1c(0x18)
	Struct TwoVectors                                            LeaveTangent;                                      // 0x34(0x18)
	byte                                                         InterpMode;                                        // 0x4c(0x1)
};


// Size 0x18
class InterpCurveTwoVectors: public None
{
public:
	TArray<Struct InterpCurvePointLinearColor>                   Points;                                            // 0x0(0x10)
	bool                                                         bIsLooped;                                         // 0x10(0x1)
	float                                                        LoopKeyOffset;                                     // 0x14(0x4)
};


// Size 0x38
class InterpCurvePointLinearColor: public None
{
public:
	float                                                        InVal;                                             // 0x0(0x4)
	Struct LinearColor                                           OutVal;                                            // 0x4(0x10)
	Struct LinearColor                                           ArriveTangent;                                     // 0x14(0x10)
	Struct LinearColor                                           LeaveTangent;                                      // 0x24(0x10)
	byte                                                         InterpMode;                                        // 0x34(0x1)
};


// Size 0x18
class InterpCurveLinearColor: public None
{
public:
	TArray<Struct Transform>                                     Points;                                            // 0x0(0x10)
	bool                                                         bIsLooped;                                         // 0x10(0x1)
	float                                                        LoopKeyOffset;                                     // 0x14(0x4)
};


// Size 0x30
class Transform: public None
{
public:
	Struct Quat                                                  Rotation;                                          // 0x0(0x10)
	Struct Vector                                                Translation;                                       // 0x10(0xc)
	Struct Vector                                                Scale3D;                                           // 0x20(0xc)
};


// Size 0x8
class RandomStream: public None
{
public:
	int                                                          InitialSeed;                                       // 0x0(0x4)
	int                                                          Seed;                                              // 0x4(0x4)
};


// Size 0x8
class DateTime: public None
{
public:
};


// Size 0x8
class Timespan: public None
{
public:
};


// Size 0x10
class StringAssetReference: public None
{
public:
	Struct FString                                               AssetLongPathname;                                 // 0x0(0x10)
};


// Size 0x10
class StringClassReference: public None
{
public:
};


// Size 0x1
class FallbackStruct: public None
{
public:
};


// Size 0x8
class FloatRangeBound: public None
{
public:
	byte                                                         Type;                                              // 0x0(0x1)
	float                                                        Value;                                             // 0x4(0x4)
};


// Size 0x10
class FloatRange: public None
{
public:
	Struct FloatRangeBound                                       LowerBound;                                        // 0x0(0x8)
	Struct FloatRangeBound                                       UpperBound;                                        // 0x8(0x8)
};


// Size 0x8
class Int32RangeBound: public None
{
public:
	byte                                                         Type;                                              // 0x0(0x1)
	int                                                          Value;                                             // 0x4(0x4)
};


// Size 0x10
class Int32Range: public None
{
public:
	Struct Int32RangeBound                                       LowerBound;                                        // 0x0(0x8)
	Struct Int32RangeBound                                       UpperBound;                                        // 0x8(0x8)
};


// Size 0x8
class FloatInterval: public None
{
public:
	float                                                        Min;                                               // 0x0(0x4)
	float                                                        Max;                                               // 0x4(0x4)
};


// Size 0x8
class Int32Interval: public None
{
public:
	int                                                          Min;                                               // 0x0(0x4)
	int                                                          Max;                                               // 0x4(0x4)
};


}