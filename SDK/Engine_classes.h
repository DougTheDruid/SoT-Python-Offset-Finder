#pragma once

// Name: SoT, Version: 2.4.0


/*!!DEFINE!!*/

/*!!HELPER_DEF!!*/

/*!!HELPER_INC!!*/

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Engine.ActorComponent
// 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData_GRZN[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                      // 0x0030(0x0050) (Edit, DisableEditOnInstance)
	TArray<struct FName>                               ComponentTags;                                             // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                                     // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_1HIB[0x10];                                    // 0x00A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x00B0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected)
	unsigned char                                      UnknownData_2I5J : 3;                                      // 0x00C0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bReplicates : 1;                                           // 0x00C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNetAddressable : 1;                                       // 0x00C0(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_G3LM : 3;                                      // 0x00C0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_UWFN : 6;                                      // 0x00C1(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCreatedByConstructionScript : 1;                          // 0x00C1(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bInstanceComponent : 1;                                    // 0x00C1(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bAutoActivate : 1;                                         // 0x00C2(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bIsActive : 1;                                             // 0x00C2(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor)
	unsigned char                                      bEditableWhenInherited : 1;                                // 0x00C2(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_4IP7 : 5;                                      // 0x00C2(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_66RP : 3;                                      // 0x00C3(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bNeedsLoadForClient : 1;                                   // 0x00C3(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bNeedsLoadForServer : 1;                                   // 0x00C3(0x0001) BIT_FIELD (Edit, NoDestructor)
	TEnumAsByte<Engine_EComponentNetDormancy>          TargetNetDormancy;                                         // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EComponentCreationMethod>       CreationMethod;                                            // 0x00C5(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0ZMF[0x2];                                     // 0x00C6(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ActorComponent");
		return ptr;
	}



	void ToggleActive();
	void SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickEnabled(bool bEnabled);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	TEnumAsByte<Engine_EComponentNetDormancy> GetTargetNetDormancy();
	class AActor* GetOwner();
	bool FlushNetDormancy();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Actor
// 0x03A8 (FullSize[0x03D0] - InheritedSize[0x0028])
class AActor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                          // 0x0028(0x0050) (Edit, DisableEditOnInstance)
	float                                              CustomTimeDilation;                                        // 0x0078(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bAllowRemovalFromServerWhenCollisionMerged : 1;            // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowRemovalFromServerWhenAutomaticallyInstanced : 1;     // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHidden : 1;                                               // 0x007C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, Interp, NoDestructor)
	unsigned char                                      bNetTemporary : 1;                                         // 0x007C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bNetStartup : 1;                                           // 0x007C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                  // 0x007C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bAlwaysRelevant : 1;                                       // 0x007C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bReplicateMovement : 1;                                    // 0x007C(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	unsigned char                                      bTearOff : 1;                                              // 0x007D(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bExchangedRoles : 1;                                       // 0x007D(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bPendingNetUpdate : 1;                                     // 0x007D(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bNetLoadOnClient : 1;                                      // 0x007D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                 // 0x007D(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bBlockInput : 1;                                           // 0x007D(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_6Q2M : 1;                                      // 0x007D(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bCanBeInCluster : 1;                                       // 0x007D(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, Protected)
	unsigned char                                      UnknownData_KS67 : 2;                                      // 0x007E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bActorEnableCollision : 1;                                 // 0x007E(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_75QU : 1;                                      // 0x007E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bReplicateAttachment : 1;                                  // 0x007E(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_F5BI : 1;                                      // 0x007E(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bReplicates : 1;                                           // 0x007E(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_FP54[0x1];                                     // 0x007F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMulticastSparseDelegate                    OnPreNetOwnershipChange;                                   // 0x0080(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	TEnumAsByte<Engine_ENetRole>                       RemoteRole;                                                // 0x0081(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LL2E[0x6];                                     // 0x0082(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AActor*                                      Owner;                                                     // 0x0088(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EActorSpawnRestrictions>        SpawnRestrictions;                                         // 0x0090(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_PSVT[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRepMovement                                ReplicatedMovement;                                        // 0x0094(0x0038) (Edit, Net, DisableEditOnInstance, RepNotify, AdvancedDisplay)
	unsigned char                                      UnknownData_C709[0x4];                                     // 0x00CC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRepAttachment                              AttachmentReplication;                                     // 0x00D0(0x0048) (Net, Transient, RepNotify, ContainsInstancedReference)
	TEnumAsByte<Engine_ENetRole>                       Role;                                                      // 0x0118(0x0001) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_OC1Z[0x1];                                     // 0x0119(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoReceiveInput;                                          // 0x011A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_T6W0[0x1];                                     // 0x011B(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                InputPriority;                                             // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInputComponent*                             InputComponent;                                            // 0x0120(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NetCullDistanceSquared;                                    // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_620B[0x4];                                     // 0x012C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NetTag;                                                    // 0x0130(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NetUpdateTime;                                             // 0x0134(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NetUpdateFrequency;                                        // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              NetPriority;                                               // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastNetUpdateTime;                                         // 0x0140(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       NetDriverName;                                             // 0x0144(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                              // 0x014C(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bCanBeDamaged : 1;                                         // 0x014C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bActorIsBeingDestroyed : 1;                                // 0x014C(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor)
	unsigned char                                      bCollideWhenPlacing : 1;                                   // 0x014C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                    // 0x014C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bRelevantForNetworkReplays : 1;                            // 0x014C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_VU70[0x3];                                     // 0x014D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESpawnActorCollisionHandlingMethod> SpawnCollisionHandlingMethod;                              // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_I5WK[0x7];                                     // 0x0151(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APawn*                                       Instigator;                                                // 0x0158(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class AActor*>                              Children;                                                  // 0x0160(0x0010) (ZeroConstructor, Transient)
	class USceneComponent*                             RootComponent;                                             // 0x0170(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                  // 0x0178(0x0010) (ZeroConstructor, Transient, Protected)
	float                                              InitialLifeSpan;                                           // 0x0188(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EQKV[0x4];                                     // 0x018C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;               // 0x0190(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_X91M[0x7];                                     // 0x0191(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               Layers;                                                    // 0x0198(0x0010) (ZeroConstructor)
	struct FActorPtr                                   ParentComponentActor;                                      // 0x01A8(0x0008)
	TArray<TWeakObjectPtr<class AActor>>               ChildComponentActors;                                      // 0x01B0(0x0010) (ZeroConstructor, UObjectWrapper)
	unsigned char                                      UnknownData_HDM5[0x8];                                     // 0x01C0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bActorSeamlessTraveled : 1;                                // 0x01C8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIgnoresOriginShifting : 1;                                // 0x01C8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableAutoLODGeneration : 1;                              // 0x01C8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_GPK5[0x7];                                     // 0x01C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               Tags;                                                      // 0x01D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay)
	struct FName                                       Feature;                                                   // 0x01E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash)
	uint64_t                                           HiddenEditorViews;                                         // 0x01E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMulticastSparseDelegate                    OnActorBeginOverlap;                                       // 0x01F0(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	struct FMulticastSparseDelegate                    OnActorEndOverlap;                                         // 0x01F1(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	struct FMulticastSparseDelegate                    OnActorHit;                                                // 0x01F2(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	struct FMulticastSparseDelegate                    OnDestroyed;                                               // 0x01F3(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	unsigned char                                      UnknownData_E9DI[0x3C];                                    // 0x01F4(0x003C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMulticastSparseDelegate                    OnEndPlay;                                                 // 0x0230(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	bool                                               bDoOverlapNotifiesOnLoad;                                  // 0x0231(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_GEHH[0xF6];                                    // 0x0232(0x00F6) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                                // 0x0328(0x0010) (ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient)
	TArray<class UActorComponent*>                     InstanceComponents;                                        // 0x0338(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      UnknownData_VTNX[0x8];                                     // 0x0348(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              ChildActorInterfaceProviders;                              // 0x0350(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_AY5B[0x68];                                    // 0x0360(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             DormancyLingeringInSeconds;                                // 0x03C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}



	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetIgnoreNetTransformUpdates(bool bInIgnoreNetTransformUpdates);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	bool SetActorRotation(const struct FRotator& NewRotation);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<Engine_EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased();
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void OnEndPlayDynamicMulticastEvent__DelegateSignature(class AActor* EndPlayActor);
	void OnDestroyedDynamicMulticastEvent__DelegateSignature(class AActor* DeletedActor);
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasNetOwner();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	unsigned char GetPxActorCapacityForPhysXAggregate();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
	float GetLifeSpan();
	class UObject* GetInterfaceImplementer(class UClass* InterfaceClass);
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	void GetComponentInterfacesByClass(TArray<class UActorComponent*>* OutInterfaces, class UClass* InterfaceClass);
	class UActorComponent* GetComponentInterfaceByClass(class UClass* InterfaceClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	class AActor* GetAttachParentActor();
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	bool FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AttachRootComponentToNoReplication(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void AttachActorToActorNoReplication(class AActor* InParentActor, const struct FName& InSocketName, bool bWeldSimulatedBodies);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DataAsset
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataAsset : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DataAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintFunctionLibrary : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlueprintFunctionLibrary");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneComponent
// 0x01E8 (FullSize[0x02B0] - InheritedSize[0x00C8])
class USceneComponent : public UActorComponent
{
public:
	class USceneComponent*                             AttachParent;                                              // 0x00C8(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                     AttachChildren;                                            // 0x00D0(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference)
	struct FName                                       AttachSocketName;                                          // 0x00E0(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRequiresCustomLocation : 1;                               // 0x00E8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAbsoluteLocation : 1;                                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAbsoluteTranslation : 1;                                  // 0x00E8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bAbsoluteRotation : 1;                                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAbsoluteScale : 1;                                        // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay)
	unsigned char                                      bVisible : 1;                                              // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor)
	unsigned char                                      bHiddenInGame : 1;                                         // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                            // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;             // 0x00E9(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseAttachParentBound : 1;                                 // 0x00E9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bComponentIsUnionOfChildren : 1;                           // 0x00E9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_D4Y4 : 1;                                      // 0x00E9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bJitterReduction : 1;                                      // 0x00E9(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_8GV6 : 1;                                      // 0x00E9(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      CacheRootVelocity : 1;                                     // 0x00E9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bWorldToComponentUpdated : 1;                              // 0x00E9(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_GRN7[0xE];                                     // 0x00EA(0x000E) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                             // 0x00F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper)
	unsigned char                                      UnknownData_R97E[0x1C];                                    // 0x0100(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RelativeScale3D;                                           // 0x011C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, Interp, NoDestructor)
	struct FVector                                     RelativeLocation;                                          // 0x0128(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	struct FRotator                                    RelativeRotation;                                          // 0x0134(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_85QM[0xE0];                                    // 0x0140(0x00E0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EComponentMobility>             Mobility;                                                  // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EDetailMode>                    DetailMode;                                                // 0x0221(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5ISO[0xA];                                     // 0x0222(0x000A) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ComponentVelocity;                                         // 0x022C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    PhysicsVolumeChangedDelegate;                              // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_6G8M[0x10];                                    // 0x0248(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               SocketVelocitiesToCache;                                   // 0x0258(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_VRPH[0x48];                                    // 0x0268(0x0048) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneComponent");
		return ptr;
	}



	void ToggleVisibility(bool bPropagateToChildren);
	void SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	bool SharesBasis(class USceneComponent* Other);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	bool K2_TryGetCachedSocketVelocity(const struct FName& SocketName, struct FVector* OutVelocity);
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<Engine_EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<Engine_ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	struct FTransform GetAttachedBasisTransform();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Pawn
// 0x0078 (FullSize[0x0448] - InheritedSize[0x03D0])
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData_736P[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseControllerRotationPitch : 1;                           // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseControllerRotationYaw : 1;                             // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseControllerRotationRoll : 1;                            // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                        // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_MXL8[0x3];                                     // 0x03D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseEyeHeight;                                             // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoPossessPlayer;                                         // 0x03E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAutoPossessAI>                 AutoPossessAI;                                             // 0x03E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_SEM3[0x6];                                     // 0x03E2(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AIControllerClass;                                         // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class APlayerState*                                PlayerState;                                               // 0x03F0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      RemoteViewPitch;                                           // 0x03F8(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_TSX5[0x7];                                     // 0x03F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AController*                                 LastHitBy;                                                 // 0x0400(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                                 Controller;                                                // 0x0408(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4S1J[0x18];                                    // 0x0410(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ControlInputVector;                                        // 0x0428(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     LastControlInputVector;                                    // 0x0434(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_A7D7[0x8];                                     // 0x0440(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}



	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector K2_GetMovementInputVector();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsControlled();
	struct FVector GetPendingMovementInputVector();
	struct FVector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class AActor* STATIC_GetMovementBaseActor(class APawn* Pawn);
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AController* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Character
// 0x0190 (FullSize[0x05D8] - InheritedSize[0x0448])
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                      // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*                 CharacterMovement;                                         // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBasedMovementInfo                          BasedMovement;                                             // 0x0460(0x0038) (ContainsInstancedReference, Protected)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                   // 0x0498(0x0038) (Net, RepNotify, ContainsInstancedReference)
	struct FVector                                     BaseTranslationOffset;                                     // 0x04D0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_PF7E[0x4];                                     // 0x04DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FQuat                                       BaseRotationOffset;                                        // 0x04E0(0x0010) (IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      ReplicatedMovementMode;                                    // 0x04F0(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bInBaseReplication;                                        // 0x04F1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_B2E1[0x2];                                     // 0x04F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CrouchedEyeHeight;                                         // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIsCrouched : 1;                                           // 0x04F8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bPressedJump : 1;                                          // 0x04F8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bClientUpdating : 1;                                       // 0x04F8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bClientWasFalling : 1;                                     // 0x04F8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bClientResimulateRootMotion : 1;                           // 0x04F8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bSimGravityDisabled : 1;                                   // 0x04F8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                           // 0x04F8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_E3D3[0x3];                                     // 0x04F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              JumpKeyHoldTime;                                           // 0x04FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              JumpMaxHoldTime;                                           // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_AZPV[0x4];                                     // 0x0504(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                         // 0x0508(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_ICWM[0x10];                                    // 0x0518(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                                // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_SELX[0x8];                                     // 0x0538(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                    // 0x0540(0x0040) (Transient)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                        // 0x0580(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference)
	struct FRepRootMotionMontage                       RepRootMotion;                                             // 0x0590(0x0040) (Net, RepNotify, ContainsInstancedReference)
	unsigned char                                      UnknownData_CHQZ[0x8];                                     // 0x05D0(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Character");
		return ptr;
	}



	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void SetReplicateMovement(bool bInReplicateMovement);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<Engine_EMovementMode> PrevMovementMode, TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	class UAnimMontage* GetCurrentMontage();
	void Crouch(bool bClientSimulation);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	bool CanJumpInternal();
	bool CanJump();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimInstance
// 0x0418 (FullSize[0x0440] - InheritedSize[0x0028])
class UAnimInstance : public UObject
{
public:
	class USkeleton*                                   CurrentSkeleton;                                           // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAnimTickRecord>                     UngroupedActivePlayers;                                    // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<struct FAnimGroupInstance>                  SyncGroups;                                                // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<struct FActiveVertexAnim>                   VertexAnims;                                               // 0x0050(0x0010) (ZeroConstructor, Transient)
	TEnumAsByte<Engine_ERootMotionMode>                RootMotionMode;                                            // 0x0060(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bWarnAboutBlueprintUsage;                                  // 0x0061(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8B58[0x6];                                     // 0x0062(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                      // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                          // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                            // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStateEntered;                                            // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStateExited;                                             // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStateInitialised;                                        // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnimUpdated;                                             // 0x00C8(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData_6SKO[0x70];                                    // 0x00D8(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bQueueMontageEvents;                                       // 0x0148(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6WZH[0xF7];                                    // 0x0149(0x00F7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                                     // 0x0240(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference)
	unsigned char                                      UnknownData_N8SG[0x100];                                   // 0x0250(0x0100) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int16_t                                            SlotNodeInitializationCounter;                             // 0x0350(0x0002) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int16_t                                            GraphTraversalCounter;                                     // 0x0352(0x0002) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RVBR[0x54];                                    // 0x0354(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bBoneCachesInvalidated;                                    // 0x03A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5VLT[0x8F];                                    // 0x03A9(0x008F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_7OPH : 1;                                      // 0x0438(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bBlueprintAnimUpdateEnabled : 1;                           // 0x0438(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_M9ZW[0x7];                                     // 0x0439(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimInstance");
		return ptr;
	}



	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	class APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime);
	float PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage);
	void Montage_Resume(class UAnimMontage* Montage);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate);
	void Montage_Pause(class UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage);
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage);
	bool Montage_IsPlaying(class UAnimMontage* Montage);
	bool Montage_IsActive(class UAnimMontage* Montage);
	struct FName Montage_GetCurrentSection(class UAnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName);
	float GetSyncGroupPosition(const struct FName& Name);
	float GetStateWeight(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);
	class USkeletalMeshComponent* GetOwningComponent();
	class AActor* GetOwningActor();
	float GetMaxPlayingAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetMaxAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float GetCurveValue(const struct FName& CurveName);
	struct FName GetCurrentStateName(int MachineIndex);
	float GetCurrentStateElapsedTime(int MachineIndex);
	float STATIC_GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float STATIC_GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset);
	void ClearMorphTargets();
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintUninitializeAnimation();
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
	void AnimNotify_Sound(class UAnimNotify* Notify);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UAnimNotify : public UObject
{
public:
	bool                                               PlayedWithSequencer;                                       // 0x0028(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6FDL[0xF];                                     // 0x0029(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}



	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	struct FString GetNotifyName();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyState
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimNotifyState : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotifyState");
		return ptr;
	}



	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	struct FString GetNotifyName();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                                // 0x0028(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       SocketName;                                                // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     LocationOffset;                                            // 0x0038(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    RotationOffset;                                            // 0x0044(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOwnerOnlySee;                                             // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOwnerNoSee;                                               // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bDestroyAtEnd;                                             // 0x0052(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bWorldOwnedEffect;                                         // 0x0053(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RRIP[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotifyState_TimedParticleEffect");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModule
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                          // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUpdateModule : 1;                                         // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bFinalUpdateModule : 1;                                    // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                  // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCurvesAsColor : 1;                                        // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      b3DDrawMode : 1;                                           // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSupported3DDrawMode : 1;                                  // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0028(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEditable : 1;                                             // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      LODDuplicate : 1;                                          // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSupportsRandomSeed : 1;                                   // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRequiresLoopingNotification : 1;                          // 0x0029(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_X5OZ[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      LODValidity;                                               // 0x002C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_H9O2[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        ModuleInstanceOffsets;                                     // 0x0030(0x0010) (ZeroConstructor, Transient)
	TArray<int>                                        ModuleOffsets;                                             // 0x0040(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleSizeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSize
// 0x0160 (FullSize[0x01B0] - InheritedSize[0x0050])
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	unsigned char                                      bUseGroupAForAll : 1;                                      // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_QSTI[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      StartSize;                                                 // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      AdditionalStartSizes[0x5];                                 // 0x0090(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bKeepAspectRatio : 1;                                      // 0x01A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreComponentScale : 1;                                 // 0x01A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_SW70[0x7];                                     // 0x01A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (FullSize[0x01D0] - InheritedSize[0x01B0])
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x01B0(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      MultiplyX : 1;                                             // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      MultiplyY : 1;                                             // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      MultiplyZ : 1;                                             // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GDDI[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraComponent
// 0x0570 (FullSize[0x0820] - InheritedSize[0x02B0])
class UCameraComponent : public USceneComponent
{
public:
	float                                              FieldOfView;                                               // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              OrthoWidth;                                                // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              OrthoNearClipPlane;                                        // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              OrthoFarClipPlane;                                         // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              AspectRatio;                                               // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x02C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                 // 0x02C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x02C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_REGL[0x3];                                     // 0x02C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECameraProjectionMode>          ProjectionMode;                                            // 0x02C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4H5C[0x3];                                     // 0x02C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PostProcessBlendWeight;                                    // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x02D0(0x0540) (Edit, BlueprintVisible, Interp)
	unsigned char                                      bUseControllerViewRotation : 1;                            // 0x0810(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_1RF4[0xF];                                     // 0x0811(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraComponent");
		return ptr;
	}



	struct FVector ProjectWorldLocation(const struct FVector& WorldLocation, const struct FIntPoint& ViewDimensions);
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MovementComponent
// 0x0048 (FullSize[0x0110] - InheritedSize[0x00C8])
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                          // 0x00C8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                          // 0x00D0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_6SWW[0x4];                                     // 0x00D8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     Velocity;                                                  // 0x00DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bConstrainToPlane : 1;                                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                   // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_45T4[0x3];                                     // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EPlaneConstraintAxisSetting>    PlaneConstraintAxisSetting;                                // 0x00EC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UI8A[0x3];                                     // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     PlaneConstraintNormal;                                     // 0x00F0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     PlaneConstraintOrigin;                                     // 0x00FC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                 // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                           // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                         // 0x0108(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_L96Y[0x7];                                     // 0x0109(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MovementComponent");
		return ptr;
	}



	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(TEnumAsByte<Engine_EPlaneConstraintAxisSetting> NewAxisSetting);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep, bool bTeleport);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	TEnumAsByte<Engine_EPlaneConstraintAxisSetting> GetPlaneConstraintAxisSetting();
	class APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal);
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavMovementComponent
// 0x0048 (FullSize[0x0158] - InheritedSize[0x0110])
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                             // 0x0110(0x0030) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                    // 0x0140(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      UnknownData_7VUG[0x3];                                     // 0x0141(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMovementProperties                         MovementState;                                             // 0x0144(0x0004)
	unsigned char                                      UnknownData_D4IH[0x8];                                     // 0x0148(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               UseDefaultNavWalkingSearchRadiusScale;                     // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                               UseDefaultNavWalkingSearchHeightScale;                     // 0x0151(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R2MA[0x6];                                     // 0x0152(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavMovementComponent");
		return ptr;
	}



	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
	struct FVector GetActorFeetLocation();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PawnMovementComponent
// 0x0008 (FullSize[0x0160] - InheritedSize[0x0158])
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                                 // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PawnMovementComponent");
		return ptr;
	}



	struct FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class APawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CharacterMovementComponent
// 0x03F8 (FullSize[0x0558] - InheritedSize[0x0160])
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData_AEN0[0x18];                                    // 0x0160(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ACharacter*                                  CharacterOwner;                                            // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              GravityScale;                                              // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxStepHeight;                                             // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              JumpZVelocity;                                             // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              JumpOffJumpZFactor;                                        // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              WalkableFloorAngle;                                        // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WalkableFloorZ;                                            // 0x0194(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMovementMode>                  MovementMode;                                              // 0x0198(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      CustomMovementMode;                                        // 0x0199(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BQUL[0x26];                                    // 0x019A(0x0026) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GroundFriction;                                            // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxWalkSpeed;                                              // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxWalkSpeedBackwards;                                     // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WalkBackwardsMinAngle;                                     // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WalkBackwardsMaxAngle;                                     // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxWalkSpeedCrouched;                                      // 0x01D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxSwimSpeed;                                              // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxFlySpeed;                                               // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxCustomMovementSpeed;                                    // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxAcceleration;                                           // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxChargeAcceleration;                                     // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BrakingFrictionFactor;                                     // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BrakingFriction;                                           // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                           // 0x01F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_RSL5[0x3];                                     // 0x01F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BrakingDecelerationWalking;                                // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BrakingDecelerationFalling;                                // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BrakingDecelerationSwimming;                               // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BrakingDecelerationFlying;                                 // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AirControl;                                                // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AirControlBoostMultiplier;                                 // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AirControlBoostVelocityThreshold;                          // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FallingLateralFriction;                                    // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CrouchedHalfHeight;                                        // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Buoyancy;                                                  // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PerchRadiusThreshold;                                      // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              PerchAdditionalHeight;                                     // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                                    RotationRate;                                              // 0x0228(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseControllerDesiredRotation : 1;                         // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOrientRotationToMovement : 1;                             // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bMovementInProgress : 1;                                   // 0x0234(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                          // 0x0234(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceMaxAccel : 1;                                        // 0x0234(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRunPhysicsWithNoController : 1;                           // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceNextFloorCheck : 1;                                  // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay)
	unsigned char                                      bShrinkProxyCapsule : 1;                                   // 0x0234(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCanWalkOffLedges : 1;                                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                        // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                             // 0x0235(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_TGZN[0x2];                                     // 0x0236(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USceneComponent*                             DeferredUpdatedMoveComponent;                              // 0x0238(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxOutOfWaterStepHeight;                                   // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              OutofWaterZ;                                               // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              Mass;                                                      // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bEnablePhysicsInteraction;                                 // 0x024C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bTouchForceScaledToMass;                                   // 0x024D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bPushForceScaledToMass;                                    // 0x024E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bScalePushForceToVelocity;                                 // 0x024F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StandingDownwardForceScale;                                // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InitialPushForceFactor;                                    // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PushForceFactor;                                           // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PushForcePointZOffsetFactor;                               // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TouchForceFactor;                                          // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinTouchForce;                                             // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxTouchForce;                                             // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RepulsionForce;                                            // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NetMoveDelta;                                              // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bForceBraking : 1;                                         // 0x0274(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_HYNW[0x3];                                     // 0x0275(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CrouchedSpeedMultiplier;                                   // 0x0278(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              UpperImpactNormalScale;                                    // 0x027C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     Acceleration;                                              // 0x0280(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     LastUpdateLocation;                                        // 0x028C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     PendingImpulseToApply;                                     // 0x0298(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     PendingForceToApply;                                       // 0x02A4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	float                                              AnalogInputModifier;                                       // 0x02B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_G3QM[0x10];                                    // 0x02B4(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxSimulationTimeStep;                                     // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                MaxSimulationIterations;                                   // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              MaxSmoothNetUpdateDist;                                    // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NoSmoothNetUpdateDist;                                     // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NetworkSimulatedSmoothLocationTime;                        // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              NetworkSimulatedSmoothRotationTime;                        // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              LedgeCheckThreshold;                                       // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              JumpOutOfWaterPitch;                                       // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FFindFloorResult                            CurrentFloor;                                              // 0x02E4(0x008C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, ContainsInstancedReference)
	TEnumAsByte<Engine_EMovementMode>                  DefaultLandMovementMode;                                   // 0x0370(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMovementMode>                  DefaultWaterMovementMode;                                  // 0x0371(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMovementMode>                  GroundMovementMode;                                        // 0x0372(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EDT3[0x1];                                     // 0x0373(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                     // 0x0374(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseVelocityX : 1;                                  // 0x0374(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseVelocityY : 1;                                  // 0x0374(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                  // 0x0374(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                            // 0x0374(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bJustTeleported : 1;                                       // 0x0374(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor)
	unsigned char                                      bNetworkUpdateReceived : 1;                                // 0x0374(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bBasedMovementUpdateReceived : 1;                          // 0x0374(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bMovementUpdateReceived : 1;                               // 0x0375(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bNetworkMovementModeChanged : 1;                           // 0x0375(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bNotifyApex : 1;                                           // 0x0375(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCheatFlying : 1;                                          // 0x0375(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bWantsToCrouch : 1;                                        // 0x0375(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                          // 0x0375(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIgnoreBaseRotation : 1;                                   // 0x0375(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bFastAttachedMove : 1;                                     // 0x0375(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAlwaysCheckFloor : 1;                                     // 0x0376(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                            // 0x0376(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPerformingJumpOff : 1;                                    // 0x0376(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                               // 0x0376(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseRVOAvoidance : 1;                                      // 0x0376(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                         // 0x0376(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPreventSimulatedFloorChecks : 1;                          // 0x0376(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bPreventNavMeshFalling : 1;                                // 0x0376(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bHasRequestedVelocity : 1;                                 // 0x0377(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                            // 0x0377(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                  // 0x0377(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_R1NT : 2;                                      // 0x0377(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bProjectNavMeshWalking : 1;                                // 0x0377(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected)
	unsigned char                                      UnknownData_SRCG[0x14];                                    // 0x0378(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SmoothingClientPositionTolerance;                          // 0x038C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AvoidanceConsiderationRadius;                              // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     RequestedVelocity;                                         // 0x0394(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                AvoidanceUID;                                              // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                            // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                             // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                            // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              AvoidanceWeight;                                           // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     PendingLaunchVelocity;                                     // 0x03B4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SJOR[0x98];                                    // 0x03C0(0x0098) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NavMeshProjectionInterval;                                 // 0x0458(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NavMeshProjectionTimer;                                    // 0x045C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bUseNavMeshProjectionTimeModifier;                         // 0x0460(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NXF6[0x3];                                     // 0x0461(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxNavMeshProjectionInterval;                              // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4G0H[0x4];                                     // 0x0468(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NavMeshProjectionInterpSpeed;                              // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bUsePlaneBasedNavMeshProjectionInterpSystem;               // 0x0470(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XAW7[0x3];                                     // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxAllowedZOffsetFromCurrentPlane;                         // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxZDiffFromPrevPlane;                                     // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_602S[0x1C];                                    // 0x047C(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NavMeshProjectionHeightScaleUp;                            // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NavMeshProjectionHeightScaleDown;                          // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               UseControllerRotationInNavWalkingMoveComponent;            // 0x04A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QDO2[0x7];                                     // 0x04A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCharacterMovementComponentPreClothTickFunction PreClothComponentTick;                                     // 0x04A8(0x0050)
	unsigned char                                      UnknownData_3F4Z[0x14];                                    // 0x04F8(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinTimeBetweenTimeStampResets;                             // 0x050C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRootMotionMovementParams                   RootMotionParams;                                          // 0x0510(0x0040) (Transient)
	bool                                               bWasSimulatingRootMotion;                                  // 0x0550(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_CZWE[0x7];                                     // 0x0551(0x0007) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CharacterMovementComponent");
		return ptr;
	}



	void UpdateMaxNavMeshProjectionIntervalAndModifier(float DesiredMaxNavMeshProjectionInterval);
	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetNavMeshProjectionInterval(float InNavMeshProjectionInterval);
	void SetMovementMode(TEnumAsByte<Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char OldMoveFlags);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	bool IsWalking();
	bool IsWalkable(const struct FHitResult& Hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	float GetNavMeshProjectionInterval();
	class UPrimitiveComponent* GetMovementBase();
	float GetMaxJumpHeight();
	float GetMaxAcceleration();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	class ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float TimeStamp);
	void CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddForce(const struct FVector& Force);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputComponent
// 0x0088 (FullSize[0x0150] - InheritedSize[0x00C8])
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_2GPC[0x88];                                    // 0x00C8(0x0088) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputComponent");
		return ptr;
	}



	bool WasControllerKeyJustReleased(const struct FKey& Key);
	bool WasControllerKeyJustPressed(const struct FKey& Key);
	bool IsControllerKeyDown(const struct FKey& Key);
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FKey& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct FKey& Key);
	void GetControllerAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct FKey& Key);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DeveloperSettings
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UDeveloperSettings : public UObject
{
public:
	unsigned char                                      UnknownData_ZGGN[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DeveloperSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Engine
// 0x0950 (FullSize[0x0978] - InheritedSize[0x0028])
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData_XYBL[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UFont*                                       TinyFont;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       TinyFontName;                                              // 0x0038(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SmallFont;                                                 // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       SmallFontName;                                             // 0x0050(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       MediumFont;                                                // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       MediumFontName;                                            // 0x0068(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       LargeFont;                                                 // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       LargeFontName;                                             // 0x0080(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       MonoFont;                                                  // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       MonoFontName;                                              // 0x0098(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UFont*                                       SubtitleFont;                                              // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       SubtitleFontName;                                          // 0x00B0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay)
	class UFont*                                       HugeFont;                                                  // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       HugeFontName;                                              // 0x00C8(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay)
	TArray<class UFont*>                               AdditionalFonts;                                           // 0x00D8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_1KAB[0x8];                                     // 0x00E8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             AdditionalFontNames;                                       // 0x00F0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay)
	class UClass*                                      ConsoleClass;                                              // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       ConsoleClassName;                                          // 0x0108(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameViewportClientClass;                                   // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       GameViewportClientClassName;                               // 0x0120(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      LocalPlayerClass;                                          // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       LocalPlayerClassName;                                      // 0x0138(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      WorldSettingsClass;                                        // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       WorldSettingsClassName;                                    // 0x0150(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FStringClassReference                       NavigationSystemClassName;                                 // 0x0160(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      NavigationSystemClass;                                     // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       AvoidanceManagerClassName;                                 // 0x0178(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      AvoidanceManagerClass;                                     // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       PhysicsCollisionHandlerClassName;                          // 0x0198(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	struct FStringClassReference                       GameUserSettingsClassName;                                 // 0x01A8(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameUserSettingsClass;                                     // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       AIControllerClassName;                                     // 0x01C0(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UGameUserSettings*                           GameUserSettings;                                          // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      LevelScriptActorClass;                                     // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       LevelScriptActorClassName;                                 // 0x01E0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FStringClassReference                       DefaultBlueprintBaseClassName;                             // 0x01F0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	struct FStringClassReference                       GameSingletonClassName;                                    // 0x0200(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	class UObject*                                     GameSingleton;                                             // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      DefaultPreviewPawnClass;                                   // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FStringClassReference                       DefaultPreviewPawnClassName;                               // 0x0220(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay)
	struct FString                                     PlayOnConsoleSaveDir;                                      // 0x0230(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash)
	class UTexture2D*                                  DefaultTexture;                                            // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       DefaultTextureName;                                        // 0x0248(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    DefaultDiffuseTexture;                                     // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       DefaultDiffuseTextureName;                                 // 0x0260(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                   // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       DefaultBSPVertexTextureName;                               // 0x0278(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                 // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       HighFrequencyNoiseTextureName;                             // 0x0290(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  DefaultBokehTexture;                                       // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       DefaultBokehTextureName;                                   // 0x02A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  HDRCalibrationTexture;                                     // 0x02B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       HDRCalibrationTextureName;                                 // 0x02C0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   WireframeMaterial;                                         // 0x02D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     WireframeMaterialName;                                     // 0x02D8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   DebugMeshMaterial;                                         // 0x02E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       DebugMeshMaterialName;                                     // 0x02F0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   LevelColorationLitMaterial;                                // 0x0300(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     LevelColorationLitMaterialName;                            // 0x0308(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   LevelColorationUnlitMaterial;                              // 0x0318(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     LevelColorationUnlitMaterialName;                          // 0x0320(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   TriangleDensityScreenSpaceMaterial;                        // 0x0330(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     TriangleDensityScreenSpaceMaterialName;                    // 0x0338(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   TriangleDensityWorldSpaceMaterial;                         // 0x0348(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     TriangleDensityWorldSpaceMaterialName;                     // 0x0350(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   LightingTexelDensityMaterial;                              // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     LightingTexelDensityName;                                  // 0x0368(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                          // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     ShadedLevelColorationLitMaterialName;                      // 0x0380(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                        // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                    // 0x0398(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   RemoveSurfaceMaterial;                                     // 0x03A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       RemoveSurfaceMaterialName;                                 // 0x03B0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   VertexColorMaterial;                                       // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     VertexColorMaterialName;                                   // 0x03C8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                     // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                 // 0x03E0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                  // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;              // 0x03F8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                       // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                   // 0x0410(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                     // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                 // 0x0428(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                      // 0x0438(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                  // 0x0440(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	class UMaterial*                                   ConstraintLimitMaterial;                                   // 0x0450(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                  // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                  // 0x0460(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                  // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       ConstraintLimitMaterialName;                               // 0x0470(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                           // 0x0480(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       InvalidLightmapSettingsMaterialName;                       // 0x0488(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                           // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       PreviewShadowsIndicatorMaterialName;                       // 0x04A0(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UMaterial*                                   ArrowMaterial;                                             // 0x04B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       ArrowMaterialName;                                         // 0x04B8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                                    // 0x04C8(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	TArray<struct FColor>                              LightComplexityColors;                                     // 0x04D8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                    // 0x04E8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                              // 0x04F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LODColorationColors;                                       // 0x0508(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                     // 0x0518(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxES2PixelShaderAdditiveComplexityCount;                  // 0x051C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinLightMapDensity;                                        // 0x0520(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              IdealLightMapDensity;                                      // 0x0524(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxLightMapDensity;                                        // 0x0528(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                       // 0x052C(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      UnknownData_VTXO[0x3];                                     // 0x052D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RenderLightMapDensityGrayscaleScale;                       // 0x0530(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RenderLightMapDensityColorScale;                           // 0x0534(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                          // 0x0538(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	struct FLinearColor                                LightMapDensitySelectedColor;                              // 0x0548(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                         // 0x0558(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                       // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       DefaultPhysMaterialName;                                   // 0x0570(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                   // 0x0580(0x0010) (ZeroConstructor, Config)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                      // 0x0590(0x0010) (ZeroConstructor, Config)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                     // 0x05A0(0x0010) (ZeroConstructor, Config)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                     // 0x05B0(0x0010) (ZeroConstructor, Config)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                              // 0x05C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       PreIntegratedSkinBRDFTextureName;                          // 0x05C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  MiniFontTexture;                                           // 0x05D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       MiniFontTextureName;                                       // 0x05E0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture*                                    WeightMapPlaceholderTexture;                               // 0x05F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       WeightMapPlaceholderTextureName;                           // 0x05F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UTexture2D*                                  LightMapDensityTexture;                                    // 0x0608(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStringAssetReference                       LightMapDensityTextureName;                                // 0x0610(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData_YP8H[0x8];                                     // 0x0620(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         GameViewport;                                              // 0x0628(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FString>                             DeferredCommands;                                          // 0x0630(0x0010) (ZeroConstructor)
	int                                                TickCycles;                                                // 0x0640(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                GameCycles;                                                // 0x0644(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                ClientCycles;                                              // 0x0648(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NearClipPlane;                                             // 0x064C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bHardwareSurveyEnabled : 1;                                // 0x0650(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bSubtitlesEnabled : 1;                                     // 0x0650(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bSubtitlesForcedOff : 1;                                   // 0x0650(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_R3AN[0x3];                                     // 0x0651(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaximumLoopIterationCount;                                 // 0x0654(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                           // 0x0658(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;            // 0x0658(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                          // 0x0658(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_KC1R : 1;                                      // 0x0658(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSmoothFrameRate : 1;                                      // 0x0658(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bUseFixedFrameRate : 1;                                    // 0x0658(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_BWRO[0x3];                                     // 0x0659(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FixedFrameRate;                                            // 0x065C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                                 SmoothedFrameRateRange;                                    // 0x0660(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                 // 0x0670(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_AEBU[0x3];                                     // 0x0671(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                        // 0x0674(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                    // 0x0678(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      UnknownData_4JBV[0x3];                                     // 0x0679(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      C_WorldBox;                                                // 0x067C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_BrushWire;                                               // 0x0680(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_AddWire;                                                 // 0x0684(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_SubtractWire;                                            // 0x0688(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_SemiSolidWire;                                           // 0x068C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_NonSolidWire;                                            // 0x0690(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_WireBackground;                                          // 0x0694(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_ScaleBoxHi;                                              // 0x0698(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_VolumeCollision;                                         // 0x069C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_BSPCollision;                                            // 0x06A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_OrthoBackground;                                         // 0x06A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_Volume;                                                  // 0x06A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      C_BrushShape;                                              // 0x06AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              StreamingDistanceFactor;                                   // 0x06B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETransitionType>                TransitionType;                                            // 0x06B4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_M7BV[0x3];                                     // 0x06B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TransitionDescription;                                     // 0x06B8(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     TransitionGameMode;                                        // 0x06C8(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	float                                              MeshLODRange;                                              // 0x06D8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAllowMatureLanguage : 1;                                  // 0x06DC(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_FX99[0x3];                                     // 0x06DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraRotationThreshold;                                   // 0x06E0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CameraTranslationThreshold;                                // 0x06E4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PrimitiveProbablyVisibleTime;                              // 0x06E8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxOcclusionPixelsFraction;                                // 0x06EC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                   // 0x06F0(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_LH3M[0x3];                                     // 0x06F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxParticleResize;                                         // 0x06F4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxParticleResizeWarn;                                     // 0x06F8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_L3TS[0x4];                                     // 0x06FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                       // 0x0700(0x0010) (ZeroConstructor, Transient)
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                     // 0x0710(0x001C) (Config)
	float                                              NetClientTicksPerSecond;                                   // 0x072C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bHasPendingGlobalReregister : 1;                           // 0x0730(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_CQRG[0x3];                                     // 0x0731(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DisplayGamma;                                              // 0x0734(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinDesiredFrameRate;                                       // 0x0738(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                DefaultSelectedMaterialColor;                              // 0x073C(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SelectedMaterialColor;                                     // 0x074C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SelectionOutlineColor;                                     // 0x075C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SubduedSelectionOutlineColor;                              // 0x076C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FLinearColor                                SelectedMaterialColorOverride;                             // 0x077C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               bIsOverridingSelectedColor;                                // 0x078C(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TV6W[0x3];                                     // 0x078D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                          // 0x0790(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                   // 0x0790(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bSuppressMapWarnings : 1;                                  // 0x0790(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bCookSeparateSharedMPGameContent : 1;                      // 0x0790(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bDisableAILogging : 1;                                     // 0x0790(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      UnknownData_IFFQ[0x3];                                     // 0x0791(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           bEnableVisualLogRecordingOnStart;                          // 0x0794(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RDUP[0x4];                                     // 0x0798(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ScreenSaverInhibitorSemaphore;                             // 0x079C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLockReadOnlyLevels : 1;                                   // 0x07A0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_NN4U[0x7];                                     // 0x07A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     ParticleEventManagerClassPath;                             // 0x07A8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1OIW[0x10];                                    // 0x07B8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SelectionHighlightIntensity;                               // 0x07C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BSPSelectionHighlightIntensity;                            // 0x07CC(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              HoverHighlightIntensity;                                   // 0x07D0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SelectionHighlightIntensityBillboards;                     // 0x07D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_C1G3[0x130];                                   // 0x07D8(0x0130) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                      // 0x0908(0x0010) (ZeroConstructor, Transient, Config)
	TArray<struct FString>                             ServerActors;                                              // 0x0918(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             RuntimeServerActors;                                       // 0x0928(0x0010) (ZeroConstructor)
	unsigned char                                      bStartedLoadMapMovie : 1;                                  // 0x0938(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_3FCH[0x17];                                    // 0x0939(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NextWorldContextHandle;                                    // 0x0950(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UTRN[0x24];                                    // 0x0954(0x0024) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameEngine
// 0x0070 (FullSize[0x09E8] - InheritedSize[0x0978])
class UGameEngine : public UEngine
{
public:
	float                                              MaxDeltaTime;                                              // 0x0978(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ServerFlushLogInterval;                                    // 0x097C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_D768[0x68];                                    // 0x0980(0x0068) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameInstance
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData_VGYS[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULocalPlayer*>                        LocalPlayers;                                              // 0x0038(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_KCTM[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UOnlineSession*                              OnlineSession;                                             // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_AIDU[0x30];                                    // 0x0058(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameInstance");
		return ptr;
	}



	void ReceiveShutdown();
	void ReceiveInit();
	void DebugRemovePlayer(int ControllerId);
	void DebugCreatePlayer(int ControllerId);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Info
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class AInfo : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameMode
// 0x00F8 (FullSize[0x04C8] - InheritedSize[0x03D0])
class AGameMode : public AInfo
{
public:
	unsigned char                                      UnknownData_PNX9[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDisableAsyncOcclusionChecking : 1;                        // 0x03D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseSeamlessTravel : 1;                                    // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPauseable : 1;                                            // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bStartPlayersAsSpectators : 1;                             // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bDelayedStart : 1;                                         // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_1TRP[0x7];                                     // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     OptionsString;                                             // 0x03E0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash)
	class UClass*                                      DefaultPawnClass;                                          // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      HUDClass;                                                  // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int                                                NumSpectators;                                             // 0x0400(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NumPlayers;                                                // 0x0404(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NumBots;                                                   // 0x0408(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinRespawnDelay;                                           // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameSession*                                GameSession;                                               // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NumTravellingPlayers;                                      // 0x0418(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZU0Z[0x4];                                     // 0x041C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FText                                       DefaultPlayerName;                                         // 0x0420(0x0018) ELEMENT_SIZE_MISMATCH (Edit)
	unsigned char                                      UnknownData_MS70[0x20];                                    // 0x041C(0x0020) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class UClass*                                      EngineMessageClass;                                        // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      PlayerControllerClass;                                     // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      SpectatorClass;                                            // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                      // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      PlayerStateClass;                                          // 0x0478(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      GameStateClass;                                            // 0x0480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AGameState*                                  GameState;                                                 // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerState*>                        InactivePlayerArray;                                       // 0x0490(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_N012[0x10];                                    // 0x04A0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGameClassShortName>                 GameModeClassAliases;                                      // 0x04B0(0x0010) (ZeroConstructor, Config, Protected)
	float                                              InactivePlayerStateLifeSpan;                               // 0x04C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	bool                                               bHandleDedicatedServerReplays;                             // 0x04C4(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_PMGO[0x3];                                     // 0x04C5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameMode");
		return ptr;
	}



	void StartPlay();
	void StartMatch();
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	bool ShouldReset(class AActor* ActorToReset);
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void ReturnToMainMenuHost();
	void RestartGame();
	void ResetLevel();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	bool PlayerCanRestart(class APlayerController* Player);
	bool MustSpectate(class APlayerController* NewPlayerController);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_OnSetMatchState(const struct FName& NewState);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange);
	class AActor* K2_FindPlayerStart(class AController* Player);
	bool IsMatchInProgress();
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	bool HasMatchStarted();
	bool HasMatchEnded();
	int GetNumPlayers();
	struct FName GetMatchState();
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	class AActor* FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	void EndMatch();
	class AActor* ChoosePlayerStart(class AController* Player);
	void ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange);
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);
	void AbortMatch();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrimitiveComponent
// 0x02D8 (FullSize[0x0588] - InheritedSize[0x02B0])
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_E5I1[0x8];                                     // 0x02B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDrawDistance;                                           // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4AH5[0x4];                                     // 0x02BC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LDMaxDrawDistance;                                         // 0x02C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              CachedMaxDrawDistance;                                     // 0x02C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       DepthPriorityGroup;                                        // 0x02C8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESceneDepthPriorityGroup>       ViewOwnerDepthPriorityGroup;                               // 0x02C9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1O2C[0x2];                                     // 0x02CA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                             // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bGenerateOverlapEvents : 1;                                // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bMultiBodyOverlap : 1;                                     // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCheckAsyncSceneOnMove : 1;                                // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTraceComplexOnMove : 1;                                   // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bReturnMaterialOnMove : 1;                                 // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                       // 0x02CC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowCullDistanceVolume : 1;                              // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                          // 0x02CD(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRenderInMainPass : 1;                                     // 0x02CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bRenderInCustomPrePass : 1;                                // 0x02CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bReflected : 1;                                            // 0x02CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_WEDN : 1;                                      // 0x02CD(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bReflectedOnLowQuality : 1;                                // 0x02CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bFFTWaterMask : 1;                                         // 0x02CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bVolumeFogMask : 1;                                        // 0x02CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_C4BA : 1;                                      // 0x02CE(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAffectsFlatWater : 1;                                     // 0x02CE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bGPUParticlesKillPlane : 1;                                // 0x02CE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDontCull : 1;                                             // 0x02CE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDontSizeOnScreenCull : 1;                                 // 0x02CE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_LWGT[0x1];                                     // 0x02CF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OverriddenShadowMinTexelSize;                              // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                               bOverrideShadowMinSizeCulling;                             // 0x02D4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bOverrideShadowCascadesExclusion;                          // 0x02D5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EExcludeFromCascades>           ExcludedShadowCascades;                                    // 0x02D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_65P0[0x1];                                     // 0x02D7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bReceivesDecals : 1;                                       // 0x02D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOwnerNoSee : 1;                                           // 0x02D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOnlyOwnerSee : 1;                                         // 0x02D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                        // 0x02D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIsACloud : 1;                                             // 0x02D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseAsOccluder : 1;                                        // 0x02D8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSelectable : 1;                                           // 0x02D8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bForceMipStreaming : 1;                                    // 0x02D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                             // 0x02D9(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      CastShadow : 1;                                            // 0x02D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x02D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseFarCascadeLPVBiasMultiplier : 1;                       // 0x02D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                          // 0x02D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastDynamicShadow : 1;                                    // 0x02D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastStaticShadow : 1;                                     // 0x02D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                      // 0x02D9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bSelfShadowOnly : 1;                                       // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastFarShadow : 1;                                        // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastInsetShadow : 1;                                      // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastCinematicShadow : 1;                                  // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastHiddenShadow : 1;                                     // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                 // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastShadowOnLowQuality : 1;                               // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bLightAsIfStatic : 1;                                      // 0x02DA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                              // 0x02DB(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	TEnumAsByte<Engine_EIndirectLightingCacheQuality>  IndirectLightingCacheQuality;                              // 0x02DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                               bHasCachedStaticLighting;                                  // 0x02DD(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bStaticLightingBuildEnqueued;                              // 0x02DE(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_C1M6[0x1];                                     // 0x02DF(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bIgnoreRadialImpulse : 1;                                  // 0x02E0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIgnoreRadialForce : 1;                                    // 0x02E0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      AlwaysLoadOnClient : 1;                                    // 0x02E0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      AlwaysLoadOnServer : 1;                                    // 0x02E0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseEditorCompositing : 1;                                 // 0x02E0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRenderCustomDepth : 1;                                    // 0x02E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAllowVelocityInMaterial : 1;                              // 0x02E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_KWCF[0x3];                                     // 0x02E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                CustomDepthStencilValue;                                   // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                TranslucencySortPriority;                                  // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                VisibilityId;                                              // 0x02EC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1UHC[0x4];                                     // 0x02F0(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LpvBiasMultiplier;                                         // 0x02F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              FarCascadeLPVBiasMultiplier;                               // 0x02F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              LpvIntensityMultiplier;                                    // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FCustomPrimitiveData                        CustomPrimitiveData;                                       // 0x0300(0x0010) (Edit, AdvancedDisplay)
	struct FBodyInstance                               BodyInstance;                                              // 0x0310(0x0180) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectRain : 1;                                           // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCanEverAffectNavigation : 1;                              // 0x0490(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_MA88 : 1;                                      // 0x0490(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSkipRenderingInOuterLPVCascades : 1;                      // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableMergeCollisionComponents : 1;                       // 0x0490(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bVisibleWhenAboveWaterAndPlayerUnderwater : 1;             // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bVisibleWhenAboveWaterAndPlayerAbove : 1;                  // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bVisibleWhenUnderwaterAndPlayerAbove : 1;                  // 0x0490(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bVisibleWhenUnderwaterAndPlayerUnderwater : 1;             // 0x0491(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCanRenderAboveAndBelowWaterAtSameTime : 1;                // 0x0491(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_XJ1R[0x6];                                     // 0x0492(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BoundsScale;                                               // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              OcclusionBoundsScale;                                      // 0x049C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              LastRenderTime;                                            // 0x04A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bGPUVisibility;                                            // 0x04A4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EHasCustomNavigableGeometry>    bHasCustomNavigableGeometry;                               // 0x04A5(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECanBeCharacterBase>            CanCharacterStepUpOn;                                      // 0x04A6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZY48[0x49];                                    // 0x04A7(0x0049) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FMulticastSparseDelegate                    OnComponentHit;                                            // 0x04F0(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	struct FMulticastSparseDelegate                    OnComponentBeginOverlap;                                   // 0x04F1(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	struct FMulticastSparseDelegate                    OnComponentEndOverlap;                                     // 0x04F2(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	struct FMulticastSparseDelegate                    OnComponentWake;                                           // 0x04F3(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	struct FMulticastSparseDelegate                    OnComponentSleep;                                          // 0x04F4(0x0001) (InstancedReference, BlueprintAssignable, NoDestructor)
	unsigned char                                      UnknownData_UREV[0x33];                                    // 0x04F5(0x0033) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPrimitiveComponent*                         LODParentPrimitive;                                        // 0x0528(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPrimitiveComponentPostPhysicsTickFunction  PostPhysicsComponentTick;                                  // 0x0530(0x0050)
	class UPrimitiveComponent*                         MergedCollisionComponentParent;                            // 0x0580(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		return ptr;
	}



	void WakeRigidBody(const struct FName& BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void SetMassScale(const struct FName& BoneName, float InMassScale);
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void SetLockedAxis(TEnumAsByte<Engine_EDOFMode> LockedAxis);
	void SetLinearDamping(float InDamping);
	void SetGenerateOverlapEvents(bool bEnable);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomPrimitiveVector(int Index, const struct FVector& Value);
	void SetCustomPrimitiveScalar(int Index, float Value);
	void SetCustomDepthStencilValue(int Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(TEnumAsByte<Engine_EDOFMode> ConstraintMode);
	void SetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> Channel, TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<Engine_ECollisionResponse> NewResponse);
	void SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void SetCollisionObjectType(TEnumAsByte<Engine_ECollisionChannel> Channel);
	void SetCollisionEnabled(TEnumAsByte<Engine_ECollisionEnabled> NewType);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetAngularDamping(float InDamping);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName);
	bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool IsOverlappingActor(class AActor* Other);
	bool IsGravityEnabled();
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocity(const struct FName& BoneName);
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, class UClass* ClassFilter);
	TArray<struct FOverlapInfo> GetOverlapInfos();
	int GetNumMaterials();
	class UMaterialInterface* GetMaterial(int ElementIndex);
	float GetMassScale(const struct FName& BoneName);
	float GetMass();
	float GetLinearDamping();
	struct FVector GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<Engine_ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<Engine_ECollisionChannel> Channel);
	struct FName GetCollisionProfileName();
	TEnumAsByte<Engine_ECollisionChannel> GetCollisionObjectType();
	float GetClosestPointOnCollision(const struct FVector& Point, struct FVector* OutPointOnBody, const struct FName& BoneName);
	struct FVector GetCenterOfMass(const struct FName& BoneName);
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreActors(int InSlack);
	bool CanCharacterStepUp(class APawn* Pawn);
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<Engine_ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName);
	void AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange);
	void AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameState
// 0x0058 (FullSize[0x0428] - InheritedSize[0x03D0])
class AGameState : public AInfo
{
public:
	class UClass*                                      GameModeClass;                                             // 0x03D0(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AGameMode*                                   AuthorityGameMode;                                         // 0x03D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      SpectatorClass;                                            // 0x03E0(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FName                                       MatchState;                                                // 0x03E8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash)
	struct FName                                       PreviousMatchState;                                        // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                ElapsedTime;                                               // 0x03F8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_7SKH[0x4];                                     // 0x03FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class APlayerState*>                        PlayerArray;                                               // 0x0400(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              ReplicatedWorldTimeSeconds;                                // 0x0410(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              ServerWorldTimeSecondsDelta;                               // 0x0414(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                     // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_PH46[0xC];                                     // 0x041C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameState");
		return ptr;
	}



	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_MatchState();
	void OnRep_GameModeClass();
	void OnRep_ElapsedTime();
	float GetServerWorldTimeSeconds();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameUserSettings
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UGameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                 // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AYS4[0x1F];                                    // 0x0029(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ResolutionSizeX;                                           // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	uint32_t                                           ResolutionSizeY;                                           // 0x004C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                          // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                          // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                WindowPosX;                                                // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                WindowPosY;                                                // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	bool                                               bUseDesktopResolutionForFullscreen;                        // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_27GE[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                FullscreenMode;                                            // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                LastConfirmedFullscreenMode;                               // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	uint32_t                                           Version;                                                   // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                AudioQualityLevel;                                         // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_D22L[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameUserSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ScriptViewportClient
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData_CIPV[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ScriptViewportClient");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameViewportClient
// 0x0220 (FullSize[0x0250] - InheritedSize[0x0030])
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData_IWZF[0x8];                                     // 0x0030(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UConsole*                                    ViewportConsole;                                           // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                           // 0x0040(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_B6TM[0x30];                                    // 0x0050(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorld*                                      World;                                                     // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UGameInstance*                               GameInstance;                                              // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ROEX[0x1C0];                                   // 0x0090(0x01C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}



	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int PlayerIndex);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerState
// 0x0088 (FullSize[0x0458] - InheritedSize[0x03D0])
class APlayerState : public AInfo
{
public:
	float                                              Score;                                                     // 0x03D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      Ping;                                                      // 0x03D4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_52UF[0x3];                                     // 0x03D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     PlayerName;                                                // 0x03D8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash)
	unsigned char                                      UnknownData_08F4[0x10];                                    // 0x03E8(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PlayerId;                                                  // 0x03F8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIsSpectator : 1;                                          // 0x03FC(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bOnlySpectator : 1;                                        // 0x03FC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsABot : 1;                                               // 0x03FC(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_73PE : 1;                                      // 0x03FC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bIsInactive : 1;                                           // 0x03FC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bFromPreviousLevel : 1;                                    // 0x03FC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_777R[0x3];                                     // 0x03FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                StartTime;                                                 // 0x0400(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VGVG[0x4];                                     // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EngineMessageClass;                                        // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HBCG[0x18];                                    // 0x0410(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FUniqueNetIdRepl                            UniqueId;                                                  // 0x0428(0x0018) (Net, RepNotify)
	unsigned char                                      UnknownData_IQ3Y[0x18];                                    // 0x0440(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerState");
		return ptr;
	}



	void OnRep_UniqueId();
	void OnRep_PlayerName();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Controller
// 0x0060 (FullSize[0x0430] - InheritedSize[0x03D0])
class AController : public AActor
{
public:
	unsigned char                                      UnknownData_CYBG[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APawn*                                       Pawn;                                                      // 0x03D8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_87WJ[0x8];                                     // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ACharacter*                                  Character;                                                 // 0x03E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                                PlayerState;                                               // 0x03F0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                             TransformComponent;                                        // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                                    ControlRotation;                                           // 0x0400(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      bAttachToPawn : 1;                                         // 0x040C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected)
	unsigned char                                      UnknownData_Q5IH[0xB];                                     // 0x040D(0x000B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       StateName;                                                 // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                     // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}



	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void Possess(class APawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class APawn* K2_GetPawn();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class AActor* GetViewTarget();
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class APlayerController* CastToPlayerController();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerController
// 0x02F8 (FullSize[0x0728] - InheritedSize[0x0430])
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                    // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZFUY[0x8];                                     // 0x0438(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APawn*                                       AcknowledgedPawn;                                          // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                   // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3L76[0x8];                                     // 0x0450(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AHUD*                                        MyHUD;                                                     // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                        PlayerCameraManager;                                       // 0x0460(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      PlayerCameraManagerClass;                                  // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                               bAutoManageActiveCameraTarget;                             // 0x0470(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YLJ0[0x3];                                     // 0x0471(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotator                                    TargetViewRotation;                                        // 0x0474(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6BTD[0x10];                                    // 0x0480(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              HiddenActors;                                              // 0x0490(0x0010) (ZeroConstructor)
	float                                              LastSpectatorStateSynchTime;                               // 0x04A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     LastSpectatorSyncLocation;                                 // 0x04A4(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FRotator                                    LastSpectatorSyncRotation;                                 // 0x04B0(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	int                                                ClientCap;                                                 // 0x04BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCheatManager*                               CheatManager;                                              // 0x04C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      CheatClass;                                                // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPlayerInput*                                PlayerInput;                                               // 0x04D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                                // 0x04D8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_SYT1[0x90];                                    // 0x04E8(0x0090) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_F1EA : 2;                                      // 0x0578(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bPlayerIsWaiting : 1;                                      // 0x0578(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor)
	unsigned char                                      UnknownData_9LB3[0x3];                                     // 0x0579(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      NetPlayerIndex;                                            // 0x057C(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bHasVoiceHandshakeCompleted;                               // 0x057D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4GZY[0x2];                                     // 0x057E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              PendingSwapConnection;                                     // 0x0580(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNetConnection*                              NetConnection;                                             // 0x0588(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_GIXC[0xC];                                     // 0x0590(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InputYawScale;                                             // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InputPitchScale;                                           // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InputRollScale;                                            // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bShowMouseCursor : 1;                                      // 0x05A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableClickEvents : 1;                                    // 0x05A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableTouchEvents : 1;                                    // 0x05A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableMouseOverEvents : 1;                                // 0x05A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableTouchOverEvents : 1;                                // 0x05A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceFeedbackEnabled : 1;                                 // 0x05A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_J6Q4[0x3];                                     // 0x05A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EMouseCursor>              DefaultMouseCursor;                                        // 0x05AC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<CoreUObject_EMouseCursor>              CurrentMouseCursor;                                        // 0x05AD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECollisionChannel>              DefaultClickTraceChannel;                                  // 0x05AE(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECollisionChannel>              CurrentClickTraceChannel;                                  // 0x05AF(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              HitResultTraceDistance;                                    // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ForceFeedbackIntensity;                                    // 0x05B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_X8H1[0x88];                                    // 0x05B8(0x0088) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInputComponent*                             InactiveStateInputComponent;                               // 0x0640(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9A9W[0x20];                                    // 0x0648(0x0020) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTouchInterface*                             CurrentTouchInterface;                                     // 0x0668(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_V50S[0x30];                                    // 0x0670(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ASpectatorPawn*                              SpectatorPawn;                                             // 0x06A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     SpawnLocation;                                             // 0x06A8(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_AUZS[0x4];                                     // 0x06B4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TMap<class ULevel*, class UInputComponent*>        LevelInputComponents;                                      // 0x06B8(0x0050) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      UnknownData_JDCS[0x14];                                    // 0x0708(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bIsLocalPlayerController;                                  // 0x071C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WUTX[0x1];                                     // 0x071D(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint16_t                                           SeamlessTravelCount;                                       // 0x071E(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint16_t                                           LastCompletedSeamlessTravelCount;                          // 0x0720(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bInCinematicMode;                                          // 0x0722(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_OR3W[0x5];                                     // 0x0723(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}



	bool WasInputKeyJustReleased(const struct FKey& Key);
	bool WasInputKeyJustPressed(const struct FKey& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void SwitchLevel(const struct FString& URL);
	void StopHapticEffect(TEnumAsByte<InputCore_EControllerHand> Hand);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<Engine_EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetHapticsByValue(float Frequency, float Amplitude, TEnumAsByte<InputCore_EControllerHand> Hand);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& NewMode);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation);
	void PlayHapticEffect(class UHapticFeedbackEffect* HapticEffect, TEnumAsByte<InputCore_EControllerHand> Hand, float Scale);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<Engine_EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const struct FString& URL);
	bool IsSeamlessTravelInProgress();
	bool IsPossessingServerAcknowledgedPawn();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsInputKeyDown(const struct FKey& Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(const struct FKey& Key);
	void GetInputTouchState(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FKey& Key);
	void GetInputAnalogStickState(TEnumAsByte<Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<InputCore_ETouchIndex> FingerIndex, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(const struct FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateLevelStreamingStatusBatched(const struct FString& PackageBasePath, TArray<struct FLevelStreamingStatusUpdateInfo> LevelStreamingStatusUpdateInfo);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const struct FString& URL, TEnumAsByte<Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void ClientStopCameraShake(class UClass* Shake);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientSeamlessTravelComplete();
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag);
	void ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<Engine_ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientBlendOutCameraShake(class UClass* Shake);
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void Camera(const struct FName& NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMeshActor
// 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bStaticMeshReplicateMovement;                              // 0x03D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	TEnumAsByte<Engine_ENavDataGatheringMode>          NavigationGeometryGatheringMode;                           // 0x03D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QFB8[0x6];                                     // 0x03DA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Brush
// 0x0038 (FullSize[0x0408] - InheritedSize[0x03D0])
class ABrush : public AActor
{
public:
	TEnumAsByte<Engine_EBrushType>                     BrushType;                                                 // 0x03D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FASD[0x3];                                     // 0x03D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      BrushColor;                                                // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                PolyFlags;                                                 // 0x03D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bColored : 1;                                              // 0x03DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSolidWhenSelected : 1;                                    // 0x03DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                            // 0x03DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bNotForClientOrServer : 1;                                 // 0x03DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_YQXV[0x3];                                     // 0x03DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UModel*                                      Brush;                                                     // 0x03E0(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBrushComponent*                             BrushComponent;                                            // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bInManipulation : 1;                                       // 0x03F0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_0LDR[0x7];                                     // 0x03F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGeomSelection>                      SavedSelections;                                           // 0x03F8(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Volume
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class AVolume : public ABrush
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlockingVolume
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class ABlockingVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WorldSettings
// 0x01B8 (FullSize[0x0588] - InheritedSize[0x03D0])
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData_78O1[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableWorldBoundsChecks : 1;                              // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableNavigationSystem : 1;                               // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_I958[0x3];                                     // 0x03D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EWorldCompositionSetting>       WorldCompositionSetting;                                   // 0x03DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_PJPU[0x3];                                     // 0x03DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStringAssetReference                       InstancedNavMeshesDataAssetOveride;                        // 0x03E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                            // 0x03F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bWorldGravitySet : 1;                                      // 0x03F0(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bGlobalGravitySet : 1;                                     // 0x03F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_EYFH[0x3];                                     // 0x03F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              KillZ;                                                     // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      KillZDamageType;                                           // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash)
	float                                              GlobalGravityZ;                                            // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9Z1B[0x4];                                     // 0x0404(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      DefaultPhysicsVolumeClass;                                 // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      PhysicsCollisionHandlerClass;                              // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      DefaultGameMode;                                           // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<struct FGameModePrefix>                     DefaultMapPrefixes;                                        // 0x0420(0x0010) (ZeroConstructor, Config)
	class UClass*                                      GameNetworkManagerClass;                                   // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int                                                PackedLightAndShadowMapTextureSize;                        // 0x0438(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bMinimizeBSPSections : 1;                                  // 0x043C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_AFOQ[0x3];                                     // 0x043D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     DefaultColorScale;                                         // 0x0440(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPrecomputeVisibility : 1;                                 // 0x044C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                      // 0x044C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_6P54[0x3];                                     // 0x044D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VisibilityCellSize;                                        // 0x0450(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_EVisibilityAggressiveness>      VisibilityAggressiveness;                                  // 0x0454(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U9CI[0x3];                                     // 0x0455(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceNoPrecomputedLighting : 1;                           // 0x0458(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_LR3M[0x3];                                     // 0x0459(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                         // 0x045C(0x0044) (Edit)
	TEnumAsByte<Engine_ELightingBuildQuality>          LevelLightingQuality;                                      // 0x04A0(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_J500[0x7];                                     // 0x04A1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             DefaultReverbSettings;                                     // 0x04A8(0x0018) (Edit, Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                                // 0x04C0(0x0024) (Edit, Config)
	unsigned char                                      UnknownData_EOBM[0x4];                                     // 0x04E4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundMix*                                   DefaultBaseSoundMix;                                       // 0x04E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WorldToMeters;                                             // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_OHTN[0x4];                                     // 0x04F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBookMark*                                   BookMarks[0xA];                                            // 0x04F8(0x0050) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TimeDilation;                                              // 0x0548(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MatineeTimeDilation;                                       // 0x054C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DemoPlayTimeDilation;                                      // 0x0550(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bHighPriorityLoading : 1;                                  // 0x0554(0x0001) BIT_FIELD (Net, NoDestructor)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                             // 0x0554(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_A8GV[0x3];                                     // 0x0555(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNetViewer>                          ReplicationViewers;                                        // 0x0558(0x0010) (ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0568(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected)
	float                                              WorldGravityZ;                                             // 0x0578(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U752[0x4];                                     // 0x057C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerState*                                Pauser;                                                    // 0x0580(0x0008) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WorldSettings");
		return ptr;
	}



	void OnRep_WorldGravityZ();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PostProcessComponent
// 0x0560 (FullSize[0x0810] - InheritedSize[0x02B0])
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_GGIW[0x10];                                    // 0x02B0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        Settings;                                                  // 0x02C0(0x0540) (Edit, BlueprintVisible, Interp)
	float                                              Priority;                                                  // 0x0800(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BlendRadius;                                               // 0x0804(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              BlendWeight;                                               // 0x0808(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnabled : 1;                                              // 0x080C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUnbound : 1;                                              // 0x080C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_427D[0x3];                                     // 0x080D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PostProcessComponent");
		return ptr;
	}



	void AddOrUpdateBlendable(float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Texture
// 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
class UTexture : public UObject
{
public:
	int                                                LODBias;                                                   // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	int                                                NumCinematicMipLevels;                                     // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      SRGB : 1;                                                  // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      NeverStream : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay)
	unsigned char                                      bNoTiling : 1;                                             // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bUseCinematicMipLevels : 1;                                // 0x0030(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      CompressionNone : 1;                                       // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUAV : 1;                                                  // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_GB2M[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           MaxQualityReduction;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                CachedCombinedLODBias;                                     // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                   // 0x003C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_A8XD[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETextureCompressionSettings>    CompressionSettings;                                       // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETextureFilter>                 Filter;                                                    // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETextureGroup>                  LODGroup;                                                  // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_AVGH[0x1];                                     // 0x0043(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StreamingPriorityBoost;                                    // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_87SI[0x58];                                    // 0x0048(0x0058) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FExternalMip>                        ExternalMips;                                              // 0x00A0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_ACWY[0x88];                                    // 0x00B0(0x0088) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTarget
// 0x0008 (FullSize[0x0140] - InheritedSize[0x0138])
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                               // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0ZYS[0x4];                                     // 0x013C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTarget2D
// 0x0028 (FullSize[0x0168] - InheritedSize[0x0140])
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	int                                                SizeY;                                                     // 0x0144(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	struct FLinearColor                                ClearColor;                                                // 0x0148(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x0159(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5G6U[0x2];                                     // 0x015A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x015C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHDR : 1;                                                  // 0x015C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bAutoGenerateMips : 1;                                     // 0x015C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_I1WY[0x3];                                     // 0x015D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x0160(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bDontClearOnCreation;                                      // 0x0161(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XVQ2[0x6];                                     // 0x0162(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DebugCameraController
// 0x0050 (FullSize[0x0778] - InheritedSize[0x0728])
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bUseOriginalPlayerHUD : 1;                                 // 0x0728(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bShowSelectedInfo : 1;                                     // 0x0728(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor)
	unsigned char                                      bIsFrozenRendering : 1;                                    // 0x0728(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_AVDA[0x7];                                     // 0x0729(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x0730(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_O2VS[0x10];                                    // 0x0738(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerController*                           OriginalControllerRef;                                     // 0x0748(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayer*                                     OriginalPlayer;                                            // 0x0750(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpeedScale;                                                // 0x0758(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InitialMaxSpeed;                                           // 0x075C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InitialAccel;                                              // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InitialDecel;                                              // 0x0764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpeedScaleAdjustment;                                      // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FovScaleAdjustment;                                        // 0x076C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_54Z8[0x8];                                     // 0x0770(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DebugCameraController");
		return ptr;
	}



	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void IncreaseFOV();
	void IncreaseCameraSpeed();
	void DecreaseFOV();
	void DecreaseCameraSpeed();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HUD
// 0x00F8 (FullSize[0x04C8] - InheritedSize[0x03D0])
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                                // 0x03D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      GreenColor;                                                // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FColor                                      RedColor;                                                  // 0x03D8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MG1J[0x4];                                     // 0x03DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerController*                           PlayerOwner;                                               // 0x03E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLostFocusPaused : 1;                                      // 0x03E8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bShowHUD : 1;                                              // 0x03E8(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bShowDebugInfo : 1;                                        // 0x03E8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                  // 0x03E8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowOverlays : 1;                                         // 0x03E8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bEnableDebugTextShadow : 1;                                // 0x03E8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_U8NH[0x7];                                     // 0x03E9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AActor*>                              PostRenderedActors;                                        // 0x03F0(0x0010) (ZeroConstructor)
	float                                              LastHUDRenderTime;                                         // 0x0400(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RenderDelta;                                               // 0x0404(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FName>                               DebugDisplay;                                              // 0x0408(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                                    // 0x0418(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UCanvas*                                     Canvas;                                                    // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UCanvas*                                     DebugCanvas;                                               // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                             // 0x0438(0x0010) (ZeroConstructor, Protected)
	class UClass*                                      ShowDebugTargetDesiredClass;                               // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                      ShowDebugTargetActor;                                      // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_Y0ZS[0x70];                                    // 0x0458(0x0070) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}



	void ShowHUD();
	void ShowDebugToggleSubCategory(const struct FName& Category);
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void ShowDebug(const struct FName& DebugType);
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const struct FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void ReceiveHitBoxClick(const struct FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector Project(const struct FVector& Location);
	void GetTextSize(const struct FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale);
	class APlayerController* GetOwningPlayerController();
	class APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor);
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FeatureToggledStringAssetReference
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UFeatureToggledStringAssetReference : public UDataAsset
{
public:
	TArray<struct FFeatureToggledStringAssetReferenceEntry> Entries;                                                   // 0x0028(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      ClassType;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FeatureToggledStringAssetReference");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelScriptActor
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bInputEnabled : 1;                                         // 0x03D0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_GP6V[0x7];                                     // 0x03D1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelScriptActor");
		return ptr;
	}



	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void MatchStarted();
	void LevelReset();
	void InitialNetRelevantActorsCreated();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MeshComponent
// 0x0010 (FullSize[0x0598] - InheritedSize[0x0588])
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                         // 0x0588(0x0010) (Edit, ZeroConstructor, AdvancedDisplay)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}



	void ResetDefaultMaterials();
	TArray<class UMaterialInterface*> GetMaterials();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsHandleComponent
// 0x00A8 (FullSize[0x0170] - InheritedSize[0x00C8])
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                          // 0x00C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HE5W[0x10];                                    // 0x00D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearDamping;                                             // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LinearStiffness;                                           // 0x00E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AngularDamping;                                            // 0x00E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AngularStiffness;                                          // 0x00EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3835[0x60];                                    // 0x00F0(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpolationSpeed;                                        // 0x0150(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FRS0[0x1C];                                    // 0x0154(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsHandleComponent");
		return ptr;
	}



	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlatformEventsComponent
// 0x0020 (FullSize[0x00E8] - InheritedSize[0x00C8])
class UPlatformEventsComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;                       // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;                       // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlatformEventsComponent");
		return ptr;
	}



	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AtmosphericFogComponent
// 0x01E0 (FullSize[0x0490] - InheritedSize[0x02B0])
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                              SunMultiplier;                                             // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              FogMultiplier;                                             // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              DensityMultiplier;                                         // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              DensityOffset;                                             // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              DistanceScale;                                             // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              AltitudeScale;                                             // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              DistanceOffset;                                            // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              GroundOffset;                                              // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              StartDistance;                                             // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              SunDiscScale;                                              // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              DefaultBrightness;                                         // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FColor                                      DefaultLightColor;                                         // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      bDisableSunDisk : 1;                                       // 0x02E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor)
	unsigned char                                      bDisableGroundScattering : 1;                              // 0x02E0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor)
	unsigned char                                      UnknownData_OBVF[0x3];                                     // 0x02E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                          // 0x02E4(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly, Protected)
	class UTexture2D*                                  TransmittanceTexture;                                      // 0x0310(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                                  IrradianceTexture;                                         // 0x0318(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HG3Q[0x170];                                   // 0x0320(0x0170) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AtmosphericFogComponent");
		return ptr;
	}



	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundAttenuation
// 0x00C0 (FullSize[0x00E8] - InheritedSize[0x0028])
class USoundAttenuation : public UObject
{
public:
	struct FAttenuationSettings                        Attenuation;                                               // 0x0028(0x00C0) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundAttenuation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AudioComponent
// 0x0150 (FullSize[0x0400] - InheritedSize[0x02B0])
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                                  Sound;                                                     // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                        // 0x02B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay)
	class USoundClass*                                 SoundClassOverride;                                        // 0x02C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bAutoDestroy : 1;                                          // 0x02D0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                               // 0x02D0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                          // 0x02D0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowSpatialization : 1;                                  // 0x02D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x02D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsUISound : 1;                                            // 0x02D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_F8WA[0x3];                                     // 0x02D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PitchModulationMin;                                        // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PitchModulationMax;                                        // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeModulationMin;                                       // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeModulationMax;                                       // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeMultiplier;                                          // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PitchMultiplier;                                           // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              HighFrequencyGainMultiplier;                               // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttenuationSettings                        AttenuationOverrides;                                      // 0x02F8(0x00C0) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_8NJM[0x8];                                     // 0x03B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnAudioFinished;                                           // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_J7XY[0x18];                                    // 0x03D0(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptDelegate                             OnQueueSubtitles;                                          // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, NoDestructor)
	unsigned char                                      UnknownData_OSSX[0x8];                                     // 0x03F8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}



	void Stop();
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetIntParameter(const struct FName& InName, int InInt);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void SetBoolParameter(const struct FName& InName, bool InBool);
	void Play(float StartTime);
	bool IsPlaying();
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	bool BP_GetAttenuationSettingsToApply(struct FAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AdjustAttenuation(const struct FAttenuationSettings& InAttenuationSettings);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BasisComponent
// 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
class UBasisComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_431O[0x10];                                    // 0x02B0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BasisComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CalmWaterComponent
// 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
class UCalmWaterComponent : public USceneComponent
{
public:
	float                                              Radius;                                                    // 0x02B0(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RadiusPercentageToStartLerp;                               // 0x02B4(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DampeningFactor;                                           // 0x02B8(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_H9RU[0x4];                                     // 0x02BC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CalmWaterComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ChildActorComponent
// 0x0020 (FullSize[0x02D0] - InheritedSize[0x02B0])
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                           // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                      ChildActor;                                                // 0x02B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QW1L[0x10];                                    // 0x02C0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ChildActorComponent");
		return ptr;
	}



	void SetChildActorClass(class UClass* InClass);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EditorOnlyChildActorComponent
// 0x0010 (FullSize[0x02E0] - InheritedSize[0x02D0])
class UEditorOnlyChildActorComponent : public UChildActorComponent
{
public:
	class UClass*                                      CachedChildActorClass;                                     // 0x02D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0F0F[0x8];                                     // 0x02D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EditorOnlyChildActorComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DecalComponent
// 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                             // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SortOrder;                                                 // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FadeScreenSize;                                            // 0x02BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*                    MaterialInstanceDynamic;                                   // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_N3XD[0x18];                                    // 0x02C8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}



	void SetSortOrder(int Value);
	void SetLifeSpan(float LifeSpan);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* GetDecalDynamicMaterialInstance();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ExponentialHeightFogComponent
// 0x0060 (FullSize[0x0310] - InheritedSize[0x02B0])
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                              FogDensity;                                                // 0x02B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                FogInscatteringColor;                                      // 0x02B4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	struct FLinearColor                                FarFogInscatteringColor;                                   // 0x02C4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              DirectionalInscatteringExponent;                           // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              DirectionalInscatteringStartDistance;                      // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              StartScaleDirectionalInscattering;                         // 0x02DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              FarScaleDirectionalInscattering;                           // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                DirectionalInscatteringColor;                              // 0x02E4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              FogHeightFalloff;                                          // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              FogMaxOpacity;                                             // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              StartDistance;                                             // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              FarDistance;                                               // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              StartScale;                                                // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              FarScale;                                                  // 0x0308(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                               bIsUnderwater;                                             // 0x030C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_9WZ1[0x3];                                     // 0x030D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		return ptr;
	}



	void SetStartDistance(float Value);
	void SetInscatteringStartScale(float Value);
	void SetInscatteringFarScale(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFarInscatteringColour(const struct FLinearColor& Value);
	void SetExponentialFogFarDistance(float Value);
	void SetDirectionalInscatteringStartScale(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringFarScale(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FogVolumeComponent
// 0x0100 (FullSize[0x03B0] - InheritedSize[0x02B0])
class UFogVolumeComponent : public USceneComponent
{
public:
	struct FLinearColor                                Color;                                                     // 0x02B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SceneFogSaturation;                                        // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Density;                                                   // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              HeightFogFalloff;                                          // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DistanceFalloffPower;                                      // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ShadowIntensity;                                           // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ScaleOnTranslucency;                                       // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     FogVelocity;                                               // 0x02D8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     NoisePrimaryScale;                                         // 0x02E4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     NoiseSecondaryScale;                                       // 0x02F0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoiseBlend;                                                // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                                    VolumeTexture;                                             // 0x0300(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InscatteringIntensity;                                     // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InscatteringPower;                                         // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ShadowDistance;                                            // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ActiveBelowDepth;                                          // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseSceneInscattering : 1;                                 // 0x0318(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_HSLV[0x3];                                     // 0x0319(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bUnderwater;                                               // 0x031C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAdvancedVolumeFog;                                        // 0x031D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               UseDensityMapOnTranslucency;                               // 0x031E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5PYH[0x1];                                     // 0x031F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture*                                    DensityMap;                                                // 0x0320(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     DensityMapScale;                                           // 0x0328(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DensityMapOffset;                                          // 0x0334(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DensityMapActiveHemisphereOrigin;                          // 0x0340(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     DensityMapActiveHemisphereDirection;                       // 0x034C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              DensityMapActiveHemisphereInnerRadius;                     // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DensityMapActiveHemisphereOuterRadius;                     // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SelfShadowBrightness;                                      // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SelfShadowFogScale;                                        // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bMeshFog;                                                  // 0x0368(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DARV[0x3];                                     // 0x0369(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MeshFogDensity;                                            // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MeshFogShadowDensity;                                      // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MeshFogScatteringDensity;                                  // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     MeshFogNoisePrimaryScale;                                  // 0x0378(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MeshFogNoiseSecondaryScale;                                // 0x0384(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MeshFogNoiseBlend;                                         // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     MeshFogVelocity;                                           // 0x0394(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture*                                    MeshFogVolumeTexture;                                      // 0x03A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_35PD[0x8];                                     // 0x03A8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FogVolumeComponent");
		return ptr;
	}



	void UpdateFog();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedNavMeshInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInstancedNavMeshInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedNavMeshInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedNavMeshComponent
// 0x0020 (FullSize[0x02D0] - InheritedSize[0x02B0])
class UInstancedNavMeshComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData_CO29[0x8];                                     // 0x02B0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       NavMeshName;                                               // 0x02B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	bool                                               UseAttachedParentAsPrimitiveBase;                          // 0x02C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_NVYS[0xF];                                     // 0x02C1(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedNavMeshComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightComponentBase
// 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                       LightGuid;                                                 // 0x02B0(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Brightness;                                                // 0x02C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Intensity;                                                 // 0x02C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FColor                                      LightColor;                                                // 0x02C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      bAffectsWorld : 1;                                         // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      CastShadows : 1;                                           // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      CastStaticShadows : 1;                                     // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      CastDynamicShadows : 1;                                    // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAffectTranslucentLighting : 1;                            // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPrecomputedLightingIsValid : 1;                           // 0x02CC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      RainOcclusion : 1;                                         // 0x02CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_HZ9A[0x3];                                     // 0x02CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IndirectLightingIntensity;                                 // 0x02D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              ScaleForTranslucency;                                      // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              CapForTranslucency;                                        // 0x02D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_2YVS[0x4];                                     // 0x02DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightComponentBase");
		return ptr;
	}



	void SetCastShadows(bool bNewValue);
	struct FLinearColor GetLightColor();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightComponent
// 0x015C (FullSize[0x043C] - InheritedSize[0x02E0])
class ULightComponent : public ULightComponentBase
{
public:
	float                                              Temperature;                                               // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseTemperature : 1;                                       // 0x02E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_34ZH[0x3];                                     // 0x02E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ShadowMapChannel;                                          // 0x02E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_OD2L[0x4];                                     // 0x02EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SourceRadius;                                              // 0x02F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinRoughness;                                              // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              ShadowBias;                                                // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              ShadowSharpen;                                             // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              ShadowResMaxDynamicDegradation;                            // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      InverseSquaredFalloff : 1;                                 // 0x0304(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      CastTranslucentShadows : 1;                                // 0x0304(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                  // 0x0304(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                        // 0x0304(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_PUKR[0x3];                                     // 0x0305(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          LightFunctionMaterial;                                     // 0x0308(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     LightFunctionScale;                                        // 0x0310(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KL07[0x4];                                     // 0x031C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureLightProfile*                        IESTexture;                                                // 0x0320(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseIESBrightness : 1;                                     // 0x0328(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_F9H7[0x3];                                     // 0x0329(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              IESBrightnessScale;                                        // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              LightFunctionFadeDistance;                                 // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DisabledBrightness;                                        // 0x0334(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnableLightShaftBloom : 1;                                // 0x0338(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_GNRZ[0x3];                                     // 0x0339(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BloomScale;                                                // 0x033C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BloomThreshold;                                            // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                      BloomTint;                                                 // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseRayTracedDistanceFieldShadows;                         // 0x0348(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SJD4[0x3];                                     // 0x0349(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RayStartOffsetDepthScale;                                  // 0x034C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DEWY[0xEC];                                    // 0x0350(0x00EC) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}



	void SetTemperature(float NewTemperature);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
	int GetNumberOfShadowCastersInFirstCascade();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AmbientLightSourceComponent
// 0x0034 (FullSize[0x0470] - InheritedSize[0x043C])
class UAmbientLightSourceComponent : public ULightComponent
{
public:
	float                                              AmbientIntensity;                                          // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                Tint;                                                      // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      QuadraticFalloff : 1;                                      // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor)
	unsigned char                                      UnknownData_4SWZ[0x3];                                     // 0x0451(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAmbientLightConeShape>         Shape;                                                     // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESimpleLightFunctionType>       SimpleFunctionType;                                        // 0x0455(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_7Z72[0x2];                                     // 0x0456(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScaleOffset;                                               // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PulsePhase;                                                // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FlickerFrequency;                                          // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                FlickerPerlinRow;                                          // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                               bShadowed;                                                 // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	TEnumAsByte<Engine_EAmbientLightClusteringPolicy>  GroupingPolicy;                                            // 0x0469(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VIFE[0x6];                                     // 0x046A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AmbientLightSourceComponent");
		return ptr;
	}



	void SetTint(const struct FLinearColor& NewTint);
	void SetRadius(float NewRadius);
	void SetGroupingPolicy(TEnumAsByte<Engine_EAmbientLightClusteringPolicy> Policy);
	void SetAmbientIntensity(float NewIntensity);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DirectionalLightComponent
// 0x0084 (FullSize[0x04C0] - InheritedSize[0x043C])
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              OcclusionMaskDarkness;                                     // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OcclusionDepthRange;                                       // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     LightShaftOverrideDirection;                               // 0x0444(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              WholeSceneDynamicShadowRadius;                             // 0x0450(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DynamicShadowDistanceMovableLight;                         // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DynamicShadowDistanceStationaryLight;                      // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                DynamicShadowCascades;                                     // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CascadeDistributionExponent;                               // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CascadeTransitionFraction;                                 // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ShadowDistanceFadeoutFraction;                             // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastTransitionSizeOverride;                                // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              CloseCascadeUpdateRateInMs;                                // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              FarCascadesUpdateRateInMs;                                 // 0x0474(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                     // 0x0478(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_TDJJ[0x3];                                     // 0x0479(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                FarShadowCascadeCount;                                     // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              FarShadowDistance;                                         // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              NormalOffsetScale;                                         // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              CloudsShadowsIntensity;                                    // 0x0488(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              DistanceFieldShadowDistance;                               // 0x048C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LightSourceAngle;                                          // 0x0490(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TraceDistance;                                             // 0x0494(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                         // 0x0498(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastModulatedShadows : 1;                                 // 0x04A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_QKV4[0x3];                                     // 0x04A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      ModulatedShadowColor;                                      // 0x04AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                             // 0x04B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_OXF2[0xF];                                     // 0x04B1(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}



	void SetShadowLastTransitionSize(float NewValue);
	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetNormalOffsetBiasScale(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetFarCascadeUpdateRate(float NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int NewValue);
	void SetCloudsShadowsIntensity(float NewValue);
	void SetCloseCascadeUpdateRate(float NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PointLightComponent
// 0x003C (FullSize[0x0478] - InheritedSize[0x043C])
class UPointLightComponent : public ULightComponent
{
public:
	float                                              AttenuationRadius;                                         // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseInverseSquaredFalloff : 1;                             // 0x0440(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_4QK8[0x3];                                     // 0x0441(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LightFalloffExponent;                                      // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              IntensityScaleForWater;                                    // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              MinDistanceToLightAssumed;                                 // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              SourceRadius;                                              // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SourceLength;                                              // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESimpleLightFunctionType>       SimpleFunctionType;                                        // 0x0458(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZMWQ[0x3];                                     // 0x0459(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScaleOffset;                                               // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PulsePhase;                                                // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FlickerFrequency;                                          // 0x0464(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                FlickerPerlinRow;                                          // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLightmassPointLightSettings                LightmassSettings;                                         // 0x046C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}



	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetAttenuationRadius(float NewRadius);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpotLightComponent
// 0x0018 (FullSize[0x0490] - InheritedSize[0x0478])
class USpotLightComponent : public UPointLightComponent
{
public:
	unsigned char                                      UnknownData_OWMC[0x4];                                     // 0x0478(0x0004) Fix Super Size
	float                                              OuterConeAngle;                                            // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LightShaftConeAngle;                                       // 0x0480(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              KickBackRatio;                                             // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_2P0A[0x8];                                     // 0x0488(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetKickBackProportionality(float NewKickBackRatio);
	void SetInnerConeAngle(float NewInnerConeAngle);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkyLightComponent
// 0x01A0 (FullSize[0x0480] - InheritedSize[0x02E0])
class USkyLightComponent : public ULightComponentBase
{
public:
	TEnumAsByte<Engine_ESkyLightSourceType>            SourceType;                                                // 0x02E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VQAA[0x7];                                     // 0x02E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                Cubemap;                                                   // 0x02E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SkyDistanceThreshold;                                      // 0x02F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bLowerHemisphereIsBlack;                                   // 0x02F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_UZ8L[0x3];                                     // 0x02F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OcclusionMaxDistance;                                      // 0x02F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Contrast;                                                  // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinOcclusion;                                              // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                      OcclusionTint;                                             // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ScaleForInteriors;                                         // 0x0308(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_V59B[0xAC];                                    // 0x030C(0x00AC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTextureCube*                                BlendDestinationCubemap;                                   // 0x03B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_Y646[0xC0];                                    // 0x03C0(0x00C0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}



	void SetOcclusionTint(const struct FColor& InTint);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationGraphNodeComponent
// 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
class UNavigationGraphNodeComponent : public USceneComponent
{
public:
	struct FNavGraphNode                               Node;                                                      // 0x02B0(0x0018)
	class UNavigationGraphNodeComponent*               NextNodeComponent;                                         // 0x02C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationGraphNodeComponent*               PrevNodeComponent;                                         // 0x02D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U1PO[0x8];                                     // 0x02D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationGraphNodeComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsSpringComponent
// 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringStiffness;                                           // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpringDamping;                                             // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpringLengthAtRest;                                        // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpringRadius;                                              // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECollisionChannel>              SpringChannel;                                             // 0x02C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bIgnoreSelf;                                               // 0x02C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DCE9[0x2];                                     // 0x02C2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpringCompression;                                         // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1WKN[0x18];                                    // 0x02C8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsSpringComponent");
		return ptr;
	}



	struct FVector GetSpringRestingPoint();
	struct FVector GetSpringDirection();
	struct FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsThrusterComponent
// 0x0010 (FullSize[0x02C0] - InheritedSize[0x02B0])
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                              ThrustStrength;                                            // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RUMO[0xC];                                     // 0x02B4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsThrusterComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ArrowComponent
// 0x0018 (FullSize[0x05A0] - InheritedSize[0x0588])
class UArrowComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_ES0E[0x4];                                     // 0x0588(0x0004) Fix Super Size
	float                                              ArrowSize;                                                 // 0x058C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bIsScreenSizeScaled;                                       // 0x0590(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GZY8[0x3];                                     // 0x0591(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScreenSize;                                                // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bTreatAsASprite : 1;                                       // 0x0598(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_TC4L[0x7];                                     // 0x0599(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}



	void SetArrowColor_New(const struct FLinearColor& NewColor);
	void SetArrowColor_DEPRECATED(const struct FColor& NewColor);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WaterId
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UWaterId : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WaterId");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BaseWaterComponent
// 0x0010 (FullSize[0x0598] - InheritedSize[0x0588])
class UBaseWaterComponent : public UPrimitiveComponent
{
public:
	class UClass*                                      WaterId;                                                   // 0x0588(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                               ActiveInExclusionZone;                                     // 0x0590(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HWFB[0x7];                                     // 0x0591(0x0007) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BaseWaterComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FFTWaterComponent
// 0x03E8 (FullSize[0x0980] - InheritedSize[0x0598])
class UFFTWaterComponent : public UBaseWaterComponent
{
public:
	struct FFFTWaterComponentParams                    WaterParams;                                               // 0x0598(0x0310) (Edit)
	class UModel*                                      Brush;                                                     // 0x08A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBodySetup*                                  BrushBodySetup;                                            // 0x08B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     PrePivot;                                                  // 0x08B8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R6R7[0x84];                                    // 0x08C4(0x0084) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          LightFunctionMaterial;                                     // 0x0948(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UMaterial*                                   DefaultLightFunctionMaterial;                              // 0x0950(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_JN5F[0x28];                                    // 0x0958(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FFTWaterComponent");
		return ptr;
	}



	void SetWaterPositionOffset(const struct FVector2D& PositionOffset);
	void SetWaterColour(const struct FLinearColor& WaterColour);
	void SetSpecularBrightness(float SpecularBrightness);
	void SetShallowWaterColour(const struct FLinearColor& ShallowWaterColour);
	void SetReflectionBrightness(float ReflectionBrightness);
	void SetMurkyRegion(const struct FMurkyRegion& MurkyRegion);
	void SetFresnelPower(float FresnelPower);
	void SetFoamHighlightColour(const struct FLinearColor& FoamHighlightColour);
	void SetFoamColour(const struct FLinearColor& FoamColour);
	void SetFoamBrightness(float FoamBrightness);
	void SetCarrierWaveParams(float Amplitude, float WaveLength, float PropagationSpeed);
	void SetBackLitColour(const struct FLinearColor& BackLitColour);
	void SetAmbientColour(const struct FLinearColor& AmbientColour);
	void GetWaterPositionOffset(struct FVector2D* PositionOffset);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMeshComponent
// 0x0058 (FullSize[0x05F0] - InheritedSize[0x0598])
class UStaticMeshComponent : public UMeshComponent
{
public:
	unsigned char                                      UnknownData_3QDN[0x8];                                     // 0x0598(0x0008) Fix Super Size
	int                                                MinLOD;                                                    // 0x05A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_APXM[0x4];                                     // 0x05A4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 StaticMesh;                                                // 0x05A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                               bOverrideWireframeColor;                                   // 0x05B0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_75T3[0x3];                                     // 0x05B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      WireframeColorOverride;                                    // 0x05B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                    // 0x05B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOverrideLightMapRes : 1;                                  // 0x05B8(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_SPAS[0x3];                                     // 0x05B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                OverriddenLightMapRes;                                     // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              StreamingDistanceMultiplier;                               // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EZWE[0x4];                                     // 0x05C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FGuid>                               IrrelevantLights;                                          // 0x05C8(0x0010) (ZeroConstructor)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                   // 0x05D8(0x0010) (ZeroConstructor, Transient)
	class UMaterialInterface*                          CustomDepthMaterial;                                       // 0x05E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}



	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetForcedLodModel(int NewForcedLodModel);
	void SetCustomDepthMaterial(class UMaterialInterface* Material);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
	class UMaterialInterface* GetCustomDepthMaterial();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FogVolume
// 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
class AFogVolume : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                           // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UFogVolumeComponent*                         FogVolumeComponent;                                        // 0x03D8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FogVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ThreadedActor
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class AThreadedActor : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ThreadedActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInterface
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData_QOF9[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USubsurfaceProfile*                          SubsurfaceProfile;                                         // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NYA8[0x4];                                     // 0x0038(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                         // 0x003C(0x0014) (Edit, BlueprintVisible, Protected)
	unsigned char                                      UnknownData_PYIK[0x8];                                     // 0x0050(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInterface");
		return ptr;
	}



	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetBaseMaterial();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Material
// 0x09C0 (FullSize[0x0A18] - InheritedSize[0x0058])
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColorMaterialInput                         DiffuseColor;                                              // 0x0060(0x0040) (Deprecated)
	struct FColorMaterialInput                         SpecularColor;                                             // 0x00A0(0x0040) (Deprecated)
	struct FColorMaterialInput                         BaseColor;                                                 // 0x00E0(0x0040)
	struct FScalarMaterialInput                        Metallic;                                                  // 0x0120(0x0040)
	struct FScalarMaterialInput                        Specular;                                                  // 0x0160(0x0040)
	struct FScalarMaterialInput                        Roughness;                                                 // 0x01A0(0x0040)
	struct FVectorMaterialInput                        Normal;                                                    // 0x01E0(0x0048)
	struct FColorMaterialInput                         EmissiveColor;                                             // 0x0228(0x0040)
	struct FScalarMaterialInput                        Opacity;                                                   // 0x0268(0x0040)
	struct FScalarMaterialInput                        OpacityMask;                                               // 0x02A8(0x0040)
	TEnumAsByte<Engine_EMaterialDomain>                MaterialDomain;                                            // 0x02E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	TEnumAsByte<Engine_EBlendMode>                     BlendMode;                                                 // 0x02E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	TEnumAsByte<Engine_EDecalBlendMode>                DecalBlendMode;                                            // 0x02EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMaterialDecalResponse>         MaterialDecalResponse;                                     // 0x02EB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMaterialShadingModel>          ShadingModel;                                              // 0x02EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QPOB[0x3];                                     // 0x02ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OpacityMaskClipValue;                                      // 0x02F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              DepthWeightScale;                                          // 0x02F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DepthWeightExponent;                                       // 0x02F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DepthWeightBase;                                           // 0x02FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bBlendedOITAfterTranslucency : 1;                          // 0x0300(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bForceResolution : 1;                                      // 0x0300(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LDA2[0x3];                                     // 0x0301(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ELowResTranslucencyCascade>     ForcedResolution;                                          // 0x0304(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_P8VV[0x3];                                     // 0x0305(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FirstSplitDistance;                                        // 0x0308(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SecondSplitDistance;                                       // 0x030C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FullResInFrontMaxDistance;                                 // 0x0310(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      FullResInFront : 1;                                        // 0x0314(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      PopPerParticle : 1;                                        // 0x0314(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6F4O[0x3];                                     // 0x0315(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVectorMaterialInput                        WorldPositionOffset;                                       // 0x0318(0x0048)
	struct FVectorMaterialInput                        WorldDisplacement;                                         // 0x0360(0x0048)
	struct FScalarMaterialInput                        TessellationMultiplier;                                    // 0x03A8(0x0040)
	struct FColorMaterialInput                         SubsurfaceColor;                                           // 0x03E8(0x0040)
	struct FScalarMaterialInput                        ClearCoat;                                                 // 0x0428(0x0040)
	struct FScalarMaterialInput                        ClearCoatRoughness;                                        // 0x0468(0x0040)
	struct FScalarMaterialInput                        AmbientOcclusion;                                          // 0x04A8(0x0040)
	struct FScalarMaterialInput                        Refraction;                                                // 0x04E8(0x0040)
	struct FColorMaterialInput                         BillboardColor;                                            // 0x0528(0x0040)
	struct FVectorMaterialInput                        BillboardParams;                                           // 0x0568(0x0048)
	struct FVector2MaterialInput                       CustomizedUVs[0x8];                                        // 0x05B0(0x0240)
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x07F0(0x0038) (ZeroConstructor)
	unsigned char                                      UnknownData_6D4O[0x10];                                    // 0x0828(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScalarMaterialInput                        PixelDepthOffset;                                          // 0x0838(0x0040)
	unsigned char                                      bTranslucentBeforeTranslucency : 1;                        // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTranslucentBeforeVolumeFog : 1;                           // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTranslucentWithDepthWrite : 1;                            // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnableSeparateTranslucency : 1;                           // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableResponsiveAA : 1;                                   // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bScreenSpaceReflections : 1;                               // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      TwoSided : 1;                                              // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      DitheredLODTransition : 1;                                 // 0x0878(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_0AZ8[0x3];                                     // 0x0879(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EConstantMaterial>              ConstantMaterial;                                          // 0x087C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_GBOI[0x3];                                     // 0x087D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SkyLightWhenOccluded;                                      // 0x0880(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CloudShadowsInfluence;                                     // 0x0884(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NumCustomizedUVs;                                          // 0x0888(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETranslucencyLightingMode>      TranslucencyLightingMode;                                  // 0x088C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_YNJK[0x3];                                     // 0x088D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TranslucencyDirectionalLightingIntensity;                  // 0x0890(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LightColorInfluence;                                       // 0x0894(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AmbientLightColorInfluence;                                // 0x0898(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LightIntensityInfluence;                                   // 0x089C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AmbientLightIntensityInfluence;                            // 0x08A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AlternativeAmbientLightColorInfluence;                     // 0x08A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AlternativeAmbientLightIntensityInfluence;                 // 0x08A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEvaluateLightningAtParticleCenter : 1;                    // 0x08AC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_DOKS[0x3];                                     // 0x08AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TranslucencyScaleForReflection;                            // 0x08B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bObjectFadeEnabled : 1;                                    // 0x08B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_9QZ8[0x3];                                     // 0x08B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ObjectFadeRate;                                            // 0x08B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ObjectFadeDistanceThreshold;                               // 0x08BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TranslucentShadowDensityScale;                             // 0x08C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TranslucentSelfShadowDensityScale;                         // 0x08C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TranslucentSelfShadowSecondDensityScale;                   // 0x08C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TranslucentSelfShadowSecondOpacity;                        // 0x08CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TranslucentBackscatteringExponent;                         // 0x08D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                   // 0x08D4(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              TranslucentShadowStartOffset;                              // 0x08E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeFogScale;                                            // 0x08E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      DistanceFog : 1;                                           // 0x08EC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDisableDepthTest : 1;                                     // 0x08EC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                     // 0x08EC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDontRenderWhenPlayerInsideShip : 1;                       // 0x08EC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTangentSpaceNormal : 1;                                   // 0x08EC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                    // 0x08EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bBlockGI : 1;                                              // 0x08EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                          // 0x08EC(0x0001) BIT_FIELD (DuplicateTransient, NoDestructor)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                 // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithEditorCompositing : 1;                            // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithLandscape : 1;                                    // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithParticleSprites : 1;                              // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithCPUParticleSprites : 1;                           // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithStaticMesh : 1;                                   // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithCoverage : 1;                                     // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithGPUInstanceCulling : 1;                           // 0x08ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithBeamTrails : 1;                                   // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithMeshParticles : 1;                                // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithStaticLighting : 1;                               // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithFluidSurfaces : 1;                                // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithMorphTargets : 1;                                 // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                 // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                        // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsesDistortion : 1;                                       // 0x08EE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithClothing : 1;                                     // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithDeformables : 1;                                  // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithFFTWaterMask : 1;                                 // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithVolumeFogMask : 1;                                // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithDynamicObjectFading : 1;                          // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithWaterBoundary : 1;                                // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithClouds : 1;                                       // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithInstancedRopes : 1;                               // 0x08EF(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithPlanarReflection : 1;                             // 0x08F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithPointLightShadows : 1;                            // 0x08F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithMaskPass : 1;                                     // 0x08F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUsedWithUI : 1;                                           // 0x08F0(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                        // 0x08F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bAllowEmissiveOnLandscape : 1;                             // 0x08F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bApplyWaterMask : 1;                                       // 0x08F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseReZ : 1;                                               // 0x08F0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bFullyRough : 1;                                           // 0x08F1(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bUseLightmapDirectionality : 1;                            // 0x08F1(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_BV0P[0x2];                                     // 0x08F2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaterialGeometryMode>          GeometryMode;                                              // 0x08F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMaterialTessellationMode>      D3D11TessellationMode;                                     // 0x08F5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0P5K[0x2];                                     // 0x08F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                          // 0x08F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                           // 0x08F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_Y2EC[0x3];                                     // 0x08F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxDisplacement;                                           // 0x08FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      Wireframe : 1;                                             // 0x0900(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOutputVelocityOnBasePass : 1;                             // 0x0900(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_YKRR[0x3];                                     // 0x0901(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NormalOffsetShadowBiasScale;                               // 0x0904(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                EditorX;                                                   // 0x0908(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                EditorY;                                                   // 0x090C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                EditorPitch;                                               // 0x0910(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                EditorYaw;                                                 // 0x0914(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialExpression*>                 Expressions;                                               // 0x0918(0x0010) (ZeroConstructor)
	TArray<struct FMaterialFunctionInfo>               MaterialFunctionInfos;                                     // 0x0928(0x0010) (ZeroConstructor)
	TArray<struct FMaterialParameterCollectionInfo>    MaterialParameterCollectionInfos;                          // 0x0938(0x0010) (ZeroConstructor)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                             // 0x0948(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsMasked : 1;                                             // 0x0948(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bIsPreviewMaterial : 1;                                    // 0x0948(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor)
	unsigned char                                      bUseMaterialAttributes : 1;                                // 0x0948(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                             // 0x0948(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseDensityMapOnTranslucencyVertexFog : 1;                 // 0x0948(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                        // 0x0948(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                        // 0x0948(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor)
	unsigned char                                      UnknownData_ML2K[0x3];                                     // 0x0949(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UsageFlagWarnings;                                         // 0x094C(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EBlendableLocation>             BlendableLocation;                                         // 0x0950(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_28HQ[0x3];                                     // 0x0951(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlendablePriority;                                         // 0x0954(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIsAlphaBlended : 1;                                       // 0x0958(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_TRJS[0x3];                                     // 0x0959(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RefractionDepthBias;                                       // 0x095C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGuid                                       StateId;                                                   // 0x0960(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                UnwrappedUVSet;                                            // 0x0970(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_X42U[0x8C];                                    // 0x0974(0x008C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UTexture*>                            ExpressionTextureReferences;                               // 0x0A00(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_UPJA[0x8];                                     // 0x0A10(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraModifier
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                                // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bExclusive : 1;                                            // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_XVS0[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      Priority;                                                  // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VXSH[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerCameraManager*                        CameraOwner;                                               // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              AlphaInTime;                                               // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              AlphaOutTime;                                              // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              Alpha;                                                     // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_A93A[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}



	bool IsDisabled();
	class AActor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsVolume
// 0x0010 (FullSize[0x0418] - InheritedSize[0x0408])
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                          // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                Priority;                                                  // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FluidFriction;                                             // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bWaterVolume : 1;                                          // 0x0414(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bPhysicsOnContact : 1;                                     // 0x0414(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_2O79[0x3];                                     // 0x0415(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSystemComponent
// 0x02E0 (FullSize[0x0868] - InheritedSize[0x0588])
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                                  // 0x0588(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                          // 0x0590(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                        // 0x05A0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference)
	unsigned char                                      UnknownData_ANGR : 6;                                      // 0x05B0(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bResetOnDetach : 1;                                        // 0x05B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                              // 0x05B0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_XKPU[0x7];                                     // 0x05B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleSysParam>                   InstanceParameters;                                        // 0x05B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FParticleSysParam                           EmitterPointParameter;                                     // 0x05C8(0x0050) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x0618(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x0628(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x0638(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x0648(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     OldPosition;                                               // 0x0658(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PartSysVelocity;                                           // 0x0664(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_36S8[0x18];                                    // 0x0670(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     CustomInheritedVelocity;                                   // 0x0688(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	unsigned char                                      UnknownData_S5TK[0xC];                                     // 0x0694(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomParameterDrivingCurves;                              // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                ColourTint;                                                // 0x06A4(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	float                                              WarmUpTime;                                                // 0x06B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WarmupTickRate;                                            // 0x06B8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bWarmingUp : 1;                                            // 0x06BC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_8UWU[0x1B];                                    // 0x06BD(0x001B) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SecondsBeforeInactive;                                     // 0x06D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_Y9MB[0x8];                                     // 0x06DC(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxTimeBeforeForceUpdateTransform;                         // 0x06E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_PQRZ[0x4];                                     // 0x06E8(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideLODMethod : 1;                                    // 0x06EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_YP2Q[0x3];                                     // 0x06ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x06F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FRUI[0x3];                                     // 0x06F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                      // 0x06F4(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_EUCI[0x3];                                     // 0x06F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FMaterialRelevance>                  CachedViewRelevanceFlags;                                  // 0x06F8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_6V94[0x8];                                     // 0x0708(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleSystemReplay*>               ReplayClips;                                               // 0x0710(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_9Y9J[0x60];                                    // 0x0720(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CustomTimeDilation;                                        // 0x0780(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_GQZT[0x4];                                     // 0x0784(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnSystemFinished;                                          // 0x0788(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bUnbound : 1;                                              // 0x0798(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_8TRL[0xCF];                                    // 0x0799(0x00CF) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}



	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetEnableDistanceFading(bool bEnable);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetCustomLocalSpaceWorldSpace();
	void SetCustomLocalSpaceComponent(class USceneComponent* InComponent);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	int GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(const struct FName& InName);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<Engine_ETrailWidthMode> InWidthMode, float InWidth);
	void AddKillSphere(const struct FVector4& KillSphere);
	void AddEmitterPoint(const struct FVector4& Position, const struct FVector4& InheritedVelocity, const struct FVector4& Orientation, const struct FVector& Scale);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SplineComponent
// 0x0080 (FullSize[0x0608] - InheritedSize[0x0588])
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                                // 0x0588(0x0018) (Edit, ZeroConstructor)
	struct FInterpCurveQuat                            SplineRotInfo;                                             // 0x05A0(0x0018) (ZeroConstructor)
	struct FInterpCurveVector                          SplineScaleInfo;                                           // 0x05B8(0x0018) (ZeroConstructor)
	struct FInterpCurveFloat                           SplineReparamTable;                                        // 0x05D0(0x0018) (ZeroConstructor)
	bool                                               bAllowSplineEditingPerInstance;                            // 0x05E8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JSH8[0x3];                                     // 0x05E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ReparamStepsPerSegment;                                    // 0x05EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              Duration;                                                  // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bStationaryEndpoints;                                      // 0x05F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bSplineHasBeenEdited;                                      // 0x05F5(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	bool                                               bClosedLoop;                                               // 0x05F6(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_S4PG[0x1];                                     // 0x05F7(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     DefaultUpVector;                                           // 0x05F8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1JVD[0x4];                                     // 0x0604(0x0004) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SplineComponent");
		return ptr;
	}



	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetSplineWorldPoints(TArray<struct FVector> Points);
	void SetSplinePointType(int PointIndex, TEnumAsByte<Engine_ESplinePointType> Type);
	void SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetSplineLocalPoints(TArray<struct FVector> Points);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetClosedLoop(bool bInClosedLoop);
	bool IsClosedLoop();
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	struct FVector GetUpVectorAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform GetTransformAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector GetTangentAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<Engine_ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetScaleAtSplinePoint(int PointIndex);
	struct FVector GetScaleAtDistanceAlongSpline(float Distance);
	struct FRotator GetRotationAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FQuat GetQuaternionAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FQuat GetQuaternionAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FQuat GetQuaternionAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	int GetNumberOfSplinePoints();
	struct FVector GetLocationAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* Location, struct FVector* Tangent, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	struct FVector GetDirectionAtTime(float Time, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDefaultUpVector(TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints();
	void AddSplineWorldPoint(const struct FVector& Position);
	void AddSplinePoint(const struct FVector& Position, TEnumAsByte<Engine_ESplineCoordinateSpace> CoordinateSpace);
	void AddSplineLocalPoint(const struct FVector& Position);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ShapeComponent
// 0x0020 (FullSize[0x05A8] - InheritedSize[0x0588])
class UShapeComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_4Q64[0x8];                                     // 0x0588(0x0008) Fix Super Size
	class UBodySetup*                                  ShapeBodySetup;                                            // 0x0590(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                   // 0x0598(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                             // 0x0598(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDynamicObstacle : 1;                                      // 0x0598(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_95TE[0x7];                                     // 0x0599(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AreaClass;                                                 // 0x05A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ShapeComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CapsuleComponent
// 0x0008 (FullSize[0x05B0] - InheritedSize[0x05A8])
class UCapsuleComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData_3MUR[0x4];                                     // 0x05A8(0x0004) Fix Super Size
	float                                              CapsuleRadius;                                             // 0x05AC(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CapsuleComponent");
		return ptr;
	}



	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureProxy
// 0x0008 (FullSize[0x0140] - InheritedSize[0x0138])
class UTextureProxy : public UTexture
{
public:
	class UTexture*                                    Texture;                                                   // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureProxy");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Commandlet
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                           // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     HelpUsage;                                                 // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     HelpWebLink;                                               // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FString>                             HelpParamNames;                                            // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FString>                             HelpParamDescriptions;                                     // 0x0068(0x0010) (ZeroConstructor)
	unsigned char                                      IsServer : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      IsClient : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      IsEditor : 1;                                              // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      LogToConsole : 1;                                          // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      ShowErrorCount : 1;                                        // 0x0078(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_IFDK[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Commandlet");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedStaticMeshComponent
// 0x00B0 (FullSize[0x06A0] - InheritedSize[0x05F0])
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                         // 0x05F0(0x0010) (Edit, ZeroConstructor, Transient, DuplicateTransient)
	int                                                InstancingRandomSeed;                                      // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                InstanceStartCullDistance;                                 // 0x0604(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                InstanceEndCullDistance;                                   // 0x0608(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_XMRK[0x4];                                     // 0x060C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        InstanceReorderTable;                                      // 0x0610(0x0010) (ZeroConstructor)
	TArray<int>                                        RemovedInstances;                                          // 0x0620(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_NSG9[0x48];                                    // 0x0630(0x0048) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsSerializer*                          PhysicsSerializer;                                         // 0x0678(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NumPendingLightmaps;                                       // 0x0680(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash)
	unsigned char                                      UnknownData_WZHS[0x4];                                     // 0x0684(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                            // 0x0688(0x0010) (ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient)
	unsigned char                                      UnknownData_2TMB[0x8];                                     // 0x0698(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		return ptr;
	}



	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex);
	bool GetInstanceTransform(int InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace);
	TArray<int> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
	int GetInstanceCount();
	void EnableGPUVisibility(bool bEnable);
	void ClearInstances();
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	void AddInstances(TArray<struct FTransform> InstanceTransforms);
	int AddInstance(const struct FTransform& InstanceTransform);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x00C8 (FullSize[0x0768] - InheritedSize[0x06A0])
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_JAXX[0x40];                                    // 0x06A0(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        SortedInstances;                                           // 0x06E0(0x0010) (ZeroConstructor)
	int                                                NumBuiltInstances;                                         // 0x06F0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                        BuiltInstanceBounds;                                       // 0x06F4(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                        UnbuiltInstanceBounds;                                     // 0x0710(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MNVY[0x4];                                     // 0x072C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                                 // 0x0730(0x0010) (ZeroConstructor)
	int                                                OcclusionLayerNumNodes;                                    // 0x0740(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZBJ8[0x2];                                     // 0x0744(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bDisableCollision;                                         // 0x0746(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FLQG[0x21];                                    // 0x0747(0x0021) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HierarchicalInstancedStaticMeshComponent");
		return ptr;
	}



	bool RemoveInstances(TArray<int> InstancesToRemove);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstance
// 0x0160 (FullSize[0x01B8] - InheritedSize[0x0058])
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                          Parent;                                                    // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      bHasStaticPermutationResource : 1;                         // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_M5TX : 1;                                      // 0x0068(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                            // 0x0068(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_6624[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       ParentLightingGuid;                                        // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                       // 0x0080(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                     // 0x0090(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                    // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                     // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                     // 0x00C0(0x0084) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData_DI8Z[0x74];                                    // 0x0144(0x0074) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstanceConstant
// 0x0000 (FullSize[0x01B8] - InheritedSize[0x01B8])
class UMaterialInstanceConstant : public UMaterialInstance
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpression
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                                   Material;                                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialFunction*                           Function;                                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     Desc;                                                      // 0x0038(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	struct FColor                                      BorderColor;                                               // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRealtimePreview : 1;                                      // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bNeedToUpdatePreview : 1;                                  // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsParameterExpression : 1;                                // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCommentBubbleVisible : 1;                                 // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowOutputNameOnPin : 1;                                  // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHidePreviewWindow : 1;                                    // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCollapsed : 1;                                            // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShaderInputData : 1;                                      // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowInputs : 1;                                           // 0x004D(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowOutputs : 1;                                          // 0x004D(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_LWUT[0x2];                                     // 0x004E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FText>                               MenuCategories;                                            // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FExpressionOutput>                   Outputs;                                                   // 0x0060(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomOutput");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintAsyncActionBase
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlueprintAsyncActionBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlueprintAsyncActionBase");
		return ptr;
	}



	void Activate();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintGeneratedClass
// 0x0068 (FullSize[0x0228] - InheritedSize[0x01C0])
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                   // 0x01C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HNZ6[0x4];                                     // 0x01C4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                     // 0x01C8(0x0010) (ZeroConstructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                                        // 0x01D8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x01E8(0x0010) (ZeroConstructor)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x01F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInheritableComponentHandler*                InheritableComponentHandler;                               // 0x0200(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStructProperty*                             UberGraphFramePointerProperty;                             // 0x0208(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFunction*                                   UberGraphFunction;                                         // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FEventGraphFastCallPair>             FastCallPairs;                                             // 0x0218(0x0010) (ZeroConstructor, Deprecated)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlueprintGeneratedClass");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AISystemBase
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UAISystemBase : public UObject
{
public:
	struct FStringClassReference                       AISystemClassName;                                         // 0x0028(0x0010) (ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FName                                       AISystemModuleName;                                        // 0x0038(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AISystemBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.UserDefinedStruct
// 0x0010 (FullSize[0x00A8] - InheritedSize[0x0098])
class UUserDefinedStruct : public UScriptStruct
{
public:
	struct FGuid                                       Guid;                                                      // 0x0098(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.UserDefinedStruct");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Player
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData_ULFH[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerController*                           PlayerController;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                CurrentNetSpeed;                                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                ConfiguredInternetSpeed;                                   // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                ConfiguredLanSpeed;                                        // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HA82[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetConnection
// 0x34540 (FullSize[0x34588] - InheritedSize[0x0048])
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData_N7IQ[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UChildConnection*>                    Children;                                                  // 0x0050(0x0010) (ZeroConstructor, Transient)
	class UNetDriver*                                  Driver;                                                    // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPackageMap*                                 PackageMap;                                                // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UChannel*>                            OpenChannels;                                              // 0x0070(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              SentTemporaries;                                           // 0x0080(0x0010) (ZeroConstructor)
	class AActor*                                      ViewTarget;                                                // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                      OwningActor;                                               // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxPacket;                                                 // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      InternalAck : 1;                                           // 0x00A4(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_PAMK[0x2FB];                                   // 0x00A5(0x02FB) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	double                                             LastReceiveTime;                                           // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LJLS[0x340C0];                                 // 0x03A8(0x340C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxDormantActorsCheckedFromRelevancy;                      // 0x34468(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZGXF[0x54];                                    // 0x3446C(0x0054) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UChannel*>                            DeferredCloseChannels;                                     // 0x344C0(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_D6GC[0xB8];                                    // 0x344D0(0x00B8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetDriver
// 0x0450 (FullSize[0x0478] - InheritedSize[0x0028])
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData_P5WN[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NetConnectionClassName;                                    // 0x0038(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash)
	int                                                MaxDownloadSize;                                           // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bClampListenServerTickRate : 1;                            // 0x004C(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_HT99[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NetServerMaxTickRate;                                      // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxInternetClientRate;                                     // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxClientRate;                                             // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ServerTravelPause;                                         // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpawnPrioritySeconds;                                      // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RelevantTimeout;                                           // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              KeepAliveTime;                                             // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InitialConnectTimeout;                                     // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConnectionTimeout;                                         // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QNLT[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetConnection*                              ServerConnection;                                          // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNetConnection*>                      ClientConnections;                                         // 0x0080(0x0010) (ZeroConstructor)
	class UWorld*                                      World;                                                     // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_WZOF[0x30];                                    // 0x0098(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      NetConnectionClass;                                        // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProperty*                                   RoleProperty;                                              // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProperty*                                   RemoteRoleProperty;                                        // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       NetDriverName;                                             // 0x00E0(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LQLR[0x390];                                   // 0x00E8(0x0390) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.OnlineSession
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UOnlineSession : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.OnlineSession");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Model
// 0x0550 (FullSize[0x0578] - InheritedSize[0x0028])
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData_NCD8[0x550];                                   // 0x0028(0x0550) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphNode
// 0x0068 (FullSize[0x0090] - InheritedSize[0x0028])
class UEdGraphNode : public UObject
{
public:
	TArray<class UEdGraphPin*>                         Pins;                                                      // 0x0028(0x0010) (ZeroConstructor)
	int                                                NodePosX;                                                  // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NodePosY;                                                  // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NodeWidth;                                                 // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NodeHeight;                                                // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bHasCompilerMessage : 1;                                   // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_2S3W[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     NodeComment;                                               // 0x0050(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	bool                                               bCommentBubblePinned;                                      // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bCommentBubbleVisible;                                     // 0x0061(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VYYN[0x2];                                     // 0x0062(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                ErrorType;                                                 // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     ErrorMsg;                                                  // 0x0068(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FGuid                                       NodeGuid;                                                  // 0x0078(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ENodeAdvancedPins>              AdvancedPinDisplay;                                        // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bIsNodeEnabled;                                            // 0x0089(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIsDebugFunction;                                          // 0x008A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_2YKB[0x5];                                     // 0x008B(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphNode");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphPin
// 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
class UEdGraphPin : public UObject
{
public:
	struct FString                                     PinName;                                                   // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     PinToolTip;                                                // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EEdGraphPinDirection>           Direction;                                                 // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CMZ6[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FEdGraphPinType                             PinType;                                                   // 0x0050(0x0050)
	struct FString                                     DefaultValue;                                              // 0x00A0(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     AutogeneratedDefaultValue;                                 // 0x00B0(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                     DefaultObject;                                             // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FText                                       DefaultTextValue;                                          // 0x00C8(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_XNPG[0x20];                                    // 0x00C8(0x0020) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TArray<class UEdGraphPin*>                         LinkedTo;                                                  // 0x0100(0x0010) (ZeroConstructor)
	TArray<class UEdGraphPin*>                         SubPins;                                                   // 0x0110(0x0010) (ZeroConstructor)
	class UEdGraphPin*                                 ParentPin;                                                 // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphPin");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineBaseTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineBaseTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EngineBaseTypes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DamageType
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UDamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                                        // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      bScaleMomentumByMass : 1;                                  // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_HYDX[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamageImpulse;                                             // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRadialDamageVelChange : 1;                                // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_WA1I[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DestructibleImpulse;                                       // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DestructibleDamageSpreadScale;                             // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DamageFalloff;                                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEngineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EngineTypes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlueprintCore
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                    // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      GeneratedClass;                                            // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                               bLegacyNeedToPurgeSkelRefs;                                // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bLegacyGeneratedClassIsAuthoritative;                      // 0x0039(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_AEK2[0x2];                                     // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       BlueprintGuid;                                             // 0x003C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_KTRM[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlueprintCore");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Blueprint
// 0x0088 (FullSize[0x00D8] - InheritedSize[0x0050])
class UBlueprint : public UBlueprintCore
{
public:
	unsigned char                                      bRecompileOnLoad : 1;                                      // 0x0050(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_GI69[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      ParentClass;                                               // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                     PRIVATE_InnermostPreviousCDO;                              // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bHasBeenRegenerated : 1;                                   // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                 // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_6B77[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                  // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                     ComponentTemplates;                                        // 0x0078(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<class UTimelineTemplate*>                   Timelines;                                                 // 0x0088(0x0010) (ZeroConstructor)
	class UInheritableComponentHandler*                InheritableComponentHandler;                               // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EBlueprintType>                 BlueprintType;                                             // 0x00A0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QEHC[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BlueprintSystemVersion;                                    // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RZS3[0x30];                                    // 0x00A8(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Blueprint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_AssetUserData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_AssetUserData : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Interface_AssetUserData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TestInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UTestInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TestInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DerivedTestInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDerivedTestInterface : public UTestInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DerivedTestInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ComponentWithDerivedTestInterface
// 0x0008 (FullSize[0x00D0] - InheritedSize[0x00C8])
class UComponentWithDerivedTestInterface : public UActorComponent
{
public:
	unsigned char                                      UnknownData_BT7U[0x8];                                     // 0x00C8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ComponentWithDerivedTestInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ActorWithComponentWithDerivedTestInterface
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AActorWithComponentWithDerivedTestInterface : public AActor
{
public:
	class UComponentWithDerivedTestInterface*          ComponentWithDerivedTestInterface;                         // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ActorWithComponentWithDerivedTestInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ActorWithTestInterface
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AActorWithTestInterface : public AActor
{
public:
	unsigned char                                      UnknownData_5C9T[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ActorWithTestInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AmbientSound
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponent;                                            // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}



	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AutomaticInstancingActor
// 0x0058 (FullSize[0x0428] - InheritedSize[0x03D0])
class AAutomaticInstancingActor : public AActor
{
public:
	class USceneComponent*                             DummyRoot;                                                 // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FName, struct FAutomaticInstancingMeshComponentArray> CookedInstancedStaticMeshes;                               // 0x03D8(0x0050) (ZeroConstructor, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AutomaticInstancingActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PendingNetGame
// 0x00D8 (FullSize[0x0100] - InheritedSize[0x0028])
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData_WR10[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UNetDriver*                                  NetDriver;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_V7RD[0xB0];                                    // 0x0038(0x00B0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPackage*                                    PreLoadedMapPackage;                                       // 0x00E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWorld*                                      PreLoadedWorld;                                            // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_IMTV[0x8];                                     // 0x00F8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PendingNetGame");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.World
// 0x0840 (FullSize[0x0868] - InheritedSize[0x0028])
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData_VA5T[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevel*                                      PersistentLevel;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNetDriver*                                  NetDriver;                                                 // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULineBatchComponent*                         LineBatcher;                                               // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULineBatchComponent*                         PersistentLineBatcher;                                     // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULineBatchComponent*                         ForegroundLineBatcher;                                     // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameState*                                  GameState;                                                 // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameNetworkManager*                         NetworkManager;                                            // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                   // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                             ExtraReferencedObjects;                                    // 0x0070(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             PerModuleDataObjects;                                      // 0x0080(0x0010) (ZeroConstructor, Transient)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                           // 0x0090(0x0010) (ZeroConstructor, Transient)
	struct FString                                     StreamingLevelsPrefix;                                     // 0x00A0(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	class ULevel*                                      CurrentLevelPendingVisibility;                             // 0x00B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AParticleEventManager*                       MyParticleEventManager;                                    // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APhysicsVolume*                              DefaultPhysicsVolume;                                      // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelStreaming*>                     DirtyStreamingLevels;                                      // 0x00C8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_SYMG[0x1C];                                    // 0x00D8(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       Feature;                                                   // 0x00F4(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9CMV[0x4];                                     // 0x00FC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               FeatureReferences;                                         // 0x0100(0x0010) (ZeroConstructor, AssetRegistrySearchable)
	bool                                               ParticleLOD_bUseGameThread;                                // 0x0110(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                               ParticleLOD_bUseMultipleViewportCase;                      // 0x0111(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_J13Y[0x2];                                     // 0x0112(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ParticleLOD_PlayerViewpointLocation;                       // 0x0114(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	struct FString                                     TestMetadata;                                              // 0x0120(0x0010) (ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash)
	class UNavigationSystem*                           NavigationSystem;                                          // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameMode*                                   AuthorityGameMode;                                         // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAISystemBase*                               AISystem;                                                  // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAvoidanceManager*                           AvoidanceManager;                                          // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevel*>                              Levels;                                                    // 0x0150(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_5R00[0x50];                                    // 0x0160(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevel*                                      CurrentLevel;                                              // 0x01B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UEKU[0x8];                                     // 0x01B8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameInstance*                               OwningGameInstance;                                        // 0x01C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x01C8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_F471[0x5C0];                                   // 0x01D8(0x05C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UWorldComposition*                           WorldComposition;                                          // 0x0798(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3VHE[0x3D];                                    // 0x07A0(0x003D) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_6YUZ : 7;                                      // 0x07DD(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bAreConstraintsDirty : 1;                                  // 0x07DD(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_LX9E[0x8A];                                    // 0x07DE(0x008A) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.World");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Level
// 0x02D8 (FullSize[0x0300] - InheritedSize[0x0028])
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData_MULU[0xA0];                                    // 0x0028(0x00A0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevelActorContainer*                        ActorCluster;                                              // 0x00C8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWorld*                                      OwningWorld;                                               // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UModel*                                      Model;                                                     // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UModelComponent*>                     ModelComponents;                                           // 0x00E0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	class ALevelScriptActor*                           LevelScriptActor;                                          // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ANavigationObjectBase*                       NavListStart;                                              // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANavigationObjectBase*                       NavListEnd;                                                // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                             // 0x0108(0x0010) (ZeroConstructor)
	float                                              LightmapTotalSize;                                         // 0x0118(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ShadowmapTotalSize;                                        // 0x011C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                             StaticNavigableGeometry;                                   // 0x0120(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_EFR4[0x130];                                   // 0x0130(0x0130) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               LevelVisibility;                                           // 0x0260(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_D2I1[0xF];                                     // 0x0261(0x000F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_W2BR : 3;                                      // 0x0270(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      Blocked : 1;                                               // 0x0270(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_ZKOX[0x67];                                    // 0x0271(0x0067) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x02D8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected)
	unsigned char                                      UnknownData_0UMN[0x18];                                    // 0x02E8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BrushShape
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class ABrushShape : public ABrush
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BrushShape");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AudioVolume
// 0x0050 (FullSize[0x0458] - InheritedSize[0x0408])
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                                  // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnabled : 1;                                              // 0x040C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor)
	unsigned char                                      UnknownData_GENI[0x3];                                     // 0x040D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FReverbSettings                             Settings;                                                  // 0x0410(0x0018) (Edit, BlueprintVisible)
	struct FInteriorSettings                           AmbientZoneSettings;                                       // 0x0428(0x0024) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_20P9[0x4];                                     // 0x044C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AAudioVolume*                                NextLowerPriorityVolume;                                   // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AudioVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraBlockingVolume
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class ACameraBlockingVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraBlockingVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CullDistanceVolume
// 0x0018 (FullSize[0x0420] - InheritedSize[0x0408])
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                             // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                              // 0x0418(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_Q5Y9[0x7];                                     // 0x0419(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FFTWater
// 0x0010 (FullSize[0x0418] - InheritedSize[0x0408])
class AFFTWater : public AVolume
{
public:
	class UFFTWaterComponent*                          FFTWaterComponent;                                         // 0x0408(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFFTWaterExtendedPlaneComponent*             ExtendedPlaneComponent;                                    // 0x0410(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FFTWater");
		return ptr;
	}



	bool ValidateVertexBuffer();
	bool ValidateParticlesVelocity();
	bool ValidateIndexBuffer();
	void SetWireframe(bool bWireframe);
	void SetWaterColour(const struct FLinearColor& WaterColour);
	void SetSpecularBrightness(float SpecularBrightness);
	void SetShallowWaterColour(const struct FLinearColor& ShallowWaterColour);
	void SetReflectionBrightness(float ReflectionBrightness);
	void SetLightFunctionMaterial(class UMaterialInterface* Material);
	void SetFresnelPower(float FresnelPower);
	void SetFoamHighlightColour(const struct FLinearColor& FoamHighlightColour);
	void SetFoamColour(const struct FLinearColor& FoamColour);
	void SetFoamBrightness(float FoamBrightness);
	void SetCausticsDepth(float Depth);
	void SetBackLitColour(const struct FLinearColor& BackLitColour);
	void SetAmbientColour(const struct FLinearColor& AmbientColour);
	bool HasLightFunctionMaterial();
	class UFFTWaterComponent* GetComponent();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingVolume
// 0x0018 (FullSize[0x0420] - InheritedSize[0x0408])
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                       // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                                     // 0x0418(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisabled : 1;                                             // 0x0418(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_OBZ8[0x3];                                     // 0x0419(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EStreamingVolumeUsage>          StreamingUsage;                                            // 0x041C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5OJW[0x3];                                     // 0x041D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassImportanceVolume
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class ALightmassImportanceVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavigationTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationTypes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavMeshBoundsVolume
// 0x0010 (FullSize[0x0418] - InheritedSize[0x0408])
class ANavMeshBoundsVolume : public AVolume
{
public:
	struct FNavAgentSelector                           SupportedAgents;                                           // 0x0408(0x0004) (Edit)
	struct FName                                       OriginatingLevelName;                                      // 0x040C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CSTS[0x4];                                     // 0x0414(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavMeshBoundsVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedNavMeshBoundsVolume
// 0x0000 (FullSize[0x0418] - InheritedSize[0x0418])
class AInstancedNavMeshBoundsVolume : public ANavMeshBoundsVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedNavMeshBoundsVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavArea
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UNavArea : public UObject
{
public:
	float                                              DefaultCost;                                               // 0x0028(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FixedAreaEnteringCost;                                     // 0x002C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	struct FColor                                      DrawColor;                                                 // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	struct FNavAgentSelector                           SupportedAgents;                                           // 0x0034(0x0004) (Edit, Config)
	unsigned char                                      bSupportsAgent0 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent1 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent2 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent3 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent4 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent5 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent6 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent7 : 1;                                       // 0x0038(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent8 : 1;                                       // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent9 : 1;                                       // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent10 : 1;                                      // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent11 : 1;                                      // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent12 : 1;                                      // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent13 : 1;                                      // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent14 : 1;                                      // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bSupportsAgent15 : 1;                                      // 0x0039(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_PZVN[0x6];                                     // 0x003A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavRelevantInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavRelevantInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavRelevantInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavModifierVolume
// 0x0010 (FullSize[0x0418] - InheritedSize[0x0408])
class ANavModifierVolume : public AVolume
{
public:
	unsigned char                                      UnknownData_GRZV[0x8];                                     // 0x0408(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AreaClass;                                                 // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavModifierVolume");
		return ptr;
	}



	void SetAreaClass(class UClass* NewAreaClass);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DefaultPhysicsVolume
// 0x0000 (FullSize[0x0418] - InheritedSize[0x0418])
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KillZVolume
// 0x0000 (FullSize[0x0418] - InheritedSize[0x0418])
class AKillZVolume : public APhysicsVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KillZVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PainCausingVolume
// 0x0028 (FullSize[0x0440] - InheritedSize[0x0418])
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                          // 0x0418(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_OBF4[0x3];                                     // 0x0419(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DamagePerSec;                                              // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      DamageType;                                                // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                              PainInterval;                                              // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEntryPain : 1;                                            // 0x042C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      BACKUP_bPainCausing : 1;                                   // 0x042C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_B157[0x3];                                     // 0x042D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class AController*                                 DamageInstigator;                                          // 0x0430(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8JG5[0x8];                                     // 0x0438(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PainCausingVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendableInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UBlendableInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendableInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Scene
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UScene : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Scene");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_PostProcessVolume
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_PostProcessVolume : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Interface_PostProcessVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PostProcessVolume
// 0x0558 (FullSize[0x0960] - InheritedSize[0x0408])
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData_7V5D[0x8];                                     // 0x0408(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        Settings;                                                  // 0x0410(0x0540) (Edit, BlueprintVisible, Interp)
	float                                              Priority;                                                  // 0x0950(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BlendRadius;                                               // 0x0954(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              BlendWeight;                                               // 0x0958(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnabled : 1;                                              // 0x095C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUnbound : 1;                                              // 0x095C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_AD31[0x3];                                     // 0x095D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}



	void AddOrUpdateBlendable(float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (FullSize[0x0438] - InheritedSize[0x0408])
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                     // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              OverrideInvisibleActors;                                   // 0x0418(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                                   // 0x0428(0x0010) (Edit, BlueprintVisible, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class APrecomputedVisibilityVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerVolume
// 0x0000 (FullSize[0x0408] - InheritedSize[0x0408])
class ATriggerVolume : public AVolume
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CalmWaterZone
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ACalmWaterZone : public AActor
{
public:
	class UCalmWaterComponent*                         CalmWaterComponent;                                        // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CalmWaterZone");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraActor
// 0x0570 (FullSize[0x0940] - InheritedSize[0x03D0])
class ACameraActor : public AActor
{
public:
	TEnumAsByte<Engine_EAutoReceiveInput>              AutoActivateForPlayer;                                     // 0x03D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZWJI[0x7];                                     // 0x03D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCameraComponent*                            CameraComponent;                                           // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5NYC[0x8];                                     // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x03E8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_GEEP[0x3];                                     // 0x03E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AspectRatio;                                               // 0x03EC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FOVAngle;                                                  // 0x03F0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PostProcessBlendWeight;                                    // 0x03F4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1353[0x8];                                     // 0x03F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0400(0x0540) (Deprecated)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}



	int GetAutoActivatePlayerIndex();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ClientOnlyTestActor
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class AClientOnlyTestActor : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ClientOnlyTestActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavAgentInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavAgentInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavAgentInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraShake
// 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
class UCameraShake : public UObject
{
public:
	unsigned char                                      bSingleInstance : 1;                                       // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_24CG[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OscillationDuration;                                       // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OscillationBlendInTime;                                    // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OscillationBlendOutTime;                                   // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FROscillator                                RotOscillation;                                            // 0x0038(0x0024) (Edit)
	struct FVOscillator                                LocOscillation;                                            // 0x005C(0x0024) (Edit)
	struct FFOscillator                                FOVOscillation;                                            // 0x0080(0x000C) (Edit)
	float                                              AnimPlayRate;                                              // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AnimScale;                                                 // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AnimBlendInTime;                                           // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AnimBlendOutTime;                                          // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RandomAnimSegmentDuration;                                 // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraAnim*                                 Anim;                                                      // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRandomAnimSegment : 1;                                    // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JBD3[0x17];                                    // 0x00A9(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class APlayerCameraManager*                        CameraOwner;                                               // 0x00C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NCR0[0x68];                                    // 0x00C8(0x0068) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ShakeScale;                                                // 0x0130(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OscillatorTimeRemaining;                                   // 0x0134(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraAnimInst*                             AnimInst;                                                  // 0x0138(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraShake");
		return ptr;
	}



	void ReceiveStopShake();
	void ReceivePlayShake(float Scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerCameraManager
// 0x1880 (FullSize[0x1C50] - InheritedSize[0x03D0])
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                   // 0x03D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                             TransformComponent;                                        // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EHDD[0x8];                                     // 0x03E0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultFOV;                                                // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9QL3[0x4];                                     // 0x03EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultOrthoWidth;                                         // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BMBK[0x4];                                     // 0x03F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultAspectRatio;                                        // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U5YJ[0x44];                                    // 0x03FC(0x0044) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FCameraCacheEntry                           CameraCache;                                               // 0x0440(0x05B0) (Transient)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                      // 0x09F0(0x05B0) (Transient)
	struct FTViewTarget                                ViewTarget;                                                // 0x0FA0(0x05C0) (Transient)
	struct FTViewTarget                                PendingViewTarget;                                         // 0x1560(0x05C0) (Transient)
	unsigned char                                      UnknownData_JUBB[0x18];                                    // 0x1B20(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCameraModifier*>                     ModifierList;                                              // 0x1B38(0x0010) (ZeroConstructor, Transient, Protected)
	TArray<class UClass*>                              DefaultModifiers;                                          // 0x1B48(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper)
	float                                              FreeCamDistance;                                           // 0x1B58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     FreeCamOffset;                                             // 0x1B5C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     ViewTargetOffset;                                          // 0x1B68(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R6OU[0x14];                                    // 0x1B74(0x0014) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                         // 0x1B88(0x0010) (ZeroConstructor, Transient, Protected)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                      // 0x1B98(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                         // 0x1BA0(0x0040) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                                     // 0x1BE0(0x0010) (ZeroConstructor, Transient, Protected)
	unsigned char                                      UnknownData_88ED[0x10];                                    // 0x1BF0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                               // 0x1C00(0x0010) (ZeroConstructor, Transient)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                 // 0x1C10(0x0010) (ZeroConstructor, Transient, Protected)
	class ACameraActor*                                AnimCameraActor;                                           // 0x1C20(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      bIsOrthographic : 1;                                       // 0x1C28(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_H6RK : 5;                                      // 0x1C28(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                           // 0x1C28(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_DACJ : 1;                                      // 0x1C28(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      UnknownData_Z8AT : 5;                                      // 0x1C29(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bFollowHmdOrientation : 1;                                 // 0x1C29(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_ASWR[0x2];                                     // 0x1C2A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ViewPitchMin;                                              // 0x1C2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ViewPitchMax;                                              // 0x1C30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ViewYawMin;                                                // 0x1C34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ViewYawMax;                                                // 0x1C38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ViewRollMin;                                               // 0x1C3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ViewRollMax;                                               // 0x1C40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_GRW4[0xC];                                     // 0x1C44(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerCameraManager");
		return ptr;
	}



	void StopCameraShake(class UCameraShake* ShakeInstance);
	void StopCameraFade();
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShake(class UClass* Shake);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakes();
	void StopAllCameraAnims(bool bImmediate);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	class UCameraShake* PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot, class UCurveFloat* BlendInCurve);
	bool IsScreenFullyOccluded();
	bool IsFadeInProgress();
	class APlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	void BlendOutAllInstancesOfCameraShake(class UClass* Shake);
	class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData_NNFJ[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveBase");
		return ptr;
	}



	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimBlueprint
// 0x0028 (FullSize[0x0100] - InheritedSize[0x00D8])
class UAnimBlueprint : public UBlueprint
{
public:
	class USkeleton*                                   TargetSkeleton;                                            // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	TArray<struct FAnimGroupInfo>                      Groups;                                                    // 0x00E0(0x0010) (ZeroConstructor)
	TArray<struct FName>                               SkeletonSlotNames;                                         // 0x00F0(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimBlueprint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelScriptBlueprint
// 0x0000 (FullSize[0x00D8] - InheritedSize[0x00D8])
class ULevelScriptBlueprint : public UBlueprint
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelScriptBlueprint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DataTable
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DVE9[0x50];                                    // 0x0030(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DataTable");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DataTableFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DataTableFunctionLibrary");
		return ptr;
	}



	void STATIC_GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames);
	bool STATIC_GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow);
	void STATIC_EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<Engine_EEvaluateCurveTableResult>* OutResult, float* OutXY);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DebugDrawService
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DebugDrawService");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DeformablesBlueprintFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDeformablesBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DeformablesBlueprintFunctionLibrary");
		return ptr;
	}



	void STATIC_ApplyWorldForceToDeformables(class USkinnedMeshComponent* SkinnedMeshComp, const struct FVector& WorldSpaceForce);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FeatureConfigBlueprintFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UFeatureConfigBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FeatureConfigBlueprintFunctionLibrary");
		return ptr;
	}



	bool STATIC_IsFeatureEnabled(const struct FName& FeatureName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DialogueTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDialogueTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueTypes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameplayStatics
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameplayStatics");
		return ptr;
	}



	void STATIC_UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo);
	class UAudioComponent* STATIC_SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* STATIC_SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* STATIC_SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	class UObject* STATIC_SpawnObject(class UClass* ObjectClass, class UObject* Outer);
	class UParticleSystemComponent* STATIC_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bAutoDestroy);
	class UParticleSystemComponent* STATIC_SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
	class UAudioComponent* STATIC_SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* STATIC_SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* STATIC_SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	class UDecalComponent* STATIC_SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<Engine_EAttachLocation> LocationType, float LifeSpan);
	class UDecalComponent* STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	void STATIC_SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void STATIC_SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
	bool STATIC_SetGamePaused(class UObject* WorldContextObject, bool bPaused);
	void STATIC_SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);
	bool STATIC_SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	void STATIC_RemovePlayer(class APlayerController* Player, bool bDestroyPawn);
	void STATIC_PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	bool STATIC_ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition);
	void STATIC_PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	void STATIC_PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	void STATIC_PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void STATIC_PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	void STATIC_PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void STATIC_PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	struct FString STATIC_ParseOption(const struct FString& Options, const struct FString& Key);
	void STATIC_OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options);
	void STATIC_LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	class USaveGame* STATIC_LoadGameFromSlot(const struct FString& SlotName, int UserIndex);
	bool STATIC_IsGamePaused(class UObject* WorldContextObject);
	bool STATIC_HasOption(const struct FString& Options, const struct FString& InKey);
	int STATIC_GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);
	struct FIntVector STATIC_GetWorldOriginLocation(class UObject* WorldContextObject);
	float STATIC_GetWorldDeltaSeconds(class UObject* WorldContextObject);
	TEnumAsByte<Engine_EPhysicalSurface> STATIC_GetSurfaceType(const struct FHitResult& Hit);
	class ULevelStreaming* STATIC_GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName);
	float STATIC_GetRealTimeSeconds(class UObject* WorldContextObject);
	class APawn* STATIC_GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerController* STATIC_GetPlayerController(class UObject* WorldContextObject, int PlayerIndex);
	class ACharacter* STATIC_GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex);
	struct FString STATIC_GetPlatformName();
	class UClass* STATIC_GetObjectClass(class UObject* Object);
	void STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	int STATIC_GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue);
	float STATIC_GetGlobalTimeDilation(class UObject* WorldContextObject);
	class AGameState* STATIC_GetGameState(class UObject* WorldContextObject);
	class AGameMode* STATIC_GetGameMode(class UObject* WorldContextObject);
	class UGameInstance* STATIC_GetGameInstance(class UObject* WorldContextObject);
	struct FString STATIC_GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);
	float STATIC_GetAudioTimeSeconds(class UObject* WorldContextObject);
	void STATIC_GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors);
	void STATIC_GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors);
	void STATIC_GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	struct FVector STATIC_GetActorArrayAverageLocation(TArray<class AActor*> Actors);
	void STATIC_GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds);
	void STATIC_FlushLevelStreaming(class UObject* WorldContextObject);
	class AActor* STATIC_FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform);
	void STATIC_EnableLiveStreaming(bool Enable);
	bool STATIC_DoesSaveGameExist(const struct FString& SlotName, int UserIndex);
	bool STATIC_DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	bool STATIC_DeleteGameInSlot(const struct FString& SlotName, int UserIndex);
	void STATIC_DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName);
	class USaveGame* STATIC_CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint);
	class USaveGame* STATIC_CreateSaveGameObject(class UClass* SaveGameClass);
	class APlayerController* STATIC_CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn);
	void STATIC_ClearSoundMixModifiers(class UObject* WorldContextObject);
	void STATIC_BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, struct FVector* TraceStart, struct FVector* TraceEnd);
	bool STATIC_BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<Engine_ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
	class AActor* STATIC_BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner);
	class AActor* STATIC_BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);
	class AActor* STATIC_BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, TEnumAsByte<Engine_ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride, class AActor* Owner);
	bool STATIC_AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	bool STATIC_ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel);
	bool STATIC_ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<Engine_ECollisionChannel> DamagePreventionChannel);
	void STATIC_ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	void STATIC_ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	void STATIC_ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GPUSortDestData
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UGPUSortDestData : public UObject
{
public:
	unsigned char                                      UnknownData_CY8C[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GPUSortDestData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GPUSortTestLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UGPUSortTestLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GPUSortTestLibrary");
		return ptr;
	}



	bool STATIC_ValidateGPUTransposeForSize(class UObject* WorldContext, class UGPUSortDestData* TestData);
	bool STATIC_ValidateGPUSortForSize(class UObject* WorldContext, class UGPUSortDestData* TestData);
	class UGPUSortDestData* STATIC_TestGPUTransposeForSize(class UObject* WorldContext, int Size);
	class UGPUSortDestData* STATIC_TestGPUSortForSize(class UObject* WorldContext, int Size);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetArrayLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetArrayLibrary");
		return ptr;
	}



	void STATIC_SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value);
	void STATIC_FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray);
	void STATIC_Array_Shuffle(TArray<int> TargetArray);
	void STATIC_Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit);
	void STATIC_Array_Resize(TArray<int> TargetArray, int Size);
	bool STATIC_Array_RemoveItem(TArray<int> TargetArray, int Item);
	void STATIC_Array_Remove(TArray<int> TargetArray, int IndexToRemove);
	int STATIC_Array_Length(TArray<int> TargetArray);
	int STATIC_Array_LastIndex(TArray<int> TargetArray);
	void STATIC_Array_Insert(TArray<int> TargetArray, int NewItem, int Index);
	void STATIC_Array_Get(TArray<int> TargetArray, int Index, int* Item);
	int STATIC_Array_Find(TArray<int> TargetArray, int ItemToFind);
	bool STATIC_Array_Contains(TArray<int> TargetArray, int ItemToFind);
	void STATIC_Array_Clear(TArray<int> TargetArray);
	void STATIC_Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);
	int STATIC_Array_AddUnique(TArray<int> TargetArray, int NewItem);
	int STATIC_Array_Add(TArray<int> TargetArray, int NewItem);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetGuidLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetGuidLibrary");
		return ptr;
	}



	void STATIC_Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* Success);
	bool STATIC_NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FGuid STATIC_NewGuid();
	bool STATIC_IsValid_Guid(const struct FGuid& InGuid);
	void STATIC_Invalidate_Guid(struct FGuid* InGuid);
	bool STATIC_EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FString STATIC_Conv_GuidToString(const struct FGuid& InGuid);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetInputLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetInputLibrary");
		return ptr;
	}



	bool STATIC_PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);
	bool STATIC_PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);
	float STATIC_PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetUserIndex(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);
	int STATIC_PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);
	struct FKey STATIC_PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);
	bool STATIC_Key_IsVectorAxis(const struct FKey& Key);
	bool STATIC_Key_IsMouseButton(const struct FKey& Key);
	bool STATIC_Key_IsModifierKey(const struct FKey& Key);
	bool STATIC_Key_IsKeyboardKey(const struct FKey& Key);
	bool STATIC_Key_IsGamepadKey(const struct FKey& Key);
	bool STATIC_Key_IsFloatAxis(const struct FKey& Key);
	struct FText STATIC_Key_GetDisplayName(const struct FKey& Key);
	bool STATIC_InputEvent_IsShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRightAltDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsRepeat(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsLeftAltDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsControlDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsCommandDown(const struct FInputEvent& Input);
	bool STATIC_InputEvent_IsAltDown(const struct FInputEvent& Input);
	int STATIC_GetUserIndex(const struct FKeyEvent& Input);
	struct FKey STATIC_GetKey(const struct FKeyEvent& Input);
	float STATIC_GetAnalogValue(const struct FAnalogInputEvent& Input);
	bool STATIC_EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
	int STATIC_ControllerEvent_GetUserIndex(const struct FControllerEvent& Input);
	struct FKey STATIC_ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input);
	float STATIC_ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input);
	void STATIC_CalibrateTilt();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetMaterialLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetMaterialLibrary");
		return ptr;
	}



	void STATIC_SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	void STATIC_SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue);
	struct FLinearColor STATIC_GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	float STATIC_GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	class UMaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetMathLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetMathLibrary");
		return ptr;
	}



	int STATIC_Xor_IntInt(int A, int B);
	float STATIC_VSizeSquared(const struct FVector& A);
	float STATIC_VSize2DSquared(const struct FVector2D& A);
	float STATIC_VSize2D(const struct FVector2D& A);
	float STATIC_VSize(const struct FVector& A);
	struct FVector STATIC_VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
	struct FVector STATIC_VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D STATIC_Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D STATIC_Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FDateTime STATIC_UtcNow();
	struct FVector STATIC_TransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector STATIC_TransformDirection(const struct FTransform& T, const struct FVector& Direction);
	struct FDateTime STATIC_Today();
	struct FTransform STATIC_TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha);
	struct FTransform STATIC_TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed);
	struct FTimespan STATIC_TimespanZeroValue();
	float STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan STATIC_TimespanMinValue();
	struct FTimespan STATIC_TimespanMaxValue();
	bool STATIC_TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result);
	struct FTransform STATIC_TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_Tan(float A);
	struct FVector STATIC_Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Subtract_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Subtract_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int STATIC_Subtract_IntInt(int A, int B);
	float STATIC_Subtract_FloatFloat(float A, float B);
	struct FDateTime STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FTimespan STATIC_Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char STATIC_Subtract_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Square(float A);
	float STATIC_Sqrt(float A);
	float STATIC_Sin(float A);
	int STATIC_SignOfInteger(int A);
	float STATIC_SignOfFloat(float A);
	void STATIC_SetRandomStreamSeed(struct FRandomStream* Stream, int NewSeed);
	struct FVector STATIC_SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	struct FTransform STATIC_SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);
	struct FString STATIC_SelectString(const struct FString& A, const struct FString& B, bool bPickA);
	struct FRotator STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int STATIC_SelectInt(int A, int B, bool bPickA);
	float STATIC_SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	class UClass* STATIC_SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	void STATIC_SeedRandomStream(struct FRandomStream* Stream);
	int STATIC_Round(float A);
	struct FRotator STATIC_RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	struct FVector STATIC_RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	struct FRotator STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	struct FRotator STATIC_RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FRotator STATIC_RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	void STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	void STATIC_ResetRandomStream(const struct FRandomStream& Stream);
	struct FRotator STATIC_REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector STATIC_RandomUnitVectorInConeWithYawAndPitch(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	struct FVector STATIC_RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle);
	struct FVector STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVector();
	struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
	struct FRotator STATIC_RandomRotator(bool bRoll);
	struct FVector STATIC_RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent);
	int STATIC_RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream);
	int STATIC_RandomIntegerInRange(int Min, int Max);
	int STATIC_RandomIntegerFromStream(int Max, const struct FRandomStream& Stream);
	int STATIC_RandomInteger(int Max);
	float STATIC_RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);
	float STATIC_RandomFloatInRange(float Min, float Max);
	float STATIC_RandomFloatFromStream(const struct FRandomStream& Stream);
	float STATIC_RandomFloat();
	bool STATIC_RandomBoolFromStream(const struct FRandomStream& Stream);
	bool STATIC_RandomBool();
	float STATIC_RadiansToDegrees(float A);
	struct FVector STATIC_ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);
	struct FVector STATIC_ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	struct FVector STATIC_ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);
	bool STATIC_PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
	int STATIC_Percent_IntInt(int A, int B);
	float STATIC_Percent_FloatFloat(float A, float B);
	unsigned char STATIC_Percent_ByteByte(unsigned char A, unsigned char B);
	int STATIC_Or_IntInt(int A, int B);
	struct FDateTime STATIC_Now();
	bool STATIC_NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_NotEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_NotEqual_IntInt(int A, int B);
	bool STATIC_NotEqual_FloatFloat(float A, float B);
	bool STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_NotEqual_BoolBool(bool A, bool B);
	bool STATIC_Not_PreBool(bool A);
	float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	float STATIC_NormalizeAxis(float Angle);
	struct FVector2D STATIC_Normal2D(const struct FVector2D& A);
	struct FVector STATIC_Normal(const struct FVector& A);
	struct FVector STATIC_NegateVector(const struct FVector& A);
	struct FRotator STATIC_NegateRotator(const struct FRotator& A);
	bool STATIC_NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp);
	float STATIC_MultiplyByPi(float Value);
	struct FVector STATIC_Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Multiply_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Multiply_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator STATIC_Multiply_RotatorInt(const struct FRotator& A, int B);
	struct FRotator STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FLinearColor STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	int STATIC_Multiply_IntInt(int A, int B);
	float STATIC_Multiply_IntFloat(int A, float B);
	float STATIC_Multiply_FloatFloat(float A, float B);
	unsigned char STATIC_Multiply_ByteByte(unsigned char A, unsigned char B);
	struct FVector STATIC_MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	void STATIC_MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	void STATIC_MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	void STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	void STATIC_MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
	int STATIC_Min(int A, int B);
	void STATIC_MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	void STATIC_MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	void STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	int STATIC_Max(int A, int B);
	float STATIC_MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	float STATIC_MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector2D STATIC_MakeVector2D(float X, float Y);
	struct FVector STATIC_MakeVector(float X, float Y, float Z);
	struct FTransform STATIC_MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	struct FTimespan STATIC_MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);
	struct FRotator STATIC_MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromZ(const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromY(const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromX(const struct FVector& X);
	struct FRotator STATIC_MakeRotator(float Roll, float Pitch, float Yaw);
	struct FRotator STATIC_MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	struct FRandomStream STATIC_MakeRandomStream(int InitialSeed);
	float STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	struct FDateTime STATIC_MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);
	struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A);
	float STATIC_Loge(float A);
	bool STATIC_LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	bool STATIC_LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
	struct FLinearColor STATIC_LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FVector STATIC_LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_LessEqual_IntInt(int A, int B);
	bool STATIC_LessEqual_FloatFloat(float A, float B);
	bool STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Less_IntInt(int A, int B);
	bool STATIC_Less_FloatFloat(float A, float B);
	bool STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Less_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Lerp(float A, float B, float Alpha);
	bool STATIC_IsPointInBox(const struct FVector& Point, const struct FBox& Box);
	bool STATIC_IsMorning(const struct FDateTime& A);
	bool STATIC_IsLeapYear(int Year);
	bool STATIC_IsAfternoon(const struct FDateTime& A);
	struct FTransform STATIC_InvertTransform(const struct FTransform& T);
	struct FVector STATIC_InverseTransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector STATIC_InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction);
	float STATIC_InverseLerp(float A, float B, float Value);
	bool STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	float STATIC_Hypotenuse(float Width, float Height);
	void STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);
	float STATIC_GridSnap_Float(float Location, float GridSize);
	struct FVector STATIC_GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_GreaterEqual_IntInt(int A, int B);
	bool STATIC_GreaterEqual_FloatFloat(float A, float B);
	bool STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Greater_IntInt(int A, int B);
	bool STATIC_Greater_FloatFloat(float A, float B);
	bool STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Greater_ByteByte(unsigned char A, unsigned char B);
	int STATIC_GetYear(const struct FDateTime& A);
	void STATIC_GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);
	float STATIC_GetYawFromVector(const struct FVector& InVec);
	struct FVector STATIC_GetVectorArrayAverage(TArray<struct FVector> Vectors);
	struct FVector STATIC_GetUpVector(const struct FRotator& InRot);
	float STATIC_GetTotalSeconds(const struct FTimespan& A);
	float STATIC_GetTotalMinutes(const struct FTimespan& A);
	float STATIC_GetTotalMilliseconds(const struct FTimespan& A);
	float STATIC_GetTotalHours(const struct FTimespan& A);
	float STATIC_GetTotalDays(const struct FTimespan& A);
	struct FTimespan STATIC_GetTimeOfDay(const struct FDateTime& A);
	int STATIC_GetSeconds(const struct FTimespan& A);
	int STATIC_GetSecond(const struct FDateTime& A);
	struct FVector STATIC_GetRightVector(const struct FRotator& InRot);
	float STATIC_GetPI();
	int STATIC_GetMonth(const struct FDateTime& A);
	int STATIC_GetMinutes(const struct FTimespan& A);
	int STATIC_GetMinute(const struct FDateTime& A);
	float STATIC_GetMinElement(const struct FVector& A);
	int STATIC_GetMilliseconds(const struct FTimespan& A);
	int STATIC_GetMillisecond(const struct FDateTime& A);
	float STATIC_GetMaxElement(const struct FVector& A);
	int STATIC_GetHours(const struct FTimespan& A);
	int STATIC_GetHour12(const struct FDateTime& A);
	int STATIC_GetHour(const struct FDateTime& A);
	struct FVector STATIC_GetForwardVector(const struct FRotator& InRot);
	struct FTimespan STATIC_GetDuration(const struct FTimespan& A);
	struct FVector STATIC_GetDirectionVector(const struct FVector& From, const struct FVector& To);
	int STATIC_GetDays(const struct FTimespan& A);
	int STATIC_GetDayOfYear(const struct FDateTime& A);
	int STATIC_GetDay(const struct FDateTime& A);
	struct FDateTime STATIC_GetDate(const struct FDateTime& A);
	void STATIC_GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	int STATIC_FTrunc(float A);
	struct FTimespan STATIC_FromSeconds(float Seconds);
	struct FTimespan STATIC_FromMinutes(float Minutes);
	struct FTimespan STATIC_FromMilliseconds(float Milliseconds);
	struct FTimespan STATIC_FromHours(float Hours);
	struct FTimespan STATIC_FromDays(float Days);
	float STATIC_Fraction(float A);
	int STATIC_FMod(float Dividend, float Divisor, float* Remainder);
	float STATIC_FMin(float A, float B);
	float STATIC_FMax(float A, float B);
	float STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	float STATIC_FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	struct FRotator STATIC_FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
	int STATIC_FFloor(float A);
	float STATIC_FClamp(float Value, float Min, float Max);
	int STATIC_FCeil(float A);
	float STATIC_Exp(float A);
	bool STATIC_EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool STATIC_EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);
	bool STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_EqualEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_EqualEqual_IntInt(int A, int B);
	bool STATIC_EqualEqual_FloatFloat(float A, float B);
	bool STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_EqualEqual_BoolBool(bool A, bool B);
	float STATIC_Ease(float A, float B, float Alpha, TEnumAsByte<Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	float STATIC_Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Divide_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Divide_Vector2DFloat(const struct FVector2D& A, float B);
	int STATIC_Divide_IntInt(int A, int B);
	float STATIC_Divide_FloatFloat(float A, float B);
	unsigned char STATIC_Divide_ByteByte(unsigned char A, unsigned char B);
	float STATIC_DegTan(float A);
	float STATIC_DegSin(float A);
	float STATIC_DegreesToRadians(float A);
	float STATIC_DegCos(float A);
	float STATIC_DegAtan2(float A, float B);
	float STATIC_DegAtan(float A);
	float STATIC_DegAsin(float A);
	float STATIC_DegAcos(float A);
	int STATIC_DaysInYear(int Year);
	int STATIC_DaysInMonth(int Year, int Month);
	struct FDateTime STATIC_DateTimeMinValue();
	struct FDateTime STATIC_DateTimeMaxValue();
	bool STATIC_DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result);
	bool STATIC_DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result);
	float STATIC_CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector STATIC_Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	float STATIC_Cos(float A);
	struct FTransform STATIC_ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform);
	struct FVector2D STATIC_Conv_VectorToVector2D(const struct FVector& InVector);
	struct FTransform STATIC_Conv_VectorToTransform(const struct FVector& InLocation);
	struct FRotator STATIC_Conv_VectorToRotator(const struct FVector& InVec);
	struct FLinearColor STATIC_Conv_VectorToLinearColor(const struct FVector& InVec);
	struct FVector STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	struct FVector STATIC_Conv_RotatorToVector(const struct FRotator& InRot);
	struct FVector STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct FColor STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor);
	float STATIC_Conv_IntToFloat(int InInt);
	unsigned char STATIC_Conv_IntToByte(int InInt);
	bool STATIC_Conv_IntToBool(int InInt);
	struct FVector STATIC_Conv_FloatToVector(float InFloat);
	struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);
	struct FLinearColor STATIC_Conv_ColorToLinearColor(const struct FColor& InColor);
	int STATIC_Conv_ByteToInt(unsigned char InByte);
	float STATIC_Conv_ByteToFloat(unsigned char InByte);
	int STATIC_Conv_BoolToInt(bool InBool);
	float STATIC_Conv_BoolToFloat(bool InBool);
	unsigned char STATIC_Conv_BoolToByte(bool InBool);
	struct FTransform STATIC_ComposeTransforms(const struct FTransform& A, const struct FTransform& B);
	struct FRotator STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
	struct FVector STATIC_ClampVectorSize(const struct FVector& A, float Min, float Max);
	float STATIC_ClampAxis(float Angle);
	float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int STATIC_Clamp(int Value, int Min, int Max);
	struct FLinearColor STATIC_CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	void STATIC_BreakVector2D(const struct FVector2D& InVec, float* X, float* Y);
	void STATIC_BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z);
	void STATIC_BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void STATIC_BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds);
	void STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	void STATIC_BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	void STATIC_BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed);
	void STATIC_BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);
	void STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	bool STATIC_BooleanXOR(bool A, bool B);
	bool STATIC_BooleanOR(bool A, bool B);
	bool STATIC_BooleanNOR(bool A, bool B);
	bool STATIC_BooleanNAND(bool A, bool B);
	bool STATIC_BooleanAND(bool A, bool B);
	float STATIC_Atan2(float A, float B);
	float STATIC_Atan(float A);
	float STATIC_Asin(float A);
	int STATIC_And_IntInt(int A, int B);
	struct FVector STATIC_Add_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Add_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Add_VectorFloat(const struct FVector& A, float B);
	struct FVector2D STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int STATIC_Add_IntInt(int A, int B);
	float STATIC_Add_FloatFloat(float A, float B);
	struct FDateTime STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	unsigned char STATIC_Add_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Acos(float A);
	int STATIC_Abs_Int(int A);
	float STATIC_Abs(float A);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetNodeHelperLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetNodeHelperLibrary");
		return ptr;
	}



	void STATIC_MarkBit(int* Data, int Index);
	bool STATIC_HasUnmarkedBit(int Data, int NumBits);
	bool STATIC_HasMarkedBit(int Data, int NumBits);
	unsigned char STATIC_GetValidIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
	int STATIC_GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);
	int STATIC_GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);
	int STATIC_GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);
	struct FString STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue);
	struct FName STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue);
	void STATIC_ClearBit(int* Data, int Index);
	void STATIC_ClearAllBits(int* Data);
	bool STATIC_BitIsMarked(int Data, int Index);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetStringLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetStringLibrary");
		return ptr;
	}



	struct FString STATIC_TrimTrailing(const struct FString& SourceString);
	struct FString STATIC_Trim(const struct FString& SourceString);
	struct FString STATIC_ToUpper(const struct FString& SourceString);
	struct FString STATIC_ToLower(const struct FString& SourceString);
	struct FString STATIC_TimeSecondsToString(float InSeconds);
	bool STATIC_StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	bool STATIC_Split(const struct FString& SourceString, const struct FString& InStr, struct FString* LeftS, struct FString* RightS, TEnumAsByte<CoreUObject_ESearchCase> SearchCase, TEnumAsByte<CoreUObject_ESearchDir> SearchDir);
	struct FString STATIC_RightPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_RightChop(const struct FString& SourceString, int Count);
	struct FString STATIC_Right(const struct FString& SourceString, int Count);
	struct FString STATIC_Reverse(const struct FString& SourceString);
	int STATIC_ReplaceInline(struct FString* SourceString, const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	struct FString STATIC_Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	TArray<struct FString> STATIC_ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);
	bool STATIC_NotEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_NotEqual_StriStri(const struct FString& A, const struct FString& B);
	struct FString STATIC_Mid(const struct FString& SourceString, int Start, int Count);
	bool STATIC_MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int STATIC_Len(const struct FString& S);
	struct FString STATIC_LeftPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_LeftChop(const struct FString& SourceString, int Count);
	struct FString STATIC_Left(const struct FString& SourceString, int Count);
	struct FString STATIC_JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);
	bool STATIC_IsNumeric(const struct FString& SourceString);
	struct FString STATIC_GetSubstring(const struct FString& SourceString, int StartIndex, int Length);
	int STATIC_GetCharacterAsNumber(const struct FString& SourceString, int Index);
	TArray<struct FString> STATIC_GetCharacterArrayFromString(const struct FString& SourceString);
	int STATIC_FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	bool STATIC_EqualEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_EqualEqual_StriStri(const struct FString& A, const struct FString& B);
	bool STATIC_EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<CoreUObject_ESearchCase> SearchCase);
	int STATIC_CullArray(const struct FString& SourceString, TArray<struct FString>* InArray);
	struct FString STATIC_Conv_VectorToString(const struct FVector& InVec);
	struct FString STATIC_Conv_Vector2dToString(const struct FVector2D& InVec);
	struct FString STATIC_Conv_TransformToString(const struct FTransform& InTrans);
	struct FName STATIC_Conv_StringToName(const struct FString& InString);
	int STATIC_Conv_StringToInt(const struct FString& InString);
	float STATIC_Conv_StringToFloat(const struct FString& InString);
	struct FString STATIC_Conv_RotatorToString(const struct FRotator& InRot);
	struct FString STATIC_Conv_ObjectToString(class UObject* InObj);
	struct FString STATIC_Conv_NameToString(const struct FName& InName);
	struct FString STATIC_Conv_IntToString(int InInt);
	struct FString STATIC_Conv_FloatToString(float InFloat);
	struct FString STATIC_Conv_ColorToString(const struct FLinearColor& InColor);
	struct FString STATIC_Conv_ByteToString(unsigned char InByte);
	struct FString STATIC_Conv_BoolToString(bool InBool);
	struct FString STATIC_Concat_StrStr(const struct FString& A, const struct FString& B);
	struct FString STATIC_BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2D, const struct FString& Suffix);
	struct FString STATIC_BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector& InVector, const struct FString& Suffix);
	struct FString STATIC_BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix);
	struct FString STATIC_BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix);
	struct FString STATIC_BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix);
	struct FString STATIC_BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int InInt, const struct FString& Suffix);
	struct FString STATIC_BuildString_Float(const struct FString& AppendTo, const struct FString& Prefix, float InFloat, const struct FString& Suffix);
	struct FString STATIC_BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix);
	struct FString STATIC_BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetSystemLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetSystemLibrary");
		return ptr;
	}



	void STATIC_StackTrace();
	bool STATIC_SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_SphereOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void STATIC_ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);
	void STATIC_ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
	void STATIC_ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);
	void STATIC_SetWindowTitle(const struct FText& Title);
	void STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled);
	void STATIC_SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value);
	void STATIC_SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value);
	void STATIC_SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value);
	void STATIC_SetSupressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void STATIC_SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value);
	void STATIC_SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value);
	void STATIC_SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value);
	void STATIC_SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value);
	void STATIC_SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value);
	void STATIC_SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value);
	void STATIC_SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value);
	void STATIC_SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value);
	void STATIC_SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value);
	void STATIC_SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value);
	void STATIC_SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value);
	void STATIC_SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value);
	void STATIC_SetAssetPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UObject> Value);
	void STATIC_SetAssetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UClass> Value);
	void STATIC_RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_ResetGamepadAssignmentToController(int ControllerId);
	void STATIC_ResetGamepadAssignments();
	void STATIC_RegisterForRemoteNotifications();
	void STATIC_QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<Engine_EQuitPreference> QuitPreference);
	void STATIC_PrintWarning(const struct FString& InString);
	void STATIC_PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_PrintString(class UObject* WorldContextObject, const struct FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);
	void STATIC_MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, TEnumAsByte<Engine_EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo);
	struct FText STATIC_MakeLiteralText(const struct FText& Value);
	struct FString STATIC_MakeLiteralString(const struct FString& Value);
	struct FName STATIC_MakeLiteralName(const struct FName& Value);
	int STATIC_MakeLiteralInt(int Value);
	float STATIC_MakeLiteralFloat(float Value);
	unsigned char STATIC_MakeLiteralByte(unsigned char Value);
	bool STATIC_MakeLiteralBool(bool Value);
	void STATIC_LoadAssetClass(class UObject* WorldContextObject, TAssetPtr<class UClass> AssetClass, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	void STATIC_LoadAsset(class UObject* WorldContextObject, TAssetPtr<class UObject> Asset, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_LineTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_LineTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_LineTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	void STATIC_LaunchURL(const struct FString& URL);
	void STATIC_K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_TimerExists(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle STATIC_K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping);
	struct FTimerHandle STATIC_K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping);
	void STATIC_K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsValidTimerHandle(const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool STATIC_K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle STATIC_K2_InvalidateTimerHandle(struct FTimerHandle* Handle);
	float STATIC_K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float STATIC_K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);
	float STATIC_K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float STATIC_K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void STATIC_K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_IsValidClass(class UClass* Class);
	bool STATIC_IsValid(class UObject* Object);
	bool STATIC_IsServer(class UObject* WorldContextObject);
	bool STATIC_IsPackagedForDistribution();
	bool STATIC_IsLoggedIn(class APlayerController* SpecificPlayer);
	bool STATIC_IsDedicatedServer(class UObject* WorldContextObject);
	bool STATIC_IsControllerAssignedToGamepad(int ControllerId);
	void STATIC_HideAdBanner();
	bool STATIC_GetVolumeButtonsHandledBySystem();
	struct FString STATIC_GetUniqueDeviceId();
	bool STATIC_GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	int STATIC_GetRenderingMaterialQualityLevel();
	int STATIC_GetRenderingDetailMode();
	TArray<struct FString> STATIC_GetPreferredLanguages();
	struct FString STATIC_GetPlatformUserName();
	int STATIC_GetObjectNameAsCrc32(class UObject* Object);
	struct FString STATIC_GetObjectName(class UObject* Object);
	int STATIC_GetMaxShadowCascades();
	struct FString STATIC_GetLocalCurrencySymbol();
	struct FString STATIC_GetLocalCurrencyCode();
	float STATIC_GetGameTimeInSeconds(class UObject* WorldContextObject);
	struct FString STATIC_GetGameName();
	struct FString STATIC_GetEngineVersion();
	struct FString STATIC_GetDisplayName(class UObject* Object);
	void STATIC_GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	struct FString STATIC_GetClassDisplayName(class UClass* Class);
	int STATIC_GetAdIDCount();
	void STATIC_GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
	void STATIC_GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceCloseAdBanner();
	void STATIC_FlushPersistentDebugLines(class UObject* WorldContextObject);
	void STATIC_FlushDebugStrings(class UObject* WorldContextObject);
	void STATIC_ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer);
	void STATIC_DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void STATIC_DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration);
	void STATIC_DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	void STATIC_DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);
	void STATIC_DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration);
	void STATIC_DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void STATIC_DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void STATIC_DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration);
	void STATIC_DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration);
	void STATIC_DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration);
	void STATIC_DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor);
	void STATIC_DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	void STATIC_DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration);
	void STATIC_DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void STATIC_DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration);
	void STATIC_DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration);
	bool STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
	void STATIC_Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	class UObject* STATIC_Conv_InterfaceToObject();
	class UObject* STATIC_Conv_AssetToObject(TAssetPtr<class UObject> Asset);
	class UClass* STATIC_Conv_AssetClassToClass(TAssetPtr<class UClass> AssetClass);
	void STATIC_ControlScreensaver(bool bAllowScreenSaver);
	bool STATIC_ComponentOverlapComponents_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapComponents_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapActors_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_ComponentOverlapActors_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void STATIC_CollectGarbage();
	bool STATIC_CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_CapsuleOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_CapsuleOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf);
	bool STATIC_BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<Engine_EDrawDebugTrace> DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf);
	bool STATIC_BoxOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool STATIC_BoxOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TEnumAsByte<Engine_EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	struct FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.KismetTextLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.KismetTextLibrary");
		return ptr;
	}



	struct FText STATIC_TextTrimTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPrecedingAndTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPreceding(const struct FText& InText);
	bool STATIC_TextIsTransient(const struct FText& InText);
	bool STATIC_TextIsEmpty(const struct FText& InText);
	bool STATIC_TextIsCultureInvariant(const struct FText& InText);
	bool STATIC_NotEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText STATIC_GetEmptyText();
	struct FText STATIC_Format(const struct FText& InPattern, TArray<struct FFormatTextArgument> InArgs);
	bool STATIC_FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText);
	bool STATIC_EqualEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FString STATIC_Conv_TextToString(const struct FText& InText);
	struct FText STATIC_Conv_StringToText(const struct FString& InString);
	struct FText STATIC_Conv_NameToText(const struct FName& InName);
	struct FText STATIC_Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText STATIC_Conv_FloatToText(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_Conv_ByteToText(unsigned char Value);
	struct FText STATIC_Conv_BoolToText(bool InBool);
	struct FText STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan);
	struct FText STATIC_AsTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsPercent_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_AsDateTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsDate_DateTime(const struct FDateTime& InDateTime);
	struct FText STATIC_AsCurrency_Integer(int Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Float(float Value, TEnumAsByte<Engine_ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LoadingPerfBPFuncLib
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULoadingPerfBPFuncLib : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LoadingPerfBPFuncLib");
		return ptr;
	}



	void STATIC_WriteTimings();
	void STATIC_MarkEndStreaming();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WorldComposition
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData_E6MY[0x70];                                    // 0x0028(0x0070) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ULevelStreaming*>                     TilesStreaming;                                            // 0x0098(0x0010) (ZeroConstructor, Transient)
	double                                             TilesStreamingTimeThreshold;                               // 0x00A8(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bLoadAllTilesDuringCinematic;                              // 0x00B0(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bRebaseOriginIn3DSpace;                                    // 0x00B1(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PRS0[0x2];                                     // 0x00B2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RebaseOriginDistance;                                      // 0x00B4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WorldComposition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NestedWorldComposition
// 0x0020 (FullSize[0x00D8] - InheritedSize[0x00B8])
class UNestedWorldComposition : public UWorldComposition
{
public:
	unsigned char                                      UnknownData_23KY[0x20];                                    // 0x00B8(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NestedWorldComposition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NestedWorldCompositionFunctionLib
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNestedWorldCompositionFunctionLib : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NestedWorldCompositionFunctionLib");
		return ptr;
	}



	void STATIC_TriggerManualNestedLevelUnload(class UObject* WorldContextObject, const struct FName& PackageName);
	void STATIC_TriggerManualNestedLevelLoad(class UObject* WorldContextObject, const struct FName& PackageName);
	bool STATIC_IsNestedLevelVisibleRecursive(class UObject* WorldContextObject, const struct FName& PackageName);
	bool STATIC_IsNestedLevelVisible(class UObject* WorldContextObject, const struct FName& PackageName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetPushModelHelpers
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetPushModelHelpers");
		return ptr;
	}



	void STATIC_MarkPropertyDirtyFromRepIndex(class UObject* Object, int RepIndex, const struct FName& PropertyName);
	void STATIC_MarkPropertyDirty(class UObject* Object, const struct FName& PropertyName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleWarningFunctions
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UParticleWarningFunctions : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleWarningFunctions");
		return ptr;
	}



	TArray<struct FString> STATIC_RetrieveInfoOnEmitterWithShortQuarterResArea(class UParticleSystemComponent* Component, float ShortQuarterRes);
	TArray<struct FString> STATIC_RetrieveInfoOnEmitterWithLongNearTransition(class UParticleSystemComponent* Component, float LongNearTransition);
	TArray<struct FString> STATIC_RetrieveInfoOnEmitterWithLongFarTransition(class UParticleSystemComponent* Component, float LongFarTransition);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersWithoutPerVertexLighting(class UParticleSystemComponent* Component);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersWithLowAlphaThreshold(class UParticleSystemComponent* Component, float LowAlphaThreshold);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersWithLoopZero(class UParticleSystemComponent* Component);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersWithKillOnCompleteUnticked(class UParticleSystemComponent* Component);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersWithHighSpawnRate(class UParticleSystemComponent* Component, int HighSpawnRate);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersWithDurationZero(class UParticleSystemComponent* Component);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersUsingMaxDrawCount(class UParticleSystemComponent* Component);
	TArray<struct FString> STATIC_RetrieveInfoOnEmittersOnCPU(class UParticleSystemComponent* Component);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshMergeBlueprintFunctionLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USkeletalMeshMergeBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMeshMergeBlueprintFunctionLibrary");
		return ptr;
	}



	class USkeletalMesh* STATIC_MergeSkeletalMeshesWithMorphTargets(TArray<class USkeletalMesh*> Meshes, TArray<struct FName> MorphTargetNames, TArray<float> MorphTargetWeights);
	class USkeletalMesh* STATIC_MergeSkeletalMeshes(TArray<class USkeletalMesh*> Meshes);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VisualLoggerKismetLibrary");
		return ptr;
	}



	void STATIC_LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory);
	void STATIC_LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory);
	void STATIC_LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimBlueprintGeneratedClass
// 0x0068 (FullSize[0x0290] - InheritedSize[0x0228])
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                        // 0x0228(0x0010) (ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                            // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                              // 0x0240(0x0010) (ZeroConstructor, ContainsInstancedReference)
	int                                                RootAnimNodeIndex;                                         // 0x0250(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8LQA[0x1C];                                    // 0x0254(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FAnimGroupInfo>                      Groups;                                                    // 0x0270(0x0010) (ZeroConstructor)
	TArray<struct FName>                               SkeletonSlotNames;                                         // 0x0280(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimBlueprintGeneratedClass");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RendererSettings
// 0x00D8 (FullSize[0x0110] - InheritedSize[0x0038])
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bMobileHDR : 1;                                            // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_3BKD[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           MobileNumDynamicPointLights;                               // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;              // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bOcclusionCulling : 1;                                     // 0x0040(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_FCK5[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinScreenRadiusForLights;                                  // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinScreenRadiusForEarlyZPass;                              // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinScreenRadiusForCSMdepth;                                // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                         // 0x0050(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bTextureStreaming : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                    // 0x0050(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bAllowStaticLighting : 1;                                  // 0x0050(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                       // 0x0050(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                           // 0x0050(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bGenerateLandscapeGIData : 1;                              // 0x0050(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_YO7M[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TessellationAdaptivePixelsPerTriangle;                     // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bSeparateTranslucency : 1;                                 // 0x0058(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_DH2R[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETranslucentSortPolicy>         TranslucentSortPolicy;                                     // 0x005C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_YNGT[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     TranslucentSortAxis;                                       // 0x0060(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ECustomDepthStencil>            CustomDepthStencil;                                        // 0x006C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CDQE[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDefaultFeatureBloom : 1;                                  // 0x0070(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                       // 0x0070(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;         // 0x0070(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                           // 0x0070(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                             // 0x0070(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                              // 0x0070(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_DYTG[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAntiAliasingMethodUI>          DefaultFeatureAntiAliasing;                                // 0x0074(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EEarlyZPass>                    EarlyZPass;                                                // 0x0075(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EEarlyZPass>                    bDepthSort;                                                // 0x0076(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_OVAQ[0x1];                                     // 0x0077(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bEarlyZPassMovable : 1;                                    // 0x0078(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDBuffer : 1;                                              // 0x0078(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_8GQX[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EClearSceneOptions>             ClearSceneMethod;                                          // 0x007C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VUJ5[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bBasePassOutputsVelocity : 1;                              // 0x0080(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_USCZ[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              WireframeCullThreshold;                                    // 0x0084(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EUIScalingRule>                 UIScaleRule;                                               // 0x0088(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_JNRZ[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                              // 0x0090(0x0080) (Config, Deprecated)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RendererSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureLODSettings
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                          // 0x0028(0x0010) (Edit, ZeroConstructor, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureLODSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DeviceProfile
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UDeviceProfile : public UTextureLODSettings
{
public:
	struct FString                                     DeviceType;                                                // 0x0038(0x0010) (Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash)
	struct FString                                     BaseProfileName;                                           // 0x0048(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash)
	class UObject*                                     Parent;                                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1E6D[0x8];                                     // 0x0060(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             CVars;                                                     // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData_A15Z[0x8];                                     // 0x0078(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DeviceProfile");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DeviceProfileManager
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_H4K7[0x20];                                    // 0x0038(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DeviceProfileManager");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                         // 0x0028(0x0018) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LocalMessage
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class ULocalMessage : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EngineMessage
// 0x0080 (FullSize[0x00A8] - InheritedSize[0x0028])
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                        // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     MaxedOutMessage;                                           // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     EnteredMessage;                                            // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     LeftMessage;                                               // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     GlobalNameChange;                                          // 0x0068(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     SpecEnteredMessage;                                        // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     NewPlayerMessage;                                          // 0x0088(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     NewSpecMessage;                                            // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EngineMessage");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAbs
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionActorPositionWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAdd
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EDepthOfFieldFunctionValue>     FunctionValue;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_IHMO[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Depth;                                                     // 0x0078(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDesaturation
// 0x0080 (FullSize[0x00F0] - InheritedSize[0x0070])
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Fraction;                                                  // 0x00A8(0x0038) (ZeroConstructor)
	struct FLinearColor                                LuminanceFactors;                                          // 0x00E0(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                  // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceFieldGradient");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleRotationRateBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRate
// 0x0158 (FullSize[0x01A8] - InheritedSize[0x0050])
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	unsigned char                                      bUseGroupARotationRateForAllGroups : 1;                    // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_8C2L[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartRotationRate;                                         // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalStartRotationRate[0x5];                          // 0x0090(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (FullSize[0x01C8] - InheritedSize[0x01A8])
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x01A8(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveFloat
// 0x0080 (FullSize[0x00B0] - InheritedSize[0x0030])
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                                // 0x0030(0x0078)
	bool                                               bIsEventCurve;                                             // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WIFN[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveFloat");
		return ptr;
	}



	float GetFloatValue(float InTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ForceFeedbackEffect
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                            // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              Duration;                                                  // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BBAS[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ForceFeedbackEffect");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LogVisualizerCameraController
// 0x0018 (FullSize[0x0790] - InheritedSize[0x0778])
class ALogVisualizerCameraController : public ADebugCameraController
{
public:
	class AActor*                                      PickedActor;                                               // 0x0778(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_33QN[0x10];                                    // 0x0780(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LogVisualizerCameraController");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DecalActor
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                     // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}



	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DestructibleActor
// 0x0020 (FullSize[0x03F0] - InheritedSize[0x03D0])
class ADestructibleActor : public AActor
{
public:
	class UDestructibleComponent*                      DestructibleComponent;                                     // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAffectNavigation : 1;                                     // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, Config, NoDestructor)
	unsigned char                                      UnknownData_49WW[0x7];                                     // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnActorFracture;                                           // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DocumentationActor
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData_W289[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DocumentationActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Emitter
// 0x0050 (FullSize[0x0420] - InheritedSize[0x03D0])
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                   // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bDestroyOnSystemFinish : 1;                                // 0x03D8(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bPostUpdateTickGroup : 1;                                  // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCurrentlyActive : 1;                                      // 0x03D8(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_ZOCY[0x7];                                     // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                           // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                           // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                           // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                         // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}



	void ToggleActive();
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool IsActive();
	struct FName GetEmitterName();
	void Deactivate();
	void Activate();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EmitterCameraLensEffectBase
// 0x0038 (FullSize[0x0458] - InheritedSize[0x0420])
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                           // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                          // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              BaseFOV;                                                   // 0x0430(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DistFromCamera;                                            // 0x0434(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAllowMultipleInstances : 1;                               // 0x0438(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Z716[0x7];                                     // 0x0439(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UClass*>                              EmittersToTreatAsSame;                                     // 0x0440(0x0010) (ZeroConstructor, UObjectWrapper)
	class APlayerCameraManager*                        BaseCamera;                                                // 0x0450(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DebugCameraHUD
// 0x0000 (FullSize[0x04C8] - InheritedSize[0x04C8])
class ADebugCameraHUD : public AHUD
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DebugCameraHUD");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LogVisualizerHUD
// 0x0028 (FullSize[0x04F0] - InheritedSize[0x04C8])
class ALogVisualizerHUD : public ADebugCameraHUD
{
public:
	unsigned char                                      UnknownData_DLIC[0x28];                                    // 0x04C8(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LogVisualizerHUD");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AtmosphericFog
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                   // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AtmosphericFog");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ExponentialHeightFog
// 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                 // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnabled : 1;                                              // 0x03D8(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_5QYE[0x7];                                     // 0x03D9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ExponentialHeightFog");
		return ptr;
	}



	void OnRep_bEnabled();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationObjectBase
// 0x0028 (FullSize[0x03F8] - InheritedSize[0x03D0])
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData_W99B[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x03D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                         GoodSprite;                                                // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                         BadSprite;                                                 // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIsPIEPlayerStart : 1;                                     // 0x03F0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_MR6Y[0x7];                                     // 0x03F1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationObjectBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerStart
// 0x0008 (FullSize[0x0400] - InheritedSize[0x03F8])
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                            // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameNetworkManager
// 0x0070 (FullSize[0x0440] - InheritedSize[0x03D0])
class AGameNetworkManager : public AInfo
{
public:
	int                                                AdjustedNetSpeed;                                          // 0x03D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastNetSpeedUpdateTime;                                    // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                TotalNetBandwidth;                                         // 0x03D8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MinDynamicBandwidth;                                       // 0x03DC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxDynamicBandwidth;                                       // 0x03E0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                             // 0x03E4(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                             // 0x03E4(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_3QP9[0x3];                                     // 0x03E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StandbyRxCheatTime;                                        // 0x03E8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              StandbyTxCheatTime;                                        // 0x03EC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                BadPingThreshold;                                          // 0x03F0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PercentMissingForRxStandby;                                // 0x03F4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PercentMissingForTxStandby;                                // 0x03F8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PercentForBadPing;                                         // 0x03FC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              JoinInProgressStandbyWaitTime;                             // 0x0400(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MoveRepSize;                                               // 0x0404(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MAXPOSITIONERRORSQUARED;                                   // 0x0408(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MAXNEARZEROVELOCITYSQUARED;                                // 0x040C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CLIENTADJUSTUPDATECOST;                                    // 0x0410(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MAXCLIENTUPDATEINTERVAL;                                   // 0x0414(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxMoveDeltaTime;                                          // 0x0418(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               ClientAuthorativePosition;                                 // 0x041C(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_1EIJ[0x3];                                     // 0x041D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ClientErrorUpdateRateLimit;                                // 0x0420(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bMovementTimeDiscrepancyDetection;                         // 0x0424(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	bool                                               bMovementTimeDiscrepancyResolution;                        // 0x0425(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IWQA[0x2];                                     // 0x0426(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                      // 0x0428(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                      // 0x042C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MovementTimeDiscrepancyResolutionRate;                     // 0x0430(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MovementTimeDiscrepancyDriftAllowance;                     // 0x0434(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution;  // 0x0438(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	bool                                               bUseDistanceBasedRelevancy;                                // 0x0439(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BOUC[0x6];                                     // 0x043A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameNetworkManager");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GameSession
// 0x0030 (FullSize[0x0400] - InheritedSize[0x03D0])
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                             // 0x03D0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxPlayers;                                                // 0x03D4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      MaxSplitscreensPerConnection;                              // 0x03D8(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bRequiresPushToTalk;                                       // 0x03D9(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F63R[0x2];                                     // 0x03DA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SessionName;                                               // 0x03DC(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_X8VT[0x1C];                                    // 0x03E4(0x001C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GameSession");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkyLight
// 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                            // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnabled : 1;                                              // 0x03D8(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_E4LN[0x7];                                     // 0x03D9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}



	void OnRep_bEnabled();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WindDirectionalSource
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                 // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}



	class UWindDirectionalSourceComponent* GetComponent();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelBounds
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ALevelBounds : public AActor
{
public:
	bool                                               bAutoUpdateBounds;                                         // 0x03D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_TAIN[0x7];                                     // 0x03D1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelBounds");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Light
// 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                            // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnabled : 1;                                              // 0x03D8(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor)
	unsigned char                                      UnknownData_3ZY6[0x7];                                     // 0x03D9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}



	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AmbientLightSource
// 0x0008 (FullSize[0x03E8] - InheritedSize[0x03E0])
class AAmbientLightSource : public ALight
{
public:
	class UAmbientLightSourceComponent*                AmbientLightSourceComponent;                               // 0x03E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AmbientLightSource");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DirectionalLight
// 0x0000 (FullSize[0x03E0] - InheritedSize[0x03E0])
class ADirectionalLight : public ALight
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PointLight
// 0x0008 (FullSize[0x03E8] - InheritedSize[0x03E0])
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                       // 0x03E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}



	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpotLight
// 0x0008 (FullSize[0x03E8] - InheritedSize[0x03E0])
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                        // 0x03E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}



	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (FullSize[0x03E8] - InheritedSize[0x03E8])
class AGeneratedMeshAreaLight : public ASpotLight
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LODActor
// 0x0038 (FullSize[0x0408] - InheritedSize[0x03D0])
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                       // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                              SubActors;                                                 // 0x03D8(0x0010) (Edit, ZeroConstructor, EditConst)
	float                                              LODDrawDistance;                                           // 0x03E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                LodLevel;                                                  // 0x03EC(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                             SubObjects;                                                // 0x03F0(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData_OMSM[0x8];                                     // 0x0400(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LODActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstanceActor
// 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                              // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeActor
// 0x0078 (FullSize[0x0448] - InheritedSize[0x03D0])
class AMatineeActor : public AActor
{
public:
	class UInterpData*                                 MatineeData;                                               // 0x03D0(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       MatineeControllerName;                                     // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PlayRate;                                                  // 0x03E0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bPlayOnLevelLoad : 1;                                      // 0x03E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceStartPos : 1;                                        // 0x03E4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_98SL[0x3];                                     // 0x03E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStartPosition;                                        // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bLooping : 1;                                              // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor)
	unsigned char                                      bRewindOnPlay : 1;                                         // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bNoResetOnRewind : 1;                                      // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                               // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableRadioFilter : 1;                                   // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bClientSideOnly : 1;                                       // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                               // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsSkippable : 1;                                          // 0x03EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_ONYV[0x3];                                     // 0x03ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PreferredSplitScreenNum;                                   // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bDisableMovementInput : 1;                                 // 0x03F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bDisableLookAtInput : 1;                                   // 0x03F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHidePlayer : 1;                                           // 0x03F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bHideHud : 1;                                              // 0x03F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_W35T[0x3];                                     // 0x03F5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                           // 0x03F8(0x0010) (Net, ZeroConstructor)
	unsigned char                                      bShouldShowGore : 1;                                       // 0x0408(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_19T3[0x7];                                     // 0x0409(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpGroupInst*>                    GroupInst;                                                 // 0x0410(0x0010) (ZeroConstructor, Transient)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                                // 0x0420(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsPlaying : 1;                                            // 0x0430(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bReversePlayback : 1;                                      // 0x0430(0x0001) BIT_FIELD (Net, NoDestructor)
	unsigned char                                      bPaused : 1;                                               // 0x0430(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      bPendingStop : 1;                                          // 0x0430(0x0001) BIT_FIELD (Net, Transient, NoDestructor)
	unsigned char                                      UnknownData_4EFQ[0x3];                                     // 0x0431(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InterpPosition;                                            // 0x0434(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VFG4[0x4];                                     // 0x0438(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      ReplicationForceIsPlaying;                                 // 0x043C(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NKH6[0x7];                                     // 0x043D(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bServerInitialLevelStreamingComplete : 1;                  // 0x0444(0x0001) BIT_FIELD (Net, Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_8JTB[0x3];                                     // 0x0445(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}



	void Stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void PlayInstantly();
	void Play(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void ChangePlaybackDirection();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeActorCameraAnim
// 0x0008 (FullSize[0x0450] - InheritedSize[0x0448])
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                                // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeActorCameraAnim");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MergedCollisionActor
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AMergedCollisionActor : public AActor
{
public:
	class UMergedCollisionComponent*                   MergedCollisionComponent;                                  // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MergedCollisionActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationQueryFilter
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UNavigationQueryFilter : public UObject
{
public:
	TArray<struct FNavigationFilterArea>               Areas;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	struct FNavigationFilterFlags                      IncludeFlags;                                              // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FNavigationFilterFlags                      ExcludeFlags;                                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationQueryFilter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedNavMeshesDataAsset
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInstancedNavMeshesDataAsset : public UDataAsset
{
public:
	TArray<struct FInstancedNavMesh>                   InstancedNavMeshes;                                        // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedNavMeshesDataAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleComputeShaderData
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UParticleComputeShaderData : public UDataAsset
{
public:
	unsigned char                                      UnknownData_2IP7[0x20];                                    // 0x0028(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleComputeShaderData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StringArrayDataAsset
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UStringArrayDataAsset : public UDataAsset
{
public:
	TArray<struct FString>                             Array;                                                     // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StringArrayDataAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DestructibleFractureSettings
// 0x0078 (FullSize[0x00A0] - InheritedSize[0x0028])
class UDestructibleFractureSettings : public UObject
{
public:
	int                                                CellSiteCount;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFractureMaterial                           FractureMaterialDesc;                                      // 0x002C(0x0024) (Edit, Transient)
	int                                                RandomSeed;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FC93[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVector>                             VoronoiSites;                                              // 0x0058(0x0010) (ZeroConstructor)
	int                                                OriginalSubmeshCount;                                      // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_I0CQ[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  Materials;                                                 // 0x0070(0x0010) (ZeroConstructor)
	TArray<struct FDestructibleChunkParameters>        ChunkParameters;                                           // 0x0080(0x0010) (ZeroConstructor)
	TArray<struct FString>                             MaterialNames;                                             // 0x0090(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleFractureSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimationSettings
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UAnimationSettings : public UDeveloperSettings
{
public:
	TArray<float>                                      DefaultVisibleDistanceFactorThresholds;                    // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	int                                                CompressCommandletVersion;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9VQE[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                             // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	class UClass*                                      DefaultCompressionAlgorithm;                               // 0x0060(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    RotationCompressionFormat;                                 // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    TranslationCompressionFormat;                              // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_96LN[0x2];                                     // 0x006A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlternativeCompressionThreshold;                           // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               ForceRecompression;                                        // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bOnlyCheckForMissingSkeletalMeshes;                        // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bForceBelowThreshold;                                      // 0x0072(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                     // 0x0073(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bRaiseMaxErrorToExisting;                                  // 0x0074(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bTryFixedBitwiseCompression;                               // 0x0075(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bTryPerTrackBitwiseCompression;                            // 0x0076(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bTryLinearKeyRemovalCompression;                           // 0x0077(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bTryIntervalKeyRemoval;                                    // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bStripAnimationDataOnDedicatedServer;                      // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A0HJ[0x6];                                     // 0x007A(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimationSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrack
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData_YNW3[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        SubTracks;                                                 // 0x0038(0x0010) (ZeroConstructor)
	class UClass*                                      TrackInstClass;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETrackActiveCondition>          ActiveCondition;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_JJBK[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     TrackTitle;                                                // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	unsigned char                                      bOnePerGroup : 1;                                          // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDirGroupOnly : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDisableTrack : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsSelected : 1;                                           // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsAnimControlTrack : 1;                                   // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSubTrackOnly : 1;                                         // 0x0068(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bVisible : 1;                                              // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsRecording : 1;                                          // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_MTEE[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatBase
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                                // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_YH03[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFade
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                          // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFadeAudio : 1;                                            // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TL46[0x3];                                     // 0x0091(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                FadeColor;                                                 // 0x0094(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7PP8[0x4];                                     // 0x00A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatAnimBPParam
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UClass*                                      AnimBlueprintClass;                                        // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       ParamName;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_XQWO[0x8];                                     // 0x00A0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatAnimBPParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                           // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                 // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackFloatProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackMove
// 0x0058 (FullSize[0x00C8] - InheritedSize[0x0070])
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                  // 0x0070(0x0018) (ZeroConstructor)
	struct FInterpCurveVector                          EulerTrack;                                                // 0x0088(0x0018) (ZeroConstructor)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x00A0(0x0010)
	struct FName                                       LookAtGroupName;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LinCurveTension;                                           // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AngCurveTension;                                           // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseQuatInterpolation : 1;                                 // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowArrowAtKeys : 1;                                      // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDisableMovement : 1;                                      // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                             // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowRotationOnCurveEd : 1;                                // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHide3DTrack : 1;                                          // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KXGC[0x3];                                     // 0x00C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EInterpTrackMoveRotMode>        RotMode;                                                   // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_GP2M[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColorBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleColorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColor
// 0x02B8 (FullSize[0x0308] - InheritedSize[0x0050])
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	unsigned char                                      bUseGroupAColorForAllGroups : 1;                           // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_P5NG[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      StartColor;                                                // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      AdditionalStartColor[0x5];                                 // 0x0090(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bUseGroupAAlphaForAllGroups : 1;                           // 0x01A8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_FTKR[0x7];                                     // 0x01A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartAlpha;                                                // 0x01B0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalStartAlpha[0x5];                                 // 0x01E8(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bClampAlpha : 1;                                           // 0x0300(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bIgnoreComponentColorTint : 1;                             // 0x0300(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_BYVQ[0x7];                                     // 0x0301(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (FullSize[0x0328] - InheritedSize[0x0308])
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0308(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColorOverLife
// 0x0078 (FullSize[0x00C8] - InheritedSize[0x0050])
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                             // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AlphaOverLife;                                             // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bClampAlpha : 1;                                           // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_R2CB[0x7];                                     // 0x00C1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleColorScaleOverLife
// 0x0078 (FullSize[0x00C8] - InheritedSize[0x0050])
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                        // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bEmitterTime : 1;                                          // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_Y0S0[0x7];                                     // 0x00C1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMurkyColor
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleMurkyColor : public UParticleModuleColorBase
{
public:
	struct FLinearColor                                ColorScale;                                                // 0x0050(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMurkyColor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleEventBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventGenerator
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                    // 0x0050(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleRotationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotation
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                             // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bInheritParent : 1;                                        // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_911T[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0090(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotateRotationAxis
// 0x0068 (FullSize[0x00B8] - InheritedSize[0x0050])
class UParticleModuleRotateRotationAxis : public UParticleModuleRotationBase
{
public:
	struct FRotationAboutAxisParameters                FacingAxis;                                                // 0x0050(0x0010) (Edit)
	unsigned char                                      bUseGroupAFacingAxisForAllGroups : 1;                      // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_73W2[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRotationAboutAxisParameters                AdditionalFacingAxes[0x5];                                 // 0x0064(0x0050) (Edit, AdvancedDisplay)
	unsigned char                                      UnknownData_QHPW[0x4];                                     // 0x00B4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotateRotationAxis");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRate
// 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                         // 0x0050(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationData
// 0x01C0 (FullSize[0x0590] - InheritedSize[0x03D0])
class ANavigationData : public AActor
{
public:
	class UPrimitiveComponent*                         RenderingComp;                                             // 0x03D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FNavDataConfig                              NavDataConfig;                                             // 0x03D8(0x0058) (Protected)
	unsigned char                                      bEnableDrawing : 1;                                        // 0x0430(0x0001) BIT_FIELD (Edit, Transient, NoDestructor, Protected)
	unsigned char                                      bRebuildAtRuntime : 1;                                     // 0x0430(0x0001) BIT_FIELD (Config, Deprecated, NoDestructor, Protected)
	unsigned char                                      UnknownData_VHDY[0x3];                                     // 0x0431(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ERuntimeGenerationType>         RuntimeGeneration;                                         // 0x0434(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_MLIU[0x3];                                     // 0x0435(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceRebuildOnLoad : 1;                                   // 0x0438(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      UnknownData_8NL5[0x3];                                     // 0x0439(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ObservedPathsTickInterval;                                 // 0x043C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_JVXS[0xE8];                                    // 0x0440(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSupportedAreaData>                  SupportedAreas;                                            // 0x0528(0x0010) (ZeroConstructor, Protected)
	unsigned char                                      UnknownData_MT7E[0x58];                                    // 0x0538(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AbstractNavData
// 0x0000 (FullSize[0x0590] - InheritedSize[0x0590])
class AAbstractNavData : public ANavigationData
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AbstractNavData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationGraph
// 0x0000 (FullSize[0x0590] - InheritedSize[0x0590])
class ANavigationGraph : public ANavigationData
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationGraph");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RecastNavMesh
// 0x00B0 (FullSize[0x0640] - InheritedSize[0x0590])
class ARecastNavMesh : public ANavigationData
{
public:
	unsigned char                                      bDrawTriangleEdges : 1;                                    // 0x0590(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawPolyEdges : 1;                                        // 0x0590(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bDrawFilledPolys : 1;                                      // 0x0590(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawNavMeshEdges : 1;                                     // 0x0590(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawTileBounds : 1;                                       // 0x0590(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawPathCollidingGeometry : 1;                            // 0x0590(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawTileLabels : 1;                                       // 0x0590(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawPolygonLabels : 1;                                    // 0x0590(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawDefaultPolygonCost : 1;                               // 0x0591(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawLabelsOnPathNodes : 1;                                // 0x0591(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawNavLinks : 1;                                         // 0x0591(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawFailedNavLinks : 1;                                   // 0x0591(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawClusters : 1;                                         // 0x0591(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDrawOctree : 1;                                           // 0x0591(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDistinctlyDrawTilesBeingBuilt : 1;                        // 0x0591(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bDrawNavMesh : 1;                                          // 0x0591(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_U2MW[0x2];                                     // 0x0592(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DrawOffset;                                                // 0x0594(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BuiltTileSizeUU;                                           // 0x0598(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BuiltCellSize;                                             // 0x059C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bFixedTilePoolSize : 1;                                    // 0x05A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_HGUI[0x3];                                     // 0x05A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TilePoolSize;                                              // 0x05A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TileSizeUU;                                                // 0x05A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CellSize;                                                  // 0x05AC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CellHeight;                                                // 0x05B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AgentRadius;                                               // 0x05B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AgentHeight;                                               // 0x05B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AgentMaxHeight;                                            // 0x05BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AgentMaxSlope;                                             // 0x05C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AgentMaxStepHeight;                                        // 0x05C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinRegionArea;                                             // 0x05C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MergeRegionSize;                                           // 0x05CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxSimplificationError;                                    // 0x05D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxSimultaneousTileGenerationJobsCount;                    // 0x05D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                TileNumberHardLimit;                                       // 0x05D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                PolyRefTileBits;                                           // 0x05DC(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                PolyRefNavPolyBits;                                        // 0x05E0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                PolyRefSaltBits;                                           // 0x05E4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              DefaultDrawDistance;                                       // 0x05E8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DefaultMaxSearchNodes;                                     // 0x05EC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DefaultMaxHierarchicalSearchNodes;                         // 0x05F0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ERecastPartitioning>            RegionPartitioning;                                        // 0x05F4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_ERecastPartitioning>            LayerPartitioning;                                         // 0x05F5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4GNC[0x2];                                     // 0x05F6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                RegionChunkSplits;                                         // 0x05F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                LayerChunkSplits;                                          // 0x05FC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bSortNavigationAreasByCost : 1;                            // 0x0600(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bPerformVoxelFiltering : 1;                                // 0x0600(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bMarkLowHeightAreas : 1;                                   // 0x0600(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDoFullyAsyncNavDataGathering : 1;                         // 0x0600(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseBetterOffsetsFromCorners : 1;                          // 0x0600(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bUseVirtualFilters : 1;                                    // 0x0600(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      bUseVoxelCache : 1;                                        // 0x0600(0x0001) BIT_FIELD (Config, NoDestructor)
	unsigned char                                      UnknownData_K8BQ[0x3];                                     // 0x0601(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TileSetUpdateInterval;                                     // 0x0604(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              HeuristicScale;                                            // 0x0608(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VerticalDeviationFromGroundCompensation;                   // 0x060C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U5UF[0x30];                                    // 0x0610(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RecastNavMesh");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationGraphNode
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class ANavigationGraphNode : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationGraphNode");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerStartPIE
// 0x0000 (FullSize[0x0400] - InheritedSize[0x0400])
class APlayerStartPIE : public APlayerStart
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerStartPIE");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavPathObserverInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavPathObserverInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavPathObserverInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationTestingActor
// 0x00D0 (FullSize[0x04A0] - InheritedSize[0x03D0])
class ANavigationTestingActor : public AActor
{
public:
	unsigned char                                      UnknownData_4PA2[0x10];                                    // 0x03D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UCapsuleComponent*                           CapsuleComponent;                                          // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*                 InvokerComponent;                                          // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bActAsNavigationInvoker : 1;                               // 0x03F0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_S4T4[0x3];                                     // 0x03F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FNavAgentProperties                         NavAgentProps;                                             // 0x03F4(0x0030) (Edit)
	struct FVector                                     QueryingExtent;                                            // 0x0424(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ANavigationData*                             MyNavData;                                                 // 0x0430(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     ProjectedLocation;                                         // 0x0438(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor)
	unsigned char                                      bProjectedLocationValid : 1;                               // 0x0444(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor)
	unsigned char                                      bSearchStart : 1;                                          // 0x0444(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseHierarchicalPathfinding : 1;                           // 0x0444(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bGatherDetailedInfo : 1;                                   // 0x0444(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowNodePool : 1;                                         // 0x0444(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowBestPath : 1;                                         // 0x0444(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShowDiffWithPreviousStep : 1;                             // 0x0444(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bShouldBeVisibleInGame : 1;                                // 0x0444(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PHP2[0x3];                                     // 0x0445(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ENavCostDisplay>                CostDisplayMode;                                           // 0x0448(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_WLW5[0x3];                                     // 0x0449(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   TextCanvasOffset;                                          // 0x044C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bPathExist : 1;                                            // 0x0454(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor)
	unsigned char                                      bPathIsPartial : 1;                                        // 0x0454(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor)
	unsigned char                                      bPathSearchOutOfNodes : 1;                                 // 0x0454(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor)
	unsigned char                                      UnknownData_282T[0x3];                                     // 0x0455(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PathfindingTime;                                           // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PathCost;                                                  // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                PathfindingSteps;                                          // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9KWW[0x4];                                     // 0x0464(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ANavigationTestingActor*                     OtherActor;                                                // 0x0468(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      FilterClass;                                               // 0x0470(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int                                                ShowStepIndex;                                             // 0x0478(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OffsetFromCornersDistance;                                 // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_95L2[0x20];                                    // 0x0480(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationTestingActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkDefinition
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                              // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_WFQ9[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkDefinition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkHostInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavLinkHostInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkHostInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkProxy
// 0x0050 (FullSize[0x0420] - InheritedSize[0x03D0])
class ANavLinkProxy : public AActor
{
public:
	unsigned char                                      UnknownData_1IR8[0x10];                                    // 0x03D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNavigationLink>                     PointLinks;                                                // 0x03E0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                              // 0x03F0(0x0010) (ZeroConstructor)
	class UNavLinkCustomComponent*                     SmartLinkComp;                                             // 0x0400(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bSmartLinkIsRelevant;                                      // 0x0408(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_708C[0x7];                                     // 0x0409(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnSmartLinkReached;                                        // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Protected)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkProxy");
		return ptr;
	}



	void SetSmartLinkEnabled(bool bEnabled);
	void ResumePathFollowing(class AActor* Agent);
	void ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination);
	bool IsSmartLinkEnabled();
	bool HasMovingAgents();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Note
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class ANote : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSystem
// 0x0118 (FullSize[0x0140] - InheritedSize[0x0028])
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<Engine_EParticleSystemUpdateMode>      SystemUpdateMode;                                          // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CGHP[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              UpdateTime_FPS;                                            // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              UpdateTime_Delta;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WarmUpTime;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              WarmupTickRate;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HMBQ[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleEmitter*>                    Emitters;                                                  // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	class UParticleSystemComponent*                    PreviewComponent;                                          // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                              // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_1RVU[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LODDistanceCheckTime;                                      // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_EParticleSystemLODMethod>       LODMethod;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_KI4F[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      LODDistances;                                              // 0x0070(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bRegenerateLODDuplicate : 1;                               // 0x0080(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_5QGN[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                               // 0x0088(0x0010) (Edit, ZeroConstructor, AdvancedDisplay)
	unsigned char                                      bIgnoreBoundsRotation : 1;                                 // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bBoostParticleAggregationPriority : 1;                     // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                          // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_G0BC[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBox                                        FixedRelativeBoundingBox;                                  // 0x009C(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseLowResTranslucencyBoundingBox : 1;                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_N0VQ[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBox                                        LowResTranslucencyBoundingBox;                             // 0x00BC(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              SecondsBeforeInactive;                                     // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bShouldResetPeakCounts : 1;                                // 0x00DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHasPhysics : 1;                                           // 0x00DC(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bPostPhysicsTick : 1;                                      // 0x00DC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                 // 0x00DC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                               // 0x00DC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_38OM[0x3];                                     // 0x00DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Delay;                                                     // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	float                                              DelayLow;                                                  // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bUseDelayRange : 1;                                        // 0x00E8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_MYFQ[0x3];                                     // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     MacroUVPosition;                                           // 0x00EC(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              MacroUVRadius;                                             // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod;                                     // 0x00FC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DFSU[0x3];                                     // 0x00FD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBox                                        CustomOcclusionBounds;                                     // 0x0100(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_OU9U[0x4];                                     // 0x011C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                              // 0x0120(0x0010) (ZeroConstructor, Transient)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                        // 0x0130(0x0010) (Edit, ZeroConstructor, AdvancedDisplay)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSystem");
		return ptr;
	}



	int GetNumLODs();
	bool ContainsEmitterType(class UClass* TypeData);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSystemAggregateTickSettings
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UParticleSystemAggregateTickSettings : public UObject
{
public:
	int                                                FramesTickScaledOver;                                      // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxTicksPerFrame;                                          // 0x002C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PriorityInflationPower;                                    // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_10ZC[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSystemAggregateTickSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleEventManager
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class AParticleEventManager : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleEventManager");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_CollisionDataProvider
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_CollisionDataProvider : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Interface_CollisionDataProvider");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MeshPatchAsset
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UMeshPatchAsset : public UObject
{
public:
	unsigned char                                      UnknownData_WQO3[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MeshPatchAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMesh
// 0x0210 (FullSize[0x0238] - InheritedSize[0x0028])
class USkeletalMesh : public UObject
{
public:
	unsigned char                                      UnknownData_LN04[0x28];                                    // 0x0028(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeleton*                                   Skeleton;                                                  // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	struct FBoxSphereBounds                            Bounds;                                                    // 0x0058(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WBCM[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkeletalMaterial>                   Materials;                                                 // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                           // 0x0088(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorAxis;                                            // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<CoreUObject_EAxis>                     SkelMirrorFlipAxis;                                        // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_87LK[0x6];                                     // 0x009A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                   // 0x00A0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                  // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bHasBeenSimplified : 1;                                    // 0x00B0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHasVertexColors : 1;                                      // 0x00B0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_BAV7[0x7];                                     // 0x00B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FDeformablesSettings>                DeformablesSettings;                                       // 0x00B8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bKeepTessellationAdjacency : 1;                            // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bKeepSkeletalMeshBuffersInMemory : 1;                      // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnablePerPolyCollision : 1;                               // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_G3V3[0x7];                                     // 0x00C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  BodySetup;                                                 // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                               PhysicsAsset;                                              // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	class UHIKCharacterization*                        Characterization;                                          // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                               DeformablesPhysicsAsset;                                   // 0x00E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              StreamingDistanceMultiplier;                               // 0x00F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              StreamingDiscardedTexelRatios;                             // 0x00F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMorphTarget*>                        MorphTargets;                                              // 0x00F8(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<class UMeshPatchAsset*>                     MeshPatchAssets;                                           // 0x0108(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_OZ31[0xD8];                                    // 0x0118(0x00D8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FClothingAssetData>                  ClothingAssets;                                            // 0x01F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData_SLFG[0x10];                                    // 0x0200(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0210(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected)
	unsigned char                                      UnknownData_BGOC[0x8];                                     // 0x0220(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x0228(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}



	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	int GetNumLODsBP();
	class USkeletalMeshSocket* FindSocket(const struct FName& InSocketName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimationAsset
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UAnimationAsset : public UObject
{
public:
	class USkeleton*                                   Skeleton;                                                  // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_37LV[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UAnimMetaData*>                       MetaData;                                                  // 0x0040(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimationAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DefaultPawn
// 0x0028 (FullSize[0x0470] - InheritedSize[0x0448])
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                              // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BaseLookUpRate;                                            // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPawnMovementComponent*                      MovementComponent;                                         // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                            CollisionComponent;                                        // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                        MeshComponent;                                             // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAddDefaultMovementBindings : 1;                           // 0x0468(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor)
	unsigned char                                      UnknownData_P02Q[0x7];                                     // 0x0469(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DefaultPawn");
		return ptr;
	}



	void TurnAtRate(float Rate);
	void Turn(float Val);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
	void LookUp(float Val);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpectatorPawn
// 0x0000 (FullSize[0x0470] - InheritedSize[0x0470])
class ASpectatorPawn : public ADefaultPawn
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpectatorPawn");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReflectionCapture
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                          // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReflectionCapture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoxReflectionCapture
// 0x0000 (FullSize[0x03D8] - InheritedSize[0x03D8])
class ABoxReflectionCapture : public AReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoxReflectionCapture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlaneReflectionCapture
// 0x0000 (FullSize[0x03D8] - InheritedSize[0x03D8])
class APlaneReflectionCapture : public AReflectionCapture
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlaneReflectionCapture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SphereReflectionCapture
// 0x0008 (FullSize[0x03E0] - InheritedSize[0x03D8])
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                         // 0x03D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SphereReflectionCapture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RigidBodyBase
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class ARigidBodyBase : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RigidBodyBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsConstraintActor
// 0x0020 (FullSize[0x03F0] - InheritedSize[0x03D0])
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                            // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                      ConstraintActor1;                                          // 0x03D8(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                      ConstraintActor2;                                          // 0x03E0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bDisableCollision : 1;                                     // 0x03E8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_TJQD[0x7];                                     // 0x03E9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsConstraintActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsThruster
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                         // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsThruster");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RadialForceActor
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                            // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RadialForceActor");
		return ptr;
	}



	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCapture
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                  // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCapture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCapture2D
// 0x0010 (FullSize[0x03E8] - InheritedSize[0x03D8])
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                        // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCapture2D");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureCube
// 0x0010 (FullSize[0x03E8] - InheritedSize[0x03D8])
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                      // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDrawFrustumComponent*                       DrawFrustum;                                               // 0x03E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureCube");
		return ptr;
	}



	void OnInterpToggle(bool bEnable);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ServerOnlyTestActor
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class AServerOnlyTestActor : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ServerOnlyTestActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkinnedMeshComponent
// 0x0128 (FullSize[0x06C0] - InheritedSize[0x0598])
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                              // 0x0598(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                       // 0x05A0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper)
	unsigned char                                      UnknownData_USVO[0x40];                                    // 0x05A8(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          CustomDepthMaterial;                                       // 0x05E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0E4O[0x10];                                    // 0x05F0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                     // 0x0600(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_CNKV[0x7];                                     // 0x0601(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FActiveVertexAnim>                   ActiveVertexAnims;                                         // 0x0608(0x0010) (ZeroConstructor, Transient)
	class UPhysicsAsset*                               PhysicsAssetOverride;                                      // 0x0618(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                ForcedLodModel;                                            // 0x0620(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                MinLodModel;                                               // 0x0624(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                PredictedLODLevel;                                         // 0x0628(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                OldPredictedLODLevel;                                      // 0x062C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxDistanceFactor;                                         // 0x0630(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZHH5[0x4];                                     // 0x0634(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                   // 0x0638(0x0010) (ZeroConstructor, Transient)
	float                                              StreamingDistanceMultiplier;                               // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FColor                                      WireframeColor;                                            // 0x064C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bForceWireframe : 1;                                       // 0x0650(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDisplayBones : 1;                                         // 0x0650(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDisplayBoneCollisions : 1;                                // 0x0650(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDisableMorphTarget : 1;                                   // 0x0650(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bHideSkin : 1;                                             // 0x0650(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_5BHJ[0x17];                                    // 0x0651(0x0017) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bPerBoneMotionBlur : 1;                                    // 0x0668(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                          // 0x0668(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                           // 0x0668(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_E9NV[0x3];                                     // 0x0669(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMeshComponentUpdateFlag>       MeshComponentUpdateFlag;                                   // 0x066C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CS68[0x3];                                     // 0x066D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceMeshObjectUpdate : 1;                                // 0x0670(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bChartDistanceFactor : 1;                                  // 0x0670(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCanHighlightSelectedSections : 1;                         // 0x0670(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bRecentlyRendered : 1;                                     // 0x0670(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_9M93[0x3];                                     // 0x0671(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ProgressiveDrawingFraction;                                // 0x0674(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      CustomSortAlternateIndexMode;                              // 0x0678(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5O95[0x13];                                    // 0x0679(0x0013) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBoxSphereBounds                            CachedLocalBounds;                                         // 0x068C(0x001C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bCachedLocalBoundsUpToDate;                                // 0x06A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bEnableUpdateRateOptimizations;                            // 0x06A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bDisplayDebugUpdateRateOptimizations;                      // 0x06AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_C0U8[0x15];                                    // 0x06AB(0x0015) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkinnedMeshComponent");
		return ptr;
	}



	void UnHideBoneByName(const struct FName& BoneName);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
	void SetCustomDepthMaterial(class UMaterialInterface* Material);
	void OnRep_SkeletalMesh(class USkeletalMesh* OldMesh);
	bool IsBoneHiddenByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<Engine_EPhysBodyOp> PhysBodyOption);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	struct FName GetParentBone(const struct FName& BoneName);
	class UMaterialInterface* GetCustomDepthMaterial();
	struct FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const struct FName& BoneName);
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsConstraintComponent
// 0x01B0 (FullSize[0x0460] - InheritedSize[0x02B0])
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                      ConstraintActor1;                                          // 0x02B0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FConstrainComponentPropName                 ComponentName1;                                            // 0x02B8(0x0008) (Edit)
	class AActor*                                      ConstraintActor2;                                          // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FConstrainComponentPropName                 ComponentName2;                                            // 0x02C8(0x0008) (Edit)
	unsigned char                                      UnknownData_FJTW[0x10];                                    // 0x02D0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                           // 0x02E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_Y0A6[0x8];                                     // 0x02F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FConstraintInstance                         ConstraintInstance;                                        // 0x0300(0x0160) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsConstraintComponent");
		return ptr;
	}



	void SetLinearZLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<Engine_EConstraintFrame> Frame, const struct FTransform& RefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<Engine_EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<Engine_EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<Engine_EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void BreakConstraint();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Skeleton
// 0x0240 (FullSize[0x0268] - InheritedSize[0x0028])
class USkeleton : public UObject
{
public:
	TArray<struct FBoneNode>                           BoneTree;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData_JHLR[0x80];                                    // 0x0038(0x0080) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSkeletonToMeshLinkup>               LinkupCache;                                               // 0x00B8(0x0010) (ZeroConstructor, Transient)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                   // 0x00C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_0K1Z[0x50];                                    // 0x00D8(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSmartNameContainer                         SmartNames;                                                // 0x0128(0x0050)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                                // 0x0178(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_ZB4Q[0xE0];                                    // 0x0188(0x00E0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Skeleton");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Interface_Animatable
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterface_Animatable : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Interface_Animatable");
		return ptr;
	}



	class UAnimInstance* GetAnimInstance();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshComponent
// 0x02D0 (FullSize[0x0990] - InheritedSize[0x06C0])
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData_Y7TC[0x10];                                    // 0x06C0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationMode>                 AnimationMode;                                             // 0x06D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FI0B[0x7];                                     // 0x06D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      AnimBlueprintGeneratedClass;                               // 0x06D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                               AnimScriptInstance;                                        // 0x06E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSingleAnimationPlayData                    AnimationData;                                             // 0x06E8(0x0020) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData_0FV8[0x10];                                    // 0x0708(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTransform>                          CachedLocalAtoms;                                          // 0x0718(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedSpaceBases;                                          // 0x0728(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_V74A[0x28];                                    // 0x0738(0x0028) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalAnimRateScale;                                       // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bHasValidBodies : 1;                                       // 0x0764(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_HEFE[0x3];                                     // 0x0765(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType;                                  // 0x0768(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EISV[0x3];                                     // 0x0769(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bBlendPhysics : 1;                                         // 0x076C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                       // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                            // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDisableClothSimulation : 1;                               // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCollideWithEnvironment : 1;                               // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bCollideWithAttachedChildren : 1;                          // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bLocalSpaceSimulation : 1;                                 // 0x076C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bClothMorphTarget : 1;                                     // 0x076C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bResetAfterTeleport : 1;                                   // 0x076D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_FQF4[0x2];                                     // 0x076E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TeleportDistanceThreshold;                                 // 0x0770(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TeleportRotationThreshold;                                 // 0x0774(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ClothBlendWeight;                                          // 0x0778(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_7KCL[0x4];                                     // 0x077C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     RootBoneTranslation;                                       // 0x0780(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      bNoSkeletonUpdate : 1;                                     // 0x078C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bPauseAnims : 1;                                           // 0x078C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnablePerPolyCollision : 1;                               // 0x078C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_YJLS[0x3];                                     // 0x078D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  BodySetup;                                                 // 0x0790(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAutonomousTickPose : 1;                                   // 0x0798(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bForceRefpose : 1;                                         // 0x0798(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bOldForceRefPose : 1;                                      // 0x0798(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShowPrePhysBones : 1;                                     // 0x0798(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bRequiredBonesUpToDate : 1;                                // 0x0798(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bAnimTreeInitialised : 1;                                  // 0x0798(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                            // 0x0798(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_UZ9T[0x3];                                     // 0x0799(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     LineCheckBoundsScale;                                      // 0x079C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	int                                                RagdollAggregateThreshold;                                 // 0x07A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_P55F[0x4];                                     // 0x07AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                        // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               UseRefPoseToInitialise;                                    // 0x07C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_R2J2[0x1C7];                                   // 0x07C1(0x01C7) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastPoseTickTime;                                          // 0x0988(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8ZDQ[0x4];                                     // 0x098C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return ptr;
	}



	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void Stop();
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetClothMaxDistanceScale(float Scale);
	void SetAnimInstanceClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<Engine_EAnimationMode> InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void ResetClothTeleportMode();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	bool IsPlaying();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	float GetClothMaxDistanceScale();
	class UAnimInstance* GetAnimInstance();
	TEnumAsByte<Engine_EAnimationMode> GetAnimationMode();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	void ClearMorphTargets();
	void BindClothToMasterPoseComponent();
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeAnimInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMatineeAnimInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeAnimInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshActor
// 0x0040 (FullSize[0x0410] - InheritedSize[0x03D0])
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData_PZ6J[0x8];                                     // 0x03D0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bShouldDoAnimNotifies : 1;                                 // 0x03D8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bWakeOnLevelStart : 1;                                     // 0x03D8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_A1BL[0x7];                                     // 0x03D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                     // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                               ReplicatedMesh;                                            // 0x03E8(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                       // 0x03F0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                          ReplicatedMaterial0;                                       // 0x03F8(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                          ReplicatedMaterial1;                                       // 0x0400(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5SM7[0x8];                                     // 0x0408(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}



	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SplineMeshActor
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SplineMeshActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CoveredMeshActor
// 0x0008 (FullSize[0x03E8] - InheritedSize[0x03E0])
class ACoveredMeshActor : public AStaticMeshActor
{
public:
	class UInstancedCoverageMeshComponent*             InstancedCoverageMeshComponent;                            // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CoveredMeshActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StreamingProbe
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class AStreamingProbe : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StreamingProbe");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TargetPoint
// 0x0000 (FullSize[0x03D0] - InheritedSize[0x03D0])
class ATargetPoint : public AActor
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextRenderActor
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                                // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextRenderActor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerBase
// 0x0010 (FullSize[0x03E0] - InheritedSize[0x03D0])
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                                        // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                         SpriteComponent;                                           // 0x03D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerBox
// 0x0000 (FullSize[0x03E0] - InheritedSize[0x03E0])
class ATriggerBox : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerBox");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerCapsule
// 0x0000 (FullSize[0x03E0] - InheritedSize[0x03E0])
class ATriggerCapsule : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerCapsule");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TriggerSphere
// 0x0000 (FullSize[0x03E0] - InheritedSize[0x03E0])
class ATriggerSphere : public ATriggerBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TriggerSphere");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldVolume
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                      // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WaterEmissionVolume
// 0x0008 (FullSize[0x03D8] - InheritedSize[0x03D0])
class AWaterEmissionVolume : public AActor
{
public:
	class UWaterEmissionVolumeComponent*               WaterEmissionVolumeComponent;                              // 0x03D0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WaterEmissionVolume");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ComponentWithTestInterface
// 0x0008 (FullSize[0x00D0] - InheritedSize[0x00C8])
class UComponentWithTestInterface : public UActorComponent
{
public:
	unsigned char                                      UnknownData_2XUP[0x8];                                     // 0x00C8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ComponentWithTestInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnotherComponentWithTestInterface
// 0x0008 (FullSize[0x00D0] - InheritedSize[0x00C8])
class UAnotherComponentWithTestInterface : public UActorComponent
{
public:
	unsigned char                                      UnknownData_J9GJ[0x8];                                     // 0x00C8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnotherComponentWithTestInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ApplicationLifecycleComponent
// 0x0050 (FullSize[0x0118] - InheritedSize[0x00C8])
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                         // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                         // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                    // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                   // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                          // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ApplicationLifecycleComponent");
		return ptr;
	}



	void ApplicationLifetimeDelegate__DelegateSignature();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AggregatorInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAggregatorInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AggregatorInterface");
		return ptr;
	}



	void UnregisterAggregatable();
	void RegisterAggregatable();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ComponentAggregatorComponent
// 0x0018 (FullSize[0x00E0] - InheritedSize[0x00C8])
class UComponentAggregatorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_ZWTN[0x8];                                     // 0x00C8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             Aggregatables;                                             // 0x00D0(0x0010) (Edit, ZeroConstructor, EditConst, Protected)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ComponentAggregatorComponent");
		return ptr;
	}



	void UnregisterAggregatable();
	void RegisterAggregatable();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpToMovementComponent
// 0x0098 (FullSize[0x01A8] - InheritedSize[0x0110])
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              Duration;                                                  // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bPauseOnImpact : 1;                                        // 0x0114(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_L1C4[0x3];                                     // 0x0115(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EInterpToBehaviourType>         BehaviourType;                                             // 0x0118(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3ZTY[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bForceSubStepping : 1;                                     // 0x011C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_3UK8[0x3];                                     // 0x011D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                         // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                            // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                       // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                         // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                           // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                     // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxSimulationIterations;                                   // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                             // 0x0178(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_QL9L[0x20];                                    // 0x0188(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpToMovementComponent");
		return ptr;
	}



	void StopSimulating(const struct FHitResult& HitResult);
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationSystem
// 0x03B0 (FullSize[0x03D8] - InheritedSize[0x0028])
class UNavigationSystem : public UBlueprintFunctionLibrary
{
public:
	class ANavigationData*                             MainNavData;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANavigationData*                             AbstractNavData;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAutoCreateNavigationData : 1;                             // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      bAllowClientSideNavigation : 1;                            // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      bSupportRebuilding : 1;                                    // 0x0038(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bInitialBuildingLocked : 1;                                // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_MU75 : 1;                                      // 0x0038(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bSkipAgentHeightCheckWhenPickingNavData : 1;               // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_NVCS[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ENavDataGatheringModeConfig>    DataGatheringMode;                                         // 0x003C(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NS8W[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bGenerateNavigationOnlyAroundNavigationInvokers : 1;       // 0x0040(0x0001) BIT_FIELD (Edit, Config, DisableEditOnInstance, NoDestructor, Protected)
	unsigned char                                      UnknownData_7JZK[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ActiveTilesUpdateInterval;                                 // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TArray<struct FNavDataConfig>                      SupportedAgents;                                           // 0x0048(0x0010) (Edit, ZeroConstructor, Config, Protected)
	float                                              DirtyAreasUpdateFreq;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_W639[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class ANavigationData*>                     NavDataSet;                                                // 0x0060(0x0010) (ZeroConstructor)
	TArray<class ANavigationData*>                     NavDataRegistrationQueue;                                  // 0x0070(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData_PAO3[0x60];                                    // 0x0080(0x0060) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnNavDataRegisteredEvent;                                  // 0x00E0(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    OnNavigationGenerationFinishedDelegate;                    // 0x00F0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_Z80P[0xCC];                                    // 0x0100(0x00CC) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EFNavigationSystemRunMode>      OperationMode;                                             // 0x01CC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CX8J[0x1F3];                                   // 0x01CD(0x01F3) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStringAssetReference                       InstancedNavMeshesDataAsset;                               // 0x03C0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected)
	class UInstancedNavMeshesDataAsset*                InstancedNavMeshesData;                                    // 0x03D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationSystem");
		return ptr;
	}



	void UnregisterNavigationInvoker(class AActor* Invoker);
	void STATIC_SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal);
	void STATIC_SimpleMoveToActor(class AController* Controller, class AActor* Goal);
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);
	void SetGeometryGatheringMode(TEnumAsByte<Engine_ENavDataGatheringModeConfig> NewMode);
	void ResetMaxSimultaneousTileGenerationJobsCount();
	void RegisterNavigationInvoker(class AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
	struct FVector STATIC_ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass, const struct FVector& QueryExtent);
	void OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume);
	bool STATIC_NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, struct FVector* HitLocation, class UClass* FilterClass, class AController* Querier);
	bool STATIC_IsNavigationBeingBuilt(class UObject* WorldContext);
	struct FVector STATIC_GetRandomReachablePointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_GetRandomPointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_GetRandomPointInNavigableRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector STATIC_GetRandomPoint(class UObject* WorldContext, class ANavigationData* NavData, class UClass* FilterClass);
	TEnumAsByte<Engine_ENavigationQueryResult> STATIC_GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, float* PathLength, class ANavigationData* NavData, class UClass* FilterClass);
	TEnumAsByte<Engine_ENavigationQueryResult> STATIC_GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, float* PathCost, class ANavigationData* NavData, class UClass* FilterClass);
	class UNavigationSystem* STATIC_GetNavigationSystem(class UObject* WorldContext);
	class ANavigationData* GetMainNavData();
	class UNavigationPath* STATIC_FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
	class UNavigationPath* STATIC_FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass);
	bool DoesMainNavDataHaveValidNavMesh();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSequenceBase
// 0x0028 (FullSize[0x0078] - InheritedSize[0x0050])
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                  // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference)
	float                                              SequenceLength;                                            // 0x0060(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	float                                              RateScale;                                                 // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawCurveTracks                             RawCurveData;                                              // 0x0068(0x0010)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSequenceBase");
		return ptr;
	}



	float GetPlayLength();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompositeBase
// 0x0000 (FullSize[0x0078] - InheritedSize[0x0078])
class UAnimCompositeBase : public UAnimSequenceBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompositeBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimStateMachineTypes
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimStateMachineTypes : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimStateMachineTypes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimMontage
// 0x0070 (FullSize[0x00E8] - InheritedSize[0x0078])
class UAnimMontage : public UAnimCompositeBase
{
public:
	float                                              BlendInTime;                                               // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BlendOutTime;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BlendOutTriggerTime;                                       // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U4DQ[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FCompositeSection>                   CompositeSections;                                         // 0x0088(0x0010) (ZeroConstructor, ContainsInstancedReference)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                            // 0x0098(0x0010) (ZeroConstructor)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                           // 0x00A8(0x0010) (ZeroConstructor, Deprecated)
	bool                                               bEnableRootMotionTranslation;                              // 0x00B8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bEnableRootMotionRotation;                                 // 0x00B9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x00BA(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CE6I[0x5];                                     // 0x00BB(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                                     // 0x00C0(0x0010) (ZeroConstructor)
	bool                                               bAnimBranchingPointNeedsSort;                              // 0x00D0(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_LFC0[0x7];                                     // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        BranchingPointStateNotifyIndices;                          // 0x00D8(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimMontage");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RVOAvoidanceInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class URVOAvoidanceInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RVOAvoidanceInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetworkPredictionInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNetworkPredictionInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetworkPredictionInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FloatingPawnMovement
// 0x0018 (FullSize[0x0178] - InheritedSize[0x0160])
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                  // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Acceleration;                                              // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Deceleration;                                              // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TurningBoost;                                              // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bPositionCorrected : 1;                                    // 0x0170(0x0001) BIT_FIELD (Transient, NoDestructor, Protected)
	unsigned char                                      UnknownData_LUQW[0x7];                                     // 0x0171(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FloatingPawnMovement");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpectatorPawnMovement
// 0x0008 (FullSize[0x0180] - InheritedSize[0x0178])
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                   // 0x0178(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_S1XT[0x7];                                     // 0x0179(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpectatorPawnMovement");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ProjectileMovementComponent
// 0x0068 (FullSize[0x0178] - InheritedSize[0x0110])
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                              // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxSpeed;                                                  // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRotationFollowsVelocity : 1;                              // 0x0118(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bShouldBounce : 1;                                         // 0x0118(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                          // 0x0118(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bForceSubStepping : 1;                                     // 0x0118(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsHomingProjectile : 1;                                   // 0x0118(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                           // 0x0118(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIsSliding : 1;                                            // 0x0118(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor)
	unsigned char                                      UnknownData_CIXI[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PreviousHitTime;                                           // 0x011C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     PreviousHitNormal;                                         // 0x0120(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor)
	float                                              ProjectileGravityScale;                                    // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Buoyancy;                                                  // 0x0130(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Bounciness;                                                // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Friction;                                                  // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              BounceVelocityStopSimulatingThreshold;                     // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                        // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                          // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                               // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                     // 0x0164(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper)
	float                                              MaxSimulationTimeStep;                                     // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxSimulationIterations;                                   // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U4UG[0x4];                                     // 0x0174(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ProjectileMovementComponent");
		return ptr;
	}



	void StopSimulating(const struct FHitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	struct FVector LimitVelocity(const struct FVector& NewVelocity);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RotatingMovementComponent
// 0x0020 (FullSize[0x0130] - InheritedSize[0x0110])
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                              // 0x0110(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     PivotTranslation;                                          // 0x011C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRotationInLocalSpace : 1;                                 // 0x0128(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_CD4N[0x7];                                     // 0x0129(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RotatingMovementComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationInvokerComponent
// 0x0008 (FullSize[0x00D0] - InheritedSize[0x00C8])
class UNavigationInvokerComponent : public UActorComponent
{
public:
	float                                              TileGenerationRadius;                                      // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              TileRemovalRadius;                                         // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationInvokerComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavRelevantComponent
// 0x0030 (FullSize[0x00F8] - InheritedSize[0x00C8])
class UNavRelevantComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData_JEQC[0x24];                                    // 0x00C8(0x0024) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bNavigationRelevant : 1;                                   // 0x00EC(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      bAttachToOwnersRoot : 1;                                   // 0x00EC(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_QYGN[0x3];                                     // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UObject*                                     CachedNavParent;                                           // 0x00F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavRelevantComponent");
		return ptr;
	}



	void SetNavigationRelevancy(bool bRelevant);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkCustomInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavLinkCustomInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkCustomInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkCustomComponent
// 0x0098 (FullSize[0x0190] - InheritedSize[0x00F8])
class UNavLinkCustomComponent : public UNavRelevantComponent
{
public:
	unsigned char                                      UnknownData_WK03[0x8];                                     // 0x00F8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           NavLinkUserId;                                             // 0x0100(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_P5IY[0x4];                                     // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      EnabledAreaClass;                                          // 0x0108(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      DisabledAreaClass;                                         // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                     LinkRelativeStart;                                         // 0x0118(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     LinkRelativeEnd;                                           // 0x0124(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	TEnumAsByte<Engine_ENavLinkDirection>              LinkDirection;                                             // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_TM9O[0x3];                                     // 0x0131(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bLinkEnabled : 1;                                          // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bNotifyWhenEnabled : 1;                                    // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bNotifyWhenDisabled : 1;                                   // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      bCreateBoxObstacle : 1;                                    // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor, Protected)
	unsigned char                                      UnknownData_0N7L[0x3];                                     // 0x0135(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ObstacleOffset;                                            // 0x0138(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	struct FVector                                     ObstacleExtent;                                            // 0x0144(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	class UClass*                                      ObstacleAreaClass;                                         // 0x0150(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash)
	float                                              BroadcastRadius;                                           // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	float                                              BroadcastInterval;                                         // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECollisionChannel>              BroadcastChannel;                                          // 0x0160(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_H45H[0x2F];                                    // 0x0161(0x002F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkCustomComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionIfShadowPass
// 0x0070 (FullSize[0x00E0] - InheritedSize[0x0070])
class UMaterialExpressionIfShadowPass : public UMaterialExpression
{
public:
	struct FExpressionInput                            Shadow;                                                    // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            NotShadow;                                                 // 0x00A8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionIfShadowPass");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLightmassReplace
// 0x0070 (FullSize[0x00E0] - InheritedSize[0x0070])
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                  // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Lightmass;                                                 // 0x00A8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLightVector
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLinearInterpolate
// 0x00B8 (FullSize[0x0128] - InheritedSize[0x0070])
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Alpha;                                                     // 0x00E0(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstAlpha;                                                // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_GRDM[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticSwitch
// 0x00B0 (FullSize[0x0120] - InheritedSize[0x0070])
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7PNP[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            A;                                                         // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00B0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Value;                                                     // 0x00E8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSubtract
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureBase
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                   // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMaterialSamplerType>           SamplerType;                                               // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_R8VF[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                             // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NSI5[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureObject
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSample
// 0x0128 (FullSize[0x01A8] - InheritedSize[0x0080])
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0080(0x0038) (ZeroConstructor)
	struct FExpressionInput                            TextureObject;                                             // 0x00B8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            MipValue;                                                  // 0x00F0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            CoordinatesDX;                                             // 0x0128(0x0038) (ZeroConstructor)
	struct FExpressionInput                            CoordinatesDY;                                             // 0x0160(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_ETextureMipValueMode>           MipValueMode;                                              // 0x0198(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESamplerSourceMode>             SamplerSource;                                             // 0x0199(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FUA5[0x2];                                     // 0x019A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           ConstCoordinate;                                           // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                ConstMipValue;                                             // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_YVMP[0x4];                                     // 0x01A4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (FullSize[0x01B0] - InheritedSize[0x01A8])
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x01A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bMipBiasOnLowResolution : 1;                               // 0x01A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_0H8B[0x7];                                     // 0x01A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavModifierComponent
// 0x0020 (FullSize[0x0118] - InheritedSize[0x00F8])
class UNavModifierComponent : public UNavRelevantComponent
{
public:
	class UClass*                                      AreaClass;                                                 // 0x00F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                     FailsafeExtent;                                            // 0x0100(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DNF3[0xC];                                     // 0x010C(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavModifierComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PawnNoiseEmitterComponent
// 0x0028 (FullSize[0x00F0] - InheritedSize[0x00C8])
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                  // 0x00C8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected)
	unsigned char                                      UnknownData_W5WZ[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     LastRemoteNoisePosition;                                   // 0x00CC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NoiseLifetime;                                             // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastRemoteNoiseVolume;                                     // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastRemoteNoiseTime;                                       // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastLocalNoiseVolume;                                      // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastLocalNoiseTime;                                        // 0x00E8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DPW5[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PawnNoiseEmitterComponent");
		return ptr;
	}



	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoxComponent
// 0x0010 (FullSize[0x05B8] - InheritedSize[0x05A8])
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                                     BoxExtent;                                                 // 0x05A8(0x000C) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_HUE6[0x4];                                     // 0x05B4(0x0004) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoxComponent");
		return ptr;
	}



	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SphereComponent
// 0x0008 (FullSize[0x05B0] - InheritedSize[0x05A8])
class USphereComponent : public UShapeComponent
{
public:
	unsigned char                                      UnknownData_5GU7[0x8];                                     // 0x05A8(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SphereComponent");
		return ptr;
	}



	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DrawSphereComponent
// 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
class UDrawSphereComponent : public USphereComponent
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EllipsoidComponent
// 0x0000 (FullSize[0x05B0] - InheritedSize[0x05B0])
class UEllipsoidComponent : public USphereComponent
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EllipsoidComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleLocationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00E0 (FullSize[0x0130] - InheritedSize[0x0050])
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                               // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Height;                                                    // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Angle;                                                     // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Thickness;                                                 // 0x00F8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveTriangle");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (FullSize[0x00B0] - InheritedSize[0x0050])
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationSkelVertSurfaceSource> SourceType;                                                // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_IPFM[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     UniversalOffset;                                           // 0x0054(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_P1MF[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SkelMeshActorParamName;                                    // 0x0064(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_XZAW[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               ValidAssociatedBones;                                      // 0x0070(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                                   // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ULXF[0x3];                                     // 0x0081(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     NormalToCompare;                                           // 0x0084(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              NormalCheckToleranceDegrees;                               // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NormalCheckTolerance;                                      // 0x0094(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int>                                        ValidMaterialIndices;                                      // 0x0098(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                   // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TYEP[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsConstraintTemplate
// 0x0218 (FullSize[0x0240] - InheritedSize[0x0028])
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FName                                       JointName;                                                 // 0x0028(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       ConstraintBone1;                                           // 0x0030(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       ConstraintBone2;                                           // 0x0038(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     Pos1;                                                      // 0x0040(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     PriAxis1;                                                  // 0x004C(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     SecAxis1;                                                  // 0x0058(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     Pos2;                                                      // 0x0064(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     PriAxis2;                                                  // 0x0070(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	struct FVector                                     SecAxis2;                                                  // 0x007C(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      bEnableProjection : 1;                                     // 0x0088(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_NDU4[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ProjectionLinearTolerance;                                 // 0x008C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ProjectionAngularTolerance;                                // 0x0090(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ELinearConstraintMotion>        LinearXMotion;                                             // 0x0094(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ELinearConstraintMotion>        LinearYMotion;                                             // 0x0095(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ELinearConstraintMotion>        LinearZMotion;                                             // 0x0096(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3CMD[0x1];                                     // 0x0097(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearLimitSize;                                           // 0x0098(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLinearLimitSoft : 1;                                      // 0x009C(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_731M[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearLimitStiffness;                                      // 0x00A0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LinearLimitDamping;                                        // 0x00A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLinearBreakable : 1;                                      // 0x00A8(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_GQ9I[0x3];                                     // 0x00A9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LinearBreakThreshold;                                      // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAngularConstraintMotion>       AngularSwing1Motion;                                       // 0x00B0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAngularConstraintMotion>       AngularSwing2Motion;                                       // 0x00B1(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAngularConstraintMotion>       AngularTwistMotion;                                        // 0x00B2(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_L35R[0x1];                                     // 0x00B3(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bSwingLimitSoft : 1;                                       // 0x00B4(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bTwistLimitSoft : 1;                                       // 0x00B4(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_W7R2[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Swing1LimitAngle;                                          // 0x00B8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Swing2LimitAngle;                                          // 0x00BC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TwistLimitAngle;                                           // 0x00C0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SwingLimitStiffness;                                       // 0x00C4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SwingLimitDamping;                                         // 0x00C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TwistLimitStiffness;                                       // 0x00CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TwistLimitDamping;                                         // 0x00D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAngularBreakable : 1;                                     // 0x00D4(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      UnknownData_SF4M[0x3];                                     // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AngularBreakThreshold;                                     // 0x00D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_76D1[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FConstraintInstance                         DefaultInstance;                                           // 0x00E0(0x0160) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsConstraintTemplate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsSerializer
// 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
class UPhysicsSerializer : public UObject
{
public:
	unsigned char                                      UnknownData_1EM6[0xA8];                                    // 0x0028(0x00A8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsSerializer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FFTWaterExtendedPlaneComponent
// 0x0328 (FullSize[0x08C0] - InheritedSize[0x0598])
class UFFTWaterExtendedPlaneComponent : public UBaseWaterComponent
{
public:
	struct FFFTWaterComponentParams                    WaterParams;                                               // 0x0598(0x0310)
	class UMaterial*                                   Material;                                                  // 0x08A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_MO4O[0x10];                                    // 0x08B0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FFTWaterExtendedPlaneComponent");
		return ptr;
	}



	void SetMurkyRegion(const struct FMurkyRegion& MurkyRegion);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BillboardComponent
// 0x0028 (FullSize[0x05B0] - InheritedSize[0x0588])
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                    // 0x0588(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIsScreenSizeScaled : 1;                                   // 0x0590(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_EOVJ[0x3];                                     // 0x0591(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ScreenSize;                                                // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              U;                                                         // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              UL;                                                        // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              V;                                                         // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VL;                                                        // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U1G1[0x8];                                     // 0x05A8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BillboardComponent");
		return ptr;
	}



	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UTexture2D* NewSprite);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BrushComponent
// 0x0028 (FullSize[0x05B0] - InheritedSize[0x0588])
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                     // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBodySetup*                                  BrushBodySetup;                                            // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     PrePivot;                                                  // 0x0598(0x000C) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_DNTX[0xC];                                     // 0x05A4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DrawFrustumComponent
// 0x0028 (FullSize[0x05B0] - InheritedSize[0x0588])
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_L7X3[0x4];                                     // 0x0588(0x0004) Fix Super Size
	float                                              FrustumAngle;                                              // 0x058C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FrustumAspectRatio;                                        // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FrustumStartDist;                                          // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FrustumEndDist;                                            // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CRRE[0x4];                                     // 0x059C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture*                                    Texture;                                                   // 0x05A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_KJTE[0x8];                                     // 0x05A8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LineBatchComponent
// 0x0038 (FullSize[0x05C0] - InheritedSize[0x0588])
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_LOW7[0x8];                                     // 0x0588(0x0008) Fix Super Size
	unsigned char                                      UnknownData_S53Y[0x30];                                    // 0x0590(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialBillboardComponent
// 0x0018 (FullSize[0x05A0] - InheritedSize[0x0588])
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>              Elements;                                                  // 0x0588(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData_BITS[0x8];                                     // 0x0598(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialBillboardComponent");
		return ptr;
	}



	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CollisionProfile
// 0x0120 (FullSize[0x0158] - InheritedSize[0x0038])
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                  // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                   // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FCustomProfile>                      EditProfiles;                                              // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         ProfileRedirects;                                          // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                 // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData_2A8W[0xD0];                                    // 0x0088(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CollisionProfile");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAppendVector
// 0x0070 (FullSize[0x00E0] - InheritedSize[0x0070])
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                             // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericFogColor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBlackBody
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                      // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionBlackBody");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBoneMatrix
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UMaterialExpressionBoneMatrix : public UMaterialExpression
{
public:
	int                                                ReferenceIndex;                                            // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       BoneName;                                                  // 0x0074(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bPosition;                                                 // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6VJB[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionBoneMatrix");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SCS_Node
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class USCS_Node : public UObject
{
public:
	class UActorComponent*                             ComponentTemplate;                                         // 0x0028(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       VariableName;                                              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       AttachToName;                                              // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       ParentComponentOrVariableName;                             // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       ParentComponentOwnerClassName;                             // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bIsParentComponentNative;                                  // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               ServerMigrationFlagSet;                                    // 0x0051(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XT66[0x6];                                     // 0x0052(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USCS_Node*>                           ChildNodes;                                                // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x0068(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       VariableGuid;                                              // 0x0078(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SCS_Node");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Selection
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData_XU9C[0x30];                                    // 0x0028(0x0030) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Selection");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SkeletalMeshSocket
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       BoneName;                                                  // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     RelativeLocation;                                          // 0x0038(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    RelativeRotation;                                          // 0x0044(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeScale;                                             // 0x0050(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bForceAlwaysAnimated;                                      // 0x005C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PW7F[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}



	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNode
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                                // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                            // 0x0038(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeParamCrossFade
// 0x0008 (FullSize[0x0050] - InheritedSize[0x0048])
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                 // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeParamCrossFade");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDoppler
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_S7T2[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDoppler");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeEnveloper
// 0x0138 (FullSize[0x0170] - InheritedSize[0x0038])
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LoopEnd;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DurationAfterLoop;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                LoopCount;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLoopIndefinitely : 1;                                     // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bLoop : 1;                                                 // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_A6GJ[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                         // 0x0050(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                          // 0x0058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeFloatCurve                          VolumeCurve;                                               // 0x0060(0x0080) (Edit)
	struct FRuntimeFloatCurve                          PitchCurve;                                                // 0x00E0(0x0080) (Edit)
	float                                              PitchMin;                                                  // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PitchMax;                                                  // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeMin;                                                 // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeMax;                                                 // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeEnveloper");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeGroupControl
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                                // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeGroupControl");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeLooping
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLoopIndefinitely : 1;                                     // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_9FT9[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeMature
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeMature : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeMixer
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0038(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeModulator
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PitchMax;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeMin;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeMax;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMesh
// 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData_3PSE[0x18];                                    // 0x0028(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MinLOD;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0Z7N[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  Materials;                                                 // 0x0048(0x0010) (ZeroConstructor)
	int                                                LightMapResolution;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                LightMapCoordinateIndex;                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UBodySetup*                                  BodySetup;                                                 // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int                                                LODForCollision;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseMaximumStreamingTexelRatio : 1;                        // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                      // 0x006C(0x0001) BIT_FIELD (Deprecated, NoDestructor)
	unsigned char                                      bHasNavigationData : 1;                                    // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_14NK[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StreamingDistanceMultiplier;                               // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              LpvBiasMultiplier;                                         // 0x0074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_P1L6[0x30];                                    // 0x0078(0x0030) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UStaticMeshSocket*>                   Sockets;                                                   // 0x00A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_VTMC[0x18];                                    // 0x00B8(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     PositiveBoundsExtension;                                   // 0x00D0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector                                     NegativeBoundsExtension;                                   // 0x00DC(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FBoxSphereBounds                            ExtendedBounds;                                            // 0x00E8(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_FD36[0x4];                                     // 0x0104(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             SourceMaterials;                                           // 0x0108(0x0010) (ZeroConstructor)
	int                                                UVsForStreaming;                                           // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                ElementToIgnoreForTexFactor;                               // 0x011C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TArray<class UAssetUserData*>                      AssetUserData;                                             // 0x0120(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected)
	class UNavCollision*                               NavCollision;                                              // 0x0130(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}



	int GetNumUVChannels(int LodLevel);
	int GetNumLODsBP();
	struct FBox GetBoundingBox();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MergedCollisionComponent
// 0x0028 (FullSize[0x05B0] - InheritedSize[0x0588])
class UMergedCollisionComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMergedCollisionComponentStaticMeshInstanceData> PerInstanceData;                                           // 0x0588(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData_AZZ5[0x18];                                    // 0x0598(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MergedCollisionComponent");
		return ptr;
	}



	class UStaticMesh* GetStaticMeshByInstanceBodyIndex(int InstanceBodyIndex);
	int GetOwningActorCrc32ByInstanceBodyIndex(int InstanceBodyIndex);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DestructibleComponent
// 0x00C0 (FullSize[0x0780] - InheritedSize[0x06C0])
class UDestructibleComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      bFractureEffectOverride : 1;                               // 0x06C0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_N8UT[0x7];                                     // 0x06C1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FFractureEffect>                     FractureEffects;                                           // 0x06C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	bool                                               bEnableHardSleeping;                                       // 0x06D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_00KX[0x3];                                     // 0x06D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LargeChunkThreshold;                                       // 0x06DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_H99Z[0x10];                                    // 0x06E0(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FScriptMulticastDelegate                    OnComponentFracture;                                       // 0x06F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_GV6T[0x80];                                    // 0x0700(0x0080) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleComponent");
		return ptr;
	}



	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* GetDestructibleMesh();
	void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PoseableMeshComponent
// 0x00D0 (FullSize[0x0790] - InheritedSize[0x06C0])
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData_R1JW[0xD0];                                    // 0x06C0(0x00D0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PoseableMeshComponent");
		return ptr;
	}



	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const struct FName& BoneName);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PoseableSkeletalMeshComponent
// 0x0010 (FullSize[0x09A0] - InheritedSize[0x0990])
class UPoseableSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData_6GVY[0x10];                                    // 0x0990(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PoseableSkeletalMeshComponent");
		return ptr;
	}



	void SwitchPoseMode(TEnumAsByte<Engine_EPoseableAnimMode> NewMode);
	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<Engine_EBoneSpaces> BoneSpace, bool bApplyRefPose);
	void SetBoneTransformByIndex(int BoneIndex, const struct FTransform& InTransform, TEnumAsByte<Engine_EBoneSpaces> BoneSpace, bool bApplyRefPose);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<Engine_EBoneSpaces> BoneSpace, bool bApplyRefPose);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FlatWaterMeshComponent
// 0x00A0 (FullSize[0x0690] - InheritedSize[0x05F0])
class UFlatWaterMeshComponent : public UStaticMeshComponent
{
public:
	int                                                RandomDropRate;                                            // 0x05F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RandomDropSize;                                            // 0x05F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RandomDropHeight;                                          // 0x05F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RestorationScale;                                          // 0x05FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ForceScale;                                                // 0x0600(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DampHeight;                                                // 0x0604(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NormalMapScale;                                            // 0x0608(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                TextureWidth;                                              // 0x060C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                TextureHeight;                                             // 0x0610(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_KCVB[0x4];                                     // 0x0614(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 ClippingHull;                                              // 0x0618(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxSimulationDistance;                                     // 0x0620(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InitialRandomHeight;                                       // 0x0624(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InitialRandomVelocity;                                     // 0x0628(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BV51[0x4];                                     // 0x062C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture*                                    Texture;                                                   // 0x0630(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                                    NormalTexture;                                             // 0x0638(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                      WaterMaskTexture;                                          // 0x0640(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VKO4[0x18];                                    // 0x0648(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UMaterialInterface*>                  OriginalMaterials;                                         // 0x0660(0x0010) (ZeroConstructor, Transient)
	TArray<struct FFlatWaterMeshTextureOverride>       TextureOverrides;                                          // 0x0670(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_OTBS[0x10];                                    // 0x0680(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FlatWaterMeshComponent");
		return ptr;
	}



	void UpdateBoundary(class AActor* BoundaryActor);
	void SetTexture(int MaterialIndex, const struct FName& Name, class UTexture* Texture);
	void SetScalarValue(int MaterialIndex, const struct FName& Name, float Value);
	void PlaceDrop(const struct FVector2D& Position, float Size, float Height);
	void CreateBoundaryMap(class AActor* BoundaryActor, float ZNearDistance, float ZFarDistance, int TextureSize);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedCoverageMeshComponent
// 0x0090 (FullSize[0x0680] - InheritedSize[0x05F0])
class UInstancedCoverageMeshComponent : public UStaticMeshComponent
{
public:
	TWeakObjectPtr<class UStaticMeshComponent>         CoveredMeshComponent;                                      // 0x05F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper)
	int                                                InstanceCount;                                             // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                InstancingRandomSeed;                                      // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InstancePositionExtrusion;                                 // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InstanceScale;                                             // 0x0604(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InstanceScaleVariance;                                     // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                                    InstanceRotation;                                          // 0x060C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    InstanceRotationVariance;                                  // 0x0618(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     InstanceAttractionDirection;                               // 0x0624(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InstanceAttractionIntensity;                               // 0x0630(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                InstanceBaseMeshPlacementLOD;                              // 0x0634(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FInstancedCoverageMeshLOD>           LODs;                                                      // 0x0638(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              CompleteCullingDistance;                                   // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               InstanceLODPreserveSilhouette;                             // 0x064C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E6CG[0x3];                                     // 0x064D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BackFaceCullingAngle;                                      // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ShadowBackFaceCullingAngle;                                // 0x0654(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxPlacementAttempts;                                      // 0x0658(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bEvenlySpaced;                                             // 0x065C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bVertexColourDensity;                                      // 0x065D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUpdatePlacement;                                          // 0x065E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7MWO[0x1];                                     // 0x065F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      RandomNumbers;                                             // 0x0660(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              BaseMeshSurfaceArea;                                       // 0x0670(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LZFW[0x4];                                     // 0x0674(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UStaticMesh*                                 CoveredMesh;                                               // 0x0678(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedCoverageMeshComponent");
		return ptr;
	}



	void SetBaseMeshComponent(class UStaticMeshComponent* BaseMeshComponent);
	class UStaticMeshComponent* BaseMeshComponent();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MergedStaticMeshComponent
// 0x0020 (FullSize[0x0610] - InheritedSize[0x05F0])
class UMergedStaticMeshComponent : public UStaticMeshComponent
{
public:
	bool                                               bDisplayMergedInEditor;                                    // 0x05F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NBOL[0x7];                                     // 0x05F1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<float>                                      LODScreenSizes;                                            // 0x05F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                LODForCollision;                                           // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bMergeVertexColours;                                       // 0x060C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_P5RI[0x3];                                     // 0x060D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MergedStaticMeshComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MobileInstancedStaticMeshComponent
// 0x0080 (FullSize[0x0670] - InheritedSize[0x05F0])
class UMobileInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	int                                                MaxInstances;                                              // 0x05F0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_JGK6[0xC];                                     // 0x05F4(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTransform>                          InstanceTransforms;                                        // 0x0600(0x0010) (ZeroConstructor)
	TArray<struct FMatrix>                             InstanceMatrices;                                          // 0x0610(0x0010) (ZeroConstructor)
	struct FBoxSphereBounds                            LocalBounds;                                               // 0x0620(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bBoundsBuilt;                                              // 0x063C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_PQR4[0x3];                                     // 0x063D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicsSerializer*                          PhysicsSerializer;                                         // 0x0640(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_SAOM[0x28];                                    // 0x0648(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MobileInstancedStaticMeshComponent");
		return ptr;
	}



	int AddInstance(const struct FTransform& Transform);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SplineMeshComponent
// 0x00A0 (FullSize[0x0690] - InheritedSize[0x05F0])
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData_HKDM[0x8];                                     // 0x05F0(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FSplineMeshParams                           SplineParams;                                              // 0x05F8(0x0058) (Edit)
	struct FVector                                     SplineUpDir;                                               // 0x0650(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                        // 0x065C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      bSmoothInterpRollScale : 1;                                // 0x065C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_XBAO[0x3];                                     // 0x065D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESplineMeshAxis>                ForwardAxis;                                               // 0x0660(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3D4F[0x3];                                     // 0x0661(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SplineBoundaryMin;                                         // 0x0664(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              SplineBoundaryMax;                                         // 0x0668(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NVQU[0x4];                                     // 0x066C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  BodySetup;                                                 // 0x0670(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                       CachedMeshBodySetupGuid;                                   // 0x0678(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bMeshDirty : 1;                                            // 0x0688(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_54V5[0x7];                                     // 0x0689(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SplineMeshComponent");
		return ptr;
	}



	void UpdateMesh();
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(TEnumAsByte<Engine_ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetSplineUpDir();
	TEnumAsByte<Engine_ESplineMeshAxis> GetForwardAxis();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ModelComponent
// 0x0048 (FullSize[0x05D0] - InheritedSize[0x0588])
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_22XF[0x8];                                     // 0x0588(0x0008) Fix Super Size
	unsigned char                                      UnknownData_6VO7[0x10];                                    // 0x0590(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBodySetup*                                  ModelBodySetup;                                            // 0x05A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ELLY[0x28];                                    // 0x05A8(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkRenderingComponent
// 0x0008 (FullSize[0x0590] - InheritedSize[0x0588])
class UNavLinkRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_REAA[0x8];                                     // 0x0588(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkRenderingComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavMeshRenderingComponent
// 0x0008 (FullSize[0x0590] - InheritedSize[0x0588])
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_4IDU[0x8];                                     // 0x0588(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavMeshRenderingComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavTestRenderingComponent
// 0x0008 (FullSize[0x0590] - InheritedSize[0x0588])
class UNavTestRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData_MRA7[0x8];                                     // 0x0588(0x0008) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavTestRenderingComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DialogueWave
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                               // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_B9L1[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                          // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueWave");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Distribution
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData_8T70[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Distribution");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloat
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_U2P0[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloat");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatConstant
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8RZ3[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatParameterBase
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                             // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinInput;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxInput;                                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinOutput;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxOutput;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamMode;                                                 // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_PD0X[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatParticleParameter
// 0x0000 (FullSize[0x0060] - InheritedSize[0x0060])
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextRenderComponent
// 0x0068 (FullSize[0x05F0] - InheritedSize[0x0588])
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	struct FText                                       Text;                                                      // 0x0588(0x0018) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData_S0WP[0x20];                                    // 0x0590(0x0020) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class UMaterialInterface*                          TextMaterial;                                              // 0x05C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFont*                                       Font;                                                      // 0x05C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EHorizTextAligment>             HorizontalAlignment;                                       // 0x05D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EVerticalTextAligment>          VerticalAlignment;                                         // 0x05D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5FH0[0x2];                                     // 0x05D2(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      TextRenderColor;                                           // 0x05D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              XScale;                                                    // 0x05D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              YScale;                                                    // 0x05DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WorldSize;                                                 // 0x05E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InvDefaultSize;                                            // 0x05E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              HorizSpacingAdjust;                                        // 0x05E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bAlwaysRenderAsText : 1;                                   // 0x05EC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_WD7N[0x3];                                     // 0x05ED(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextRenderComponent");
		return ptr;
	}



	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetText(const struct FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<Engine_EHorizTextAligment> Value);
	void SetFont(class UFont* Value);
	void K2_SetText(const struct FText& Value);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldComponent
// 0x0028 (FullSize[0x05B0] - InheritedSize[0x0588])
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                                VectorField;                                               // 0x0588(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Intensity;                                                 // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              Tightness;                                                 // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bPreviewVectorField : 1;                                   // 0x0598(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_XYGQ[0x17];                                    // 0x0599(0x0017) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldComponent");
		return ptr;
	}



	void SetIntensity(float NewIntensity);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RadialForceComponent
// 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
class URadialForceComponent : public USceneComponent
{
public:
	float                                              Radius;                                                    // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ERadialImpulseFalloff>          Falloff;                                                   // 0x02B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_D1OL[0x3];                                     // 0x02B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ImpulseStrength;                                           // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bImpulseVelChange : 1;                                     // 0x02BC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bIgnoreOwningActor : 1;                                    // 0x02BC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_076H[0x3];                                     // 0x02BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ForceStrength;                                             // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DestructibleDamage;                                        // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       ObjectTypesToAffect;                                       // 0x02C8(0x0010) (Edit, ZeroConstructor, Protected)
	unsigned char                                      UnknownData_VCKC[0x8];                                     // 0x02D8(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RadialForceComponent");
		return ptr;
	}



	void RemoveObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<Engine_EObjectTypeQuery> ObjectType);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReflectionCaptureComponent
// 0x0090 (FullSize[0x0340] - InheritedSize[0x02B0])
class UReflectionCaptureComponent : public USceneComponent
{
public:
	bool                                               bLockSettings;                                             // 0x02B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_EXQQ[0x3];                                     // 0x02B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Brightness;                                                // 0x02B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ShadowBrightness;                                          // 0x02B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LPVOcclusionBrightness;                                    // 0x02BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                                ReflectionTint;                                            // 0x02C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7078[0xC];                                     // 0x02D0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       StateId;                                                   // 0x02DC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_F1W9[0x54];                                    // 0x02EC(0x0054) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReflectionCaptureComponent");
		return ptr;
	}



	void UpdateReflectionCapture();
	void UpdateAllReflectionCaptures();
	void SetTint(const struct FLinearColor& Value);
	void SetShadowBrightness(float Value);
	void SetLPVOcclusionBrightness(float Value);
	void SetBrightness(float Value);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoxReflectionCaptureComponent
// 0x0020 (FullSize[0x0360] - InheritedSize[0x0340])
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              BoxTransitionDistance;                                     // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4AMO[0x4];                                     // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBoxComponent*                               PreviewInfluenceBox;                                       // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DTD7[0x8];                                     // 0x0358(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoxReflectionCaptureComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlaneReflectionCaptureComponent
// 0x0020 (FullSize[0x0360] - InheritedSize[0x0340])
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadiusScale;                                      // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_7RKU[0x4];                                     // 0x0344(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                               PreviewCaptureBox;                                         // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_V4B3[0x8];                                     // 0x0358(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlaneReflectionCaptureComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (FullSize[0x0350] - InheritedSize[0x0340])
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadius;                                           // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CaptureDistanceScale;                                      // 0x0344(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                    // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SphereReflectionCaptureComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureComponent
// 0x0068 (FullSize[0x0318] - InheritedSize[0x02B0])
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                          // 0x02B0(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper)
	bool                                               bCaptureEveryFrame;                                        // 0x02C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_NMI1[0x3];                                     // 0x02C1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxViewDistanceOverride;                                   // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                          // 0x02C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Interp)
	unsigned char                                      UnknownData_U6YM[0x40];                                    // 0x02D8(0x0040) Fix Super Size


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}



	void HideComponent(class UPrimitiveComponent* InComponent);
	void HideActorComponents(class AActor* InActor);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureComponent2D
// 0x0578 (FullSize[0x0890] - InheritedSize[0x0318])
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	unsigned char                                      UnknownData_6MCR[0x8];                                     // 0x0318(0x0008) Fix Super Size
	class UTextureRenderTarget2D*                      TextureTarget;                                             // 0x0320(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESceneCaptureSource>            CaptureSource;                                             // 0x0328(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_XOFW[0x7];                                     // 0x0329(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        PostProcessSettings;                                       // 0x0330(0x0540) (Edit, BlueprintVisible, Interp)
	float                                              PostProcessBlendWeight;                                    // 0x0870(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              OrthoWidth;                                                // 0x0874(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              OrthoNearClipPlane;                                        // 0x0878(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              OrthoFarClipPlane;                                         // 0x087C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECameraProjectionMode>          ProjectionMode;                                            // 0x0880(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DVJ1[0x3];                                     // 0x0881(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AspectRatio;                                               // 0x0884(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bConstrainAspectRatio : 1;                                 // 0x0888(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor)
	unsigned char                                      UnknownData_HQPO[0x3];                                     // 0x0889(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LandscapeLODOverride;                                      // 0x088C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureComponent2D");
		return ptr;
	}



	void UpdateContent();
	void AddOrUpdateBlendable(float InWeight);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SceneCaptureComponentCube
// 0x0008 (FullSize[0x0320] - InheritedSize[0x0318])
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                             // 0x0318(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SceneCaptureComponentCube");
		return ptr;
	}



	void UpdateContent();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SpringArmComponent
// 0x0090 (FullSize[0x0340] - InheritedSize[0x02B0])
class USpringArmComponent : public USceneComponent
{
public:
	float                                              TargetArmLength;                                           // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     SocketOffset;                                              // 0x02B4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     TargetOffset;                                              // 0x02C0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ProbeSize;                                                 // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECollisionChannel>              ProbeChannel;                                              // 0x02D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_47AW[0x3];                                     // 0x02D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bDoCollisionTest : 1;                                      // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUsePawnControlRotation : 1;                               // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInheritPitch : 1;                                         // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInheritYaw : 1;                                           // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bInheritRoll : 1;                                          // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableCameraLag : 1;                                      // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bEnableCameraRotationLag : 1;                              // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bUseCameraLagSubstepping : 1;                              // 0x02D4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                  // 0x02D5(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_U6OZ[0x2];                                     // 0x02D6(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              CameraLagSpeed;                                            // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CameraRotationLagSpeed;                                    // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CameraLagMaxTimeStep;                                      // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              CameraLagMaxDistance;                                      // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_6J0F[0x58];                                    // 0x02E8(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SpringArmComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WaterEmissionVolumeComponent
// 0x0030 (FullSize[0x02E0] - InheritedSize[0x02B0])
class UWaterEmissionVolumeComponent : public USceneComponent
{
public:
	float                                              Radius;                                                    // 0x02B0(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              GenerationDensity;                                         // 0x02B4(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8SFP[0x28];                                    // 0x02B8(0x0028) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WaterEmissionVolumeComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.WindDirectionalSourceComponent
// 0x0020 (FullSize[0x02D0] - InheritedSize[0x02B0])
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              Strength;                                                  // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              Speed;                                                     // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              MinGustAmount;                                             // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                              MaxGustAmount;                                             // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LOS8[0x10];                                    // 0x02C0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TimelineComponent
// 0x0098 (FullSize[0x0160] - InheritedSize[0x00C8])
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                               // 0x00C8(0x0098) (Net, RepNotify, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TimelineComponent");
		return ptr;
	}



	void Stop();
	void SetTimelineLengthMode(TEnumAsByte<Engine_ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AggregatableInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAggregatableInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AggregatableInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimComposite
// 0x0010 (FullSize[0x0088] - InheritedSize[0x0078])
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                            // 0x0078(0x0010)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimComposite");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSequence
// 0x00E0 (FullSize[0x0158] - InheritedSize[0x0078])
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                 // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ANYJ[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                                   // 0x0080(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_YMTA[0x10];                                    // 0x0090(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTranslationTrack>                   TranslationData;                                           // 0x00A0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FRotationTrack>                      RotationData;                                              // 0x00B0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FScaleTrack>                         ScaleData;                                                 // 0x00C0(0x0010) (ZeroConstructor, Transient)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    TranslationCompressionFormat;                              // 0x00D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    RotationCompressionFormat;                                 // 0x00D1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    ScaleCompressionFormat;                                    // 0x00D2(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3F7J[0x5];                                     // 0x00D3(0x0005) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        CompressedTrackOffsets;                                    // 0x00D8(0x0010) (ZeroConstructor)
	struct FCompressedOffsetData                       CompressedScaleOffsets;                                    // 0x00E8(0x0018)
	unsigned char                                      UnknownData_7OZO[0x10];                                    // 0x0100(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationKeyFormat>            KeyEncodingFormat;                                         // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_K6GQ[0x1F];                                    // 0x0111(0x001F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAdditiveAnimationType>         AdditiveAnimType;                                          // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAdditiveBasePoseType>          RefPoseType;                                               // 0x0131(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_OV0I[0x6];                                     // 0x0132(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAnimSequence*                               RefPoseSeq;                                                // 0x0138(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                RefFrameIndex;                                             // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                EncodingPkgVersion;                                        // 0x0144(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       RetargetSource;                                            // 0x0148(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	bool                                               bEnableRootMotion;                                         // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ERootMotionRootLock>            RootMotionRootLock;                                        // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bRootMotionSettingsCopiedFromMontage;                      // 0x0152(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XNZ2[0x5];                                     // 0x0153(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendSpaceBase
// 0x00B8 (FullSize[0x0108] - InheritedSize[0x0050])
class UBlendSpaceBase : public UAnimationAsset
{
public:
	struct FBlendParameter                             BlendParameters[0x3];                                      // 0x0050(0x0060) (Protected)
	struct FInterpolationParameter                     InterpolationParam[0x3];                                   // 0x00B0(0x0018) (Edit, Protected)
	float                                              TargetWeightInterpolationSpeedPerSec;                      // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	TEnumAsByte<Engine_ENotifyTriggerMode>             NotifyTriggerMode;                                         // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	bool                                               bRotationBlendInMeshSpace;                                 // 0x00CD(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JWTX[0x2];                                     // 0x00CE(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumOfDimension;                                            // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AnimLength;                                                // 0x00D4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                              // 0x00D8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBlendSample>                        SampleData;                                                // 0x00E8(0x0010) (ZeroConstructor)
	TArray<struct FEditorElement>                      GridSamples;                                               // 0x00F8(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendSpaceBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendSpace
// 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<Engine_EBlendSpaceAxis>                AxisToScaleAnimation;                                      // 0x0108(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_KK7S[0x7];                                     // 0x0109(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendSpace");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AimOffsetBlendSpace
// 0x0000 (FullSize[0x0110] - InheritedSize[0x0110])
class UAimOffsetBlendSpace : public UBlendSpace
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BlendSpace1D
// 0x0008 (FullSize[0x0110] - InheritedSize[0x0108])
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                           // 0x0108(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_22RC[0x7];                                     // 0x0109(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BlendSpace1D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (FullSize[0x0110] - InheritedSize[0x0110])
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace1D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UAnimCompress : public UObject
{
public:
	struct FString                                     Description;                                               // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst, HasGetValueTypeHash)
	unsigned char                                      bNeedsSkeleton : 1;                                        // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_WIUB[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    TranslationCompressionFormat;                              // 0x003C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    RotationCompressionFormat;                                 // 0x003D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EAnimationCompressionFormat>    ScaleCompressionFormat;                                    // 0x003E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BN9R[0x1];                                     // 0x003F(0x0001) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_Automatic
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UAnimCompress_Automatic : public UAnimCompress
{
public:
	float                                              MaxEndEffectorError;                                       // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bTryFixedBitwiseCompression : 1;                           // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTryPerTrackBitwiseCompression : 1;                        // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTryLinearKeyRemovalCompression : 1;                       // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTryIntervalKeyRemoval : 1;                                // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRunCurrentDefaultCompressor : 1;                          // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAutoReplaceIfExistingErrorTooGreat : 1;                   // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                              // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_945Y[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_Automatic");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_BitwiseCompressOnly");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UAnimCompress_LeastDestructive : public UAnimCompress
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_LeastDestructive");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (FullSize[0x0048] - InheritedSize[0x0040])
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                   // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bStartAtSecondKey : 1;                                     // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_9MGO[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveEverySecondKey");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (FullSize[0x0060] - InheritedSize[0x0040])
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxAngleDiff;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxScaleDiff;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxEffectorDiff;                                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MinEffectorDiff;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              EffectorDiffSocket;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ParentKeyScale;                                            // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRetarget : 1;                                             // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                             // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_OAKH[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveLinearKeys");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_PerTrackCompression
// 0x0080 (FullSize[0x00E0] - InheritedSize[0x0060])
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                       // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxPosDiffBitwise;                                         // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxAngleDiffBitwise;                                       // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxScaleDiffBitwise;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedRotationFormats;                                    // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedTranslationFormats;                                 // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<Engine_EAnimationCompressionFormat>> AllowedScaleFormats;                                       // 0x0090(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_MWAB[0x3];                                     // 0x00A1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResampledFramerate;                                        // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MinKeysForResampling;                                      // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseAdaptiveError : 1;                                     // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                           // 0x00AC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_H42A[0x3];                                     // 0x00AD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TrackHeightBias;                                           // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ParentingDivisor;                                          // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ParentingDivisorExponent;                                  // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseAdaptiveError2 : 1;                                    // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_0FQP[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RotationErrorSourceRatio;                                  // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TranslationErrorSourceRatio;                               // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ScaleErrorSourceRatio;                                     // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxErrorPerTrackRatio;                                     // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PerturbationProbeSize;                                     // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_D3QE[0xC];                                     // 0x00D4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_PerTrackCompression");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (FullSize[0x0050] - InheritedSize[0x0040])
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxAngleDiff;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxScaleDiff;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_OV31[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveTrivialKeys");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSingleNodeInstance
// 0x00E0 (FullSize[0x0520] - InheritedSize[0x0440])
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                             CurrentAsset;                                              // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVertexAnimation*                            CurrentVertexAnim;                                         // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     BlendSpaceInput;                                           // 0x0450(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_6BA2[0x4];                                     // 0x045C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FBlendSampleData>                    BlendSampleData;                                           // 0x0460(0x0010) (ZeroConstructor, Transient)
	struct FBlendFilter                                BlendFilter;                                               // 0x0470(0x0090) (Transient)
	float                                              CurrentTime;                                               // 0x0500(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PlayRate;                                                  // 0x0504(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                     // 0x0508(0x0010) (ZeroConstructor, Transient, InstancedReference, NoDestructor)
	unsigned char                                      bLooping : 1;                                              // 0x0518(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bPlaying : 1;                                              // 0x0518(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bReverse : 1;                                              // 0x0518(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_XVKM[0x7];                                     // 0x0519(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSingleNodeInstance");
		return ptr;
	}



	void StopAnim();
	void SetVertexAnimation(class UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate);
	void SetReverse(bool bInReverse);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const struct FVector& InBlendInput);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimMetaData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimMetaData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimMetaData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotify_ResetDynamics
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UAnimNotify_ResetDynamics : public UAnimNotify
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotify_ResetDynamics");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyCondition
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAnimNotifyCondition : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotifyCondition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimNotifyState_Trail
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                                // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       FirstSocketName;                                           // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       SecondSocketName;                                          // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETrailWidthMode>                WidthScaleMode;                                            // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_S9MX[0x3];                                     // 0x0041(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       WidthScaleCurve;                                           // 0x0044(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_IRA1[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimNotifyState_Trail");
		return ptr;
	}



	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimSet
// 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
class UAnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_WOPJ[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               TrackBoneNames;                                            // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                               // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                    // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                   // 0x0060(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                                   // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                             // 0x0080(0x0010) (Edit, ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                                       // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       BestRatioSkelMeshName;                                     // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NM1R[0x50];                                    // 0x00A0(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetImportData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAssetImportData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AssetImportData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AssetUserData
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UAssetUserData : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AssetUserData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AutomationTestSettings
// 0x02E0 (FullSize[0x0308] - InheritedSize[0x0028])
class UAutomationTestSettings : public UObject
{
public:
	struct FFilePath                                   AutomationTestmap;                                         // 0x0028(0x0010) (Edit, Config)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                 // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                        // 0x0048(0x0210) (Edit, Config)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                               // 0x0258(0x0030) (Edit, Config)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                               // 0x0288(0x0010) (Edit, Config)
	TArray<struct FString>                             EngineTestModules;                                         // 0x0298(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             EditorTestModules;                                         // 0x02A8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             TestLevelFolders;                                          // 0x02B8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOpenTestAsset>                      TestAssetsToOpen;                                          // 0x02C8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                             // 0x02D8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                               // 0x02E8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                          // 0x02F8(0x0010) (Edit, ZeroConstructor, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AutomationTestSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AutomationTestUserSettings
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UAutomationTestUserSettings : public UObject
{
public:
	bool                                               FilterTests;                                               // 0x0028(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_74Z8[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             IncludedTestsPrefix;                                       // 0x0030(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             ExcludedTestsPrefix;                                       // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               IncludeEpicTests;                                          // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7VQF[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AutomationTestUserSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatUniformCurve
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVector
// 0x0008 (FullSize[0x0038] - InheritedSize[0x0030])
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIsDirty : 1;                                              // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_6UN5[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorConstant
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLockAxes : 1;                                             // 0x0044(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_BXBX[0x3];                                     // 0x0045(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BJGK[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorParameterBase
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                             // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     MinInput;                                                  // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MaxInput;                                                  // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MinOutput;                                                 // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MaxOutput;                                                 // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EDistributionParamMode>         ParamModes[0x3];                                           // 0x0088(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_TYWS[0x5];                                     // 0x008B(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorParticleParameter
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorConstantCurve
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes : 1;                                             // 0x0050(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_UOYU[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_17ZD[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorUniform
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                       // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     Min;                                                       // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bLockAxes : 1;                                             // 0x0050(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_PG69[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes;                                                // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x0055(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseExtremes : 1;                                          // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_5JV6[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionVectorUniformCurve
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes1 : 1;                                            // 0x0050(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bLockAxes2 : 1;                                            // 0x0050(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_5UYO[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EDistributionVectorLockFlags>   LockedAxes[0x2];                                           // 0x0054(0x0002) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                          // 0x0056(0x0003) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_6B16[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseExtremes : 1;                                          // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6NMB[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DPICustomScalingRule
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDPICustomScalingRule : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DPICustomScalingRule");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DynamicBlueprintBinding
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UDynamicBlueprintBinding : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DynamicBlueprintBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AvoidanceManager
// 0x00A0 (FullSize[0x00C8] - InheritedSize[0x0028])
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData_2NDZ[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DefaultTimeToLive;                                         // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LockTimeAfterAvoid;                                        // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LockTimeAfterClean;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DeltaTimeToPredict;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ArtificialRadiusExpansion;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TestHeightDifference;                                      // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_7UYO[0x80];                                    // 0x0048(0x0080) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AvoidanceManager");
		return ptr;
	}



	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID);
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
	struct FVector GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BodySetup
// 0x02A0 (FullSize[0x02C8] - InheritedSize[0x0028])
class UBodySetup : public UObject
{
public:
	struct FKAggregateGeom                             AggGeom;                                                   // 0x0028(0x0048)
	struct FName                                       BoneName;                                                  // 0x0070(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EPhysicsType>                   PhysicsType;                                               // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_D1J3[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bCookComplexGeometryOnServer : 1;                          // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bConsiderForBounds : 1;                                    // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bMeshCollideAll : 1;                                       // 0x007C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bDoubleSidedGeometry : 1;                                  // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                         // 0x007C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSharedCookedData : 1;                                     // 0x007C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bGenerateMirroredCollision : 1;                            // 0x007C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_2XHC[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicalMaterial*                           PhysMaterial;                                              // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EBodyCollisionResponse>         CollisionReponse;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECollisionTraceFlag>            CollisionTraceFlag;                                        // 0x0089(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RUZH[0x6];                                     // 0x008A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBodyInstance                               DefaultInstance;                                           // 0x0090(0x0180) (Edit)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                     // 0x0210(0x0008) (Edit, AdvancedDisplay)
	struct FVector                                     BuildScale3D;                                              // 0x0218(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_HZ2F[0xA4];                                    // 0x0224(0x00A4) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BodySetup");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BodySetup2D
// 0x0030 (FullSize[0x02F8] - InheritedSize[0x02C8])
class UBodySetup2D : public UBodySetup
{
public:
	struct FAggregateGeometry2D                        AggGeom2D;                                                 // 0x02C8(0x0030)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BodySetup2D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BoneMaskFilter
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                                // 0x0028(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BoneMaskFilter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BookMark
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                                  // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    Rotation;                                                  // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FString>                             HiddenLevels;                                              // 0x0040(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCustom
// 0x0048 (FullSize[0x00B8] - InheritedSize[0x0070])
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                      // 0x0070(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECustomMaterialOutputType>      OutputType;                                                // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_J1SN[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Description;                                               // 0x0088(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FCustomInput>                        Inputs;                                                    // 0x0098(0x0010) (Edit, ZeroConstructor)
	struct FString                                     DeclarationCode;                                           // 0x00A8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                   // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QJB5[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAcceleration
// 0x0158 (FullSize[0x01B0] - InheritedSize[0x0058])
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                              // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      AdditionalAcceleration[0x5];                               // 0x0090(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bUseGroupAAccelerationForAllGroups : 1;                    // 0x01A8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x01A8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_JKFY[0x7];                                     // 0x01A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleAttractorBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorLine
// 0x0088 (FullSize[0x00D8] - InheritedSize[0x0050])
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                 // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     EndPoint1;                                                 // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRawDistributionFloat                       Range;                                                     // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00A0(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorParticle
// 0x0090 (FullSize[0x00E0] - InheritedSize[0x0050])
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionFloat                       Range;                                                     // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bStrengthByDistance : 1;                                   // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ZZMC[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       Strength;                                                  // 0x0098(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JA2H[0x3];                                     // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAttractorParticleSelectionMethod> SelectionMethod;                                           // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8MDN[0x3];                                     // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bRenewSource : 1;                                          // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritSourceVel : 1;                                     // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_MLYA[0x3];                                     // 0x00D9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LastSelIndex;                                              // 0x00DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorPoint
// 0x00B0 (FullSize[0x0100] - InheritedSize[0x0050])
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                  // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Range;                                                     // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      StrengthByDistance : 1;                                    // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAffectBaseVelocity : 1;                                   // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOverrideVelocity : 1;                                     // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseWorldSpacePosition : 1;                                // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_X : 1;                                            // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Y : 1;                                            // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Z : 1;                                            // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_X : 1;                                            // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Y : 1;                                            // 0x00F9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Z : 1;                                            // 0x00F9(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PNBI[0x6];                                     // 0x00FA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAttractorPointGravity
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                                  // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Radius;                                                    // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDistributionFloat*                          Strength;                                                  // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPointGravity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleBeamBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamModifier
// 0x00C0 (FullSize[0x0110] - InheritedSize[0x0050])
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeamModifierType>              ModifierType;                                              // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_J633[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        PositionOptions;                                           // 0x0054(0x0004) (Edit)
	struct FRawDistributionVector                      Position;                                                  // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FBeamModifierOptions                        TangentOptions;                                            // 0x0090(0x0004) (Edit)
	unsigned char                                      UnknownData_6UO5[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Tangent;                                                   // 0x0098(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAbsoluteTangent : 1;                                      // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_H89R[0x3];                                     // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FBeamModifierOptions                        StrengthOptions;                                           // 0x00D4(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                  // 0x00D8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0078 (FullSize[0x00C8] - InheritedSize[0x0050])
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                            // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Y : 1;                                            // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Positive_Z : 1;                                            // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_X : 1;                                            // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Y : 1;                                            // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Negative_Z : 1;                                            // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      SurfaceOnly : 1;                                           // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Velocity : 1;                                              // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_WTFD[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       VelocityScale;                                             // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      StartLocation;                                             // 0x0090(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationComputeShaderOutput
// 0x0008 (FullSize[0x00D0] - InheritedSize[0x00C8])
class UParticleModuleLocationComputeShaderOutput : public UParticleModuleLocationPrimitiveBase
{
public:
	class UParticleComputeShaderData*                  PositionData;                                              // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationComputeShaderOutput");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0280 (FullSize[0x0348] - InheritedSize[0x00C8])
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                        // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_HFKX[0x7];                                     // 0x00C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00D0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalStartRadiuses[0x4];                              // 0x0108(0x00E0) (Edit, ContainsInstancedReference)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                            // 0x01E8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_8IUU[0x3];                                     // 0x01E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   RadiusScale;                                               // 0x01EC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_D4TN[0x4];                                     // 0x01F4(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartHeight;                                               // 0x01F8(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      StartHeightUseGroupAForAll : 1;                            // 0x0230(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_HA2U[0x7];                                     // 0x0231(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       AdditionalStartHeights[0x4];                               // 0x0238(0x00E0) (Edit, ContainsInstancedReference)
	struct FVector2D                                   AngleRange;                                                // 0x0318(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   AdditionalAngleRanges[0x4];                                // 0x0320(0x0020) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      AngleRangeUseGroupAForAll : 1;                             // 0x0340(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QIN7[0x3];                                     // 0x0341(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ECylinderHeightAxis>            HeightAxis;                                                // 0x0344(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BMCY[0x3];                                     // 0x0345(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (FullSize[0x0368] - InheritedSize[0x0348])
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0348(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0150 (FullSize[0x0218] - InheritedSize[0x00C8])
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00C8(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalStartRadiuses[0x4];                              // 0x0100(0x00E0) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                            // 0x01E0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_C66P[0x3];                                     // 0x01E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector2D                                   PositiveXAngleRange;                                       // 0x01E4(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector2D                                   NegativeXAngleRange;                                       // 0x01EC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector2D                                   PositiveYAngleRange;                                       // 0x01F4(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector2D                                   NegativeYAngleRange;                                       // 0x01FC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector2D                                   PositiveZAngleRange;                                       // 0x0204(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector2D                                   NegativeZAngleRange;                                       // 0x020C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_E0WD[0x4];                                     // 0x0214(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (FullSize[0x0238] - InheritedSize[0x0218])
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0218(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveSphereGPU
// 0x02F0 (FullSize[0x03B8] - InheritedSize[0x00C8])
class UParticleModuleLocationPrimitiveSphereGPU : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                               // 0x00C8(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalStartRadius[0x4];                                // 0x0100(0x00E0) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bUseGroupAStartRadiusForAllGroups : 1;                     // 0x01E0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_I4UA[0x7];                                     // 0x01E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       AdditionalVelocityScales[0x4];                             // 0x01E8(0x00E0) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bUseGroupAVelocityScaleForAllGroups : 1;                   // 0x02C8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_ILVY[0x7];                                     // 0x02C9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      AdditionalStartLocations[0x4];                             // 0x02D0(0x00E0) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bUseGroupAStartLocationForAllGroups : 1;                   // 0x03B0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_7O21[0x7];                                     // 0x03B1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphereGPU");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationVelocityComputeShaderOutput
// 0x00F0 (FullSize[0x01B8] - InheritedSize[0x00C8])
class UParticleModuleLocationVelocityComputeShaderOutput : public UParticleModuleLocationPrimitiveBase
{
public:
	class UParticleComputeShaderData*                  PositionData;                                              // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionVector                      ComputedVelocityScale;                                     // 0x00D0(0x0038) (Edit, ContainsInstancedReference)
	float                                              SpeedCap;                                                  // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LYCO[0x4];                                     // 0x010C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      BaseVelocity;                                              // 0x0110(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      LocationOffset;                                            // 0x0148(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      LocationOffsetScaledDirection;                             // 0x0180(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationVelocityComputeShaderOutput");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BookMark2D
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                                    // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                                   Location;                                                  // 0x002C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E6YV[0x4];                                     // 0x0034(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BookMark2D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Breakpoint
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                              // 0x0028(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_0YIT[0x7];                                     // 0x0029(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UEdGraphNode*                                Node;                                                      // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bStepOnce : 1;                                             // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                       // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                              // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_T7PV[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Breakpoint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.BrushBuilder
// 0x0058 (FullSize[0x0080] - InheritedSize[0x0028])
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                            // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     ToolTip;                                                   // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	unsigned char                                      NotifyBadParams : 1;                                       // 0x0048(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_F8VO[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FVector>                             Vertices;                                                  // 0x0050(0x0010) (ZeroConstructor, Protected)
	TArray<struct FBuilderPoly>                        Polys;                                                     // 0x0060(0x0010) (ZeroConstructor, Protected)
	struct FName                                       Layer;                                                     // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      MergeCoplanars : 1;                                        // 0x0078(0x0001) BIT_FIELD (NoDestructor, Protected)
	unsigned char                                      UnknownData_8T54[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.BrushBuilder");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionComment
// 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                     // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SizeY;                                                     // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     Text;                                                      // 0x0078(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                                CommentColor;                                              // 0x0088(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionComponentMask
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	unsigned char                                      R : 1;                                                     // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      G : 1;                                                     // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      B : 1;                                                     // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      A : 1;                                                     // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_PQH9[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant
// 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EDKI[0x4];                                     // 0x0074(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              G;                                                         // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                  // 0x0070(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TouchInterface
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                                  // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              ActiveOpacity;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              InactiveOpacity;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TimeUntilDeactive;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TimeUntilReset;                                            // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ActivationDelay;                                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bPreventRecenter;                                          // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_0D98[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              StartupDelay;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DBHU[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TouchInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.UserDefinedEnum
// 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
class UUserDefinedEnum : public UEnum
{
public:
	TArray<struct FText>                               DisplayNames;                                              // 0x0058(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.UserDefinedEnum");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AnimDataEntryStruct
// 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
class UAnimDataEntryStruct : public UUserDefinedStruct
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AnimDataEntryStruct");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorField
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                    // 0x0028(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Intensity;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorField");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldAnimated
// 0x0040 (FullSize[0x0088] - InheritedSize[0x0048])
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                                   // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EVectorFieldConstructionOp>     ConstructionOp;                                            // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FU2X[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                VolumeSizeX;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                VolumeSizeY;                                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                VolumeSizeZ;                                               // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SubImagesX;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SubImagesY;                                                // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                FrameCount;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FramesPerSecond;                                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLoop : 1;                                                 // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_S3G3[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UVectorFieldStatic*                          NoiseField;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NoiseScale;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NoiseMax;                                                  // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldAnimated");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VectorFieldStatic
// 0x0088 (FullSize[0x00D0] - InheritedSize[0x0048])
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                     // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SizeY;                                                     // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SizeZ;                                                     // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VCN2[0x7C];                                    // 0x0054(0x007C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VectorFieldStatic");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VertexAnimBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UVertexAnimBase : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VertexAnimBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MorphTarget
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class UMorphTarget : public UVertexAnimBase
{
public:
	unsigned char                                      UnknownData_IXPM[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VertexAnimation
// 0x0018 (FullSize[0x0048] - InheritedSize[0x0030])
class UVertexAnimation : public UVertexAnimBase
{
public:
	int                                                NumAnimatedVerts;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EXGL[0x14];                                    // 0x0034(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VertexAnimation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VisualLoggerAutomationTests
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UVisualLoggerAutomationTests : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VisualLoggerAutomationTests");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ButtonStyleAsset
// 0x02A8 (FullSize[0x02D0] - InheritedSize[0x0028])
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                               // 0x0028(0x02A8) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ButtonStyleAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraAnim
// 0x0588 (FullSize[0x05B0] - InheritedSize[0x0028])
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                         // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AnimLength;                                                // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                        BoundingBox;                                               // 0x0034(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bRelativeToInitialTransform : 1;                           // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor)
	unsigned char                                      UnknownData_S9PJ[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BaseFOV;                                                   // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_IJ6Y[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPostProcessSettings                        BasePostProcessSettings;                                   // 0x0060(0x0540)
	float                                              BasePostProcessBlendWeight;                                // 0x05A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0SIP[0xC];                                     // 0x05A4(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraAnimInst
// 0x00F8 (FullSize[0x0120] - InheritedSize[0x0028])
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInterpGroupInst*                            InterpGroupInst;                                           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	unsigned char                                      UnknownData_04VV[0x1C];                                    // 0x0038(0x001C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              PlayRate;                                                  // 0x0054(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_L191[0x10];                                    // 0x0058(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpTrackMove*                            MoveTrack;                                                 // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInterpTrackInstMove*                        MoveInst;                                                  // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                                 BlendInCurve;                                              // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ECameraAnimPlaySpace>           PlaySpace;                                                 // 0x0080(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RK19[0x9F];                                    // 0x0081(0x009F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}



	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CameraModifier_CameraShake
// 0x0018 (FullSize[0x0060] - InheritedSize[0x0048])
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<class UCameraShake*>                        ActiveShakes;                                              // 0x0048(0x0010) (ZeroConstructor)
	float                                              SplitScreenShakeScale;                                     // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QJ7V[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Canvas
// 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                      // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OrgY;                                                      // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ClipX;                                                     // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ClipY;                                                     // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                      DrawColor;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCenterX : 1;                                              // 0x003C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bCenterY : 1;                                              // 0x003C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bNoSmooth : 1;                                             // 0x003C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_9X27[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SizeX;                                                     // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SizeY;                                                     // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_R6IQ[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPlane                                      ColorModulate;                                             // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                                  DefaultTexture;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                                  GradientTexture0;                                          // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UReporterGraph*                              ReporterGraph;                                             // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UWP3[0x78];                                    // 0x0078(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}



	struct FVector2D K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<Engine_EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
	void DrawTextures(TArray<struct FTextureRenderData> RenderDatas);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Channel
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_40B1[0x38];                                    // 0x0030(0x0038) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ActorChannel
// 0x01F8 (FullSize[0x0260] - InheritedSize[0x0068])
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                                     // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U4XZ[0xE8];                                    // 0x0070(0x00E8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             ObjectsRequiredForQueuedBunches;                           // 0x0158(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_KL1W[0xF8];                                    // 0x0168(0x00F8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ControlChannel
// 0x0018 (FullSize[0x0080] - InheritedSize[0x0068])
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_RO28[0x18];                                    // 0x0068(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.VoiceChannel
// 0x0028 (FullSize[0x0090] - InheritedSize[0x0068])
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData_MX9Y[0x18];                                    // 0x0068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                BandwidthPerSecondReservationInBytes;                      // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_C7TW[0x4];                                     // 0x0084(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SaturationCooloffPeriodInSeconds;                          // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_184L[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CheatManager
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                      DebugCameraControllerClass;                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5R6Z[0x40];                                    // 0x0038(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}



	void WidgetReflector();
	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TextureAtlasVisualizer();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void Slomo(float T);
	void SetWorldOrigin();
	void SetNavDrawDistance(float DrawDistance);
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void RebuildNavigation();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void FontAtlasVisualizer();
	void Fly();
	void FlushLog();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DestroyTarget();
	void DestroyPawns(class UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<Engine_ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityBase
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                         // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_3JA8[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocity
// 0x0190 (FullSize[0x01E8] - InheritedSize[0x0058])
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	unsigned char                                      bUseGroupAForAll : 1;                                      // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_0REL[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      StartVelocity;                                             // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      AdditionalStartVelocities[0x5];                            // 0x0098(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)
	struct FRawDistributionFloat                       StartVelocityRadial;                                       // 0x01B0(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (FullSize[0x0208] - InheritedSize[0x01E8])
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x01E8(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlatformInterfaceBase
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                              // 0x0028(0x0010) (ZeroConstructor, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CloudStorageBase
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                           // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                                // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_JLCX[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CloudStorageBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InGameAdManager
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                               // 0x0038(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_848M[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                    // 0x0040(0x0010) (ZeroConstructor, ContainsInstancedReference)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                         // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InGameAdManager");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MicroTransactionBase
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                         // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     LastError;                                                 // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     LastErrorSolution;                                         // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MicroTransactionBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TwitterIntegrationBase
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		return ptr;
	}



	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<Engine_ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);
	void Init();
	int GetNumAccounts();
	struct FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                               // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	int                                                ResponseCode;                                              // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                Tag;                                                       // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FString                                     StringResponse;                                            // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	TArray<unsigned char>                              BinaryResponse;                                            // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_UTU1[0x50];                                    // 0x0060(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		return ptr;
	}



	int GetNumHeaders();
	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LocalPlayer
// 0x01C8 (FullSize[0x0210] - InheritedSize[0x0048])
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData_UPI2[0x18];                                    // 0x0048(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UGameViewportClient*                         ViewportClient;                                            // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_N0ZA[0x40];                                    // 0x0068(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EAspectRatioAxisConstraint>     AspectRatioAxisConstraint;                                 // 0x00A8(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DQL0[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UClass*                                      PendingLevelPlayerControllerClass;                         // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	unsigned char                                      bSentSplitJoin : 1;                                        // 0x00B8(0x0001) BIT_FIELD (Edit, Transient, EditConst, NoDestructor)
	unsigned char                                      UnknownData_0KXU[0x3];                                     // 0x00B9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinimumAspectRatio;                                        // 0x00BC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_PZ8Y[0x150];                                   // 0x00C0(0x0150) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ChildConnection
// 0x0008 (FullSize[0x34590] - InheritedSize[0x34588])
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                    // 0x34588(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DemoNetConnection
// 0x0010 (FullSize[0x34598] - InheritedSize[0x34588])
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData_YQHU[0x10];                                    // 0x34588(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DemoNetConnection");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Polys
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData_GW6W[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReporterBase
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData_SQCF[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReporterBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReporterGraph
// 0x0078 (FullSize[0x00A8] - InheritedSize[0x0030])
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData_1PJQ[0x78];                                    // 0x0030(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReporterGraph");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ReverbEffect
// 0x0030 (FullSize[0x0058] - InheritedSize[0x0028])
class UReverbEffect : public UObject
{
public:
	float                                              Density;                                                   // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Diffusion;                                                 // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Gain;                                                      // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              GainHF;                                                    // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DecayTime;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DecayHFRatio;                                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ReflectionsGain;                                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ReflectionsDelay;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LateGain;                                                  // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LateDelay;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AirAbsorptionGainHF;                                       // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RoomRolloffFactor;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ReverbEffect");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Rig
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class URig : public UObject
{
public:
	TArray<struct FTransformBase>                      TransformBases;                                            // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FNode>                               Nodes;                                                     // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Rig");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SaveGame
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class USaveGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SaveGame");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SimpleConstructionScript
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                 // 0x0028(0x0010) (ZeroConstructor)
	class USCS_Node*                                   DefaultSceneRootNode;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SimpleConstructionScript");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CheckBoxStyleAsset
// 0x05F0 (FullSize[0x0618] - InheritedSize[0x0028])
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                             // 0x0028(0x05F0) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CheckBoxStyleAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PluginCommandlet
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData_TOCS[0x20];                                    // 0x0080(0x0020) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PluginCommandlet");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SmokeTestCommandlet
// 0x0000 (FullSize[0x0080] - InheritedSize[0x0080])
class USmokeTestCommandlet : public UCommandlet
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Console
// 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData_5IMH[0x10];                                    // 0x0028(0x0010) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULocalPlayer*                                ConsoleTargetPlayer;                                       // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                                  DefaultTexture_Black;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                                  DefaultTexture_White;                                      // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1MZX[0x18];                                    // 0x0050(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             HistoryBuffer;                                             // 0x0068(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_KB7M[0x78];                                    // 0x0078(0x0078) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                  // 0x0070(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	float                                              Bias;                                                      // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Scale;                                                     // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCosine
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	float                                              Period;                                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_O131[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLowResClouds
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionLowResClouds : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLowResClouds");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLumaAvg
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionLumaAvg : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLumaAvg");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationPrimitiveSphereSlice
// 0x01B8 (FullSize[0x0208] - InheritedSize[0x0050])
class UParticleModuleLocationPrimitiveSphereSlice : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                               // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalStartRadiuses[0x4];                              // 0x0088(0x00E0) (Edit, ContainsInstancedReference)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                            // 0x0168(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_FHB4[0x3];                                     // 0x0169(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FPrimitiveSphereEmitterAngleRanges          AngleRanges[0x2];                                          // 0x016C(0x0020) (Edit)
	float                                              FirstSliceDistributionWeight;                              // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      SurfaceOnly : 1;                                           // 0x0190(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      Velocity : 1;                                              // 0x0190(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_CVVB[0x7];                                     // 0x0191(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       VelocityScale;                                             // 0x0198(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      StartLocation;                                             // 0x01D0(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphereSlice");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveLinearColor
// 0x01E0 (FullSize[0x0210] - InheritedSize[0x0030])
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                          // 0x0030(0x01E0)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveLinearColor");
		return ptr;
	}



	struct FLinearColor GetLinearColorValue(float InTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TimelineTemplate
// 0x0070 (FullSize[0x0098] - InheritedSize[0x0028])
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                            // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETimelineLengthMode>            LengthMode;                                                // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HRVY[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bAutoPlay : 1;                                             // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bLoop : 1;                                                 // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bReplicated : 1;                                           // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor)
	unsigned char                                      bValidatedAsWired : 1;                                     // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_RCFZ[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FTTEventTrack>                       EventTracks;                                               // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                               // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                              // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                         // 0x0068(0x0010) (ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                             // 0x0078(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                              // 0x0088(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TimelineTemplate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveVector
// 0x0168 (FullSize[0x0198] - InheritedSize[0x0030])
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                          // 0x0030(0x0168)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveVector");
		return ptr;
	}



	struct FVector GetVectorValue(float InTime);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveEdPresetCurve
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UCurveEdPresetCurve : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CurveTable
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData_RQFD[0x50];                                    // 0x0028(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CurveTable");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CustomWidgetDrawerInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UCustomWidgetDrawerInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CustomWidgetDrawerInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0028 (FullSize[0x0098] - InheritedSize[0x0070])
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                                          // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFunctionExpressionInput>            FunctionInputs;                                            // 0x0078(0x0010) (ZeroConstructor)
	TArray<struct FFunctionExpressionOutput>           FunctionOutputs;                                           // 0x0088(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMax
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMax");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMin
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMin");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMultiply
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionNoise
// 0x0090 (FullSize[0x0100] - InheritedSize[0x0070])
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                  // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            FilterWidth;                                               // 0x00A8(0x0038) (ZeroConstructor)
	float                                              Scale;                                                     // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                Quality;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ENoiseFunction>                 NoiseFunction;                                             // 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FDXP[0x3];                                     // 0x00E9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bTurbulence : 1;                                           // 0x00EC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_2XZ4[0x3];                                     // 0x00ED(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Levels;                                                    // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OutputMin;                                                 // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OutputMax;                                                 // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LevelScale;                                                // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionNoise");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AudioSettings
// 0x0048 (FullSize[0x0080] - InheritedSize[0x0038])
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FStringAssetReference                       DefaultSoundClassName;                                     // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       DefaultBaseSoundMix;                                       // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       VoiPSoundClass;                                            // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	float                                              LowPassFilterResonance;                                    // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                MaximumConcurrentStreams;                                  // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAudioQualitySettings>               QualityLevels;                                             // 0x0070(0x0010) (Edit, ZeroConstructor, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AudioSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.AutomaticInstancingSettings
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UAutomaticInstancingSettings : public UDeveloperSettings
{
public:
	bool                                               IsEnabled;                                                 // 0x0038(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_QTH3[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.AutomaticInstancingSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.UserInterfaceSettings
// 0x0120 (FullSize[0x0158] - InheritedSize[0x0038])
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	TEnumAsByte<Engine_ERenderFocusRule>               RenderFocusRule;                                           // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3TNE[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStringClassReference                       DefaultCursor;                                             // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringClassReference                       TextEditBeamCursor;                                        // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringClassReference                       CrosshairsCursor;                                          // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringClassReference                       GrabHandCursor;                                            // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringClassReference                       GrabHandClosedCursor;                                      // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringClassReference                       SlashedCircleCursor;                                       // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	float                                              ApplicationScale;                                          // 0x00A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EUIScalingRule>                 UIScaleRule;                                               // 0x00A4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_40GF[0x3];                                     // 0x00A5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStringClassReference                       CustomScalingRuleClass;                                    // 0x00A8(0x0010) (Edit, ZeroConstructor, Config)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                              // 0x00B8(0x0080) (Edit, Config)
	TArray<class UObject*>                             CursorClasses;                                             // 0x0138(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      CustomScalingRuleClassInstance;                            // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDPICustomScalingRule*                       CustomScalingRule;                                         // 0x0150(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.UserInterfaceSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StreamingSettings
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                             // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                               // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected)
	unsigned char                                      UnknownData_6DP8[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TimeLimitExceededMultiplier;                               // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)
	float                                              TimeLimitExceededMinTime;                                  // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)
	int                                                MinBulkDataSizeForAsyncLoading;                            // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)
	float                                              AsyncIOBandwidthLimit;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                           // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                          // 0x004C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected)
	unsigned char                                      UnknownData_QMRQ[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AsyncLoadingTimeLimit;                                     // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)
	float                                              PriorityAsyncLoadingExtraTime;                             // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)
	float                                              LevelStreamingActorsUpdateTimeLimit;                       // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)
	int                                                LevelStreamingComponentsRegistrationGranularity;           // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StreamingSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.GarbageCollectionSettings
// 0x0020 (FullSize[0x0058] - InheritedSize[0x0038])
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                      // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      FlushStreamingOnGC : 1;                                    // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      AllowParallelGC : 1;                                       // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      CreateGCClusters : 1;                                      // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      MergeGCClusters : 1;                                       // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected)
	unsigned char                                      UnknownData_OX1L[0x3];                                     // 0x003D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                NumRetriesBeforeForcingGC;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                MaxObjectsNotConsideredByGC;                               // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                SizeOfPermanentObjectPool;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                MaxObjectsInGame;                                          // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	int                                                MaxObjectsInEditor;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_6KUR[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.GarbageCollectionSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetworkClusteringSettings
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UNetworkClusteringSettings : public UDeveloperSettings
{
public:
	float                                              DynamicActorGridHalfSizeKm;                                // 0x0038(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DynamicActorGridCellSizeKm;                                // 0x003C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetworkClusteringSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetworkSettings
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                           // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_A28W[0x7];                                     // 0x0039(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetworkSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsSettings
// 0x0090 (FullSize[0x00C8] - InheritedSize[0x0038])
class UPhysicsSettings : public UDeveloperSettings
{
public:
	float                                              DefaultGravityZ;                                           // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DefaultTerminalVelocity;                                   // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DefaultFluidFriction;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SimulateScratchMemorySize;                                 // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                RagdollAggregateThreshold;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TriangleMeshTriangleMinAreaThreshold;                      // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                               bEnableAsyncScene;                                         // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bEnableShapeSharing;                                       // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bEnablePCM;                                                // 0x0052(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bWarnMissingLocks;                                         // 0x0053(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                               bEnable2DPhysics;                                          // 0x0054(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_ESettingsLockedAxis>            LockedAxis;                                                // 0x0055(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESettingsDOF>                   DefaultDegreesOfFreedom;                                   // 0x0056(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UQCQ[0x1];                                     // 0x0057(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BounceThresholdVelocity;                                   // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EFrictionCombineMode>           FrictionCombineMode;                                       // 0x005C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EFrictionCombineMode>           RestitutionCombineMode;                                    // 0x005D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BHMH[0x2];                                     // 0x005E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxAngularVelocity;                                        // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxDepenetrationVelocity;                                  // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bSimulateSkeletalMeshOnDedicatedServer;                    // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bDefaultHasComplexCollision;                               // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5BYD[0x2];                                     // 0x006A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxPhysicsDeltaTime;                                       // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bSubstepping;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bSubsteppingAsync;                                         // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XDN3[0x2];                                     // 0x0072(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxSubstepDeltaTime;                                       // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxSubsteps;                                               // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SyncSceneSmoothingFactor;                                  // 0x007C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              AsyncSceneSmoothingFactor;                                 // 0x0080(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              InitialAverageFrameRate;                                   // 0x0084(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                          // 0x0088(0x0010) (ZeroConstructor, Config)
	TArray<struct FDominanceGroupPair>                 DominanceGroups;                                           // 0x0098(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FDominanceGroupName>                 DominanceGroupNames;                                       // 0x00A8(0x0010) (ZeroConstructor, Config)
	TEnumAsByte<Engine_EDominanceGroup>                DefaultStaticDominanceGroup;                               // 0x00B8(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EDominanceGroup>                DefaultMovableDominanceGroup;                              // 0x00B9(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bEnableMBP;                                                // 0x00BA(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_VQ4S[0x1];                                     // 0x00BB(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MBPSubdivisions;                                           // 0x00BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MBPWorldHalfExtentInCM;                                    // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8OGL[0x4];                                     // 0x00C4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DialogueVoice
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<Engine_EGrammaticalGender>             Gender;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	TEnumAsByte<Engine_EGrammaticalNumber>             Plurality;                                                 // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      UnknownData_YROA[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       LocalizationGUID;                                          // 0x002C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_E0DQ[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueVoice");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCausticTexture
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionCausticTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCausticTexture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCausticTextureCoordinate
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionCausticTextureCoordinate : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCausticTextureCoordinate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatConstantCurve
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                             // 0x0038(0x0018) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DistributionFloatUniform
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Max;                                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Min;                                                       // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventGeneratorGPU
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleEventGeneratorGPU : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEventGPU_GenerateInfo>      Events;                                                    // 0x0050(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventGeneratorGPU");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<Engine_EParticleEventType>             EventGeneratorType;                                        // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_52H6[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       EventName;                                                 // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1DDG[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (FullSize[0x0068] - InheritedSize[0x0060])
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                         // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JNRL[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DestructibleMesh
// 0x0098 (FullSize[0x02D0] - InheritedSize[0x0238])
class UDestructibleMesh : public USkeletalMesh
{
public:
	struct FDestructibleParameters                     DefaultDestructibleParameters;                             // 0x0238(0x0088) (Edit)
	TArray<struct FFractureEffect>                     FractureEffects;                                           // 0x02C0(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DestructibleMesh");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SlateBrushAsset
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 Brush;                                                     // 0x0028(0x0090) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SlateBrushAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundBase
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class USoundBase : public UObject
{
public:
	class USoundClass*                                 SoundClassObject;                                          // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      bDebug : 1;                                                // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TI8E[0x3];                                     // 0x0031(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMaxConcurrentResolutionRule>   MaxConcurrentResolutionRule;                               // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5BHS[0x3];                                     // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxConcurrentPlayCount;                                    // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Duration;                                                  // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_P7MG[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DialogueSoundWaveProxy
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData_W0BM[0x18];                                    // 0x0050(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DialogueSoundWaveProxy");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ComponentDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ComponentDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputDelegateBinding
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputActionDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                               // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputActionDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputAxisDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputAxisDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                              // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputAxisKeyDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputVectorAxisDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputKeyDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                  // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputKeyDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSourceMovement
// 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                       // 0x0050(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleMaterialBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                             // 0x0050(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrbitBase
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_YH7B[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrbit
// 0x00C8 (FullSize[0x0120] - InheritedSize[0x0058])
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<Engine_EOrbitChainMode>                ChainMode;                                                 // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3ZOD[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      OffsetAmount;                                              // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	struct FOrbitOptions                               OffsetOptions;                                             // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData_NIXF[0x4];                                     // 0x009C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationAmount;                                            // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	struct FOrbitOptions                               RotationOptions;                                           // 0x00D8(0x0004) (Edit)
	unsigned char                                      UnknownData_2CNT[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      RotationRateAmount;                                        // 0x00E0(0x0038) (Edit, ContainsInstancedReference)
	struct FOrbitOptions                               RotationRateOptions;                                       // 0x0118(0x0004) (Edit)
	unsigned char                                      UnknownData_6VC1[0x4];                                     // 0x011C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleOrientationBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<Engine_EParticleAxisLock>              LockAxisFlags;                                             // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QR4N[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParameterBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleParameterBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputTouchDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputTouchDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InstancedActorDelegateBinding
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInstancedActorDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintInstancedActorDelegateBinding> ActorDelegateBindings;                                     // 0x0028(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InstancedActorDelegateBinding");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraph
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<class UEdGraphNode*>                        Nodes;                                                     // 0x0030(0x0010) (ZeroConstructor)
	unsigned char                                      bEditable : 1;                                             // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowDeletion : 1;                                        // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bAllowRenaming : 1;                                        // 0x0040(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_CZLT[0x1F];                                    // 0x0041(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraph");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphNode_Documentation
// 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                                      // 0x0090(0x0010) (ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     Excerpt;                                                   // 0x00A0(0x0010) (ZeroConstructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphNode_Documentation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EdGraphSchema
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UEdGraphSchema : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EdGraphSchema");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ImportantToggleSettingInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UImportantToggleSettingInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ImportantToggleSettingInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.EndUserSettings
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UEndUserSettings : public UObject
{
public:
	unsigned char                                      UnknownData_8YCS[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	bool                                               bSendAnonymousUsageDataToEpic;                             // 0x0030(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_XQB0[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.EndUserSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ExecutableAnimMetaDataInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UExecutableAnimMetaDataInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ExecutableAnimMetaDataInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Exporter
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                     ExportRootScope;                                           // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FString>                             FormatExtension;                                           // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FString>                             FormatDescription;                                         // 0x0048(0x0010) (ZeroConstructor)
	int                                                PreferredFormatIndex;                                      // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                TextIndent;                                                // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bText : 1;                                                 // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bSelectedOnly : 1;                                         // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bForceFileOperations : 1;                                  // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_XW42[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Exporter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RareNetworkProfilerExporter
// 0x0000 (FullSize[0x0068] - InheritedSize[0x0068])
class URareNetworkProfilerExporter : public UExporter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RareNetworkProfilerExporter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FFTWaterSettings
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UFFTWaterSettings : public UObject
{
public:
	struct FStringAssetReference                       FFTWaterMaterialName;                                      // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
	struct FStringAssetReference                       FFTWaterFoamTextureName;                                   // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	int                                                BaseMeshDetail;                                            // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UEO5[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FFTWaterSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.FontImportOptions
// 0x00B0 (FullSize[0x00D8] - InheritedSize[0x0028])
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                      // 0x0028(0x00B0) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParameter
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                             // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                       ExpressionGUID;                                            // 0x0078(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       Group;                                                     // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                          // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NVRL[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0070 (FullSize[0x0108] - InheritedSize[0x0098])
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                         // 0x0098(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00D0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0040 (FullSize[0x00D0] - InheritedSize[0x0090])
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0090(0x0038) (ZeroConstructor)
	unsigned char                                      DefaultR : 1;                                              // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      DefaultG : 1;                                              // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      DefaultB : 1;                                              // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      DefaultA : 1;                                              // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LNVE[0x7];                                     // 0x00C9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVectorParameter
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                              // 0x0090(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bUseCustomPrimitiveData;                                   // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      PrimitiveDataIndex;                                        // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_E94D[0x6];                                     // 0x00A2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleColor
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleColor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleDirection");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMotionBlurFade");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticlePositionWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRadius");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRelativeTime");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleSize
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSize");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSpeed");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceFadeAmount");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelNormalWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPower
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                      // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Exponent;                                                  // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstExponent;                                             // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ONG1[0x4];                                     // 0x00E4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPrecomputedAOMask");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionQualitySwitch
// 0x00E0 (FullSize[0x0150] - InheritedSize[0x0070])
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Inputs[0x3];                                               // 0x00A8(0x00A8) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                         // 0x0070(0x0038) (ZeroConstructor)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                           // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_IUYB[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVectorWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x00E8 (FullSize[0x0158] - InheritedSize[0x0070])
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                    // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            RotationAngle;                                             // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            PivotPoint;                                                // 0x00E0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Position;                                                  // 0x0118(0x0038) (ZeroConstructor)
	float                                              Period;                                                    // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ULKC[0x4];                                     // 0x0154(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionRotator
// 0x0080 (FullSize[0x00F0] - InheritedSize[0x0070])
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Time;                                                      // 0x00A8(0x0038) (ZeroConstructor)
	float                                              CenterX;                                                   // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CenterY;                                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Speed;                                                     // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint32_t                                           ConstCoordinate;                                           // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Font
// 0x01B0 (FullSize[0x01D8] - InheritedSize[0x0028])
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData_VU86[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EFontCacheType>                 FontCacheType;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HQNA[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FFontCharacter>                      Characters;                                                // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<class UTexture2D*>                          Textures;                                                  // 0x0048(0x0010) (ZeroConstructor)
	int                                                IsRemapped;                                                // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              EmScale;                                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Ascent;                                                    // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Descent;                                                   // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Leading;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                Kerning;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFontImportOptionsData                      ImportOptions;                                             // 0x0070(0x00B0) (Edit)
	int                                                NumCharacters;                                             // 0x0120(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RNG8[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        MaxCharHeight;                                             // 0x0128(0x0010) (ZeroConstructor, Transient)
	float                                              ScalingFactor;                                             // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                LegacyFontSize;                                            // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       LegacyFontName;                                            // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCompositeFont                              CompositeFont;                                             // 0x0148(0x0028)
	unsigned char                                      UnknownData_IBWA[0x68];                                    // 0x0170(0x0068) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInst
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInst : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstProperty
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UProperty*                                   InterpProperty;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                     PropertyOuterObjectInst;                                   // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstColorProp
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_653F[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FColor                                      ResetColor;                                                // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_WLTM[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatProp
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_W0RD[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ResetFloat;                                                // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZV4P[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HapticFeedbackEffect
// 0x0100 (FullSize[0x0128] - InheritedSize[0x0028])
class UHapticFeedbackEffect : public UObject
{
public:
	struct FHapticFeedbackDetails                      HapticDetails;                                             // 0x0028(0x0100) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HighLatencySettings
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UHighLatencySettings : public UObject
{
public:
	bool                                               UseHighLatency;                                            // 0x0028(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_IHOZ[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PktLag;                                                    // 0x002C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                PktLagVariance;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               PktOrder;                                                  // 0x0034(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_YDSY[0x3];                                     // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PktDup;                                                    // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                PktLoss;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HighLatencySettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCeil
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionClamp
// 0x00B8 (FullSize[0x0128] - InheritedSize[0x0070])
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Min;                                                       // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Max;                                                       // 0x00E0(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_EClampMode>                     ClampMode;                                                 // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BTEW[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MinDefault;                                                // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxDefault;                                                // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HHCP[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionNormalize
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                               // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectBounds");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectPositionWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamNoise
// 0x0158 (FullSize[0x01A8] - InheritedSize[0x0050])
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                      // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TJ73[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                Frequency;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                Frequency_LowRange;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VHE4[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseRange;                                                // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       NoiseRangeScale;                                           // 0x0098(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bNRScaleEmitterTime : 1;                                   // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_8G9B[0x7];                                     // 0x00D1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      NoiseSpeed;                                                // 0x00D8(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bSmooth : 1;                                               // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Q3ZF[0x3];                                     // 0x0111(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockRadius;                                           // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bNoiseLock : 1;                                            // 0x0118(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bOscillate : 1;                                            // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_WC6L[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              NoiseLockTime;                                             // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NoiseTension;                                              // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseNoiseTangents : 1;                                     // 0x0124(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6L5K[0x3];                                     // 0x0125(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                      // 0x0128(0x0038) (Edit, ContainsInstancedReference)
	int                                                NoiseTessellation;                                         // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bTargetNoise : 1;                                          // 0x0164(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Z43T[0x3];                                     // 0x0165(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FrequencyDistance;                                         // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bApplyNoiseScale : 1;                                      // 0x016C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QWOU[0x3];                                     // 0x016D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       NoiseScale;                                                // 0x0170(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamSource
// 0x00D0 (FullSize[0x0120] - InheritedSize[0x0050])
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       SourceMethod;                                              // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5C69[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bSourceAbsolute : 1;                                       // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_3ET1[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Source;                                                    // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSource : 1;                                           // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_X9FN[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> SourceTangentMethod;                                       // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_OXD1[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      SourceTangent;                                             // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSourceTangent : 1;                                    // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NVOL[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x00E0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1OQF[0x7];                                     // 0x0119(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleBeamTarget
// 0x00D0 (FullSize[0x0120] - InheritedSize[0x0050])
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<Engine_EBeam2SourceTargetMethod>       TargetMethod;                                              // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_O95Q[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       TargetName;                                                // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RB28[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      Target;                                                    // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bTargetAbsolute : 1;                                       // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bLockTarget : 1;                                           // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ESVI[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EBeam2SourceTargetTangentMethod> TargetTangentMethod;                                       // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_8EVI[0x3];                                     // 0x009D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      TargetTangent;                                             // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockTargetTangent : 1;                                    // 0x00D8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_0H91[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TargetStrength;                                            // 0x00E0(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockTargetStength : 1;                                    // 0x0118(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LK18[0x3];                                     // 0x0119(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LockRadius;                                                // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCameraBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleCameraBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCameraOffset
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                              // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bSpawnTimeOnly : 1;                                        // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_0840[0x3];                                     // 0x0089(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleCameraOffsetUpdateMethod> UpdateMethod;                                              // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_WRAU[0x3];                                     // 0x008D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleCollisionBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCollision
// 0x0150 (FullSize[0x01A0] - InheritedSize[0x0050])
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                             // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      DampingFactorRotation;                                     // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       MaxCollisions;                                             // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	TEnumAsByte<Engine_EParticleCollisionComplete>     CollisionCompletionOption;                                 // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_EMWD[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<TEnumAsByte<Engine_EObjectTypeQuery>>       CollisionTypes;                                            // 0x0100(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_I616[0x4];                                     // 0x0110(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bApplyPhysics : 1;                                         // 0x0114(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_4720[0x3];                                     // 0x0115(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       ParticleMass;                                              // 0x0118(0x0038) (Edit, ContainsInstancedReference)
	float                                              DirScalar;                                                 // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                             // 0x0154(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                    // 0x0154(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_CLZ3[0x3];                                     // 0x0155(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              VerticalFudgeFactor;                                       // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1HS2[0x4];                                     // 0x015C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       DelayAmount;                                               // 0x0160(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bDropDetail : 1;                                           // 0x0198(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                 // 0x0198(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreSourceActor : 1;                                    // 0x0198(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreCollisionsWithHiddenObjects : 1;                    // 0x0198(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NJF3[0x3];                                     // 0x0199(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MaxCollisionDistance;                                      // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleCollisionGPU
// 0x0088 (FullSize[0x00D8] - InheritedSize[0x0050])
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                                // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                   // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	float                                              DampingFactorRotation;                                     // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Friction;                                                  // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RadiusScale;                                               // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RadiusBias;                                                // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EParticleCollisionResponse>     Response;                                                  // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EParticleCollisionMode>         CollisionMode;                                             // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_0JG5[0x6];                                     // 0x00D2(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionGPU");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.HIKCharacterization
// 0x0110 (FullSize[0x0138] - InheritedSize[0x0028])
class UHIKCharacterization : public UObject
{
public:
	struct FName                                       Reference;                                                 // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       Hips;                                                      // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       LeftUpLeg;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       LeftLeg;                                                   // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       LeftFoot;                                                  // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       RightUpLeg;                                                // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       RightLeg;                                                  // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       RightFoot;                                                 // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       Spine;                                                     // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       LeftArm;                                                   // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       LeftForeArm;                                               // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       LeftHand;                                                  // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       RightArm;                                                  // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       RightForeArm;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       RightHand;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       Head;                                                      // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHIKBoneTransform>                   BoneTransforms;                                            // 0x00A8(0x0010) (Edit, ZeroConstructor)
	bool                                               Locked;                                                    // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SWBY[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<int>                                        UnrealToHumanIKBoneMapping;                                // 0x00C0(0x0010) (ZeroConstructor)
	TArray<struct FHIKBoneMapping>                     AdditionalBones;                                           // 0x00D0(0x0010) (ZeroConstructor)
	bool                                               LeftElbowInverted;                                         // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               RightElbowInverted;                                        // 0x00E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               LeftKneeInverted;                                          // 0x00E2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               RightKneeInverted;                                         // 0x00E3(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               AdjustLeftShoulder;                                        // 0x00E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_JWLO[0x3];                                     // 0x00E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     AdjustLeftShoulder_Axis;                                   // 0x00E8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AdjustLeftShoulder_Angle;                                  // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               AdjustRightShoulder;                                       // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_7ZJE[0x3];                                     // 0x00F9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     AdjustRightShoulder_Axis;                                  // 0x00FC(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              AdjustRightShoulder_Angle;                                 // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               SpineSquashNStretch;                                       // 0x010C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               NeckSquashNStretch;                                        // 0x010D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_5ICX[0x2];                                     // 0x010E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpineJointsMinSquashNStretchFactor;                        // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpineJointsMaxSquashNStretchFactor;                        // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NeckJointsMinSquashNStretchFactor;                         // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NeckJointsMaxSquashNStretchFactor;                         // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bInitFromSkeleton;                                         // 0x0120(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_R1AZ[0x3];                                     // 0x0121(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                InitFromSkeletonCount;                                     // 0x0124(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                                    ImportRotator;                                             // 0x0128(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L0GB[0x4];                                     // 0x0134(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.HIKCharacterization");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (FullSize[0x01C8] - InheritedSize[0x01A8])
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                             // 0x01A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                       ExpressionGUID;                                            // 0x01B0(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       Group;                                                     // 0x01C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (FullSize[0x01C8] - InheritedSize[0x01C8])
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPredicatedTextureSampleParameter2D
// 0x0040 (FullSize[0x0208] - InheritedSize[0x01C8])
class UMaterialExpressionPredicatedTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter2D
{
public:
	struct FExpressionInput                            Predicate;                                                 // 0x01C8(0x0038) (ZeroConstructor)
	struct FColor                                      DefaultColour;                                             // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_9B2R[0x4];                                     // 0x0204(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPredicatedTextureSampleParameter2D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (FullSize[0x01D0] - InheritedSize[0x01C8])
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                                // 0x01C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bMipBiasOnLowResolution : 1;                               // 0x01C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_33BW[0x7];                                     // 0x01C9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (FullSize[0x01C8] - InheritedSize[0x01C8])
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                           // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              UTiling;                                                   // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VTiling;                                                   // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnMirrorU : 1;                                             // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnMirrorV : 1;                                             // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1YDE[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTime
// 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                          // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOverride_Period : 1;                                      // 0x0070(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_O74B[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Period;                                                    // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTransform
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_EMaterialVectorCoordTransformSource> TransformSourceType;                                       // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMaterialVectorCoordTransform>  TransformType;                                             // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_34W7[0x6];                                     // 0x00AA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTransformPosition
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformSourceType;                                       // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMaterialPositionTransformSource> TransformType;                                             // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5LSV[0x6];                                     // 0x00AA(0x0006) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (FullSize[0x0078] - InheritedSize[0x0038])
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                     // 0x0038(0x0020) (Edit)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                    // 0x0058(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeOscillator
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                       // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bModulatePitch : 1;                                        // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LN5X[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AmplitudeMin;                                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              AmplitudeMax;                                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FrequencyMin;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FrequencyMax;                                              // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OffsetMin;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              OffsetMax;                                                 // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CenterMin;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CenterMax;                                                 // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QOYO[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeQualityLevel
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeQualityLevel : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeQualityLevel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeRandom
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                   // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                PreselectAtLevelLoad;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                          // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_H5F7[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<bool>                                       HasBeenUsed;                                               // 0x0050(0x0010) (ZeroConstructor, Transient)
	int                                                NumRandomUsed;                                             // 0x0060(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HFOD[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeSoundClass
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                        // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeSoundClass");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeSwitch
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                          // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeSwitch");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeWaveParam
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                         // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.StaticMeshSocket
// 0x0040 (FullSize[0x0068] - InheritedSize[0x0028])
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                                // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     RelativeLocation;                                          // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    RelativeRotation;                                          // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     RelativeScale;                                             // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ZDG2[0x4];                                     // 0x0054(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     Tag;                                                       // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.StaticMeshSocket");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InheritableComponentHandler
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                                   // 0x0028(0x0010) (ZeroConstructor, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InheritableComponentHandler");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PlayerInput
// 0x0400 (FullSize[0x0428] - InheritedSize[0x0028])
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData_JWGY[0xF8];                                    // 0x0028(0x00F8) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FKeyBind>                            DebugExecBindings;                                         // 0x0120(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_11HY[0x40];                                    // 0x0130(0x0040) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               GamepadInvertedAxes;                                       // 0x0170(0x0010) (ZeroConstructor, Config)
	TArray<struct FName>                               MouseInvertedAxes;                                         // 0x0180(0x0010) (ZeroConstructor, Config)
	TArray<struct FName>                               InvertedCombinedAxisY;                                     // 0x0190(0x0010) (ZeroConstructor, Config)
	TArray<struct FName>                               InvertedCombinedAxisX;                                     // 0x01A0(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_8635[0x278];                                   // 0x01B0(0x0278) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}



	void SetMouseSensitivity(float Sensitivity);
	void SetForceFeedbackIntensity(float Intensity);
	void SetCombinedAxisScale(const struct FName& CombinedAxisName, float Scale);
	void SetCombinedAxisNonLinearity(const struct FName& CombinedAxisName, float NonLinearity);
	void SetCombinedAxisLowerDeadzone(const struct FName& CombinedAxisName, float LowerDeadzone);
	void SetBind(const struct FName& BindName, const struct FString& Command);
	void InvertMouseAxis(const struct FName& AxisName);
	void InvertGamepadAxis(const struct FName& AxisName);
	void InvertCombinedAxisY(const struct FName& CombinedAxisName);
	void InvertCombinedAxisX(const struct FName& CombinedAxisName);
	void InvertAxisKey(const struct FKey& AxisKey);
	void ClearSmoothing();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InputSettings
// 0x0098 (FullSize[0x00C0] - InheritedSize[0x0028])
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                                // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                            // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bUseMouseForTouch : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bEnableMouseSmoothing : 1;                                 // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      bEnableFOVScaling : 1;                                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_Z1WH[0x3];                                     // 0x0039(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FOVScale;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              DoubleClickTime;                                           // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_725N[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                            // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                              // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FInputCombinedAxisKeyMapping>        CombinedAxisMappings;                                      // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bAlwaysShowTouchInterface;                                 // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	bool                                               bShowConsoleOnFourFingerTap;                               // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_GKXW[0x6];                                     // 0x007A(0x0006) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FStringAssetReference                       DefaultTouchInterface;                                     // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	struct FKey                                        ConsoleKey;                                                // 0x0090(0x0020) (Config, Deprecated)
	TArray<struct FKey>                                ConsoleKeys;                                               // 0x00B0(0x0010) (Edit, ZeroConstructor, Config)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InputSettings");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpCurveEdSetup
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                      // 0x0028(0x0010) (ZeroConstructor)
	int                                                ActiveTab;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DCYK[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpData
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                              // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              PathBuildTime;                                             // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInterpGroup*>                        InterpGroups;                                              // 0x0030(0x0010) (ExportObject, ZeroConstructor)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              EdSectionStart;                                            // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              EdSectionEnd;                                              // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bShouldBakeAndPrune : 1;                                   // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JEXJ[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UInterpGroupDirector*                        CachedDirectorGroup;                                       // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FName>                               AllEventNames;                                             // 0x0060(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpFilter
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                   // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpFilter_Classes
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInterpFilter_Classes : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpFilter_Custom
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class UInterpFilter_Custom : public UInterpFilter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroup
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData_3IWT[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UInterpTrack*>                        InterpTracks;                                              // 0x0030(0x0010) (ExportObject, ZeroConstructor)
	struct FName                                       GroupName;                                                 // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                      GroupColor;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bCollapsed : 1;                                            // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bVisible : 1;                                              // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsFolder : 1;                                             // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsParented : 1;                                           // 0x004C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bIsSelected : 1;                                           // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_BP8H[0x3];                                     // 0x004D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupCamera
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                            // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              CompressTolerance;                                         // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_6AFA[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupCamera");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupDirector
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UInterpGroupDirector : public UInterpGroup
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupInst
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                      GroupActor;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                 // 0x0038(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupInstCamera
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupInstCamera");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpGroupInstDirector
// 0x0000 (FullSize[0x0048] - InheritedSize[0x0048])
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackBoolProp
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                 // 0x0070(0x0010) (ZeroConstructor)
	struct FName                                       PropertyName;                                              // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackBoolProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackDirector
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                  // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                          // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_P4AA[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackEvent
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                                // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseCustomEventName : 1;                                   // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_54NM[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackAnimControl
// 0x0020 (FullSize[0x00B0] - InheritedSize[0x0090])
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                  // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                  // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                                    // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_I3Y8[0x7];                                     // 0x00A9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCustomVelocity
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionCustomVelocity : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Velocity2D;                                                // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomVelocity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDDY
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDDY");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                               // 0x0070(0x0038) (ZeroConstructor)
	float                                              ConstWidth;                                                // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstHeight;                                               // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalMipmapLevel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDepthFade
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                 // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            FadeDistance;                                              // 0x00A8(0x0038) (ZeroConstructor)
	float                                              OpacityDefault;                                            // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FadeDistanceDefault;                                       // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthFade");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                  // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceToNearestSurface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDivide
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	float                                              ConstA;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDynamicParameter
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                                // 0x0070(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	struct FLinearColor                                DefaultValue;                                              // 0x0080(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionEyeAdaptation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0118 (FullSize[0x0188] - InheritedSize[0x0070])
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Inputs[0x4];                                               // 0x00A8(0x00E0) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFeatureLevelSwitch");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFresnel
// 0x00B8 (FullSize[0x0128] - InheritedSize[0x0070])
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                                // 0x0070(0x0038) (ZeroConstructor)
	float                                              Exponent;                                                  // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_W7WS[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            BaseReflectFractionIn;                                     // 0x00B0(0x0038) (ZeroConstructor)
	float                                              BaseReflectFraction;                                       // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4AIS[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Normal;                                                    // 0x00F0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFunctionInput
// 0x0090 (FullSize[0x0100] - InheritedSize[0x0070])
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                   // 0x0070(0x0038) (ZeroConstructor)
	struct FString                                     InputName;                                                 // 0x00A8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     Description;                                               // 0x00B8(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	struct FGuid                                       Id;                                                        // 0x00C8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EFunctionInputType>             InputType;                                                 // 0x00D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BGTC[0x7];                                     // 0x00D9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector4                                    PreviewValue;                                              // 0x00E0(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                             // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_R38V[0x3];                                     // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SortPriority;                                              // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bCompilingFunctionPreview : 1;                             // 0x00F8(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_PQOM[0x7];                                     // 0x00F9(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionGIReplace
// 0x00A8 (FullSize[0x0118] - InheritedSize[0x0070])
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                   // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            StaticIndirect;                                            // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            DynamicIndirect;                                           // 0x00E0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionGIReplace");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPredicatedTextureSample
// 0x0040 (FullSize[0x01E8] - InheritedSize[0x01A8])
class UMaterialExpressionPredicatedTextureSample : public UMaterialExpressionTextureSample
{
public:
	struct FExpressionInput                            Predicate;                                                 // 0x01A8(0x0038) (ZeroConstructor)
	struct FColor                                      DefaultColour;                                             // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BWLO[0x4];                                     // 0x01E4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPredicatedTextureSample");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (FullSize[0x01C8] - InheritedSize[0x01C8])
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (FullSize[0x01D0] - InheritedSize[0x01C8])
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                 // 0x01C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETextureColorChannel>           Channel;                                                   // 0x01CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VB7C[0x3];                                     // 0x01CD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0038 (FullSize[0x0090] - InheritedSize[0x0058])
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                             // 0x0058(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackMoveAxis
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<Engine_EInterpMoveAxis>                MoveAxis;                                                  // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_N95V[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FInterpLookupTrack                          LookupTrack;                                               // 0x0098(0x0010)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackLinearColorBase
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                          // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UNJB[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackLinearColorProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDDX
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDDX");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavCollision
// 0x00E8 (FullSize[0x0110] - InheritedSize[0x0028])
class UNavCollision : public UObject
{
public:
	unsigned char                                      UnknownData_QVQO[0x50];                                    // 0x0028(0x0050) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FNavCollisionCylinder>               CylinderCollision;                                         // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<struct FNavCollisionBox>                    BoxCollision;                                              // 0x0088(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      AreaClass;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	unsigned char                                      bIsDynamicObstacle : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      bGatherConvexGeometry : 1;                                 // 0x00A0(0x0001) BIT_FIELD (Edit, Config, NoDestructor)
	unsigned char                                      UnknownData_KXBA[0x6F];                                    // 0x00A1(0x006F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavCollision");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationDataChunk
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                        // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationDataChunk");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RecastNavMeshDataChunk
// 0x0010 (FullSize[0x0040] - InheritedSize[0x0030])
class URecastNavMeshDataChunk : public UNavigationDataChunk
{
public:
	unsigned char                                      UnknownData_KJ6F[0x10];                                    // 0x0030(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RecastNavMeshDataChunk");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationPath
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class UNavigationPath : public UObject
{
public:
	struct FScriptMulticastDelegate                    PathUpdatedNotifier;                                       // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FVector>                             PathPoints;                                                // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<Engine_ENavigationOptionFlag>          RecalculateOnInvalidation;                                 // 0x0048(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_S1ZO[0x3F];                                    // 0x0049(0x003F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationPath");
		return ptr;
	}



	bool IsValid();
	bool IsStringPulled();
	bool IsPartial();
	float GetPathLength();
	float GetPathCost();
	struct FString GetDebugString();
	void EnableRecalculationOnInvalidation(TEnumAsByte<Engine_ENavigationOptionFlag> DoRecalculation);
	void EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavigationPathGenerator
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavigationPathGenerator : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavigationPathGenerator");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.RecastFilter_UseDefaultArea
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.RecastFilter_UseDefaultArea");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavLinkTrivial
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UNavLinkTrivial : public UNavLinkDefinition
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavLinkTrivial");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavNodeInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNavNodeInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavNodeInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DemoNetDriver
// 0x00D8 (FullSize[0x0550] - InheritedSize[0x0478])
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData_7GXJ[0xD8];                                    // 0x0478(0x00D8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DemoNetDriver");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NetPhysicsInterpolatorInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UNetPhysicsInterpolatorInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NetPhysicsInterpolatorInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ObjectLibrary
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                           // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bHasBlueprintClasses;                                      // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_RQXG[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UObject*>                             Objects;                                                   // 0x0038(0x0010) (Edit, ZeroConstructor, Protected)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                               // 0x0048(0x0010) (ZeroConstructor, Protected, UObjectWrapper)
	bool                                               bUseWeakReferences;                                        // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	bool                                               bIsFullyLoaded;                                            // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected)
	unsigned char                                      UnknownData_ZEWZ[0x16];                                    // 0x005A(0x0016) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ObjectLibrary");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ObjectReferencer
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                         // 0x0028(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PackageMapClient
// 0x01A8 (FullSize[0x01F8] - InheritedSize[0x0050])
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData_U9DX[0x1A8];                                   // 0x0050(0x01A8) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PackageMapClient");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleEmitter
// 0x0088 (FullSize[0x00B0] - InheritedSize[0x0028])
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SubUVDataOffset;                                           // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EEmitterRenderMode>             EmitterRenderMode;                                         // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_W0PT[0x3];                                     // 0x0035(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                 // 0x0038(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      ConvertedModules : 1;                                      // 0x0048(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_LV84[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PeakActiveParticles;                                       // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int                                                InitialAllocationCount;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              MediumDetailSpawnRateScale;                                // 0x0054(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              QualityLevelSpawnRateScale;                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_EDetailMode>                    DetailMode;                                                // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EEmitterQuality>                MaxEmitterQuality;                                         // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EEmitterQuality>                MinEmitterQuality;                                         // 0x005E(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_XL3H[0x1];                                     // 0x005F(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bIsSoloing : 1;                                            // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bCookedOut : 1;                                            // 0x0060(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                         // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bHasAnyEnabledLODs : 1;                                    // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bHasAnyEnabledLODsValid : 1;                               // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_VWJM[0x3F];                                    // 0x0061(0x003F) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleModule*>                     ModulesNeedingInstanceData;                                // 0x00A0(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSpriteEmitter
// 0x0000 (FullSize[0x00B0] - InheritedSize[0x00B0])
class UParticleSpriteEmitter : public UParticleEmitter
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleLODLevel
// 0x0090 (FullSize[0x00B8] - InheritedSize[0x0028])
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnabled : 1;                                              // 0x002C(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_PV2J[0x3];                                     // 0x002D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UParticleModuleRequired*                     RequiredModule;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UParticleModule*>                     Modules;                                                   // 0x0038(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	class UParticleModule*                             TypeDataModule;                                            // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleModuleSpawn*                        SpawnModule;                                               // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleModuleEventGenerator*               EventGenerator;                                            // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                           // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     SpawnModules;                                              // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModule*>                     UpdateModules;                                             // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                              // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                      // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                                      // 0x00B0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_S77W[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                PeakActiveParticles;                                       // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackParticleReplay
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                 // 0x0070(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackToggle
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                               // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                             // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                         // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_CL17[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVectorBase
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                               // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_D4X9[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackAudioMaster
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackColorProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackColorScale
// 0x0000 (FullSize[0x0090] - InheritedSize[0x0090])
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackSound
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                    // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                                        // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                            // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSuppressSubtitles : 1;                                    // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTreatAsDialogue : 1;                                      // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAttach : 1;                                               // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_HUMP[0x7];                                     // 0x00A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (FullSize[0x00A8] - InheritedSize[0x0090])
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                           // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                 // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVectorProp
// 0x0008 (FullSize[0x0098] - InheritedSize[0x0090])
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                              // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackVisibility
// 0x0018 (FullSize[0x0088] - InheritedSize[0x0070])
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                           // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                               // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenBackwards : 1;                              // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                        // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_LJX2[0x7];                                     // 0x0081(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackVisibility");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstAnimControl
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_WE50[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstColorScale
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstDirector
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstEvent
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QA5I[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFade
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UInterpTrackInstFade : public UInterpTrackInst
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                               AnimScriptInstance;                                        // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ResetFloat;                                                // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RHCP[0xC];                                     // 0x0034(0x000C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatAnimBPParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0028(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloats;                                               // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                            // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                                // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_U5GD[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstVectorProp
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_GZ0K[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     ResetVector;                                               // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_Z4MF[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstSound
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1O9Y[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UAudioComponent*                             PlayAudioComp;                                             // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstToggle
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_ETrackToggleAction>             Action;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_KM0A[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bSavedActiveState : 1;                                     // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_IJ96[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                         // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                     // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                            // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstVisibility
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<Engine_EVisibilityTrackAction>         Action;                                                    // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UJX1[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              LastUpdatePosition;                                        // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.IntSerialization
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                     // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NL2M[0x2];                                     // 0x002A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	uint32_t                                           UnsignedInt32Variable;                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint64_t                                           UnsignedInt64Variable;                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int8_t                                             SignedInt8Variable;                                        // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_H6N3[0x1];                                     // 0x0039(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int16_t                                            SignedInt16Variable;                                       // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZJGK[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int64_t                                            SignedInt64Variable;                                       // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnsignedInt8Variable;                                      // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_NF32[0x3];                                     // 0x0049(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SignedInt32Variable;                                       // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.IntSerialization");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Layer
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIsVisible : 1;                                            // 0x0030(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_VWQR[0x7];                                     // 0x0031(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FLayerActorStats>                    ActorStats;                                                // 0x0038(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Layer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelActorContainer
// 0x0010 (FullSize[0x0038] - InheritedSize[0x0028])
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                              Actors;                                                    // 0x0028(0x0010) (ZeroConstructor, Transient)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelActorContainer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreaming
// 0x01E8 (FullSize[0x0210] - InheritedSize[0x0028])
class ULevelStreaming : public UObject
{
public:
	TAssetPtr<class UWorld>                            WorldAsset;                                                // 0x0028(0x001C) ELEMENT_SIZE_MISMATCH (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VH0A[0x4];                                     // 0x0028(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData_FQWD[0x8];                                     // 0x0048(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       PackageNameToLoad;                                         // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FName>                               LODPackageNames;                                           // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_QGGS[0x18];                                    // 0x0068(0x0018) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FTransform                                  LevelTransform;                                            // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_M68R[0xC];                                     // 0x00B0(0x000C) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      UnknownData_Q4Z4 : 3;                                      // 0x00BC(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bShouldBeVisibleInEditor : 1;                              // 0x00BC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      Blocked : 1;                                               // 0x00BC(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      bShouldBeLoaded : 1;                                       // 0x00BC(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bShouldBeVisible : 1;                                      // 0x00BC(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      bShouldBlockOnLoad : 1;                                    // 0x00BC(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor)
	unsigned char                                      UnknownData_HU72[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                LevelLODIndex;                                             // 0x00C0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bDisableDistanceStreaming : 1;                             // 0x00C4(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor)
	unsigned char                                      UnknownData_VEDY : 2;                                      // 0x00C4(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                 // 0x00C4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_BNHE[0x3];                                     // 0x00C5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                LevelColor;                                                // 0x00C8(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                    // 0x00D8(0x0010) (Edit, ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                        // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VOEV[0x4];                                     // 0x00EC(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FString>                             Keywords;                                                  // 0x00F0(0x0010) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                             // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelShown;                                              // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                             // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData_F43G[0xC0];                                    // 0x0140(0x00C0) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class ULevel*                                      LoadedLevel;                                               // 0x0200(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                      PendingUnloadLevel;                                        // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}



	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	class ALevelScriptActor* GetLevelScriptActor();
	class ULevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (FullSize[0x0210] - InheritedSize[0x0210])
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingKismet
// 0x0010 (FullSize[0x0220] - InheritedSize[0x0210])
class ULevelStreamingKismet : public ULevelStreaming
{
public:
	unsigned char                                      bInitiallyLoaded : 1;                                      // 0x0210(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInitiallyVisible : 1;                                     // 0x0210(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ZVMZ[0xF];                                     // 0x0211(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingKismet");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LevelStreamingPersistent
// 0x0000 (FullSize[0x0210] - InheritedSize[0x0210])
class ULevelStreamingPersistent : public ULevelStreaming
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightmappedSurfaceCollection
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int>                                        Surfaces;                                                  // 0x0030(0x0010) (Edit, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                              // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_MEZO[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationConstant");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationDrag
// 0x0070 (FullSize[0x00C8] - InheritedSize[0x0058])
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                           // 0x0058(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDistributionFloat*                          DragOnLocalVelocity;                                       // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUseGroupADragCoefficientForAllGroups : 1;                 // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_225P[0x7];                                     // 0x0069(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDistributionFloat*                          AdditionalDragCoefficient[0x5];                            // 0x0070(0x0028) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bUseGroupADragOnLocalVelocityForAllGroups : 1;             // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GIXY[0x7];                                     // 0x0099(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UDistributionFloat*                          AdditionalDragOnLocalVelocity[0x5];                        // 0x00A0(0x0028) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDrag");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0010 (FullSize[0x0068] - InheritedSize[0x0058])
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                 // 0x0058(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDistributionFloat*                          DragLocalVelocityScale;                                    // 0x0060(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDragScaleOverLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAccelerationEmitterPoint
// 0x0040 (FullSize[0x0098] - InheritedSize[0x0058])
class UParticleModuleAccelerationEmitterPoint : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionFloat                       AccelerationScale;                                         // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bApplyOwnerScale : 1;                                      // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6B0L[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationEmitterPoint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEmitterPointVelocity
// 0x0038 (FullSize[0x0090] - InheritedSize[0x0058])
class UParticleModuleEmitterPointVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       VelocityScale;                                             // 0x0058(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEmitterPointVelocity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstMove
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                             // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                                    ResetRotation;                                             // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                        // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HISY[0x4];                                     // 0x002C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstBoolProp
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_JIO0[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UBoolProperty*                               BoolProperty;                                              // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               ResetBool;                                                 // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_A244[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (FullSize[0x0050] - InheritedSize[0x0038])
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData_YTSS[0x8];                                     // 0x0038(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FLinearColor                                ResetColor;                                                // 0x0040(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeOverVelocity
// 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
class UParticleModuleSizeOverVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionFloat                       SizeMultiplier;                                            // 0x0050(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeOverVelocity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeScale
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                 // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      EnableX : 1;                                               // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      EnableY : 1;                                               // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      EnableZ : 1;                                               // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_3OS4[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleWindBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleWindBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleWindBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleWindInfluence
// 0x0078 (FullSize[0x00C8] - InheritedSize[0x0050])
class UParticleModuleWindInfluence : public UParticleModuleWindBase
{
public:
	float                                              WindSpeedCap;                                              // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RandomFactorForWindDirection;                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionFloat                       InfluenceOnAcceleration;                                   // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       InfluenceOnVelocity;                                       // 0x0090(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleWindInfluence");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UParticleModuleEventSendToGame : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleSystemReplay
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_48ZY[0x14];                                    // 0x002C(0x0014) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleSystemReplay");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.DemoPendingNetGame
// 0x0000 (FullSize[0x0100] - InheritedSize[0x0100])
class UDemoPendingNetGame : public UPendingNetGame
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.DemoPendingNetGame");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicalMaterial
// 0x0048 (FullSize[0x0070] - InheritedSize[0x0028])
class UPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                  // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EFrictionCombineMode>           FrictionCombineMode;                                       // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bOverrideFrictionCombineMode;                              // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_ICF8[0x2];                                     // 0x002E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Restitution;                                               // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EFrictionCombineMode>           RestitutionCombineMode;                                    // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bOverrideRestitutionCombineMode;                           // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_BZ2M[0x2];                                     // 0x0036(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Density;                                                   // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              RaiseMassToPower;                                          // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DestructibleDamageThresholdScale;                          // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_H3DK[0x4];                                     // 0x0044(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                  // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EPhysicalSurface>               SurfaceType;                                               // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_YFAH[0x1F];                                    // 0x0051(0x001F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UPhysicalMaterialPropertyBase : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsAsset
// 0x00D0 (FullSize[0x00F8] - InheritedSize[0x0028])
class UPhysicsAsset : public UObject
{
public:
	TArray<class UBodySetup*>                          BodySetup;                                                 // 0x0028(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	TArray<int>                                        BoundsBodies;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                           // 0x0048(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference)
	unsigned char                                      UnknownData_QZHF[0xA0];                                    // 0x0058(0x00A0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.PhysicsCollisionHandler
// 0x0018 (FullSize[0x0040] - InheritedSize[0x0028])
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ImpactReFireDelay;                                         // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                                  DefaultImpactSound;                                        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LastImpactSoundTime;                                       // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_36W5[0x4];                                     // 0x003C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.PhysicsCollisionHandler");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0080 (FullSize[0x00F0] - InheritedSize[0x0070])
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            Struct;                                                    // 0x0070(0x0038) (ZeroConstructor)
	struct FMaterialAttributesInput                    MaterialAttributes;                                        // 0x00A8(0x0038) (ZeroConstructor)
	unsigned char                                      UnknownData_K7PB[0x10];                                    // 0x00E0(0x0010) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionBreakMaterialAttributes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionBumpOffset
// 0x00B8 (FullSize[0x0128] - InheritedSize[0x0070])
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Height;                                                    // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            HeightRatioInput;                                          // 0x00E0(0x0038) (ZeroConstructor)
	float                                              HeightRatio;                                               // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ReferencePlane;                                            // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint32_t                                           ConstCoordinate;                                           // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_M8BC[0x4];                                     // 0x0124(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraPositionWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVectorWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneColor
// 0x0080 (FullSize[0x00F0] - InheritedSize[0x0070])
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VMDP[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            OffsetFraction;                                            // 0x00B0(0x0038) (ZeroConstructor, Deprecated)
	struct FVector2D                                   ConstInput;                                                // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneColor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundCue
// 0x00E0 (FullSize[0x0130] - InheritedSize[0x0050])
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_A0BZ[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class USoundNode*                                  FirstNode;                                                 // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VolumeMultiplier;                                          // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	float                                              PitchMultiplier;                                           // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	struct FAttenuationSettings                        AttenuationOverrides;                                      // 0x0068(0x00C0) (Edit)
	unsigned char                                      UnknownData_BUTK[0x8];                                     // 0x0128(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundWave
// 0x01C8 (FullSize[0x0218] - InheritedSize[0x0050])
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      bLooping : 1;                                              // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bStreaming : 1;                                            // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JY2C[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                StreamingPriority;                                         // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CQRA : 3;                                      // 0x005C(0x0001) BIT_FIELD (PADDING)
	unsigned char                                      bMature : 1;                                               // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bManualWordWrap : 1;                                       // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSingleLine : 1;                                           // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_84JI[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ESoundGroup>                    SoundGroup;                                                // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CZIU[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FString                                     SpokenText;                                                // 0x0068(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	float                                              Volume;                                                    // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Pitch;                                                     // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                NumChannels;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	int                                                SampleRate;                                                // 0x0084(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	int                                                RawPCMDataSize;                                            // 0x0088(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ELCU[0x4];                                     // 0x008C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FSubtitleCue>                        Subtitles;                                                 // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                                        // 0x00A0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData_W40G[0x168];                                   // 0x00B0(0x0168) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundWave");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundWaveProcedural
// 0x0018 (FullSize[0x0230] - InheritedSize[0x0218])
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData_F91D[0x18];                                    // 0x0218(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundWaveProcedural");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundClass
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                                // 0x0028(0x0024) (Edit)
	unsigned char                                      UnknownData_FGOI[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class USoundClass*>                         ChildClasses;                                              // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                  // 0x0060(0x0010) (Edit, ZeroConstructor)
	class USoundClass*                                 ParentClass;                                               // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundClass");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundMix
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class USoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                              // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_SYXG[0x3];                                     // 0x0029(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EQPriority;                                                // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAudioEQEffect                              EQSettings;                                                // 0x0030(0x0028) (Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                         // 0x0058(0x0010) (Edit, ZeroConstructor)
	float                                              InitialDelay;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FadeInTime;                                                // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Duration;                                                  // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FadeOutTime;                                               // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundMix");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeAssetReferencer
// 0x0000 (FullSize[0x0038] - InheritedSize[0x0038])
class USoundNodeAssetReferencer : public USoundNode
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeAssetReferencer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeWavePlayer
// 0x0030 (FullSize[0x0068] - InheritedSize[0x0038])
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TAssetPtr<class USoundWave>                        SoundWaveAssetPtr;                                         // 0x0038(0x001C) ELEMENT_SIZE_MISMATCH (Edit, UObjectWrapper, HasGetValueTypeHash)
	unsigned char                                      UnknownData_HZNQ[0x4];                                     // 0x0038(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	class USoundWave*                                  SoundWave;                                                 // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bLooping : 1;                                              // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_O5KK[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeWavePlayer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeAttenuation
// 0x00D0 (FullSize[0x0108] - InheritedSize[0x0038])
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                       // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttenuationSettings                        AttenuationOverrides;                                      // 0x0040(0x00C0) (Edit)
	unsigned char                                      bOverrideAttenuation : 1;                                  // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Q4GS[0x7];                                     // 0x0101(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeBranch
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                         // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeBranch");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeConcatenator
// 0x0010 (FullSize[0x0048] - InheritedSize[0x0038])
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                               // 0x0038(0x0010) (Edit, EditFixedSize, ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDelay
// 0x0008 (FullSize[0x0040] - InheritedSize[0x0038])
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DelayMax;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (FullSize[0x0090] - InheritedSize[0x0070])
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                                // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       ParameterName;                                             // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                       ParameterId;                                               // 0x0080(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCollectionParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocation
// 0x0128 (FullSize[0x0178] - InheritedSize[0x0050])
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                             // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      AdditionalStartLocations[0x4];                             // 0x0088(0x00E0) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      StartLocationUseGroupAForAll : 1;                          // 0x0168(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_9HRZ[0x3];                                     // 0x0169(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              DistributeOverNPoints;                                     // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              DistributeThreshold;                                       // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_TC7Q[0x4];                                     // 0x0174(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (FullSize[0x0198] - InheritedSize[0x0178])
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0178(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (FullSize[0x0178] - InheritedSize[0x0178])
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionCrossProduct
// 0x0070 (FullSize[0x00E0] - InheritedSize[0x0070])
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneDepth
// 0x0080 (FullSize[0x00F0] - InheritedSize[0x0070])
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialSceneAttributeInputMode> InputMode;                                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_CUZ9[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            Input;                                                     // 0x0078(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Coordinates;                                               // 0x00B0(0x0038) (ZeroConstructor, Deprecated)
	struct FVector2D                                   ConstInput;                                                // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexelSize");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSceneTexture
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0070(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_ESceneTextureId>                SceneTextureId;                                            // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bClampUVs;                                                 // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bFiltered;                                                 // 0x00AA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4Q0E[0x5];                                     // 0x00AB(0x0005) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSine
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)
	float                                              Period;                                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QM61[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSpeedTree
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_ESpeedTreeGeometryType>         GeometryType;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESpeedTreeWindType>             WindType;                                                  // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESpeedTreeLODType>              LODType;                                                   // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_31NM[0x1];                                     // 0x0073(0x0001) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              BillboardThreshold;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bAccurateWindVelocities;                                   // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_FVS8[0x7];                                     // 0x0079(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSpeedTree");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSphereMask
// 0x00E8 (FullSize[0x0158] - InheritedSize[0x0070])
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Radius;                                                    // 0x00E0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Hardness;                                                  // 0x0118(0x0038) (ZeroConstructor)
	float                                              AttenuationRadius;                                         // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              HardnessPercent;                                           // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0040 (FullSize[0x00B0] - InheritedSize[0x0070])
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                   // 0x0070(0x0038) (ZeroConstructor)
	float                                              ConstantDensity;                                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QJ89[0x4];                                     // 0x00AC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSphericalParticleOpacity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                                // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                                   MaxScale;                                                  // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleBySpeed");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawnBase
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bProcessBurstList : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_PA2N[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawn
// 0x0220 (FullSize[0x0278] - InheritedSize[0x0058])
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                      // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalRates[0x5];                                      // 0x0090(0x0118) (Edit, ContainsInstancedReference)
	float                                              StartScaleDistance;                                        // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              EndScaleDistance;                                          // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionFloat                       RateScaleOverDistance;                                     // 0x01B0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       RateScale;                                                 // 0x01E8(0x0038) (Edit, ContainsInstancedReference, AdvancedDisplay)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BU5O[0x7];                                     // 0x0221(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x0228(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
	struct FRawDistributionFloat                       BurstScale;                                                // 0x0238(0x0038) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                            // 0x0270(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bBurstTreatedAsLoopingForLODs : 1;                         // 0x0270(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6LVK[0x7];                                     // 0x0271(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0050 (FullSize[0x00A8] - InheritedSize[0x0058])
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	unsigned char                                      bAffectsGroupA : 1;                                        // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAffectsGroupB : 1;                                        // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAffectsGroupC : 1;                                        // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAffectsGroupD : 1;                                        // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAffectsGroupE : 1;                                        // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAffectsReplacementGroup : 1;                              // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6SL3[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              UnitScalar;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionFloat                       SpawnPerUnit;                                              // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                            // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TESR[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              MovementTolerance;                                         // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxFrameDistance;                                          // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                 // 0x00A4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                 // 0x00A4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                 // 0x00A4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_H5YK[0x3];                                     // 0x00A5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawnPerUnitNew
// 0x0000 (FullSize[0x00A8] - InheritedSize[0x00A8])
class UParticleModuleSpawnPerUnitNew : public UParticleModuleSpawnPerUnit
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnitNew");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSpawnRepeatPerPoint
// 0x0000 (FullSize[0x0058] - InheritedSize[0x0058])
class UParticleModuleSpawnRepeatPerPoint : public UParticleModuleSpawnBase
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnRepeatPerPoint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleSubUVBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSubUV
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                             // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bUseRealTime : 1;                                          // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_ZFH7[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleSubUVMovie
// 0x0048 (FullSize[0x00D8] - InheritedSize[0x0090])
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                       // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_0T35[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       FrameRate;                                                 // 0x0098(0x0038) (Edit, ContainsInstancedReference)
	int                                                StartingFrame;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_RY4Y[0x4];                                     // 0x00D4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTrailBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleTrailBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTrailSource
// 0x0068 (FullSize[0x00B8] - InheritedSize[0x0050])
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<Engine_ETrail2SourceMethod>            SourceMethod;                                              // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_MSOT[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FName                                       SourceName;                                                // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4PXN[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SourceStrength;                                            // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bLockSourceStength : 1;                                    // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_5BZ8[0x3];                                     // 0x0099(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SourceOffsetCount;                                         // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                             SourceOffsetDefaults;                                      // 0x00A0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<Engine_EParticleSourceSelectionMethod> SelectionMethod;                                           // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_W5DN[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bInheritRotation : 1;                                      // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7U0X[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleTypeDataBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_FJ8C[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DistanceTessellationStepSize;                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TangentTessellationStepSize;                               // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              WidthTessellationStepSize;                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_Y1XS[0x4];                                     // 0x0064(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataBeam2
// 0x0138 (FullSize[0x0188] - InheritedSize[0x0050])
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<Engine_EBeam2Method>                   BeamMethod;                                                // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_3MC2[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                TextureTile;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              TextureTileDistance;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                Sheets;                                                    // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxBeamCount;                                              // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Speed;                                                     // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                InterpolationPoints;                                       // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bAlwaysOn : 1;                                             // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_QMRI[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                UpVectorStepSize;                                          // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       BranchParentName;                                          // 0x0074(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_AKHL[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       Distance;                                                  // 0x0080(0x0038) (Edit, ContainsInstancedReference)
	TEnumAsByte<Engine_EBeamTaperMethod>               TaperMethod;                                               // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4VQR[0x7];                                     // 0x00B9(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       TaperFactor;                                               // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       TaperScale;                                                // 0x00F8(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      RenderGeometry : 1;                                        // 0x0130(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      RenderDirectLine : 1;                                      // 0x0130(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      RenderLines : 1;                                           // 0x0130(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      RenderTessellation : 1;                                    // 0x0130(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JR4K[0x7];                                     // 0x0131(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<class UParticleModuleBeamSource*>           LOD_BeamModule_Source;                                     // 0x0138(0x0010) (ZeroConstructor)
	TArray<class UParticleModuleBeamTarget*>           LOD_BeamModule_Target;                                     // 0x0148(0x0010) (ZeroConstructor)
	TArray<class UParticleModuleBeamNoise*>            LOD_BeamModule_Noise;                                      // 0x0158(0x0010) (ZeroConstructor)
	TArray<class UParticleModuleBeamModifier*>         LOD_BeamModule_SourceModifier;                             // 0x0168(0x0010) (ZeroConstructor)
	TArray<class UParticleModuleBeamModifier*>         LOD_BeamModule_TargetModifier;                             // 0x0178(0x0010) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataGpu
// 0x0CC0 (FullSize[0x0D10] - InheritedSize[0x0050])
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                               // 0x0050(0x02A0) (Transient, ContainsInstancedReference)
	struct FGPUSpriteResourceData                      ResourceData;                                              // 0x02F0(0x0A00) (Transient)
	float                                              CameraMotionBlurAmount;                                    // 0x0CF0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                         // 0x0CF4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_BUYX[0x3];                                     // 0x0CF5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleAlphaThresholdLevel>   AlphaCullingAggressiveness;                                // 0x0CF8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_IQKP[0x3];                                     // 0x0CF9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideAlphaThreshold : 1;                               // 0x0CFC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_4MW5[0x3];                                     // 0x0CFD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              OverriddenAlphaThreshold;                                  // 0x0D00(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EInteractionWithKillPlane>      InteractionWithKillPlane;                                  // 0x0D04(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EKillPlaneKillPointLocation>    KillPlanePointLocation;                                    // 0x0D05(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LSCM[0x2];                                     // 0x0D06(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FadingTimeWhenKilled;                                      // 0x0D08(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_JY34[0x4];                                     // 0x0D0C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataGpu");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataMesh
// 0x0070 (FullSize[0x00C0] - InheritedSize[0x0050])
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                      // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      CastShadows : 1;                                           // 0x0058(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      DoCollisions : 1;                                          // 0x0058(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_JIFX[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMeshScreenAlignment>           MeshAlignment;                                             // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_N13F[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bOverrideMaterial : 1;                                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JQNT[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              Pitch;                                                     // 0x0064(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Roll;                                                      // 0x0068(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Yaw;                                                       // 0x006C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionVector                      RollPitchYawRange;                                         // 0x0070(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      UnknownData_Z004[0x8];                                     // 0x00A8(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleAxisLock>              AxisLockOption;                                            // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_O1VL[0x3];                                     // 0x00B1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bCameraFacing : 1;                                         // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_UEX4[0x3];                                     // 0x00B5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EMeshCameraFacingUpAxis>        CameraFacingUpAxisOption;                                  // 0x00B8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EMeshCameraFacingOptions>       CameraFacingOption;                                        // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_TGQU[0x2];                                     // 0x00BA(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                          // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;                // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFaceCameraOnlyOnSpawn : 1;                                // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                       // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_IR2P[0x3];                                     // 0x00BD(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (FullSize[0x0080] - InheritedSize[0x0050])
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                           // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SheetsPerTrail;                                            // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxTrailCount;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                MaxParticleInTrailCount;                                   // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                               // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                               // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bClipSourceSegement : 1;                                   // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                   // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                       // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bSpawnInitialParticle : 1;                                 // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_TJ0L[0x3];                                     // 0x0061(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETrailsRenderAxisOption>        RenderAxis;                                                // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_K8YE[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentSpawningScalar;                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bRenderGeometry : 1;                                       // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRenderSpawnPoints : 1;                                    // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRenderTangents : 1;                                       // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bRenderTessellation : 1;                                   // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_UKDG[0x3];                                     // 0x006D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TilingDistance;                                            // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              DistanceTessellationStepSize;                              // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                         // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_KJ71[0x3];                                     // 0x0079(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              TangentTessellationScalar;                                 // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                   // 0x0050(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_X8J5[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              GlobalVectorFieldScale;                                    // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              GlobalVectorFieldTightness;                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_XZLI[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldGlobal");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     RelativeTranslation;                                       // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FRotator                                    RelativeRotation;                                          // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector                                     RelativeScale3D;                                           // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              Intensity;                                                 // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              Tightness;                                                 // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bIgnoreComponentTransform : 1;                             // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTileX : 1;                                                // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTileY : 1;                                                // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bTileZ : 1;                                                // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_JYN0[0x3];                                     // 0x0085(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldLocal");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                        // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                     MaxInitialRotation;                                        // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                              // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_4E4G[0x4];                                     // 0x005C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotationRate");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldScale
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                          // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScale");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                  // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScaleOverLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                      // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistance
// 0x0070 (FullSize[0x00E0] - InheritedSize[0x0070])
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceCullFade");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFmod
// 0x0070 (FullSize[0x00E0] - InheritedSize[0x0070])
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFontSample
// 0x0010 (FullSize[0x0080] - InheritedSize[0x0070])
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                      // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                FontTexturePage;                                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FQXD[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (FullSize[0x00A0] - InheritedSize[0x0080])
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGuid                                       ExpressionGUID;                                            // 0x0088(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FName                                       Group;                                                     // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFunctionOutput
// 0x0078 (FullSize[0x00E8] - InheritedSize[0x0070])
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FString                                     OutputName;                                                // 0x0070(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	struct FString                                     Description;                                               // 0x0080(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash)
	int                                                SortPriority;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LIOT[0x4];                                     // 0x0094(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FExpressionInput                            A;                                                         // 0x0098(0x0038) (ZeroConstructor)
	unsigned char                                      bLastPreviewed : 1;                                        // 0x00D0(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_XO9A[0x3];                                     // 0x00D1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FGuid                                       Id;                                                        // 0x00D4(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_L2LP[0x4];                                     // 0x00E4(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionHash
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionHash : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionHash");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionIf
// 0x0128 (FullSize[0x0198] - InheritedSize[0x0070])
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            AGreaterThanB;                                             // 0x00E0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            AEqualsB;                                                  // 0x0118(0x0038) (ZeroConstructor)
	struct FExpressionInput                            ALessThanB;                                                // 0x0150(0x0038) (ZeroConstructor)
	float                                              EqualsThreshold;                                           // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstB;                                                    // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstAEqualsB;                                             // 0x0190(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_XP37[0x4];                                     // 0x0194(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionIfCondition
// 0x00F0 (FullSize[0x0160] - InheritedSize[0x0070])
class UMaterialExpressionIfCondition : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            IfTrue;                                                    // 0x00E0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            IfFalse;                                                   // 0x0118(0x0038) (ZeroConstructor)
	TEnumAsByte<Engine_EIfExpressionCondition>         Condition;                                                 // 0x0150(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EIfExpressionAttribute>         Attribute;                                                 // 0x0151(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_5T3J[0x2];                                     // 0x0152(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              ConstB;                                                    // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstIfTrue;                                               // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              ConstIfFalse;                                              // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionIfCondition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLocalDisturbanceTexture
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionLocalDisturbanceTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLocalDisturbanceTexture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionLogarithm2
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                         // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionLogarithm2");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0578 (FullSize[0x05E8] - InheritedSize[0x0070])
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                 // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Metallic;                                                  // 0x00A8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Specular;                                                  // 0x00E0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Roughness;                                                 // 0x0118(0x0038) (ZeroConstructor)
	struct FExpressionInput                            EmissiveColor;                                             // 0x0150(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Opacity;                                                   // 0x0188(0x0038) (ZeroConstructor)
	struct FExpressionInput                            OpacityMask;                                               // 0x01C0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Normal;                                                    // 0x01F8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            WorldPositionOffset;                                       // 0x0230(0x0038) (ZeroConstructor)
	struct FExpressionInput                            WorldDisplacement;                                         // 0x0268(0x0038) (ZeroConstructor)
	struct FExpressionInput                            TessellationMultiplier;                                    // 0x02A0(0x0038) (ZeroConstructor)
	struct FExpressionInput                            SubsurfaceColor;                                           // 0x02D8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            ClearCoat;                                                 // 0x0310(0x0038) (ZeroConstructor)
	struct FExpressionInput                            ClearCoatRoughness;                                        // 0x0348(0x0038) (ZeroConstructor)
	struct FExpressionInput                            AmbientOcclusion;                                          // 0x0380(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Refraction;                                                // 0x03B8(0x0038) (ZeroConstructor)
	struct FExpressionInput                            CustomizedUVs[0x8];                                        // 0x03F0(0x01C0) (ZeroConstructor)
	struct FExpressionInput                            PixelDepthOffset;                                          // 0x05B0(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionMakeMaterialAttributes");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionOneMinus
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionPanner
// 0x0080 (FullSize[0x00F0] - InheritedSize[0x0070])
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                                // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            Time;                                                      // 0x00A8(0x0038) (ZeroConstructor)
	float                                              SpeedX;                                                    // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SpeedY;                                                    // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint32_t                                           ConstCoordinate;                                           // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bFractionalPart;                                           // 0x00EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8ZUF[0x3];                                     // 0x00ED(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionScalarParameter
// 0x0010 (FullSize[0x00A0] - InheritedSize[0x0090])
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SliderMin;                                                 // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SliderMax;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                               bUseCustomPrimitiveData;                                   // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      PrimitiveDataIndex;                                        // 0x009D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LHRV[0x2];                                     // 0x009E(0x0002) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleAlignRotationToVelocity
// 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
class UParticleModuleAlignRotationToVelocity : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       AdditionalAngle;                                           // 0x0050(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleAlignRotationToVelocity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionDotProduct
// 0x0070 (FullSize[0x00E0] - InheritedSize[0x0070])
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                         // 0x0070(0x0038) (ZeroConstructor)
	struct FExpressionInput                            B;                                                         // 0x00A8(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFloor
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotation
// 0x0158 (FullSize[0x01A8] - InheritedSize[0x0050])
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	unsigned char                                      bUseGroupARotationForAllGroups : 1;                        // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_9C6H[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       StartRotation;                                             // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalStartRotation[0x5];                              // 0x0090(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (FullSize[0x01C8] - InheritedSize[0x01A8])
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x01A8(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                          // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      Scale : 1;                                                 // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_NZ42[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (FullSize[0x00A8] - InheritedSize[0x0088])
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0088(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundGroups
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                        // 0x0028(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData_KODI[0x50];                                    // 0x0038(0x0050) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundGroups");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionFrac
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (FullSize[0x0060] - InheritedSize[0x0038])
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                     // 0x0038(0x0020) (Edit)
	unsigned char                                      bLooping : 1;                                              // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7OWN[0x7];                                     // 0x0059(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SoundNodeDialoguePlayer");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionSquareRoot
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                     // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionStaticBool
// 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                 // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_VLHT[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                             // 0x0050(0x0010) (Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference)
	int                                                UpdateFlags;                                               // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bUsesVelocity : 1;                                         // 0x0064(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_QC0X[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (FullSize[0x0088] - InheritedSize[0x0068])
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0068(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParametersOverX
// 0x0018 (FullSize[0x0068] - InheritedSize[0x0050])
class UParticleModuleParametersOverX : public UParticleModule
{
public:
	float                                              GroupScales[0x6];                                          // 0x0050(0x0018) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParametersOverX");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParametersOverCustom
// 0x0188 (FullSize[0x01F0] - InheritedSize[0x0068])
class UParticleModuleParametersOverCustom : public UParticleModuleParametersOverX
{
public:
	struct FRawDistributionFloat                       DynamicParamScaleOverCustomScale;                          // 0x0068(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       SpawnRateOverCustomScale;                                  // 0x00A0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       LifetimeOverCustomScale;                                   // 0x00D8(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       SizeOverCustomScale;                                       // 0x0110(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       InitialVelocityOverCustomScale;                            // 0x0148(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       OpacityOverCustomScale;                                    // 0x0180(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       CylinderRadiusOverCustomScale;                             // 0x01B8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParametersOverCustom");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleParametersOverVelocity
// 0x0130 (FullSize[0x0198] - InheritedSize[0x0068])
class UParticleModuleParametersOverVelocity : public UParticleModuleParametersOverX
{
public:
	float                                              MinSpeed;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              MaxSpeed;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     VelocityComponentsWeights;                                 // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_SXC8[0x4];                                     // 0x007C(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       SpawnRateOverSpeedScale;                                   // 0x0080(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       LifetimeOverSpeedScale;                                    // 0x00B8(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       SizeOverSpeedScale;                                        // 0x00F0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       InitialVelocityOverSpeedScale;                             // 0x0128(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       OpacityOverSpeedScale;                                     // 0x0160(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleParametersOverVelocity");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SubUVAnimation
// 0x0060 (FullSize[0x0088] - InheritedSize[0x0028])
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SubImages_Horizontal;                                      // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SubImages_Vertical;                                        // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESubUVBoundingVertexCount>      BoundingMode;                                              // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_EOpacitySourceMode>             OpacitySourceMode;                                         // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_UNQC[0x2];                                     // 0x003A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlphaThreshold;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              SafeMarginSize;                                            // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ZY6M[0x44];                                    // 0x0044(0x0044) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SubUVAnimation");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRequired
// 0x02A8 (FullSize[0x02F8] - InheritedSize[0x0050])
class UParticleModuleRequired : public UParticleModule
{
public:
	unsigned char                                      bDeactivateGroupA : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bDeactivateGroupB : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDeactivateGroupC : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDeactivateGroupD : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDeactivateGroupE : 1;                                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_M8AC[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EPriorityGroups>                EmitterPriority;                                           // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9404[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseComplexitySystemWhenLooping : 1;                       // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_SV8C[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EPriorityGroups>                SwitchPriority;                                            // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_I1M8[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bReplacementGroupIsAdditive : 1;                           // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_52OJ[0x7];                                     // 0x0061(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialInterface*                          Material;                                                  // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     EmitterOrigin;                                             // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      EmitterOriginUseGroupAForAll : 1;                          // 0x007C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_FA8O[0x3];                                     // 0x007D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     AdditionalEmitterOrigins[0x5];                             // 0x0080(0x003C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FRotator                                    EmitterRotation;                                           // 0x00BC(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<Engine_EParticleScreenAlignment>       ScreenAlignment;                                           // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LZPE[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseGroupAScreenAlignmentForAllGroups : 1;                 // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_GUI7[0x3];                                     // 0x00CD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleScreenAlignment>       AdditionalScreenAlignments[0x5];                           // 0x00D0(0x0005) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_6D96[0x3];                                     // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlignmentInheritedVelocityScale;                           // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bUseLocalSpace : 1;                                        // 0x00DC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFollowEmitter : 1;                                        // 0x00DC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bTrailInGrandParentSpace : 1;                              // 0x00DC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bKillOnDeactivate : 1;                                     // 0x00DC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bKillOnCompleted : 1;                                      // 0x00DC(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_ZKY4[0x3];                                     // 0x00DD(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSortMode>              SortMode;                                                  // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BU0A[0x3];                                     // 0x00E1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseLegacyEmitterTime : 1;                                 // 0x00E4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_BUY3[0x3];                                     // 0x00E5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              EmitterDuration;                                           // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              EmitterDurationLow;                                        // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bEmitterDurationUseRange : 1;                              // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDurationRecalcEachLoop : 1;                               // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bSeparateLoopTimeForSubUV : 1;                             // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6CVG[0x3];                                     // 0x00F1(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                EmitterLoops;                                              // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionFloat                       LoopTime;                                                  // 0x00F8(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       LoopOffset;                                                // 0x0130(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       LoopTimeForSubUV;                                          // 0x0168(0x0038) (Edit, ContainsInstancedReference)
	float                                              LoopBeginTime;                                             // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              LoopEndTime;                                               // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRawDistributionFloat                       SpawnRate;                                                 // 0x01A8(0x0038) (ContainsInstancedReference)
	TEnumAsByte<Engine_EParticleBurstMethod>           ParticleBurstMethod;                                       // 0x01E0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_QY79[0x7];                                     // 0x01E1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FParticleBurst>                      BurstList;                                                 // 0x01E8(0x0010) (ExportObject, ZeroConstructor, NoClear)
	float                                              EmitterDelay;                                              // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              EmitterDelayLow;                                           // 0x01FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bEmitterDelayUseRange : 1;                                 // 0x0200(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                   // 0x0200(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_5MS2[0x3];                                     // 0x0201(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleSubUVInterpMethod>     InterpolationMethod;                                       // 0x0204(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_F36X[0x3];                                     // 0x0205(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                SubImages_Horizontal;                                      // 0x0208(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                SubImages_Vertical;                                        // 0x020C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bScaleUV : 1;                                              // 0x0210(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_SOC2[0x3];                                     // 0x0211(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              RandomImageTime;                                           // 0x0214(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int                                                RandomImageChanges;                                        // 0x0218(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bOverrideSystemMacroUV : 1;                                // 0x021C(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_3RUH[0x3];                                     // 0x021D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     MacroUVPosition;                                           // 0x0220(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              MacroUVRadius;                                             // 0x022C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      bUseMaxDrawCount : 1;                                      // 0x0230(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_RYKU[0x3];                                     // 0x0231(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MaxDrawCount;                                              // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_EEmitterNormalsMode>            EmitterNormalsMode;                                        // 0x0238(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_J7N1[0x3];                                     // 0x0239(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     NormalsSphereCenter;                                       // 0x023C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FVector                                     NormalsCylinderDirection;                                  // 0x0248(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                  // 0x0254(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_BWID[0x3];                                     // 0x0255(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EParticleUVFlipMode>            UVFlippingMode;                                            // 0x0258(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_9CRI[0x7];                                     // 0x0259(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UTexture2D*                                  CutoutTexture;                                             // 0x0260(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ESubUVBoundingVertexCount>      BoundingMode;                                              // 0x0268(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_EOpacitySourceMode>             OpacitySourceMode;                                         // 0x0269(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_FABN[0x2];                                     // 0x026A(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              AlphaThreshold;                                            // 0x026C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              SafeMarginSize;                                            // 0x0270(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_15YI[0x4];                                     // 0x0274(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FName>                               NamedMaterialOverrides;                                    // 0x0278(0x0010) (Edit, ZeroConstructor, AdvancedDisplay)
	unsigned char                                      bUseDistanceFading : 1;                                    // 0x0288(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_YCSW[0x3];                                     // 0x0289(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FarStopFade;                                               // 0x028C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FarStartFade;                                              // 0x0290(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NearStartFade;                                             // 0x0294(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NearStopFade;                                              // 0x0298(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      ApplyFOVDistanceScaling : 1;                               // 0x029C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseDistanceSizeScale : 1;                                 // 0x029C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_S6AO[0x3];                                     // 0x029D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              FarScaleFactor;                                            // 0x02A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FarScaleEndDistance;                                       // 0x02A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              FarScaleBeginDistance;                                     // 0x02A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NearScaleBeginDistance;                                    // 0x02AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NearScaleEndDistance;                                      // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              NearScaleFactor;                                           // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_ROZ2[0x40];                                    // 0x02B8(0x0040) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityConeEmitterPoint
// 0x0088 (FullSize[0x00E0] - InheritedSize[0x0058])
class UParticleModuleVelocityConeEmitterPoint : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                     // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       VelocityScale;                                             // 0x0090(0x0038) (Edit, ContainsInstancedReference)
	uint32_t                                           VelocityDistributeOverNPoints;                             // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                              VelocityNPointsRandomness;                                 // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                     AdditiveVelocity;                                          // 0x00D0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      UnknownData_8SBW[0x4];                                     // 0x00DC(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityConeEmitterPoint");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityInheritParent
// 0x0078 (FullSize[0x00D0] - InheritedSize[0x0058])
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                     // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      CustomParentScale;                                         // 0x0090(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      ScalesRespectEmitterRotation : 1;                          // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UseCustomLocalSpace : 1;                                   // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_Q6NA[0x3];                                     // 0x00C9(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              SpeedCap;                                                  // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0040 (FullSize[0x0098] - InheritedSize[0x0058])
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                               // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      Absolute : 1;                                              // 0x0090(0x0001) BIT_FIELD (Edit, ExportObject, NoDestructor)
	unsigned char                                      UnknownData_J8BG[0x7];                                     // 0x0091(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionUnderwaterTranslucencyTexture
// 0x0038 (FullSize[0x00A8] - InheritedSize[0x0070])
class UMaterialExpressionUnderwaterTranslucencyTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                               // 0x0070(0x0038) (ZeroConstructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionUnderwaterTranslucencyTexture");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVertexID
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionVertexID : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexID");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexNormalWS");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionViewProperty
// 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EMaterialExposedViewProperty>   Property;                                                  // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_F8QT[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionViewProperty");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionViewSize
// 0x0000 (FullSize[0x0070] - InheritedSize[0x0070])
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionViewSize");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (FullSize[0x0078] - InheritedSize[0x0070])
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<Engine_EWorldPositionIncludedOffsets>  WorldPositionShaderOffset;                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_L659[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialFunction
// 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                                   // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor)
	struct FString                                     Description;                                               // 0x0038(0x0010) (Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash)
	unsigned char                                      bExposeToLibrary : 1;                                      // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      UnknownData_CN90[0x7];                                     // 0x0049(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TArray<struct FText>                               LibraryCategoriesText;                                     // 0x0050(0x0010) (Edit, ZeroConstructor, AssetRegistrySearchable)
	TArray<class UMaterialExpression*>                 FunctionExpressions;                                       // 0x0060(0x0010) (ZeroConstructor)
	unsigned char                                      bReentrantFlag : 1;                                        // 0x0070(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      UnknownData_OA60[0x7];                                     // 0x0071(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialFunction");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialInstanceDynamic
// 0x0000 (FullSize[0x01B8] - InheritedSize[0x01B8])
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialInstanceDynamic");
		return ptr;
	}



	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void MergeParameters(class UMaterialInstance* MaterialInstance);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* MaterialA, class UMaterialInstance* MaterialB, float Alpha);
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* SourceMaterialToCopyFrom, bool bOverride);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialParameterCollection
// 0x0038 (FullSize[0x0060] - InheritedSize[0x0028])
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                   // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                          // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                          // 0x0048(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData_S52S[0x8];                                     // 0x0058(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialParameterCollection");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaterialParameterCollectionInstance
// 0x00C8 (FullSize[0x00F0] - InheritedSize[0x0028])
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData_XNQ7[0x8];                                     // 0x0028(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	class UMaterialParameterCollection*                Collection;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UWorld*                                      World;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_22ZX[0xB0];                                    // 0x0040(0x00B0) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaterialParameterCollectionInstance");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MatineeInterface
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UMatineeInterface : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MatineeInterface");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Texture2D
// 0x0058 (FullSize[0x0190] - InheritedSize[0x0138])
class UTexture2D : public UTexture
{
public:
	int                                                RequestedMips;                                             // 0x0138(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int                                                ResidentMips;                                              // 0x013C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int                                                StreamingIndex;                                            // 0x0140(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int                                                FirstResourceMemMip;                                       // 0x0144(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_LMX8[0x4];                                     // 0x0148(0x0004) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FIntPoint                                   ImportedSize;                                              // 0x014C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ForceMipLevelsToBeResidentTimestamp;                       // 0x0154(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                          // 0x0158(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bIsStreamable : 1;                                         // 0x0158(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor)
	unsigned char                                      bHasCancelationPending : 1;                                // 0x0158(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                           // 0x0158(0x0001) BIT_FIELD (Transient, NoDestructor)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                     // 0x0158(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_ULSD[0x3];                                     // 0x0159(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_ETextureAddress>                AddressX;                                                  // 0x015C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash)
	TEnumAsByte<Engine_ETextureAddress>                AddressY;                                                  // 0x015D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_69MR[0x2];                                     // 0x015E(0x0002) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	int                                                MinimumLoadedMips;                                         // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_AWYS[0x2C];                                    // 0x0164(0x002C) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}



	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CanvasRenderTarget2D
// 0x0018 (FullSize[0x0180] - InheritedSize[0x0168])
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                                // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UWorld>                       World;                                                     // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CanvasRenderTarget2D");
		return ptr;
	}



	void UpdateResource();
	void Render();
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	class UCanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height, TEnumAsByte<Engine_ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.CompressedCanvasRenderTarget2D
// 0x0018 (FullSize[0x01A8] - InheritedSize[0x0190])
class UCompressedCanvasRenderTarget2D : public UTexture2D
{
public:
	TWeakObjectPtr<class UWorld>                       World;                                                     // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper)
	class UCanvasRenderTarget2D*                       RenderTarget;                                              // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	unsigned char                                      UnknownData_MR9V[0x8];                                     // 0x01A0(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.CompressedCanvasRenderTarget2D");
		return ptr;
	}



	void UpdateResource();
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.MaybeCompressedCanvasRenderTarget2D
// 0x0020 (FullSize[0x0048] - InheritedSize[0x0028])
class UMaybeCompressedCanvasRenderTarget2D : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnCanvasUpdate;                                            // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCanvasRenderTarget2D*                       UncompressedRenderTarget;                                  // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)
	class UCompressedCanvasRenderTarget2D*             CompressedRenderTarget;                                    // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.MaybeCompressedCanvasRenderTarget2D");
		return ptr;
	}



	void UpdateResource();
	class UTexture* GetTexture();
	class UMaybeCompressedCanvasRenderTarget2D* STATIC_CreateMaybeCompressedCanvasRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<Engine_ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource);
	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavArea_Default
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavArea_Default : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea_Default");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavArea_LowHeight
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavArea_LowHeight : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea_LowHeight");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavArea_Null
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavArea_Null : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea_Null");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavArea_Obstacle
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavArea_Obstacle : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavArea_Obstacle");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavAreaMeta
// 0x0000 (FullSize[0x0040] - InheritedSize[0x0040])
class UNavAreaMeta : public UNavArea
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavAreaMeta");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.NavAreaMeta_SwitchByAgent
// 0x0080 (FullSize[0x00C0] - InheritedSize[0x0040])
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{
public:
	class UClass*                                      Agent0Area;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent1Area;                                                // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent2Area;                                                // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent3Area;                                                // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent4Area;                                                // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent5Area;                                                // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent6Area;                                                // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent7Area;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent8Area;                                                // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent9Area;                                                // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent10Area;                                               // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent11Area;                                               // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent12Area;                                               // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent13Area;                                               // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent14Area;                                               // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                      Agent15Area;                                               // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.NavAreaMeta_SwitchByAgent");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0190 (FullSize[0x01F0] - InheritedSize[0x0060])
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                                // 0x0060(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalSpawnCounts[0x5];                                // 0x0098(0x0118) (Edit, ContainsInstancedReference)
	unsigned char                                      bUseGroupAForAll : 1;                                      // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUseParticleTime : 1;                                      // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bUsePSysLocation : 1;                                      // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritVelocity : 1;                                      // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_1CXI[0x7];                                     // 0x01B1(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionVector                      InheritVelocityScale;                                      // 0x01B8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleKillBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleKillBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleKillBox
// 0x0078 (FullSize[0x00C8] - InheritedSize[0x0050])
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                           // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      UpperRightCorner;                                          // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAbsolute : 1;                                             // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bKillInside : 1;                                           // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                              // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_A2ZV[0x7];                                     // 0x00C1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleKillHeight
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                    // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bAbsolute : 1;                                             // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bFloor : 1;                                                // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bApplyPSysScale : 1;                                       // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_3REM[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleKillOnFFTWater
// 0x0010 (FullSize[0x0060] - InheritedSize[0x0050])
class UParticleModuleKillOnFFTWater : public UParticleModuleKillBase
{
public:
	TEnumAsByte<Engine_EFFTWaterKillPointLocation>     FFTWaterKillPointLocation;                                 // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_X4PL[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUseGroupAFFTWaterKillPointForAllGroups : 1;               // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_25CC[0x3];                                     // 0x0055(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<Engine_EFFTWaterKillPointLocation>     AdditionalFFTWaterKillPointLocations[0x5];                 // 0x0058(0x0005) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VRDN[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleKillOnFFTWater");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleLifetimeBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLifetime
// 0x0170 (FullSize[0x01C0] - InheritedSize[0x0050])
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	unsigned char                                      bUseGroupAValuesForAllGroups : 1;                          // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_SRUU[0x7];                                     // 0x0051(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FRawDistributionFloat                       LifeTime;                                                  // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       AdditionalLifetimes[0x5];                                  // 0x0090(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      UnknownData_10W0[0x18];                                    // 0x01A8(0x0018) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (FullSize[0x01E0] - InheritedSize[0x01C0])
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x01C0(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLightBase
// 0x0000 (FullSize[0x0050] - InheritedSize[0x0050])
class UParticleModuleLightBase : public UParticleModule
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLightBase");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLight
// 0x00E8 (FullSize[0x0138] - InheritedSize[0x0050])
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                 // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bAffectsTranslucency;                                      // 0x0051(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bIgnoreComponentTint;                                      // 0x0052(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                               bPreviewLightRadius;                                       // 0x0053(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay)
	float                                              SpawnFraction;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRawDistributionVector                      ColorScaleOverLife;                                        // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       BrightnessOverLife;                                        // 0x0090(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       RadiusScale;                                               // 0x00C8(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       LightExponent;                                             // 0x0100(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLight");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (FullSize[0x0158] - InheritedSize[0x0138])
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0138(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLight_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (FullSize[0x0198] - InheritedSize[0x0178])
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                            // 0x0178(0x0020) (Edit)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<Engine_ELocationBoneSocketSource>      SourceType;                                                // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_BONE[0x3];                                     // 0x0051(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     UniversalOffset;                                           // 0x0054(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                           // 0x0060(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<Engine_ELocationBoneSocketSelectionMethod> SelectionMethod;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_1E29[0x3];                                     // 0x0071(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bUpdatePositionEachFrame : 1;                              // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bOrientMeshEmitters : 1;                                   // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      bInheritBoneVelocity : 1;                                  // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_EQ1K[0x3];                                     // 0x0075(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     InheritVelocityScale;                                      // 0x0078(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              InheritedSpeedCap;                                         // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FName                                       SkelMeshActorParamName;                                    // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationDirect
// 0x00E0 (FullSize[0x0130] - InheritedSize[0x0050])
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                  // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      LocationOffset;                                            // 0x0088(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      ScaleFactor;                                               // 0x00C0(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      Direction;                                                 // 0x00F8(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (FullSize[0x0070] - InheritedSize[0x0050])
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TEnumAsByte<Engine_ELocationEmitterSelectionMethod> SelectionMethod;                                           // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_WN72[0x3];                                     // 0x0059(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      InheritSourceVelocity : 1;                                 // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_GT9T[0x3];                                     // 0x005D(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceVelocityScale;                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      bInheritSourceRotation : 1;                                // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_6R95[0x3];                                     // 0x0065(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	float                                              InheritSourceRotationScale;                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_VUKU[0x4];                                     // 0x006C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                               // 0x0050(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleLocationGPU
// 0x0158 (FullSize[0x01A8] - InheritedSize[0x0050])
class UParticleModuleLocationGPU : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                             // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionVector                      AdditionalStartLocations[0x5];                             // 0x0088(0x0118) (Edit, ContainsInstancedReference, AdvancedDisplay)
	unsigned char                                      bUseGroupAStartLocationForAllGroups : 1;                   // 0x01A0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay)
	unsigned char                                      UnknownData_IEJT[0x7];                                     // 0x01A1(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleLocationGPU");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModulePivotOffset
// 0x0008 (FullSize[0x0058] - InheritedSize[0x0050])
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                               // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModulePivotOffset");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleVelocityCone
// 0x0330 (FullSize[0x0388] - InheritedSize[0x0058])
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                     // 0x0058(0x0038) (Edit, ContainsInstancedReference)
	struct FRawDistributionFloat                       Velocity;                                                  // 0x0090(0x0038) (Edit, ContainsInstancedReference)
	struct FVector                                     Direction;                                                 // 0x00C8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	unsigned char                                      bUseGroupAForAll : 1;                                      // 0x00D4(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_CLWX[0x3];                                     // 0x00D5(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVelocityConeGroupParams                    AdditionalParams[0x5];                                     // 0x00D8(0x0280) (Edit, ContainsInstancedReference)
	uint32_t                                           VelocityDistributeOverNPoints;                             // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                              VelocityNPointsRandomness;                                 // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                     AdditiveVelocity;                                          // 0x0360(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              ConeDepthScale;                                            // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      WorldSpaceOffset : 1;                                      // 0x0370(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_7S6B[0x3];                                     // 0x0371(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	struct FVector                                     EmitterOriginOffset;                                       // 0x0374(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                              PushAwayFromCenterFactor;                                  // 0x0380(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_DSU4[0x4];                                     // 0x0384(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                            // 0x0050(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0040 (FullSize[0x0090] - InheritedSize[0x0050])
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                   // 0x0050(0x0038) (Edit, ContainsInstancedReference)
	unsigned char                                      bScaleRotRate : 1;                                         // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor)
	unsigned char                                      UnknownData_JH7K[0x7];                                     // 0x0089(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0038 (FullSize[0x0088] - InheritedSize[0x0050])
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                            // 0x0050(0x0038) (Edit, ContainsInstancedReference)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.SubsurfaceProfile
// 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                                  // 0x0028(0x0024) (Edit)
	unsigned char                                      UnknownData_OF8G[0x4];                                     // 0x004C(0x0004) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.SubsurfaceProfile");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TestInterfaceAlternative
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UTestInterfaceAlternative : public UInterface
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TestInterfaceAlternative");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextPropertyTestObject
// 0x00A8 (FullSize[0x00D0] - InheritedSize[0x0028])
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                             // 0x0028(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_AS3V[0x20];                                    // 0x0028(0x0020) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FText                                       UndefaultedText;                                           // 0x0060(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_QE2N[0x20];                                    // 0x0060(0x0020) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FText                                       TransientText;                                             // 0x0098(0x0018) ELEMENT_SIZE_MISMATCH
	unsigned char                                      UnknownData_0YG9[0x20];                                    // 0x0098(0x0020) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextPropertyTestObject");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.LightMapTexture2D
// 0x0008 (FullSize[0x0198] - InheritedSize[0x0190])
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData_LAMH[0x8];                                     // 0x0190(0x0008) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ShadowMapTexture2D
// 0x0008 (FullSize[0x0198] - InheritedSize[0x0190])
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<Engine_EShadowMapFlags>                ShadowmapFlags;                                            // 0x0190(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_4F8N[0x7];                                     // 0x0191(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureLightProfile
// 0x0008 (FullSize[0x0198] - InheritedSize[0x0190])
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                                // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	float                                              TextureMultiplier;                                         // 0x0194(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureLightProfile");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.Texture2DDynamic
// 0x0018 (FullSize[0x0150] - InheritedSize[0x0138])
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData_H6AB[0x8];                                     // 0x0138(0x0008) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	TEnumAsByte<CoreUObject_EPixelFormat>              Format;                                                    // 0x0140(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_69RY[0xF];                                     // 0x0141(0x000F) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.Texture2DDynamic");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureCube
// 0x0058 (FullSize[0x0190] - InheritedSize[0x0138])
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData_W1DH[0x58];                                    // 0x0138(0x0058) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.TextureRenderTargetCube
// 0x0020 (FullSize[0x0160] - InheritedSize[0x0140])
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                     // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash)
	struct FLinearColor                                ClearColor;                                                // 0x0144(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor)
	TEnumAsByte<CoreUObject_EPixelFormat>              OverrideFormat;                                            // 0x0154(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	unsigned char                                      UnknownData_2U6J[0x3];                                     // 0x0155(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
	unsigned char                                      bHDR : 1;                                                  // 0x0158(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable)
	unsigned char                                      bForceLinearGamma : 1;                                     // 0x0158(0x0001) BIT_FIELD (NoDestructor)
	unsigned char                                      UnknownData_0F9A[0x7];                                     // 0x0159(0x0007) MISSED OFFSET (PADDING)


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

// Class Engine.ThumbnailInfo
// 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
class UThumbnailInfo : public UObject
{
public:


	static UClass* StaticClass()
	{
		static UClass* ptr = UObject::FindClass("Class Engine.ThumbnailInfo");
		return ptr;
	}



	void AfterRead();
	void BeforeDelete();

};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
