#pragma once

// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid

#include "Engine_Structs.h"


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EngineCustomTimeStep: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavigationTypes: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavigationPathGenerator: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavPathObserverInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Interface_PostProcessVolume: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RVOAvoidanceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SimpleConstructionScript: public Object
{
public:
	TArray<class SCS_Node*>                                      RootNodes;                                         // 0x28(0x10)
	class SCS_Node*                                              DefaultSceneRootNode;                              // 0x38(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MaterialInterface: public Object
{
public:
	char                                                         pad0x8_S43Y6[0x8];                                 // 0x28(0x8)
	class SubsurfaceProfile*                                     SubsurfaceProfile;                                 // 0x30(0x8)
	char                                                         pad0x4_B97L8[0x4];                                 // 0x38(0x4)
	struct LightmassMaterialInterfaceSettings                    LightmassSettings;                                 // 0x3c(0x14)
	char                                                         pad0x8_8NBHJ[0x8];                                 // 0x50(0x8)
};


// Size 0x9c0 (Full Size[0x9e8] - InheritedSize[0x28]
class Engine: public Object
{
public:
	char                                                         pad0x8_6BI6B[0x8];                                 // 0x28(0x8)
	class Font*                                                  TinyFont;                                          // 0x30(0x8)
	struct StringAssetReference                                  TinyFontName;                                      // 0x38(0x10)
	class Font*                                                  SmallFont;                                         // 0x48(0x8)
	struct StringAssetReference                                  SmallFontName;                                     // 0x50(0x10)
	class Font*                                                  MediumFont;                                        // 0x60(0x8)
	struct StringAssetReference                                  MediumFontName;                                    // 0x68(0x10)
	class Font*                                                  LargeFont;                                         // 0x78(0x8)
	struct StringAssetReference                                  LargeFontName;                                     // 0x80(0x10)
	class Font*                                                  MonoFont;                                          // 0x90(0x8)
	struct StringAssetReference                                  MonoFontName;                                      // 0x98(0x10)
	class Font*                                                  SubtitleFont;                                      // 0xa8(0x8)
	struct StringAssetReference                                  SubtitleFontName;                                  // 0xb0(0x10)
	class Font*                                                  HugeFont;                                          // 0xc0(0x8)
	struct StringAssetReference                                  HugeFontName;                                      // 0xc8(0x10)
	TArray<class Font*>                                          AdditionalFonts;                                   // 0xd8(0x10)
	char                                                         pad0x8_XS1CZ[0x8];                                 // 0xe8(0x8)
	TArray<String>                                               AdditionalFontNames;                               // 0xf0(0x10)
	class UClass*                                                ConsoleClass;                                      // 0x100(0x8)
	struct StringClassReference                                  ConsoleClassName;                                  // 0x108(0x10)
	class UClass*                                                GameViewportClientClass;                           // 0x118(0x8)
	struct StringClassReference                                  GameViewportClientClassName;                       // 0x120(0x10)
	class UClass*                                                LocalPlayerClass;                                  // 0x130(0x8)
	struct StringClassReference                                  LocalPlayerClassName;                              // 0x138(0x10)
	class UClass*                                                WorldSettingsClass;                                // 0x148(0x8)
	struct StringClassReference                                  WorldSettingsClassName;                            // 0x150(0x10)
	struct StringClassReference                                  NavigationSystemClassName;                         // 0x160(0x10)
	class UClass*                                                NavigationSystemClass;                             // 0x170(0x8)
	struct StringClassReference                                  AvoidanceManagerClassName;                         // 0x178(0x10)
	class UClass*                                                AvoidanceManagerClass;                             // 0x188(0x8)
	class UClass*                                                PhysicsCollisionHandlerClass;                      // 0x190(0x8)
	struct StringClassReference                                  PhysicsCollisionHandlerClassName;                  // 0x198(0x10)
	struct StringClassReference                                  GameUserSettingsClassName;                         // 0x1a8(0x10)
	class UClass*                                                GameUserSettingsClass;                             // 0x1b8(0x8)
	struct StringClassReference                                  AIControllerClassName;                             // 0x1c0(0x10)
	class GameUserSettings*                                      GameUserSettings;                                  // 0x1d0(0x8)
	class UClass*                                                LevelScriptActorClass;                             // 0x1d8(0x8)
	struct StringClassReference                                  LevelScriptActorClassName;                         // 0x1e0(0x10)
	struct StringClassReference                                  DefaultBlueprintBaseClassName;                     // 0x1f0(0x10)
	struct StringClassReference                                  GameSingletonClassName;                            // 0x200(0x10)
	class Object*                                                GameSingleton;                                     // 0x210(0x8)
	class UClass*                                                DefaultPreviewPawnClass;                           // 0x218(0x8)
	struct StringClassReference                                  DefaultPreviewPawnClassName;                       // 0x220(0x10)
	struct FString                                               PlayOnConsoleSaveDir;                              // 0x230(0x10)
	class Texture2D*                                             DefaultTexture;                                    // 0x240(0x8)
	struct StringAssetReference                                  DefaultTextureName;                                // 0x248(0x10)
	class Texture*                                               DefaultDiffuseTexture;                             // 0x258(0x8)
	struct StringAssetReference                                  DefaultDiffuseTextureName;                         // 0x260(0x10)
	class Texture2D*                                             DefaultBSPVertexTexture;                           // 0x270(0x8)
	struct StringAssetReference                                  DefaultBSPVertexTextureName;                       // 0x278(0x10)
	class Texture2D*                                             HighFrequencyNoiseTexture;                         // 0x288(0x8)
	struct StringAssetReference                                  HighFrequencyNoiseTextureName;                     // 0x290(0x10)
	class Texture2D*                                             DefaultBokehTexture;                               // 0x2a0(0x8)
	struct StringAssetReference                                  DefaultBokehTextureName;                           // 0x2a8(0x10)
	class Texture2D*                                             BlueNoiseTexture;                                  // 0x2b8(0x8)
	struct StringAssetReference                                  BlueNoiseTextureName;                              // 0x2c0(0x10)
	class Texture2D*                                             HDRCalibrationTexture;                             // 0x2d0(0x8)
	struct StringAssetReference                                  HDRCalibrationTextureName;                         // 0x2d8(0x10)
	class Material*                                              WireframeMaterial;                                 // 0x2e8(0x8)
	struct FString                                               WireframeMaterialName;                             // 0x2f0(0x10)
	class Material*                                              DebugMeshMaterial;                                 // 0x300(0x8)
	struct StringAssetReference                                  DebugMeshMaterialName;                             // 0x308(0x10)
	class Material*                                              LevelColorationLitMaterial;                        // 0x318(0x8)
	struct FString                                               LevelColorationLitMaterialName;                    // 0x320(0x10)
	class Material*                                              LevelColorationUnlitMaterial;                      // 0x330(0x8)
	struct FString                                               LevelColorationUnlitMaterialName;                  // 0x338(0x10)
	class Material*                                              TriangleDensityScreenSpaceMaterial;                // 0x348(0x8)
	struct FString                                               TriangleDensityScreenSpaceMaterialName;            // 0x350(0x10)
	class Material*                                              TriangleDensityWorldSpaceMaterial;                 // 0x360(0x8)
	struct FString                                               TriangleDensityWorldSpaceMaterialName;             // 0x368(0x10)
	class Material*                                              LightingTexelDensityMaterial;                      // 0x378(0x8)
	struct FString                                               LightingTexelDensityName;                          // 0x380(0x10)
	class Material*                                              ShadedLevelColorationLitMaterial;                  // 0x390(0x8)
	struct FString                                               ShadedLevelColorationLitMaterialName;              // 0x398(0x10)
	class Material*                                              ShadedLevelColorationUnlitMaterial;                // 0x3a8(0x8)
	struct FString                                               ShadedLevelColorationUnlitMaterialName;            // 0x3b0(0x10)
	class Material*                                              RemoveSurfaceMaterial;                             // 0x3c0(0x8)
	struct StringAssetReference                                  RemoveSurfaceMaterialName;                         // 0x3c8(0x10)
	class Material*                                              VertexColorMaterial;                               // 0x3d8(0x8)
	struct FString                                               VertexColorMaterialName;                           // 0x3e0(0x10)
	class Material*                                              VertexColorViewModeMaterial_ColorOnly;             // 0x3f0(0x8)
	struct FString                                               VertexColorViewModeMaterialName_ColorOnly;         // 0x3f8(0x10)
	class Material*                                              VertexColorViewModeMaterial_AlphaAsColor;          // 0x408(0x8)
	struct FString                                               VertexColorViewModeMaterialName_AlphaAsColor;      // 0x410(0x10)
	class Material*                                              VertexColorViewModeMaterial_RedOnly;               // 0x420(0x8)
	struct FString                                               VertexColorViewModeMaterialName_RedOnly;           // 0x428(0x10)
	class Material*                                              VertexColorViewModeMaterial_GreenOnly;             // 0x438(0x8)
	struct FString                                               VertexColorViewModeMaterialName_GreenOnly;         // 0x440(0x10)
	class Material*                                              VertexColorViewModeMaterial_BlueOnly;              // 0x450(0x8)
	struct FString                                               VertexColorViewModeMaterialName_BlueOnly;          // 0x458(0x10)
	class Material*                                              ConstraintLimitMaterial;                           // 0x468(0x8)
	class MaterialInstanceDynamic*                               ConstraintLimitMaterialX;                          // 0x470(0x8)
	class MaterialInstanceDynamic*                               ConstraintLimitMaterialY;                          // 0x478(0x8)
	class MaterialInstanceDynamic*                               ConstraintLimitMaterialZ;                          // 0x480(0x8)
	struct StringAssetReference                                  ConstraintLimitMaterialName;                       // 0x488(0x10)
	class Material*                                              InvalidLightmapSettingsMaterial;                   // 0x498(0x8)
	struct StringAssetReference                                  InvalidLightmapSettingsMaterialName;               // 0x4a0(0x10)
	class Material*                                              PreviewShadowsIndicatorMaterial;                   // 0x4b0(0x8)
	struct StringAssetReference                                  PreviewShadowsIndicatorMaterialName;               // 0x4b8(0x10)
	class Material*                                              ArrowMaterial;                                     // 0x4c8(0x8)
	struct StringAssetReference                                  ArrowMaterialName;                                 // 0x4d0(0x10)
	struct LinearColor                                           LightingOnlyBrightness;                            // 0x4e0(0x10)
	TArray<struct Color>                                         LightComplexityColors;                             // 0x4f0(0x10)
	TArray<struct LinearColor>                                   ShaderComplexityColors;                            // 0x500(0x10)
	TArray<struct LinearColor>                                   StationaryLightOverlapColors;                      // 0x510(0x10)
	TArray<struct LinearColor>                                   LODColorationColors;                               // 0x520(0x10)
	float                                                        MaxPixelShaderAdditiveComplexityCount;             // 0x530(0x4)
	float                                                        MaxES2PixelShaderAdditiveComplexityCount;          // 0x534(0x4)
	float                                                        MinLightMapDensity;                                // 0x538(0x4)
	float                                                        IdealLightMapDensity;                              // 0x53c(0x4)
	float                                                        MaxLightMapDensity;                                // 0x540(0x4)
	bool                                                         bRenderLightMapDensityGrayscale;                   // 0x544(0x1)
	char                                                         pad0x3_OZQ00[0x3];                                 // 0x545(0x3)
	float                                                        RenderLightMapDensityGrayscaleScale;               // 0x548(0x4)
	float                                                        RenderLightMapDensityColorScale;                   // 0x54c(0x4)
	struct LinearColor                                           LightMapDensityVertexMappedColor;                  // 0x550(0x10)
	struct LinearColor                                           LightMapDensitySelectedColor;                      // 0x560(0x10)
	TArray<struct StatColorMapping>                              StatColorMappings;                                 // 0x570(0x10)
	class PhysicalMaterial*                                      DefaultPhysMaterial;                               // 0x580(0x8)
	struct StringAssetReference                                  DefaultPhysMaterialName;                           // 0x588(0x10)
	TArray<struct GameNameRedirect>                              ActiveGameNameRedirects;                           // 0x598(0x10)
	TArray<struct ClassRedirect>                                 ActiveClassRedirects;                              // 0x5a8(0x10)
	TArray<struct PluginRedirect>                                ActivePluginRedirects;                             // 0x5b8(0x10)
	TArray<struct StructRedirect>                                ActiveStructRedirects;                             // 0x5c8(0x10)
	class Texture2D*                                             PreIntegratedSkinBRDFTexture;                      // 0x5d8(0x8)
	struct StringAssetReference                                  PreIntegratedSkinBRDFTextureName;                  // 0x5e0(0x10)
	class Texture2D*                                             MiniFontTexture;                                   // 0x5f0(0x8)
	struct StringAssetReference                                  MiniFontTextureName;                               // 0x5f8(0x10)
	class Texture*                                               WeightMapPlaceholderTexture;                       // 0x608(0x8)
	struct StringAssetReference                                  WeightMapPlaceholderTextureName;                   // 0x610(0x10)
	class Texture2D*                                             LightMapDensityTexture;                            // 0x620(0x8)
	struct StringAssetReference                                  LightMapDensityTextureName;                        // 0x628(0x10)
	char                                                         pad0x8_FF40K[0x8];                                 // 0x638(0x8)
	class GameViewportClient*                                    GameViewport;                                      // 0x640(0x8)
	TArray<String>                                               DeferredCommands;                                  // 0x648(0x10)
	int                                                          TickCycles;                                        // 0x658(0x4)
	int                                                          GameCycles;                                        // 0x65c(0x4)
	int                                                          ClientCycles;                                      // 0x660(0x4)
	float                                                        NearClipPlane;                                     // 0x664(0x4)
	bool                                                         bHardwareSurveyEnabled;                            // 0x668(0x1)
	bool                                                         bSubtitlesEnabled;                                 // 0x668(0x1)
	bool                                                         bSubtitlesForcedOff;                               // 0x668(0x1)
	char                                                         pad0x3_626BO[0x3];                                 // 0x669(0x3)
	int                                                          MaximumLoopIterationCount;                         // 0x66c(0x4)
	bool                                                         bCanBlueprintsTickByDefault;                       // 0x670(0x1)
	bool                                                         bOptimizeAnimBlueprintMemberVariableAccess;        // 0x670(0x1)
	bool                                                         bEnableEditorPSysRealtimeLOD;                      // 0x670(0x1)
	bool                                                         bSmoothFrameRate;                                  // 0x670(0x1)
	bool                                                         bUseFixedFrameRate;                                // 0x670(0x1)
	char                                                         pad0x3_FXJGD[0x3];                                 // 0x671(0x3)
	float                                                        FixedFrameRate;                                    // 0x674(0x4)
	struct FloatRange                                            SmoothedFrameRateRange;                            // 0x678(0x10)
	class EngineCustomTimeStep*                                  CustomTimeStep;                                    // 0x688(0x8)
	char                                                         pad0x20_SPNC4[0x20];                               // 0x690(0x20)
	class TimecodeProvider*                                      TimecodeProvider;                                  // 0x6b0(0x8)
	char                                                         pad0x19_MSTSS[0x19];                               // 0x6b8(0x19)
	bool                                                         bGenerateDefaultTimecode;                          // 0x6d1(0x1)
	char                                                         pad0xa_P53G9[0xa];                                 // 0x6d2(0xa)
	float                                                        GenerateDefaultTimecodeFrameDelay;                 // 0x6dc(0x4)
	bool                                                         bCheckForMultiplePawnsSpawnedInAFrame;             // 0x6e0(0x1)
	char                                                         pad0x3_OHFL2[0x3];                                 // 0x6e1(0x3)
	int                                                          NumPawnsAllowedToBeSpawnedInAFrame;                // 0x6e4(0x4)
	bool                                                         bShouldGenerateLowQualityLightmaps;                // 0x6e8(0x1)
	char                                                         pad0x3_5VYP3[0x3];                                 // 0x6e9(0x3)
	struct Color                                                 C_WorldBox;                                        // 0x6ec(0x4)
	struct Color                                                 C_BrushWire;                                       // 0x6f0(0x4)
	struct Color                                                 C_AddWire;                                         // 0x6f4(0x4)
	struct Color                                                 C_SubtractWire;                                    // 0x6f8(0x4)
	struct Color                                                 C_SemiSolidWire;                                   // 0x6fc(0x4)
	struct Color                                                 C_NonSolidWire;                                    // 0x700(0x4)
	struct Color                                                 C_WireBackground;                                  // 0x704(0x4)
	struct Color                                                 C_ScaleBoxHi;                                      // 0x708(0x4)
	struct Color                                                 C_VolumeCollision;                                 // 0x70c(0x4)
	struct Color                                                 C_BSPCollision;                                    // 0x710(0x4)
	struct Color                                                 C_OrthoBackground;                                 // 0x714(0x4)
	struct Color                                                 C_Volume;                                          // 0x718(0x4)
	struct Color                                                 C_BrushShape;                                      // 0x71c(0x4)
	float                                                        StreamingDistanceFactor;                           // 0x720(0x4)
	char                                                         TransitionType;                                    // 0x724(0x1)
	char                                                         pad0x3_AVJ2D[0x3];                                 // 0x725(0x3)
	struct FString                                               TransitionDescription;                             // 0x728(0x10)
	struct FString                                               TransitionGameMode;                                // 0x738(0x10)
	float                                                        MeshLODRange;                                      // 0x748(0x4)
	bool                                                         bAllowMatureLanguage;                              // 0x74c(0x1)
	char                                                         pad0x3_3N1QC[0x3];                                 // 0x74d(0x3)
	float                                                        CameraRotationThreshold;                           // 0x750(0x4)
	float                                                        CameraTranslationThreshold;                        // 0x754(0x4)
	float                                                        PrimitiveProbablyVisibleTime;                      // 0x758(0x4)
	float                                                        MaxOcclusionPixelsFraction;                        // 0x75c(0x4)
	bool                                                         bPauseOnLossOfFocus;                               // 0x760(0x1)
	char                                                         pad0x3_L00ZR[0x3];                                 // 0x761(0x3)
	int                                                          MaxParticleResize;                                 // 0x764(0x4)
	int                                                          MaxParticleResizeWarn;                             // 0x768(0x4)
	char                                                         pad0x4_6YWMV[0x4];                                 // 0x76c(0x4)
	TArray<struct DropNoteInfo>                                  PendingDroppedNotes;                               // 0x770(0x10)
	struct RigidBodyErrorCorrection                              PhysicErrorCorrection;                             // 0x780(0x1c)
	float                                                        NetClientTicksPerSecond;                           // 0x79c(0x4)
	bool                                                         bHasPendingGlobalReregister;                       // 0x7a0(0x1)
	char                                                         pad0x3_AQPZ2[0x3];                                 // 0x7a1(0x3)
	float                                                        DisplayGamma;                                      // 0x7a4(0x4)
	float                                                        MinDesiredFrameRate;                               // 0x7a8(0x4)
	struct LinearColor                                           DefaultSelectedMaterialColor;                      // 0x7ac(0x10)
	struct LinearColor                                           SelectedMaterialColor;                             // 0x7bc(0x10)
	struct LinearColor                                           SelectionOutlineColor;                             // 0x7cc(0x10)
	struct LinearColor                                           SubduedSelectionOutlineColor;                      // 0x7dc(0x10)
	struct LinearColor                                           SelectedMaterialColorOverride;                     // 0x7ec(0x10)
	bool                                                         bIsOverridingSelectedColor;                        // 0x7fc(0x1)
	char                                                         pad0x3_UDIWD[0x3];                                 // 0x7fd(0x3)
	bool                                                         bEnableOnScreenDebugMessages;                      // 0x800(0x1)
	bool                                                         bEnableOnScreenDebugMessagesDisplay;               // 0x800(0x1)
	bool                                                         bSuppressMapWarnings;                              // 0x800(0x1)
	bool                                                         bCookSeparateSharedMPGameContent;                  // 0x800(0x1)
	bool                                                         bDisableAILogging;                                 // 0x800(0x1)
	char                                                         pad0x3_LPT6A[0x3];                                 // 0x801(0x3)
	int                                                          ScreenSaverInhibitorSemaphore;                     // 0x80c(0x4)
	bool                                                         bLockReadOnlyLevels;                               // 0x810(0x1)
	char                                                         pad0x7_3DZN3[0x7];                                 // 0x811(0x7)
	struct FString                                               ParticleEventManagerClassPath;                     // 0x818(0x10)
	char                                                         pad0x10_5G6CH[0x10];                               // 0x828(0x10)
	float                                                        SelectionHighlightIntensity;                       // 0x838(0x4)
	float                                                        BSPSelectionHighlightIntensity;                    // 0x83c(0x4)
	float                                                        HoverHighlightIntensity;                           // 0x840(0x4)
	float                                                        SelectionHighlightIntensityBillboards;             // 0x844(0x4)
	char                                                         pad0x130_UDT1I[0x130];                             // 0x848(0x130)
	TArray<struct NetDriverDefinition>                           NetDriverDefinitions;                              // 0x978(0x10)
	TArray<String>                                               ServerActors;                                      // 0x988(0x10)
	TArray<String>                                               RuntimeServerActors;                               // 0x998(0x10)
	bool                                                         bStartedLoadMapMovie;                              // 0x9a8(0x1)
	char                                                         pad0x17_CHNHW[0x17];                               // 0x9a9(0x17)
	int                                                          NextWorldContextHandle;                            // 0x9c0(0x4)
	char                                                         pad0x24_0WRVB[0x24];                               // 0x9c4(0x24)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomWidgetDrawerInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class SlateBrushAsset: public Object
{
public:
	struct SlateBrush                                            Brush;                                             // 0x28(0x90)
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class Console: public Object
{
public:
	char                                                         pad0x10_68P9S[0x10];                               // 0x28(0x10)
	class LocalPlayer*                                           ConsoleTargetPlayer;                               // 0x38(0x8)
	class Texture2D*                                             DefaultTexture_Black;                              // 0x40(0x8)
	class Texture2D*                                             DefaultTexture_White;                              // 0x48(0x8)
	char                                                         pad0x18_BTWET[0x18];                               // 0x50(0x18)
	TArray<String>                                               HistoryBuffer;                                     // 0x68(0x10)
	char                                                         pad0x78_207NN[0x78];                               // 0x78(0x78)
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class CameraAnimInst: public Object
{
public:
	class CameraAnim*                                            CamAnim;                                           // 0x28(0x8)
	class InterpGroupInst*                                       InterpGroupInst;                                   // 0x30(0x8)
	char                                                         pad0x1c_JPBLN[0x1c];                               // 0x38(0x1c)
	float                                                        PlayRate;                                          // 0x54(0x4)
	char                                                         pad0x10_TNNY7[0x10];                               // 0x58(0x10)
	class InterpTrackMove*                                       MoveTrack;                                         // 0x68(0x8)
	class InterpTrackInstMove*                                   MoveInst;                                          // 0x70(0x8)
	class CurveFloat*                                            BlendInCurve;                                      // 0x78(0x8)
	char                                                         PlaySpace;                                         // 0x80(0x1)
	char                                                         pad0x9f_YZ9V7[0x9f];                               // 0x81(0x9f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DPICustomScalingRule: public Object
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class CheatManager: public Object
{
public:
	class DebugCameraController*                                 DebugCameraControllerRef;                          // 0x28(0x8)
	class UClass*                                                DebugCameraControllerClass;                        // 0x30(0x8)
	char                                                         pad0x40_EBIHW[0x40];                               // 0x38(0x40)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AnimationAsset: public Object
{
public:
	class Skeleton*                                              Skeleton;                                          // 0x28(0x8)
	char                                                         pad0x10_55G1X[0x10];                               // 0x30(0x10)
	TArray<class AnimMetaData*>                                  MetaData;                                          // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ParticleModuleEventSendToGame: public Object
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class TextPropertyTestObject: public Object
{
public:
	struct FText                                                 DefaultedText;                                     // 0x28(0x38)
	struct FText                                                 UndefaultedText;                                   // 0x60(0x38)
	struct FText                                                 TransientText;                                     // 0x98(0x38)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ReverbEffect: public Object
{
public:
	float                                                        Density;                                           // 0x28(0x4)
	float                                                        Diffusion;                                         // 0x2c(0x4)
	float                                                        Gain;                                              // 0x30(0x4)
	float                                                        GainHF;                                            // 0x34(0x4)
	float                                                        DecayTime;                                         // 0x38(0x4)
	float                                                        DecayHFRatio;                                      // 0x3c(0x4)
	float                                                        ReflectionsGain;                                   // 0x40(0x4)
	float                                                        ReflectionsDelay;                                  // 0x44(0x4)
	float                                                        LateGain;                                          // 0x48(0x4)
	float                                                        LateDelay;                                         // 0x4c(0x4)
	float                                                        AirAbsorptionGainHF;                               // 0x50(0x4)
	float                                                        RoomRolloffFactor;                                 // 0x54(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ParticleSystemReplay: public Object
{
public:
	int                                                          ClipIDNumber;                                      // 0x28(0x4)
	char                                                         pad0x14_C3JK1[0x14];                               // 0x2c(0x14)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Interface_AssetUserData: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ParticleModule: public Object
{
public:
	bool                                                         bSpawnModule;                                      // 0x28(0x1)
	bool                                                         bUpdateModule;                                     // 0x28(0x1)
	bool                                                         bFinalUpdateModule;                                // 0x28(0x1)
	bool                                                         bUpdateForGPUEmitter;                              // 0x28(0x1)
	bool                                                         bCurvesAsColor;                                    // 0x28(0x1)
	bool                                                         b3DDrawMode;                                       // 0x28(0x1)
	bool                                                         bSupported3DDrawMode;                              // 0x28(0x1)
	bool                                                         bEnabled;                                          // 0x28(0x1)
	bool                                                         bEditable;                                         // 0x29(0x1)
	bool                                                         LODDuplicate;                                      // 0x29(0x1)
	bool                                                         bSupportsRandomSeed;                               // 0x29(0x1)
	bool                                                         bRequiresLoopingNotification;                      // 0x29(0x1)
	char                                                         pad0x2_MU8XP[0x2];                                 // 0x2a(0x2)
	char                                                         LODValidity;                                       // 0x2c(0x1)
	char                                                         pad0x3_TRTVD[0x3];                                 // 0x2d(0x3)
	TArray<int>                                                  ModuleInstanceOffsets;                             // 0x30(0x10)
	TArray<int>                                                  ModuleOffsets;                                     // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhysicalMaterialPropertyBase: public Object
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class DeviceProfileManager: public Object
{
public:
	TArray<class Object*>                                        Profiles;                                          // 0x28(0x10)
	char                                                         pad0x20_SYVLD[0x20];                               // 0x38(0x20)
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class MaterialParameterCollectionInstance: public Object
{
public:
	char                                                         pad0x8_7VBQO[0x8];                                 // 0x28(0x8)
	class MaterialParameterCollection*                           Collection;                                        // 0x30(0x8)
	class World*                                                 World;                                             // 0x38(0x8)
	char                                                         pad0xb0_KOHW9[0xb0];                               // 0x40(0xb0)
};


// Size 0xd0 (Full Size[0xf8] - InheritedSize[0x28]
class PhysicsAsset: public Object
{
public:
	TArray<class BodySetup*>                                     BodySetup;                                         // 0x28(0x10)
	TArray<int>                                                  BoundsBodies;                                      // 0x38(0x10)
	TArray<class PhysicsConstraintTemplate*>                     ConstraintSetup;                                   // 0x48(0x10)
	char                                                         pad0xa0_60855[0xa0];                               // 0x58(0xa0)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlatformInterfaceBase: public Object
{
public:
	TArray<struct DelegateArray>                                 AllDelegates;                                      // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimMetaData: public Object
{
public:
};


// Size 0xe8 (Full Size[0x110] - InheritedSize[0x28]
class NavCollision: public Object
{
public:
	char                                                         pad0x50_JS3PJ[0x50];                               // 0x28(0x50)
	TArray<struct NavCollisionCylinder>                          CylinderCollision;                                 // 0x78(0x10)
	TArray<struct NavCollisionBox>                               BoxCollision;                                      // 0x88(0x10)
	class UClass*                                                AreaClass;                                         // 0x98(0x8)
	bool                                                         bIsDynamicObstacle;                                // 0xa0(0x1)
	bool                                                         bGatherConvexGeometry;                             // 0xa0(0x1)
	char                                                         pad0x6f_H141B[0x6f];                               // 0xa1(0x6f)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BookMark2D: public Object
{
public:
	float                                                        Zoom2D;                                            // 0x28(0x4)
	struct IntPoint                                              Location;                                          // 0x2c(0x8)
	char                                                         pad0x4_YHRZK[0x4];                                 // 0x34(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavLinkCustomInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggregatorInterface: public Interface
{
public:
};


// Size 0x400 (Full Size[0x428] - InheritedSize[0x28]
class PlayerInput: public Object
{
public:
	char                                                         pad0xf8_S34CL[0xf8];                               // 0x28(0xf8)
	TArray<struct KeyBind>                                       DebugExecBindings;                                 // 0x120(0x10)
	char                                                         pad0x40_8DDX0[0x40];                               // 0x130(0x40)
	TArray<struct Name>                                          GamepadInvertedAxes;                               // 0x170(0x10)
	TArray<struct Name>                                          MouseInvertedAxes;                                 // 0x180(0x10)
	TArray<struct Name>                                          InvertedCombinedAxisY;                             // 0x190(0x10)
	TArray<struct Name>                                          InvertedCombinedAxisX;                             // 0x1a0(0x10)
	char                                                         pad0x278_3WM88[0x278];                             // 0x1b0(0x278)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class InterpGroup: public Object
{
public:
	char                                                         pad0x8_6UKEL[0x8];                                 // 0x28(0x8)
	TArray<class InterpTrack*>                                   InterpTracks;                                      // 0x30(0x10)
	struct FName                                                 GroupName;                                         // 0x40(0x8)
	struct Color                                                 GroupColor;                                        // 0x48(0x4)
	bool                                                         bCollapsed;                                        // 0x4c(0x1)
	bool                                                         bVisible;                                          // 0x4c(0x1)
	bool                                                         bIsFolder;                                         // 0x4c(0x1)
	bool                                                         bIsParented;                                       // 0x4c(0x1)
	bool                                                         bIsSelected;                                       // 0x4c(0x1)
	char                                                         pad0x3_C6Q5H[0x3];                                 // 0x4d(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetworkPredictionInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class FFTWaterSettings: public Object
{
public:
	struct StringAssetReference                                  FFTWaterMaterialName;                              // 0x28(0x10)
	struct StringAssetReference                                  FFTWaterFoamTextureName;                           // 0x38(0x10)
	int                                                          BaseMeshDetail;                                    // 0x48(0x4)
	char                                                         pad0x4_S5DTL[0x4];                                 // 0x4c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TextureLODSettings: public Object
{
public:
	TArray<struct TextureLODGroup>                               TextureLODGroups;                                  // 0x28(0x10)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class ParticleLODLevel: public Object
{
public:
	int                                                          Level;                                             // 0x28(0x4)
	bool                                                         bEnabled;                                          // 0x2c(0x1)
	char                                                         pad0x3_8C277[0x3];                                 // 0x2d(0x3)
	class ParticleModuleRequired*                                RequiredModule;                                    // 0x30(0x8)
	TArray<class ParticleModule*>                                Modules;                                           // 0x38(0x10)
	class ParticleModule*                                        TypeDataModule;                                    // 0x48(0x8)
	class ParticleModuleSpawn*                                   SpawnModule;                                       // 0x50(0x8)
	class ParticleModuleEventGenerator*                          EventGenerator;                                    // 0x58(0x8)
	TArray<class ParticleModuleSpawnBase*>                       SpawningModules;                                   // 0x60(0x10)
	TArray<class ParticleModule*>                                SpawnModules;                                      // 0x70(0x10)
	TArray<class ParticleModule*>                                UpdateModules;                                     // 0x80(0x10)
	TArray<class ParticleModuleOrbit*>                           OrbitModules;                                      // 0x90(0x10)
	TArray<class ParticleModuleEventReceiverBase*>               EventReceiverModules;                              // 0xa0(0x10)
	bool                                                         ConvertedModules;                                  // 0xb0(0x1)
	char                                                         pad0x3_A6KHN[0x3];                                 // 0xb1(0x3)
	int                                                          PeakActiveParticles;                               // 0xb4(0x4)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class ActorComponent: public Object
{
public:
	char                                                         TargetNetDormancy;                                 // 0x28(0x1)
	char                                                         CreationMethod;                                    // 0x29(0x1)
	char                                                         pad0x6_TZBUX[0x6];                                 // 0x2a(0x6)
	struct ActorComponentTickFunction                            PrimaryComponentTick;                              // 0x30(0x50)
	TArray<struct Name>                                          ComponentTags;                                     // 0x80(0x10)
	TArray<struct SimpleMemberReference>                         UCSModifiedProperties;                             // 0x90(0x10)
	char                                                         pad0x10_LFQ27[0x10];                               // 0xa0(0x10)
	bool                                                         bReplicates;                                       // 0xb0(0x1)
	bool                                                         bNetAddressable;                                   // 0xb0(0x1)
	bool                                                         bAutoActivate;                                     // 0xb1(0x1)
	bool                                                         bIsActive;                                         // 0xb1(0x1)
	bool                                                         bEditableWhenInherited;                            // 0xb2(0x1)
	bool                                                         bNeedsLoadForClient;                               // 0xb3(0x1)
	bool                                                         bNeedsLoadForServer;                               // 0xb3(0x1)
	char                                                         pad0x4_WQ09V[0x4];                                 // 0xb4(0x4)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class InterpTrack: public Object
{
public:
	char                                                         pad0x10_TK50T[0x10];                               // 0x28(0x10)
	TArray<class InterpTrack*>                                   SubTracks;                                         // 0x38(0x10)
	class UClass*                                                TrackInstClass;                                    // 0x48(0x8)
	char                                                         ActiveCondition;                                   // 0x50(0x1)
	char                                                         pad0x7_EXOBS[0x7];                                 // 0x51(0x7)
	struct FString                                               TrackTitle;                                        // 0x58(0x10)
	bool                                                         bOnePerGroup;                                      // 0x68(0x1)
	bool                                                         bDirGroupOnly;                                     // 0x68(0x1)
	bool                                                         bDisableTrack;                                     // 0x68(0x1)
	bool                                                         bIsSelected;                                       // 0x68(0x1)
	bool                                                         bIsAnimControlTrack;                               // 0x68(0x1)
	bool                                                         bSubTrackOnly;                                     // 0x68(0x1)
	bool                                                         bVisible;                                          // 0x68(0x1)
	bool                                                         bIsRecording;                                      // 0x68(0x1)
	char                                                         pad0x7_7GJ7C[0x7];                                 // 0x69(0x7)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class SoundMix: public Object
{
public:
	bool                                                         bApplyEQ;                                          // 0x28(0x1)
	char                                                         pad0x3_HNUIP[0x3];                                 // 0x29(0x3)
	float                                                        EQPriority;                                        // 0x2c(0x4)
	struct AudioEQEffect                                         EQSettings;                                        // 0x30(0x28)
	TArray<struct SoundClassAdjuster>                            SoundClassEffects;                                 // 0x58(0x10)
	float                                                        InitialDelay;                                      // 0x68(0x4)
	float                                                        FadeInTime;                                        // 0x6c(0x4)
	float                                                        Duration;                                          // 0x70(0x4)
	float                                                        FadeOutTime;                                       // 0x74(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DialogueTypes: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class Distribution: public Object
{
public:
	char                                                         pad0x8_HNRMI[0x8];                                 // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MatineeInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x100] - InheritedSize[0x28]
class PendingNetGame: public Object
{
public:
	char                                                         pad0x8_IKW8R[0x8];                                 // 0x28(0x8)
	class NetDriver*                                             NetDriver;                                         // 0x30(0x8)
	char                                                         pad0xb0_T86MX[0xb0];                               // 0x38(0xb0)
	class Package*                                               PreLoadedMapPackage;                               // 0xe8(0x8)
	class World*                                                 PreLoadedWorld;                                    // 0xf0(0x8)
	char                                                         pad0x8_SVLKU[0x8];                                 // 0xf8(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class SoundBase: public Object
{
public:
	class SoundClass*                                            SoundClassObject;                                  // 0x28(0x8)
	bool                                                         bDebug;                                            // 0x30(0x1)
	char                                                         pad0x3_0LFTB[0x3];                                 // 0x31(0x3)
	char                                                         MaxConcurrentResolutionRule;                       // 0x34(0x1)
	char                                                         pad0x3_E9207[0x3];                                 // 0x35(0x3)
	int                                                          MaxConcurrentPlayCount;                            // 0x38(0x4)
	float                                                        Duration;                                          // 0x3c(0x4)
	class SoundAttenuation*                                      AttenuationSettings;                               // 0x40(0x8)
	char                                                         pad0x8_OA4BM[0x8];                                 // 0x48(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NavigationQueryFilter: public Object
{
public:
	TArray<struct NavigationFilterArea>                          Areas;                                             // 0x28(0x10)
	struct NavigationFilterFlags                                 IncludeFlags;                                      // 0x38(0x4)
	struct NavigationFilterFlags                                 ExcludeFlags;                                      // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CurveEdPresetCurve: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MatineeAnimInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class InterpData: public Object
{
public:
	float                                                        InterpLength;                                      // 0x28(0x4)
	float                                                        PathBuildTime;                                     // 0x2c(0x4)
	TArray<class InterpGroup*>                                   InterpGroups;                                      // 0x30(0x10)
	class InterpCurveEdSetup*                                    CurveEdSetup;                                      // 0x40(0x8)
	float                                                        EdSectionStart;                                    // 0x48(0x4)
	float                                                        EdSectionEnd;                                      // 0x4c(0x4)
	bool                                                         bShouldBakeAndPrune;                               // 0x50(0x1)
	char                                                         pad0x7_80WQF[0x7];                                 // 0x51(0x7)
	class InterpGroupDirector*                                   CachedDirectorGroup;                               // 0x58(0x8)
	TArray<struct Name>                                          AllEventNames;                                     // 0x60(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class LightmassPrimitiveSettingsObject: public Object
{
public:
	struct LightmassPrimitiveSettings                            LightmassSettings;                                 // 0x28(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class Polys: public Object
{
public:
	char                                                         pad0x10_AZS3A[0x10];                               // 0x28(0x10)
};


// Size 0x2a8 (Full Size[0x2d0] - InheritedSize[0x28]
class ButtonStyleAsset: public Object
{
public:
	struct ButtonStyle                                           ButtonStyle;                                       // 0x28(0x2a8)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class EdGraph: public Object
{
public:
	class UClass*                                                Schema;                                            // 0x28(0x8)
	TArray<class EdGraphNode*>                                   Nodes;                                             // 0x30(0x10)
	bool                                                         bEditable;                                         // 0x40(0x1)
	bool                                                         bAllowDeletion;                                    // 0x40(0x1)
	bool                                                         bAllowRenaming;                                    // 0x40(0x1)
	char                                                         pad0x1f_GWT4L[0x1f];                               // 0x41(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SaveGame: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnlineSession: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EngineBaseTypes: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ForceFeedbackEffect: public Object
{
public:
	TArray<struct ForceFeedbackChannelDetails>                   ChannelDetails;                                    // 0x28(0x10)
	float                                                        Duration;                                          // 0x38(0x4)
	char                                                         pad0x4_05QU4[0x4];                                 // 0x3c(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CameraModifier: public Object
{
public:
	bool                                                         bDebug;                                            // 0x28(0x1)
	bool                                                         bExclusive;                                        // 0x28(0x1)
	char                                                         pad0x3_NZEE4[0x3];                                 // 0x29(0x3)
	char                                                         Priority;                                          // 0x2c(0x1)
	char                                                         pad0x3_93CFM[0x3];                                 // 0x2d(0x3)
	class PlayerCameraManager*                                   CameraOwner;                                       // 0x30(0x8)
	float                                                        AlphaInTime;                                       // 0x38(0x4)
	float                                                        AlphaOutTime;                                      // 0x3c(0x4)
	float                                                        Alpha;                                             // 0x40(0x4)
	bool                                                         bAutoDestroyOnCompletion;                          // 0x44(0x1)
	char                                                         pad0x3_T8KBW[0x3];                                 // 0x45(0x3)
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class Canvas: public Object
{
public:
	float                                                        OrgX;                                              // 0x28(0x4)
	float                                                        OrgY;                                              // 0x2c(0x4)
	float                                                        ClipX;                                             // 0x30(0x4)
	float                                                        ClipY;                                             // 0x34(0x4)
	struct Color                                                 DrawColor;                                         // 0x38(0x4)
	bool                                                         bCenterX;                                          // 0x3c(0x1)
	bool                                                         bCenterY;                                          // 0x3c(0x1)
	bool                                                         bNoSmooth;                                         // 0x3c(0x1)
	char                                                         pad0x3_9G6O8[0x3];                                 // 0x3d(0x3)
	int                                                          SizeX;                                             // 0x40(0x4)
	int                                                          SizeY;                                             // 0x44(0x4)
	char                                                         pad0x8_HYJ7E[0x8];                                 // 0x48(0x8)
	struct Plane                                                 ColorModulate;                                     // 0x50(0x10)
	class Texture2D*                                             DefaultTexture;                                    // 0x60(0x8)
	class Texture2D*                                             GradientTexture0;                                  // 0x68(0x8)
	class ReporterGraph*                                         ReporterGraph;                                     // 0x70(0x8)
	char                                                         pad0x78_Z9676[0x78];                               // 0x78(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggregatableInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class MaterialFunction: public Object
{
public:
	struct Guid                                                  StateId;                                           // 0x28(0x10)
	struct FString                                               Description;                                       // 0x38(0x10)
	bool                                                         bExposeToLibrary;                                  // 0x48(0x1)
	char                                                         pad0x7_NI9G5[0x7];                                 // 0x49(0x7)
	TArray<struct Text>                                          LibraryCategoriesText;                             // 0x50(0x10)
	TArray<class MaterialExpression*>                            FunctionExpressions;                               // 0x60(0x10)
	bool                                                         bReentrantFlag;                                    // 0x70(0x1)
	char                                                         pad0x7_52NHI[0x7];                                 // 0x71(0x7)
};


// Size 0x5f0 (Full Size[0x618] - InheritedSize[0x28]
class CheckBoxStyleAsset: public Object
{
public:
	struct CheckBoxStyle                                         CheckBoxStyle;                                     // 0x28(0x5f0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DataAsset: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraViewTargetInterface: public Interface
{
public:
};


// Size 0x100 (Full Size[0x128] - InheritedSize[0x28]
class HapticFeedbackEffect: public Object
{
public:
	struct HapticFeedbackDetails                                 HapticDetails;                                     // 0x28(0x100)
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class ParticleSystem: public Object
{
public:
	char                                                         SystemUpdateMode;                                  // 0x28(0x1)
	char                                                         pad0x3_QD58Y[0x3];                                 // 0x29(0x3)
	float                                                        UpdateTime_FPS;                                    // 0x2c(0x4)
	float                                                        UpdateTime_Delta;                                  // 0x30(0x4)
	float                                                        WarmUpTime;                                        // 0x34(0x4)
	float                                                        WarmupTickRate;                                    // 0x38(0x4)
	char                                                         pad0x4_3FCVD[0x4];                                 // 0x3c(0x4)
	TArray<class ParticleEmitter*>                               Emitters;                                          // 0x40(0x10)
	class ParticleSystemComponent*                               PreviewComponent;                                  // 0x50(0x8)
	class InterpCurveEdSetup*                                    CurveEdSetup;                                      // 0x58(0x8)
	bool                                                         bOrientZAxisTowardCamera;                          // 0x60(0x1)
	char                                                         pad0x3_TLUVM[0x3];                                 // 0x61(0x3)
	float                                                        LODDistanceCheckTime;                              // 0x64(0x4)
	char                                                         LODMethod;                                         // 0x68(0x1)
	char                                                         pad0x7_QMWBW[0x7];                                 // 0x69(0x7)
	TArray<float>                                                LODDistances;                                      // 0x70(0x10)
	bool                                                         bRegenerateLODDuplicate;                           // 0x80(0x1)
	char                                                         pad0x7_7L1PV[0x7];                                 // 0x81(0x7)
	TArray<struct ParticleSystemLOD>                             LODSettings;                                       // 0x88(0x10)
	bool                                                         bIgnoreBoundsRotation;                             // 0x98(0x1)
	bool                                                         bBoostParticleAggregationPriority;                 // 0x98(0x1)
	bool                                                         bUseFixedRelativeBoundingBox;                      // 0x98(0x1)
	char                                                         pad0x3_3EHFC[0x3];                                 // 0x99(0x3)
	struct Box                                                   FixedRelativeBoundingBox;                          // 0x9c(0x1c)
	bool                                                         bUseLowResTranslucencyBoundingBox;                 // 0xb8(0x1)
	char                                                         pad0x3_SQMC4[0x3];                                 // 0xb9(0x3)
	struct Box                                                   LowResTranslucencyBoundingBox;                     // 0xbc(0x1c)
	float                                                        SecondsBeforeInactive;                             // 0xd8(0x4)
	bool                                                         bShouldResetPeakCounts;                            // 0xdc(0x1)
	bool                                                         bHasPhysics;                                       // 0xdc(0x1)
	bool                                                         bPostPhysicsTick;                                  // 0xdc(0x1)
	bool                                                         bUseRealtimeThumbnail;                             // 0xdc(0x1)
	bool                                                         ThumbnailImageOutOfDate;                           // 0xdc(0x1)
	char                                                         pad0x3_TAMM9[0x3];                                 // 0xdd(0x3)
	float                                                        Delay;                                             // 0xe0(0x4)
	float                                                        DelayLow;                                          // 0xe4(0x4)
	bool                                                         bUseDelayRange;                                    // 0xe8(0x1)
	char                                                         pad0x3_A2ANQ[0x3];                                 // 0xe9(0x3)
	struct Vector                                                MacroUVPosition;                                   // 0xec(0xc)
	float                                                        MacroUVRadius;                                     // 0xf8(0x4)
	char                                                         OcclusionBoundsMethod;                             // 0xfc(0x1)
	char                                                         pad0x3_G4H57[0x3];                                 // 0xfd(0x3)
	struct Box                                                   CustomOcclusionBounds;                             // 0x100(0x1c)
	char                                                         pad0x4_NL3NO[0x4];                                 // 0x11c(0x4)
	TArray<struct LODSoloTrack>                                  SoloTracking;                                      // 0x120(0x10)
	TArray<struct NamedEmitterMaterial>                          NamedMaterialSlots;                                // 0x130(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Interface_Animatable: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ReporterBase: public Object
{
public:
	char                                                         pad0x8_3TH9B[0x8];                                 // 0x28(0x8)
};


// Size 0x2a0 (Full Size[0x2c8] - InheritedSize[0x28]
class BodySetup: public Object
{
public:
	struct KAggregateGeom                                        AggGeom;                                           // 0x28(0x48)
	struct FName                                                 BoneName;                                          // 0x70(0x8)
	char                                                         PhysicsType;                                       // 0x78(0x1)
	char                                                         pad0x3_ONB79[0x3];                                 // 0x79(0x3)
	bool                                                         bCookComplexGeometryOnServer;                      // 0x7c(0x1)
	bool                                                         bConsiderForBounds;                                // 0x7c(0x1)
	bool                                                         bMeshCollideAll;                                   // 0x7c(0x1)
	bool                                                         bDoubleSidedGeometry;                              // 0x7c(0x1)
	bool                                                         bGenerateNonMirroredCollision;                     // 0x7c(0x1)
	bool                                                         bSharedCookedData;                                 // 0x7c(0x1)
	bool                                                         bGenerateMirroredCollision;                        // 0x7c(0x1)
	char                                                         pad0x3_1C7TK[0x3];                                 // 0x7d(0x3)
	class PhysicalMaterial*                                      PhysMaterial;                                      // 0x80(0x8)
	char                                                         CollisionReponse;                                  // 0x88(0x1)
	char                                                         CollisionTraceFlag;                                // 0x89(0x1)
	char                                                         pad0x6_2DZ1O[0x6];                                 // 0x8a(0x6)
	struct BodyInstance                                          DefaultInstance;                                   // 0x90(0x180)
	struct WalkableSlopeOverride                                 WalkableSlopeOverride;                             // 0x210(0x8)
	struct Vector                                                BuildScale3D;                                      // 0x218(0xc)
	char                                                         pad0xa4_TI9G8[0xa4];                               // 0x224(0xa4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NavigationDataChunk: public Object
{
public:
	struct FName                                                 NavigationDataName;                                // 0x28(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class Selection: public Object
{
public:
	char                                                         pad0x30_5VXJ1[0x30];                               // 0x28(0x30)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NavArea: public Object
{
public:
	float                                                        DefaultCost;                                       // 0x28(0x4)
	float                                                        FixedAreaEnteringCost;                             // 0x2c(0x4)
	struct Color                                                 DrawColor;                                         // 0x30(0x4)
	struct NavAgentSelector                                      SupportedAgents;                                   // 0x34(0x4)
	bool                                                         bSupportsAgent0;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent1;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent2;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent3;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent4;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent5;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent6;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent7;                                   // 0x38(0x1)
	bool                                                         bSupportsAgent8;                                   // 0x39(0x1)
	bool                                                         bSupportsAgent9;                                   // 0x39(0x1)
	bool                                                         bSupportsAgent10;                                  // 0x39(0x1)
	bool                                                         bSupportsAgent11;                                  // 0x39(0x1)
	bool                                                         bSupportsAgent12;                                  // 0x39(0x1)
	bool                                                         bSupportsAgent13;                                  // 0x39(0x1)
	bool                                                         bSupportsAgent14;                                  // 0x39(0x1)
	bool                                                         bSupportsAgent15;                                  // 0x39(0x1)
	char                                                         pad0x6_1Y852[0x6];                                 // 0x3a(0x6)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class GameInstance: public Object
{
public:
	char                                                         pad0x10_CVYIZ[0x10];                               // 0x28(0x10)
	TArray<class LocalPlayer*>                                   LocalPlayers;                                      // 0x38(0x10)
	char                                                         pad0x8_W2C9V[0x8];                                 // 0x48(0x8)
	class OnlineSession*                                         OnlineSession;                                     // 0x50(0x8)
	char                                                         pad0x30_BG1PC[0x30];                               // 0x58(0x30)
};


// Size 0x10 (Full Size[0x68] - InheritedSize[0x58]
class UserDefinedEnum: public Enum
{
public:
	TArray<struct Text>                                          DisplayNames;                                      // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DynamicBlueprintBinding: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AssetUserData: public Object
{
public:
};


// Size 0x2d8 (Full Size[0x300] - InheritedSize[0x28]
class Level: public Object
{
public:
	char                                                         pad0xa0_9M0CV[0xa0];                               // 0x28(0xa0)
	class LevelActorContainer*                                   ActorCluster;                                      // 0xc8(0x8)
	class World*                                                 OwningWorld;                                       // 0xd0(0x8)
	class Model*                                                 Model;                                             // 0xd8(0x8)
	TArray<class ModelComponent*>                                ModelComponents;                                   // 0xe0(0x10)
	class LevelScriptActor*                                      LevelScriptActor;                                  // 0xf0(0x8)
	class NavigationObjectBase*                                  NavListStart;                                      // 0xf8(0x8)
	class NavigationObjectBase*                                  NavListEnd;                                        // 0x100(0x8)
	TArray<class NavigationDataChunk*>                           NavDataChunks;                                     // 0x108(0x10)
	float                                                        LightmapTotalSize;                                 // 0x118(0x4)
	float                                                        ShadowmapTotalSize;                                // 0x11c(0x4)
	TArray<struct Vector>                                        StaticNavigableGeometry;                           // 0x120(0x10)
	char                                                         pad0x130_7NTY4[0x130];                             // 0x130(0x130)
	bool                                                         LevelVisibility;                                   // 0x260(0x1)
	char                                                         pad0xf_R8UIT[0xf];                                 // 0x261(0xf)
	bool                                                         Blocked;                                           // 0x270(0x1)
	char                                                         pad0x67_6J915[0x67];                               // 0x271(0x67)
	TArray<class AssetUserData*>                                 AssetUserData;                                     // 0x2d8(0x10)
	char                                                         pad0x18_OLX7H[0x18];                               // 0x2e8(0x18)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class VertexAnimBase: public Object
{
public:
	class SkeletalMesh*                                          BaseSkelMesh;                                      // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavRelevantInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class CurveTable: public Object
{
public:
	char                                                         pad0x50_M1764[0x50];                               // 0x28(0x50)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class Commandlet: public Object
{
public:
	struct FString                                               HelpDescription;                                   // 0x28(0x10)
	struct FString                                               HelpUsage;                                         // 0x38(0x10)
	struct FString                                               HelpWebLink;                                       // 0x48(0x10)
	TArray<String>                                               HelpParamNames;                                    // 0x58(0x10)
	TArray<String>                                               HelpParamDescriptions;                             // 0x68(0x10)
	bool                                                         IsServer;                                          // 0x78(0x1)
	bool                                                         IsClient;                                          // 0x78(0x1)
	bool                                                         IsEditor;                                          // 0x78(0x1)
	bool                                                         LogToConsole;                                      // 0x78(0x1)
	bool                                                         ShowErrorCount;                                    // 0x78(0x1)
	char                                                         pad0x7_OSKY6[0x7];                                 // 0x79(0x7)
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class AnimSet: public Object
{
public:
	bool                                                         bAnimRotationOnly;                                 // 0x28(0x1)
	char                                                         pad0x7_TCMI0[0x7];                                 // 0x29(0x7)
	TArray<struct Name>                                          TrackBoneNames;                                    // 0x30(0x10)
	TArray<struct AnimSetMeshLinkup>                             LinkupCache;                                       // 0x40(0x10)
	TArray<char>                                                 BoneUseAnimTranslation;                            // 0x50(0x10)
	TArray<char>                                                 ForceUseMeshTranslation;                           // 0x60(0x10)
	TArray<struct Name>                                          UseTranslationBoneNames;                           // 0x70(0x10)
	TArray<struct Name>                                          ForceMeshTranslationBoneNames;                     // 0x80(0x10)
	struct FName                                                 PreviewSkelMeshName;                               // 0x90(0x8)
	struct FName                                                 BestRatioSkelMeshName;                             // 0x98(0x8)
	char                                                         pad0x50_Q3LOE[0x50];                               // 0xa0(0x50)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class DestructibleFractureSettings: public Object
{
public:
	int                                                          CellSiteCount;                                     // 0x28(0x4)
	struct FractureMaterial                                      FractureMaterialDesc;                              // 0x2c(0x24)
	int                                                          RandomSeed;                                        // 0x50(0x4)
	char                                                         pad0x4_AQS0V[0x4];                                 // 0x54(0x4)
	TArray<struct Vector>                                        VoronoiSites;                                      // 0x58(0x10)
	int                                                          OriginalSubmeshCount;                              // 0x68(0x4)
	char                                                         pad0x4_BJ89W[0x4];                                 // 0x6c(0x4)
	TArray<class MaterialInterface*>                             Materials;                                         // 0x70(0x10)
	TArray<struct DestructibleChunkParameters>                   ChunkParameters;                                   // 0x80(0x10)
	TArray<String>                                               MaterialNames;                                     // 0x90(0x10)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class WorldComposition: public Object
{
public:
	char                                                         pad0x70_6J7ZT[0x70];                               // 0x28(0x70)
	TArray<class LevelStreaming*>                                TilesStreaming;                                    // 0x98(0x10)
	double                                                       TilesStreamingTimeThreshold;                       // 0xa8(0x8)
	bool                                                         bLoadAllTilesDuringCinematic;                      // 0xb0(0x1)
	bool                                                         bRebaseOriginIn3DSpace;                            // 0xb1(0x1)
	char                                                         pad0x2_U607N[0x2];                                 // 0xb2(0x2)
	float                                                        RebaseOriginDistance;                              // 0xb4(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ObjectReferencer: public Object
{
public:
	TArray<class Object*>                                        ReferencedObjects;                                 // 0x28(0x10)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class SubUVAnimation: public Object
{
public:
	class Texture2D*                                             SubUVTexture;                                      // 0x28(0x8)
	int                                                          SubImages_Horizontal;                              // 0x30(0x4)
	int                                                          SubImages_Vertical;                                // 0x34(0x4)
	char                                                         BoundingMode;                                      // 0x38(0x1)
	char                                                         OpacitySourceMode;                                 // 0x39(0x1)
	char                                                         pad0x2_3L7BB[0x2];                                 // 0x3a(0x2)
	float                                                        AlphaThreshold;                                    // 0x3c(0x4)
	float                                                        SafeMarginSize;                                    // 0x40(0x4)
	char                                                         pad0x44_VM2YU[0x44];                               // 0x44(0x44)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class PhysicsCollisionHandler: public Object
{
public:
	float                                                        ImpactThreshold;                                   // 0x28(0x4)
	float                                                        ImpactReFireDelay;                                 // 0x2c(0x4)
	class SoundBase*                                             DefaultImpactSound;                                // 0x30(0x8)
	float                                                        LastImpactSoundTime;                               // 0x38(0x4)
	char                                                         pad0x4_HAKTN[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestInterfaceAlternative: public Interface
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class PhysicsSerializer: public Object
{
public:
	char                                                         pad0xa8_DWDC3[0xa8];                               // 0x28(0xa8)
};


// Size 0x0 (Full Size[0x0] - InheritedSize[0x0]
class Default__BlueprintGeneratedClass
{
public:
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class DataTable: public Object
{
public:
	class ScriptStruct*                                          RowStruct;                                         // 0x28(0x8)
	char                                                         pad0x50_YWBCF[0x50];                               // 0x30(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ThumbnailInfo: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImportantToggleSettingInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class GameUserSettings: public Object
{
public:
	bool                                                         bUseVSync;                                         // 0x28(0x1)
	char                                                         pad0x1f_L9KJL[0x1f];                               // 0x29(0x1f)
	int                                                          WindowPosX;                                        // 0x58(0x4)
	int                                                          WindowPosY;                                        // 0x5c(0x4)
	bool                                                         bUseDesktopResolutionForFullscreen;                // 0x60(0x1)
	char                                                         pad0x3_2LQBG[0x3];                                 // 0x61(0x3)
	int                                                          FullscreenMode;                                    // 0x64(0x4)
	int                                                          LastConfirmedFullscreenMode;                       // 0x68(0x4)
	int                                                          AudioQualityLevel;                                 // 0x70(0x4)
	char                                                         pad0x4_ZDI3E[0x4];                                 // 0x74(0x4)
};


// Size 0x378 (Full Size[0x3a0] - InheritedSize[0x28]
class Actor: public Object
{
public:
	struct ActorTickFunction                                     PrimaryActorTick;                                  // 0x28(0x50)
	float                                                        CustomTimeDilation;                                // 0x78(0x4)
	bool                                                         bAllowRemovalFromServerWhenCollisionMerged;        // 0x7c(0x1)
	bool                                                         bAllowRemovalFromServerWhenAutomaticallyInstanced; // 0x7c(0x1)
	bool                                                         bHidden;                                           // 0x7c(0x1)
	bool                                                         bNetTemporary;                                     // 0x7c(0x1)
	bool                                                         bNetStartup;                                       // 0x7c(0x1)
	bool                                                         bOnlyRelevantToOwner;                              // 0x7c(0x1)
	bool                                                         bAlwaysRelevant;                                   // 0x7c(0x1)
	bool                                                         bReplicateMovement;                                // 0x7c(0x1)
	bool                                                         bTearOff;                                          // 0x7d(0x1)
	bool                                                         bExchangedRoles;                                   // 0x7d(0x1)
	bool                                                         bPendingNetUpdate;                                 // 0x7d(0x1)
	bool                                                         bNetLoadOnClient;                                  // 0x7d(0x1)
	bool                                                         bNetUseOwnerRelevancy;                             // 0x7d(0x1)
	bool                                                         bBlockInput;                                       // 0x7d(0x1)
	bool                                                         bCanBeInCluster;                                   // 0x7d(0x1)
	bool                                                         bActorEnableCollision;                             // 0x7e(0x1)
	bool                                                         bReplicateAttachment;                              // 0x7e(0x1)
	bool                                                         bCollideWhenPlacing;                               // 0x7e(0x1)
	bool                                                         bFindCameraComponentWhenViewTarget;                // 0x7e(0x1)
	bool                                                         bRelevantForNetworkReplays;                        // 0x7f(0x1)
	bool                                                         bActorVisible;                                     // 0x7f(0x1)
	bool                                                         bAutoDestroyWhenFinished;                          // 0x7f(0x1)
	bool                                                         bCanBeDamaged;                                     // 0x7f(0x1)
	bool                                                         bReplicates;                                       // 0x7f(0x1)
	bool                                                         bAllowReceiveTickEventOnDedicatedServer;           // 0x7f(0x1)
	bool                                                         bActorIsBeingDestroyed;                            // 0x7f(0x1)
	char                                                         RemoteRole;                                        // 0x83(0x1)
	char                                                         Role;                                              // 0x84(0x1)
	char                                                         SpawnRestrictions;                                 // 0x85(0x1)
	char                                                         pad0x1_83Q9S[0x1];                                 // 0x86(0x1)
	char                                                         AutoReceiveInput;                                  // 0x87(0x1)
	class Actor*                                                 Owner;                                             // 0x88(0x8)
	struct RepMovement                                           ReplicatedMovement;                                // 0x90(0x38)
	struct RepAttachment                                         AttachmentReplication;                             // 0xc8(0x48)
	char                                                         pad0x4_GGVO8[0x4];                                 // 0x110(0x4)
	int                                                          InputPriority;                                     // 0x114(0x4)
	class InputComponent*                                        InputComponent;                                    // 0x118(0x8)
	float                                                        NetCullDistanceSquared;                            // 0x120(0x4)
	char                                                         pad0x4_1GJFN[0x4];                                 // 0x124(0x4)
	int                                                          NetTag;                                            // 0x128(0x4)
	float                                                        NetUpdateTime;                                     // 0x12c(0x4)
	float                                                        NetUpdateFrequency;                                // 0x130(0x4)
	float                                                        NetPriority;                                       // 0x134(0x4)
	float                                                        LastNetUpdateTime;                                 // 0x138(0x4)
	struct FName                                                 NetDriverName;                                     // 0x13c(0x8)
	char                                                         pad0x4_KRXRP[0x4];                                 // 0x144(0x4)
	class Pawn*                                                  Instigator;                                        // 0x148(0x8)
	TArray<class Actor*>                                         Children;                                          // 0x150(0x10)
	class SceneComponent*                                        RootComponent;                                     // 0x160(0x8)
	TArray<class MatineeActor*>                                  ControllingMatineeActors;                          // 0x168(0x10)
	float                                                        InitialLifeSpan;                                   // 0x178(0x4)
	char                                                         pad0x4_L7F3V[0x4];                                 // 0x17c(0x4)
	TArray<struct Name>                                          Layers;                                            // 0x180(0x10)
	struct ActorPtr                                              ParentComponentActor;                              // 0x190(0x8)
	TArray<uintptr_t>                                            ChildComponentActors;                              // 0x198(0x10)
	bool                                                         bActorSeamlessTraveled;                            // 0x1a8(0x1)
	bool                                                         bIgnoresOriginShifting;                            // 0x1a8(0x1)
	bool                                                         bEnableAutoLODGeneration;                          // 0x1a8(0x1)
	bool                                                         InvertFeatureCheck;                                // 0x1a8(0x1)
	char                                                         pad0x3_CCXF2[0x3];                                 // 0x1a9(0x3)
	struct FName                                                 Feature;                                           // 0x1ac(0x8)
	char                                                         pad0x4_T4HYG[0x4];                                 // 0x1b4(0x4)
	TArray<struct Name>                                          Tags;                                              // 0x1b8(0x10)
	bool                                                         bDoOverlapNotifiesOnLoad;                          // 0x1d5(0x1)
	char                                                         SpawnCollisionHandlingMethod;                      // 0x1d6(0x1)
	char                                                         pad0x129_C62KB[0x129];                             // 0x1d7(0x129)
	TArray<class ActorComponent*>                                BlueprintCreatedComponents;                        // 0x300(0x10)
	TArray<class ActorComponent*>                                InstanceComponents;                                // 0x310(0x10)
	TArray<class Actor*>                                         ChildActorInterfaceProviders;                      // 0x320(0x10)
	char                                                         pad0x68_DTGUR[0x68];                               // 0x330(0x68)
	double                                                       DormancyLingeringInSeconds;                        // 0x398(0x8)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class DialogueWave: public Object
{
public:
	bool                                                         bMature;                                           // 0x28(0x1)
	char                                                         pad0x7_S5697[0x7];                                 // 0x29(0x7)
	struct FString                                               SpokenText;                                        // 0x30(0x10)
	TArray<struct DialogueContextMapping>                        ContextMappings;                                   // 0x40(0x10)
	struct Guid                                                  LocalizationGUID;                                  // 0x50(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AutomationTestUserSettings: public Object
{
public:
	bool                                                         FilterTests;                                       // 0x28(0x1)
	char                                                         pad0x7_AJ571[0x7];                                 // 0x29(0x7)
	TArray<String>                                               IncludedTestsPrefix;                               // 0x30(0x10)
	TArray<String>                                               ExcludedTestsPrefix;                               // 0x40(0x10)
	bool                                                         IncludeEpicTests;                                  // 0x50(0x1)
	char                                                         pad0x7_7AO6Z[0x7];                                 // 0x51(0x7)
};


// Size 0x98 (Full Size[0xc0] - InheritedSize[0x28]
class InputSettings: public Object
{
public:
	TArray<struct InputAxisConfigEntry>                          AxisConfig;                                        // 0x28(0x10)
	bool                                                         bAltEnterTogglesFullscreen;                        // 0x38(0x1)
	bool                                                         bUseMouseForTouch;                                 // 0x38(0x1)
	bool                                                         bEnableMouseSmoothing;                             // 0x38(0x1)
	bool                                                         bEnableFOVScaling;                                 // 0x38(0x1)
	char                                                         pad0x3_AWWAX[0x3];                                 // 0x39(0x3)
	float                                                        FOVScale;                                          // 0x3c(0x4)
	float                                                        DoubleClickTime;                                   // 0x40(0x4)
	char                                                         pad0x4_5MIH3[0x4];                                 // 0x44(0x4)
	TArray<struct InputActionKeyMapping>                         ActionMappings;                                    // 0x48(0x10)
	TArray<struct InputAxisKeyMapping>                           AxisMappings;                                      // 0x58(0x10)
	TArray<struct InputCombinedAxisKeyMapping>                   CombinedAxisMappings;                              // 0x68(0x10)
	bool                                                         bAlwaysShowTouchInterface;                         // 0x78(0x1)
	bool                                                         bShowConsoleOnFourFingerTap;                       // 0x79(0x1)
	char                                                         pad0x6_Y1FI0[0x6];                                 // 0x7a(0x6)
	struct StringAssetReference                                  DefaultTouchInterface;                             // 0x80(0x10)
	struct Key                                                   ConsoleKey;                                        // 0x90(0x20)
	TArray<struct Key>                                           ConsoleKeys;                                       // 0xb0(0x10)
};


// Size 0x210 (Full Size[0x238] - InheritedSize[0x28]
class SkeletalMesh: public Object
{
public:
	char                                                         pad0x28_QFHCI[0x28];                               // 0x28(0x28)
	class Skeleton*                                              Skeleton;                                          // 0x50(0x8)
	struct BoxSphereBounds                                       Bounds;                                            // 0x58(0x1c)
	char                                                         pad0x4_YBJ4R[0x4];                                 // 0x74(0x4)
	TArray<struct SkeletalMaterial>                              Materials;                                         // 0x78(0x10)
	TArray<struct BoneMirrorInfo>                                SkelMirrorTable;                                   // 0x88(0x10)
	char                                                         SkelMirrorAxis;                                    // 0x98(0x1)
	char                                                         SkelMirrorFlipAxis;                                // 0x99(0x1)
	char                                                         pad0x6_3J9JA[0x6];                                 // 0x9a(0x6)
	TArray<struct SkeletalMeshLODInfo>                           LODInfo;                                           // 0xa0(0x10)
	bool                                                         bUseFullPrecisionUVs;                              // 0xb0(0x1)
	bool                                                         bHasBeenSimplified;                                // 0xb0(0x1)
	bool                                                         bHasVertexColors;                                  // 0xb0(0x1)
	char                                                         pad0x7_WKD34[0x7];                                 // 0xb1(0x7)
	TArray<struct DeformablesSettings>                           DeformablesSettings;                               // 0xb8(0x10)
	bool                                                         bKeepTessellationAdjacency;                        // 0xc8(0x1)
	bool                                                         bKeepSkeletalMeshBuffersInMemory;                  // 0xc8(0x1)
	bool                                                         bEnablePerPolyCollision;                           // 0xc8(0x1)
	char                                                         pad0x7_8W6CV[0x7];                                 // 0xc9(0x7)
	class BodySetup*                                             BodySetup;                                         // 0xd0(0x8)
	class PhysicsAsset*                                          PhysicsAsset;                                      // 0xd8(0x8)
	class HIKCharacterization*                                   Characterization;                                  // 0xe0(0x8)
	class PhysicsAsset*                                          DeformablesPhysicsAsset;                           // 0xe8(0x8)
	float                                                        StreamingDistanceMultiplier;                       // 0xf0(0x4)
	float                                                        StreamingDiscardedTexelRatios;                     // 0xf4(0x4)
	TArray<class MorphTarget*>                                   MorphTargets;                                      // 0xf8(0x10)
	TArray<class MeshPatchAsset*>                                MeshPatchAssets;                                   // 0x108(0x10)
	char                                                         pad0xd8_EZ159[0xd8];                               // 0x118(0xd8)
	TArray<struct ClothingAssetData>                             ClothingAssets;                                    // 0x1f0(0x10)
	char                                                         pad0x10_CK195[0x10];                               // 0x200(0x10)
	TArray<class AssetUserData*>                                 AssetUserData;                                     // 0x210(0x10)
	char                                                         pad0x8_N5PYQ[0x8];                                 // 0x220(0x8)
	TArray<class SkeletalMeshSocket*>                            Sockets;                                           // 0x228(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class HighLatencySettings: public Object
{
public:
	bool                                                         UseHighLatency;                                    // 0x28(0x1)
	char                                                         pad0x3_J1VUM[0x3];                                 // 0x29(0x3)
	int                                                          PktLag;                                            // 0x2c(0x4)
	int                                                          PktLagVariance;                                    // 0x30(0x4)
	bool                                                         PktOrder;                                          // 0x34(0x1)
	char                                                         pad0x3_PRZJ6[0x3];                                 // 0x35(0x3)
	int                                                          PktDup;                                            // 0x38(0x4)
	int                                                          PktLoss;                                           // 0x3c(0x4)
};


// Size 0x550 (Full Size[0x578] - InheritedSize[0x28]
class Model: public Object
{
public:
	char                                                         pad0x550_PU1LP[0x550];                             // 0x28(0x550)
};


// Size 0x1b0 (Full Size[0x1d8] - InheritedSize[0x28]
class Font: public Object
{
public:
	char                                                         pad0x8_9JA70[0x8];                                 // 0x28(0x8)
	char                                                         FontCacheType;                                     // 0x30(0x1)
	char                                                         pad0x7_WXGQH[0x7];                                 // 0x31(0x7)
	TArray<struct FontCharacter>                                 Characters;                                        // 0x38(0x10)
	TArray<class Texture2D*>                                     Textures;                                          // 0x48(0x10)
	int                                                          IsRemapped;                                        // 0x58(0x4)
	float                                                        EmScale;                                           // 0x5c(0x4)
	float                                                        Ascent;                                            // 0x60(0x4)
	float                                                        Descent;                                           // 0x64(0x4)
	float                                                        Leading;                                           // 0x68(0x4)
	int                                                          Kerning;                                           // 0x6c(0x4)
	struct FontImportOptionsData                                 ImportOptions;                                     // 0x70(0xb0)
	int                                                          NumCharacters;                                     // 0x120(0x4)
	char                                                         pad0x4_2T3K7[0x4];                                 // 0x124(0x4)
	TArray<int>                                                  MaxCharHeight;                                     // 0x128(0x10)
	float                                                        ScalingFactor;                                     // 0x138(0x4)
	int                                                          LegacyFontSize;                                    // 0x13c(0x4)
	struct FName                                                 LegacyFontName;                                    // 0x140(0x8)
	struct CompositeFont                                         CompositeFont;                                     // 0x148(0x28)
	char                                                         pad0x68_VBH2Z[0x68];                               // 0x170(0x68)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class Layer: public Object
{
public:
	struct FName                                                 LayerName;                                         // 0x28(0x8)
	bool                                                         bIsVisible;                                        // 0x30(0x1)
	char                                                         pad0x7_GHLY3[0x7];                                 // 0x31(0x7)
	TArray<struct LayerActorStats>                               ActorStats;                                        // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class LevelActorContainer: public Object
{
public:
	TArray<class Actor*>                                         Actors;                                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EngineTypes: public Object
{
public:
};


// Size 0x1e8 (Full Size[0x210] - InheritedSize[0x28]
class LevelStreaming: public Object
{
public:
	char                                                         pad0x28_P3D5Z[0x28];                               // 0x28(0x28)
	struct FName                                                 PackageNameToLoad;                                 // 0x50(0x8)
	TArray<struct Name>                                          LODPackageNames;                                   // 0x58(0x10)
	char                                                         pad0x18_E4XV7[0x18];                               // 0x68(0x18)
	struct Transform                                             LevelTransform;                                    // 0x80(0x30)
	char                                                         pad0xc_BG06X[0xc];                                 // 0xb0(0xc)
	bool                                                         bShouldBeVisibleInEditor;                          // 0xbc(0x1)
	bool                                                         Blocked;                                           // 0xbc(0x1)
	bool                                                         bShouldBeLoaded;                                   // 0xbc(0x1)
	bool                                                         bShouldBeVisible;                                  // 0xbc(0x1)
	bool                                                         bShouldBlockOnLoad;                                // 0xbc(0x1)
	char                                                         pad0x3_6D2CT[0x3];                                 // 0xbd(0x3)
	int                                                          LevelLODIndex;                                     // 0xc0(0x4)
	bool                                                         bDisableDistanceStreaming;                         // 0xc4(0x1)
	bool                                                         bDrawOnLevelStatusMap;                             // 0xc4(0x1)
	char                                                         pad0x3_R7RJ1[0x3];                                 // 0xc5(0x3)
	struct LinearColor                                           LevelColor;                                        // 0xc8(0x10)
	TArray<class LevelStreamingVolume*>                          EditorStreamingVolumes;                            // 0xd8(0x10)
	float                                                        MinTimeBetweenVolumeUnloadRequests;                // 0xe8(0x4)
	char                                                         pad0x4_KE9VC[0x4];                                 // 0xec(0x4)
	TArray<String>                                               Keywords;                                          // 0xf0(0x10)
	class Level*                                                 LoadedLevel;                                       // 0x200(0x8)
	class Level*                                                 PendingUnloadLevel;                                // 0x208(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class ObjectLibrary: public Object
{
public:
	class UClass*                                                ObjectBaseClass;                                   // 0x28(0x8)
	bool                                                         bHasBlueprintClasses;                              // 0x30(0x1)
	char                                                         pad0x7_PN73G[0x7];                                 // 0x31(0x7)
	TArray<class Object*>                                        Objects;                                           // 0x38(0x10)
	TArray<uintptr_t>                                            WeakObjects;                                       // 0x48(0x10)
	bool                                                         bUseWeakReferences;                                // 0x58(0x1)
	bool                                                         bIsFullyLoaded;                                    // 0x59(0x1)
	char                                                         pad0x16_X77UA[0x16];                               // 0x5a(0x16)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class SoundGroups: public Object
{
public:
	TArray<struct SoundGroup>                                    SoundGroupProfiles;                                // 0x28(0x10)
	char                                                         pad0x50_1EQVX[0x50];                               // 0x38(0x50)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class VectorField: public Object
{
public:
	struct Box                                                   Bounds;                                            // 0x28(0x1c)
	float                                                        Intensity;                                         // 0x44(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Interface_CollisionDataProvider: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VisualLoggerAutomationTests: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlueprintFunctionLibrary: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExecutableAnimMetaDataInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ParticleSystemAggregateTickSettings: public Object
{
public:
	int                                                          FramesTickScaledOver;                              // 0x28(0x4)
	int                                                          MaxTicksPerFrame;                                  // 0x2c(0x4)
	float                                                        PriorityInflationPower;                            // 0x30(0x4)
	char                                                         pad0x4_XD0C6[0x4];                                 // 0x34(0x4)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class AvoidanceManager: public Object
{
public:
	char                                                         pad0x8_GLNC6[0x8];                                 // 0x28(0x8)
	float                                                        DefaultTimeToLive;                                 // 0x30(0x4)
	float                                                        LockTimeAfterAvoid;                                // 0x34(0x4)
	float                                                        LockTimeAfterClean;                                // 0x38(0x4)
	float                                                        DeltaTimeToPredict;                                // 0x3c(0x4)
	float                                                        ArtificialRadiusExpansion;                         // 0x40(0x4)
	float                                                        TestHeightDifference;                              // 0x44(0x4)
	char                                                         pad0x80_GVXUB[0x80];                               // 0x48(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetPhysicsInterpolatorInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class TouchInterface: public Object
{
public:
	TArray<struct TouchInputControl>                             Controls;                                          // 0x28(0x10)
	float                                                        ActiveOpacity;                                     // 0x38(0x4)
	float                                                        InactiveOpacity;                                   // 0x3c(0x4)
	float                                                        TimeUntilDeactive;                                 // 0x40(0x4)
	float                                                        TimeUntilReset;                                    // 0x44(0x4)
	float                                                        ActivationDelay;                                   // 0x48(0x4)
	bool                                                         bPreventRecenter;                                  // 0x4c(0x1)
	char                                                         pad0x3_2KMS0[0x3];                                 // 0x4d(0x3)
	float                                                        StartupDelay;                                      // 0x50(0x4)
	char                                                         pad0x4_1CWSD[0x4];                                 // 0x54(0x4)
};


// Size 0x4b8 (Full Size[0x4e0] - InheritedSize[0x28]
class NetDriver: public Object
{
public:
	char                                                         pad0x10_31A74[0x10];                               // 0x28(0x10)
	struct FString                                               NetConnectionClassName;                            // 0x38(0x10)
	int                                                          MaxDownloadSize;                                   // 0x48(0x4)
	bool                                                         bClampListenServerTickRate;                        // 0x4c(0x1)
	char                                                         pad0x3_B8CSP[0x3];                                 // 0x4d(0x3)
	int                                                          NetServerMaxTickRate;                              // 0x50(0x4)
	int                                                          MaxInternetClientRate;                             // 0x54(0x4)
	int                                                          MaxClientRate;                                     // 0x58(0x4)
	float                                                        ServerTravelPause;                                 // 0x5c(0x4)
	float                                                        SpawnPrioritySeconds;                              // 0x60(0x4)
	float                                                        RelevantTimeout;                                   // 0x64(0x4)
	float                                                        KeepAliveTime;                                     // 0x68(0x4)
	float                                                        InitialConnectTimeout;                             // 0x6c(0x4)
	float                                                        ConnectionTimeout;                                 // 0x70(0x4)
	char                                                         pad0x4_W9ZTM[0x4];                                 // 0x74(0x4)
	class NetConnection*                                         ServerConnection;                                  // 0x78(0x8)
	TArray<class NetConnection*>                                 ClientConnections;                                 // 0x80(0x10)
	class World*                                                 World;                                             // 0x90(0x8)
	char                                                         pad0x48_GJZYH[0x48];                               // 0x98(0x48)
	class UClass*                                                NetConnectionClass;                                // 0xe0(0x8)
	class Property*                                              RoleProperty;                                      // 0xe8(0x8)
	class Property*                                              RemoteRoleProperty;                                // 0xf0(0x8)
	struct FName                                                 NetDriverName;                                     // 0xf8(0x8)
	char                                                         pad0x3e0_SOD5W[0x3e0];                             // 0x100(0x3e0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavLinkHostInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class InterpGroupInst: public Object
{
public:
	class InterpGroup*                                           Group;                                             // 0x28(0x8)
	class Actor*                                                 GroupActor;                                        // 0x30(0x8)
	TArray<class InterpTrackInst*>                               TrackInst;                                         // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimStateMachineTypes: public Object
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class UserDefinedStruct: public ScriptStruct
{
public:
	struct Guid                                                  Guid;                                              // 0x98(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class CurveBase: public Object
{
public:
	char                                                         pad0x8_5IHLB[0x8];                                 // 0x28(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TimecodeProvider: public Object
{
public:
	float                                                        FrameDelay;                                        // 0x28(0x4)
	char                                                         pad0x4_PV7TF[0x4];                                 // 0x2c(0x4)
};


// Size 0x218 (Full Size[0x240] - InheritedSize[0x28]
class PhysicsConstraintTemplate: public Object
{
public:
	struct FName                                                 JointName;                                         // 0x28(0x8)
	struct FName                                                 ConstraintBone1;                                   // 0x30(0x8)
	struct FName                                                 ConstraintBone2;                                   // 0x38(0x8)
	struct Vector                                                Pos1;                                              // 0x40(0xc)
	struct Vector                                                PriAxis1;                                          // 0x4c(0xc)
	struct Vector                                                SecAxis1;                                          // 0x58(0xc)
	struct Vector                                                Pos2;                                              // 0x64(0xc)
	struct Vector                                                PriAxis2;                                          // 0x70(0xc)
	struct Vector                                                SecAxis2;                                          // 0x7c(0xc)
	bool                                                         bEnableProjection;                                 // 0x88(0x1)
	char                                                         pad0x3_X18L8[0x3];                                 // 0x89(0x3)
	float                                                        ProjectionLinearTolerance;                         // 0x8c(0x4)
	float                                                        ProjectionAngularTolerance;                        // 0x90(0x4)
	char                                                         LinearXMotion;                                     // 0x94(0x1)
	char                                                         LinearYMotion;                                     // 0x95(0x1)
	char                                                         LinearZMotion;                                     // 0x96(0x1)
	char                                                         pad0x1_216BN[0x1];                                 // 0x97(0x1)
	float                                                        LinearLimitSize;                                   // 0x98(0x4)
	bool                                                         bLinearLimitSoft;                                  // 0x9c(0x1)
	char                                                         pad0x3_P3KHG[0x3];                                 // 0x9d(0x3)
	float                                                        LinearLimitStiffness;                              // 0xa0(0x4)
	float                                                        LinearLimitDamping;                                // 0xa4(0x4)
	bool                                                         bLinearBreakable;                                  // 0xa8(0x1)
	char                                                         pad0x3_NC0WH[0x3];                                 // 0xa9(0x3)
	float                                                        LinearBreakThreshold;                              // 0xac(0x4)
	char                                                         AngularSwing1Motion;                               // 0xb0(0x1)
	char                                                         AngularSwing2Motion;                               // 0xb1(0x1)
	char                                                         AngularTwistMotion;                                // 0xb2(0x1)
	char                                                         pad0x1_HHBK3[0x1];                                 // 0xb3(0x1)
	bool                                                         bSwingLimitSoft;                                   // 0xb4(0x1)
	bool                                                         bTwistLimitSoft;                                   // 0xb4(0x1)
	char                                                         pad0x3_0UY2H[0x3];                                 // 0xb5(0x3)
	float                                                        Swing1LimitAngle;                                  // 0xb8(0x4)
	float                                                        Swing2LimitAngle;                                  // 0xbc(0x4)
	float                                                        TwistLimitAngle;                                   // 0xc0(0x4)
	float                                                        SwingLimitStiffness;                               // 0xc4(0x4)
	float                                                        SwingLimitDamping;                                 // 0xc8(0x4)
	float                                                        TwistLimitStiffness;                               // 0xcc(0x4)
	float                                                        TwistLimitDamping;                                 // 0xd0(0x4)
	bool                                                         bAngularBreakable;                                 // 0xd4(0x1)
	char                                                         pad0x3_LQJPU[0x3];                                 // 0xd5(0x3)
	float                                                        AngularBreakThreshold;                             // 0xd8(0x4)
	char                                                         pad0x4_K774C[0x4];                                 // 0xdc(0x4)
	struct ConstraintInstance                                    DefaultInstance;                                   // 0xe0(0x160)
};


// Size 0x2e0 (Full Size[0x308] - InheritedSize[0x28]
class AutomationTestSettings: public Object
{
public:
	struct FilePath                                              AutomationTestmap;                                 // 0x28(0x10)
	TArray<struct EditorMapPerformanceTestDefinition>            EditorPerformanceTestMaps;                         // 0x38(0x10)
	struct BuildPromotionTestSettings                            BuildPromotionTest;                                // 0x48(0x210)
	struct MaterialEditorPromotionSettings                       MaterialEditorPromotionTest;                       // 0x258(0x30)
	struct ParticleEditorPromotionSettings                       ParticleEditorPromotionTest;                       // 0x288(0x10)
	TArray<String>                                               EngineTestModules;                                 // 0x298(0x10)
	TArray<String>                                               EditorTestModules;                                 // 0x2a8(0x10)
	TArray<String>                                               TestLevelFolders;                                  // 0x2b8(0x10)
	TArray<struct OpenTestAsset>                                 TestAssetsToOpen;                                  // 0x2c8(0x10)
	TArray<struct ExternalToolDefinition>                        ExternalTools;                                     // 0x2d8(0x10)
	TArray<struct EditorImportExportTestDefinition>              ImportExportTestDefinitions;                       // 0x2e8(0x10)
	TArray<struct LaunchOnTestSettings>                          LaunchOnSettings;                                  // 0x2f8(0x10)
};


// Size 0xc0 (Full Size[0xe8] - InheritedSize[0x28]
class SoundAttenuation: public Object
{
public:
	struct AttenuationSettings                                   Attenuation;                                       // 0x28(0xc0)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class MaterialParameterCollection: public Object
{
public:
	struct Guid                                                  StateId;                                           // 0x28(0x10)
	TArray<struct CollectionScalarParameter>                     ScalarParameters;                                  // 0x38(0x10)
	TArray<struct CollectionVectorParameter>                     VectorParameters;                                  // 0x48(0x10)
	char                                                         pad0x8_4GFYF[0x8];                                 // 0x58(0x8)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class ParticleEmitter: public Object
{
public:
	struct FName                                                 EmitterName;                                       // 0x28(0x8)
	int                                                          SubUVDataOffset;                                   // 0x30(0x4)
	char                                                         EmitterRenderMode;                                 // 0x34(0x1)
	char                                                         pad0x3_QH32Y[0x3];                                 // 0x35(0x3)
	TArray<class ParticleLODLevel*>                              LODLevels;                                         // 0x38(0x10)
	bool                                                         ConvertedModules;                                  // 0x48(0x1)
	char                                                         pad0x3_OU8IM[0x3];                                 // 0x49(0x3)
	int                                                          PeakActiveParticles;                               // 0x4c(0x4)
	int                                                          InitialAllocationCount;                            // 0x50(0x4)
	float                                                        MediumDetailSpawnRateScale;                        // 0x54(0x4)
	float                                                        QualityLevelSpawnRateScale;                        // 0x58(0x4)
	char                                                         DetailMode;                                        // 0x5c(0x1)
	char                                                         MaxEmitterQuality;                                 // 0x5d(0x1)
	char                                                         MinEmitterQuality;                                 // 0x5e(0x1)
	char                                                         pad0x1_D4MZG[0x1];                                 // 0x5f(0x1)
	bool                                                         bIsSoloing;                                        // 0x60(0x1)
	bool                                                         bCookedOut;                                        // 0x60(0x1)
	bool                                                         bDisabledLODsKeepEmitterAlive;                     // 0x60(0x1)
	bool                                                         bHasAnyEnabledLODs;                                // 0x60(0x1)
	bool                                                         bHasAnyEnabledLODsValid;                           // 0x60(0x1)
	char                                                         pad0x3f_LG230[0x3f];                               // 0x61(0x3f)
	TArray<class ParticleModule*>                                ModulesNeedingInstanceData;                        // 0xa0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EdGraphSchema: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InterpFilter: public Object
{
public:
	struct FString                                               Caption;                                           // 0x28(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class SubsurfaceProfile: public Object
{
public:
	struct SubsurfaceProfileStruct                               Settings;                                          // 0x28(0x24)
	char                                                         pad0x4_M10GS[0x4];                                 // 0x4c(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AISystemBase: public Object
{
public:
	struct StringClassReference                                  AISystemClassName;                                 // 0x28(0x10)
	struct FName                                                 AISystemModuleName;                                // 0x38(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ScriptViewportClient: public Object
{
public:
	char                                                         pad0x8_DBJUS[0x8];                                 // 0x28(0x8)
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class FontImportOptions: public Object
{
public:
	struct FontImportOptionsData                                 Data;                                              // 0x28(0xb0)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SoundNode: public Object
{
public:
	TArray<class SoundNode*>                                     ChildNodes;                                        // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AnimNotifyState: public Object
{
public:
	bool                                                         PlayedWithSequencer;                               // 0x28(0x1)
	char                                                         pad0x7_H4883[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimNotifyCondition: public Object
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class StaticMeshSocket: public Object
{
public:
	struct FName                                                 SocketName;                                        // 0x28(0x8)
	struct Vector                                                RelativeLocation;                                  // 0x30(0xc)
	struct Rotator                                               RelativeRotation;                                  // 0x3c(0xc)
	struct Vector                                                RelativeScale;                                     // 0x48(0xc)
	char                                                         pad0x4_BEEMZ[0x4];                                 // 0x54(0x4)
	struct FString                                               Tag;                                               // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AssetImportData: public Object
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class NavigationPath: public Object
{
public:
	char                                                         pad0x10_00DG6[0x10];                               // 0x28(0x10)
	TArray<struct Vector>                                        PathPoints;                                        // 0x38(0x10)
	char                                                         RecalculateOnInvalidation;                         // 0x48(0x1)
	char                                                         pad0x3f_E1BQW[0x3f];                               // 0x49(0x3f)
};


// Size 0x1a8 (Full Size[0x1f8] - InheritedSize[0x50]
class PackageMapClient: public PackageMap
{
public:
	char                                                         pad0x1a8_X3LK7[0x1a8];                             // 0x50(0x1a8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class PhysicalMaterial: public Object
{
public:
	float                                                        Friction;                                          // 0x28(0x4)
	char                                                         FrictionCombineMode;                               // 0x2c(0x1)
	bool                                                         bOverrideFrictionCombineMode;                      // 0x2d(0x1)
	char                                                         pad0x2_FUR2Z[0x2];                                 // 0x2e(0x2)
	float                                                        Restitution;                                       // 0x30(0x4)
	char                                                         RestitutionCombineMode;                            // 0x34(0x1)
	bool                                                         bOverrideRestitutionCombineMode;                   // 0x35(0x1)
	char                                                         pad0x2_KUDPA[0x2];                                 // 0x36(0x2)
	float                                                        Density;                                           // 0x38(0x4)
	float                                                        RaiseMassToPower;                                  // 0x3c(0x4)
	float                                                        DestructibleDamageThresholdScale;                  // 0x40(0x4)
	char                                                         pad0x4_87441[0x4];                                 // 0x44(0x4)
	class PhysicalMaterialPropertyBase*                          PhysicalMaterialProperty;                          // 0x48(0x8)
	char                                                         SurfaceType;                                       // 0x50(0x1)
	char                                                         pad0x1f_RHL6P[0x1f];                               // 0x51(0x1f)
};


// Size 0x68 (Full Size[0x228] - InheritedSize[0x1c0]
class BlueprintGeneratedClass: public Class
{
public:
	int                                                          NumReplicatedProperties;                           // 0x1c0(0x4)
	char                                                         pad0x4_RD53R[0x4];                                 // 0x1c4(0x4)
	TArray<class DynamicBlueprintBinding*>                       DynamicBindingObjects;                             // 0x1c8(0x10)
	TArray<class ActorComponent*>                                ComponentTemplates;                                // 0x1d8(0x10)
	TArray<class TimelineTemplate*>                              Timelines;                                         // 0x1e8(0x10)
	class SimpleConstructionScript*                              SimpleConstructionScript;                          // 0x1f8(0x8)
	class InheritableComponentHandler*                           InheritableComponentHandler;                       // 0x200(0x8)
	class StructProperty*                                        UberGraphFramePointerProperty;                     // 0x208(0x8)
	class Function*                                              UberGraphFunction;                                 // 0x210(0x8)
	TArray<struct EventGraphFastCallPair>                        FastCallPairs;                                     // 0x218(0x10)
};


// Size 0x100 (Full Size[0x128] - InheritedSize[0x28]
class EdGraphPin: public Object
{
public:
	struct FString                                               PinName;                                           // 0x28(0x10)
	struct FString                                               PinToolTip;                                        // 0x38(0x10)
	char                                                         Direction;                                         // 0x48(0x1)
	char                                                         pad0x7_Y9DRI[0x7];                                 // 0x49(0x7)
	struct EdGraphPinType                                        PinType;                                           // 0x50(0x50)
	struct FString                                               DefaultValue;                                      // 0xa0(0x10)
	struct FString                                               AutogeneratedDefaultValue;                         // 0xb0(0x10)
	class Object*                                                DefaultObject;                                     // 0xc0(0x8)
	struct FText                                                 DefaultTextValue;                                  // 0xc8(0x38)
	TArray<class EdGraphPin*>                                    LinkedTo;                                          // 0x100(0x10)
	TArray<class EdGraphPin*>                                    SubPins;                                           // 0x110(0x10)
	class EdGraphPin*                                            ParentPin;                                         // 0x120(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DeveloperSettings: public Object
{
public:
	char                                                         pad0x10_GWVDW[0x10];                               // 0x28(0x10)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class PlatformInterfaceWebResponse: public Object
{
public:
	struct FString                                               OriginalURL;                                       // 0x28(0x10)
	int                                                          ResponseCode;                                      // 0x38(0x4)
	int                                                          Tag;                                               // 0x3c(0x4)
	struct FString                                               StringResponse;                                    // 0x40(0x10)
	TArray<char>                                                 BinaryResponse;                                    // 0x50(0x10)
	char                                                         pad0x50_BRZ5C[0x50];                               // 0x60(0x50)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class SkeletalMeshSocket: public Object
{
public:
	struct FName                                                 SocketName;                                        // 0x28(0x8)
	struct FName                                                 BoneName;                                          // 0x30(0x8)
	struct Vector                                                RelativeLocation;                                  // 0x38(0xc)
	struct Rotator                                               RelativeRotation;                                  // 0x44(0xc)
	struct Vector                                                RelativeScale;                                     // 0x50(0xc)
	bool                                                         bForceAlwaysAnimated;                              // 0x5c(0x1)
	char                                                         pad0x3_CWZRP[0x3];                                 // 0x5d(0x3)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class TimelineTemplate: public Object
{
public:
	float                                                        TimelineLength;                                    // 0x28(0x4)
	char                                                         LengthMode;                                        // 0x2c(0x1)
	char                                                         pad0x3_ZLR38[0x3];                                 // 0x2d(0x3)
	bool                                                         bAutoPlay;                                         // 0x30(0x1)
	bool                                                         bLoop;                                             // 0x30(0x1)
	bool                                                         bReplicated;                                       // 0x30(0x1)
	bool                                                         bValidatedAsWired;                                 // 0x30(0x1)
	char                                                         pad0x7_JG8AM[0x7];                                 // 0x31(0x7)
	TArray<struct TTEventTrack>                                  EventTracks;                                       // 0x38(0x10)
	TArray<struct TTFloatTrack>                                  FloatTracks;                                       // 0x48(0x10)
	TArray<struct TTVectorTrack>                                 VectorTracks;                                      // 0x58(0x10)
	TArray<struct TTLinearColorTrack>                            LinearColorTracks;                                 // 0x68(0x10)
	TArray<struct BPVariableMetaDataEntry>                       MetaDataArray;                                     // 0x78(0x10)
	struct Guid                                                  TimelineGuid;                                      // 0x88(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InheritableComponentHandler: public Object
{
public:
	TArray<struct ComponentOverrideRecord>                       Records;                                           // 0x28(0x10)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class BrushBuilder: public Object
{
public:
	struct FString                                               BitmapFilename;                                    // 0x28(0x10)
	struct FString                                               Tooltip;                                           // 0x38(0x10)
	bool                                                         NotifyBadParams;                                   // 0x48(0x1)
	char                                                         pad0x7_UUT7L[0x7];                                 // 0x49(0x7)
	TArray<struct Vector>                                        Vertices;                                          // 0x50(0x10)
	TArray<struct BuilderPoly>                                   Polys;                                             // 0x60(0x10)
	struct FName                                                 Layer;                                             // 0x70(0x8)
	bool                                                         MergeCoplanars;                                    // 0x78(0x1)
	char                                                         pad0x7_43D45[0x7];                                 // 0x79(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AnimNotify: public Object
{
public:
	bool                                                         PlayedWithSequencer;                               // 0x28(0x1)
	char                                                         pad0xf_52SO8[0xf];                                 // 0x29(0xf)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class SoundClass: public Object
{
public:
	struct SoundClassProperties                                  Properties;                                        // 0x28(0x24)
	char                                                         pad0x4_33ONI[0x4];                                 // 0x4c(0x4)
	TArray<class SoundClass*>                                    ChildClasses;                                      // 0x50(0x10)
	TArray<struct PassiveSoundMixModifier>                       PassiveSoundMixModifiers;                          // 0x60(0x10)
	class SoundClass*                                            ParentClass;                                       // 0x70(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BoneMaskFilter: public Object
{
public:
	TArray<struct InputBlendPose>                                BlendPoses;                                        // 0x28(0x10)
};


// Size 0x878 (Full Size[0x8a0] - InheritedSize[0x28]
class World: public Object
{
public:
	char                                                         pad0x8_6D3OC[0x8];                                 // 0x28(0x8)
	class NetDriver*                                             NetDriver;                                         // 0x30(0x8)
	class LineBatchComponent*                                    LineBatcher;                                       // 0x38(0x8)
	class GameState*                                             GameState;                                         // 0x40(0x8)
	class GameNetworkManager*                                    NetworkManager;                                    // 0x48(0x8)
	char                                                         pad0x10_YB3PU[0x10];                               // 0x50(0x10)
	class Level*                                                 PersistentLevel;                                   // 0x60(0x8)
	char                                                         pad0x20_9HMHH[0x20];                               // 0x68(0x20)
	class PhysicsCollisionHandler*                               PhysicsCollisionHandler;                           // 0x88(0x8)
	TArray<class Object*>                                        ExtraReferencedObjects;                            // 0x90(0x10)
	class LineBatchComponent*                                    PersistentLineBatcher;                             // 0xa0(0x8)
	class LineBatchComponent*                                    ForegroundLineBatcher;                             // 0xa8(0x8)
	TArray<class Object*>                                        PerModuleDataObjects;                              // 0xb0(0x10)
	TArray<class LevelStreaming*>                                StreamingLevels;                                   // 0xc0(0x10)
	struct FString                                               StreamingLevelsPrefix;                             // 0xd0(0x10)
	class Level*                                                 CurrentLevelPendingVisibility;                     // 0xe0(0x8)
	class ParticleEventManager*                                  MyParticleEventManager;                            // 0xe8(0x8)
	class PhysicsVolume*                                         DefaultPhysicsVolume;                              // 0xf0(0x8)
	TArray<class LevelStreaming*>                                DirtyStreamingLevels;                              // 0xf8(0x10)
	char                                                         pad0x1c_DITBU[0x1c];                               // 0x108(0x1c)
	struct FName                                                 Feature;                                           // 0x124(0x8)
	char                                                         pad0x4_BQQH7[0x4];                                 // 0x12c(0x4)
	TArray<struct Name>                                          FeatureReferences;                                 // 0x130(0x10)
	bool                                                         ParticleLOD_bUseGameThread;                        // 0x140(0x1)
	bool                                                         ParticleLOD_bUseMultipleViewportCase;              // 0x141(0x1)
	char                                                         pad0x2_PE9OH[0x2];                                 // 0x142(0x2)
	struct Vector                                                ParticleLOD_PlayerViewpointLocation;               // 0x144(0xc)
	struct FString                                               TestMetadata;                                      // 0x150(0x10)
	class NavigationSystem*                                      NavigationSystem;                                  // 0x160(0x8)
	char                                                         pad0x20_CH092[0x20];                               // 0x168(0x20)
	class GameMode*                                              AuthorityGameMode;                                 // 0x188(0x8)
	class AISystemBase*                                          AISystem;                                          // 0x190(0x8)
	class AvoidanceManager*                                      AvoidanceManager;                                  // 0x198(0x8)
	TArray<class Level*>                                         Levels;                                            // 0x1a0(0x10)
	char                                                         pad0x70_6VF86[0x70];                               // 0x1b0(0x70)
	class Level*                                                 CurrentLevel;                                      // 0x220(0x8)
	char                                                         pad0x28_TBL8E[0x28];                               // 0x228(0x28)
	class GameInstance*                                          OwningGameInstance;                                // 0x250(0x8)
	char                                                         pad0x10_DG2E7[0x10];                               // 0x258(0x10)
	TArray<class MaterialParameterCollectionInstance*>           ParameterCollectionInstances;                      // 0x268(0x10)
	char                                                         pad0x550_RG0YV[0x550];                             // 0x278(0x550)
	class WorldComposition*                                      WorldComposition;                                  // 0x7c8(0x8)
	char                                                         pad0x3d_57P5P[0x3d];                               // 0x7d0(0x3d)
	bool                                                         bAreConstraintsDirty;                              // 0x80d(0x1)
	char                                                         pad0x92_2HEFG[0x92];                               // 0x80e(0x92)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavNodeInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class GPUSortDestData: public Object
{
public:
	char                                                         pad0x8_2IJQ1[0x8];                                 // 0x28(0x8)
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class Texture: public Object
{
public:
	int                                                          LODBias;                                           // 0x28(0x4)
	int                                                          NumCinematicMipLevels;                             // 0x2c(0x4)
	bool                                                         SRGB;                                              // 0x30(0x1)
	bool                                                         NeverStream;                                       // 0x30(0x1)
	bool                                                         bNoTiling;                                         // 0x30(0x1)
	bool                                                         bUseCinematicMipLevels;                            // 0x30(0x1)
	bool                                                         CompressionNone;                                   // 0x30(0x1)
	bool                                                         bUAV;                                              // 0x30(0x1)
	char                                                         pad0x3_ESY3H[0x3];                                 // 0x31(0x3)
	int                                                          CachedCombinedLODBias;                             // 0x38(0x4)
	bool                                                         bAsyncResourceReleaseHasBeenStarted;               // 0x3c(0x1)
	char                                                         pad0x3_9AGT0[0x3];                                 // 0x3d(0x3)
	char                                                         CompressionSettings;                               // 0x40(0x1)
	char                                                         Filter;                                            // 0x41(0x1)
	char                                                         LODGroup;                                          // 0x42(0x1)
	char                                                         pad0x1_EW9F4[0x1];                                 // 0x43(0x1)
	float                                                        StreamingPriorityBoost;                            // 0x44(0x4)
	char                                                         pad0x60_HN9VS[0x60];                               // 0x48(0x60)
	TArray<struct ExternalMip>                                   ExternalMips;                                      // 0xa8(0x10)
	char                                                         pad0x88_S5SYW[0x88];                               // 0xb8(0x88)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InterpTrackInst: public Object
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class IntSerialization: public Object
{
public:
	char                                                         pad0x20_OK5KI[0x20];                               // 0x28(0x20)
	char                                                         UnsignedInt8Variable;                              // 0x48(0x1)
	char                                                         pad0x3_ZDV8D[0x3];                                 // 0x49(0x3)
	int                                                          SignedInt32Variable;                               // 0x4c(0x4)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class MaybeCompressedCanvasRenderTarget2D: public Object
{
public:
	char                                                         pad0x10_T6JAO[0x10];                               // 0x28(0x10)
	int                                                          ChannelCount;                                      // 0x38(0x4)
	char                                                         pad0x4_MJR5R[0x4];                                 // 0x3c(0x4)
	class CanvasRenderTarget2D*                                  UncompressedRenderTarget;                          // 0x40(0x8)
	class CompressedCanvasRenderTarget2D*                        CompressedRenderTarget;                            // 0x48(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class LightmappedSurfaceCollection: public Object
{
public:
	class Model*                                                 SourceModel;                                       // 0x28(0x8)
	TArray<int>                                                  Surfaces;                                          // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlendableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstancedNavMeshInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MeshPatchAsset: public Object
{
public:
	char                                                         pad0x10_9KE1S[0x10];                               // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EndUserSettings: public Object
{
public:
	char                                                         pad0x8_41LXQ[0x8];                                 // 0x28(0x8)
	bool                                                         bSendAnonymousUsageDataToEpic;                     // 0x30(0x1)
	char                                                         pad0x7_R5Q7X[0x7];                                 // 0x31(0x7)
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class CameraShake: public Object
{
public:
	bool                                                         bSingleInstance;                                   // 0x28(0x1)
	char                                                         pad0x3_WRV00[0x3];                                 // 0x29(0x3)
	float                                                        OscillationDuration;                               // 0x2c(0x4)
	float                                                        OscillationBlendInTime;                            // 0x30(0x4)
	float                                                        OscillationBlendOutTime;                           // 0x34(0x4)
	struct ROscillator                                           RotOscillation;                                    // 0x38(0x24)
	struct VOscillator                                           LocOscillation;                                    // 0x5c(0x24)
	struct FOscillator                                           FOVOscillation;                                    // 0x80(0xc)
	float                                                        AnimPlayRate;                                      // 0x8c(0x4)
	float                                                        AnimScale;                                         // 0x90(0x4)
	float                                                        AnimBlendInTime;                                   // 0x94(0x4)
	float                                                        AnimBlendOutTime;                                  // 0x98(0x4)
	float                                                        RandomAnimSegmentDuration;                         // 0x9c(0x4)
	class CameraAnim*                                            Anim;                                              // 0xa0(0x8)
	bool                                                         bRandomAnimSegment;                                // 0xa8(0x1)
	char                                                         pad0x17_1LXS6[0x17];                               // 0xa9(0x17)
	class PlayerCameraManager*                                   CameraOwner;                                       // 0xc0(0x8)
	char                                                         pad0x68_SQ7YI[0x68];                               // 0xc8(0x68)
	float                                                        ShakeScale;                                        // 0x130(0x4)
	float                                                        OscillatorTimeRemaining;                           // 0x134(0x4)
	class CameraAnimInst*                                        AnimInst;                                          // 0x138(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DialogueVoice: public Object
{
public:
	char                                                         Gender;                                            // 0x28(0x1)
	char                                                         Plurality;                                         // 0x29(0x1)
	char                                                         pad0x2_KHHZD[0x2];                                 // 0x2a(0x2)
	struct Guid                                                  LocalizationGUID;                                  // 0x2c(0x10)
	char                                                         pad0x4_7UWZT[0x4];                                 // 0x3c(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DamageType: public Object
{
public:
	bool                                                         bCausedByWorld;                                    // 0x28(0x1)
	bool                                                         bScaleMomentumByMass;                              // 0x28(0x1)
	char                                                         pad0x3_404DQ[0x3];                                 // 0x29(0x3)
	float                                                        DamageImpulse;                                     // 0x2c(0x4)
	bool                                                         bRadialDamageVelChange;                            // 0x30(0x1)
	char                                                         pad0x3_5L16W[0x3];                                 // 0x31(0x3)
	float                                                        DestructibleImpulse;                               // 0x34(0x4)
	float                                                        DestructibleDamageSpreadScale;                     // 0x38(0x4)
	float                                                        DamageFalloff;                                     // 0x3c(0x4)
};


// Size 0x110 (Full Size[0x138] - InheritedSize[0x28]
class HIKCharacterization: public Object
{
public:
	struct FName                                                 Reference;                                         // 0x28(0x8)
	struct FName                                                 Hips;                                              // 0x30(0x8)
	struct FName                                                 LeftUpLeg;                                         // 0x38(0x8)
	struct FName                                                 LeftLeg;                                           // 0x40(0x8)
	struct FName                                                 LeftFoot;                                          // 0x48(0x8)
	struct FName                                                 RightUpLeg;                                        // 0x50(0x8)
	struct FName                                                 RightLeg;                                          // 0x58(0x8)
	struct FName                                                 RightFoot;                                         // 0x60(0x8)
	struct FName                                                 Spine;                                             // 0x68(0x8)
	struct FName                                                 LeftArm;                                           // 0x70(0x8)
	struct FName                                                 LeftForeArm;                                       // 0x78(0x8)
	struct FName                                                 LeftHand;                                          // 0x80(0x8)
	struct FName                                                 RightArm;                                          // 0x88(0x8)
	struct FName                                                 RightForeArm;                                      // 0x90(0x8)
	struct FName                                                 RightHand;                                         // 0x98(0x8)
	struct FName                                                 Head;                                              // 0xa0(0x8)
	TArray<struct HIKBoneTransform>                              BoneTransforms;                                    // 0xa8(0x10)
	bool                                                         Locked;                                            // 0xb8(0x1)
	char                                                         pad0x7_LY628[0x7];                                 // 0xb9(0x7)
	TArray<int>                                                  UnrealToHumanIKBoneMapping;                        // 0xc0(0x10)
	TArray<struct HIKBoneMapping>                                AdditionalBones;                                   // 0xd0(0x10)
	bool                                                         LeftElbowInverted;                                 // 0xe0(0x1)
	bool                                                         RightElbowInverted;                                // 0xe1(0x1)
	bool                                                         LeftKneeInverted;                                  // 0xe2(0x1)
	bool                                                         RightKneeInverted;                                 // 0xe3(0x1)
	bool                                                         AdjustLeftShoulder;                                // 0xe4(0x1)
	char                                                         pad0x3_XHL35[0x3];                                 // 0xe5(0x3)
	struct Vector                                                AdjustLeftShoulder_Axis;                           // 0xe8(0xc)
	float                                                        AdjustLeftShoulder_Angle;                          // 0xf4(0x4)
	bool                                                         AdjustRightShoulder;                               // 0xf8(0x1)
	char                                                         pad0x3_LYKII[0x3];                                 // 0xf9(0x3)
	struct Vector                                                AdjustRightShoulder_Axis;                          // 0xfc(0xc)
	float                                                        AdjustRightShoulder_Angle;                         // 0x108(0x4)
	bool                                                         SpineSquashNStretch;                               // 0x10c(0x1)
	bool                                                         NeckSquashNStretch;                                // 0x10d(0x1)
	char                                                         pad0x2_65BXZ[0x2];                                 // 0x10e(0x2)
	float                                                        SpineJointsMinSquashNStretchFactor;                // 0x110(0x4)
	float                                                        SpineJointsMaxSquashNStretchFactor;                // 0x114(0x4)
	float                                                        NeckJointsMinSquashNStretchFactor;                 // 0x118(0x4)
	float                                                        NeckJointsMaxSquashNStretchFactor;                 // 0x11c(0x4)
	bool                                                         bInitFromSkeleton;                                 // 0x120(0x1)
	char                                                         pad0x3_RXUS5[0x3];                                 // 0x121(0x3)
	int                                                          InitFromSkeletonCount;                             // 0x124(0x4)
	struct Rotator                                               ImportRotator;                                     // 0x128(0xc)
	char                                                         pad0x4_2USOI[0x4];                                 // 0x134(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class Player: public Object
{
public:
	char                                                         pad0x8_YDQV5[0x8];                                 // 0x28(0x8)
	class PlayerController*                                      PlayerController;                                  // 0x30(0x8)
	int                                                          CurrentNetSpeed;                                   // 0x38(0x4)
	int                                                          ConfiguredInternetSpeed;                           // 0x3c(0x4)
	int                                                          ConfiguredLanSpeed;                                // 0x40(0x4)
	char                                                         pad0x4_P82LZ[0x4];                                 // 0x44(0x4)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class EdGraphNode: public Object
{
public:
	TArray<class EdGraphPin*>                                    Pins;                                              // 0x28(0x10)
	int                                                          NodePosX;                                          // 0x38(0x4)
	int                                                          NodePosY;                                          // 0x3c(0x4)
	int                                                          NodeWidth;                                         // 0x40(0x4)
	int                                                          NodeHeight;                                        // 0x44(0x4)
	bool                                                         bHasCompilerMessage;                               // 0x48(0x1)
	char                                                         pad0x7_4ZBFT[0x7];                                 // 0x49(0x7)
	struct FString                                               NodeComment;                                       // 0x50(0x10)
	bool                                                         bCommentBubblePinned;                              // 0x60(0x1)
	bool                                                         bCommentBubbleVisible;                             // 0x61(0x1)
	char                                                         pad0x2_MW4WI[0x2];                                 // 0x62(0x2)
	int                                                          ErrorType;                                         // 0x64(0x4)
	struct FString                                               ErrorMsg;                                          // 0x68(0x10)
	struct Guid                                                  NodeGuid;                                          // 0x78(0x10)
	char                                                         AdvancedPinDisplay;                                // 0x88(0x1)
	bool                                                         bIsNodeEnabled;                                    // 0x89(0x1)
	bool                                                         bIsDebugFunction;                                  // 0x8a(0x1)
	char                                                         pad0x5_UM87P[0x5];                                 // 0x8b(0x5)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class Channel: public Object
{
public:
	class NetConnection*                                         Connection;                                        // 0x28(0x8)
	char                                                         pad0x38_Y4VFV[0x38];                               // 0x30(0x38)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class Breakpoint: public Object
{
public:
	bool                                                         bEnabled;                                          // 0x28(0x1)
	char                                                         pad0x7_9BD3D[0x7];                                 // 0x29(0x7)
	class EdGraphNode*                                           Node;                                              // 0x30(0x8)
	bool                                                         bStepOnce;                                         // 0x38(0x1)
	bool                                                         bStepOnce_WasPreviouslyDisabled;                   // 0x38(0x1)
	bool                                                         bStepOnce_RemoveAfterHit;                          // 0x38(0x1)
	char                                                         pad0x7_AXE2I[0x7];                                 // 0x39(0x7)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class BlueprintCore: public Object
{
public:
	class UClass*                                                SkeletonGeneratedClass;                            // 0x28(0x8)
	class UClass*                                                GeneratedClass;                                    // 0x30(0x8)
	bool                                                         bLegacyNeedToPurgeSkelRefs;                        // 0x38(0x1)
	bool                                                         bLegacyGeneratedClassIsAuthoritative;              // 0x39(0x1)
	char                                                         pad0x2_W1JUA[0x2];                                 // 0x3a(0x2)
	struct Guid                                                  BlueprintGuid;                                     // 0x3c(0x10)
	char                                                         pad0x4_CKKSC[0x4];                                 // 0x4c(0x4)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class NavLinkDefinition: public Object
{
public:
	TArray<struct NavigationLink>                                Links;                                             // 0x28(0x10)
	TArray<struct NavigationSegmentLink>                         SegmentLinks;                                      // 0x38(0x10)
	char                                                         pad0x8_XL44R[0x8];                                 // 0x48(0x8)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class SCS_Node: public Object
{
public:
	class ActorComponent*                                        ComponentTemplate;                                 // 0x28(0x8)
	struct FName                                                 VariableName;                                      // 0x30(0x8)
	struct FName                                                 AttachToName;                                      // 0x38(0x8)
	struct FName                                                 ParentComponentOrVariableName;                     // 0x40(0x8)
	struct FName                                                 ParentComponentOwnerClassName;                     // 0x48(0x8)
	bool                                                         bIsParentComponentNative;                          // 0x50(0x1)
	bool                                                         ServerMigrationFlagSet;                            // 0x51(0x1)
	char                                                         pad0x6_C1HDY[0x6];                                 // 0x52(0x6)
	TArray<class SCS_Node*>                                      ChildNodes;                                        // 0x58(0x10)
	TArray<struct BPVariableMetaDataEntry>                       MetaDataArray;                                     // 0x68(0x10)
	struct Guid                                                  VariableGuid;                                      // 0x78(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class Rig: public Object
{
public:
	TArray<struct TransformBase>                                 TransformBases;                                    // 0x28(0x10)
	TArray<struct Node>                                          Nodes;                                             // 0x38(0x10)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class MaterialExpression: public Object
{
public:
	class Material*                                              Material;                                          // 0x28(0x8)
	class MaterialFunction*                                      Function;                                          // 0x30(0x8)
	struct FString                                               Desc;                                              // 0x38(0x10)
	struct Color                                                 BorderColor;                                       // 0x48(0x4)
	bool                                                         bRealtimePreview;                                  // 0x4c(0x1)
	bool                                                         bNeedToUpdatePreview;                              // 0x4c(0x1)
	bool                                                         bIsParameterExpression;                            // 0x4c(0x1)
	bool                                                         bCommentBubbleVisible;                             // 0x4c(0x1)
	bool                                                         bShowOutputNameOnPin;                              // 0x4c(0x1)
	bool                                                         bHidePreviewWindow;                                // 0x4c(0x1)
	bool                                                         bCollapsed;                                        // 0x4c(0x1)
	bool                                                         bShaderInputData;                                  // 0x4c(0x1)
	bool                                                         bShowInputs;                                       // 0x4d(0x1)
	bool                                                         bShowOutputs;                                      // 0x4d(0x1)
	char                                                         pad0x2_S6ULL[0x2];                                 // 0x4e(0x2)
	TArray<struct Text>                                          MenuCategories;                                    // 0x50(0x10)
	TArray<struct ExpressionOutput>                              Outputs;                                           // 0x60(0x10)
};


// Size 0x240 (Full Size[0x268] - InheritedSize[0x28]
class Skeleton: public Object
{
public:
	TArray<struct BoneNode>                                      BoneTree;                                          // 0x28(0x10)
	char                                                         pad0x80_GANR3[0x80];                               // 0x38(0x80)
	TArray<struct SkeletonToMeshLinkup>                          LinkupCache;                                       // 0xb8(0x10)
	TArray<class SkeletalMeshSocket*>                            Sockets;                                           // 0xc8(0x10)
	char                                                         pad0x50_QCSE9[0x50];                               // 0xd8(0x50)
	struct SmartNameContainer                                    SmartNames;                                        // 0x128(0x50)
	TArray<struct AnimSlotGroup>                                 SlotGroups;                                        // 0x178(0x10)
	char                                                         pad0xe0_LPPQE[0xe0];                               // 0x188(0xe0)
};


// Size 0x110 (Full Size[0x138] - InheritedSize[0x28]
class StaticMesh: public Object
{
public:
	char                                                         pad0x18_PAZEK[0x18];                               // 0x28(0x18)
	int                                                          MinLOD;                                            // 0x40(0x4)
	char                                                         pad0x4_A9IQ6[0x4];                                 // 0x44(0x4)
	TArray<class MaterialInterface*>                             Materials;                                         // 0x48(0x10)
	int                                                          LightMapResolution;                                // 0x58(0x4)
	int                                                          LightMapCoordinateIndex;                           // 0x5c(0x4)
	class BodySetup*                                             BodySetup;                                         // 0x60(0x8)
	int                                                          LODForCollision;                                   // 0x68(0x4)
	bool                                                         bUseMaximumStreamingTexelRatio;                    // 0x6c(0x1)
	bool                                                         bStripComplexCollisionForConsole;                  // 0x6c(0x1)
	bool                                                         bHasNavigationData;                                // 0x6c(0x1)
	char                                                         pad0x3_IVJ4F[0x3];                                 // 0x6d(0x3)
	float                                                        StreamingDistanceMultiplier;                       // 0x70(0x4)
	float                                                        LpvBiasMultiplier;                                 // 0x74(0x4)
	char                                                         pad0x30_61N9L[0x30];                               // 0x78(0x30)
	TArray<class StaticMeshSocket*>                              Sockets;                                           // 0xa8(0x10)
	char                                                         pad0x18_G8VJ4[0x18];                               // 0xb8(0x18)
	struct Vector                                                PositiveBoundsExtension;                           // 0xd0(0xc)
	struct Vector                                                NegativeBoundsExtension;                           // 0xdc(0xc)
	struct BoxSphereBounds                                       ExtendedBounds;                                    // 0xe8(0x1c)
	char                                                         pad0x4_KSEEQ[0x4];                                 // 0x104(0x4)
	TArray<String>                                               SourceMaterials;                                   // 0x108(0x10)
	int                                                          UVsForStreaming;                                   // 0x118(0x4)
	int                                                          ElementToIgnoreForTexFactor;                       // 0x11c(0x4)
	TArray<class AssetUserData*>                                 AssetUserData;                                     // 0x120(0x10)
	class NavCollision*                                          NavCollision;                                      // 0x130(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InterpCurveEdSetup: public Object
{
public:
	TArray<struct CurveEdTab>                                    Tabs;                                              // 0x28(0x10)
	int                                                          ActiveTab;                                         // 0x38(0x4)
	char                                                         pad0x4_5OQCM[0x4];                                 // 0x3c(0x4)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class Exporter: public Object
{
public:
	class UClass*                                                SupportedClass;                                    // 0x28(0x8)
	class Object*                                                ExportRootScope;                                   // 0x30(0x8)
	TArray<String>                                               FormatExtension;                                   // 0x38(0x10)
	TArray<String>                                               FormatDescription;                                 // 0x48(0x10)
	int                                                          PreferredFormatIndex;                              // 0x58(0x4)
	int                                                          TextIndent;                                        // 0x5c(0x4)
	bool                                                         bText;                                             // 0x60(0x1)
	bool                                                         bSelectedOnly;                                     // 0x60(0x1)
	bool                                                         bForceFileOperations;                              // 0x60(0x1)
	char                                                         pad0x7_F7KOZ[0x7];                                 // 0x61(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlueprintAsyncActionBase: public Object
{
public:
};


// Size 0x418 (Full Size[0x440] - InheritedSize[0x28]
class AnimInstance: public Object
{
public:
	class Skeleton*                                              CurrentSkeleton;                                   // 0x28(0x8)
	TArray<struct AnimTickRecord>                                UngroupedActivePlayers;                            // 0x30(0x10)
	TArray<struct AnimGroupInstance>                             SyncGroups;                                        // 0x40(0x10)
	TArray<struct ActiveVertexAnim>                              VertexAnims;                                       // 0x50(0x10)
	char                                                         RootMotionMode;                                    // 0x60(0x1)
	bool                                                         bWarnAboutBlueprintUsage;                          // 0x61(0x1)
	char                                                         pad0x6_D9BIN[0x6];                                 // 0x62(0x6)
	bool                                                         bQueueMontageEvents;                               // 0x148(0x1)
	char                                                         pad0xf7_LCBYO[0xf7];                               // 0x149(0xf7)
	TArray<struct AnimNotifyEvent>                               ActiveAnimNotifyState;                             // 0x240(0x10)
	char                                                         pad0x100_QH87T[0x100];                             // 0x250(0x100)
	bool                                                         bBoneCachesInvalidated;                            // 0x3a8(0x1)
	char                                                         pad0x8f_DID6C[0x8f];                               // 0x3a9(0x8f)
	bool                                                         bBlueprintAnimUpdateEnabled;                       // 0x438(0x1)
	char                                                         pad0x7_M2JC2[0x7];                                 // 0x439(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Scene: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NavAgentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocalMessage: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AnimCompress: public Object
{
public:
	struct FString                                               Description;                                       // 0x28(0x10)
	bool                                                         bNeedsSkeleton;                                    // 0x38(0x1)
	char                                                         pad0x3_YU4RG[0x3];                                 // 0x39(0x3)
	char                                                         TranslationCompressionFormat;                      // 0x3c(0x1)
	char                                                         RotationCompressionFormat;                         // 0x3d(0x1)
	char                                                         ScaleCompressionFormat;                            // 0x3e(0x1)
	char                                                         pad0x1_2JRSE[0x1];                                 // 0x3f(0x1)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class BookMark: public Object
{
public:
	struct Vector                                                Location;                                          // 0x28(0xc)
	struct Rotator                                               Rotation;                                          // 0x34(0xc)
	TArray<String>                                               HiddenLevels;                                      // 0x40(0x10)
};


// Size 0x588 (Full Size[0x5b0] - InheritedSize[0x28]
class CameraAnim: public Object
{
public:
	class InterpGroup*                                           CameraInterpGroup;                                 // 0x28(0x8)
	float                                                        AnimLength;                                        // 0x30(0x4)
	struct Box                                                   BoundingBox;                                       // 0x34(0x1c)
	bool                                                         bRelativeToInitialTransform;                       // 0x50(0x1)
	char                                                         pad0x3_ECUSY[0x3];                                 // 0x51(0x3)
	float                                                        BaseFOV;                                           // 0x54(0x4)
	char                                                         pad0x8_EUWA5[0x8];                                 // 0x58(0x8)
	struct PostProcessSettings                                   BasePostProcessSettings;                           // 0x60(0x540)
	float                                                        BasePostProcessBlendWeight;                        // 0x5a0(0x4)
	char                                                         pad0xc_VZJXP[0xc];                                 // 0x5a4(0xc)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class RecastFilter_UseDefaultArea: public NavigationQueryFilter
{
public:
};


// Size 0xe8 (Full Size[0x158] - InheritedSize[0x70]
class MaterialExpressionRotateAboutAxis: public MaterialExpression
{
public:
	struct ExpressionInput                                       NormalizedRotationAxis;                            // 0x70(0x38)
	struct ExpressionInput                                       RotationAngle;                                     // 0xa8(0x38)
	struct ExpressionInput                                       PivotPoint;                                        // 0xe0(0x38)
	struct ExpressionInput                                       Position;                                          // 0x118(0x38)
	float                                                        Period;                                            // 0x150(0x4)
	char                                                         pad0x4_OEYK7[0x4];                                 // 0x154(0x4)
};


// Size 0x8 (Full Size[0x148] - InheritedSize[0x140]
class TextureRenderTarget: public Texture
{
public:
	float                                                        TargetGamma;                                       // 0x140(0x4)
	char                                                         pad0x4_CQTSJ[0x4];                                 // 0x144(0x4)
};


// Size 0x88 (Full Size[0xd8] - InheritedSize[0x50]
class Blueprint: public BlueprintCore
{
public:
	bool                                                         bRecompileOnLoad;                                  // 0x50(0x1)
	char                                                         pad0x7_U08NM[0x7];                                 // 0x51(0x7)
	class UClass*                                                ParentClass;                                       // 0x58(0x8)
	class Object*                                                PRIVATE_InnermostPreviousCDO;                      // 0x60(0x8)
	bool                                                         bHasBeenRegenerated;                               // 0x68(0x1)
	bool                                                         bIsRegeneratingOnLoad;                             // 0x68(0x1)
	char                                                         pad0x7_XMLKR[0x7];                                 // 0x69(0x7)
	class SimpleConstructionScript*                              SimpleConstructionScript;                          // 0x70(0x8)
	TArray<class ActorComponent*>                                ComponentTemplates;                                // 0x78(0x10)
	TArray<class TimelineTemplate*>                              Timelines;                                         // 0x88(0x10)
	class InheritableComponentHandler*                           InheritableComponentHandler;                       // 0x98(0x8)
	char                                                         BlueprintType;                                     // 0xa0(0x1)
	char                                                         pad0x3_BKI4X[0x3];                                 // 0xa1(0x3)
	int                                                          BlueprintSystemVersion;                            // 0xa4(0x4)
	char                                                         pad0x30_XMU3X[0x30];                               // 0xa8(0x30)
};


// Size 0xe0 (Full Size[0x130] - InheritedSize[0x50]
class SoundCue: public SoundBase
{
public:
	bool                                                         bOverrideAttenuation;                              // 0x50(0x1)
	char                                                         pad0x7_7HLW8[0x7];                                 // 0x51(0x7)
	class SoundNode*                                             FirstNode;                                         // 0x58(0x8)
	float                                                        VolumeMultiplier;                                  // 0x60(0x4)
	float                                                        PitchMultiplier;                                   // 0x64(0x4)
	struct AttenuationSettings                                   AttenuationOverrides;                              // 0x68(0xc0)
	char                                                         pad0x8_WWT32[0x8];                                 // 0x128(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class SoundNodeDistanceCrossFade: public SoundNode
{
public:
	TArray<struct DistanceDatum>                                 CrossFadeInput;                                    // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InterpTrackInstColorScale: public InterpTrackInst
{
public:
};


// Size 0x20 (Full Size[0x90] - InheritedSize[0x70]
class InterpTrackFloatBase: public InterpTrack
{
public:
	struct InterpCurveFloat                                      FloatTrack;                                        // 0x70(0x18)
	float                                                        CurveTension;                                      // 0x88(0x4)
	char                                                         pad0x4_KC65O[0x4];                                 // 0x8c(0x4)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class PlatformEventsComponent: public ActorComponent
{
public:
	char                                                         pad0x20_SYZT9[0x20];                               // 0xb8(0x20)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class ActorWithTestInterface: public Actor
{
public:
	char                                                         pad0x8_07VN0[0x8];                                 // 0x3a0(0x8)
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class MaterialExpressionSpeedTree: public MaterialExpression
{
public:
	char                                                         GeometryType;                                      // 0x70(0x1)
	char                                                         WindType;                                          // 0x71(0x1)
	char                                                         LODType;                                           // 0x72(0x1)
	char                                                         pad0x1_7C3NP[0x1];                                 // 0x73(0x1)
	float                                                        BillboardThreshold;                                // 0x74(0x4)
	bool                                                         bAccurateWindVelocities;                           // 0x78(0x1)
	char                                                         pad0x7_X5R8C[0x7];                                 // 0x79(0x7)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleLifetimeBase: public ParticleModule
{
public:
};


// Size 0x220 (Full Size[0x250] - InheritedSize[0x30]
class GameViewportClient: public ScriptViewportClient
{
public:
	char                                                         pad0x8_5CRRW[0x8];                                 // 0x30(0x8)
	class Console*                                               ViewportConsole;                                   // 0x38(0x8)
	TArray<struct DebugDisplayProperty>                          DebugProperties;                                   // 0x40(0x10)
	char                                                         pad0x30_0JBEL[0x30];                               // 0x50(0x30)
	class World*                                                 World;                                             // 0x80(0x8)
	class GameInstance*                                          GameInstance;                                      // 0x88(0x8)
	char                                                         pad0x1c0_1YDTV[0x1c0];                             // 0x90(0x1c0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadingPerfBPFuncLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class DestructibleActor: public Actor
{
public:
	class DestructibleComponent*                                 DestructibleComponent;                             // 0x3a0(0x8)
	bool                                                         bAffectNavigation;                                 // 0x3a8(0x1)
	char                                                         pad0x7_WJS3X[0x7];                                 // 0x3a9(0x7)
	char                                                         pad0x10_N9WEX[0x10];                               // 0x3b0(0x10)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class NavAreaMeta: public NavArea
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InputDelegateBinding: public DynamicBlueprintBinding
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionVertexNormalWS: public MaterialExpression
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionActorPositionWS: public MaterialExpression
{
public:
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class MaterialExpressionTranslucencyShadows: public MaterialExpression
{
public:
	int                                                          Quality;                                           // 0x70(0x4)
	char                                                         pad0x4_71585[0x4];                                 // 0x74(0x4)
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class TimelineComponent: public ActorComponent
{
public:
	struct Timeline                                              TheTimeline;                                       // 0xb8(0x98)
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class MaterialExpressionCrossProduct: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InterpTrackInstSound: public InterpTrackInst
{
public:
	float                                                        LastUpdatePosition;                                // 0x28(0x4)
	char                                                         pad0x4_GQAL9[0x4];                                 // 0x2c(0x4)
	class AudioComponent*                                        PlayAudioComp;                                     // 0x30(0x8)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class NavArea_LowHeight: public NavArea
{
public:
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class InterpTrackToggle: public InterpTrack
{
public:
	TArray<struct ToggleTrackKey>                                ToggleTrack;                                       // 0x70(0x10)
	bool                                                         bActivateSystemEachUpdate;                         // 0x80(0x1)
	bool                                                         bActivateWithJustAttachedFlag;                     // 0x80(0x1)
	bool                                                         bFireEventsWhenForwards;                           // 0x80(0x1)
	bool                                                         bFireEventsWhenBackwards;                          // 0x80(0x1)
	bool                                                         bFireEventsWhenJumpingForwards;                    // 0x80(0x1)
	char                                                         pad0x7_IHY1H[0x7];                                 // 0x81(0x7)
};


// Size 0x88 (Full Size[0xd0] - InheritedSize[0x48]
class VectorFieldStatic: public VectorField
{
public:
	int                                                          SizeX;                                             // 0x48(0x4)
	int                                                          SizeY;                                             // 0x4c(0x4)
	int                                                          SizeZ;                                             // 0x50(0x4)
	char                                                         pad0x7c_GS82B[0x7c];                               // 0x54(0x7c)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionPixelNormalWS: public MaterialExpression
{
public:
};


// Size 0x578 (Full Size[0x5e8] - InheritedSize[0x70]
class MaterialExpressionMakeMaterialAttributes: public MaterialExpression
{
public:
	struct ExpressionInput                                       BaseColor;                                         // 0x70(0x38)
	struct ExpressionInput                                       Metallic;                                          // 0xa8(0x38)
	struct ExpressionInput                                       Specular;                                          // 0xe0(0x38)
	struct ExpressionInput                                       Roughness;                                         // 0x118(0x38)
	struct ExpressionInput                                       EmissiveColor;                                     // 0x150(0x38)
	struct ExpressionInput                                       Opacity;                                           // 0x188(0x38)
	struct ExpressionInput                                       OpacityMask;                                       // 0x1c0(0x38)
	struct ExpressionInput                                       Normal;                                            // 0x1f8(0x38)
	struct ExpressionInput                                       WorldPositionOffset;                               // 0x230(0x38)
	struct ExpressionInput                                       WorldDisplacement;                                 // 0x268(0x38)
	struct ExpressionInput                                       TessellationMultiplier;                            // 0x2a0(0x38)
	struct ExpressionInput                                       SubsurfaceColor;                                   // 0x2d8(0x38)
	struct ExpressionInput                                       ClearCoat;                                         // 0x310(0x38)
	struct ExpressionInput                                       ClearCoatRoughness;                                // 0x348(0x38)
	struct ExpressionInput                                       AmbientOcclusion;                                  // 0x380(0x38)
	struct ExpressionInput                                       Refraction;                                        // 0x3b8(0x38)
	struct ExpressionInput                                       CustomizedUVs;                                     // 0x3f0(0x38)
	char                                                         pad0x188_EI93S[0x188];                             // 0x428(0x188)
	struct ExpressionInput                                       PixelDepthOffset;                                  // 0x5b0(0x38)
};


// Size 0x1e0 (Full Size[0x228] - InheritedSize[0x48]
class LocalPlayer: public Player
{
public:
	char                                                         pad0x30_LHMU8[0x30];                               // 0x48(0x30)
	class GameViewportClient*                                    ViewportClient;                                    // 0x78(0x8)
	char                                                         pad0x40_6FDM4[0x40];                               // 0x80(0x40)
	char                                                         AspectRatioAxisConstraint;                         // 0xc0(0x1)
	char                                                         pad0x7_6OKWD[0x7];                                 // 0xc1(0x7)
	class UClass*                                                PendingLevelPlayerControllerClass;                 // 0xc8(0x8)
	bool                                                         bSentSplitJoin;                                    // 0xd0(0x1)
	char                                                         pad0x3_7LWUU[0x3];                                 // 0xd1(0x3)
	float                                                        MinimumAspectRatio;                                // 0xd4(0x4)
	char                                                         pad0x150_JYLQ8[0x150];                             // 0xd8(0x150)
};


// Size 0x1e0 (Full Size[0x210] - InheritedSize[0x30]
class CurveLinearColor: public CurveBase
{
public:
	struct RichCurve                                             FloatCurves;                                       // 0x30(0x78)
	char                                                         pad0x168_QOXHO[0x168];                             // 0xa8(0x168)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionEyeAdaptation: public MaterialExpression
{
public:
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionCausticTexture: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinates;                                       // 0x70(0x38)
};


// Size 0xb8 (Full Size[0x128] - InheritedSize[0x70]
class MaterialExpressionLinearInterpolate: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	struct ExpressionInput                                       Alpha;                                             // 0xe0(0x38)
	float                                                        ConstA;                                            // 0x118(0x4)
	float                                                        ConstB;                                            // 0x11c(0x4)
	float                                                        ConstAlpha;                                        // 0x120(0x4)
	char                                                         pad0x4_KH0PW[0x4];                                 // 0x124(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InterpTrackInstProperty: public InterpTrackInst
{
public:
	class Property*                                              InterpProperty;                                    // 0x28(0x8)
	class Object*                                                PropertyOuterObjectInst;                           // 0x30(0x8)
};


// Size 0x28 (Full Size[0x90] - InheritedSize[0x68]
class VoiceChannel: public Channel
{
public:
	char                                                         pad0x18_GVXQ7[0x18];                               // 0x68(0x18)
	int                                                          BandwidthPerSecondReservationInBytes;              // 0x80(0x4)
	char                                                         pad0x4_A5ZJ3[0x4];                                 // 0x84(0x4)
	float                                                        SaturationCooloffPeriodInSeconds;                  // 0x88(0x4)
	char                                                         pad0x4_U49W9[0x4];                                 // 0x8c(0x4)
};


// Size 0x88 (Full Size[0x140] - InheritedSize[0xb8]
class InputComponent: public ActorComponent
{
public:
	char                                                         pad0x88_DI1EG[0x88];                               // 0xb8(0x88)
};


// Size 0x80 (Full Size[0xf0] - InheritedSize[0x70]
class MaterialExpressionSceneDepth: public MaterialExpression
{
public:
	char                                                         InputMode;                                         // 0x70(0x1)
	char                                                         pad0x7_BSJT6[0x7];                                 // 0x71(0x7)
	struct ExpressionInput                                       Input;                                             // 0x78(0x38)
	struct ExpressionInput                                       Coordinates;                                       // 0xb0(0x38)
	struct Vector2D                                              ConstInput;                                        // 0xe8(0x8)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class NavigationGraphNode: public Actor
{
public:
};


// Size 0x18 (Full Size[0x60] - InheritedSize[0x48]
class CameraModifier_CameraShake: public CameraModifier
{
public:
	TArray<class CameraShake*>                                   ActiveShakes;                                      // 0x48(0x10)
	float                                                        SplitScreenShakeScale;                             // 0x58(0x4)
	char                                                         pad0x4_VWMIU[0x4];                                 // 0x5c(0x4)
};


// Size 0x1c8 (Full Size[0x218] - InheritedSize[0x50]
class SoundWave: public SoundBase
{
public:
	int                                                          CompressionQuality;                                // 0x50(0x4)
	bool                                                         bLooping;                                          // 0x54(0x1)
	bool                                                         bStreaming;                                        // 0x54(0x1)
	char                                                         pad0x3_PLBE4[0x3];                                 // 0x55(0x3)
	int                                                          StreamingPriority;                                 // 0x58(0x4)
	bool                                                         bMature;                                           // 0x5c(0x1)
	bool                                                         bManualWordWrap;                                   // 0x5c(0x1)
	bool                                                         bSingleLine;                                       // 0x5c(0x1)
	char                                                         pad0x3_MZ2GM[0x3];                                 // 0x5d(0x3)
	char                                                         SoundGroup;                                        // 0x60(0x1)
	char                                                         pad0x7_MDC3T[0x7];                                 // 0x61(0x7)
	struct FString                                               SpokenText;                                        // 0x68(0x10)
	float                                                        Volume;                                            // 0x78(0x4)
	float                                                        Pitch;                                             // 0x7c(0x4)
	int                                                          NumChannels;                                       // 0x80(0x4)
	int                                                          SampleRate;                                        // 0x84(0x4)
	int                                                          RawPCMDataSize;                                    // 0x88(0x4)
	char                                                         pad0x4_600OX[0x4];                                 // 0x8c(0x4)
	TArray<struct SubtitleCue>                                   Subtitles;                                         // 0x90(0x10)
	TArray<struct LocalizedSubtitle>                             LocalizedSubtitles;                                // 0xa0(0x10)
	char                                                         pad0x168_PMH3T[0x168];                             // 0xb0(0x168)
};


// Size 0xb8 (Full Size[0x128] - InheritedSize[0x70]
class MaterialExpressionFresnel: public MaterialExpression
{
public:
	struct ExpressionInput                                       ExponentIn;                                        // 0x70(0x38)
	float                                                        Exponent;                                          // 0xa8(0x4)
	char                                                         pad0x4_F6BQ9[0x4];                                 // 0xac(0x4)
	struct ExpressionInput                                       BaseReflectFractionIn;                             // 0xb0(0x38)
	float                                                        BaseReflectFraction;                               // 0xe8(0x4)
	char                                                         pad0x4_YMTWR[0x4];                                 // 0xec(0x4)
	struct ExpressionInput                                       Normal;                                            // 0xf0(0x38)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleMacroUV: public MaterialExpression
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DistributionVector: public Distribution
{
public:
	bool                                                         bCanBeBaked;                                       // 0x30(0x1)
	bool                                                         bIsDirty;                                          // 0x30(0x1)
	char                                                         pad0x7_MODP9[0x7];                                 // 0x31(0x7)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class SoundNodeOscillator: public SoundNode
{
public:
	bool                                                         bModulateVolume;                                   // 0x38(0x1)
	bool                                                         bModulatePitch;                                    // 0x38(0x1)
	char                                                         pad0x3_7WUHJ[0x3];                                 // 0x39(0x3)
	float                                                        AmplitudeMin;                                      // 0x3c(0x4)
	float                                                        AmplitudeMax;                                      // 0x40(0x4)
	float                                                        FrequencyMin;                                      // 0x44(0x4)
	float                                                        FrequencyMax;                                      // 0x48(0x4)
	float                                                        OffsetMin;                                         // 0x4c(0x4)
	float                                                        OffsetMax;                                         // 0x50(0x4)
	float                                                        CenterMin;                                         // 0x54(0x4)
	float                                                        CenterMax;                                         // 0x58(0x4)
	char                                                         pad0x4_72CL2[0x4];                                 // 0x5c(0x4)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class ParticleModuleParametersOverX: public ParticleModule
{
public:
	float                                                        GroupScales;                                       // 0x50(0x4)
	char                                                         pad0x14_KQFEW[0x14];                               // 0x54(0x14)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleCollisionBase: public ParticleModule
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class SoundNodeModulator: public SoundNode
{
public:
	float                                                        PitchMin;                                          // 0x38(0x4)
	float                                                        PitchMax;                                          // 0x3c(0x4)
	float                                                        VolumeMin;                                         // 0x40(0x4)
	float                                                        VolumeMax;                                         // 0x44(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetSystemLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SoundNodeMature: public SoundNode
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class PawnNoiseEmitterComponent: public ActorComponent
{
public:
	bool                                                         bAIPerceptionSystemCompatibilityMode;              // 0xb8(0x1)
	char                                                         pad0x3_E6EU7[0x3];                                 // 0xb9(0x3)
	struct Vector                                                LastRemoteNoisePosition;                           // 0xbc(0xc)
	float                                                        NoiseLifetime;                                     // 0xc8(0x4)
	float                                                        LastRemoteNoiseVolume;                             // 0xcc(0x4)
	float                                                        LastRemoteNoiseTime;                               // 0xd0(0x4)
	float                                                        LastLocalNoiseVolume;                              // 0xd4(0x4)
	float                                                        LastLocalNoiseTime;                                // 0xd8(0x4)
	char                                                         pad0x4_MGJT3[0x4];                                 // 0xdc(0x4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InterpTrackInstEvent: public InterpTrackInst
{
public:
	float                                                        LastUpdatePosition;                                // 0x28(0x4)
	char                                                         pad0x4_2QMU2[0x4];                                 // 0x2c(0x4)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class VectorFieldVolume: public Actor
{
public:
	class VectorFieldComponent*                                  VectorFieldComponent;                              // 0x3a0(0x8)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class Brush: public Actor
{
public:
	char                                                         BrushType;                                         // 0x3a0(0x1)
	char                                                         pad0x3_R9CZ0[0x3];                                 // 0x3a1(0x3)
	struct Color                                                 BrushColor;                                        // 0x3a4(0x4)
	int                                                          PolyFlags;                                         // 0x3a8(0x4)
	bool                                                         bColored;                                          // 0x3ac(0x1)
	bool                                                         bSolidWhenSelected;                                // 0x3ac(0x1)
	bool                                                         bPlaceableFromClassBrowser;                        // 0x3ac(0x1)
	bool                                                         bNotForClientOrServer;                             // 0x3ac(0x1)
	char                                                         pad0x3_8KSUV[0x3];                                 // 0x3ad(0x3)
	class Model*                                                 Brush;                                             // 0x3b0(0x8)
	class BrushComponent*                                        BrushComponent;                                    // 0x3b8(0x8)
	bool                                                         bInManipulation;                                   // 0x3c0(0x1)
	char                                                         pad0x7_ERAN6[0x7];                                 // 0x3c1(0x7)
	TArray<struct GeomSelection>                                 SavedSelections;                                   // 0x3c8(0x10)
};


// Size 0x160 (Full Size[0x1b8] - InheritedSize[0x58]
class MaterialInstance: public MaterialInterface
{
public:
	class PhysicalMaterial*                                      PhysMaterial;                                      // 0x58(0x8)
	class MaterialInterface*                                     Parent;                                            // 0x60(0x8)
	bool                                                         bHasStaticPermutationResource;                     // 0x68(0x1)
	bool                                                         bOverrideSubsurfaceProfile;                        // 0x68(0x1)
	char                                                         pad0x7_4K8R4[0x7];                                 // 0x69(0x7)
	struct Guid                                                  ParentLightingGuid;                                // 0x70(0x10)
	TArray<struct FontParameterValue>                            FontParameterValues;                               // 0x80(0x10)
	TArray<struct ScalarParameterValue>                          ScalarParameterValues;                             // 0x90(0x10)
	TArray<struct TextureParameterValue>                         TextureParameterValues;                            // 0xa0(0x10)
	TArray<struct VectorParameterValue>                          VectorParameterValues;                             // 0xb0(0x10)
	struct MaterialInstanceBasePropertyOverrides                 BasePropertyOverrides;                             // 0xc0(0x84)
	char                                                         pad0x74_V0M28[0x74];                               // 0x144(0x74)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class TwitterIntegrationBase: public PlatformInterfaceBase
{
public:
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionPower: public MaterialExpression
{
public:
	struct ExpressionInput                                       Base;                                              // 0x70(0x38)
	struct ExpressionInput                                       Exponent;                                          // 0xa8(0x38)
	float                                                        ConstExponent;                                     // 0xe0(0x4)
	char                                                         pad0x4_HZRW4[0x4];                                 // 0xe4(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class InterpFilter_Classes: public InterpFilter
{
public:
};


// Size 0xd0 (Full Size[0x108] - InheritedSize[0x38]
class SoundNodeAttenuation: public SoundNode
{
public:
	class SoundAttenuation*                                      AttenuationSettings;                               // 0x38(0x8)
	struct AttenuationSettings                                   AttenuationOverrides;                              // 0x40(0xc0)
	bool                                                         bOverrideAttenuation;                              // 0x100(0x1)
	char                                                         pad0x7_I55Z7[0x7];                                 // 0x101(0x7)
};


// Size 0x60 (Full Size[0xa48] - InheritedSize[0x9e8]
class GameEngine: public Engine
{
public:
	float                                                        MaxDeltaTime;                                      // 0x9e8(0x4)
	float                                                        ServerFlushLogInterval;                            // 0x9ec(0x4)
	char                                                         pad0x58_VGLCQ[0x58];                               // 0x9f0(0x58)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionLowResClouds: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinates;                                       // 0x70(0x38)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class ComponentWithTestInterface: public ActorComponent
{
public:
	char                                                         pad0x8_E9LAZ[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotify_ResetDynamics: public AnimNotify
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FeatureConfigBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DistributionFloat: public Distribution
{
public:
	bool                                                         bCanBeBaked;                                       // 0x30(0x1)
	char                                                         pad0x7_74ROC[0x7];                                 // 0x31(0x7)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionDistanceFieldGradient: public MaterialExpression
{
public:
	struct ExpressionInput                                       Position;                                          // 0x70(0x38)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InterpTrackInstMove: public InterpTrackInst
{
public:
	struct Vector                                                ResetLocation;                                     // 0x28(0xc)
	struct Rotator                                               ResetRotation;                                     // 0x34(0xc)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class InterpTrackInstVectorMaterialParam: public InterpTrackInst
{
public:
	TArray<class MaterialInstanceDynamic*>                       MaterialInstances;                                 // 0x28(0x10)
	TArray<struct Vector>                                        ResetVectors;                                      // 0x38(0x10)
	TArray<struct PrimitiveMaterialRef>                          PrimitiveMaterialRefs;                             // 0x48(0x10)
	class InterpTrackVectorMaterialParam*                        InstancedTrack;                                    // 0x58(0x8)
};


// Size 0x40 (Full Size[0x88] - InheritedSize[0x48]
class VectorFieldAnimated: public VectorField
{
public:
	class Texture2D*                                             Texture;                                           // 0x48(0x8)
	char                                                         ConstructionOp;                                    // 0x50(0x1)
	char                                                         pad0x3_HU9B7[0x3];                                 // 0x51(0x3)
	int                                                          VolumeSizeX;                                       // 0x54(0x4)
	int                                                          VolumeSizeY;                                       // 0x58(0x4)
	int                                                          VolumeSizeZ;                                       // 0x5c(0x4)
	int                                                          SubImagesX;                                        // 0x60(0x4)
	int                                                          SubImagesY;                                        // 0x64(0x4)
	int                                                          FrameCount;                                        // 0x68(0x4)
	float                                                        FramesPerSecond;                                   // 0x6c(0x4)
	bool                                                         bLoop;                                             // 0x70(0x1)
	char                                                         pad0x7_59ZNS[0x7];                                 // 0x71(0x7)
	class VectorFieldStatic*                                     NoiseField;                                        // 0x78(0x8)
	float                                                        NoiseScale;                                        // 0x80(0x4)
	float                                                        NoiseMax;                                          // 0x84(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetMathLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetGuidLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionMin: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	float                                                        ConstA;                                            // 0xe0(0x4)
	float                                                        ConstB;                                            // 0xe4(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PostProcessEditorSettings: public DeveloperSettings
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class StaticMeshActor: public Actor
{
public:
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3a0(0x8)
	bool                                                         bStaticMeshReplicateMovement;                      // 0x3a8(0x1)
	char                                                         NavigationGeometryGatheringMode;                   // 0x3a9(0x1)
	char                                                         pad0x6_NG0WQ[0x6];                                 // 0x3aa(0x6)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleAttractorBase: public ParticleModule
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionObjectPositionWS: public MaterialExpression
{
public:
};


// Size 0x120 (Full Size[0x158] - InheritedSize[0x38]
class CollisionProfile: public DeveloperSettings
{
public:
	TArray<struct CollisionResponseTemplate>                     Profiles;                                          // 0x38(0x10)
	TArray<struct CustomChannelSetup>                            DefaultChannelResponses;                           // 0x48(0x10)
	TArray<struct CustomProfile>                                 EditProfiles;                                      // 0x58(0x10)
	TArray<struct Redirector>                                    ProfileRedirects;                                  // 0x68(0x10)
	TArray<struct Redirector>                                    CollisionChannelRedirects;                         // 0x78(0x10)
	char                                                         pad0xd0_0B52M[0xd0];                               // 0x88(0xd0)
};


// Size 0xe0 (Full Size[0x150] - InheritedSize[0x70]
class MaterialExpressionQualitySwitch: public MaterialExpression
{
public:
	struct ExpressionInput                                       Default;                                           // 0x70(0x38)
	struct ExpressionInput                                       Inputs;                                            // 0xa8(0x38)
	char                                                         pad0x70_LN3L7[0x70];                               // 0xe0(0x70)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetNodeHelperLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x28 (Full Size[0x58] - InheritedSize[0x30]
class AnimNotifyState_Trail: public AnimNotifyState
{
public:
	class ParticleSystem*                                        PSTemplate;                                        // 0x30(0x8)
	struct FName                                                 FirstSocketName;                                   // 0x38(0x8)
	struct FName                                                 SecondSocketName;                                  // 0x40(0x8)
	char                                                         WidthScaleMode;                                    // 0x48(0x1)
	char                                                         pad0x3_TKNH1[0x3];                                 // 0x49(0x3)
	struct FName                                                 WidthScaleCurve;                                   // 0x4c(0x8)
	char                                                         pad0x4_AI1WO[0x4];                                 // 0x54(0x4)
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionConstantBiasScale: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	float                                                        Bias;                                              // 0xa8(0x4)
	float                                                        Scale;                                             // 0xac(0x4)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionDeriveNormalZ: public MaterialExpression
{
public:
	struct ExpressionInput                                       InXY;                                              // 0x70(0x38)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class Info: public Actor
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionLightmapUVs: public MaterialExpression
{
public:
};


// Size 0xa8 (Full Size[0x118] - InheritedSize[0x70]
class MaterialExpressionGIReplace: public MaterialExpression
{
public:
	struct ExpressionInput                                       Default;                                           // 0x70(0x38)
	struct ExpressionInput                                       StaticIndirect;                                    // 0xa8(0x38)
	struct ExpressionInput                                       DynamicIndirect;                                   // 0xe0(0x38)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ClientOnlyTestActor: public Actor
{
public:
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionOneMinus: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
};


// Size 0xb0 (Full Size[0x120] - InheritedSize[0x70]
class MaterialExpressionStaticSwitch: public MaterialExpression
{
public:
	bool                                                         DefaultValue;                                      // 0x70(0x1)
	char                                                         pad0x7_SY4BX[0x7];                                 // 0x71(0x7)
	struct ExpressionInput                                       A;                                                 // 0x78(0x38)
	struct ExpressionInput                                       B;                                                 // 0xb0(0x38)
	struct ExpressionInput                                       Value;                                             // 0xe8(0x38)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleTrailBase: public ParticleModule
{
public:
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class PhysicsHandleComponent: public ActorComponent
{
public:
	class PrimitiveComponent*                                    GrabbedComponent;                                  // 0xb8(0x8)
	char                                                         pad0x10_Q19FS[0x10];                               // 0xc0(0x10)
	float                                                        LinearDamping;                                     // 0xd0(0x4)
	float                                                        LinearStiffness;                                   // 0xd4(0x4)
	float                                                        AngularDamping;                                    // 0xd8(0x4)
	float                                                        AngularStiffness;                                  // 0xdc(0x4)
	char                                                         pad0x60_KHDPA[0x60];                               // 0xe0(0x60)
	float                                                        InterpolationSpeed;                                // 0x140(0x4)
	char                                                         pad0x1c_9JATC[0x1c];                               // 0x144(0x1c)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleDirection: public MaterialExpression
{
public:
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class StreamingProbe: public Actor
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class NavigationInvokerComponent: public ActorComponent
{
public:
	float                                                        TileGenerationRadius;                              // 0xb8(0x4)
	float                                                        TileRemovalRadius;                                 // 0xbc(0x4)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class InterpGroupCamera: public InterpGroup
{
public:
	class CameraAnim*                                            CameraAnimInst;                                    // 0x50(0x8)
	float                                                        CompressTolerance;                                 // 0x58(0x4)
	char                                                         pad0x4_0B3EN[0x4];                                 // 0x5c(0x4)
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class MaterialExpressionTextureBase: public MaterialExpression
{
public:
	class Texture*                                               Texture;                                           // 0x70(0x8)
	char                                                         SamplerType;                                       // 0x78(0x1)
	char                                                         pad0x3_N6O2J[0x3];                                 // 0x79(0x3)
	bool                                                         IsDefaultMeshpaintTexture;                         // 0x7c(0x1)
	char                                                         pad0x3_Y3KCK[0x3];                                 // 0x7d(0x3)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleRelativeTime: public MaterialExpression
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InterpTrackInstFloatParticleParam: public InterpTrackInst
{
public:
	float                                                        ResetFloat;                                        // 0x28(0x4)
	char                                                         pad0x4_DUBBB[0x4];                                 // 0x2c(0x4)
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class MaterialExpressionBoneMatrix: public MaterialExpression
{
public:
	int                                                          ReferenceIndex;                                    // 0x70(0x4)
	struct FName                                                 BoneName;                                          // 0x74(0x8)
	bool                                                         bPosition;                                         // 0x7c(0x1)
	char                                                         pad0x3_L9538[0x3];                                 // 0x7d(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DerivedTestInterface: public TestInterface
{
public:
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class SoundNodeDialoguePlayer: public SoundNode
{
public:
	struct DialogueWaveParameter                                 DialogueWaveParameter;                             // 0x38(0x20)
	bool                                                         bLooping;                                          // 0x58(0x1)
	char                                                         pad0x7_LDDS7[0x7];                                 // 0x59(0x7)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleMaterialBase: public ParticleModule
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleMotionBlurFade: public MaterialExpression
{
public:
};


// Size 0x9c8 (Full Size[0xa20] - InheritedSize[0x58]
class Material: public MaterialInterface
{
public:
	class PhysicalMaterial*                                      PhysMaterial;                                      // 0x58(0x8)
	struct ColorMaterialInput                                    DiffuseColor;                                      // 0x60(0x40)
	struct ColorMaterialInput                                    SpecularColor;                                     // 0xa0(0x40)
	struct ColorMaterialInput                                    BaseColor;                                         // 0xe0(0x40)
	struct ScalarMaterialInput                                   Metallic;                                          // 0x120(0x40)
	struct ScalarMaterialInput                                   Specular;                                          // 0x160(0x40)
	struct ScalarMaterialInput                                   Roughness;                                         // 0x1a0(0x40)
	struct VectorMaterialInput                                   Normal;                                            // 0x1e0(0x48)
	struct ColorMaterialInput                                    EmissiveColor;                                     // 0x228(0x40)
	struct ScalarMaterialInput                                   Opacity;                                           // 0x268(0x40)
	struct ScalarMaterialInput                                   OpacityMask;                                       // 0x2a8(0x40)
	char                                                         MaterialDomain;                                    // 0x2e8(0x1)
	char                                                         BlendMode;                                         // 0x2e9(0x1)
	char                                                         DecalBlendMode;                                    // 0x2ea(0x1)
	bool                                                         bDecalNoEmissiveOrRoughness;                       // 0x2eb(0x1)
	bool                                                         bDecalEnableStencil;                               // 0x2ec(0x1)
	char                                                         MaterialDecalResponse;                             // 0x2ed(0x1)
	char                                                         ShadingModel;                                      // 0x2ee(0x1)
	char                                                         pad0x1_14E2N[0x1];                                 // 0x2ef(0x1)
	float                                                        OpacityMaskClipValue;                              // 0x2f0(0x4)
	float                                                        DepthWeightScale;                                  // 0x2f4(0x4)
	float                                                        DepthWeightExponent;                               // 0x2f8(0x4)
	float                                                        DepthWeightBase;                                   // 0x2fc(0x4)
	bool                                                         bBlendedOITAfterTranslucency;                      // 0x300(0x1)
	bool                                                         bForceResolution;                                  // 0x300(0x1)
	char                                                         pad0x3_P6VIM[0x3];                                 // 0x301(0x3)
	char                                                         ForcedResolution;                                  // 0x304(0x1)
	char                                                         pad0x3_C6FGF[0x3];                                 // 0x305(0x3)
	float                                                        FirstSplitDistance;                                // 0x308(0x4)
	float                                                        SecondSplitDistance;                               // 0x30c(0x4)
	float                                                        FullResInFrontMaxDistance;                         // 0x310(0x4)
	bool                                                         FullResInFront;                                    // 0x314(0x1)
	bool                                                         PopPerParticle;                                    // 0x314(0x1)
	char                                                         pad0x3_YNKGY[0x3];                                 // 0x315(0x3)
	struct VectorMaterialInput                                   WorldPositionOffset;                               // 0x318(0x48)
	struct VectorMaterialInput                                   WorldDisplacement;                                 // 0x360(0x48)
	struct ScalarMaterialInput                                   TessellationMultiplier;                            // 0x3a8(0x40)
	struct ColorMaterialInput                                    SubsurfaceColor;                                   // 0x3e8(0x40)
	struct ScalarMaterialInput                                   ClearCoat;                                         // 0x428(0x40)
	struct ScalarMaterialInput                                   ClearCoatRoughness;                                // 0x468(0x40)
	struct ScalarMaterialInput                                   AmbientOcclusion;                                  // 0x4a8(0x40)
	struct ScalarMaterialInput                                   Refraction;                                        // 0x4e8(0x40)
	struct ColorMaterialInput                                    BillboardColor;                                    // 0x528(0x40)
	struct VectorMaterialInput                                   BillboardParams;                                   // 0x568(0x48)
	struct Vector2MaterialInput                                  CustomizedUVs;                                     // 0x5b0(0x48)
	char                                                         pad0x1f8_156ZW[0x1f8];                             // 0x5f8(0x1f8)
	struct MaterialAttributesInput                               MaterialAttributes;                                // 0x7f0(0x38)
	char                                                         pad0x10_NB728[0x10];                               // 0x828(0x10)
	struct ScalarMaterialInput                                   PixelDepthOffset;                                  // 0x838(0x40)
	bool                                                         bTranslucentBeforeTranslucency;                    // 0x878(0x1)
	bool                                                         bTranslucentBeforeVolumeFog;                       // 0x878(0x1)
	bool                                                         bTranslucentWithDepthWrite;                        // 0x878(0x1)
	bool                                                         bEnableSeparateTranslucency;                       // 0x878(0x1)
	bool                                                         bEnableResponsiveAA;                               // 0x878(0x1)
	bool                                                         bScreenSpaceReflections;                           // 0x878(0x1)
	bool                                                         TwoSided;                                          // 0x878(0x1)
	bool                                                         DitheredLODTransition;                             // 0x878(0x1)
	char                                                         pad0x3_SEIB7[0x3];                                 // 0x879(0x3)
	char                                                         ConstantMaterial;                                  // 0x87c(0x1)
	char                                                         pad0x3_OJJ8V[0x3];                                 // 0x87d(0x3)
	class Material*                                              ShadowMaterial;                                    // 0x880(0x8)
	float                                                        SkyLightWhenOccluded;                              // 0x888(0x4)
	float                                                        CloudShadowsInfluence;                             // 0x88c(0x4)
	int                                                          NumCustomizedUVs;                                  // 0x890(0x4)
	char                                                         TranslucencyLightingMode;                          // 0x894(0x1)
	char                                                         pad0x3_W0LK5[0x3];                                 // 0x895(0x3)
	float                                                        TranslucencyDirectionalLightingIntensity;          // 0x898(0x4)
	float                                                        LightColorInfluence;                               // 0x89c(0x4)
	float                                                        AmbientLightColorInfluence;                        // 0x8a0(0x4)
	float                                                        LightIntensityInfluence;                           // 0x8a4(0x4)
	float                                                        AmbientLightIntensityInfluence;                    // 0x8a8(0x4)
	float                                                        AlternativeAmbientLightColorInfluence;             // 0x8ac(0x4)
	float                                                        AlternativeAmbientLightIntensityInfluence;         // 0x8b0(0x4)
	bool                                                         bEvaluateLightningAtParticleCenter;                // 0x8b4(0x1)
	char                                                         pad0x3_WB0TZ[0x3];                                 // 0x8b5(0x3)
	float                                                        TranslucencyScaleForReflection;                    // 0x8b8(0x4)
	bool                                                         bObjectFadeEnabled;                                // 0x8bc(0x1)
	char                                                         pad0x3_H6KHP[0x3];                                 // 0x8bd(0x3)
	float                                                        ObjectFadeRate;                                    // 0x8c0(0x4)
	float                                                        ObjectFadeDistanceThreshold;                       // 0x8c4(0x4)
	float                                                        TranslucentShadowDensityScale;                     // 0x8c8(0x4)
	float                                                        TranslucentSelfShadowDensityScale;                 // 0x8cc(0x4)
	float                                                        TranslucentSelfShadowSecondDensityScale;           // 0x8d0(0x4)
	float                                                        TranslucentSelfShadowSecondOpacity;                // 0x8d4(0x4)
	float                                                        TranslucentBackscatteringExponent;                 // 0x8d8(0x4)
	struct LinearColor                                           TranslucentMultipleScatteringExtinction;           // 0x8dc(0x10)
	float                                                        TranslucentShadowStartOffset;                      // 0x8ec(0x4)
	float                                                        VolumeFogScale;                                    // 0x8f0(0x4)
	bool                                                         DistanceFog;                                       // 0x8f4(0x1)
	bool                                                         bDisableDepthTest;                                 // 0x8f4(0x1)
	bool                                                         bGenerateSphericalParticleNormals;                 // 0x8f4(0x1)
	bool                                                         bDontRenderWhenPlayerInsideShip;                   // 0x8f4(0x1)
	bool                                                         bTangentSpaceNormal;                               // 0x8f4(0x1)
	bool                                                         bUseEmissiveForDynamicAreaLighting;                // 0x8f4(0x1)
	bool                                                         bBlockGI;                                          // 0x8f4(0x1)
	bool                                                         bUsedAsSpecialEngineMaterial;                      // 0x8f4(0x1)
	bool                                                         bUsedWithSkeletalMesh;                             // 0x8f5(0x1)
	bool                                                         bUsedWithEditorCompositing;                        // 0x8f5(0x1)
	bool                                                         bUsedWithLandscape;                                // 0x8f5(0x1)
	bool                                                         bUsedWithParticleSprites;                          // 0x8f5(0x1)
	bool                                                         bUsedWithCPUParticleSprites;                       // 0x8f5(0x1)
	bool                                                         bUsedWithStaticMesh;                               // 0x8f5(0x1)
	bool                                                         bUsedWithCoverage;                                 // 0x8f5(0x1)
	bool                                                         bUsedWithGPUInstanceCulling;                       // 0x8f5(0x1)
	bool                                                         bUsedWithBeamTrails;                               // 0x8f6(0x1)
	bool                                                         bUsedWithMeshParticles;                            // 0x8f6(0x1)
	bool                                                         bUsedWithStaticLighting;                           // 0x8f6(0x1)
	bool                                                         bUsedWithFluidSurfaces;                            // 0x8f6(0x1)
	bool                                                         bUsedWithMorphTargets;                             // 0x8f6(0x1)
	bool                                                         bUsedWithSplineMeshes;                             // 0x8f6(0x1)
	bool                                                         bUsedWithInstancedStaticMeshes;                    // 0x8f6(0x1)
	bool                                                         bUsesDistortion;                                   // 0x8f6(0x1)
	bool                                                         bUsedWithClothing;                                 // 0x8f7(0x1)
	bool                                                         bUsedWithDeformables;                              // 0x8f7(0x1)
	bool                                                         bUsedWithFFTWaterMask;                             // 0x8f7(0x1)
	bool                                                         bUsedWithVolumeFogMask;                            // 0x8f7(0x1)
	bool                                                         bUsedWithDynamicObjectFading;                      // 0x8f7(0x1)
	bool                                                         bUsedWithWaterBoundary;                            // 0x8f7(0x1)
	bool                                                         bUsedWithClouds;                                   // 0x8f7(0x1)
	bool                                                         bUsedWithInstancedRopes;                           // 0x8f7(0x1)
	bool                                                         bUsedWithPlanarReflection;                         // 0x8f8(0x1)
	bool                                                         bUsedWithPointLightShadows;                        // 0x8f8(0x1)
	bool                                                         bUsedWithCustomDepth;                              // 0x8f8(0x1)
	bool                                                         bUsedWithMaskPass;                                 // 0x8f8(0x1)
	bool                                                         bUsedWithLPV;                                      // 0x8f8(0x1)
	bool                                                         bUsedWithUI;                                       // 0x8f8(0x1)
	bool                                                         bAutomaticallySetUsageInEditor;                    // 0x8f8(0x1)
	bool                                                         bAllowEmissiveOnLandscape;                         // 0x8f8(0x1)
	bool                                                         bApplyWaterMask;                                   // 0x8f9(0x1)
	bool                                                         bUseReZ;                                           // 0x8f9(0x1)
	bool                                                         bFullyRough;                                       // 0x8f9(0x1)
	bool                                                         bUseLightmapDirectionality;                        // 0x8f9(0x1)
	char                                                         pad0x2_WY96G[0x2];                                 // 0x8fa(0x2)
	char                                                         GeometryMode;                                      // 0x8fc(0x1)
	char                                                         D3D11TessellationMode;                             // 0x8fd(0x1)
	char                                                         pad0x2_5ULZ1[0x2];                                 // 0x8fe(0x2)
	bool                                                         bEnableCrackFreeDisplacement;                      // 0x900(0x1)
	bool                                                         bEnableAdaptiveTessellation;                       // 0x900(0x1)
	char                                                         pad0x3_TMT5G[0x3];                                 // 0x901(0x3)
	float                                                        MaxDisplacement;                                   // 0x904(0x4)
	bool                                                         Wireframe;                                         // 0x908(0x1)
	bool                                                         bOutputVelocityOnBasePass;                         // 0x908(0x1)
	char                                                         pad0x3_TRXOO[0x3];                                 // 0x909(0x3)
	float                                                        NormalOffsetShadowBiasScale;                       // 0x90c(0x4)
	int                                                          EditorX;                                           // 0x910(0x4)
	int                                                          EditorY;                                           // 0x914(0x4)
	int                                                          EditorPitch;                                       // 0x918(0x4)
	int                                                          EditorYaw;                                         // 0x91c(0x4)
	TArray<class MaterialExpression*>                            Expressions;                                       // 0x920(0x10)
	TArray<struct MaterialFunctionInfo>                          MaterialFunctionInfos;                             // 0x930(0x10)
	TArray<struct MaterialParameterCollectionInfo>               MaterialParameterCollectionInfos;                  // 0x940(0x10)
	bool                                                         bCanMaskedBeAssumedOpaque;                         // 0x950(0x1)
	bool                                                         bIsMasked;                                         // 0x950(0x1)
	bool                                                         bIsPreviewMaterial;                                // 0x950(0x1)
	bool                                                         bUseMaterialAttributes;                            // 0x950(0x1)
	bool                                                         bUseTranslucencyVertexFog;                         // 0x950(0x1)
	bool                                                         bUseDensityMapOnTranslucencyVertexFog;             // 0x950(0x1)
	bool                                                         bAllowDevelopmentShaderCompile;                    // 0x950(0x1)
	bool                                                         bIsMaterialEditorStatsMaterial;                    // 0x950(0x1)
	char                                                         pad0x3_6SGUB[0x3];                                 // 0x951(0x3)
	char                                                         BlendableLocation;                                 // 0x958(0x1)
	char                                                         pad0x3_1LW5C[0x3];                                 // 0x959(0x3)
	int                                                          BlendablePriority;                                 // 0x95c(0x4)
	bool                                                         bIsAlphaBlended;                                   // 0x960(0x1)
	char                                                         pad0x3_H2W6P[0x3];                                 // 0x961(0x3)
	float                                                        RefractionDepthBias;                               // 0x964(0x4)
	struct Guid                                                  StateId;                                           // 0x968(0x10)
	int                                                          UnwrappedUVSet;                                    // 0x978(0x4)
	char                                                         pad0x8c_GU8NA[0x8c];                               // 0x97c(0x8c)
	TArray<class Texture*>                                       ExpressionTextureReferences;                       // 0xa08(0x10)
	char                                                         pad0x8_X5WKH[0x8];                                 // 0xa18(0x8)
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class InterpTrackBoolProp: public InterpTrack
{
public:
	TArray<struct BoolTrackKey>                                  BoolTrack;                                         // 0x70(0x10)
	struct FName                                                 PropertyName;                                      // 0x80(0x8)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionPerInstanceFadeAmount: public MaterialExpression
{
public:
};


// Size 0x20 (Full Size[0xb0] - InheritedSize[0x90]
class EdGraphNode_Documentation: public EdGraphNode
{
public:
	struct FString                                               Link;                                              // 0x90(0x10)
	struct FString                                               Excerpt;                                           // 0xa0(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionViewSize: public MaterialExpression
{
public:
};


// Size 0xb8 (Full Size[0x128] - InheritedSize[0x70]
class MaterialExpressionClamp: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	struct ExpressionInput                                       Min;                                               // 0xa8(0x38)
	struct ExpressionInput                                       Max;                                               // 0xe0(0x38)
	char                                                         ClampMode;                                         // 0x118(0x1)
	char                                                         pad0x3_WYA5F[0x3];                                 // 0x119(0x3)
	float                                                        MinDefault;                                        // 0x11c(0x4)
	float                                                        MaxDefault;                                        // 0x120(0x4)
	char                                                         pad0x4_NJDDX[0x4];                                 // 0x124(0x4)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class ComponentWithDerivedTestInterface: public ActorComponent
{
public:
	char                                                         pad0x8_U1MXU[0x8];                                 // 0xb8(0x8)
};


// Size 0x20 (Full Size[0x60] - InheritedSize[0x40]
class AnimCompress_RemoveLinearKeys: public AnimCompress
{
public:
	float                                                        MaxPosDiff;                                        // 0x40(0x4)
	float                                                        MaxAngleDiff;                                      // 0x44(0x4)
	float                                                        MaxScaleDiff;                                      // 0x48(0x4)
	float                                                        MaxEffectorDiff;                                   // 0x4c(0x4)
	float                                                        MinEffectorDiff;                                   // 0x50(0x4)
	float                                                        EffectorDiffSocket;                                // 0x54(0x4)
	float                                                        ParentKeyScale;                                    // 0x58(0x4)
	bool                                                         bRetarget;                                         // 0x5c(0x1)
	bool                                                         bActuallyFilterLinearKeys;                         // 0x5c(0x1)
	char                                                         pad0x3_3WF11[0x3];                                 // 0x5d(0x3)
};


// Size 0x80 (Full Size[0xf0] - InheritedSize[0x70]
class MaterialExpressionBreakMaterialAttributes: public MaterialExpression
{
public:
	struct ExpressionInput                                       Struct;                                            // 0x70(0x38)
	struct MaterialAttributesInput                               MaterialAttributes;                                // 0xa8(0x38)
	char                                                         pad0x10_XESQJ[0x10];                               // 0xe0(0x10)
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class InterpTrackEvent: public InterpTrack
{
public:
	TArray<struct EventTrackKey>                                 EventTrack;                                        // 0x70(0x10)
	bool                                                         bFireEventsWhenForwards;                           // 0x80(0x1)
	bool                                                         bFireEventsWhenBackwards;                          // 0x80(0x1)
	bool                                                         bFireEventsWhenJumpingForwards;                    // 0x80(0x1)
	bool                                                         bUseCustomEventName;                               // 0x80(0x1)
	char                                                         pad0x7_UD1QM[0x7];                                 // 0x81(0x7)
};


// Size 0x58 (Full Size[0x198] - InheritedSize[0x140]
class Texture2D: public Texture
{
public:
	int                                                          RequestedMips;                                     // 0x140(0x4)
	int                                                          ResidentMips;                                      // 0x144(0x4)
	int                                                          StreamingIndex;                                    // 0x148(0x4)
	int                                                          FirstResourceMemMip;                               // 0x14c(0x4)
	char                                                         pad0x4_P8U4B[0x4];                                 // 0x150(0x4)
	struct IntPoint                                              ImportedSize;                                      // 0x154(0x8)
	float                                                        ForceMipLevelsToBeResidentTimestamp;               // 0x15c(0x4)
	bool                                                         bTemporarilyDisableStreaming;                      // 0x160(0x1)
	bool                                                         bIsStreamable;                                     // 0x160(0x1)
	bool                                                         bHasCancelationPending;                            // 0x160(0x1)
	bool                                                         bForceMiplevelsToBeResident;                       // 0x160(0x1)
	bool                                                         bGlobalForceMipLevelsToBeResident;                 // 0x160(0x1)
	char                                                         pad0x3_PS71V[0x3];                                 // 0x161(0x3)
	char                                                         AddressX;                                          // 0x164(0x1)
	char                                                         AddressY;                                          // 0x165(0x1)
	char                                                         pad0x2_HGJ7V[0x2];                                 // 0x166(0x2)
	int                                                          MinimumLoadedMips;                                 // 0x168(0x4)
	char                                                         pad0x2c_0KIUV[0x2c];                               // 0x16c(0x2c)
};


// Size 0x20 (Full Size[0x90] - InheritedSize[0x70]
class MaterialExpressionParameter: public MaterialExpression
{
public:
	struct FName                                                 ParameterName;                                     // 0x70(0x8)
	struct Guid                                                  ExpressionGUID;                                    // 0x78(0x10)
	struct FName                                                 Group;                                             // 0x88(0x8)
};


// Size 0x298 (Full Size[0x2e8] - InheritedSize[0x50]
class ParticleModuleRequired: public ParticleModule
{
public:
	bool                                                         bDeactivateGroupA;                                 // 0x50(0x1)
	bool                                                         bDeactivateGroupB;                                 // 0x50(0x1)
	bool                                                         bDeactivateGroupC;                                 // 0x50(0x1)
	bool                                                         bDeactivateGroupD;                                 // 0x50(0x1)
	bool                                                         bDeactivateGroupE;                                 // 0x50(0x1)
	char                                                         pad0x3_RLEJX[0x3];                                 // 0x51(0x3)
	char                                                         EmitterPriority;                                   // 0x54(0x1)
	char                                                         pad0x3_K6KMC[0x3];                                 // 0x55(0x3)
	bool                                                         bUseComplexitySystemWhenLooping;                   // 0x58(0x1)
	char                                                         pad0x3_C6J5M[0x3];                                 // 0x59(0x3)
	char                                                         SwitchPriority;                                    // 0x5c(0x1)
	char                                                         pad0x3_M8BGK[0x3];                                 // 0x5d(0x3)
	bool                                                         bReplacementGroupIsAdditive;                       // 0x60(0x1)
	char                                                         pad0x7_SJMP6[0x7];                                 // 0x61(0x7)
	class MaterialInterface*                                     Material;                                          // 0x68(0x8)
	struct Vector                                                EmitterOrigin;                                     // 0x70(0xc)
	bool                                                         EmitterOriginUseGroupAForAll;                      // 0x7c(0x1)
	char                                                         pad0x3_ZBM3R[0x3];                                 // 0x7d(0x3)
	struct Vector                                                AdditionalEmitterOrigins;                          // 0x80(0xc)
	char                                                         pad0x30_FH207[0x30];                               // 0x8c(0x30)
	struct Rotator                                               EmitterRotation;                                   // 0xbc(0xc)
	char                                                         ScreenAlignment;                                   // 0xc8(0x1)
	char                                                         pad0x3_OSF5Y[0x3];                                 // 0xc9(0x3)
	bool                                                         bUseGroupAScreenAlignmentForAllGroups;             // 0xcc(0x1)
	char                                                         pad0x3_MB1UX[0x3];                                 // 0xcd(0x3)
	char                                                         AdditionalScreenAlignments;                        // 0xd0(0x1)
	char                                                         pad0x7_N15HR[0x7];                                 // 0xd1(0x7)
	float                                                        AlignmentInheritedVelocityScale;                   // 0xd8(0x4)
	bool                                                         bUseLocalSpace;                                    // 0xdc(0x1)
	bool                                                         bUsePureLocalSpace;                                // 0xdc(0x1)
	bool                                                         bFollowEmitter;                                    // 0xdc(0x1)
	bool                                                         bTrailInGrandParentSpace;                          // 0xdc(0x1)
	bool                                                         bKillOnDeactivate;                                 // 0xdc(0x1)
	bool                                                         bKillOnCompleted;                                  // 0xdc(0x1)
	char                                                         pad0x3_CG8BS[0x3];                                 // 0xdd(0x3)
	char                                                         SortMode;                                          // 0xe0(0x1)
	char                                                         WaterKillCondition;                                // 0xe1(0x1)
	char                                                         pad0x2_GQLHX[0x2];                                 // 0xe2(0x2)
	bool                                                         bUseLegacyEmitterTime;                             // 0xe4(0x1)
	char                                                         pad0x3_F7KDF[0x3];                                 // 0xe5(0x3)
	float                                                        EmitterDuration;                                   // 0xe8(0x4)
	float                                                        EmitterDurationLow;                                // 0xec(0x4)
	bool                                                         bEmitterDurationUseRange;                          // 0xf0(0x1)
	bool                                                         bDurationRecalcEachLoop;                           // 0xf0(0x1)
	bool                                                         bSeparateLoopTimeForSubUV;                         // 0xf0(0x1)
	char                                                         pad0x3_HR6PM[0x3];                                 // 0xf1(0x3)
	int                                                          EmitterLoops;                                      // 0xf4(0x4)
	struct RawDistributionFloat                                  LoopTime;                                          // 0xf8(0x38)
	struct RawDistributionFloat                                  LoopOffset;                                        // 0x130(0x38)
	struct RawDistributionFloat                                  LoopTimeForSubUV;                                  // 0x168(0x38)
	float                                                        LoopBeginTime;                                     // 0x1a0(0x4)
	float                                                        LoopEndTime;                                       // 0x1a4(0x4)
	struct RawDistributionFloat                                  SpawnRate;                                         // 0x1a8(0x38)
	char                                                         ParticleBurstMethod;                               // 0x1e0(0x1)
	char                                                         pad0x7_GZ429[0x7];                                 // 0x1e1(0x7)
	TArray<struct ParticleBurst>                                 BurstList;                                         // 0x1e8(0x10)
	float                                                        EmitterDelay;                                      // 0x1f8(0x4)
	float                                                        EmitterDelayLow;                                   // 0x1fc(0x4)
	bool                                                         bEmitterDelayUseRange;                             // 0x200(0x1)
	bool                                                         bDelayFirstLoopOnly;                               // 0x200(0x1)
	char                                                         pad0x3_K6TOX[0x3];                                 // 0x201(0x3)
	char                                                         InterpolationMethod;                               // 0x204(0x1)
	char                                                         pad0x3_BR2TN[0x3];                                 // 0x205(0x3)
	int                                                          SubImages_Horizontal;                              // 0x208(0x4)
	int                                                          SubImages_Vertical;                                // 0x20c(0x4)
	bool                                                         bScaleUV;                                          // 0x210(0x1)
	char                                                         pad0x3_IUT4Z[0x3];                                 // 0x211(0x3)
	float                                                        RandomImageTime;                                   // 0x214(0x4)
	int                                                          RandomImageChanges;                                // 0x218(0x4)
	bool                                                         bOverrideSystemMacroUV;                            // 0x21c(0x1)
	char                                                         pad0x3_CV0CP[0x3];                                 // 0x21d(0x3)
	struct Vector                                                MacroUVPosition;                                   // 0x220(0xc)
	float                                                        MacroUVRadius;                                     // 0x22c(0x4)
	bool                                                         bUseMaxDrawCount;                                  // 0x230(0x1)
	char                                                         pad0x3_RF3U1[0x3];                                 // 0x231(0x3)
	int                                                          MaxDrawCount;                                      // 0x234(0x4)
	char                                                         EmitterNormalsMode;                                // 0x238(0x1)
	char                                                         pad0x3_FTNNE[0x3];                                 // 0x239(0x3)
	struct Vector                                                NormalsSphereCenter;                               // 0x23c(0xc)
	struct Vector                                                NormalsCylinderDirection;                          // 0x248(0xc)
	bool                                                         bOrbitModuleAffectsVelocityAlignment;              // 0x254(0x1)
	char                                                         pad0x3_W268S[0x3];                                 // 0x255(0x3)
	char                                                         UVFlippingMode;                                    // 0x258(0x1)
	char                                                         BoundingMode;                                      // 0x259(0x1)
	char                                                         OpacitySourceMode;                                 // 0x25a(0x1)
	char                                                         pad0x1_BKM1P[0x1];                                 // 0x25b(0x1)
	float                                                        AlphaThreshold;                                    // 0x25c(0x4)
	float                                                        SafeMarginSize;                                    // 0x260(0x4)
	char                                                         pad0x4_PWN4T[0x4];                                 // 0x264(0x4)
	TArray<struct Name>                                          NamedMaterialOverrides;                            // 0x268(0x10)
	bool                                                         bUseDistanceFading;                                // 0x278(0x1)
	char                                                         pad0x3_TDHER[0x3];                                 // 0x279(0x3)
	float                                                        FarStopFade;                                       // 0x27c(0x4)
	float                                                        FarStartFade;                                      // 0x280(0x4)
	float                                                        NearStartFade;                                     // 0x284(0x4)
	float                                                        NearStopFade;                                      // 0x288(0x4)
	bool                                                         ApplyFOVDistanceScaling;                           // 0x28c(0x1)
	bool                                                         bUseDistanceSizeScale;                             // 0x28c(0x1)
	char                                                         pad0x3_Y265T[0x3];                                 // 0x28d(0x3)
	float                                                        FarScaleFactor;                                    // 0x290(0x4)
	float                                                        FarScaleEndDistance;                               // 0x294(0x4)
	float                                                        FarScaleBeginDistance;                             // 0x298(0x4)
	float                                                        NearScaleBeginDistance;                            // 0x29c(0x4)
	float                                                        NearScaleEndDistance;                              // 0x2a0(0x4)
	float                                                        NearScaleFactor;                                   // 0x2a4(0x4)
	char                                                         pad0x40_HN7JU[0x40];                               // 0x2a8(0x40)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class CloudStorageBase: public PlatformInterfaceBase
{
public:
	TArray<String>                                               LocalCloudFiles;                                   // 0x38(0x10)
	bool                                                         bSuppressDelegateCalls;                            // 0x48(0x1)
	char                                                         pad0x7_8MXJB[0x7];                                 // 0x49(0x7)
};


// Size 0x3b0 (Full Size[0x3d8] - InheritedSize[0x28]
class NavigationSystem: public BlueprintFunctionLibrary
{
public:
	class NavigationData*                                        MainNavData;                                       // 0x28(0x8)
	class NavigationData*                                        AbstractNavData;                                   // 0x30(0x8)
	bool                                                         bAutoCreateNavigationData;                         // 0x38(0x1)
	bool                                                         bAllowClientSideNavigation;                        // 0x38(0x1)
	bool                                                         bSupportRebuilding;                                // 0x38(0x1)
	bool                                                         bInitialBuildingLocked;                            // 0x38(0x1)
	bool                                                         bSkipAgentHeightCheckWhenPickingNavData;           // 0x38(0x1)
	char                                                         pad0x3_ML34P[0x3];                                 // 0x39(0x3)
	char                                                         DataGatheringMode;                                 // 0x3c(0x1)
	char                                                         pad0x3_K4R1Y[0x3];                                 // 0x3d(0x3)
	bool                                                         bGenerateNavigationOnlyAroundNavigationInvokers;   // 0x40(0x1)
	char                                                         pad0x3_8DFSP[0x3];                                 // 0x41(0x3)
	float                                                        ActiveTilesUpdateInterval;                         // 0x44(0x4)
	TArray<struct NavDataConfig>                                 SupportedAgents;                                   // 0x48(0x10)
	float                                                        DirtyAreasUpdateFreq;                              // 0x58(0x4)
	char                                                         pad0x4_8MXEY[0x4];                                 // 0x5c(0x4)
	TArray<class NavigationData*>                                NavDataSet;                                        // 0x60(0x10)
	TArray<class NavigationData*>                                NavDataRegistrationQueue;                          // 0x70(0x10)
	char                                                         pad0x60_E216C[0x60];                               // 0x80(0x60)
	char                                                         OperationMode;                                     // 0x1cc(0x1)
	char                                                         pad0x1f3_APSBZ[0x1f3];                             // 0x1cd(0x1f3)
	struct StringAssetReference                                  InstancedNavMeshesDataAsset;                       // 0x3c0(0x10)
	class InstancedNavMeshesDataAsset*                           InstancedNavMeshesData;                            // 0x3d0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetPushModelHelpers: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeformablesBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0xa8] - InheritedSize[0xa8]
class AnimDataEntryStruct: public UserDefinedStruct
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetStringLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class SoundNodeLooping: public SoundNode
{
public:
	int                                                          LoopCount;                                         // 0x38(0x4)
	bool                                                         bLoopIndefinitely;                                 // 0x3c(0x1)
	char                                                         pad0x3_DF7L3[0x3];                                 // 0x3d(0x3)
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionComponentMask: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	bool                                                         R;                                                 // 0xa8(0x1)
	bool                                                         G;                                                 // 0xa8(0x1)
	bool                                                         B;                                                 // 0xa8(0x1)
	bool                                                         A;                                                 // 0xa8(0x1)
	char                                                         pad0x7_SJHCE[0x7];                                 // 0xa9(0x7)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NetworkClusteringSettings: public DeveloperSettings
{
public:
	float                                                        DynamicActorGridHalfSizeKm;                        // 0x38(0x4)
	float                                                        DynamicActorGridCellSizeKm;                        // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class RareNetworkProfilerExporter: public Exporter
{
public:
};


// Size 0x98 (Full Size[0x2d0] - InheritedSize[0x238]
class DestructibleMesh: public SkeletalMesh
{
public:
	struct DestructibleParameters                                DefaultDestructibleParameters;                     // 0x238(0x88)
	TArray<struct FractureEffect>                                FractureEffects;                                   // 0x2c0(0x10)
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class MaterialExpressionFmod: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
};


// Size 0x10 (Full Size[0x50] - InheritedSize[0x40]
class AnimCompress_RemoveTrivialKeys: public AnimCompress
{
public:
	float                                                        MaxPosDiff;                                        // 0x40(0x4)
	float                                                        MaxAngleDiff;                                      // 0x44(0x4)
	float                                                        MaxScaleDiff;                                      // 0x48(0x4)
	char                                                         pad0x4_WRQO5[0x4];                                 // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InterpTrackInstAudioMaster: public InterpTrackInst
{
public:
};


// Size 0xb8 (Full Size[0x128] - InheritedSize[0x70]
class MaterialExpressionBumpOffset: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinate;                                        // 0x70(0x38)
	struct ExpressionInput                                       Height;                                            // 0xa8(0x38)
	struct ExpressionInput                                       HeightRatioInput;                                  // 0xe0(0x38)
	float                                                        HeightRatio;                                       // 0x118(0x4)
	float                                                        ReferencePlane;                                    // 0x11c(0x4)
	char                                                         pad0x8_TFJTV[0x8];                                 // 0x120(0x8)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionVertexID: public MaterialExpression
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class SoundNodeSwitch: public SoundNode
{
public:
	struct FName                                                 IntParameterName;                                  // 0x38(0x8)
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class MaterialExpressionTime: public MaterialExpression
{
public:
	bool                                                         bIgnorePause;                                      // 0x70(0x1)
	bool                                                         bOverride_Period;                                  // 0x70(0x1)
	char                                                         pad0x3_4RIQT[0x3];                                 // 0x71(0x3)
	float                                                        Period;                                            // 0x74(0x4)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class LODActor: public Actor
{
public:
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3a0(0x8)
	TArray<class Actor*>                                         SubActors;                                         // 0x3a8(0x10)
	float                                                        LODDrawDistance;                                   // 0x3b8(0x4)
	int                                                          LodLevel;                                          // 0x3bc(0x4)
	TArray<class Object*>                                        SubObjects;                                        // 0x3c0(0x10)
	char                                                         pad0x8_DLD8G[0x8];                                 // 0x3d0(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InterpTrackInstParticleReplay: public InterpTrackInst
{
public:
	float                                                        LastUpdatePosition;                                // 0x28(0x4)
	char                                                         pad0x4_ROOP9[0x4];                                 // 0x2c(0x4)
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionDecalMipmapLevel: public MaterialExpression
{
public:
	struct ExpressionInput                                       TextureSize;                                       // 0x70(0x38)
	float                                                        ConstWidth;                                        // 0xa8(0x4)
	float                                                        ConstHeight;                                       // 0xac(0x4)
};


// Size 0xd8 (Full Size[0x5b8] - InheritedSize[0x4e0]
class DemoNetDriver: public NetDriver
{
public:
	char                                                         pad0xd8_4T9T2[0xd8];                               // 0x4e0(0xd8)
};


// Size 0x30 (Full Size[0x2f8] - InheritedSize[0x2c8]
class BodySetup2D: public BodySetup
{
public:
	struct AggregateGeometry2D                                   AggGeom2D;                                         // 0x2c8(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContentStreamingBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class MaterialExpressionWorldPosition: public MaterialExpression
{
public:
	char                                                         WorldPositionShaderOffset;                         // 0x70(0x1)
	char                                                         pad0x7_NQMX3[0x7];                                 // 0x71(0x7)
};


// Size 0x40 (Full Size[0x78] - InheritedSize[0x38]
class SoundNodeModulatorContinuous: public SoundNode
{
public:
	struct ModulatorContinuousParams                             PitchModulationParams;                             // 0x38(0x20)
	struct ModulatorContinuousParams                             VolumeModulationParams;                            // 0x58(0x20)
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class MaterialExpressionConstant3Vector: public MaterialExpression
{
public:
	struct LinearColor                                           Constant;                                          // 0x70(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GPUSortTestLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionAbs: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleOrientationBase: public ParticleModule
{
public:
};


// Size 0x10 (Full Size[0x220] - InheritedSize[0x210]
class LevelStreamingKismet: public LevelStreaming
{
public:
	bool                                                         bInitiallyLoaded;                                  // 0x210(0x1)
	bool                                                         bInitiallyVisible;                                 // 0x210(0x1)
	char                                                         pad0xf_DKD70[0xf];                                 // 0x211(0xf)
};


// Size 0x90 (Full Size[0x100] - InheritedSize[0x70]
class MaterialExpressionNoise: public MaterialExpression
{
public:
	struct ExpressionInput                                       Position;                                          // 0x70(0x38)
	struct ExpressionInput                                       FilterWidth;                                       // 0xa8(0x38)
	float                                                        Scale;                                             // 0xe0(0x4)
	int                                                          Quality;                                           // 0xe4(0x4)
	char                                                         NoiseFunction;                                     // 0xe8(0x1)
	char                                                         pad0x3_ZUOMZ[0x3];                                 // 0xe9(0x3)
	bool                                                         bTurbulence;                                       // 0xec(0x1)
	char                                                         pad0x3_0ZRYK[0x3];                                 // 0xed(0x3)
	int                                                          Levels;                                            // 0xf0(0x4)
	float                                                        OutputMin;                                         // 0xf4(0x4)
	float                                                        OutputMax;                                         // 0xf8(0x4)
	float                                                        LevelScale;                                        // 0xfc(0x4)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ParticleEventManager: public Actor
{
public:
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class MaterialExpressionDistance: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
};


// Size 0x0 (Full Size[0xb0] - InheritedSize[0xb0]
class ParticleSpriteEmitter: public ParticleEmitter
{
public:
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class NavRelevantComponent: public ActorComponent
{
public:
	char                                                         pad0x24_0QADS[0x24];                               // 0xb8(0x24)
	bool                                                         bNavigationRelevant;                               // 0xdc(0x1)
	bool                                                         bAttachToOwnersRoot;                               // 0xdc(0x1)
	char                                                         pad0x3_F3UDJ[0x3];                                 // 0xdd(0x3)
	class Object*                                                CachedNavParent;                                   // 0xe0(0x8)
};


// Size 0xf8 (Full Size[0x498] - InheritedSize[0x3a0]
class HUD: public Actor
{
public:
	struct Color                                                 WhiteColor;                                        // 0x3a0(0x4)
	struct Color                                                 GreenColor;                                        // 0x3a4(0x4)
	struct Color                                                 RedColor;                                          // 0x3a8(0x4)
	char                                                         pad0x4_PSWMX[0x4];                                 // 0x3ac(0x4)
	class PlayerController*                                      PlayerOwner;                                       // 0x3b0(0x8)
	bool                                                         bLostFocusPaused;                                  // 0x3b8(0x1)
	bool                                                         bShowHUD;                                          // 0x3b8(0x1)
	bool                                                         bShowDebugInfo;                                    // 0x3b8(0x1)
	bool                                                         bShowHitBoxDebugInfo;                              // 0x3b8(0x1)
	bool                                                         bShowOverlays;                                     // 0x3b8(0x1)
	bool                                                         bEnableDebugTextShadow;                            // 0x3b8(0x1)
	char                                                         pad0x7_ZH7FZ[0x7];                                 // 0x3b9(0x7)
	TArray<class Actor*>                                         PostRenderedActors;                                // 0x3c0(0x10)
	float                                                        LastHUDRenderTime;                                 // 0x3d0(0x4)
	float                                                        RenderDelta;                                       // 0x3d4(0x4)
	TArray<struct Name>                                          DebugDisplay;                                      // 0x3d8(0x10)
	TArray<struct Name>                                          ToggledDebugCategories;                            // 0x3e8(0x10)
	class Canvas*                                                Canvas;                                            // 0x3f8(0x8)
	class Canvas*                                                DebugCanvas;                                       // 0x400(0x8)
	TArray<struct DebugTextInfo>                                 DebugTextList;                                     // 0x408(0x10)
	class UClass*                                                ShowDebugTargetDesiredClass;                       // 0x418(0x8)
	class Actor*                                                 ShowDebugTargetActor;                              // 0x420(0x8)
	char                                                         pad0x70_J0AOW[0x70];                               // 0x428(0x70)
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class NavigationObjectBase: public Actor
{
public:
	char                                                         pad0x8_48TQ9[0x8];                                 // 0x3a0(0x8)
	class CapsuleComponent*                                      CapsuleComponent;                                  // 0x3a8(0x8)
	class BillboardComponent*                                    GoodSprite;                                        // 0x3b0(0x8)
	class BillboardComponent*                                    BadSprite;                                         // 0x3b8(0x8)
	bool                                                         bIsPIEPlayerStart;                                 // 0x3c0(0x1)
	char                                                         pad0x7_K43SF[0x7];                                 // 0x3c1(0x7)
};


// Size 0x48 (Full Size[0xb8] - InheritedSize[0x70]
class MaterialExpressionCustom: public MaterialExpression
{
public:
	struct FString                                               Code;                                              // 0x70(0x10)
	char                                                         OutputType;                                        // 0x80(0x1)
	char                                                         pad0x7_SGMNS[0x7];                                 // 0x81(0x7)
	struct FString                                               Description;                                       // 0x88(0x10)
	TArray<struct CustomInput>                                   Inputs;                                            // 0x98(0x10)
	struct FString                                               DeclarationCode;                                   // 0xa8(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionObjectOrientation: public MaterialExpression
{
public:
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class Emitter: public Actor
{
public:
	class ParticleSystemComponent*                               ParticleSystemComponent;                           // 0x3a0(0x8)
	bool                                                         bDestroyOnSystemFinish;                            // 0x3a8(0x1)
	bool                                                         bPostUpdateTickGroup;                              // 0x3a8(0x1)
	bool                                                         bCurrentlyActive;                                  // 0x3a8(0x1)
	char                                                         pad0x7_R2NT8[0x7];                                 // 0x3a9(0x7)
	char                                                         pad0x40_UJC73[0x40];                               // 0x3b0(0x40)
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class AnimCompress_Automatic: public AnimCompress
{
public:
	float                                                        MaxEndEffectorError;                               // 0x40(0x4)
	bool                                                         bTryFixedBitwiseCompression;                       // 0x44(0x1)
	bool                                                         bTryPerTrackBitwiseCompression;                    // 0x44(0x1)
	bool                                                         bTryLinearKeyRemovalCompression;                   // 0x44(0x1)
	bool                                                         bTryIntervalKeyRemoval;                            // 0x44(0x1)
	bool                                                         bRunCurrentDefaultCompressor;                      // 0x44(0x1)
	bool                                                         bAutoReplaceIfExistingErrorTooGreat;               // 0x44(0x1)
	bool                                                         bRaiseMaxErrorToExisting;                          // 0x44(0x1)
	char                                                         pad0x3_U70J6[0x3];                                 // 0x45(0x3)
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class MaterialExpressionViewProperty: public MaterialExpression
{
public:
	char                                                         Property;                                          // 0x70(0x1)
	char                                                         pad0x7_PTJNM[0x7];                                 // 0x71(0x7)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class Note: public Actor
{
public:
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionDepthOfFieldFunction: public MaterialExpression
{
public:
	char                                                         FunctionValue;                                     // 0x70(0x1)
	char                                                         pad0x7_B00YR[0x7];                                 // 0x71(0x7)
	struct ExpressionInput                                       Depth;                                             // 0x78(0x38)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionPixelDepth: public MaterialExpression
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionPrecomputedAOMask: public MaterialExpression
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InterpTrackInstToggle: public InterpTrackInst
{
public:
	char                                                         Action;                                            // 0x28(0x1)
	char                                                         pad0x3_PW4BO[0x3];                                 // 0x29(0x3)
	float                                                        LastUpdatePosition;                                // 0x2c(0x4)
	bool                                                         bSavedActiveState;                                 // 0x30(0x1)
	char                                                         pad0x7_3544A[0x7];                                 // 0x31(0x7)
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionCosine: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	float                                                        Period;                                            // 0xa8(0x4)
	char                                                         pad0x4_32DBP[0x4];                                 // 0xac(0x4)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class InterpTrackInstFloatMaterialParam: public InterpTrackInst
{
public:
	TArray<class MaterialInstanceDynamic*>                       MaterialInstances;                                 // 0x28(0x10)
	TArray<float>                                                ResetFloats;                                       // 0x38(0x10)
	TArray<struct PrimitiveMaterialRef>                          PrimitiveMaterialRefs;                             // 0x48(0x10)
	class InterpTrackFloatMaterialParam*                         InstancedTrack;                                    // 0x58(0x8)
};


// Size 0x18 (Full Size[0x80] - InheritedSize[0x68]
class ControlChannel: public Channel
{
public:
	char                                                         pad0x18_SBGIX[0x18];                               // 0x68(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ComponentDelegateBinding: public DynamicBlueprintBinding
{
public:
	TArray<struct BlueprintComponentDelegateBinding>             ComponentDelegateBindings;                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class TargetPoint: public Actor
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class EngineMessage: public LocalMessage
{
public:
	struct FString                                               FailedPlaceMessage;                                // 0x28(0x10)
	struct FString                                               MaxedOutMessage;                                   // 0x38(0x10)
	struct FString                                               EnteredMessage;                                    // 0x48(0x10)
	struct FString                                               LeftMessage;                                       // 0x58(0x10)
	struct FString                                               GlobalNameChange;                                  // 0x68(0x10)
	struct FString                                               SpecEnteredMessage;                                // 0x78(0x10)
	struct FString                                               NewPlayerMessage;                                  // 0x88(0x10)
	struct FString                                               NewSpecMessage;                                    // 0x98(0x10)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionFloor: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NestedWorldCompositionFunctionLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionSphericalParticleOpacity: public MaterialExpression
{
public:
	struct ExpressionInput                                       Density;                                           // 0x70(0x38)
	float                                                        ConstantDensity;                                   // 0xa8(0x4)
	char                                                         pad0x4_6Y3SU[0x4];                                 // 0xac(0x4)
};


// Size 0x28 (Full Size[0x98] - InheritedSize[0x70]
class MaterialExpressionComment: public MaterialExpression
{
public:
	int                                                          SizeX;                                             // 0x70(0x4)
	int                                                          SizeY;                                             // 0x74(0x4)
	struct FString                                               Text;                                              // 0x78(0x10)
	struct LinearColor                                           CommentColor;                                      // 0x88(0x10)
};


// Size 0x48 (Full Size[0x80] - InheritedSize[0x38]
class DeviceProfile: public TextureLODSettings
{
public:
	struct FString                                               DeviceType;                                        // 0x38(0x10)
	struct FString                                               BaseProfileName;                                   // 0x48(0x10)
	class Object*                                                Parent;                                            // 0x58(0x8)
	char                                                         pad0x8_J0CKE[0x8];                                 // 0x60(0x8)
	TArray<String>                                               CVars;                                             // 0x68(0x10)
	char                                                         pad0x8_A55CA[0x8];                                 // 0x78(0x8)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleSizeBase: public ParticleModule
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class SoundNodeWaveParam: public SoundNode
{
public:
	struct FName                                                 WaveParameterName;                                 // 0x38(0x8)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class LevelBounds: public Actor
{
public:
	bool                                                         bAutoUpdateBounds;                                 // 0x3a0(0x1)
	char                                                         pad0x7_MAIN9[0x7];                                 // 0x3a1(0x7)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class SoundNodeDoppler: public SoundNode
{
public:
	float                                                        DopplerIntensity;                                  // 0x38(0x4)
	char                                                         pad0x4_RF16R[0x4];                                 // 0x3c(0x4)
};


// Size 0x18 (Full Size[0x158] - InheritedSize[0x140]
class Texture2DDynamic: public Texture
{
public:
	char                                                         pad0x8_X1GO0[0x8];                                 // 0x140(0x8)
	char                                                         Format;                                            // 0x148(0x1)
	char                                                         pad0xf_IG9VN[0xf];                                 // 0x149(0xf)
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionFunctionOutput: public MaterialExpression
{
public:
	struct FString                                               OutputName;                                        // 0x70(0x10)
	struct FString                                               Description;                                       // 0x80(0x10)
	int                                                          SortPriority;                                      // 0x90(0x4)
	char                                                         pad0x4_D1COX[0x4];                                 // 0x94(0x4)
	struct ExpressionInput                                       A;                                                 // 0x98(0x38)
	bool                                                         bLastPreviewed;                                    // 0xd0(0x1)
	char                                                         pad0x3_HFE6B[0x3];                                 // 0xd1(0x3)
	struct Guid                                                  Id;                                                // 0xd4(0x10)
	char                                                         pad0x4_ADYZ3[0x4];                                 // 0xe4(0x4)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionLumaAvg: public MaterialExpression
{
public:
};


// Size 0x80 (Full Size[0xf0] - InheritedSize[0x70]
class MaterialExpressionRotator: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinate;                                        // 0x70(0x38)
	struct ExpressionInput                                       Time;                                              // 0xa8(0x38)
	float                                                        CenterX;                                           // 0xe0(0x4)
	float                                                        CenterY;                                           // 0xe4(0x4)
	float                                                        Speed;                                             // 0xe8(0x4)
	char                                                         pad0x4_DLZLN[0x4];                                 // 0xec(0x4)
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class MovementComponent: public ActorComponent
{
public:
	class SceneComponent*                                        UpdatedComponent;                                  // 0xb8(0x8)
	class PrimitiveComponent*                                    UpdatedPrimitive;                                  // 0xc0(0x8)
	char                                                         pad0x4_0NILP[0x4];                                 // 0xc8(0x4)
	struct Vector                                                Velocity;                                          // 0xcc(0xc)
	bool                                                         bConstrainToPlane;                                 // 0xd8(0x1)
	bool                                                         bSnapToPlaneAtStart;                               // 0xd8(0x1)
	char                                                         pad0x3_2VB24[0x3];                                 // 0xd9(0x3)
	char                                                         PlaneConstraintAxisSetting;                        // 0xdc(0x1)
	char                                                         pad0x3_NBZCR[0x3];                                 // 0xdd(0x3)
	struct Vector                                                PlaneConstraintNormal;                             // 0xe0(0xc)
	struct Vector                                                PlaneConstraintOrigin;                             // 0xec(0xc)
	bool                                                         bUpdateOnlyIfRendered;                             // 0xf8(0x1)
	bool                                                         bAutoUpdateTickRegistration;                       // 0xf8(0x1)
	bool                                                         bAutoRegisterUpdatedComponent;                     // 0xf8(0x1)
	char                                                         pad0x7_OQUYB[0x7];                                 // 0xf9(0x7)
};


// Size 0x0 (Full Size[0x210] - InheritedSize[0x210]
class LevelStreamingAlwaysLoaded: public LevelStreaming
{
public:
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionAdd: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	float                                                        ConstA;                                            // 0xe0(0x4)
	float                                                        ConstB;                                            // 0xe4(0x4)
};


// Size 0x20 (Full Size[0x90] - InheritedSize[0x70]
class InterpTrackVectorBase: public InterpTrack
{
public:
	struct InterpCurveVector                                     VectorTrack;                                       // 0x70(0x18)
	float                                                        CurveTension;                                      // 0x88(0x4)
	char                                                         pad0x4_ZXADA[0x4];                                 // 0x8c(0x4)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleTypeDataBase: public ParticleModule
{
public:
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class ApplicationLifecycleComponent: public ActorComponent
{
public:
	char                                                         pad0x50_TEXC5[0x50];                               // 0xb8(0x50)
};


// Size 0x20 (Full Size[0x90] - InheritedSize[0x70]
class MaterialExpressionCollectionParameter: public MaterialExpression
{
public:
	class MaterialParameterCollection*                           Collection;                                        // 0x70(0x8)
	struct FName                                                 ParameterName;                                     // 0x78(0x8)
	struct Guid                                                  ParameterId;                                       // 0x80(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InterpTrackInstFloatAnimBPParam: public InterpTrackInst
{
public:
	class AnimInstance*                                          AnimScriptInstance;                                // 0x28(0x8)
	float                                                        ResetFloat;                                        // 0x30(0x4)
	char                                                         pad0xc_1ZOLA[0xc];                                 // 0x34(0xc)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleParameterBase: public ParticleModule
{
public:
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class MaterialExpressionAppendVector: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class SmokeTestCommandlet: public Commandlet
{
public:
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class DialogueSoundWaveProxy: public SoundBase
{
public:
	char                                                         pad0x18_H1GJZ[0x18];                               // 0x50(0x18)
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class MaterialExpressionIfShadowPass: public MaterialExpression
{
public:
	struct ExpressionInput                                       Shadow;                                            // 0x70(0x38)
	struct ExpressionInput                                       NotShadow;                                         // 0xa8(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetTextLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class RigidBodyBase: public Actor
{
public:
};


// Size 0x78 (Full Size[0x418] - InheritedSize[0x3a0]
class Pawn: public Actor
{
public:
	char                                                         pad0x8_JZSGT[0x8];                                 // 0x3a0(0x8)
	bool                                                         bUseControllerRotationPitch;                       // 0x3a8(0x1)
	bool                                                         bUseControllerRotationYaw;                         // 0x3a8(0x1)
	bool                                                         bUseControllerRotationRoll;                        // 0x3a8(0x1)
	bool                                                         bCanAffectNavigationGeneration;                    // 0x3a8(0x1)
	char                                                         pad0x3_IM9XS[0x3];                                 // 0x3a9(0x3)
	float                                                        BaseEyeHeight;                                     // 0x3ac(0x4)
	char                                                         AutoPossessPlayer;                                 // 0x3b0(0x1)
	char                                                         AutoPossessAI;                                     // 0x3b1(0x1)
	char                                                         pad0x6_B3G5S[0x6];                                 // 0x3b2(0x6)
	class UClass*                                                AIControllerClass;                                 // 0x3b8(0x8)
	class PlayerState*                                           PlayerState;                                       // 0x3c0(0x8)
	char                                                         RemoteViewPitch;                                   // 0x3c8(0x1)
	char                                                         pad0x7_IS3PE[0x7];                                 // 0x3c9(0x7)
	class Controller*                                            LastHitBy;                                         // 0x3d0(0x8)
	class Controller*                                            Controller;                                        // 0x3d8(0x8)
	char                                                         pad0x18_YHTHP[0x18];                               // 0x3e0(0x18)
	struct Vector                                                ControlInputVector;                                // 0x3f8(0xc)
	struct Vector                                                LastControlInputVector;                            // 0x404(0xc)
	char                                                         pad0x8_LNM5X[0x8];                                 // 0x410(0x8)
};


// Size 0x28 (Full Size[0x78] - InheritedSize[0x50]
class AnimSequenceBase: public AnimationAsset
{
public:
	TArray<struct AnimNotifyEvent>                               Notifies;                                          // 0x50(0x10)
	float                                                        SequenceLength;                                    // 0x60(0x4)
	float                                                        RateScale;                                         // 0x64(0x4)
	struct RawCurveTracks                                        RawCurveData;                                      // 0x68(0x10)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class NavLinkTrivial: public NavLinkDefinition
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleSubUVBase: public ParticleModule
{
public:
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class SkeletalMeshActor: public Actor
{
public:
	char                                                         pad0x8_F1R51[0x8];                                 // 0x3a0(0x8)
	bool                                                         bShouldDoAnimNotifies;                             // 0x3a8(0x1)
	bool                                                         bWakeOnLevelStart;                                 // 0x3a8(0x1)
	char                                                         pad0x7_04C3O[0x7];                                 // 0x3a9(0x7)
	class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x3b0(0x8)
	class SkeletalMesh*                                          ReplicatedMesh;                                    // 0x3b8(0x8)
	class PhysicsAsset*                                          ReplicatedPhysAsset;                               // 0x3c0(0x8)
	char                                                         pad0x8_R1XO1[0x8];                                 // 0x3c8(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InterpTrackInstVisibility: public InterpTrackInst
{
public:
	char                                                         Action;                                            // 0x28(0x1)
	char                                                         pad0x3_IIK0J[0x3];                                 // 0x29(0x3)
	float                                                        LastUpdatePosition;                                // 0x2c(0x4)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionSquareRoot: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class SoundNodeBranch: public SoundNode
{
public:
	struct FName                                                 BoolParameterName;                                 // 0x38(0x8)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class Light: public Actor
{
public:
	class LightComponent*                                        LightComponent;                                    // 0x3a0(0x8)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class ComponentAggregatorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_C7272[0x8];                                 // 0xb8(0x8)
	TArray<class Object*>                                        Aggregatables;                                     // 0xc0(0x10)
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionMultiply: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	float                                                        ConstA;                                            // 0xe0(0x4)
	float                                                        ConstB;                                            // 0xe4(0x4)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class SoundNodeSoundClass: public SoundNode
{
public:
	class SoundClass*                                            SoundClassOverride;                                // 0x38(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class InterpFilter_Custom: public InterpFilter
{
public:
};


// Size 0x60 (Full Size[0x400] - InheritedSize[0x3a0]
class Controller: public Actor
{
public:
	char                                                         pad0x8_DAJI8[0x8];                                 // 0x3a0(0x8)
	class Pawn*                                                  Pawn;                                              // 0x3a8(0x8)
	char                                                         pad0x8_HSJ4X[0x8];                                 // 0x3b0(0x8)
	class Character*                                             Character;                                         // 0x3b8(0x8)
	class PlayerState*                                           PlayerState;                                       // 0x3c0(0x8)
	class SceneComponent*                                        TransformComponent;                                // 0x3c8(0x8)
	struct Rotator                                               ControlRotation;                                   // 0x3d0(0xc)
	bool                                                         bAttachToPawn;                                     // 0x3dc(0x1)
	char                                                         pad0xb_XRJ9K[0xb];                                 // 0x3dd(0xb)
	struct FName                                                 StateName;                                         // 0x3e8(0x8)
	char                                                         pad0x10_LAMW0[0x10];                               // 0x3f0(0x10)
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class MaterialExpressionFontSample: public MaterialExpression
{
public:
	class Font*                                                  Font;                                              // 0x70(0x8)
	int                                                          FontTexturePage;                                   // 0x78(0x4)
	char                                                         pad0x4_Y9ECW[0x4];                                 // 0x7c(0x4)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionCausticTextureCoordinate: public MaterialExpression
{
public:
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class MaterialExpressionConstant4Vector: public MaterialExpression
{
public:
	struct LinearColor                                           Constant;                                          // 0x70(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class AutoDormancyTestControllerComponent: public ActorComponent
{
public:
	char                                                         pad0x18_MW12F[0x18];                               // 0xb8(0x18)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class RecastNavMeshDataChunk: public NavigationDataChunk
{
public:
	char                                                         pad0x10_JL3AV[0x10];                               // 0x30(0x10)
};


// Size 0x80 (Full Size[0xf0] - InheritedSize[0x70]
class MaterialExpressionSceneColor: public MaterialExpression
{
public:
	char                                                         InputMode;                                         // 0x70(0x1)
	char                                                         pad0x7_K83BU[0x7];                                 // 0x71(0x7)
	struct ExpressionInput                                       Input;                                             // 0x78(0x38)
	struct ExpressionInput                                       OffsetFraction;                                    // 0xb0(0x38)
	struct Vector2D                                              ConstInput;                                        // 0xe8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkeletalMeshMergeBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xe8 (Full Size[0x158] - InheritedSize[0x70]
class MaterialExpressionSphereMask: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	struct ExpressionInput                                       Radius;                                            // 0xe0(0x38)
	struct ExpressionInput                                       Hardness;                                          // 0x118(0x38)
	float                                                        AttenuationRadius;                                 // 0x150(0x4)
	float                                                        HardnessPercent;                                   // 0x154(0x4)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionUnderwaterTranslucencyTexture: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinates;                                       // 0x70(0x38)
};


// Size 0x78 (Full Size[0x418] - InheritedSize[0x3a0]
class MatineeActor: public Actor
{
public:
	class InterpData*                                            MatineeData;                                       // 0x3a0(0x8)
	struct FName                                                 MatineeControllerName;                             // 0x3a8(0x8)
	float                                                        PlayRate;                                          // 0x3b0(0x4)
	bool                                                         bPlayOnLevelLoad;                                  // 0x3b4(0x1)
	bool                                                         bForceStartPos;                                    // 0x3b4(0x1)
	char                                                         pad0x3_YFNDK[0x3];                                 // 0x3b5(0x3)
	float                                                        ForceStartPosition;                                // 0x3b8(0x4)
	bool                                                         bLooping;                                          // 0x3bc(0x1)
	bool                                                         bRewindOnPlay;                                     // 0x3bc(0x1)
	bool                                                         bNoResetOnRewind;                                  // 0x3bc(0x1)
	bool                                                         bRewindIfAlreadyPlaying;                           // 0x3bc(0x1)
	bool                                                         bDisableRadioFilter;                               // 0x3bc(0x1)
	bool                                                         bClientSideOnly;                                   // 0x3bc(0x1)
	bool                                                         bSkipUpdateIfNotVisible;                           // 0x3bc(0x1)
	bool                                                         bIsSkippable;                                      // 0x3bc(0x1)
	char                                                         pad0x3_KZUP5[0x3];                                 // 0x3bd(0x3)
	int                                                          PreferredSplitScreenNum;                           // 0x3c0(0x4)
	bool                                                         bDisableMovementInput;                             // 0x3c4(0x1)
	bool                                                         bDisableLookAtInput;                               // 0x3c4(0x1)
	bool                                                         bHidePlayer;                                       // 0x3c4(0x1)
	bool                                                         bHideHud;                                          // 0x3c4(0x1)
	char                                                         pad0x3_9QJC2[0x3];                                 // 0x3c5(0x3)
	TArray<struct InterpGroupActorInfo>                          GroupActorInfos;                                   // 0x3c8(0x10)
	bool                                                         bShouldShowGore;                                   // 0x3d8(0x1)
	char                                                         pad0x7_3PKDX[0x7];                                 // 0x3d9(0x7)
	TArray<class InterpGroupInst*>                               GroupInst;                                         // 0x3e0(0x10)
	TArray<struct CameraCutInfo>                                 CameraCuts;                                        // 0x3f0(0x10)
	bool                                                         bIsPlaying;                                        // 0x400(0x1)
	bool                                                         bReversePlayback;                                  // 0x400(0x1)
	bool                                                         bPaused;                                           // 0x400(0x1)
	bool                                                         bPendingStop;                                      // 0x400(0x1)
	char                                                         pad0x3_2RREK[0x3];                                 // 0x401(0x3)
	float                                                        InterpPosition;                                    // 0x404(0x4)
	char                                                         pad0x4_U6CFS[0x4];                                 // 0x408(0x4)
	char                                                         ReplicationForceIsPlaying;                         // 0x40c(0x1)
	char                                                         pad0x7_M3NSZ[0x7];                                 // 0x40d(0x7)
	bool                                                         bServerInitialLevelStreamingComplete;              // 0x414(0x1)
	char                                                         pad0x3_NMGWZ[0x3];                                 // 0x415(0x3)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionLocalDisturbanceTexture: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinates;                                       // 0x70(0x38)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class MicroTransactionBase: public PlatformInterfaceBase
{
public:
	TArray<struct PurchaseInfo>                                  AvailableProducts;                                 // 0x38(0x10)
	struct FString                                               LastError;                                         // 0x48(0x10)
	struct FString                                               LastErrorSolution;                                 // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DataTableFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x80 (Full Size[0xf0] - InheritedSize[0x70]
class MaterialExpressionPanner: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinate;                                        // 0x70(0x38)
	struct ExpressionInput                                       Time;                                              // 0xa8(0x38)
	float                                                        SpeedX;                                            // 0xe0(0x4)
	float                                                        SpeedY;                                            // 0xe4(0x4)
	bool                                                         bFractionalPart;                                   // 0xec(0x1)
	char                                                         pad0x3_Z7033[0x3];                                 // 0xed(0x3)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class AmbientSound: public Actor
{
public:
	class AudioComponent*                                        AudioComponent;                                    // 0x3a0(0x8)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class InGameAdManager: public PlatformInterfaceBase
{
public:
	bool                                                         bShouldPauseWhileAdOpen;                           // 0x38(0x1)
	char                                                         pad0x7_SK4OH[0x7];                                 // 0x39(0x7)
	TArray<uintptr_t>                                            ClickedBannerDelegates;                            // 0x40(0x10)
	TArray<uintptr_t>                                            ClosedAdDelegates;                                 // 0x50(0x10)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleAccelerationBase: public ParticleModule
{
public:
	bool                                                         bAlwaysInWorldSpace;                               // 0x50(0x1)
	char                                                         pad0x7_KKI5C[0x7];                                 // 0x51(0x7)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class AnimCompress_LeastDestructive: public AnimCompress
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class FogVolume: public Actor
{
public:
	class SphereComponent*                                       SphereComponent;                                   // 0x3a0(0x8)
	class FogVolumeComponent*                                    FogVolumeComponent;                                // 0x3a8(0x8)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionCeil: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class MaterialExpressionConstant: public MaterialExpression
{
public:
	float                                                        R;                                                 // 0x70(0x4)
	char                                                         pad0x4_4YB7W[0x4];                                 // 0x74(0x4)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class AnotherComponentWithTestInterface: public ActorComponent
{
public:
	char                                                         pad0x8_AIWKI[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionCameraVectorWS: public MaterialExpression
{
public:
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class InterpTrackParticleReplay: public InterpTrack
{
public:
	TArray<struct ParticleReplayTrackKey>                        TrackKeys;                                         // 0x70(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionPerInstanceRandom: public MaterialExpression
{
public:
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class GarbageCollectionSettings: public DeveloperSettings
{
public:
	float                                                        TimeBetweenPurgingPendingKillObjects;              // 0x38(0x4)
	bool                                                         FlushStreamingOnGC;                                // 0x3c(0x1)
	bool                                                         AllowParallelGC;                                   // 0x3c(0x1)
	bool                                                         CreateGCClusters;                                  // 0x3c(0x1)
	bool                                                         MergeGCClusters;                                   // 0x3c(0x1)
	char                                                         pad0x3_8YHUH[0x3];                                 // 0x3d(0x3)
	int                                                          NumRetriesBeforeForcingGC;                         // 0x40(0x4)
	int                                                          MaxObjectsNotConsideredByGC;                       // 0x44(0x4)
	int                                                          SizeOfPermanentObjectPool;                         // 0x48(0x4)
	int                                                          MaxObjectsInGame;                                  // 0x4c(0x4)
	int                                                          MaxObjectsInEditor;                                // 0x50(0x4)
	char                                                         pad0x4_77G6Q[0x4];                                 // 0x54(0x4)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionDDX: public MaterialExpression
{
public:
	struct ExpressionInput                                       Value;                                             // 0x70(0x38)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionDistanceToNearestSurface: public MaterialExpression
{
public:
	struct ExpressionInput                                       Position;                                          // 0x70(0x38)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleLightBase: public ParticleModule
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class AutoDormancyTestComponent: public ActorComponent
{
public:
	char                                                         pad0x8_XUHE5[0x8];                                 // 0xb8(0x8)
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionTransformPosition: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	char                                                         TransformSourceType;                               // 0xa8(0x1)
	char                                                         TransformType;                                     // 0xa9(0x1)
	char                                                         pad0x6_ZU2KY[0x6];                                 // 0xaa(0x6)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionBlackBody: public MaterialExpression
{
public:
	struct ExpressionInput                                       Temp;                                              // 0x70(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugDrawService: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionDistanceCullFade: public MaterialExpression
{
public:
};


// Size 0x78 (Full Size[0xa8] - InheritedSize[0x30]
class ReporterGraph: public ReporterBase
{
public:
	char                                                         pad0x78_J5DY4[0x78];                               // 0x30(0x78)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleWindBase: public ParticleModule
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleEventBase: public ParticleModule
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleRadius: public MaterialExpression
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class MergedCollisionActor: public Actor
{
public:
	class MergedCollisionComponent*                              MergedCollisionComponent;                          // 0x3a0(0x8)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class WaterEmissionVolume: public Actor
{
public:
	class WaterEmissionVolumeComponent*                          WaterEmissionVolumeComponent;                      // 0x3a0(0x8)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class SoundNodeRandom: public SoundNode
{
public:
	TArray<float>                                                Weights;                                           // 0x38(0x10)
	int                                                          PreselectAtLevelLoad;                              // 0x48(0x4)
	bool                                                         bRandomizeWithoutReplacement;                      // 0x4c(0x1)
	char                                                         pad0x3_Q409Z[0x3];                                 // 0x4d(0x3)
	TArray<bool>                                                 HasBeenUsed;                                       // 0x50(0x10)
	int                                                          NumRandomUsed;                                     // 0x60(0x4)
	char                                                         pad0x4_H3NWC[0x4];                                 // 0x64(0x4)
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionReflectionVectorWS: public MaterialExpression
{
public:
	struct ExpressionInput                                       CustomWorldNormal;                                 // 0x70(0x38)
	bool                                                         bNormalizeCustomWorldNormal;                       // 0xa8(0x1)
	char                                                         pad0x7_BX4MQ[0x7];                                 // 0xa9(0x7)
};


// Size 0x0 (Full Size[0x100] - InheritedSize[0x100]
class DemoPendingNetGame: public PendingNetGame
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class SoundNodeDelay: public SoundNode
{
public:
	float                                                        DelayMin;                                          // 0x38(0x4)
	float                                                        DelayMax;                                          // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleLocationBase: public ParticleModule
{
public:
};


// Size 0x118 (Full Size[0x188] - InheritedSize[0x70]
class MaterialExpressionFeatureLevelSwitch: public MaterialExpression
{
public:
	struct ExpressionInput                                       Default;                                           // 0x70(0x38)
	struct ExpressionInput                                       Inputs;                                            // 0xa8(0x38)
	char                                                         pad0xa8_0ZG8W[0xa8];                               // 0xe0(0xa8)
};


// Size 0x20 (Full Size[0x90] - InheritedSize[0x70]
class MaterialExpressionDynamicParameter: public MaterialExpression
{
public:
	TArray<String>                                               ParamNames;                                        // 0x70(0x10)
	struct LinearColor                                           DefaultValue;                                      // 0x80(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionCustomOutput: public MaterialExpression
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionCameraPositionWS: public MaterialExpression
{
public:
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionSceneTexture: public MaterialExpression
{
public:
	struct ExpressionInput                                       Coordinates;                                       // 0x70(0x38)
	char                                                         SceneTextureId;                                    // 0xa8(0x1)
	bool                                                         bClampUVs;                                         // 0xa9(0x1)
	bool                                                         bFiltered;                                         // 0xaa(0x1)
	char                                                         pad0x5_7TAMN[0x5];                                 // 0xab(0x5)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetArrayLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class InterpTrackDirector: public InterpTrack
{
public:
	TArray<struct DirectorTrackCut>                              CutTrack;                                          // 0x70(0x10)
	bool                                                         bSimulateCameraCutsOnClients;                      // 0x80(0x1)
	char                                                         pad0x7_IO8WU[0x7];                                 // 0x81(0x7)
};


// Size 0x28 (Full Size[0x98] - InheritedSize[0x70]
class MaterialExpressionMaterialFunctionCall: public MaterialExpression
{
public:
	class MaterialFunction*                                      MaterialFunction;                                  // 0x70(0x8)
	TArray<struct FunctionExpressionInput>                       FunctionInputs;                                    // 0x78(0x10)
	TArray<struct FunctionExpressionOutput>                      FunctionOutputs;                                   // 0x88(0x10)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class NavArea_Default: public NavArea
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class InterpGroupDirector: public InterpGroup
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class DocumentationActor: public Actor
{
public:
	char                                                         pad0x8_J3OGZ[0x8];                                 // 0x3a0(0x8)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class VertexAnimation: public VertexAnimBase
{
public:
	int                                                          NumAnimatedVerts;                                  // 0x30(0x4)
	char                                                         pad0x14_L62C1[0x14];                               // 0x34(0x14)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InterpTrackInstAnimControl: public InterpTrackInst
{
public:
	float                                                        LastUpdatePosition;                                // 0x28(0x4)
	char                                                         pad0x4_9WA04[0x4];                                 // 0x2c(0x4)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionAtmosphericFogColor: public MaterialExpression
{
public:
	struct ExpressionInput                                       WorldPosition;                                     // 0x70(0x38)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class FeatureToggledStringAssetReference: public DataAsset
{
public:
	TArray<struct FeatureToggledStringAssetReferenceEntry>       Entries;                                           // 0x28(0x10)
	class UClass*                                                ClassType;                                         // 0x38(0x8)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleColorBase: public ParticleModule
{
public:
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class MaterialExpressionDotProduct: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionHash: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class MaterialExpressionTextureCoordinate: public MaterialExpression
{
public:
	int                                                          CoordinateIndex;                                   // 0x70(0x4)
	float                                                        UTiling;                                           // 0x74(0x4)
	float                                                        VTiling;                                           // 0x78(0x4)
	bool                                                         UnMirrorU;                                         // 0x7c(0x1)
	bool                                                         UnMirrorV;                                         // 0x7c(0x1)
	char                                                         pad0x3_H1353[0x3];                                 // 0x7d(0x3)
};


// Size 0xe0 (Full Size[0x520] - InheritedSize[0x440]
class AnimSingleNodeInstance: public AnimInstance
{
public:
	class AnimationAsset*                                        CurrentAsset;                                      // 0x440(0x8)
	class VertexAnimation*                                       CurrentVertexAnim;                                 // 0x448(0x8)
	struct Vector                                                BlendSpaceInput;                                   // 0x450(0xc)
	char                                                         pad0x4_WIUT2[0x4];                                 // 0x45c(0x4)
	TArray<struct BlendSampleData>                               BlendSampleData;                                   // 0x460(0x10)
	struct BlendFilter                                           BlendFilter;                                       // 0x470(0x90)
	float                                                        CurrentTime;                                       // 0x500(0x4)
	float                                                        PlayRate;                                          // 0x504(0x4)
	bool                                                         bLooping;                                          // 0x518(0x1)
	bool                                                         bPlaying;                                          // 0x518(0x1)
	bool                                                         bReverse;                                          // 0x518(0x1)
	char                                                         pad0x7_GHTUI[0x7];                                 // 0x519(0x7)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ParticleComputeShaderData: public DataAsset
{
public:
	char                                                         pad0x20_7ITH9[0x20];                               // 0x28(0x20)
};


// Size 0x120 (Full Size[0x158] - InheritedSize[0x38]
class UserInterfaceSettings: public DeveloperSettings
{
public:
	char                                                         RenderFocusRule;                                   // 0x38(0x1)
	char                                                         pad0x7_DWBBE[0x7];                                 // 0x39(0x7)
	struct StringClassReference                                  DefaultCursor;                                     // 0x40(0x10)
	struct StringClassReference                                  TextEditBeamCursor;                                // 0x50(0x10)
	struct StringClassReference                                  CrosshairsCursor;                                  // 0x60(0x10)
	struct StringClassReference                                  GrabHandCursor;                                    // 0x70(0x10)
	struct StringClassReference                                  GrabHandClosedCursor;                              // 0x80(0x10)
	struct StringClassReference                                  SlashedCircleCursor;                               // 0x90(0x10)
	float                                                        ApplicationScale;                                  // 0xa0(0x4)
	char                                                         UIScaleRule;                                       // 0xa4(0x1)
	char                                                         pad0x3_FK4QT[0x3];                                 // 0xa5(0x3)
	struct StringClassReference                                  CustomScalingRuleClass;                            // 0xa8(0x10)
	struct RuntimeFloatCurve                                     UIScaleCurve;                                      // 0xb8(0x80)
	TArray<class Object*>                                        CursorClasses;                                     // 0x138(0x10)
	class UClass*                                                CustomScalingRuleClassInstance;                    // 0x148(0x8)
	class DPICustomScalingRule*                                  CustomScalingRule;                                 // 0x150(0x8)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionVertexColor: public MaterialExpression
{
public:
};


// Size 0x80 (Full Size[0xb0] - InheritedSize[0x30]
class CurveFloat: public CurveBase
{
public:
	struct RichCurve                                             FloatCurve;                                        // 0x30(0x78)
	bool                                                         bIsEventCurve;                                     // 0xa8(0x1)
	char                                                         pad0x7_WVWBZ[0x7];                                 // 0xa9(0x7)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class AnimCompress_BitwiseCompressOnly: public AnimCompress
{
public:
};


// Size 0x218 (Full Size[0x2d0] - InheritedSize[0xb8]
class SceneComponent: public ActorComponent
{
public:
	TArray<class SceneComponent*>                                AttachChildren;                                    // 0xb8(0x10)
	bool                                                         bRequiresCustomLocation;                           // 0xc8(0x1)
	char                                                         pad0x7_NCPWZ[0x7];                                 // 0xc9(0x7)
	class SceneComponent*                                        AttachParent;                                      // 0xd0(0x8)
	struct FName                                                 AttachSocketName;                                  // 0xd8(0x8)
	bool                                                         bAbsoluteLocation;                                 // 0xe0(0x1)
	bool                                                         bAbsoluteRotation;                                 // 0xe0(0x1)
	bool                                                         bAbsoluteScale;                                    // 0xe0(0x1)
	bool                                                         bVisible;                                          // 0xe0(0x1)
	bool                                                         bAbsoluteTranslation;                              // 0xe0(0x1)
	bool                                                         bHiddenInGame;                                     // 0xe0(0x1)
	bool                                                         bShouldUpdatePhysicsVolume;                        // 0xe0(0x1)
	bool                                                         bBoundsChangeTriggersStreamingDataRebuild;         // 0xe0(0x1)
	bool                                                         bUseAttachParentBound;                             // 0xe1(0x1)
	bool                                                         bComponentIsUnionOfChildren;                       // 0xe1(0x1)
	bool                                                         bJitterReduction;                                  // 0xe1(0x1)
	bool                                                         CacheRootVelocity;                                 // 0xe1(0x1)
	bool                                                         bWorldToComponentUpdated;                          // 0xe1(0x1)
	char                                                         pad0xe_YBFDC[0xe];                                 // 0xe2(0xe)
	struct Vector                                                RelativeLocation;                                  // 0xf8(0xc)
	struct Rotator                                               RelativeRotation;                                  // 0x104(0xc)
	struct Vector                                                RelativeScale3D;                                   // 0x110(0xc)
	char                                                         pad0x104_AIFOT[0x104];                             // 0x11c(0x104)
	char                                                         Mobility;                                          // 0x220(0x1)
	char                                                         DetailMode;                                        // 0x221(0x1)
	char                                                         pad0xa_SY6VB[0xa];                                 // 0x222(0xa)
	struct Vector                                                ComponentVelocity;                                 // 0x22c(0xc)
	TArray<struct Name>                                          SocketVelocitiesToCache;                           // 0x258(0x10)
	TArray<class Actor*>                                         MovedActors;                                       // 0x268(0x10)
	char                                                         pad0x58_CNCQT[0x58];                               // 0x278(0x58)
};


// Size 0x58 (Full Size[0x3f8] - InheritedSize[0x3a0]
class AutomaticInstancingActor: public Actor
{
public:
	class SceneComponent*                                        DummyRoot;                                         // 0x3a0(0x8)
	char                                                         pad0x50_IKVL5[0x50];                               // 0x3a8(0x50)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ServerOnlyTestActor: public Actor
{
public:
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class InterpTrackVisibility: public InterpTrack
{
public:
	TArray<struct VisibilityTrackKey>                            VisibilityTrack;                                   // 0x70(0x10)
	bool                                                         bFireEventsWhenForwards;                           // 0x80(0x1)
	bool                                                         bFireEventsWhenBackwards;                          // 0x80(0x1)
	bool                                                         bFireEventsWhenJumpingForwards;                    // 0x80(0x1)
	char                                                         pad0x7_HF41O[0x7];                                 // 0x81(0x7)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionNormalize: public MaterialExpression
{
public:
	struct ExpressionInput                                       VectorInput;                                       // 0x70(0x38)
};


// Size 0x30 (Full Size[0x60] - InheritedSize[0x30]
class AnimNotifyState_TimedParticleEffect: public AnimNotifyState
{
public:
	class ParticleSystem*                                        PSTemplate;                                        // 0x30(0x8)
	struct FName                                                 SocketName;                                        // 0x38(0x8)
	struct Vector                                                LocationOffset;                                    // 0x40(0xc)
	struct Rotator                                               RotationOffset;                                    // 0x4c(0xc)
	bool                                                         bOwnerOnlySee;                                     // 0x58(0x1)
	bool                                                         bOwnerNoSee;                                       // 0x59(0x1)
	bool                                                         bDestroyAtEnd;                                     // 0x5a(0x1)
	bool                                                         bWorldOwnedEffect;                                 // 0x5b(0x1)
	char                                                         pad0x4_0I7BU[0x4];                                 // 0x5c(0x4)
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class AnimCompress_RemoveEverySecondKey: public AnimCompress
{
public:
	int                                                          MinKeys;                                           // 0x40(0x4)
	bool                                                         bStartAtSecondKey;                                 // 0x44(0x1)
	char                                                         pad0x3_YWHQU[0x3];                                 // 0x45(0x3)
};


// Size 0x20 (Full Size[0x90] - InheritedSize[0x70]
class InterpTrackLinearColorBase: public InterpTrack
{
public:
	struct InterpCurveLinearColor                                LinearColorTrack;                                  // 0x70(0x18)
	float                                                        CurveTension;                                      // 0x88(0x4)
	char                                                         pad0x4_CFTO9[0x4];                                 // 0x8c(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SoundNodeQualityLevel: public SoundNode
{
public:
};


// Size 0xd8 (Full Size[0x110] - InheritedSize[0x38]
class RendererSettings: public DeveloperSettings
{
public:
	bool                                                         bMobileHDR;                                        // 0x38(0x1)
	char                                                         pad0x3_6V14R[0x3];                                 // 0x39(0x3)
	bool                                                         bMobileDynamicPointLightsUseStaticBranch;          // 0x40(0x1)
	bool                                                         bOcclusionCulling;                                 // 0x40(0x1)
	char                                                         pad0x3_WLE56[0x3];                                 // 0x41(0x3)
	float                                                        MinScreenRadiusForLights;                          // 0x44(0x4)
	float                                                        MinScreenRadiusForEarlyZPass;                      // 0x48(0x4)
	float                                                        MinScreenRadiusForCSMdepth;                        // 0x4c(0x4)
	bool                                                         bPrecomputedVisibilityWarning;                     // 0x50(0x1)
	bool                                                         bTextureStreaming;                                 // 0x50(0x1)
	bool                                                         bUseDXT5NormalMaps;                                // 0x50(0x1)
	bool                                                         bAllowStaticLighting;                              // 0x50(0x1)
	bool                                                         bUseNormalMapsForStaticLighting;                   // 0x50(0x1)
	bool                                                         bGenerateMeshDistanceFields;                       // 0x50(0x1)
	bool                                                         bGenerateLandscapeGIData;                          // 0x50(0x1)
	char                                                         pad0x3_UUOXX[0x3];                                 // 0x51(0x3)
	float                                                        TessellationAdaptivePixelsPerTriangle;             // 0x54(0x4)
	bool                                                         bSeparateTranslucency;                             // 0x58(0x1)
	char                                                         pad0x3_78Y73[0x3];                                 // 0x59(0x3)
	char                                                         TranslucentSortPolicy;                             // 0x5c(0x1)
	char                                                         pad0x3_T8J1R[0x3];                                 // 0x5d(0x3)
	struct Vector                                                TranslucentSortAxis;                               // 0x60(0xc)
	char                                                         CustomDepthStencil;                                // 0x6c(0x1)
	char                                                         pad0x3_D9NEA[0x3];                                 // 0x6d(0x3)
	bool                                                         bDefaultFeatureBloom;                              // 0x70(0x1)
	bool                                                         bDefaultFeatureAmbientOcclusion;                   // 0x70(0x1)
	bool                                                         bDefaultFeatureAmbientOcclusionStaticFraction;     // 0x70(0x1)
	bool                                                         bDefaultFeatureAutoExposure;                       // 0x70(0x1)
	bool                                                         bDefaultFeatureMotionBlur;                         // 0x70(0x1)
	bool                                                         bDefaultFeatureLensFlare;                          // 0x70(0x1)
	char                                                         pad0x3_YVJEM[0x3];                                 // 0x71(0x3)
	char                                                         DefaultFeatureAntiAliasing;                        // 0x74(0x1)
	char                                                         EarlyZPass;                                        // 0x75(0x1)
	char                                                         bDepthSort;                                        // 0x76(0x1)
	char                                                         pad0x1_NFIW1[0x1];                                 // 0x77(0x1)
	bool                                                         bEarlyZPassMovable;                                // 0x78(0x1)
	bool                                                         bDBuffer;                                          // 0x78(0x1)
	char                                                         pad0x3_C3AZR[0x3];                                 // 0x79(0x3)
	char                                                         ClearSceneMethod;                                  // 0x7c(0x1)
	char                                                         pad0x3_4TMG5[0x3];                                 // 0x7d(0x3)
	bool                                                         bBasePassOutputsVelocity;                          // 0x80(0x1)
	char                                                         pad0x3_SHCUA[0x3];                                 // 0x81(0x3)
	float                                                        WireframeCullThreshold;                            // 0x84(0x4)
	char                                                         UIScaleRule;                                       // 0x88(0x1)
	char                                                         pad0x7_XVQZ5[0x7];                                 // 0x89(0x7)
	struct RuntimeFloatCurve                                     UIScaleCurve;                                      // 0x90(0x80)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class LevelScriptActor: public Actor
{
public:
	bool                                                         bInputEnabled;                                     // 0x3a0(0x1)
	char                                                         pad0x7_L28NC[0x7];                                 // 0x3a1(0x7)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ThreadedActor: public Actor
{
public:
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class NavLinkProxy: public Actor
{
public:
	char                                                         pad0x10_BDCOQ[0x10];                               // 0x3a0(0x10)
	TArray<struct NavigationLink>                                PointLinks;                                        // 0x3b0(0x10)
	TArray<struct NavigationSegmentLink>                         SegmentLinks;                                      // 0x3c0(0x10)
	class NavLinkCustomComponent*                                SmartLinkComp;                                     // 0x3d0(0x8)
	bool                                                         bSmartLinkIsRelevant;                              // 0x3d8(0x1)
	char                                                         pad0x7_7APOJ[0x7];                                 // 0x3d9(0x7)
	char                                                         pad0x10_MA3AD[0x10];                               // 0x3e0(0x10)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class TextRenderActor: public Actor
{
public:
	class TextRenderComponent*                                   TextRender;                                        // 0x3a0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameplayStatics: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class AutomaticInstancingSettings: public DeveloperSettings
{
public:
	bool                                                         IsEnabled;                                         // 0x38(0x1)
	char                                                         pad0x7_A7G6H[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleVectorFieldBase: public ParticleModule
{
public:
};


// Size 0x48 (Full Size[0x80] - InheritedSize[0x38]
class AnimationSettings: public DeveloperSettings
{
public:
	TArray<float>                                                DefaultVisibleDistanceFactorThresholds;            // 0x38(0x10)
	int                                                          CompressCommandletVersion;                         // 0x48(0x4)
	char                                                         pad0x4_KYQ15[0x4];                                 // 0x4c(0x4)
	TArray<String>                                               KeyEndEffectorsMatchNameArray;                     // 0x50(0x10)
	class UClass*                                                DefaultCompressionAlgorithm;                       // 0x60(0x8)
	char                                                         RotationCompressionFormat;                         // 0x68(0x1)
	char                                                         TranslationCompressionFormat;                      // 0x69(0x1)
	char                                                         pad0x2_PCMZN[0x2];                                 // 0x6a(0x2)
	float                                                        AlternativeCompressionThreshold;                   // 0x6c(0x4)
	bool                                                         ForceRecompression;                                // 0x70(0x1)
	bool                                                         bOnlyCheckForMissingSkeletalMeshes;                // 0x71(0x1)
	bool                                                         bForceBelowThreshold;                              // 0x72(0x1)
	bool                                                         bFirstRecompressUsingCurrentOrDefault;             // 0x73(0x1)
	bool                                                         bRaiseMaxErrorToExisting;                          // 0x74(0x1)
	bool                                                         bTryFixedBitwiseCompression;                       // 0x75(0x1)
	bool                                                         bTryPerTrackBitwiseCompression;                    // 0x76(0x1)
	bool                                                         bTryLinearKeyRemovalCompression;                   // 0x77(0x1)
	bool                                                         bTryIntervalKeyRemoval;                            // 0x78(0x1)
	bool                                                         bStripAnimationDataOnDedicatedServer;              // 0x79(0x1)
	char                                                         pad0x6_86HHK[0x6];                                 // 0x7a(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ParticleWarningFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class NavArea_Null: public NavArea
{
public:
};


// Size 0xd0 (Full Size[0x470] - InheritedSize[0x3a0]
class NavigationTestingActor: public Actor
{
public:
	char                                                         pad0x10_AT7IF[0x10];                               // 0x3a0(0x10)
	class CapsuleComponent*                                      CapsuleComponent;                                  // 0x3b0(0x8)
	class NavigationInvokerComponent*                            InvokerComponent;                                  // 0x3b8(0x8)
	bool                                                         bActAsNavigationInvoker;                           // 0x3c0(0x1)
	char                                                         pad0x3_K5CNP[0x3];                                 // 0x3c1(0x3)
	struct NavAgentProperties                                    NavAgentProps;                                     // 0x3c4(0x30)
	struct Vector                                                QueryingExtent;                                    // 0x3f4(0xc)
	class NavigationData*                                        MyNavData;                                         // 0x400(0x8)
	struct Vector                                                ProjectedLocation;                                 // 0x408(0xc)
	bool                                                         bProjectedLocationValid;                           // 0x414(0x1)
	bool                                                         bSearchStart;                                      // 0x414(0x1)
	bool                                                         bUseHierarchicalPathfinding;                       // 0x414(0x1)
	bool                                                         bGatherDetailedInfo;                               // 0x414(0x1)
	bool                                                         bShowNodePool;                                     // 0x414(0x1)
	bool                                                         bShowBestPath;                                     // 0x414(0x1)
	bool                                                         bShowDiffWithPreviousStep;                         // 0x414(0x1)
	bool                                                         bShouldBeVisibleInGame;                            // 0x414(0x1)
	char                                                         pad0x3_CB4WS[0x3];                                 // 0x415(0x3)
	char                                                         CostDisplayMode;                                   // 0x418(0x1)
	char                                                         pad0x3_JP1HD[0x3];                                 // 0x419(0x3)
	struct Vector2D                                              TextCanvasOffset;                                  // 0x41c(0x8)
	bool                                                         bPathExist;                                        // 0x424(0x1)
	bool                                                         bPathIsPartial;                                    // 0x424(0x1)
	bool                                                         bPathSearchOutOfNodes;                             // 0x424(0x1)
	char                                                         pad0x3_22O2K[0x3];                                 // 0x425(0x3)
	float                                                        PathfindingTime;                                   // 0x428(0x4)
	float                                                        PathCost;                                          // 0x42c(0x4)
	int                                                          PathfindingSteps;                                  // 0x430(0x4)
	char                                                         pad0x4_49ZIQ[0x4];                                 // 0x434(0x4)
	class NavigationTestingActor*                                OtherActor;                                        // 0x438(0x8)
	class UClass*                                                FilterClass;                                       // 0x440(0x8)
	int                                                          ShowStepIndex;                                     // 0x448(0x4)
	float                                                        OffsetFromCornersDistance;                         // 0x44c(0x4)
	char                                                         pad0x20_NT76C[0x20];                               // 0x450(0x20)
};


// Size 0x228 (Full Size[0x290] - InheritedSize[0x68]
class ActorChannel: public Channel
{
public:
	class Actor*                                                 Actor;                                             // 0x68(0x8)
	char                                                         pad0x100_919YT[0x100];                             // 0x70(0x100)
	TArray<class Object*>                                        ObjectsRequiredForQueuedBunches;                   // 0x170(0x10)
	char                                                         pad0x110_PWCZY[0x110];                             // 0x180(0x110)
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionDivide: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	float                                                        ConstA;                                            // 0xe0(0x4)
	float                                                        ConstB;                                            // 0xe4(0x4)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionSceneTexelSize: public MaterialExpression
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleBeamBase: public ParticleModule
{
public:
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleVelocityBase: public ParticleModule
{
public:
	bool                                                         bInWorldSpace;                                     // 0x50(0x1)
	bool                                                         bApplyOwnerScale;                                  // 0x50(0x1)
	char                                                         pad0x7_GFT0Z[0x7];                                 // 0x51(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VisualLoggerKismetLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class ReflectionCapture: public Actor
{
public:
	class ReflectionCaptureComponent*                            CaptureComponent;                                  // 0x3a0(0x8)
};


// Size 0xb8 (Full Size[0x108] - InheritedSize[0x50]
class BlendSpaceBase: public AnimationAsset
{
public:
	struct BlendParameter                                        BlendParameters;                                   // 0x50(0x20)
	char                                                         pad0x40_WK7KK[0x40];                               // 0x70(0x40)
	struct InterpolationParameter                                InterpolationParam;                                // 0xb0(0x8)
	char                                                         pad0x10_94X1G[0x10];                               // 0xb8(0x10)
	float                                                        TargetWeightInterpolationSpeedPerSec;              // 0xc8(0x4)
	char                                                         NotifyTriggerMode;                                 // 0xcc(0x1)
	bool                                                         bRotationBlendInMeshSpace;                         // 0xcd(0x1)
	char                                                         pad0x2_DOE18[0x2];                                 // 0xce(0x2)
	int                                                          NumOfDimension;                                    // 0xd0(0x4)
	float                                                        AnimLength;                                        // 0xd4(0x4)
	TArray<struct PerBoneInterpolation>                          PerBoneBlend;                                      // 0xd8(0x10)
	TArray<struct BlendSample>                                   SampleData;                                        // 0xe8(0x10)
	TArray<struct EditorElement>                                 GridSamples;                                       // 0xf8(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionObjectRadius: public MaterialExpression
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionLightVector: public MaterialExpression
{
public:
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class NestedWorldComposition: public WorldComposition
{
public:
	char                                                         pad0x20_FF9RK[0x20];                               // 0xb8(0x20)
};


// Size 0x90 (Full Size[0x100] - InheritedSize[0x70]
class MaterialExpressionFunctionInput: public MaterialExpression
{
public:
	struct ExpressionInput                                       Preview;                                           // 0x70(0x38)
	struct FString                                               InputName;                                         // 0xa8(0x10)
	struct FString                                               Description;                                       // 0xb8(0x10)
	struct Guid                                                  Id;                                                // 0xc8(0x10)
	char                                                         InputType;                                         // 0xd8(0x1)
	char                                                         pad0x7_T6RQ3[0x7];                                 // 0xd9(0x7)
	struct Vector4                                               PreviewValue;                                      // 0xe0(0x10)
	bool                                                         bUsePreviewValueAsDefault;                         // 0xf0(0x1)
	char                                                         pad0x3_DXZHD[0x3];                                 // 0xf1(0x3)
	int                                                          SortPriority;                                      // 0xf4(0x4)
	bool                                                         bCompilingFunctionPreview;                         // 0xf8(0x1)
	char                                                         pad0x7_NLYA6[0x7];                                 // 0xf9(0x7)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleRotationRateBase: public ParticleModule
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class ActorWithComponentWithDerivedTestInterface: public Actor
{
public:
	class ComponentWithDerivedTestInterface*                     ComponentWithDerivedTestInterface;                 // 0x3a0(0x8)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleSpeed: public MaterialExpression
{
public:
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionSine: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	float                                                        Period;                                            // 0xa8(0x4)
	char                                                         pad0x4_6PBMR[0x4];                                 // 0xac(0x4)
};


// Size 0x0 (Full Size[0x210] - InheritedSize[0x210]
class LevelStreamingPersistent: public LevelStreaming
{
public:
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class MaterialExpressionLightmassReplace: public MaterialExpression
{
public:
	struct ExpressionInput                                       Realtime;                                          // 0x70(0x38)
	struct ExpressionInput                                       Lightmass;                                         // 0xa8(0x38)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InstancedActorDelegateBinding: public DynamicBlueprintBinding
{
public:
	TArray<struct BlueprintInstancedActorDelegateBinding>        ActorDelegateBindings;                             // 0x28(0x10)
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionMax: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	float                                                        ConstA;                                            // 0xe0(0x4)
	float                                                        ConstB;                                            // 0xe4(0x4)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionTwoSidedSign: public MaterialExpression
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InstancedNavMeshesDataAsset: public DataAsset
{
public:
	TArray<struct InstancedNavMesh>                              InstancedNavMeshes;                                // 0x28(0x10)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleSpawnBase: public ParticleModule
{
public:
	bool                                                         bProcessSpawnRate;                                 // 0x50(0x1)
	bool                                                         bProcessBurstList;                                 // 0x50(0x1)
	char                                                         pad0x7_KMDGC[0x7];                                 // 0x51(0x7)
};


// Size 0x90 (Full Size[0xc8] - InheritedSize[0x38]
class PhysicsSettings: public DeveloperSettings
{
public:
	float                                                        DefaultGravityZ;                                   // 0x38(0x4)
	float                                                        DefaultTerminalVelocity;                           // 0x3c(0x4)
	float                                                        DefaultFluidFriction;                              // 0x40(0x4)
	int                                                          SimulateScratchMemorySize;                         // 0x44(0x4)
	int                                                          RagdollAggregateThreshold;                         // 0x48(0x4)
	float                                                        TriangleMeshTriangleMinAreaThreshold;              // 0x4c(0x4)
	bool                                                         bEnableAsyncScene;                                 // 0x50(0x1)
	bool                                                         bEnableShapeSharing;                               // 0x51(0x1)
	bool                                                         bEnablePCM;                                        // 0x52(0x1)
	bool                                                         bWarnMissingLocks;                                 // 0x53(0x1)
	bool                                                         bEnable2DPhysics;                                  // 0x54(0x1)
	char                                                         LockedAxis;                                        // 0x55(0x1)
	char                                                         DefaultDegreesOfFreedom;                           // 0x56(0x1)
	char                                                         pad0x1_C8SPF[0x1];                                 // 0x57(0x1)
	float                                                        BounceThresholdVelocity;                           // 0x58(0x4)
	char                                                         FrictionCombineMode;                               // 0x5c(0x1)
	char                                                         RestitutionCombineMode;                            // 0x5d(0x1)
	char                                                         pad0x2_61W7Y[0x2];                                 // 0x5e(0x2)
	float                                                        MaxAngularVelocity;                                // 0x60(0x4)
	float                                                        MaxDepenetrationVelocity;                          // 0x64(0x4)
	bool                                                         bSimulateSkeletalMeshOnDedicatedServer;            // 0x68(0x1)
	bool                                                         bDefaultHasComplexCollision;                       // 0x69(0x1)
	char                                                         pad0x2_C2P7Y[0x2];                                 // 0x6a(0x2)
	float                                                        MaxPhysicsDeltaTime;                               // 0x6c(0x4)
	bool                                                         bSubstepping;                                      // 0x70(0x1)
	bool                                                         bSubsteppingAsync;                                 // 0x71(0x1)
	char                                                         pad0x2_MBSHA[0x2];                                 // 0x72(0x2)
	float                                                        MaxSubstepDeltaTime;                               // 0x74(0x4)
	int                                                          MaxSubsteps;                                       // 0x78(0x4)
	float                                                        SyncSceneSmoothingFactor;                          // 0x7c(0x4)
	float                                                        AsyncSceneSmoothingFactor;                         // 0x80(0x4)
	float                                                        InitialAverageFrameRate;                           // 0x84(0x4)
	TArray<struct PhysicalSurfaceName>                           PhysicalSurfaces;                                  // 0x88(0x10)
	TArray<struct DominanceGroupPair>                            DominanceGroups;                                   // 0x98(0x10)
	TArray<struct DominanceGroupName>                            DominanceGroupNames;                               // 0xa8(0x10)
	char                                                         DefaultStaticDominanceGroup;                       // 0xb8(0x1)
	char                                                         DefaultMovableDominanceGroup;                      // 0xb9(0x1)
	bool                                                         bEnableMBP;                                        // 0xba(0x1)
	char                                                         pad0x1_1D9R9[0x1];                                 // 0xbb(0x1)
	int                                                          MBPSubdivisions;                                   // 0xbc(0x4)
	float                                                        MBPWorldHalfExtentInCM;                            // 0xc0(0x4)
	char                                                         pad0x4_6QAV9[0x4];                                 // 0xc4(0x4)
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionSubtract: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	float                                                        ConstA;                                            // 0xe0(0x4)
	float                                                        ConstB;                                            // 0xe4(0x4)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class MorphTarget: public VertexAnimBase
{
public:
	char                                                         pad0x10_41ZTY[0x10];                               // 0x30(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class InterpGroupInstCamera: public InterpGroupInst
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetInputLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionDDY: public MaterialExpression
{
public:
	struct ExpressionInput                                       Value;                                             // 0x70(0x38)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class StreamingSettings: public DeveloperSettings
{
public:
	bool                                                         AsyncLoadingThreadEnabled;                         // 0x38(0x1)
	bool                                                         WarnIfTimeLimitExceeded;                           // 0x38(0x1)
	char                                                         pad0x3_RWRO6[0x3];                                 // 0x39(0x3)
	float                                                        TimeLimitExceededMultiplier;                       // 0x3c(0x4)
	float                                                        TimeLimitExceededMinTime;                          // 0x40(0x4)
	int                                                          MinBulkDataSizeForAsyncLoading;                    // 0x44(0x4)
	float                                                        AsyncIOBandwidthLimit;                             // 0x48(0x4)
	bool                                                         UseBackgroundLevelStreaming;                       // 0x4c(0x1)
	bool                                                         AsyncLoadingUseFullTimeLimit;                      // 0x4c(0x1)
	char                                                         pad0x3_RJUJQ[0x3];                                 // 0x4d(0x3)
	float                                                        AsyncLoadingTimeLimit;                             // 0x50(0x4)
	float                                                        PriorityAsyncLoadingExtraTime;                     // 0x54(0x4)
	float                                                        LevelStreamingActorsUpdateTimeLimit;               // 0x58(0x4)
	int                                                          LevelStreamingComponentsRegistrationGranularity;   // 0x5c(0x4)
};


// Size 0x58 (Full Size[0x198] - InheritedSize[0x140]
class TextureCube: public Texture
{
public:
	char                                                         pad0x58_U5ZA9[0x58];                               // 0x140(0x58)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleOrbitBase: public ParticleModule
{
public:
	bool                                                         bUseEmitterTime;                                   // 0x50(0x1)
	char                                                         pad0x7_0U59U[0x7];                                 // 0x51(0x7)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class DecalActor: public Actor
{
public:
	class DecalComponent*                                        Decal;                                             // 0x3a0(0x8)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionLogarithm2: public MaterialExpression
{
public:
	struct ExpressionInput                                       X;                                                 // 0x70(0x38)
};


// Size 0x48 (Full Size[0x80] - InheritedSize[0x38]
class AudioSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  DefaultSoundClassName;                             // 0x38(0x10)
	struct StringAssetReference                                  DefaultBaseSoundMix;                               // 0x48(0x10)
	struct StringAssetReference                                  VoiPSoundClass;                                    // 0x58(0x10)
	float                                                        LowPassFilterResonance;                            // 0x68(0x4)
	int                                                          MaximumConcurrentStreams;                          // 0x6c(0x4)
	TArray<struct AudioQualitySettings>                          QualityLevels;                                     // 0x70(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionScreenPosition: public MaterialExpression
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class SceneCapture: public Actor
{
public:
	class StaticMeshComponent*                                   MeshComp;                                          // 0x3a0(0x8)
};


// Size 0x138 (Full Size[0x170] - InheritedSize[0x38]
class SoundNodeEnveloper: public SoundNode
{
public:
	float                                                        LoopStart;                                         // 0x38(0x4)
	float                                                        LoopEnd;                                           // 0x3c(0x4)
	float                                                        DurationAfterLoop;                                 // 0x40(0x4)
	int                                                          LoopCount;                                         // 0x44(0x4)
	bool                                                         bLoopIndefinitely;                                 // 0x48(0x1)
	bool                                                         bLoop;                                             // 0x48(0x1)
	char                                                         pad0x7_GZXNX[0x7];                                 // 0x49(0x7)
	class DistributionFloatConstantCurve*                        VolumeInterpCurve;                                 // 0x50(0x8)
	class DistributionFloatConstantCurve*                        PitchInterpCurve;                                  // 0x58(0x8)
	struct RuntimeFloatCurve                                     VolumeCurve;                                       // 0x60(0x80)
	struct RuntimeFloatCurve                                     PitchCurve;                                        // 0xe0(0x80)
	float                                                        PitchMin;                                          // 0x160(0x4)
	float                                                        PitchMax;                                          // 0x164(0x4)
	float                                                        VolumeMin;                                         // 0x168(0x4)
	float                                                        VolumeMax;                                         // 0x16c(0x4)
};


// Size 0xf0 (Full Size[0x160] - InheritedSize[0x70]
class MaterialExpressionIfCondition: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	struct ExpressionInput                                       IfTrue;                                            // 0xe0(0x38)
	struct ExpressionInput                                       IfFalse;                                           // 0x118(0x38)
	char                                                         Condition;                                         // 0x150(0x1)
	char                                                         Attribute;                                         // 0x151(0x1)
	char                                                         pad0x2_BLQFW[0x2];                                 // 0x152(0x2)
	float                                                        ConstB;                                            // 0x154(0x4)
	float                                                        ConstIfTrue;                                       // 0x158(0x4)
	float                                                        ConstIfFalse;                                      // 0x15c(0x4)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticlePositionWS: public MaterialExpression
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class TriggerBase: public Actor
{
public:
	class ShapeComponent*                                        CollisionComponent;                                // 0x3a0(0x8)
	class BillboardComponent*                                    SpriteComponent;                                   // 0x3a8(0x8)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleCameraBase: public ParticleModule
{
public:
};


// Size 0x40 (Full Size[0xb0] - InheritedSize[0x70]
class MaterialExpressionTransform: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	char                                                         TransformSourceType;                               // 0xa8(0x1)
	char                                                         TransformType;                                     // 0xa9(0x1)
	char                                                         pad0x6_77684[0x6];                                 // 0xaa(0x6)
};


// Size 0x1c0 (Full Size[0x560] - InheritedSize[0x3a0]
class NavigationData: public Actor
{
public:
	class PrimitiveComponent*                                    RenderingComp;                                     // 0x3a0(0x8)
	struct NavDataConfig                                         NavDataConfig;                                     // 0x3a8(0x58)
	bool                                                         bEnableDrawing;                                    // 0x400(0x1)
	bool                                                         bRebuildAtRuntime;                                 // 0x400(0x1)
	char                                                         pad0x3_B5S79[0x3];                                 // 0x401(0x3)
	char                                                         RuntimeGeneration;                                 // 0x404(0x1)
	char                                                         pad0x3_N5V7M[0x3];                                 // 0x405(0x3)
	bool                                                         bForceRebuildOnLoad;                               // 0x408(0x1)
	char                                                         pad0x3_COWSW[0x3];                                 // 0x409(0x3)
	float                                                        ObservedPathsTickInterval;                         // 0x40c(0x4)
	char                                                         pad0xe8_EXDEO[0xe8];                               // 0x410(0xe8)
	TArray<struct SupportedAreaData>                             SupportedAreas;                                    // 0x4f8(0x10)
	char                                                         pad0x58_UREEP[0x58];                               // 0x508(0x58)
};


// Size 0x1890 (Full Size[0x1c30] - InheritedSize[0x3a0]
class PlayerCameraManager: public Actor
{
public:
	class PlayerController*                                      PCOwner;                                           // 0x3a0(0x8)
	class SceneComponent*                                        TransformComponent;                                // 0x3a8(0x8)
	char                                                         pad0x8_OZ43S[0x8];                                 // 0x3b0(0x8)
	float                                                        DefaultFOV;                                        // 0x3b8(0x4)
	char                                                         pad0x4_KO5JI[0x4];                                 // 0x3bc(0x4)
	float                                                        DefaultOrthoWidth;                                 // 0x3c0(0x4)
	char                                                         pad0x4_TTJ2O[0x4];                                 // 0x3c4(0x4)
	float                                                        DefaultAspectRatio;                                // 0x3c8(0x4)
	char                                                         pad0x44_KW9TB[0x44];                               // 0x3cc(0x44)
	struct CameraCacheEntry                                      CameraCache;                                       // 0x410(0x5b0)
	struct CameraCacheEntry                                      LastFrameCameraCache;                              // 0x9c0(0x5b0)
	struct TViewTarget                                           ViewTarget;                                        // 0xf70(0x5c0)
	struct TViewTarget                                           PendingViewTarget;                                 // 0x1530(0x5c0)
	char                                                         pad0x30_XAHSD[0x30];                               // 0x1af0(0x30)
	TArray<class CameraModifier*>                                ModifierList;                                      // 0x1b20(0x10)
	TArray<class Class*>                                         DefaultModifiers;                                  // 0x1b30(0x10)
	float                                                        FreeCamDistance;                                   // 0x1b40(0x4)
	struct Vector                                                FreeCamOffset;                                     // 0x1b44(0xc)
	struct Vector                                                ViewTargetOffset;                                  // 0x1b50(0xc)
	char                                                         pad0x14_3DJPW[0x14];                               // 0x1b5c(0x14)
	TArray<class EmitterCameraLensEffectBase*>                   CameraLensEffects;                                 // 0x1b70(0x10)
	class CameraModifier_CameraShake*                            CachedCameraShakeMod;                              // 0x1b80(0x8)
	class CameraAnimInst*                                        AnimInstPool;                                      // 0x1b88(0x8)
	char                                                         pad0x38_MNLY6[0x38];                               // 0x1b90(0x38)
	TArray<struct PostProcessSettings>                           PostProcessBlendCache;                             // 0x1bc8(0x10)
	char                                                         pad0x10_828LI[0x10];                               // 0x1bd8(0x10)
	TArray<class CameraAnimInst*>                                ActiveAnims;                                       // 0x1be8(0x10)
	TArray<class CameraAnimInst*>                                FreeAnims;                                         // 0x1bf8(0x10)
	class CameraActor*                                           AnimCameraActor;                                   // 0x1c08(0x8)
	bool                                                         bIsOrthographic;                                   // 0x1c10(0x1)
	bool                                                         bUseClientSideCameraUpdates;                       // 0x1c10(0x1)
	bool                                                         bFollowHmdOrientation;                             // 0x1c11(0x1)
	char                                                         pad0x2_ODZ9T[0x2];                                 // 0x1c12(0x2)
	float                                                        ViewPitchMin;                                      // 0x1c14(0x4)
	float                                                        ViewPitchMax;                                      // 0x1c18(0x4)
	float                                                        ViewYawMin;                                        // 0x1c1c(0x4)
	float                                                        ViewYawMax;                                        // 0x1c20(0x4)
	float                                                        ViewRollMin;                                       // 0x1c24(0x4)
	float                                                        ViewRollMax;                                       // 0x1c28(0x4)
	char                                                         pad0x4_E79DR[0x4];                                 // 0x1c2c(0x4)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class SplineMeshActor: public Actor
{
public:
	class SplineMeshComponent*                                   SplineMeshComponent;                               // 0x3a0(0x8)
};


// Size 0x80 (Full Size[0xf0] - InheritedSize[0x70]
class MaterialExpressionDesaturation: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
	struct ExpressionInput                                       Fraction;                                          // 0xa8(0x38)
	struct LinearColor                                           LuminanceFactors;                                  // 0xe0(0x10)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NetworkSettings: public DeveloperSettings
{
public:
	bool                                                         bVerifyPeer;                                       // 0x38(0x1)
	char                                                         pad0x7_W5QYX[0x7];                                 // 0x39(0x7)
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class MaterialExpressionDepthFade: public MaterialExpression
{
public:
	struct ExpressionInput                                       InOpacity;                                         // 0x70(0x38)
	struct ExpressionInput                                       FadeDistance;                                      // 0xa8(0x38)
	float                                                        OpacityDefault;                                    // 0xe0(0x4)
	float                                                        FadeDistanceDefault;                               // 0xe4(0x4)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class CalmWaterZone: public Actor
{
public:
	class CalmWaterComponent*                                    CalmWaterComponent;                                // 0x3a0(0x8)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleSize: public MaterialExpression
{
public:
};


// Size 0x8 (Full Size[0x148] - InheritedSize[0x140]
class TextureProxy: public Texture
{
public:
	class Texture*                                               Texture;                                           // 0x140(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SoundNodeAssetReferencer: public SoundNode
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InterpTrackInstDirector: public InterpTrackInst
{
public:
	class Actor*                                                 OldViewTarget;                                     // 0x28(0x8)
};


// Size 0x168 (Full Size[0x198] - InheritedSize[0x30]
class CurveVector: public CurveBase
{
public:
	struct RichCurve                                             FloatCurves;                                       // 0x30(0x78)
	char                                                         pad0xf0_X2H31[0xf0];                               // 0xa8(0xf0)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class SoundNodeConcatenator: public SoundNode
{
public:
	TArray<float>                                                InputVolume;                                       // 0x38(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class SoundNodeGroupControl: public SoundNode
{
public:
	TArray<int>                                                  GroupSizes;                                        // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KismetMaterialLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionFrac: public MaterialExpression
{
public:
	struct ExpressionInput                                       Input;                                             // 0x70(0x38)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleRotationBase: public ParticleModule
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionParticleColor: public MaterialExpression
{
public:
};


// Size 0x34648 (Full Size[0x34690] - InheritedSize[0x48]
class NetConnection: public Player
{
public:
	char                                                         pad0x8_5PNUQ[0x8];                                 // 0x48(0x8)
	TArray<class ChildConnection*>                               Children;                                          // 0x50(0x10)
	class NetDriver*                                             Driver;                                            // 0x60(0x8)
	class PackageMap*                                            PackageMap;                                        // 0x68(0x8)
	TArray<class Channel*>                                       OpenChannels;                                      // 0x70(0x10)
	TArray<class Actor*>                                         SentTemporaries;                                   // 0x80(0x10)
	class Actor*                                                 ViewTarget;                                        // 0x90(0x8)
	class Actor*                                                 OwningActor;                                       // 0x98(0x8)
	int                                                          MaxPacket;                                         // 0xa0(0x4)
	bool                                                         InternalAck;                                       // 0xa4(0x1)
	char                                                         pad0x2fb_KMCOA[0x2fb];                             // 0xa5(0x2fb)
	double                                                       LastReceiveTime;                                   // 0x3a0(0x8)
	char                                                         pad0x34120_1OP8G[0x34120];                         // 0x3a8(0x34120)
	TArray<class Actor*>                                         ConsideredActorsList;                              // 0x344c8(0x10)
	char                                                         pad0x10_WGY0I[0x10];                               // 0x344d8(0x10)
	int                                                          MaxDormantActorsCheckedFromRelevancy;              // 0x344e8(0x4)
	char                                                         pad0x64_YC2SS[0x64];                               // 0x344ec(0x64)
	TArray<class Channel*>                                       DeferredCloseChannels;                             // 0x34550(0x10)
	char                                                         pad0x130_T6TPM[0x130];                             // 0x34560(0x130)
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class MaterialExpressionConstant2Vector: public MaterialExpression
{
public:
	float                                                        R;                                                 // 0x70(0x4)
	float                                                        G;                                                 // 0x74(0x4)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class SoundNodeMixer: public SoundNode
{
public:
	TArray<float>                                                InputVolume;                                       // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StringArrayDataAsset: public DataAsset
{
public:
	TArray<String>                                               Array;                                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class MaterialExpressionObjectBounds: public MaterialExpression
{
public:
};


// Size 0x570 (Full Size[0x910] - InheritedSize[0x3a0]
class CameraActor: public Actor
{
public:
	char                                                         AutoActivateForPlayer;                             // 0x3a0(0x1)
	char                                                         pad0x7_3219N[0x7];                                 // 0x3a1(0x7)
	class CameraComponent*                                       CameraComponent;                                   // 0x3a8(0x8)
	char                                                         pad0x8_EMWC6[0x8];                                 // 0x3b0(0x8)
	bool                                                         bConstrainAspectRatio;                             // 0x3b8(0x1)
	char                                                         pad0x3_84N41[0x3];                                 // 0x3b9(0x3)
	float                                                        AspectRatio;                                       // 0x3bc(0x4)
	float                                                        FOVAngle;                                          // 0x3c0(0x4)
	float                                                        PostProcessBlendWeight;                            // 0x3c4(0x4)
	char                                                         pad0x8_YZJPL[0x8];                                 // 0x3c8(0x8)
	struct PostProcessSettings                                   PostProcessSettings;                               // 0x3d0(0x540)
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class PluginCommandlet: public Commandlet
{
public:
	char                                                         pad0x20_E24EJ[0x20];                               // 0x80(0x20)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class NavArea_Obstacle: public NavArea
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class MaterialInstanceActor: public Actor
{
public:
	TArray<class Actor*>                                         TargetActors;                                      // 0x3a0(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class InterpGroupInstDirector: public InterpGroupInst
{
public:
};


// Size 0x58 (Full Size[0xc8] - InheritedSize[0x70]
class InterpTrackMove: public InterpTrack
{
public:
	struct InterpCurveVector                                     PosTrack;                                          // 0x70(0x18)
	struct InterpCurveVector                                     EulerTrack;                                        // 0x88(0x18)
	struct InterpLookupTrack                                     LookupTrack;                                       // 0xa0(0x10)
	struct FName                                                 LookAtGroupName;                                   // 0xb0(0x8)
	float                                                        LinCurveTension;                                   // 0xb8(0x4)
	float                                                        AngCurveTension;                                   // 0xbc(0x4)
	bool                                                         bUseQuatInterpolation;                             // 0xc0(0x1)
	bool                                                         bShowArrowAtKeys;                                  // 0xc0(0x1)
	bool                                                         bDisableMovement;                                  // 0xc0(0x1)
	bool                                                         bShowTranslationOnCurveEd;                         // 0xc0(0x1)
	bool                                                         bShowRotationOnCurveEd;                            // 0xc0(0x1)
	bool                                                         bHide3DTrack;                                      // 0xc0(0x1)
	char                                                         pad0x3_P9F0A[0x3];                                 // 0xc1(0x3)
	char                                                         RotMode;                                           // 0xc4(0x1)
	char                                                         pad0x3_NIOVT[0x3];                                 // 0xc5(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InterpTrackInstFade: public InterpTrackInst
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class ParticleModuleKillBase: public ParticleModule
{
public:
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class MaterialExpressionStaticBool: public MaterialExpression
{
public:
	bool                                                         Value;                                             // 0x70(0x1)
	char                                                         pad0x7_5MCQ4[0x7];                                 // 0x71(0x7)
};


// Size 0x68 (Full Size[0x290] - InheritedSize[0x228]
class AnimBlueprintGeneratedClass: public BlueprintGeneratedClass
{
public:
	TArray<struct BakedAnimationStateMachine>                    BakedStateMachines;                                // 0x228(0x10)
	class Skeleton*                                              TargetSkeleton;                                    // 0x238(0x8)
	TArray<struct AnimNotifyEvent>                               AnimNotifies;                                      // 0x240(0x10)
	int                                                          RootAnimNodeIndex;                                 // 0x250(0x4)
	char                                                         pad0x1c_JKBRJ[0x1c];                               // 0x254(0x1c)
	TArray<struct AnimGroupInfo>                                 Groups;                                            // 0x270(0x10)
	TArray<struct Name>                                          SkeletonSlotNames;                                 // 0x280(0x10)
};


// Size 0x128 (Full Size[0x198] - InheritedSize[0x70]
class MaterialExpressionIf: public MaterialExpression
{
public:
	struct ExpressionInput                                       A;                                                 // 0x70(0x38)
	struct ExpressionInput                                       B;                                                 // 0xa8(0x38)
	struct ExpressionInput                                       AGreaterThanB;                                     // 0xe0(0x38)
	struct ExpressionInput                                       AEqualsB;                                          // 0x118(0x38)
	struct ExpressionInput                                       ALessThanB;                                        // 0x150(0x38)
	float                                                        EqualsThreshold;                                   // 0x188(0x4)
	float                                                        ConstB;                                            // 0x18c(0x4)
	float                                                        ConstAEqualsB;                                     // 0x190(0x4)
	char                                                         pad0x4_I7CQB[0x4];                                 // 0x194(0x4)
};


// Size 0x158 (Full Size[0x1a8] - InheritedSize[0x50]
class ParticleModuleBeamNoise: public ParticleModuleBeamBase
{
public:
	bool                                                         bLowFreq_Enabled;                                  // 0x50(0x1)
	char                                                         pad0x3_UDGNE[0x3];                                 // 0x51(0x3)
	int                                                          Frequency;                                         // 0x54(0x4)
	int                                                          Frequency_LowRange;                                // 0x58(0x4)
	char                                                         pad0x4_DSDAI[0x4];                                 // 0x5c(0x4)
	struct RawDistributionVector                                 NoiseRange;                                        // 0x60(0x38)
	struct RawDistributionFloat                                  NoiseRangeScale;                                   // 0x98(0x38)
	bool                                                         bNRScaleEmitterTime;                               // 0xd0(0x1)
	char                                                         pad0x7_MV2TP[0x7];                                 // 0xd1(0x7)
	struct RawDistributionVector                                 NoiseSpeed;                                        // 0xd8(0x38)
	bool                                                         bSmooth;                                           // 0x110(0x1)
	char                                                         pad0x3_AJ5SE[0x3];                                 // 0x111(0x3)
	float                                                        NoiseLockRadius;                                   // 0x114(0x4)
	bool                                                         bNoiseLock;                                        // 0x118(0x1)
	bool                                                         bOscillate;                                        // 0x118(0x1)
	char                                                         pad0x3_PHU6P[0x3];                                 // 0x119(0x3)
	float                                                        NoiseLockTime;                                     // 0x11c(0x4)
	float                                                        NoiseTension;                                      // 0x120(0x4)
	bool                                                         bUseNoiseTangents;                                 // 0x124(0x1)
	char                                                         pad0x3_KAHJW[0x3];                                 // 0x125(0x3)
	struct RawDistributionFloat                                  NoiseTangentStrength;                              // 0x128(0x38)
	int                                                          NoiseTessellation;                                 // 0x160(0x4)
	bool                                                         bTargetNoise;                                      // 0x164(0x1)
	char                                                         pad0x3_8BJE4[0x3];                                 // 0x165(0x3)
	float                                                        FrequencyDistance;                                 // 0x168(0x4)
	bool                                                         bApplyNoiseScale;                                  // 0x16c(0x1)
	char                                                         pad0x3_JSWJH[0x3];                                 // 0x16d(0x3)
	struct RawDistributionFloat                                  NoiseScale;                                        // 0x170(0x38)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleKillOnFFTWater: public ParticleModuleKillBase
{
public:
	char                                                         FFTWaterKillPointLocation;                         // 0x50(0x1)
	char                                                         pad0x3_2FRJ8[0x3];                                 // 0x51(0x3)
	bool                                                         bUseGroupAFFTWaterKillPointForAllGroups;           // 0x54(0x1)
	char                                                         pad0x3_35D59[0x3];                                 // 0x55(0x3)
	char                                                         AdditionalFFTWaterKillPointLocations;              // 0x58(0x1)
	char                                                         pad0x7_FHP19[0x7];                                 // 0x59(0x7)
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class InterpTrackFloatMaterialParam: public InterpTrackFloatBase
{
public:
	TArray<class MaterialInterface*>                             TargetMaterials;                                   // 0x90(0x10)
	struct FName                                                 ParamName;                                         // 0xa0(0x8)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class InterpTrackLinearColorProp: public InterpTrackLinearColorBase
{
public:
	struct FName                                                 PropertyName;                                      // 0x90(0x8)
};


// Size 0x128 (Full Size[0x178] - InheritedSize[0x50]
class ParticleModuleLocation: public ParticleModuleLocationBase
{
public:
	struct RawDistributionVector                                 StartLocation;                                     // 0x50(0x38)
	struct RawDistributionVector                                 AdditionalStartLocations;                          // 0x88(0x38)
	char                                                         pad0xa8_M4ENU[0xa8];                               // 0xc0(0xa8)
	bool                                                         StartLocationUseGroupAForAll;                      // 0x168(0x1)
	char                                                         pad0x3_BCDHT[0x3];                                 // 0x169(0x3)
	float                                                        DistributeOverNPoints;                             // 0x16c(0x4)
	float                                                        DistributeThreshold;                               // 0x170(0x4)
	char                                                         pad0x4_81Q25[0x4];                                 // 0x174(0x4)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class InterpTrackInstLinearColorProp: public InterpTrackInstProperty
{
public:
	char                                                         pad0x8_1KRRZ[0x8];                                 // 0x38(0x8)
	struct LinearColor                                           ResetColor;                                        // 0x40(0x10)
};


// Size 0x88 (Full Size[0xe0] - InheritedSize[0x58]
class ParticleModuleVelocityConeEmitterPoint: public ParticleModuleVelocityBase
{
public:
	struct RawDistributionFloat                                  Angle;                                             // 0x58(0x38)
	struct RawDistributionFloat                                  VelocityScale;                                     // 0x90(0x38)
	float                                                        VelocityNPointsRandomness;                         // 0xcc(0x4)
	struct Vector                                                AdditiveVelocity;                                  // 0xd0(0xc)
	char                                                         pad0x4_78B34[0x4];                                 // 0xdc(0x4)
};


// Size 0x38 (Full Size[0x90] - InheritedSize[0x58]
class ParticleModuleEmitterPointVelocity: public ParticleModuleVelocityBase
{
public:
	struct RawDistributionFloat                                  VelocityScale;                                     // 0x58(0x38)
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class PhysicsSpringComponent: public SceneComponent
{
public:
	float                                                        SpringStiffness;                                   // 0x2d0(0x4)
	float                                                        SpringDamping;                                     // 0x2d4(0x4)
	float                                                        SpringLengthAtRest;                                // 0x2d8(0x4)
	float                                                        SpringRadius;                                      // 0x2dc(0x4)
	char                                                         SpringChannel;                                     // 0x2e0(0x1)
	bool                                                         bIgnoreSelf;                                       // 0x2e1(0x1)
	char                                                         pad0x2_HFPLK[0x2];                                 // 0x2e2(0x2)
	float                                                        SpringCompression;                                 // 0x2e4(0x4)
	char                                                         pad0x18_UFRSQ[0x18];                               // 0x2e8(0x18)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleSizeScaleBySpeed: public ParticleModuleSizeBase
{
public:
	struct Vector2D                                              SpeedScale;                                        // 0x50(0x8)
	struct Vector2D                                              MaxScale;                                          // 0x58(0x8)
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class AnimCompositeBase: public AnimSequenceBase
{
public:
};


// Size 0x8 (Full Size[0x1c0] - InheritedSize[0x1b8]
class MaterialInstanceDynamic: public MaterialInstance
{
public:
	class MaterialInstanceDynamic*                               DynamicShadowMaterial;                             // 0x1b8(0x8)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleOrientationAxisLock: public ParticleModuleOrientationBase
{
public:
	char                                                         LockAxisFlags;                                     // 0x50(0x1)
	char                                                         pad0x3_YW168[0x3];                                 // 0x51(0x3)
	bool                                                         bLockToOwnerAxis;                                  // 0x54(0x1)
	char                                                         pad0x3_QQMYK[0x3];                                 // 0x55(0x3)
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class DecalComponent: public SceneComponent
{
public:
	class MaterialInterface*                                     DecalMaterial;                                     // 0x2d0(0x8)
	int                                                          SortOrder;                                         // 0x2d8(0x4)
	float                                                        FadeScreenSize;                                    // 0x2dc(0x4)
	class MaterialInstanceDynamic*                               MaterialInstanceDynamic;                           // 0x2e0(0x8)
	char                                                         pad0x18_KOA40[0x18];                               // 0x2e8(0x18)
};


// Size 0x50 (Full Size[0xa8] - InheritedSize[0x58]
class ParticleModuleSpawnPerUnit: public ParticleModuleSpawnBase
{
public:
	bool                                                         bAffectsGroupA;                                    // 0x58(0x1)
	bool                                                         bAffectsGroupB;                                    // 0x58(0x1)
	bool                                                         bAffectsGroupC;                                    // 0x58(0x1)
	bool                                                         bAffectsGroupD;                                    // 0x58(0x1)
	bool                                                         bAffectsGroupE;                                    // 0x58(0x1)
	bool                                                         bAffectsReplacementGroup;                          // 0x58(0x1)
	char                                                         pad0x3_KWZGR[0x3];                                 // 0x59(0x3)
	float                                                        UnitScalar;                                        // 0x5c(0x4)
	struct RawDistributionFloat                                  SpawnPerUnit;                                      // 0x60(0x38)
	bool                                                         bIgnoreSpawnRateWhenMoving;                        // 0x98(0x1)
	char                                                         pad0x3_IP016[0x3];                                 // 0x99(0x3)
	float                                                        MovementTolerance;                                 // 0x9c(0x4)
	float                                                        MaxFrameDistance;                                  // 0xa0(0x4)
	bool                                                         bIgnoreMovementAlongX;                             // 0xa4(0x1)
	bool                                                         bIgnoreMovementAlongY;                             // 0xa4(0x1)
	bool                                                         bIgnoreMovementAlongZ;                             // 0xa4(0x1)
	char                                                         pad0x3_8L7Q1[0x3];                                 // 0xa5(0x3)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleVectorFieldGlobal: public ParticleModuleVectorFieldBase
{
public:
	bool                                                         bOverrideGlobalVectorFieldTightness;               // 0x50(0x1)
	char                                                         pad0x3_BXK16[0x3];                                 // 0x51(0x3)
	float                                                        GlobalVectorFieldScale;                            // 0x54(0x4)
	float                                                        GlobalVectorFieldTightness;                        // 0x58(0x4)
	char                                                         pad0x4_WTSYF[0x4];                                 // 0x5c(0x4)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleEventReceiverBase: public ParticleModuleEventBase
{
public:
	char                                                         EventGeneratorType;                                // 0x50(0x1)
	char                                                         pad0x3_T7MHU[0x3];                                 // 0x51(0x3)
	struct FName                                                 EventName;                                         // 0x54(0x8)
	char                                                         pad0x4_2CST8[0x4];                                 // 0x5c(0x4)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class SoundNodeWavePlayer: public SoundNodeAssetReferencer
{
public:
	char                                                         pad0x20_4GJZ9[0x20];                               // 0x38(0x20)
	class SoundWave*                                             SoundWave;                                         // 0x58(0x8)
	bool                                                         bLooping;                                          // 0x60(0x1)
	char                                                         pad0x7_X9WQF[0x7];                                 // 0x61(0x7)
};


// Size 0x8 (Full Size[0x3b0] - InheritedSize[0x3a8]
class SpotLight: public Light
{
public:
	class SpotLightComponent*                                    SpotLightComponent;                                // 0x3a8(0x8)
};


// Size 0x20 (Full Size[0x168] - InheritedSize[0x148]
class TextureRenderTargetCube: public TextureRenderTarget
{
public:
	int                                                          SizeX;                                             // 0x148(0x4)
	struct LinearColor                                           ClearColor;                                        // 0x14c(0x10)
	char                                                         OverrideFormat;                                    // 0x15c(0x1)
	char                                                         pad0x3_SRT4R[0x3];                                 // 0x15d(0x3)
	bool                                                         bHDR;                                              // 0x160(0x1)
	bool                                                         bForceLinearGamma;                                 // 0x160(0x1)
	char                                                         pad0x7_MDFE0[0x7];                                 // 0x161(0x7)
};


// Size 0x38 (Full Size[0x88] - InheritedSize[0x50]
class ParticleModuleSourceMovement: public ParticleModuleLocationBase
{
public:
	struct RawDistributionVector                                 SourceMovementScale;                               // 0x50(0x38)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class DistributionFloatConstantCurve: public DistributionFloat
{
public:
	struct InterpCurveFloat                                      ConstantCurve;                                     // 0x38(0x18)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleMeshRotationRateOverLife: public ParticleModuleRotationRateBase
{
public:
	struct RawDistributionVector                                 RotRate;                                           // 0x50(0x38)
	bool                                                         bScaleRotRate;                                     // 0x88(0x1)
	char                                                         pad0x7_V0OIM[0x7];                                 // 0x89(0x7)
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class InterpTrackVectorMaterialParam: public InterpTrackVectorBase
{
public:
	TArray<class MaterialInterface*>                             TargetMaterials;                                   // 0x90(0x10)
	struct FName                                                 ParamName;                                         // 0xa0(0x8)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleVectorFieldRotationRate: public ParticleModuleVectorFieldBase
{
public:
	struct Vector                                                RotationRate;                                      // 0x50(0xc)
	char                                                         pad0x4_TUS6D[0x4];                                 // 0x5c(0x4)
};


// Size 0x38 (Full Size[0x428] - InheritedSize[0x3f0]
class EmitterCameraLensEffectBase: public Emitter
{
public:
	class ParticleSystem*                                        PS_CameraEffect;                                   // 0x3f0(0x8)
	class ParticleSystem*                                        PS_CameraEffectNonExtremeContent;                  // 0x3f8(0x8)
	float                                                        BaseFOV;                                           // 0x400(0x4)
	float                                                        DistFromCamera;                                    // 0x404(0x4)
	bool                                                         bAllowMultipleInstances;                           // 0x408(0x1)
	char                                                         pad0x7_WVI9M[0x7];                                 // 0x409(0x7)
	TArray<class Class*>                                         EmittersToTreatAsSame;                             // 0x410(0x10)
	class PlayerCameraManager*                                   BaseCamera;                                        // 0x420(0x8)
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class MaterialExpressionFontSampleParameter: public MaterialExpressionFontSample
{
public:
	struct FName                                                 ParameterName;                                     // 0x80(0x8)
	struct Guid                                                  ExpressionGUID;                                    // 0x88(0x10)
	struct FName                                                 Group;                                             // 0x98(0x8)
};


// Size 0x80 (Full Size[0xc0] - InheritedSize[0x40]
class NavAreaMeta_SwitchByAgent: public NavAreaMeta
{
public:
	class UClass*                                                Agent0Area;                                        // 0x40(0x8)
	class UClass*                                                Agent1Area;                                        // 0x48(0x8)
	class UClass*                                                Agent2Area;                                        // 0x50(0x8)
	class UClass*                                                Agent3Area;                                        // 0x58(0x8)
	class UClass*                                                Agent4Area;                                        // 0x60(0x8)
	class UClass*                                                Agent5Area;                                        // 0x68(0x8)
	class UClass*                                                Agent6Area;                                        // 0x70(0x8)
	class UClass*                                                Agent7Area;                                        // 0x78(0x8)
	class UClass*                                                Agent8Area;                                        // 0x80(0x8)
	class UClass*                                                Agent9Area;                                        // 0x88(0x8)
	class UClass*                                                Agent10Area;                                       // 0x90(0x8)
	class UClass*                                                Agent11Area;                                       // 0x98(0x8)
	class UClass*                                                Agent12Area;                                       // 0xa0(0x8)
	class UClass*                                                Agent13Area;                                       // 0xa8(0x8)
	class UClass*                                                Agent14Area;                                       // 0xb0(0x8)
	class UClass*                                                Agent15Area;                                       // 0xb8(0x8)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleRotationOverLifetime: public ParticleModuleRotationBase
{
public:
	struct RawDistributionFloat                                  RotationOverLife;                                  // 0x50(0x38)
	bool                                                         Scale;                                             // 0x88(0x1)
	char                                                         pad0x7_1MAHK[0x7];                                 // 0x89(0x7)
};


// Size 0x0 (Full Size[0x3a8] - InheritedSize[0x3a8]
class BoxReflectionCapture: public ReflectionCapture
{
public:
};


// Size 0x90 (Full Size[0x360] - InheritedSize[0x2d0]
class ReflectionCaptureComponent: public SceneComponent
{
public:
	bool                                                         bLockSettings;                                     // 0x2d0(0x1)
	char                                                         pad0x3_ISTYL[0x3];                                 // 0x2d1(0x3)
	float                                                        Brightness;                                        // 0x2d4(0x4)
	float                                                        ShadowBrightness;                                  // 0x2d8(0x4)
	float                                                        LPVOcclusionBrightness;                            // 0x2dc(0x4)
	struct LinearColor                                           ReflectionTint;                                    // 0x2e0(0x10)
	char                                                         pad0xc_F3Y3S[0xc];                                 // 0x2f0(0xc)
	struct Guid                                                  StateId;                                           // 0x2fc(0x10)
	char                                                         pad0x54_52SMK[0x54];                               // 0x30c(0x54)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class GameSession: public Info
{
public:
	int                                                          MaxSpectators;                                     // 0x3a0(0x4)
	int                                                          MaxPlayers;                                        // 0x3a4(0x4)
	char                                                         MaxSplitscreensPerConnection;                      // 0x3a8(0x1)
	bool                                                         bRequiresPushToTalk;                               // 0x3a9(0x1)
	char                                                         pad0x2_LS2K5[0x2];                                 // 0x3aa(0x2)
	struct FName                                                 SessionName;                                       // 0x3ac(0x8)
	char                                                         pad0x1c_IVK2F[0x1c];                               // 0x3b4(0x1c)
};


// Size 0x38 (Full Size[0x88] - InheritedSize[0x50]
class ParticleModuleSizeOverVelocity: public ParticleModuleSizeBase
{
public:
	struct RawDistributionFloat                                  SizeMultiplier;                                    // 0x50(0x38)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class InterpTrackInstBoolProp: public InterpTrackInstProperty
{
public:
	char                                                         pad0x8_JL35G[0x8];                                 // 0x38(0x8)
	class BoolProperty*                                          BoolProperty;                                      // 0x40(0x8)
	bool                                                         ResetBool;                                         // 0x48(0x1)
	char                                                         pad0x7_3SM1C[0x7];                                 // 0x49(0x7)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleKillHeight: public ParticleModuleKillBase
{
public:
	struct RawDistributionFloat                                  Height;                                            // 0x50(0x38)
	bool                                                         bAbsolute;                                         // 0x88(0x1)
	bool                                                         bFloor;                                            // 0x88(0x1)
	bool                                                         bApplyPSysScale;                                   // 0x88(0x1)
	char                                                         pad0x7_5442P[0x7];                                 // 0x89(0x7)
};


// Size 0x8 (Full Size[0x3b0] - InheritedSize[0x3a8]
class SphereReflectionCapture: public ReflectionCapture
{
public:
	class DrawSphereComponent*                                   DrawCaptureRadius;                                 // 0x3a8(0x8)
};


// Size 0x48 (Full Size[0x148] - InheritedSize[0x100]
class NavMovementComponent: public MovementComponent
{
public:
	struct NavAgentProperties                                    NavAgentProps;                                     // 0x100(0x30)
	bool                                                         bUpdateNavAgentWithOwnersCollision;                // 0x130(0x1)
	char                                                         pad0x3_AAWWM[0x3];                                 // 0x131(0x3)
	struct MovementProperties                                    MovementState;                                     // 0x134(0x4)
	char                                                         pad0x8_RONRU[0x8];                                 // 0x138(0x8)
	bool                                                         UseDefaultNavWalkingSearchRadiusScale;             // 0x140(0x1)
	bool                                                         UseDefaultNavWalkingSearchHeightScale;             // 0x141(0x1)
	char                                                         pad0x6_L50ED[0x6];                                 // 0x142(0x6)
};


// Size 0xb0 (Full Size[0x610] - InheritedSize[0x560]
class RecastNavMesh: public NavigationData
{
public:
	bool                                                         bDrawTriangleEdges;                                // 0x560(0x1)
	bool                                                         bDrawPolyEdges;                                    // 0x560(0x1)
	bool                                                         bDrawFilledPolys;                                  // 0x560(0x1)
	bool                                                         bDrawNavMeshEdges;                                 // 0x560(0x1)
	bool                                                         bDrawTileBounds;                                   // 0x560(0x1)
	bool                                                         bDrawPathCollidingGeometry;                        // 0x560(0x1)
	bool                                                         bDrawTileLabels;                                   // 0x560(0x1)
	bool                                                         bDrawPolygonLabels;                                // 0x560(0x1)
	bool                                                         bDrawDefaultPolygonCost;                           // 0x561(0x1)
	bool                                                         bDrawLabelsOnPathNodes;                            // 0x561(0x1)
	bool                                                         bDrawNavLinks;                                     // 0x561(0x1)
	bool                                                         bDrawFailedNavLinks;                               // 0x561(0x1)
	bool                                                         bDrawClusters;                                     // 0x561(0x1)
	bool                                                         bDrawOctree;                                       // 0x561(0x1)
	bool                                                         bDistinctlyDrawTilesBeingBuilt;                    // 0x561(0x1)
	bool                                                         bDrawNavMesh;                                      // 0x561(0x1)
	char                                                         pad0x2_CBSRM[0x2];                                 // 0x562(0x2)
	float                                                        DrawOffset;                                        // 0x564(0x4)
	float                                                        BuiltTileSizeUU;                                   // 0x568(0x4)
	float                                                        BuiltCellSize;                                     // 0x56c(0x4)
	bool                                                         bFixedTilePoolSize;                                // 0x570(0x1)
	char                                                         pad0x3_BGSK0[0x3];                                 // 0x571(0x3)
	int                                                          TilePoolSize;                                      // 0x574(0x4)
	float                                                        TileSizeUU;                                        // 0x578(0x4)
	float                                                        CellSize;                                          // 0x57c(0x4)
	float                                                        CellHeight;                                        // 0x580(0x4)
	float                                                        AgentRadius;                                       // 0x584(0x4)
	float                                                        AgentHeight;                                       // 0x588(0x4)
	float                                                        AgentMaxHeight;                                    // 0x58c(0x4)
	float                                                        AgentMaxSlope;                                     // 0x590(0x4)
	float                                                        AgentMaxStepHeight;                                // 0x594(0x4)
	float                                                        MinRegionArea;                                     // 0x598(0x4)
	float                                                        MergeRegionSize;                                   // 0x59c(0x4)
	float                                                        MaxSimplificationError;                            // 0x5a0(0x4)
	int                                                          MaxSimultaneousTileGenerationJobsCount;            // 0x5a4(0x4)
	int                                                          TileNumberHardLimit;                               // 0x5a8(0x4)
	int                                                          PolyRefTileBits;                                   // 0x5ac(0x4)
	int                                                          PolyRefNavPolyBits;                                // 0x5b0(0x4)
	int                                                          PolyRefSaltBits;                                   // 0x5b4(0x4)
	float                                                        DefaultDrawDistance;                               // 0x5b8(0x4)
	float                                                        DefaultMaxSearchNodes;                             // 0x5bc(0x4)
	float                                                        DefaultMaxHierarchicalSearchNodes;                 // 0x5c0(0x4)
	char                                                         RegionPartitioning;                                // 0x5c4(0x1)
	char                                                         LayerPartitioning;                                 // 0x5c5(0x1)
	char                                                         pad0x2_GW82X[0x2];                                 // 0x5c6(0x2)
	int                                                          RegionChunkSplits;                                 // 0x5c8(0x4)
	int                                                          LayerChunkSplits;                                  // 0x5cc(0x4)
	bool                                                         bSortNavigationAreasByCost;                        // 0x5d0(0x1)
	bool                                                         bPerformVoxelFiltering;                            // 0x5d0(0x1)
	bool                                                         bMarkLowHeightAreas;                               // 0x5d0(0x1)
	bool                                                         bDoFullyAsyncNavDataGathering;                     // 0x5d0(0x1)
	bool                                                         bUseBetterOffsetsFromCorners;                      // 0x5d0(0x1)
	bool                                                         bUseVirtualFilters;                                // 0x5d0(0x1)
	bool                                                         bUseVoxelCache;                                    // 0x5d0(0x1)
	char                                                         pad0x3_U5RRP[0x3];                                 // 0x5d1(0x3)
	float                                                        TileSetUpdateInterval;                             // 0x5d4(0x4)
	float                                                        HeuristicScale;                                    // 0x5d8(0x4)
	float                                                        VerticalDeviationFromGroundCompensation;           // 0x5dc(0x4)
	char                                                         pad0x30_52JBX[0x30];                               // 0x5e0(0x30)
};


// Size 0x0 (Full Size[0x3a8] - InheritedSize[0x3a8]
class DirectionalLight: public Light
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class RadialForceActor: public RigidBodyBase
{
public:
	class RadialForceComponent*                                  ForceComponent;                                    // 0x3a0(0x8)
};


// Size 0x1b0 (Full Size[0x480] - InheritedSize[0x2d0]
class PhysicsConstraintComponent: public SceneComponent
{
public:
	class Actor*                                                 ConstraintActor1;                                  // 0x2d0(0x8)
	struct ConstrainComponentPropName                            ComponentName1;                                    // 0x2d8(0x8)
	class Actor*                                                 ConstraintActor2;                                  // 0x2e0(0x8)
	struct ConstrainComponentPropName                            ComponentName2;                                    // 0x2e8(0x8)
	char                                                         pad0x10_5LR5O[0x10];                               // 0x2f0(0x10)
	class PhysicsConstraintTemplate*                             ConstraintSetup;                                   // 0x300(0x8)
	struct ConstraintInstance                                    ConstraintInstance;                                // 0x320(0x160)
};


// Size 0xc0 (Full Size[0x110] - InheritedSize[0x50]
class ParticleModuleBeamModifier: public ParticleModuleBeamBase
{
public:
	char                                                         ModifierType;                                      // 0x50(0x1)
	char                                                         pad0x3_Z92CO[0x3];                                 // 0x51(0x3)
	struct BeamModifierOptions                                   PositionOptions;                                   // 0x54(0x4)
	struct RawDistributionVector                                 Position;                                          // 0x58(0x38)
	struct BeamModifierOptions                                   TangentOptions;                                    // 0x90(0x4)
	char                                                         pad0x4_MRL3X[0x4];                                 // 0x94(0x4)
	struct RawDistributionVector                                 Tangent;                                           // 0x98(0x38)
	bool                                                         bAbsoluteTangent;                                  // 0xd0(0x1)
	char                                                         pad0x3_4H0CU[0x3];                                 // 0xd1(0x3)
	struct BeamModifierOptions                                   StrengthOptions;                                   // 0xd4(0x4)
	struct RawDistributionFloat                                  Strength;                                          // 0xd8(0x38)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class DistributionFloatUniformCurve: public DistributionFloat
{
public:
	struct InterpCurveVector2D                                   ConstantCurve;                                     // 0x38(0x18)
};


// Size 0x220 (Full Size[0x278] - InheritedSize[0x58]
class ParticleModuleSpawn: public ParticleModuleSpawnBase
{
public:
	struct RawDistributionFloat                                  Rate;                                              // 0x58(0x38)
	struct RawDistributionFloat                                  AdditionalRates;                                   // 0x90(0x38)
	char                                                         pad0xe0_FWIFK[0xe0];                               // 0xc8(0xe0)
	float                                                        StartScaleDistance;                                // 0x1a8(0x4)
	float                                                        EndScaleDistance;                                  // 0x1ac(0x4)
	struct RawDistributionFloat                                  RateScaleOverDistance;                             // 0x1b0(0x38)
	struct RawDistributionFloat                                  RateScale;                                         // 0x1e8(0x38)
	char                                                         ParticleBurstMethod;                               // 0x220(0x1)
	char                                                         pad0x7_G4CIX[0x7];                                 // 0x221(0x7)
	TArray<struct ParticleBurst>                                 BurstList;                                         // 0x228(0x10)
	struct RawDistributionFloat                                  BurstScale;                                        // 0x238(0x38)
	bool                                                         bApplyGlobalSpawnRateScale;                        // 0x270(0x1)
	bool                                                         bBurstTreatedAsLoopingForLODs;                     // 0x270(0x1)
	char                                                         pad0x7_BQVFH[0x7];                                 // 0x271(0x7)
};


// Size 0x18 (Full Size[0x230] - InheritedSize[0x218]
class SoundWaveProcedural: public SoundWave
{
public:
	char                                                         pad0x18_S07XZ[0x18];                               // 0x218(0x18)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class InterpTrackColorScale: public InterpTrackVectorBase
{
public:
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class InterpTrackFloatAnimBPParam: public InterpTrackFloatBase
{
public:
	class UClass*                                                AnimBlueprintClass;                                // 0x90(0x8)
	struct FName                                                 ParamName;                                         // 0x98(0x8)
	char                                                         pad0x8_YC2VP[0x8];                                 // 0xa0(0x8)
};


// Size 0x10 (Full Size[0x2e0] - InheritedSize[0x2d0]
class BasisComponent: public SceneComponent
{
public:
	char                                                         pad0x10_68JZB[0x10];                               // 0x2d0(0x10)
};


// Size 0x20 (Full Size[0x108] - InheritedSize[0xe8]
class NavModifierComponent: public NavRelevantComponent
{
public:
	class UClass*                                                AreaClass;                                         // 0xe8(0x8)
	struct Vector                                                FailsafeExtent;                                    // 0xf0(0xc)
	char                                                         pad0xc_JV4XW[0xc];                                 // 0xfc(0xc)
};


// Size 0x70 (Full Size[0xc0] - InheritedSize[0x50]
class ParticleModuleTypeDataMesh: public ParticleModuleTypeDataBase
{
public:
	class StaticMesh*                                            Mesh;                                              // 0x50(0x8)
	bool                                                         CastShadows;                                       // 0x58(0x1)
	bool                                                         DoCollisions;                                      // 0x58(0x1)
	char                                                         pad0x3_JYTXN[0x3];                                 // 0x59(0x3)
	char                                                         MeshAlignment;                                     // 0x5c(0x1)
	char                                                         pad0x3_GKGV4[0x3];                                 // 0x5d(0x3)
	bool                                                         bOverrideMaterial;                                 // 0x60(0x1)
	char                                                         pad0x3_T77FC[0x3];                                 // 0x61(0x3)
	float                                                        Pitch;                                             // 0x64(0x4)
	float                                                        Roll;                                              // 0x68(0x4)
	float                                                        Yaw;                                               // 0x6c(0x4)
	struct RawDistributionVector                                 RollPitchYawRange;                                 // 0x70(0x38)
	char                                                         pad0x8_KN11V[0x8];                                 // 0xa8(0x8)
	char                                                         AxisLockOption;                                    // 0xb0(0x1)
	char                                                         pad0x3_DTRJH[0x3];                                 // 0xb1(0x3)
	bool                                                         bCameraFacing;                                     // 0xb4(0x1)
	char                                                         pad0x3_FLSAD[0x3];                                 // 0xb5(0x3)
	char                                                         CameraFacingUpAxisOption;                          // 0xb8(0x1)
	char                                                         CameraFacingOption;                                // 0xb9(0x1)
	char                                                         pad0x2_DQVBN[0x2];                                 // 0xba(0x2)
	bool                                                         bApplyParticleRotationAsSpin;                      // 0xbc(0x1)
	bool                                                         bFaceCameraDirectionRatherThanPosition;            // 0xbc(0x1)
	bool                                                         bFaceCameraOnlyOnSpawn;                            // 0xbc(0x1)
	bool                                                         bCollisionsConsiderPartilceSize;                   // 0xbc(0x1)
	char                                                         pad0x3_L2YDE[0x3];                                 // 0xbd(0x3)
};


// Size 0x8 (Full Size[0x3b0] - InheritedSize[0x3a8]
class PointLight: public Light
{
public:
	class PointLightComponent*                                   PointLightComponent;                               // 0x3a8(0x8)
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class InterpTrackFade: public InterpTrackFloatBase
{
public:
	bool                                                         bPersistFade;                                      // 0x90(0x1)
	bool                                                         bFadeAudio;                                        // 0x90(0x1)
	char                                                         pad0x3_HUWFZ[0x3];                                 // 0x91(0x3)
	struct LinearColor                                           FadeColor;                                         // 0x94(0x10)
	char                                                         pad0x4_8O8S3[0x4];                                 // 0xa4(0x4)
};


// Size 0xd30 (Full Size[0xd80] - InheritedSize[0x50]
class ParticleModuleTypeDataGpu: public ParticleModuleTypeDataBase
{
public:
	struct GPUSpriteEmitterInfo                                  EmitterInfo;                                       // 0x50(0x2b0)
	struct GPUSpriteResourceData                                 ResourceData;                                      // 0x300(0xa60)
	float                                                        CameraMotionBlurAmount;                            // 0xd60(0x4)
	bool                                                         bClearExistingParticlesOnInit;                     // 0xd64(0x1)
	char                                                         pad0x3_E5CDA[0x3];                                 // 0xd65(0x3)
	char                                                         AlphaCullingAggressiveness;                        // 0xd68(0x1)
	char                                                         pad0x3_OWFNC[0x3];                                 // 0xd69(0x3)
	bool                                                         bOverrideAlphaThreshold;                           // 0xd6c(0x1)
	char                                                         pad0x3_PC6FB[0x3];                                 // 0xd6d(0x3)
	float                                                        OverriddenAlphaThreshold;                          // 0xd70(0x4)
	char                                                         InteractionWithKillPlane;                          // 0xd74(0x1)
	char                                                         KillPlanePointLocation;                            // 0xd75(0x1)
	char                                                         pad0x2_GMQP4[0x2];                                 // 0xd76(0x2)
	float                                                        FadingTimeWhenKilled;                              // 0xd78(0x4)
	char                                                         pad0x4_ZJHGP[0x4];                                 // 0xd7c(0x4)
};


// Size 0x10 (Full Size[0x2e0] - InheritedSize[0x2d0]
class PhysicsThrusterComponent: public SceneComponent
{
public:
	float                                                        ThrustStrength;                                    // 0x2d0(0x4)
	char                                                         pad0xc_I7JPV[0xc];                                 // 0x2d4(0xc)
};


// Size 0x10 (Full Size[0x3b8] - InheritedSize[0x3a8]
class SceneCapture2D: public SceneCapture
{
public:
	class SceneCaptureComponent2D*                               CaptureComponent2D;                                // 0x3a8(0x8)
	class DrawFrustumComponent*                                  DrawFrustum;                                       // 0x3b0(0x8)
};


// Size 0x100 (Full Size[0x3d0] - InheritedSize[0x2d0]
class FogVolumeComponent: public SceneComponent
{
public:
	struct LinearColor                                           Color;                                             // 0x2d0(0x10)
	float                                                        SceneFogSaturation;                                // 0x2e0(0x4)
	float                                                        Density;                                           // 0x2e4(0x4)
	float                                                        HeightFogFalloff;                                  // 0x2e8(0x4)
	float                                                        DistanceFalloffPower;                              // 0x2ec(0x4)
	float                                                        ShadowIntensity;                                   // 0x2f0(0x4)
	float                                                        ScaleOnTranslucency;                               // 0x2f4(0x4)
	struct Vector                                                FogVelocity;                                       // 0x2f8(0xc)
	struct Vector                                                NoisePrimaryScale;                                 // 0x304(0xc)
	struct Vector                                                NoiseSecondaryScale;                               // 0x310(0xc)
	float                                                        NoiseBlend;                                        // 0x31c(0x4)
	class Texture*                                               VolumeTexture;                                     // 0x320(0x8)
	float                                                        InscatteringIntensity;                             // 0x328(0x4)
	float                                                        InscatteringPower;                                 // 0x32c(0x4)
	float                                                        ShadowDistance;                                    // 0x330(0x4)
	float                                                        ActiveBelowDepth;                                  // 0x334(0x4)
	bool                                                         bUseSceneInscattering;                             // 0x338(0x1)
	char                                                         pad0x3_ZNQ23[0x3];                                 // 0x339(0x3)
	bool                                                         bUnderwater;                                       // 0x33c(0x1)
	bool                                                         bScaleWithLighting;                                // 0x33d(0x1)
	bool                                                         bAdvancedVolumeFog;                                // 0x33e(0x1)
	bool                                                         UseDensityMapOnTranslucency;                       // 0x33f(0x1)
	class Texture*                                               DensityMap;                                        // 0x340(0x8)
	struct Vector                                                DensityMapScale;                                   // 0x348(0xc)
	struct Vector                                                DensityMapOffset;                                  // 0x354(0xc)
	struct Vector                                                DensityMapActiveHemisphereOrigin;                  // 0x360(0xc)
	struct Vector                                                DensityMapActiveHemisphereDirection;               // 0x36c(0xc)
	float                                                        DensityMapActiveHemisphereInnerRadius;             // 0x378(0x4)
	float                                                        DensityMapActiveHemisphereOuterRadius;             // 0x37c(0x4)
	float                                                        SelfShadowBrightness;                              // 0x380(0x4)
	float                                                        SelfShadowFogScale;                                // 0x384(0x4)
	bool                                                         bMeshFog;                                          // 0x388(0x1)
	char                                                         pad0x3_8WGVC[0x3];                                 // 0x389(0x3)
	float                                                        MeshFogDensity;                                    // 0x38c(0x4)
	float                                                        MeshFogShadowDensity;                              // 0x390(0x4)
	float                                                        MeshFogScatteringDensity;                          // 0x394(0x4)
	struct Vector                                                MeshFogNoisePrimaryScale;                          // 0x398(0xc)
	struct Vector                                                MeshFogNoiseSecondaryScale;                        // 0x3a4(0xc)
	float                                                        MeshFogNoiseBlend;                                 // 0x3b0(0x4)
	struct Vector                                                MeshFogVelocity;                                   // 0x3b4(0xc)
	class Texture*                                               MeshFogVolumeTexture;                              // 0x3c0(0x8)
	char                                                         pad0x8_AL3O7[0x8];                                 // 0x3c8(0x8)
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class PhysicsConstraintActor: public RigidBodyBase
{
public:
	class PhysicsConstraintComponent*                            ConstraintComp;                                    // 0x3a0(0x8)
	class Actor*                                                 ConstraintActor1;                                  // 0x3a8(0x8)
	class Actor*                                                 ConstraintActor2;                                  // 0x3b0(0x8)
	bool                                                         bDisableCollision;                                 // 0x3b8(0x1)
	char                                                         pad0x7_XSZWA[0x7];                                 // 0x3b9(0x7)
};


// Size 0x0 (Full Size[0x560] - InheritedSize[0x560]
class AbstractNavData: public NavigationData
{
public:
};


// Size 0x0 (Full Size[0x3a8] - InheritedSize[0x3a8]
class PlaneReflectionCapture: public ReflectionCapture
{
public:
};


// Size 0x78 (Full Size[0xc8] - InheritedSize[0x50]
class ParticleModuleColorOverLife: public ParticleModuleColorBase
{
public:
	struct RawDistributionVector                                 ColorOverLife;                                     // 0x50(0x38)
	struct RawDistributionFloat                                  AlphaOverLife;                                     // 0x88(0x38)
	bool                                                         bClampAlpha;                                       // 0xc0(0x1)
	char                                                         pad0x7_QQAX0[0x7];                                 // 0xc1(0x7)
};


// Size 0x78 (Full Size[0xd0] - InheritedSize[0x58]
class ParticleModuleVelocityInheritParent: public ParticleModuleVelocityBase
{
public:
	struct RawDistributionVector                                 Scale;                                             // 0x58(0x38)
	struct RawDistributionVector                                 CustomParentScale;                                 // 0x90(0x38)
	bool                                                         ScalesRespectEmitterRotation;                      // 0xc8(0x1)
	bool                                                         UseCustomLocalSpace;                               // 0xc8(0x1)
	char                                                         pad0x3_EQVG7[0x3];                                 // 0xc9(0x3)
	float                                                        SpeedCap;                                          // 0xcc(0x4)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleSizeScale: public ParticleModuleSizeBase
{
public:
	struct RawDistributionVector                                 SizeScale;                                         // 0x50(0x38)
	bool                                                         EnableX;                                           // 0x88(0x1)
	bool                                                         EnableY;                                           // 0x88(0x1)
	bool                                                         EnableZ;                                           // 0x88(0x1)
	char                                                         pad0x7_OLRX5[0x7];                                 // 0x89(0x7)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class InterpTrackFloatParticleParam: public InterpTrackFloatBase
{
public:
	struct FName                                                 ParamName;                                         // 0x90(0x8)
};


// Size 0x8 (Full Size[0x1a0] - InheritedSize[0x198]
class TextureLightProfile: public Texture2D
{
public:
	float                                                        Brightness;                                        // 0x198(0x4)
	float                                                        TextureMultiplier;                                 // 0x19c(0x4)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class MaterialExpressionStaticBoolParameter: public MaterialExpressionParameter
{
public:
	bool                                                         DefaultValue;                                      // 0x90(0x1)
	char                                                         pad0x7_DRAHH[0x7];                                 // 0x91(0x7)
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class InterpTrackSound: public InterpTrackVectorBase
{
public:
	TArray<struct SoundTrackKey>                                 Sounds;                                            // 0x90(0x10)
	bool                                                         bPlayOnReverse;                                    // 0xa0(0x1)
	bool                                                         bContinueSoundOnMatineeEnd;                        // 0xa0(0x1)
	bool                                                         bSuppressSubtitles;                                // 0xa0(0x1)
	bool                                                         bTreatAsDialogue;                                  // 0xa0(0x1)
	bool                                                         bAttach;                                           // 0xa0(0x1)
	char                                                         pad0x7_MZEUH[0x7];                                 // 0xa1(0x7)
};


// Size 0x40 (Full Size[0xd0] - InheritedSize[0x90]
class MaterialExpressionStaticComponentMaskParameter: public MaterialExpressionParameter
{
public:
	struct ExpressionInput                                       Input;                                             // 0x90(0x38)
	bool                                                         DefaultR;                                          // 0xc8(0x1)
	bool                                                         DefaultG;                                          // 0xc8(0x1)
	bool                                                         DefaultB;                                          // 0xc8(0x1)
	bool                                                         DefaultA;                                          // 0xc8(0x1)
	char                                                         pad0x7_FPPEL[0x7];                                 // 0xc9(0x7)
};


// Size 0x0 (Full Size[0x498] - InheritedSize[0x498]
class DebugCameraHUD: public HUD
{
public:
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class GameNetworkManager: public Info
{
public:
	int                                                          AdjustedNetSpeed;                                  // 0x3a0(0x4)
	float                                                        LastNetSpeedUpdateTime;                            // 0x3a4(0x4)
	int                                                          TotalNetBandwidth;                                 // 0x3a8(0x4)
	int                                                          MinDynamicBandwidth;                               // 0x3ac(0x4)
	int                                                          MaxDynamicBandwidth;                               // 0x3b0(0x4)
	bool                                                         bIsStandbyCheckingEnabled;                         // 0x3b4(0x1)
	bool                                                         bHasStandbyCheatTriggered;                         // 0x3b4(0x1)
	char                                                         pad0x3_F5111[0x3];                                 // 0x3b5(0x3)
	float                                                        StandbyRxCheatTime;                                // 0x3b8(0x4)
	float                                                        StandbyTxCheatTime;                                // 0x3bc(0x4)
	int                                                          BadPingThreshold;                                  // 0x3c0(0x4)
	float                                                        PercentMissingForRxStandby;                        // 0x3c4(0x4)
	float                                                        PercentMissingForTxStandby;                        // 0x3c8(0x4)
	float                                                        PercentForBadPing;                                 // 0x3cc(0x4)
	float                                                        JoinInProgressStandbyWaitTime;                     // 0x3d0(0x4)
	float                                                        MoveRepSize;                                       // 0x3d4(0x4)
	float                                                        MAXPOSITIONERRORSQUARED;                           // 0x3d8(0x4)
	float                                                        MAXNEARZEROVELOCITYSQUARED;                        // 0x3dc(0x4)
	float                                                        CLIENTADJUSTUPDATECOST;                            // 0x3e0(0x4)
	float                                                        MAXCLIENTUPDATEINTERVAL;                           // 0x3e4(0x4)
	float                                                        MaxMoveDeltaTime;                                  // 0x3e8(0x4)
	bool                                                         ClientAuthorativePosition;                         // 0x3ec(0x1)
	char                                                         pad0x3_HRGPC[0x3];                                 // 0x3ed(0x3)
	float                                                        ClientErrorUpdateRateLimit;                        // 0x3f0(0x4)
	bool                                                         bMovementTimeDiscrepancyDetection;                 // 0x3f4(0x1)
	bool                                                         bMovementTimeDiscrepancyResolution;                // 0x3f5(0x1)
	char                                                         pad0x2_N3DKP[0x2];                                 // 0x3f6(0x2)
	float                                                        MovementTimeDiscrepancyMaxTimeMargin;              // 0x3f8(0x4)
	float                                                        MovementTimeDiscrepancyMinTimeMargin;              // 0x3fc(0x4)
	float                                                        MovementTimeDiscrepancyResolutionRate;             // 0x400(0x4)
	float                                                        MovementTimeDiscrepancyDriftAllowance;             // 0x404(0x4)
	bool                                                         bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x408(0x1)
	bool                                                         bUseDistanceBasedRelevancy;                        // 0x409(0x1)
	char                                                         pad0x6_KHIDP[0x6];                                 // 0x40a(0x6)
};


// Size 0x88 (Full Size[0xd8] - InheritedSize[0x50]
class ParticleModuleCollisionGPU: public ParticleModuleCollisionBase
{
public:
	struct RawDistributionFloat                                  Resilience;                                        // 0x50(0x38)
	struct RawDistributionFloat                                  ResilienceScaleOverLife;                           // 0x88(0x38)
	float                                                        DampingFactorRotation;                             // 0xc0(0x4)
	float                                                        Friction;                                          // 0xc4(0x4)
	float                                                        RadiusScale;                                       // 0xc8(0x4)
	float                                                        RadiusBias;                                        // 0xcc(0x4)
	char                                                         Response;                                          // 0xd0(0x1)
	char                                                         CollisionMode;                                     // 0xd1(0x1)
	char                                                         pad0x6_ORIXW[0x6];                                 // 0xd2(0x6)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class DistributionVectorConstant: public DistributionVector
{
public:
	struct Vector                                                Constant;                                          // 0x38(0xc)
	bool                                                         bLockAxes;                                         // 0x44(0x1)
	char                                                         pad0x3_SO2WE[0x3];                                 // 0x45(0x3)
	char                                                         LockedAxes;                                        // 0x48(0x1)
	char                                                         pad0x7_ECZBS[0x7];                                 // 0x49(0x7)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class InterpTrackFloatProp: public InterpTrackFloatBase
{
public:
	struct FName                                                 PropertyName;                                      // 0x90(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class DistributionFloatConstant: public DistributionFloat
{
public:
	float                                                        Constant;                                          // 0x38(0x4)
	char                                                         pad0x4_9CN7Z[0x4];                                 // 0x3c(0x4)
};


// Size 0x8 (Full Size[0x1a0] - InheritedSize[0x198]
class LightMapTexture2D: public Texture2D
{
public:
	char                                                         pad0x8_DZKEX[0x8];                                 // 0x198(0x8)
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class MaterialExpressionVectorParameter: public MaterialExpressionParameter
{
public:
	struct LinearColor                                           DefaultValue;                                      // 0x90(0x10)
	bool                                                         bUseCustomPrimitiveData;                           // 0xa0(0x1)
	char                                                         PrimitiveDataIndex;                                // 0xa1(0x1)
	char                                                         pad0x6_SLXAR[0x6];                                 // 0xa2(0x6)
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class MaterialExpressionCustomVelocity: public MaterialExpressionCustomOutput
{
public:
	struct ExpressionInput                                       Velocity2D;                                        // 0x70(0x38)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class ParticleModuleAttractorPointGravity: public ParticleModuleAttractorBase
{
public:
	struct Vector                                                Position;                                          // 0x50(0xc)
	float                                                        Radius;                                            // 0x5c(0x4)
	class DistributionFloat*                                     Strength;                                          // 0x60(0x8)
};


// Size 0x560 (Full Size[0x830] - InheritedSize[0x2d0]
class PostProcessComponent: public SceneComponent
{
public:
	char                                                         pad0x10_ABCFZ[0x10];                               // 0x2d0(0x10)
	struct PostProcessSettings                                   Settings;                                          // 0x2e0(0x540)
	float                                                        Priority;                                          // 0x820(0x4)
	float                                                        BlendRadius;                                       // 0x824(0x4)
	float                                                        BlendWeight;                                       // 0x828(0x4)
	bool                                                         bEnabled;                                          // 0x82c(0x1)
	bool                                                         bUnbound;                                          // 0x82c(0x1)
	char                                                         pad0x3_C5OC0[0x3];                                 // 0x82d(0x3)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleSizeMultiplyLife: public ParticleModuleSizeBase
{
public:
	struct RawDistributionVector                                 LifeMultiplier;                                    // 0x50(0x38)
	bool                                                         MultiplyX;                                         // 0x88(0x1)
	bool                                                         MultiplyY;                                         // 0x88(0x1)
	bool                                                         MultiplyZ;                                         // 0x88(0x1)
	char                                                         pad0x7_M7ADJ[0x7];                                 // 0x89(0x7)
};


// Size 0x68 (Full Size[0x168] - InheritedSize[0x100]
class ProjectileMovementComponent: public MovementComponent
{
public:
	float                                                        InitialSpeed;                                      // 0x100(0x4)
	float                                                        MaxSpeed;                                          // 0x104(0x4)
	bool                                                         bRotationFollowsVelocity;                          // 0x108(0x1)
	bool                                                         bShouldBounce;                                     // 0x108(0x1)
	bool                                                         bInitialVelocityInLocalSpace;                      // 0x108(0x1)
	bool                                                         bForceSubStepping;                                 // 0x108(0x1)
	bool                                                         bIsHomingProjectile;                               // 0x108(0x1)
	bool                                                         bBounceAngleAffectsFriction;                       // 0x108(0x1)
	bool                                                         bIsSliding;                                        // 0x108(0x1)
	char                                                         pad0x3_2ICSV[0x3];                                 // 0x109(0x3)
	float                                                        PreviousHitTime;                                   // 0x10c(0x4)
	struct Vector                                                PreviousHitNormal;                                 // 0x110(0xc)
	float                                                        ProjectileGravityScale;                            // 0x11c(0x4)
	float                                                        Buoyancy;                                          // 0x120(0x4)
	float                                                        Bounciness;                                        // 0x124(0x4)
	float                                                        Friction;                                          // 0x128(0x4)
	float                                                        BounceVelocityStopSimulatingThreshold;             // 0x12c(0x4)
	float                                                        HomingAccelerationMagnitude;                       // 0x150(0x4)
	float                                                        MaxSimulationTimeStep;                             // 0x15c(0x4)
	int                                                          MaxSimulationIterations;                           // 0x160(0x4)
	char                                                         pad0x4_4PATJ[0x4];                                 // 0x164(0x4)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class PlayerStart: public NavigationObjectBase
{
public:
	struct FName                                                 PlayerStartTag;                                    // 0x3c8(0x8)
};


// Size 0xe8 (Full Size[0x138] - InheritedSize[0x50]
class ParticleModuleLight: public ParticleModuleLightBase
{
public:
	bool                                                         bUseInverseSquaredFalloff;                         // 0x50(0x1)
	bool                                                         bAffectsTranslucency;                              // 0x51(0x1)
	bool                                                         bIgnoreComponentTint;                              // 0x52(0x1)
	bool                                                         bPreviewLightRadius;                               // 0x53(0x1)
	float                                                        SpawnFraction;                                     // 0x54(0x4)
	struct RawDistributionVector                                 ColorScaleOverLife;                                // 0x58(0x38)
	struct RawDistributionFloat                                  BrightnessOverLife;                                // 0x90(0x38)
	struct RawDistributionFloat                                  RadiusScale;                                       // 0xc8(0x38)
	struct RawDistributionFloat                                  LightExponent;                                     // 0x100(0x38)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleMeshMaterial: public ParticleModuleMaterialBase
{
public:
	TArray<class MaterialInterface*>                             MeshMaterials;                                     // 0x50(0x10)
};


// Size 0x38 (Full Size[0x90] - InheritedSize[0x58]
class ParticleModuleAccelerationOverLifetime: public ParticleModuleAccelerationBase
{
public:
	struct RawDistributionVector                                 AccelOverLife;                                     // 0x58(0x38)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleEventGeneratorGPU: public ParticleModuleEventBase
{
public:
	TArray<struct ParticleEventGPU_GenerateInfo>                 Events;                                            // 0x50(0x10)
};


// Size 0x8 (Full Size[0x34698] - InheritedSize[0x34690]
class ChildConnection: public NetConnection
{
public:
	class NetConnection*                                         Parent;                                            // 0x34690(0x8)
};


// Size 0x8 (Full Size[0x3b8] - InheritedSize[0x3b0]
class CoveredMeshActor: public StaticMeshActor
{
public:
	class InstancedCoverageMeshComponent*                        InstancedCoverageMeshComponent;                    // 0x3b0(0x8)
};


// Size 0x190 (Full Size[0x1e8] - InheritedSize[0x58]
class ParticleModuleVelocity: public ParticleModuleVelocityBase
{
public:
	bool                                                         bUseGroupAForAll;                                  // 0x58(0x1)
	char                                                         pad0x7_2YSL8[0x7];                                 // 0x59(0x7)
	struct RawDistributionVector                                 StartVelocity;                                     // 0x60(0x38)
	struct RawDistributionVector                                 AdditionalStartVelocities;                         // 0x98(0x38)
	char                                                         pad0xe0_KTKQK[0xe0];                               // 0xd0(0xe0)
	struct RawDistributionFloat                                  StartVelocityRadial;                               // 0x1b0(0x38)
};


// Size 0xe0 (Full Size[0x130] - InheritedSize[0x50]
class ParticleModuleLocationDirect: public ParticleModuleLocationBase
{
public:
	struct RawDistributionVector                                 Location;                                          // 0x50(0x38)
	struct RawDistributionVector                                 LocationOffset;                                    // 0x88(0x38)
	struct RawDistributionVector                                 ScaleFactor;                                       // 0xc0(0x38)
	struct RawDistributionVector                                 Direction;                                         // 0xf8(0x38)
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class BrushShape: public Brush
{
public:
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleEventGenerator: public ParticleModuleEventBase
{
public:
	TArray<struct ParticleEvent_GenerateInfo>                    Events;                                            // 0x50(0x10)
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class PlayerState: public Info
{
public:
	float                                                        Score;                                             // 0x3a0(0x4)
	char                                                         Ping;                                              // 0x3a4(0x1)
	char                                                         pad0x3_X6WBT[0x3];                                 // 0x3a5(0x3)
	struct FString                                               PlayerName;                                        // 0x3a8(0x10)
	char                                                         pad0x10_BTBO2[0x10];                               // 0x3b8(0x10)
	int                                                          PlayerId;                                          // 0x3c8(0x4)
	bool                                                         bIsSpectator;                                      // 0x3cc(0x1)
	bool                                                         bOnlySpectator;                                    // 0x3cc(0x1)
	bool                                                         bIsABot;                                           // 0x3cc(0x1)
	bool                                                         bIsInactive;                                       // 0x3cc(0x1)
	bool                                                         bFromPreviousLevel;                                // 0x3cc(0x1)
	char                                                         pad0x3_WTA99[0x3];                                 // 0x3cd(0x3)
	class UClass*                                                EngineMessageClass;                                // 0x3d0(0x8)
	char                                                         pad0x18_6T16S[0x18];                               // 0x3d8(0x18)
	struct UniqueNetIdRepl                                       UniqueId;                                          // 0x3f0(0x18)
	char                                                         pad0x18_BL87R[0x18];                               // 0x408(0x18)
};


// Size 0x130 (Full Size[0x198] - InheritedSize[0x68]
class ParticleModuleParametersOverVelocity: public ParticleModuleParametersOverX
{
public:
	float                                                        MinSpeed;                                          // 0x68(0x4)
	float                                                        MaxSpeed;                                          // 0x6c(0x4)
	struct Vector                                                VelocityComponentsWeights;                         // 0x70(0xc)
	char                                                         pad0x4_5RJOV[0x4];                                 // 0x7c(0x4)
	struct RawDistributionFloat                                  SpawnRateOverSpeedScale;                           // 0x80(0x38)
	struct RawDistributionFloat                                  LifetimeOverSpeedScale;                            // 0xb8(0x38)
	struct RawDistributionFloat                                  SizeOverSpeedScale;                                // 0xf0(0x38)
	struct RawDistributionFloat                                  InitialVelocityOverSpeedScale;                     // 0x128(0x38)
	struct RawDistributionFloat                                  OpacityOverSpeedScale;                             // 0x160(0x38)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class MaterialExpressionTextureObject: public MaterialExpressionTextureBase
{
public:
};


// Size 0x158 (Full Size[0x1a8] - InheritedSize[0x50]
class ParticleModuleRotationRate: public ParticleModuleRotationRateBase
{
public:
	bool                                                         bUseGroupARotationRateForAllGroups;                // 0x50(0x1)
	char                                                         pad0x7_PYXV0[0x7];                                 // 0x51(0x7)
	struct RawDistributionFloat                                  StartRotationRate;                                 // 0x58(0x38)
	struct RawDistributionFloat                                  AdditionalStartRotationRate;                       // 0x90(0x38)
	char                                                         pad0xe0_YH5CL[0xe0];                               // 0xc8(0xe0)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class InterpTrackInstFloatProp: public InterpTrackInstProperty
{
public:
	char                                                         pad0x8_N9U9S[0x8];                                 // 0x38(0x8)
	float                                                        ResetFloat;                                        // 0x40(0x4)
	char                                                         pad0x4_0TINL[0x4];                                 // 0x44(0x4)
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class InterpTrackMoveAxis: public InterpTrackFloatBase
{
public:
	char                                                         MoveAxis;                                          // 0x90(0x1)
	char                                                         pad0x7_CLCLH[0x7];                                 // 0x91(0x7)
	struct InterpLookupTrack                                     LookupTrack;                                       // 0x98(0x10)
};


// Size 0x70 (Full Size[0xc8] - InheritedSize[0x58]
class ParticleModuleAccelerationDrag: public ParticleModuleAccelerationBase
{
public:
	class DistributionFloat*                                     DragCoefficient;                                   // 0x58(0x8)
	class DistributionFloat*                                     DragOnLocalVelocity;                               // 0x60(0x8)
	bool                                                         bUseGroupADragCoefficientForAllGroups;             // 0x68(0x1)
	char                                                         pad0x7_RFT78[0x7];                                 // 0x69(0x7)
	class DistributionFloat*                                     AdditionalDragCoefficient;                         // 0x70(0x8)
	char                                                         pad0x20_KAHMV[0x20];                               // 0x78(0x20)
	bool                                                         bUseGroupADragOnLocalVelocityForAllGroups;         // 0x98(0x1)
	char                                                         pad0x7_4XW6F[0x7];                                 // 0x99(0x7)
	class DistributionFloat*                                     AdditionalDragOnLocalVelocity;                     // 0xa0(0x8)
	char                                                         pad0x20_YL3TF[0x20];                               // 0xa8(0x20)
};


// Size 0x198 (Full Size[0x5b0] - InheritedSize[0x418]
class Character: public Pawn
{
public:
	class SkeletalMeshComponent*                                 Mesh;                                              // 0x418(0x8)
	class CharacterMovementComponent*                            CharacterMovement;                                 // 0x420(0x8)
	class CapsuleComponent*                                      CapsuleComponent;                                  // 0x428(0x8)
	struct BasedMovementInfo                                     BasedMovement;                                     // 0x430(0x38)
	struct BasedMovementInfo                                     ReplicatedBasedMovement;                           // 0x468(0x38)
	struct Vector                                                BaseTranslationOffset;                             // 0x4a0(0xc)
	char                                                         pad0x4_KSCJ4[0x4];                                 // 0x4ac(0x4)
	struct Quat                                                  BaseRotationOffset;                                // 0x4b0(0x10)
	char                                                         ReplicatedMovementMode;                            // 0x4c0(0x1)
	bool                                                         bInBaseReplication;                                // 0x4c1(0x1)
	char                                                         pad0x2_N7YFW[0x2];                                 // 0x4c2(0x2)
	float                                                        CrouchedEyeHeight;                                 // 0x4c4(0x4)
	bool                                                         bIsCrouched;                                       // 0x4c8(0x1)
	bool                                                         bPressedJump;                                      // 0x4c8(0x1)
	bool                                                         bClientUpdating;                                   // 0x4c8(0x1)
	bool                                                         bClientWasFalling;                                 // 0x4c8(0x1)
	bool                                                         bClientResimulateRootMotion;                       // 0x4c8(0x1)
	bool                                                         bSimGravityDisabled;                               // 0x4c8(0x1)
	bool                                                         bServerMoveIgnoreRootMotion;                       // 0x4c8(0x1)
	char                                                         pad0x3_KM73X[0x3];                                 // 0x4c9(0x3)
	float                                                        JumpKeyHoldTime;                                   // 0x4cc(0x4)
	float                                                        JumpMaxHoldTime;                                   // 0x4d0(0x4)
	char                                                         pad0x4_K1AZ8[0x4];                                 // 0x4d4(0x4)
	struct RootMotionMovementParams                              ClientRootMotionParams;                            // 0x510(0x40)
	TArray<struct SimulatedRootMotionReplicatedMove>             RootMotionRepMoves;                                // 0x550(0x10)
	struct RepRootMotionMontage                                  RepRootMotion;                                     // 0x560(0x40)
	char                                                         pad0x10_RG7YC[0x10];                               // 0x5a0(0x10)
};


// Size 0x38 (Full Size[0x88] - InheritedSize[0x50]
class ParticleModuleVectorFieldLocal: public ParticleModuleVectorFieldBase
{
public:
	class VectorField*                                           VectorField;                                       // 0x50(0x8)
	struct Vector                                                RelativeTranslation;                               // 0x58(0xc)
	struct Rotator                                               RelativeRotation;                                  // 0x64(0xc)
	struct Vector                                                RelativeScale3D;                                   // 0x70(0xc)
	float                                                        Intensity;                                         // 0x7c(0x4)
	float                                                        Tightness;                                         // 0x80(0x4)
	bool                                                         bIgnoreComponentTransform;                         // 0x84(0x1)
	bool                                                         bTileX;                                            // 0x84(0x1)
	bool                                                         bTileY;                                            // 0x84(0x1)
	bool                                                         bTileZ;                                            // 0x84(0x1)
	char                                                         pad0x3_N1P78[0x3];                                 // 0x85(0x3)
};


// Size 0x28 (Full Size[0x170] - InheritedSize[0x148]
class TextureRenderTarget2D: public TextureRenderTarget
{
public:
	int                                                          SizeX;                                             // 0x148(0x4)
	int                                                          SizeY;                                             // 0x14c(0x4)
	struct LinearColor                                           ClearColor;                                        // 0x150(0x10)
	char                                                         AddressX;                                          // 0x160(0x1)
	char                                                         AddressY;                                          // 0x161(0x1)
	char                                                         pad0x2_R3FG4[0x2];                                 // 0x162(0x2)
	bool                                                         bForceLinearGamma;                                 // 0x164(0x1)
	bool                                                         bHDR;                                              // 0x164(0x1)
	bool                                                         bAutoGenerateMips;                                 // 0x164(0x1)
	char                                                         pad0x3_L1AU6[0x3];                                 // 0x165(0x3)
	char                                                         OverrideFormat;                                    // 0x168(0x1)
	bool                                                         bDontClearOnCreation;                              // 0x169(0x1)
	char                                                         pad0x6_NB7UL[0x6];                                 // 0x16a(0x6)
};


// Size 0x70 (Full Size[0x340] - InheritedSize[0x2d0]
class SceneCaptureComponent: public SceneComponent
{
public:
	TArray<uintptr_t>                                            HiddenComponents;                                  // 0x2d0(0x10)
	bool                                                         bCaptureEveryFrame;                                // 0x2e0(0x1)
	char                                                         pad0x3_29MO5[0x3];                                 // 0x2e1(0x3)
	float                                                        MaxViewDistanceOverride;                           // 0x2e4(0x4)
	TArray<struct EngineShowFlagsSetting>                        ShowFlagSettings;                                  // 0x2e8(0x10)
	char                                                         pad0x48_0SD5S[0x48];                               // 0x2f8(0x48)
};


// Size 0x20 (Full Size[0x2f0] - InheritedSize[0x2d0]
class InstancedNavMeshComponent: public SceneComponent
{
public:
	char                                                         pad0x8_JRTRS[0x8];                                 // 0x2d0(0x8)
	struct FName                                                 NavMeshName;                                       // 0x2d8(0x8)
	bool                                                         UseAttachedParentAsPrimitiveBase;                  // 0x2e0(0x1)
	char                                                         pad0xf_U48ZC[0xf];                                 // 0x2e1(0xf)
};


// Size 0x10 (Full Size[0x68] - InheritedSize[0x58]
class ParticleModuleAccelerationConstant: public ParticleModuleAccelerationBase
{
public:
	struct Vector                                                Acceleration;                                      // 0x58(0xc)
	char                                                         pad0x4_P4MKV[0x4];                                 // 0x64(0x4)
};


// Size 0x2b8 (Full Size[0x308] - InheritedSize[0x50]
class ParticleModuleColor: public ParticleModuleColorBase
{
public:
	bool                                                         bUseGroupAColorForAllGroups;                       // 0x50(0x1)
	char                                                         pad0x7_VLQEE[0x7];                                 // 0x51(0x7)
	struct RawDistributionVector                                 StartColor;                                        // 0x58(0x38)
	struct RawDistributionVector                                 AdditionalStartColor;                              // 0x90(0x38)
	char                                                         pad0xe0_2A1GO[0xe0];                               // 0xc8(0xe0)
	bool                                                         bUseGroupAAlphaForAllGroups;                       // 0x1a8(0x1)
	char                                                         pad0x7_0A765[0x7];                                 // 0x1a9(0x7)
	struct RawDistributionFloat                                  StartAlpha;                                        // 0x1b0(0x38)
	struct RawDistributionFloat                                  AdditionalStartAlpha;                              // 0x1e8(0x38)
	char                                                         pad0xe0_4X96H[0xe0];                               // 0x220(0xe0)
	bool                                                         bClampAlpha;                                       // 0x300(0x1)
	bool                                                         bIgnoreComponentColorTint;                         // 0x300(0x1)
	char                                                         pad0x7_CPUAS[0x7];                                 // 0x301(0x7)
};


// Size 0xd0 (Full Size[0x120] - InheritedSize[0x50]
class ParticleModuleBeamSource: public ParticleModuleBeamBase
{
public:
	char                                                         SourceMethod;                                      // 0x50(0x1)
	char                                                         pad0x3_6WLHO[0x3];                                 // 0x51(0x3)
	struct FName                                                 SourceName;                                        // 0x54(0x8)
	bool                                                         bSourceAbsolute;                                   // 0x5c(0x1)
	char                                                         pad0x3_39SOH[0x3];                                 // 0x5d(0x3)
	struct RawDistributionVector                                 Source;                                            // 0x60(0x38)
	bool                                                         bLockSource;                                       // 0x98(0x1)
	char                                                         pad0x3_HBW81[0x3];                                 // 0x99(0x3)
	char                                                         SourceTangentMethod;                               // 0x9c(0x1)
	char                                                         pad0x3_0K7N9[0x3];                                 // 0x9d(0x3)
	struct RawDistributionVector                                 SourceTangent;                                     // 0xa0(0x38)
	bool                                                         bLockSourceTangent;                                // 0xd8(0x1)
	char                                                         pad0x7_UI6WJ[0x7];                                 // 0xd9(0x7)
	struct RawDistributionFloat                                  SourceStrength;                                    // 0xe0(0x38)
	bool                                                         bLockSourceStength;                                // 0x118(0x1)
	char                                                         pad0x7_01FXB[0x7];                                 // 0x119(0x7)
};


// Size 0x8 (Full Size[0x3b0] - InheritedSize[0x3a8]
class AmbientLightSource: public Light
{
public:
	class AmbientLightSourceComponent*                           AmbientLightSourceComponent;                       // 0x3a8(0x8)
};


// Size 0x30 (Full Size[0x80] - InheritedSize[0x50]
class ParticleModuleTypeDataRibbon: public ParticleModuleTypeDataBase
{
public:
	int                                                          MaxTessellationBetweenParticles;                   // 0x50(0x4)
	int                                                          SheetsPerTrail;                                    // 0x54(0x4)
	int                                                          MaxTrailCount;                                     // 0x58(0x4)
	int                                                          MaxParticleInTrailCount;                           // 0x5c(0x4)
	bool                                                         bDeadTrailsOnDeactivate;                           // 0x60(0x1)
	bool                                                         bDeadTrailsOnSourceLoss;                           // 0x60(0x1)
	bool                                                         bClipSourceSegement;                               // 0x60(0x1)
	bool                                                         bEnablePreviousTangentRecalculation;               // 0x60(0x1)
	bool                                                         bTangentRecalculationEveryFrame;                   // 0x60(0x1)
	bool                                                         bSpawnInitialParticle;                             // 0x60(0x1)
	char                                                         pad0x3_NOA01[0x3];                                 // 0x61(0x3)
	char                                                         RenderAxis;                                        // 0x64(0x1)
	char                                                         pad0x3_J91H5[0x3];                                 // 0x65(0x3)
	float                                                        TangentSpawningScalar;                             // 0x68(0x4)
	bool                                                         bRenderGeometry;                                   // 0x6c(0x1)
	bool                                                         bRenderSpawnPoints;                                // 0x6c(0x1)
	bool                                                         bRenderTangents;                                   // 0x6c(0x1)
	bool                                                         bRenderTessellation;                               // 0x6c(0x1)
	char                                                         pad0x3_0UCBX[0x3];                                 // 0x6d(0x3)
	float                                                        TilingDistance;                                    // 0x70(0x4)
	float                                                        DistanceTessellationStepSize;                      // 0x74(0x4)
	bool                                                         bEnableTangentDiffInterpScale;                     // 0x78(0x1)
	char                                                         pad0x3_53Q8C[0x3];                                 // 0x79(0x3)
	float                                                        TangentTessellationScalar;                         // 0x7c(0x4)
};


// Size 0x20 (Full Size[0x120] - InheritedSize[0x100]
class RotatingMovementComponent: public MovementComponent
{
public:
	struct Rotator                                               RotationRate;                                      // 0x100(0xc)
	struct Vector                                                PivotTranslation;                                  // 0x10c(0xc)
	bool                                                         bRotationInLocalSpace;                             // 0x118(0x1)
	char                                                         pad0x7_2IR9V[0x7];                                 // 0x119(0x7)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class WindDirectionalSource: public Info
{
public:
	class WindDirectionalSourceComponent*                        Component;                                         // 0x3a0(0x8)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleLocationEmitterDirect: public ParticleModuleLocationBase
{
public:
	struct FName                                                 EmitterName;                                       // 0x50(0x8)
};


// Size 0x330 (Full Size[0x388] - InheritedSize[0x58]
class ParticleModuleVelocityCone: public ParticleModuleVelocityBase
{
public:
	struct RawDistributionFloat                                  Angle;                                             // 0x58(0x38)
	struct RawDistributionFloat                                  Velocity;                                          // 0x90(0x38)
	struct Vector                                                Direction;                                         // 0xc8(0xc)
	bool                                                         bUseGroupAForAll;                                  // 0xd4(0x1)
	char                                                         pad0x3_4570D[0x3];                                 // 0xd5(0x3)
	struct VelocityConeGroupParams                               AdditionalParams;                                  // 0xd8(0x80)
	char                                                         pad0x200_WT8WU[0x200];                             // 0x158(0x200)
	float                                                        VelocityNPointsRandomness;                         // 0x35c(0x4)
	struct Vector                                                AdditiveVelocity;                                  // 0x360(0xc)
	float                                                        ConeDepthScale;                                    // 0x36c(0x4)
	bool                                                         WorldSpaceOffset;                                  // 0x370(0x1)
	char                                                         pad0x3_L1MUV[0x3];                                 // 0x371(0x3)
	struct Vector                                                EmitterOriginOffset;                               // 0x374(0xc)
	float                                                        PushAwayFromCenterFactor;                          // 0x380(0x4)
	char                                                         pad0x4_HJFNC[0x4];                                 // 0x384(0x4)
};


// Size 0x78 (Full Size[0xc8] - InheritedSize[0x50]
class ParticleModuleWindInfluence: public ParticleModuleWindBase
{
public:
	float                                                        WindSpeedCap;                                      // 0x50(0x4)
	float                                                        RandomFactorForWindDirection;                      // 0x54(0x4)
	struct RawDistributionFloat                                  InfluenceOnAcceleration;                           // 0x58(0x38)
	struct RawDistributionFloat                                  InfluenceOnVelocity;                               // 0x90(0x38)
};


// Size 0xc8 (Full Size[0x120] - InheritedSize[0x58]
class ParticleModuleOrbit: public ParticleModuleOrbitBase
{
public:
	char                                                         ChainMode;                                         // 0x58(0x1)
	char                                                         pad0x7_S466X[0x7];                                 // 0x59(0x7)
	struct RawDistributionVector                                 OffsetAmount;                                      // 0x60(0x38)
	struct OrbitOptions                                          OffsetOptions;                                     // 0x98(0x4)
	char                                                         pad0x4_QITN3[0x4];                                 // 0x9c(0x4)
	struct RawDistributionVector                                 RotationAmount;                                    // 0xa0(0x38)
	struct OrbitOptions                                          RotationOptions;                                   // 0xd8(0x4)
	char                                                         pad0x4_T4KZ6[0x4];                                 // 0xdc(0x4)
	struct RawDistributionVector                                 RotationRateAmount;                                // 0xe0(0x38)
	struct OrbitOptions                                          RotationRateOptions;                               // 0x118(0x4)
	char                                                         pad0x4_F24J8[0x4];                                 // 0x11c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InputActionDelegateBinding: public InputDelegateBinding
{
public:
	TArray<struct BlueprintInputActionDelegateBinding>           InputActionDelegateBindings;                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x2e0] - InheritedSize[0x2d0]
class CalmWaterComponent: public SceneComponent
{
public:
	float                                                        Radius;                                            // 0x2d0(0x4)
	float                                                        RadiusPercentageToStartLerp;                       // 0x2d4(0x4)
	float                                                        DampeningFactor;                                   // 0x2d8(0x4)
	char                                                         pad0x4_HVSSA[0x4];                                 // 0x2dc(0x4)
};


// Size 0x170 (Full Size[0x1c0] - InheritedSize[0x50]
class ParticleModuleLifetime: public ParticleModuleLifetimeBase
{
public:
	bool                                                         bUseGroupAValuesForAllGroups;                      // 0x50(0x1)
	char                                                         pad0x7_YY5IV[0x7];                                 // 0x51(0x7)
	struct RawDistributionFloat                                  LifeTime;                                          // 0x58(0x38)
	struct RawDistributionFloat                                  AdditionalLifetimes;                               // 0x90(0x38)
	char                                                         pad0xf8_JM80D[0xf8];                               // 0xc8(0xf8)
};


// Size 0x128 (Full Size[0x190] - InheritedSize[0x68]
class ParticleModuleParametersOverWind: public ParticleModuleParametersOverX
{
public:
	bool                                                         bAllowOppositeDirection;                           // 0x68(0x1)
	char                                                         pad0x3_RDTAS[0x3];                                 // 0x69(0x3)
	struct Vector                                                WindSpeedComponentsWeights;                        // 0x6c(0xc)
	struct RawDistributionFloat                                  SpawnRateOverWindScale;                            // 0x78(0x38)
	struct RawDistributionFloat                                  LifetimeOverWindScale;                             // 0xb0(0x38)
	struct RawDistributionFloat                                  SizeOverWindScale;                                 // 0xe8(0x38)
	struct RawDistributionFloat                                  InitialVelocityOverWindScale;                      // 0x120(0x38)
	struct RawDistributionFloat                                  OpacityOverWindScale;                              // 0x158(0x38)
};


// Size 0x60 (Full Size[0xb0] - InheritedSize[0x50]
class ParticleModuleLocationSkelVertSurface: public ParticleModuleLocationBase
{
public:
	char                                                         SourceType;                                        // 0x50(0x1)
	char                                                         pad0x3_6UOAU[0x3];                                 // 0x51(0x3)
	struct Vector                                                UniversalOffset;                                   // 0x54(0xc)
	bool                                                         bUpdatePositionEachFrame;                          // 0x60(0x1)
	bool                                                         bOrientMeshEmitters;                               // 0x60(0x1)
	bool                                                         bInheritBoneVelocity;                              // 0x60(0x1)
	char                                                         pad0x3_6CPQC[0x3];                                 // 0x61(0x3)
	struct FName                                                 SkelMeshActorParamName;                            // 0x64(0x8)
	char                                                         pad0x4_8T9RS[0x4];                                 // 0x6c(0x4)
	TArray<struct Name>                                          ValidAssociatedBones;                              // 0x70(0x10)
	bool                                                         bEnforceNormalCheck;                               // 0x80(0x1)
	char                                                         pad0x3_45OFP[0x3];                                 // 0x81(0x3)
	struct Vector                                                NormalToCompare;                                   // 0x84(0xc)
	float                                                        NormalCheckToleranceDegrees;                       // 0x90(0x4)
	float                                                        NormalCheckTolerance;                              // 0x94(0x4)
	TArray<int>                                                  ValidMaterialIndices;                              // 0x98(0x10)
	bool                                                         bInheritVertexColor;                               // 0xa8(0x1)
	char                                                         pad0x7_0Q036[0x7];                                 // 0xa9(0x7)
};


// Size 0x160 (Full Size[0x1b0] - InheritedSize[0x50]
class ParticleModuleSize: public ParticleModuleSizeBase
{
public:
	bool                                                         bUseGroupAForAll;                                  // 0x50(0x1)
	char                                                         pad0x7_7AB7T[0x7];                                 // 0x51(0x7)
	struct RawDistributionVector                                 StartSize;                                         // 0x58(0x38)
	struct RawDistributionVector                                 AdditionalStartSizes;                              // 0x90(0x38)
	char                                                         pad0xe0_NQZ29[0xe0];                               // 0xc8(0xe0)
	bool                                                         bKeepAspectRatio;                                  // 0x1a8(0x1)
	bool                                                         bIgnoreComponentScale;                             // 0x1a8(0x1)
	char                                                         pad0x7_H2Q9V[0x7];                                 // 0x1a9(0x7)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class DistributionVectorUniform: public DistributionVector
{
public:
	struct Vector                                                Max;                                               // 0x38(0xc)
	struct Vector                                                Min;                                               // 0x44(0xc)
	bool                                                         bLockAxes;                                         // 0x50(0x1)
	char                                                         pad0x3_KFSGE[0x3];                                 // 0x51(0x3)
	char                                                         LockedAxes;                                        // 0x54(0x1)
	char                                                         MirrorFlags;                                       // 0x55(0x1)
	char                                                         pad0x2_7KII0[0x2];                                 // 0x56(0x2)
	bool                                                         bUseExtremes;                                      // 0x58(0x1)
	char                                                         pad0x7_YNCW5[0x7];                                 // 0x59(0x7)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class ExponentialHeightFog: public Info
{
public:
	class ExponentialHeightFogComponent*                         Component;                                         // 0x3a0(0x8)
	bool                                                         bEnabled;                                          // 0x3a8(0x1)
	char                                                         pad0x7_F3PLE[0x7];                                 // 0x3a9(0x7)
};


// Size 0x38 (Full Size[0x88] - InheritedSize[0x50]
class ParticleModuleAlignRotationToVelocity: public ParticleModuleRotationBase
{
public:
	struct RawDistributionFloat                                  AdditionalAngle;                                   // 0x50(0x38)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleVectorFieldScale: public ParticleModuleVectorFieldBase
{
public:
	class DistributionFloat*                                     VectorFieldScale;                                  // 0x50(0x8)
};


// Size 0x150 (Full Size[0x420] - InheritedSize[0x2d0]
class AudioComponent: public SceneComponent
{
public:
	class SoundBase*                                             Sound;                                             // 0x2d0(0x8)
	TArray<struct AudioComponentParam>                           InstanceParameters;                                // 0x2d8(0x10)
	class SoundClass*                                            SoundClassOverride;                                // 0x2e8(0x8)
	bool                                                         bAutoDestroy;                                      // 0x2f0(0x1)
	bool                                                         bStopWhenOwnerDestroyed;                           // 0x2f0(0x1)
	bool                                                         bShouldRemainActiveIfDropped;                      // 0x2f0(0x1)
	bool                                                         bAllowSpatialization;                              // 0x2f0(0x1)
	bool                                                         bOverrideAttenuation;                              // 0x2f0(0x1)
	bool                                                         bIsUISound;                                        // 0x2f0(0x1)
	char                                                         pad0x3_SZXKP[0x3];                                 // 0x2f1(0x3)
	float                                                        PitchModulationMin;                                // 0x2f4(0x4)
	float                                                        PitchModulationMax;                                // 0x2f8(0x4)
	float                                                        VolumeModulationMin;                               // 0x2fc(0x4)
	float                                                        VolumeModulationMax;                               // 0x300(0x4)
	float                                                        VolumeMultiplier;                                  // 0x304(0x4)
	float                                                        PitchMultiplier;                                   // 0x308(0x4)
	float                                                        HighFrequencyGainMultiplier;                       // 0x30c(0x4)
	class SoundAttenuation*                                      AttenuationSettings;                               // 0x310(0x8)
	struct AttenuationSettings                                   AttenuationOverrides;                              // 0x318(0xc0)
	char                                                         pad0x8_I6A90[0x8];                                 // 0x3d8(0x8)
	char                                                         pad0x40_B1WOH[0x40];                               // 0x3e0(0x40)
};


// Size 0x60 (Full Size[0x330] - InheritedSize[0x2d0]
class ExponentialHeightFogComponent: public SceneComponent
{
public:
	float                                                        FogDensity;                                        // 0x2d0(0x4)
	struct LinearColor                                           FogInscatteringColor;                              // 0x2d4(0x10)
	struct LinearColor                                           FarFogInscatteringColor;                           // 0x2e4(0x10)
	float                                                        DirectionalInscatteringExponent;                   // 0x2f4(0x4)
	float                                                        DirectionalInscatteringStartDistance;              // 0x2f8(0x4)
	float                                                        StartScaleDirectionalInscattering;                 // 0x2fc(0x4)
	float                                                        FarScaleDirectionalInscattering;                   // 0x300(0x4)
	struct LinearColor                                           DirectionalInscatteringColor;                      // 0x304(0x10)
	float                                                        FogHeightFalloff;                                  // 0x314(0x4)
	float                                                        FogMaxOpacity;                                     // 0x318(0x4)
	float                                                        StartDistance;                                     // 0x31c(0x4)
	float                                                        FarDistance;                                       // 0x320(0x4)
	float                                                        StartScale;                                        // 0x324(0x4)
	float                                                        FarScale;                                          // 0x328(0x4)
	bool                                                         bIsUnderwater;                                     // 0x32c(0x1)
	char                                                         pad0x3_VKNID[0x3];                                 // 0x32d(0x3)
};


// Size 0xb0 (Full Size[0x100] - InheritedSize[0x50]
class ParticleModuleAttractorPoint: public ParticleModuleAttractorBase
{
public:
	struct RawDistributionVector                                 Position;                                          // 0x50(0x38)
	struct RawDistributionFloat                                  Range;                                             // 0x88(0x38)
	struct RawDistributionFloat                                  Strength;                                          // 0xc0(0x38)
	bool                                                         StrengthByDistance;                                // 0xf8(0x1)
	bool                                                         bAffectBaseVelocity;                               // 0xf8(0x1)
	bool                                                         bOverrideVelocity;                                 // 0xf8(0x1)
	bool                                                         bUseWorldSpacePosition;                            // 0xf8(0x1)
	bool                                                         Positive_X;                                        // 0xf8(0x1)
	bool                                                         Positive_Y;                                        // 0xf8(0x1)
	bool                                                         Positive_Z;                                        // 0xf8(0x1)
	bool                                                         Negative_X;                                        // 0xf8(0x1)
	bool                                                         Negative_Y;                                        // 0xf9(0x1)
	bool                                                         Negative_Z;                                        // 0xf9(0x1)
	char                                                         pad0x6_IXG5F[0x6];                                 // 0xfa(0x6)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InputAxisKeyDelegateBinding: public InputDelegateBinding
{
public:
	TArray<struct BlueprintInputAxisKeyDelegateBinding>          InputAxisKeyDelegateBindings;                      // 0x28(0x10)
};


// Size 0x188 (Full Size[0x1f0] - InheritedSize[0x68]
class ParticleModuleParametersOverCustom: public ParticleModuleParametersOverX
{
public:
	struct RawDistributionFloat                                  DynamicParamScaleOverCustomScale;                  // 0x68(0x38)
	struct RawDistributionFloat                                  SpawnRateOverCustomScale;                          // 0xa0(0x38)
	struct RawDistributionFloat                                  LifetimeOverCustomScale;                           // 0xd8(0x38)
	struct RawDistributionFloat                                  SizeOverCustomScale;                               // 0x110(0x38)
	struct RawDistributionFloat                                  InitialVelocityOverCustomScale;                    // 0x148(0x38)
	struct RawDistributionFloat                                  OpacityOverCustomScale;                            // 0x180(0x38)
	struct RawDistributionFloat                                  CylinderRadiusOverCustomScale;                     // 0x1b8(0x38)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class PhysicsThruster: public RigidBodyBase
{
public:
	class PhysicsThrusterComponent*                              ThrusterComponent;                                 // 0x3a0(0x8)
};


// Size 0x68 (Full Size[0xb8] - InheritedSize[0x50]
class ParticleModuleRotateRotationAxis: public ParticleModuleRotationBase
{
public:
	struct RotationAboutAxisParameters                           FacingAxis;                                        // 0x50(0x10)
	bool                                                         bUseGroupAFacingAxisForAllGroups;                  // 0x60(0x1)
	char                                                         pad0x3_J6SGW[0x3];                                 // 0x61(0x3)
	struct RotationAboutAxisParameters                           AdditionalFacingAxes;                              // 0x64(0x10)
	char                                                         pad0x44_E04LQ[0x44];                               // 0x74(0x44)
};


// Size 0xe0 (Full Size[0x158] - InheritedSize[0x78]
class AnimSequence: public AnimSequenceBase
{
public:
	int                                                          NumFrames;                                         // 0x78(0x4)
	char                                                         pad0x4_ALMFB[0x4];                                 // 0x7c(0x4)
	TArray<struct TrackToSkeletonMap>                            TrackToSkeletonMapTable;                           // 0x80(0x10)
	char                                                         pad0x10_OAM2B[0x10];                               // 0x90(0x10)
	TArray<struct TranslationTrack>                              TranslationData;                                   // 0xa0(0x10)
	TArray<struct RotationTrack>                                 RotationData;                                      // 0xb0(0x10)
	TArray<struct ScaleTrack>                                    ScaleData;                                         // 0xc0(0x10)
	char                                                         TranslationCompressionFormat;                      // 0xd0(0x1)
	char                                                         RotationCompressionFormat;                         // 0xd1(0x1)
	char                                                         ScaleCompressionFormat;                            // 0xd2(0x1)
	char                                                         pad0x5_W8LFC[0x5];                                 // 0xd3(0x5)
	TArray<int>                                                  CompressedTrackOffsets;                            // 0xd8(0x10)
	struct CompressedOffsetData                                  CompressedScaleOffsets;                            // 0xe8(0x18)
	char                                                         pad0x10_P5CB8[0x10];                               // 0x100(0x10)
	char                                                         KeyEncodingFormat;                                 // 0x110(0x1)
	char                                                         pad0x1f_BLSHO[0x1f];                               // 0x111(0x1f)
	char                                                         AdditiveAnimType;                                  // 0x130(0x1)
	char                                                         RefPoseType;                                       // 0x131(0x1)
	char                                                         pad0x6_CHS41[0x6];                                 // 0x132(0x6)
	class AnimSequence*                                          RefPoseSeq;                                        // 0x138(0x8)
	int                                                          RefFrameIndex;                                     // 0x140(0x4)
	int                                                          EncodingPkgVersion;                                // 0x144(0x4)
	struct FName                                                 RetargetSource;                                    // 0x148(0x8)
	bool                                                         bEnableRootMotion;                                 // 0x150(0x1)
	char                                                         RootMotionRootLock;                                // 0x151(0x1)
	bool                                                         bRootMotionSettingsCopiedFromMontage;              // 0x152(0x1)
	char                                                         pad0x5_7PVC3[0x5];                                 // 0x153(0x5)
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class ParticleModuleSpawnRepeatPerPoint: public ParticleModuleSpawnBase
{
public:
};


// Size 0x1b8 (Full Size[0x558] - InheritedSize[0x3a0]
class WorldSettings: public Info
{
public:
	char                                                         pad0x8_MTJQY[0x8];                                 // 0x3a0(0x8)
	bool                                                         bEnableWorldBoundsChecks;                          // 0x3a8(0x1)
	bool                                                         bEnableNavigationSystem;                           // 0x3a8(0x1)
	char                                                         pad0x3_JGCF8[0x3];                                 // 0x3a9(0x3)
	char                                                         WorldCompositionSetting;                           // 0x3ac(0x1)
	char                                                         pad0x3_UW3D6[0x3];                                 // 0x3ad(0x3)
	struct StringAssetReference                                  InstancedNavMeshesDataAssetOveride;                // 0x3b0(0x10)
	bool                                                         bEnableWorldOriginRebasing;                        // 0x3c0(0x1)
	bool                                                         bWorldGravitySet;                                  // 0x3c0(0x1)
	bool                                                         bGlobalGravitySet;                                 // 0x3c0(0x1)
	char                                                         pad0x3_35R7R[0x3];                                 // 0x3c1(0x3)
	float                                                        KillZ;                                             // 0x3c4(0x4)
	class UClass*                                                KillZDamageType;                                   // 0x3c8(0x8)
	float                                                        GlobalGravityZ;                                    // 0x3d0(0x4)
	char                                                         pad0x4_57WX4[0x4];                                 // 0x3d4(0x4)
	class UClass*                                                DefaultPhysicsVolumeClass;                         // 0x3d8(0x8)
	class UClass*                                                PhysicsCollisionHandlerClass;                      // 0x3e0(0x8)
	class UClass*                                                DefaultGameMode;                                   // 0x3e8(0x8)
	TArray<struct GameModePrefix>                                DefaultMapPrefixes;                                // 0x3f0(0x10)
	class UClass*                                                GameNetworkManagerClass;                           // 0x400(0x8)
	int                                                          PackedLightAndShadowMapTextureSize;                // 0x408(0x4)
	bool                                                         bMinimizeBSPSections;                              // 0x40c(0x1)
	char                                                         pad0x3_POJ8P[0x3];                                 // 0x40d(0x3)
	struct Vector                                                DefaultColorScale;                                 // 0x410(0xc)
	bool                                                         bPrecomputeVisibility;                             // 0x41c(0x1)
	bool                                                         bPlaceCellsOnlyAlongCameraTracks;                  // 0x41c(0x1)
	char                                                         pad0x3_MH2OT[0x3];                                 // 0x41d(0x3)
	int                                                          VisibilityCellSize;                                // 0x420(0x4)
	char                                                         VisibilityAggressiveness;                          // 0x424(0x1)
	char                                                         pad0x3_02J5Z[0x3];                                 // 0x425(0x3)
	bool                                                         bForceNoPrecomputedLighting;                       // 0x428(0x1)
	char                                                         pad0x3_NXT68[0x3];                                 // 0x429(0x3)
	struct LightmassWorldInfoSettings                            LightmassSettings;                                 // 0x42c(0x44)
	char                                                         LevelLightingQuality;                              // 0x470(0x1)
	char                                                         pad0x7_YA0UJ[0x7];                                 // 0x471(0x7)
	struct ReverbSettings                                        DefaultReverbSettings;                             // 0x478(0x18)
	struct InteriorSettings                                      DefaultAmbientZoneSettings;                        // 0x490(0x24)
	char                                                         pad0x4_W4UP8[0x4];                                 // 0x4b4(0x4)
	class SoundMix*                                              DefaultBaseSoundMix;                               // 0x4b8(0x8)
	float                                                        WorldToMeters;                                     // 0x4c0(0x4)
	char                                                         pad0x4_DJ8U5[0x4];                                 // 0x4c4(0x4)
	class BookMark*                                              BookMarks;                                         // 0x4c8(0x8)
	char                                                         pad0x48_4AI7J[0x48];                               // 0x4d0(0x48)
	float                                                        TimeDilation;                                      // 0x518(0x4)
	float                                                        MatineeTimeDilation;                               // 0x51c(0x4)
	float                                                        DemoPlayTimeDilation;                              // 0x520(0x4)
	bool                                                         bHighPriorityLoading;                              // 0x524(0x1)
	bool                                                         bHighPriorityLoadingLocal;                         // 0x524(0x1)
	char                                                         pad0x3_WT8KN[0x3];                                 // 0x525(0x3)
	TArray<struct NetViewer>                                     ReplicationViewers;                                // 0x528(0x10)
	TArray<class AssetUserData*>                                 AssetUserData;                                     // 0x538(0x10)
	float                                                        WorldGravityZ;                                     // 0x548(0x4)
	char                                                         pad0x4_7SDQ6[0x4];                                 // 0x54c(0x4)
	class PlayerState*                                           Pauser;                                            // 0x550(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class InterpTrackInstVectorProp: public InterpTrackInstProperty
{
public:
	char                                                         pad0x8_6XR5A[0x8];                                 // 0x38(0x8)
	struct Vector                                                ResetVector;                                       // 0x40(0xc)
	char                                                         pad0x4_NQMHH[0x4];                                 // 0x4c(0x4)
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class LightComponentBase: public SceneComponent
{
public:
	struct Guid                                                  LightGuid;                                         // 0x2d0(0x10)
	float                                                        Brightness;                                        // 0x2e0(0x4)
	float                                                        Intensity;                                         // 0x2e4(0x4)
	struct Color                                                 LightColor;                                        // 0x2e8(0x4)
	bool                                                         bAffectsWorld;                                     // 0x2ec(0x1)
	bool                                                         CastShadows;                                       // 0x2ec(0x1)
	bool                                                         CastStaticShadows;                                 // 0x2ec(0x1)
	bool                                                         CastDynamicShadows;                                // 0x2ec(0x1)
	bool                                                         bAffectTranslucentLighting;                        // 0x2ec(0x1)
	bool                                                         bPrecomputedLightingIsValid;                       // 0x2ec(0x1)
	bool                                                         RainOcclusion;                                     // 0x2ec(0x1)
	char                                                         pad0x3_GOZXS[0x3];                                 // 0x2ed(0x3)
	float                                                        IndirectLightingIntensity;                         // 0x2f0(0x4)
	float                                                        ScaleForTranslucency;                              // 0x2f4(0x4)
	float                                                        CapForTranslucency;                                // 0x2f8(0x4)
	char                                                         pad0x4_ICGP3[0x4];                                 // 0x2fc(0x4)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class InterpTrackAudioMaster: public InterpTrackVectorBase
{
public:
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class InterpTrackVectorProp: public InterpTrackVectorBase
{
public:
	struct FName                                                 PropertyName;                                      // 0x90(0x8)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleCameraOffset: public ParticleModuleCameraBase
{
public:
	struct RawDistributionFloat                                  CameraOffset;                                      // 0x50(0x38)
	bool                                                         bSpawnTimeOnly;                                    // 0x88(0x1)
	char                                                         pad0x3_OCZ3C[0x3];                                 // 0x89(0x3)
	char                                                         UpdateMethod;                                      // 0x8c(0x1)
	char                                                         pad0x3_S4ZJF[0x3];                                 // 0x8d(0x3)
};


// Size 0x98 (Full Size[0x180] - InheritedSize[0xe8]
class NavLinkCustomComponent: public NavRelevantComponent
{
public:
	char                                                         pad0x10_EOC7D[0x10];                               // 0xe8(0x10)
	class UClass*                                                EnabledAreaClass;                                  // 0xf8(0x8)
	class UClass*                                                DisabledAreaClass;                                 // 0x100(0x8)
	struct Vector                                                LinkRelativeStart;                                 // 0x108(0xc)
	struct Vector                                                LinkRelativeEnd;                                   // 0x114(0xc)
	char                                                         LinkDirection;                                     // 0x120(0x1)
	char                                                         pad0x3_AJ2ND[0x3];                                 // 0x121(0x3)
	bool                                                         bLinkEnabled;                                      // 0x124(0x1)
	bool                                                         bNotifyWhenEnabled;                                // 0x124(0x1)
	bool                                                         bNotifyWhenDisabled;                               // 0x124(0x1)
	bool                                                         bCreateBoxObstacle;                                // 0x124(0x1)
	char                                                         pad0x3_H6NZS[0x3];                                 // 0x125(0x3)
	struct Vector                                                ObstacleOffset;                                    // 0x128(0xc)
	struct Vector                                                ObstacleExtent;                                    // 0x134(0xc)
	class UClass*                                                ObstacleAreaClass;                                 // 0x140(0x8)
	float                                                        BroadcastRadius;                                   // 0x148(0x4)
	float                                                        BroadcastInterval;                                 // 0x14c(0x4)
	char                                                         BroadcastChannel;                                  // 0x150(0x1)
	char                                                         pad0x2f_3V9VI[0x2f];                               // 0x151(0x2f)
};


// Size 0x8 (Full Size[0x1a0] - InheritedSize[0x198]
class ShadowMapTexture2D: public Texture2D
{
public:
	char                                                         ShadowmapFlags;                                    // 0x198(0x1)
	char                                                         pad0x7_QRS0Y[0x7];                                 // 0x199(0x7)
};


// Size 0x78 (Full Size[0xc8] - InheritedSize[0x50]
class ParticleModuleKillBox: public ParticleModuleKillBase
{
public:
	struct RawDistributionVector                                 LowerLeftCorner;                                   // 0x50(0x38)
	struct RawDistributionVector                                 UpperRightCorner;                                  // 0x88(0x38)
	bool                                                         bAbsolute;                                         // 0xc0(0x1)
	bool                                                         bKillInside;                                       // 0xc0(0x1)
	bool                                                         bAxisAlignedAndFixedSize;                          // 0xc0(0x1)
	char                                                         pad0x7_NBGYK[0x7];                                 // 0xc1(0x7)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleSubUV: public ParticleModuleSubUVBase
{
public:
	struct RawDistributionFloat                                  SubImageIndex;                                     // 0x50(0x38)
	bool                                                         bUseRealTime;                                      // 0x88(0x1)
	char                                                         pad0x7_CDZXI[0x7];                                 // 0x89(0x7)
};


// Size 0x158 (Full Size[0x1b0] - InheritedSize[0x58]
class ParticleModuleAcceleration: public ParticleModuleAccelerationBase
{
public:
	struct RawDistributionVector                                 Acceleration;                                      // 0x58(0x38)
	struct RawDistributionVector                                 AdditionalAcceleration;                            // 0x90(0x38)
	char                                                         pad0xe0_OVAOD[0xe0];                               // 0xc8(0xe0)
	bool                                                         bUseGroupAAccelerationForAllGroups;                // 0x1a8(0x1)
	bool                                                         bApplyOwnerScale;                                  // 0x1a8(0x1)
	char                                                         pad0x7_RZMSL[0x7];                                 // 0x1a9(0x7)
};


// Size 0x10 (Full Size[0xa0] - InheritedSize[0x90]
class MaterialExpressionScalarParameter: public MaterialExpressionParameter
{
public:
	float                                                        DefaultValue;                                      // 0x90(0x4)
	float                                                        SliderMin;                                         // 0x94(0x4)
	float                                                        SliderMax;                                         // 0x98(0x4)
	bool                                                         bUseCustomPrimitiveData;                           // 0x9c(0x1)
	char                                                         PrimitiveDataIndex;                                // 0x9d(0x1)
	char                                                         pad0x2_7K202[0x2];                                 // 0x9e(0x2)
};


// Size 0x0 (Full Size[0x3b0] - InheritedSize[0x3b0]
class TriggerBox: public TriggerBase
{
public:
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleMeshRotation: public ParticleModuleRotationBase
{
public:
	struct RawDistributionVector                                 StartRotation;                                     // 0x50(0x38)
	bool                                                         bInheritParent;                                    // 0x88(0x1)
	char                                                         pad0x7_JJM09[0x7];                                 // 0x89(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InputAxisDelegateBinding: public InputDelegateBinding
{
public:
	TArray<struct BlueprintInputAxisDelegateBinding>             InputAxisDelegateBindings;                         // 0x28(0x10)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class AtmosphericFog: public Info
{
public:
	class AtmosphericFogComponent*                               AtmosphericFogComponent;                           // 0x3a0(0x8)
};


// Size 0x90 (Full Size[0xe0] - InheritedSize[0x50]
class ParticleModuleAttractorParticle: public ParticleModuleAttractorBase
{
public:
	struct FName                                                 EmitterName;                                       // 0x50(0x8)
	struct RawDistributionFloat                                  Range;                                             // 0x58(0x38)
	bool                                                         bStrengthByDistance;                               // 0x90(0x1)
	char                                                         pad0x7_8QDWY[0x7];                                 // 0x91(0x7)
	struct RawDistributionFloat                                  Strength;                                          // 0x98(0x38)
	bool                                                         bAffectBaseVelocity;                               // 0xd0(0x1)
	char                                                         pad0x3_90T5K[0x3];                                 // 0xd1(0x3)
	char                                                         SelectionMethod;                                   // 0xd4(0x1)
	char                                                         pad0x3_0UH0Y[0x3];                                 // 0xd5(0x3)
	bool                                                         bRenewSource;                                      // 0xd8(0x1)
	bool                                                         bInheritSourceVel;                                 // 0xd8(0x1)
	char                                                         pad0x3_CL99Q[0x3];                                 // 0xd9(0x3)
	int                                                          LastSelIndex;                                      // 0xdc(0x4)
};


// Size 0x8 (Full Size[0x110] - InheritedSize[0x108]
class BlendSpace: public BlendSpaceBase
{
public:
	char                                                         AxisToScaleAnimation;                              // 0x108(0x1)
	char                                                         pad0x7_YQ8P2[0x7];                                 // 0x109(0x7)
};


// Size 0x0 (Full Size[0x3b0] - InheritedSize[0x3b0]
class TriggerCapsule: public TriggerBase
{
public:
};


// Size 0xe0 (Full Size[0x130] - InheritedSize[0x50]
class ParticleModuleLocationPrimitiveTriangle: public ParticleModuleLocationBase
{
public:
	struct RawDistributionVector                                 StartOffset;                                       // 0x50(0x38)
	struct RawDistributionFloat                                  Height;                                            // 0x88(0x38)
	struct RawDistributionFloat                                  Angle;                                             // 0xc0(0x38)
	struct RawDistributionFloat                                  Thickness;                                         // 0xf8(0x38)
};


// Size 0x20 (Full Size[0x2f0] - InheritedSize[0x2d0]
class WindDirectionalSourceComponent: public SceneComponent
{
public:
	float                                                        Strength;                                          // 0x2d0(0x4)
	float                                                        Speed;                                             // 0x2d4(0x4)
	float                                                        MinGustAmount;                                     // 0x2d8(0x4)
	float                                                        MaxGustAmount;                                     // 0x2dc(0x4)
	char                                                         pad0x10_VQU4L[0x10];                               // 0x2e0(0x10)
};


// Size 0x348 (Full Size[0x748] - InheritedSize[0x400]
class PlayerController: public Controller
{
public:
	class Player*                                                Player;                                            // 0x400(0x8)
	char                                                         pad0x8_HBCWJ[0x8];                                 // 0x408(0x8)
	class Pawn*                                                  AcknowledgedPawn;                                  // 0x410(0x8)
	class InterpTrackInstDirector*                               ControllingDirTrackInst;                           // 0x418(0x8)
	char                                                         pad0x8_WN80O[0x8];                                 // 0x420(0x8)
	class HUD*                                                   MyHUD;                                             // 0x428(0x8)
	class PlayerCameraManager*                                   PlayerCameraManager;                               // 0x430(0x8)
	class UClass*                                                PlayerCameraManagerClass;                          // 0x438(0x8)
	bool                                                         bAutoManageActiveCameraTarget;                     // 0x440(0x1)
	char                                                         pad0x3_KMKJ4[0x3];                                 // 0x441(0x3)
	struct Rotator                                               TargetViewRotation;                                // 0x444(0xc)
	char                                                         pad0x10_BP37J[0x10];                               // 0x450(0x10)
	TArray<class Actor*>                                         HiddenActors;                                      // 0x460(0x10)
	float                                                        LastSpectatorStateSynchTime;                       // 0x470(0x4)
	struct Vector                                                LastSpectatorSyncLocation;                         // 0x474(0xc)
	struct Rotator                                               LastSpectatorSyncRotation;                         // 0x480(0xc)
	int                                                          ClientCap;                                         // 0x48c(0x4)
	class CheatManager*                                          CheatManager;                                      // 0x490(0x8)
	class UClass*                                                CheatClass;                                        // 0x498(0x8)
	class PlayerInput*                                           PlayerInput;                                       // 0x4a0(0x8)
	TArray<struct ActiveForceFeedbackEffect>                     ActiveForceFeedbackEffects;                        // 0x4a8(0x10)
	char                                                         pad0x90_91C4K[0x90];                               // 0x4b8(0x90)
	bool                                                         bPlayerIsWaiting;                                  // 0x548(0x1)
	char                                                         pad0x3_VDLIO[0x3];                                 // 0x549(0x3)
	char                                                         NetPlayerIndex;                                    // 0x54c(0x1)
	bool                                                         bHasVoiceHandshakeCompleted;                       // 0x54d(0x1)
	char                                                         pad0x2_V9VXH[0x2];                                 // 0x54e(0x2)
	class NetConnection*                                         PendingSwapConnection;                             // 0x550(0x8)
	class NetConnection*                                         NetConnection;                                     // 0x558(0x8)
	char                                                         pad0xc_H16CR[0xc];                                 // 0x560(0xc)
	float                                                        InputYawScale;                                     // 0x56c(0x4)
	float                                                        InputPitchScale;                                   // 0x570(0x4)
	float                                                        InputRollScale;                                    // 0x574(0x4)
	bool                                                         bShowMouseCursor;                                  // 0x578(0x1)
	bool                                                         bEnableClickEvents;                                // 0x578(0x1)
	bool                                                         bEnableTouchEvents;                                // 0x578(0x1)
	bool                                                         bEnableMouseOverEvents;                            // 0x578(0x1)
	bool                                                         bEnableTouchOverEvents;                            // 0x578(0x1)
	bool                                                         bForceFeedbackEnabled;                             // 0x578(0x1)
	char                                                         pad0x3_DOVLB[0x3];                                 // 0x579(0x3)
	char                                                         DefaultMouseCursor;                                // 0x57c(0x1)
	char                                                         CurrentMouseCursor;                                // 0x57d(0x1)
	char                                                         DefaultClickTraceChannel;                          // 0x57e(0x1)
	char                                                         CurrentClickTraceChannel;                          // 0x57f(0x1)
	float                                                        HitResultTraceDistance;                            // 0x580(0x4)
	float                                                        ForceFeedbackIntensity;                            // 0x584(0x4)
	char                                                         pad0x88_8UF0K[0x88];                               // 0x588(0x88)
	class InputComponent*                                        InactiveStateInputComponent;                       // 0x610(0x8)
	char                                                         pad0x20_PE60C[0x20];                               // 0x618(0x20)
	class TouchInterface*                                        CurrentTouchInterface;                             // 0x638(0x8)
	char                                                         pad0x30_I7HJ0[0x30];                               // 0x640(0x30)
	class SpectatorPawn*                                         SpectatorPawn;                                     // 0x670(0x8)
	struct Vector                                                SpawnLocation;                                     // 0x678(0xc)
	char                                                         pad0x4_P62T9[0x4];                                 // 0x684(0x4)
	bool                                                         bIsLocalPlayerController;                          // 0x6ec(0x1)
	char                                                         pad0x1_BRAV2[0x1];                                 // 0x6ed(0x1)
	bool                                                         bInCinematicMode;                                  // 0x6f2(0x1)
	char                                                         pad0x55_MJ5C5[0x55];                               // 0x6f3(0x55)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModulePivotOffset: public ParticleModuleLocationBase
{
public:
	struct Vector2D                                              PivotOffset;                                       // 0x50(0x8)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class ParticleModuleVectorFieldRotation: public ParticleModuleVectorFieldBase
{
public:
	struct Vector                                                MinInitialRotation;                                // 0x50(0xc)
	struct Vector                                                MaxInitialRotation;                                // 0x5c(0xc)
};


// Size 0x128 (Full Size[0x1a8] - InheritedSize[0x80]
class MaterialExpressionTextureSample: public MaterialExpressionTextureBase
{
public:
	struct ExpressionInput                                       Coordinates;                                       // 0x80(0x38)
	struct ExpressionInput                                       TextureObject;                                     // 0xb8(0x38)
	struct ExpressionInput                                       MipValue;                                          // 0xf0(0x38)
	struct ExpressionInput                                       CoordinatesDX;                                     // 0x128(0x38)
	struct ExpressionInput                                       CoordinatesDY;                                     // 0x160(0x38)
	char                                                         MipValueMode;                                      // 0x198(0x1)
	char                                                         SamplerSource;                                     // 0x199(0x1)
	char                                                         pad0x2_A1UVB[0x2];                                 // 0x19a(0x2)
	int                                                          ConstMipValue;                                     // 0x1a0(0x4)
	char                                                         pad0x4_DXXOO[0x4];                                 // 0x1a4(0x4)
};


// Size 0x58 (Full Size[0xa8] - InheritedSize[0x50]
class ParticleModuleLocationEmitter: public ParticleModuleLocationBase
{
public:
	struct FName                                                 EmitterName;                                       // 0x50(0x8)
	char                                                         SelectionMethod;                                   // 0x58(0x1)
	char                                                         pad0x3_7WAAH[0x3];                                 // 0x59(0x3)
	bool                                                         InheritSourceVelocity;                             // 0x5c(0x1)
	char                                                         pad0x3_OQFWR[0x3];                                 // 0x5d(0x3)
	struct RawDistributionFloat                                  InheritSourceVelocityScaleDistribution;            // 0x60(0x38)
	bool                                                         bInheritSourceRotation;                            // 0x98(0x1)
	char                                                         pad0x3_V3ENV[0x3];                                 // 0x99(0x3)
	float                                                        InheritSourceRotationScale;                        // 0x9c(0x4)
	char                                                         MissingParentParticlesBehaviour;                   // 0xa0(0x1)
	char                                                         pad0x7_67GBQ[0x7];                                 // 0xa1(0x7)
};


// Size 0x0 (Full Size[0xd8] - InheritedSize[0xd8]
class LevelScriptBlueprint: public Blueprint
{
public:
};


// Size 0x78 (Full Size[0xc8] - InheritedSize[0x50]
class ParticleModuleColorScaleOverLife: public ParticleModuleColorBase
{
public:
	struct RawDistributionVector                                 ColorScaleOverLife;                                // 0x50(0x38)
	struct RawDistributionFloat                                  AlphaScaleOverLife;                                // 0x88(0x38)
	bool                                                         bEmitterTime;                                      // 0xc0(0x1)
	char                                                         pad0x7_ZW2K7[0x7];                                 // 0xc1(0x7)
};


// Size 0x158 (Full Size[0x1a8] - InheritedSize[0x50]
class ParticleModuleRotation: public ParticleModuleRotationBase
{
public:
	bool                                                         bUseGroupARotationForAllGroups;                    // 0x50(0x1)
	char                                                         pad0x7_7WSMW[0x7];                                 // 0x51(0x7)
	struct RawDistributionFloat                                  StartRotation;                                     // 0x58(0x38)
	struct RawDistributionFloat                                  AdditionalStartRotation;                           // 0x90(0x38)
	char                                                         pad0xe0_U0HQ6[0xe0];                               // 0xc8(0xe0)
};


// Size 0x10 (Full Size[0x68] - InheritedSize[0x58]
class ParticleModuleAccelerationDragScaleOverLife: public ParticleModuleAccelerationBase
{
public:
	class DistributionFloat*                                     DragScale;                                         // 0x58(0x8)
	class DistributionFloat*                                     DragLocalVelocityScale;                            // 0x60(0x8)
};


// Size 0x10 (Full Size[0x3b8] - InheritedSize[0x3a8]
class SceneCaptureCube: public SceneCapture
{
public:
	class SceneCaptureComponentCube*                             CaptureComponentCube;                              // 0x3a8(0x8)
	class DrawFrustumComponent*                                  DrawFrustum;                                       // 0x3b0(0x8)
};


// Size 0x0 (Full Size[0x3b0] - InheritedSize[0x3b0]
class TriggerSphere: public TriggerBase
{
public:
};


// Size 0xd0 (Full Size[0x120] - InheritedSize[0x50]
class ParticleModuleBeamTarget: public ParticleModuleBeamBase
{
public:
	char                                                         TargetMethod;                                      // 0x50(0x1)
	char                                                         pad0x3_C12C5[0x3];                                 // 0x51(0x3)
	struct FName                                                 TargetName;                                        // 0x54(0x8)
	char                                                         pad0x4_19UNX[0x4];                                 // 0x5c(0x4)
	struct RawDistributionVector                                 Target;                                            // 0x60(0x38)
	bool                                                         bTargetAbsolute;                                   // 0x98(0x1)
	bool                                                         bLockTarget;                                       // 0x98(0x1)
	char                                                         pad0x3_0AAC2[0x3];                                 // 0x99(0x3)
	char                                                         TargetTangentMethod;                               // 0x9c(0x1)
	char                                                         pad0x3_8EK3M[0x3];                                 // 0x9d(0x3)
	struct RawDistributionVector                                 TargetTangent;                                     // 0xa0(0x38)
	bool                                                         bLockTargetTangent;                                // 0xd8(0x1)
	char                                                         pad0x7_DY680[0x7];                                 // 0xd9(0x7)
	struct RawDistributionFloat                                  TargetStrength;                                    // 0xe0(0x38)
	bool                                                         bLockTargetStength;                                // 0x118(0x1)
	char                                                         pad0x3_ZI513[0x3];                                 // 0x119(0x3)
	float                                                        LockRadius;                                        // 0x11c(0x4)
};


// Size 0x150 (Full Size[0x1a0] - InheritedSize[0x50]
class ParticleModuleCollision: public ParticleModuleCollisionBase
{
public:
	struct RawDistributionVector                                 DampingFactor;                                     // 0x50(0x38)
	struct RawDistributionVector                                 DampingFactorRotation;                             // 0x88(0x38)
	struct RawDistributionFloat                                  MaxCollisions;                                     // 0xc0(0x38)
	char                                                         CollisionCompletionOption;                         // 0xf8(0x1)
	char                                                         pad0x7_TXYRR[0x7];                                 // 0xf9(0x7)
	TArray<char>                                                 CollisionTypes;                                    // 0x100(0x10)
	char                                                         pad0x4_OJCUR[0x4];                                 // 0x110(0x4)
	bool                                                         bApplyPhysics;                                     // 0x114(0x1)
	char                                                         pad0x3_WP7VF[0x3];                                 // 0x115(0x3)
	struct RawDistributionFloat                                  ParticleMass;                                      // 0x118(0x38)
	float                                                        DirScalar;                                         // 0x150(0x4)
	bool                                                         bPawnsDoNotDecrementCount;                         // 0x154(0x1)
	bool                                                         bOnlyVerticalNormalsDecrementCount;                // 0x154(0x1)
	char                                                         pad0x3_L8MYG[0x3];                                 // 0x155(0x3)
	float                                                        VerticalFudgeFactor;                               // 0x158(0x4)
	char                                                         pad0x4_681SL[0x4];                                 // 0x15c(0x4)
	struct RawDistributionFloat                                  DelayAmount;                                       // 0x160(0x38)
	bool                                                         bDropDetail;                                       // 0x198(0x1)
	bool                                                         bCollideOnlyIfVisible;                             // 0x198(0x1)
	bool                                                         bIgnoreSourceActor;                                // 0x198(0x1)
	bool                                                         bIgnoreCollisionsWithHiddenObjects;                // 0x198(0x1)
	char                                                         pad0x3_O3NSA[0x3];                                 // 0x199(0x3)
	float                                                        MaxCollisionDistance;                              // 0x19c(0x4)
};


// Size 0x18 (Full Size[0x1b0] - InheritedSize[0x198]
class CompressedCanvasRenderTarget2D: public Texture2D
{
public:
	char                                                         pad0x8_1VN3E[0x8];                                 // 0x198(0x8)
	class CanvasRenderTarget2D*                                  RenderTarget;                                      // 0x1a0(0x8)
	char                                                         pad0x8_Q1JME[0x8];                                 // 0x1a8(0x8)
};


// Size 0x68 (Full Size[0xb8] - InheritedSize[0x50]
class ParticleModuleKillSphere: public ParticleModuleKillBase
{
public:
	struct Vector                                                Centre;                                            // 0x50(0xc)
	float                                                        Radius;                                            // 0x5c(0x4)
	bool                                                         bUseGroupAForAll;                                  // 0x60(0x1)
	char                                                         pad0x3_4VCGU[0x3];                                 // 0x61(0x3)
	struct KillSphereGroupParams                                 AdditionalParams;                                  // 0x64(0x10)
	char                                                         pad0x44_N8N3H[0x44];                               // 0x74(0x44)
};


// Size 0x1b8 (Full Size[0x208] - InheritedSize[0x50]
class ParticleModuleLocationPrimitiveSphereSlice: public ParticleModuleLocationBase
{
public:
	struct RawDistributionFloat                                  StartRadius;                                       // 0x50(0x38)
	struct RawDistributionFloat                                  AdditionalStartRadiuses;                           // 0x88(0x38)
	char                                                         pad0xa8_JLNWD[0xa8];                               // 0xc0(0xa8)
	bool                                                         StartRadiusUseGroupAForAll;                        // 0x168(0x1)
	char                                                         pad0x3_QPK8F[0x3];                                 // 0x169(0x3)
	struct PrimitiveSphereEmitterAngleRanges                     AngleRanges;                                       // 0x16c(0x10)
	char                                                         pad0x10_8VUNQ[0x10];                               // 0x17c(0x10)
	float                                                        FirstSliceDistributionWeight;                      // 0x18c(0x4)
	bool                                                         SurfaceOnly;                                       // 0x190(0x1)
	bool                                                         Velocity;                                          // 0x190(0x1)
	char                                                         pad0x7_KHNC4[0x7];                                 // 0x191(0x7)
	struct RawDistributionFloat                                  VelocityScale;                                     // 0x198(0x38)
	struct RawDistributionVector                                 StartLocation;                                     // 0x1d0(0x38)
};


// Size 0x1e0 (Full Size[0x4b0] - InheritedSize[0x2d0]
class AtmosphericFogComponent: public SceneComponent
{
public:
	float                                                        SunMultiplier;                                     // 0x2d0(0x4)
	float                                                        FogMultiplier;                                     // 0x2d4(0x4)
	float                                                        DensityMultiplier;                                 // 0x2d8(0x4)
	float                                                        DensityOffset;                                     // 0x2dc(0x4)
	float                                                        DistanceScale;                                     // 0x2e0(0x4)
	float                                                        AltitudeScale;                                     // 0x2e4(0x4)
	float                                                        DistanceOffset;                                    // 0x2e8(0x4)
	float                                                        GroundOffset;                                      // 0x2ec(0x4)
	float                                                        StartDistance;                                     // 0x2f0(0x4)
	float                                                        SunDiscScale;                                      // 0x2f4(0x4)
	float                                                        DefaultBrightness;                                 // 0x2f8(0x4)
	struct Color                                                 DefaultLightColor;                                 // 0x2fc(0x4)
	bool                                                         bDisableSunDisk;                                   // 0x300(0x1)
	bool                                                         bDisableGroundScattering;                          // 0x300(0x1)
	char                                                         pad0x3_D5JOA[0x3];                                 // 0x301(0x3)
	struct AtmospherePrecomputeParameters                        PrecomputeParams;                                  // 0x304(0x2c)
	class Texture2D*                                             TransmittanceTexture;                              // 0x330(0x8)
	class Texture2D*                                             IrradianceTexture;                                 // 0x338(0x8)
	char                                                         pad0x170_OASRC[0x170];                             // 0x340(0x170)
};


// Size 0x10 (Full Size[0x346a0] - InheritedSize[0x34690]
class DemoNetConnection: public NetConnection
{
public:
	char                                                         pad0x10_TDRIF[0x10];                               // 0x34690(0x10)
};


// Size 0x8 (Full Size[0x50] - InheritedSize[0x48]
class SoundNodeParamCrossFade: public SoundNodeDistanceCrossFade
{
public:
	struct FName                                                 ParamName;                                         // 0x48(0x8)
};


// Size 0x78 (Full Size[0xc8] - InheritedSize[0x50]
class ParticleModuleLocationPrimitiveBase: public ParticleModuleLocationBase
{
public:
	bool                                                         Positive_X;                                        // 0x50(0x1)
	bool                                                         Positive_Y;                                        // 0x50(0x1)
	bool                                                         Positive_Z;                                        // 0x50(0x1)
	bool                                                         Negative_X;                                        // 0x50(0x1)
	bool                                                         Negative_Y;                                        // 0x50(0x1)
	bool                                                         Negative_Z;                                        // 0x50(0x1)
	bool                                                         SurfaceOnly;                                       // 0x50(0x1)
	bool                                                         Velocity;                                          // 0x50(0x1)
	char                                                         pad0x7_5PDFA[0x7];                                 // 0x51(0x7)
	struct RawDistributionFloat                                  VelocityScale;                                     // 0x58(0x38)
	struct RawDistributionVector                                 StartLocation;                                     // 0x90(0x38)
};


// Size 0x68 (Full Size[0xb8] - InheritedSize[0x50]
class ParticleModuleTrailSource: public ParticleModuleTrailBase
{
public:
	char                                                         SourceMethod;                                      // 0x50(0x1)
	char                                                         pad0x3_TCH59[0x3];                                 // 0x51(0x3)
	struct FName                                                 SourceName;                                        // 0x54(0x8)
	char                                                         pad0x4_FC413[0x4];                                 // 0x5c(0x4)
	struct RawDistributionFloat                                  SourceStrength;                                    // 0x60(0x38)
	bool                                                         bLockSourceStength;                                // 0x98(0x1)
	char                                                         pad0x3_HXBC7[0x3];                                 // 0x99(0x3)
	int                                                          SourceOffsetCount;                                 // 0x9c(0x4)
	TArray<struct Vector>                                        SourceOffsetDefaults;                              // 0xa0(0x10)
	char                                                         SelectionMethod;                                   // 0xb0(0x1)
	char                                                         pad0x3_QT2HU[0x3];                                 // 0xb1(0x3)
	bool                                                         bInheritRotation;                                  // 0xb4(0x1)
	char                                                         pad0x3_70RY2[0x3];                                 // 0xb5(0x3)
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class WaterEmissionVolumeComponent: public SceneComponent
{
public:
	float                                                        Radius;                                            // 0x2d0(0x4)
	float                                                        GenerationDensity;                                 // 0x2d4(0x4)
	char                                                         pad0x28_3UC0O[0x28];                               // 0x2d8(0x28)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ParticleModuleLocationBoneSocket: public ParticleModuleLocationBase
{
public:
	char                                                         SourceType;                                        // 0x50(0x1)
	char                                                         pad0x3_DUSFF[0x3];                                 // 0x51(0x3)
	struct Vector                                                UniversalOffset;                                   // 0x54(0xc)
	TArray<struct LocationBoneSocketInfo>                        SourceLocations;                                   // 0x60(0x10)
	char                                                         SelectionMethod;                                   // 0x70(0x1)
	char                                                         pad0x3_O59DU[0x3];                                 // 0x71(0x3)
	bool                                                         bUpdatePositionEachFrame;                          // 0x74(0x1)
	bool                                                         bOrientMeshEmitters;                               // 0x74(0x1)
	bool                                                         bInheritBoneVelocity;                              // 0x74(0x1)
	char                                                         pad0x3_1VTN9[0x3];                                 // 0x75(0x3)
	struct Vector                                                InheritVelocityScale;                              // 0x78(0xc)
	float                                                        InheritedSpeedCap;                                 // 0x84(0x4)
	struct FName                                                 SkelMeshActorParamName;                            // 0x88(0x8)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class InterpTrackColorProp: public InterpTrackVectorBase
{
public:
	struct FName                                                 PropertyName;                                      // 0x90(0x8)
};


// Size 0x8 (Full Size[0x420] - InheritedSize[0x418]
class MatineeActorCameraAnim: public MatineeActor
{
public:
	class CameraAnim*                                            CameraAnim;                                        // 0x418(0x8)
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class RadialForceComponent: public SceneComponent
{
public:
	float                                                        Radius;                                            // 0x2d0(0x4)
	char                                                         Falloff;                                           // 0x2d4(0x1)
	char                                                         pad0x3_6LI7E[0x3];                                 // 0x2d5(0x3)
	float                                                        ImpulseStrength;                                   // 0x2d8(0x4)
	bool                                                         bImpulseVelChange;                                 // 0x2dc(0x1)
	bool                                                         bIgnoreOwningActor;                                // 0x2dc(0x1)
	char                                                         pad0x3_D4YZR[0x3];                                 // 0x2dd(0x3)
	float                                                        ForceStrength;                                     // 0x2e0(0x4)
	float                                                        DestructibleDamage;                                // 0x2e4(0x4)
	TArray<char>                                                 ObjectTypesToAffect;                               // 0x2e8(0x10)
	char                                                         pad0x8_DLDKQ[0x8];                                 // 0x2f8(0x8)
};


// Size 0x48 (Full Size[0x3e8] - InheritedSize[0x3a0]
class GameState: public Info
{
public:
	class UClass*                                                GameModeClass;                                     // 0x3a0(0x8)
	class GameMode*                                              AuthorityGameMode;                                 // 0x3a8(0x8)
	class UClass*                                                SpectatorClass;                                    // 0x3b0(0x8)
	struct FName                                                 MatchState;                                        // 0x3b8(0x8)
	struct FName                                                 PreviousMatchState;                                // 0x3c0(0x8)
	TArray<class PlayerState*>                                   PlayerArray;                                       // 0x3c8(0x10)
	float                                                        ReplicatedWorldTimeSeconds;                        // 0x3d8(0x4)
	float                                                        ServerWorldTimeSecondsDelta;                       // 0x3dc(0x4)
	float                                                        ServerWorldTimeSecondsUpdateFrequency;             // 0x3e0(0x4)
	char                                                         pad0x4_6KQYF[0x4];                                 // 0x3e4(0x4)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class InterpTrackInstColorProp: public InterpTrackInstProperty
{
public:
	char                                                         pad0x8_QGXX9[0x8];                                 // 0x38(0x8)
	struct Color                                                 ResetColor;                                        // 0x40(0x4)
	char                                                         pad0x4_Z1694[0x4];                                 // 0x44(0x4)
};


// Size 0x90 (Full Size[0x360] - InheritedSize[0x2d0]
class SpringArmComponent: public SceneComponent
{
public:
	float                                                        TargetArmLength;                                   // 0x2d0(0x4)
	struct Vector                                                SocketOffset;                                      // 0x2d4(0xc)
	struct Vector                                                TargetOffset;                                      // 0x2e0(0xc)
	float                                                        ProbeSize;                                         // 0x2ec(0x4)
	char                                                         ProbeChannel;                                      // 0x2f0(0x1)
	char                                                         pad0x3_D2CLY[0x3];                                 // 0x2f1(0x3)
	bool                                                         bDoCollisionTest;                                  // 0x2f4(0x1)
	bool                                                         bUsePawnControlRotation;                           // 0x2f4(0x1)
	bool                                                         bInheritPitch;                                     // 0x2f4(0x1)
	bool                                                         bInheritYaw;                                       // 0x2f4(0x1)
	bool                                                         bInheritRoll;                                      // 0x2f4(0x1)
	bool                                                         bEnableCameraLag;                                  // 0x2f4(0x1)
	bool                                                         bEnableCameraRotationLag;                          // 0x2f4(0x1)
	bool                                                         bUseCameraLagSubstepping;                          // 0x2f4(0x1)
	bool                                                         bDrawDebugLagMarkers;                              // 0x2f5(0x1)
	char                                                         pad0x2_NAY4G[0x2];                                 // 0x2f6(0x2)
	float                                                        CameraLagSpeed;                                    // 0x2f8(0x4)
	float                                                        CameraRotationLagSpeed;                            // 0x2fc(0x4)
	float                                                        CameraLagMaxTimeStep;                              // 0x300(0x4)
	float                                                        CameraLagMaxDistance;                              // 0x304(0x4)
	char                                                         pad0x58_D3KXY[0x58];                               // 0x308(0x58)
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class NavigationGraphNodeComponent: public SceneComponent
{
public:
	struct NavGraphNode                                          Node;                                              // 0x2d0(0x18)
	class NavigationGraphNodeComponent*                          NextNodeComponent;                                 // 0x2e8(0x8)
	class NavigationGraphNodeComponent*                          PrevNodeComponent;                                 // 0x2f0(0x8)
	char                                                         pad0x8_XRBB2[0x8];                                 // 0x2f8(0x8)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class ParticleModuleTypeDataAnimTrail: public ParticleModuleTypeDataBase
{
public:
	bool                                                         bDeadTrailsOnDeactivate;                           // 0x50(0x1)
	bool                                                         bEnablePreviousTangentRecalculation;               // 0x50(0x1)
	bool                                                         bTangentRecalculationEveryFrame;                   // 0x50(0x1)
	char                                                         pad0x3_K0DXZ[0x3];                                 // 0x51(0x3)
	float                                                        TilingDistance;                                    // 0x54(0x4)
	float                                                        DistanceTessellationStepSize;                      // 0x58(0x4)
	float                                                        TangentTessellationStepSize;                       // 0x5c(0x4)
	float                                                        WidthTessellationStepSize;                         // 0x60(0x4)
	char                                                         pad0x4_M30Z9[0x4];                                 // 0x64(0x4)
};


// Size 0x0 (Full Size[0x560] - InheritedSize[0x560]
class NavigationGraph: public NavigationData
{
public:
};


// Size 0x38 (Full Size[0x88] - InheritedSize[0x50]
class ParticleModuleMeshRotationRate: public ParticleModuleRotationRateBase
{
public:
	struct RawDistributionVector                                 StartRotationRate;                                 // 0x50(0x38)
};


// Size 0x28 (Full Size[0x100] - InheritedSize[0xd8]
class AnimBlueprint: public Blueprint
{
public:
	class Skeleton*                                              TargetSkeleton;                                    // 0xd8(0x8)
	TArray<struct AnimGroupInfo>                                 Groups;                                            // 0xe0(0x10)
	TArray<struct Name>                                          SkeletonSlotNames;                                 // 0xf0(0x10)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class SkyLight: public Info
{
public:
	class SkyLightComponent*                                     LightComponent;                                    // 0x3a0(0x8)
	bool                                                         bEnabled;                                          // 0x3a8(0x1)
	char                                                         pad0x7_6T5SR[0x7];                                 // 0x3a9(0x7)
};


// Size 0x138 (Full Size[0x188] - InheritedSize[0x50]
class ParticleModuleTypeDataBeam2: public ParticleModuleTypeDataBase
{
public:
	char                                                         BeamMethod;                                        // 0x50(0x1)
	char                                                         pad0x3_RITRH[0x3];                                 // 0x51(0x3)
	int                                                          TextureTile;                                       // 0x54(0x4)
	float                                                        TextureTileDistance;                               // 0x58(0x4)
	int                                                          Sheets;                                            // 0x5c(0x4)
	int                                                          MaxBeamCount;                                      // 0x60(0x4)
	float                                                        Speed;                                             // 0x64(0x4)
	int                                                          InterpolationPoints;                               // 0x68(0x4)
	bool                                                         bAlwaysOn;                                         // 0x6c(0x1)
	char                                                         pad0x3_OTQ9B[0x3];                                 // 0x6d(0x3)
	int                                                          UpVectorStepSize;                                  // 0x70(0x4)
	struct FName                                                 BranchParentName;                                  // 0x74(0x8)
	char                                                         pad0x4_08G9G[0x4];                                 // 0x7c(0x4)
	struct RawDistributionFloat                                  Distance;                                          // 0x80(0x38)
	char                                                         TaperMethod;                                       // 0xb8(0x1)
	char                                                         pad0x7_ZT1J2[0x7];                                 // 0xb9(0x7)
	struct RawDistributionFloat                                  TaperFactor;                                       // 0xc0(0x38)
	struct RawDistributionFloat                                  TaperScale;                                        // 0xf8(0x38)
	bool                                                         RenderGeometry;                                    // 0x130(0x1)
	bool                                                         RenderDirectLine;                                  // 0x130(0x1)
	bool                                                         RenderLines;                                       // 0x130(0x1)
	bool                                                         RenderTessellation;                                // 0x130(0x1)
	char                                                         pad0x7_4BGTB[0x7];                                 // 0x131(0x7)
	TArray<class ParticleModuleBeamSource*>                      LOD_BeamModule_Source;                             // 0x138(0x10)
	TArray<class ParticleModuleBeamTarget*>                      LOD_BeamModule_Target;                             // 0x148(0x10)
	TArray<class ParticleModuleBeamNoise*>                       LOD_BeamModule_Noise;                              // 0x158(0x10)
	TArray<class ParticleModuleBeamModifier*>                    LOD_BeamModule_SourceModifier;                     // 0x168(0x10)
	TArray<class ParticleModuleBeamModifier*>                    LOD_BeamModule_TargetModifier;                     // 0x178(0x10)
};


// Size 0xf8 (Full Size[0x498] - InheritedSize[0x3a0]
class GameMode: public Info
{
public:
	char                                                         pad0x8_EJ5RX[0x8];                                 // 0x3a0(0x8)
	bool                                                         bDisableAsyncOcclusionChecking;                    // 0x3a8(0x1)
	bool                                                         bUseSeamlessTravel;                                // 0x3a8(0x1)
	bool                                                         bPauseable;                                        // 0x3a8(0x1)
	bool                                                         bStartPlayersAsSpectators;                         // 0x3a8(0x1)
	bool                                                         bDelayedStart;                                     // 0x3a8(0x1)
	char                                                         pad0x7_FWVVP[0x7];                                 // 0x3a9(0x7)
	struct FString                                               OptionsString;                                     // 0x3b0(0x10)
	class UClass*                                                DefaultPawnClass;                                  // 0x3c0(0x8)
	class UClass*                                                HUDClass;                                          // 0x3c8(0x8)
	int                                                          NumSpectators;                                     // 0x3d0(0x4)
	int                                                          NumPlayers;                                        // 0x3d4(0x4)
	int                                                          NumBots;                                           // 0x3d8(0x4)
	float                                                        MinRespawnDelay;                                   // 0x3dc(0x4)
	class GameSession*                                           GameSession;                                       // 0x3e0(0x8)
	int                                                          NumTravellingPlayers;                              // 0x3e8(0x4)
	char                                                         pad0x4_8Y7YI[0x4];                                 // 0x3ec(0x4)
	struct FText                                                 DefaultPlayerName;                                 // 0x3f0(0x38)
	class UClass*                                                EngineMessageClass;                                // 0x428(0x8)
	class UClass*                                                PlayerControllerClass;                             // 0x430(0x8)
	class UClass*                                                SpectatorClass;                                    // 0x438(0x8)
	class UClass*                                                ReplaySpectatorPlayerControllerClass;              // 0x440(0x8)
	class UClass*                                                PlayerStateClass;                                  // 0x448(0x8)
	class UClass*                                                GameStateClass;                                    // 0x450(0x8)
	class GameState*                                             GameState;                                         // 0x458(0x8)
	TArray<class PlayerState*>                                   InactivePlayerArray;                               // 0x460(0x10)
	char                                                         pad0x10_UD1QZ[0x10];                               // 0x470(0x10)
	TArray<struct GameClassShortName>                            GameModeClassAliases;                              // 0x480(0x10)
	float                                                        InactivePlayerStateLifeSpan;                       // 0x490(0x4)
	bool                                                         bHandleDedicatedServerReplays;                     // 0x494(0x1)
	char                                                         pad0x3_E7L6T[0x3];                                 // 0x495(0x3)
};


// Size 0x98 (Full Size[0x198] - InheritedSize[0x100]
class InterpToMovementComponent: public MovementComponent
{
public:
	float                                                        Duration;                                          // 0x100(0x4)
	bool                                                         bPauseOnImpact;                                    // 0x104(0x1)
	char                                                         pad0x3_8CCYI[0x3];                                 // 0x105(0x3)
	char                                                         BehaviourType;                                     // 0x108(0x1)
	char                                                         pad0x3_LCB0Y[0x3];                                 // 0x109(0x3)
	bool                                                         bForceSubStepping;                                 // 0x10c(0x1)
	char                                                         pad0x3_P7NIX[0x3];                                 // 0x10d(0x3)
	float                                                        MaxSimulationTimeStep;                             // 0x160(0x4)
	int                                                          MaxSimulationIterations;                           // 0x164(0x4)
	TArray<struct InterpControlPoint>                            ControlPoints;                                     // 0x168(0x10)
	char                                                         pad0x20_MFND6[0x20];                               // 0x178(0x20)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ParticleModuleMurkyColor: public ParticleModuleColorBase
{
public:
	struct LinearColor                                           ColorScale;                                        // 0x50(0x10)
};


// Size 0x80 (Full Size[0xe0] - InheritedSize[0x60]
class AnimCompress_PerTrackCompression: public AnimCompress_RemoveLinearKeys
{
public:
	float                                                        MaxZeroingThreshold;                               // 0x60(0x4)
	float                                                        MaxPosDiffBitwise;                                 // 0x64(0x4)
	float                                                        MaxAngleDiffBitwise;                               // 0x68(0x4)
	float                                                        MaxScaleDiffBitwise;                               // 0x6c(0x4)
	TArray<char>                                                 AllowedRotationFormats;                            // 0x70(0x10)
	TArray<char>                                                 AllowedTranslationFormats;                         // 0x80(0x10)
	TArray<char>                                                 AllowedScaleFormats;                               // 0x90(0x10)
	bool                                                         bResampleAnimation;                                // 0xa0(0x1)
	char                                                         pad0x3_6ZG3J[0x3];                                 // 0xa1(0x3)
	float                                                        ResampledFramerate;                                // 0xa4(0x4)
	int                                                          MinKeysForResampling;                              // 0xa8(0x4)
	bool                                                         bUseAdaptiveError;                                 // 0xac(0x1)
	bool                                                         bUseOverrideForEndEffectors;                       // 0xac(0x1)
	char                                                         pad0x3_Y0Q07[0x3];                                 // 0xad(0x3)
	int                                                          TrackHeightBias;                                   // 0xb0(0x4)
	float                                                        ParentingDivisor;                                  // 0xb4(0x4)
	float                                                        ParentingDivisorExponent;                          // 0xb8(0x4)
	bool                                                         bUseAdaptiveError2;                                // 0xbc(0x1)
	char                                                         pad0x3_53HKT[0x3];                                 // 0xbd(0x3)
	float                                                        RotationErrorSourceRatio;                          // 0xc0(0x4)
	float                                                        TranslationErrorSourceRatio;                       // 0xc4(0x4)
	float                                                        ScaleErrorSourceRatio;                             // 0xc8(0x4)
	float                                                        MaxErrorPerTrackRatio;                             // 0xcc(0x4)
	float                                                        PerturbationProbeSize;                             // 0xd0(0x4)
	char                                                         pad0xc_YEF8J[0xc];                                 // 0xd4(0xc)
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class Volume: public Brush
{
public:
};


// Size 0x8 (Full Size[0x110] - InheritedSize[0x108]
class BlendSpace1D: public BlendSpaceBase
{
public:
	bool                                                         bScaleAnimation;                                   // 0x108(0x1)
	char                                                         pad0x7_E9SKO[0x7];                                 // 0x109(0x7)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class DistributionVectorUniformCurve: public DistributionVector
{
public:
	struct InterpCurveTwoVectors                                 ConstantCurve;                                     // 0x38(0x18)
	bool                                                         bLockAxes1;                                        // 0x50(0x1)
	bool                                                         bLockAxes2;                                        // 0x50(0x1)
	char                                                         pad0x3_RFNE3[0x3];                                 // 0x51(0x3)
	char                                                         LockedAxes;                                        // 0x54(0x1)
	char                                                         pad0x1_PZWRG[0x1];                                 // 0x55(0x1)
	char                                                         MirrorFlags;                                       // 0x56(0x1)
	char                                                         pad0x5_DIC3K[0x5];                                 // 0x57(0x5)
	bool                                                         bUseExtremes;                                      // 0x5c(0x1)
	char                                                         pad0x3_AG1FO[0x3];                                 // 0x5d(0x3)
};


// Size 0x158 (Full Size[0x1a8] - InheritedSize[0x50]
class ParticleModuleLocationGPU: public ParticleModuleLocationBase
{
public:
	struct RawDistributionVector                                 StartLocation;                                     // 0x50(0x38)
	struct RawDistributionVector                                 AdditionalStartLocations;                          // 0x88(0x38)
	char                                                         pad0xe0_O7MML[0xe0];                               // 0xc0(0xe0)
	bool                                                         bUseGroupAStartLocationForAllGroups;               // 0x1a0(0x1)
	char                                                         pad0x7_JFMLC[0x7];                                 // 0x1a1(0x7)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class DistributionVectorConstantCurve: public DistributionVector
{
public:
	struct InterpCurveVector                                     ConstantCurve;                                     // 0x38(0x18)
	bool                                                         bLockAxes;                                         // 0x50(0x1)
	char                                                         pad0x3_EDKA7[0x3];                                 // 0x51(0x3)
	char                                                         LockedAxes;                                        // 0x54(0x1)
	char                                                         pad0x3_CM9D3[0x3];                                 // 0x55(0x3)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InputTouchDelegateBinding: public InputDelegateBinding
{
public:
	TArray<struct BlueprintInputTouchDelegateBinding>            InputTouchDelegateBindings;                        // 0x28(0x10)
};


// Size 0x38 (Full Size[0x88] - InheritedSize[0x50]
class ParticleModuleMeshRotationRateMultiplyLife: public ParticleModuleRotationRateBase
{
public:
	struct RawDistributionVector                                 LifeMultiplier;                                    // 0x50(0x38)
};


// Size 0x0 (Full Size[0x1b8] - InheritedSize[0x1b8]
class MaterialInstanceConstant: public MaterialInstance
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class DistributionFloatUniform: public DistributionFloat
{
public:
	float                                                        Max;                                               // 0x38(0x4)
	float                                                        Min;                                               // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InputKeyDelegateBinding: public InputDelegateBinding
{
public:
	TArray<struct BlueprintInputKeyDelegateBinding>              InputKeyDelegateBindings;                          // 0x28(0x10)
};


// Size 0x20 (Full Size[0xb0] - InheritedSize[0x90]
class InterpTrackAnimControl: public InterpTrackFloatBase
{
public:
	struct FName                                                 SlotName;                                          // 0x90(0x8)
	TArray<struct AnimControlTrackKey>                           AnimSeqs;                                          // 0x98(0x10)
	bool                                                         bSkipAnimNotifiers;                                // 0xa8(0x1)
	char                                                         pad0x7_P3RHQ[0x7];                                 // 0xa9(0x7)
};


// Size 0x88 (Full Size[0xd8] - InheritedSize[0x50]
class ParticleModuleAttractorLine: public ParticleModuleAttractorBase
{
public:
	struct Vector                                                EndPoint0;                                         // 0x50(0xc)
	struct Vector                                                EndPoint1;                                         // 0x5c(0xc)
	struct RawDistributionFloat                                  Range;                                             // 0x68(0x38)
	struct RawDistributionFloat                                  Strength;                                          // 0xa0(0x38)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ParticleModuleVectorFieldScaleOverLife: public ParticleModuleVectorFieldBase
{
public:
	class DistributionFloat*                                     VectorFieldScaleOverLife;                          // 0x50(0x8)
};


// Size 0x570 (Full Size[0x840] - InheritedSize[0x2d0]
class CameraComponent: public SceneComponent
{
public:
	float                                                        FieldOfView;                                       // 0x2d0(0x4)
	float                                                        OrthoWidth;                                        // 0x2d4(0x4)
	float                                                        OrthoNearClipPlane;                                // 0x2d8(0x4)
	float                                                        OrthoFarClipPlane;                                 // 0x2dc(0x4)
	float                                                        AspectRatio;                                       // 0x2e0(0x4)
	bool                                                         bConstrainAspectRatio;                             // 0x2e4(0x1)
	bool                                                         bUseFieldOfViewForLOD;                             // 0x2e4(0x1)
	bool                                                         bUsePawnControlRotation;                           // 0x2e4(0x1)
	char                                                         pad0x3_XR08T[0x3];                                 // 0x2e5(0x3)
	char                                                         ProjectionMode;                                    // 0x2e8(0x1)
	char                                                         pad0x3_3JPXK[0x3];                                 // 0x2e9(0x3)
	float                                                        PostProcessBlendWeight;                            // 0x2ec(0x4)
	struct PostProcessSettings                                   PostProcessSettings;                               // 0x2f0(0x540)
	bool                                                         bUseControllerViewRotation;                        // 0x830(0x1)
	char                                                         pad0xf_AA4XP[0xf];                                 // 0x831(0xf)
};


// Size 0x40 (Full Size[0x98] - InheritedSize[0x58]
class ParticleModuleAccelerationEmitterPoint: public ParticleModuleAccelerationBase
{
public:
	struct RawDistributionFloat                                  AccelerationScale;                                 // 0x58(0x38)
	bool                                                         bApplyOwnerScale;                                  // 0x90(0x1)
	char                                                         pad0x7_HWCP1[0x7];                                 // 0x91(0x7)
};


// Size 0x38 (Full Size[0x88] - InheritedSize[0x50]
class ParticleModuleRotationRateMultiplyLife: public ParticleModuleRotationRateBase
{
public:
	struct RawDistributionFloat                                  LifeMultiplier;                                    // 0x50(0x38)
};


// Size 0x2f0 (Full Size[0x5c0] - InheritedSize[0x2d0]
class PrimitiveComponent: public SceneComponent
{
public:
	char                                                         pad0x8_W32FG[0x8];                                 // 0x2d0(0x8)
	float                                                        MinDrawDistance;                                   // 0x2d8(0x4)
	char                                                         pad0x4_7UVSK[0x4];                                 // 0x2dc(0x4)
	float                                                        LDMaxDrawDistance;                                 // 0x2e0(0x4)
	float                                                        CachedMaxDrawDistance;                             // 0x2e4(0x4)
	char                                                         DepthPriorityGroup;                                // 0x2e8(0x1)
	char                                                         ViewOwnerDepthPriorityGroup;                       // 0x2e9(0x1)
	char                                                         pad0x2_NHWI6[0x2];                                 // 0x2ea(0x2)
	bool                                                         bAlwaysCreatePhysicsState;                         // 0x2ec(0x1)
	bool                                                         bGenerateOverlapEvents;                            // 0x2ec(0x1)
	bool                                                         bMultiBodyOverlap;                                 // 0x2ec(0x1)
	bool                                                         bCheckAsyncSceneOnMove;                            // 0x2ec(0x1)
	bool                                                         bTraceComplexOnMove;                               // 0x2ec(0x1)
	bool                                                         bReturnMaterialOnMove;                             // 0x2ec(0x1)
	bool                                                         bUseViewOwnerDepthPriorityGroup;                   // 0x2ec(0x1)
	bool                                                         bAllowCullDistanceVolume;                          // 0x2ec(0x1)
	bool                                                         bHasMotionBlurVelocityMeshes;                      // 0x2ed(0x1)
	bool                                                         bRenderInMainPass;                                 // 0x2ed(0x1)
	bool                                                         bRenderInCustomPrePass;                            // 0x2ed(0x1)
	bool                                                         bReflected;                                        // 0x2ed(0x1)
	bool                                                         bReflectedOnLowQuality;                            // 0x2ed(0x1)
	bool                                                         bFFTWaterMask;                                     // 0x2ed(0x1)
	bool                                                         bVolumeFogMask;                                    // 0x2ed(0x1)
	bool                                                         bAffectsFlatWater;                                 // 0x2ee(0x1)
	bool                                                         bGPUParticlesKillPlane;                            // 0x2ee(0x1)
	bool                                                         bDontCull;                                         // 0x2ee(0x1)
	bool                                                         bDontSizeOnScreenCull;                             // 0x2ee(0x1)
	char                                                         pad0x1_EQIQH[0x1];                                 // 0x2ef(0x1)
	float                                                        OverriddenShadowMinTexelSize;                      // 0x2f0(0x4)
	bool                                                         bOverrideShadowMinSizeCulling;                     // 0x2f4(0x1)
	bool                                                         bOverrideShadowCascadesExclusion;                  // 0x2f5(0x1)
	char                                                         ExcludedShadowCascades;                            // 0x2f6(0x1)
	char                                                         pad0x1_29IWF[0x1];                                 // 0x2f7(0x1)
	bool                                                         bReceivesDecals;                                   // 0x2f8(0x1)
	bool                                                         bOwnerNoSee;                                       // 0x2f8(0x1)
	bool                                                         bOnlyOwnerSee;                                     // 0x2f8(0x1)
	bool                                                         bTreatAsBackgroundForOcclusion;                    // 0x2f8(0x1)
	bool                                                         bIsACloud;                                         // 0x2f8(0x1)
	bool                                                         bUseAsOccluder;                                    // 0x2f8(0x1)
	bool                                                         bSelectable;                                       // 0x2f8(0x1)
	bool                                                         bForceMipStreaming;                                // 0x2f8(0x1)
	bool                                                         bHasPerInstanceHitProxies;                         // 0x2f9(0x1)
	bool                                                         CastShadow;                                        // 0x2f9(0x1)
	bool                                                         bAffectDynamicIndirectLighting;                    // 0x2f9(0x1)
	bool                                                         bUseFarCascadeLPVBiasMultiplier;                   // 0x2f9(0x1)
	bool                                                         bAffectDistanceFieldLighting;                      // 0x2f9(0x1)
	bool                                                         bCastDynamicShadow;                                // 0x2f9(0x1)
	bool                                                         bCastStaticShadow;                                 // 0x2f9(0x1)
	bool                                                         bCastVolumetricTranslucentShadow;                  // 0x2f9(0x1)
	bool                                                         bSelfShadowOnly;                                   // 0x2fa(0x1)
	bool                                                         bCastFarShadow;                                    // 0x2fa(0x1)
	bool                                                         bCastInsetShadow;                                  // 0x2fa(0x1)
	bool                                                         bCastCinematicShadow;                              // 0x2fa(0x1)
	bool                                                         bCastHiddenShadow;                                 // 0x2fa(0x1)
	bool                                                         bCastShadowAsTwoSided;                             // 0x2fa(0x1)
	bool                                                         bCastShadowOnLowQuality;                           // 0x2fa(0x1)
	bool                                                         bLightAsIfStatic;                                  // 0x2fa(0x1)
	bool                                                         bLightAttachmentsAsGroup;                          // 0x2fb(0x1)
	char                                                         IndirectLightingCacheQuality;                      // 0x2fc(0x1)
	bool                                                         bHasCachedStaticLighting;                          // 0x2fd(0x1)
	bool                                                         bStaticLightingBuildEnqueued;                      // 0x2fe(0x1)
	char                                                         pad0x1_UW3E0[0x1];                                 // 0x2ff(0x1)
	bool                                                         bIgnoreRadialImpulse;                              // 0x300(0x1)
	bool                                                         bIgnoreRadialForce;                                // 0x300(0x1)
	bool                                                         AlwaysLoadOnClient;                                // 0x300(0x1)
	bool                                                         AlwaysLoadOnServer;                                // 0x300(0x1)
	bool                                                         bUseEditorCompositing;                             // 0x300(0x1)
	bool                                                         bRenderCustomDepth;                                // 0x300(0x1)
	bool                                                         bAllowVelocityInMaterial;                          // 0x300(0x1)
	char                                                         pad0x3_GFG1L[0x3];                                 // 0x301(0x3)
	int                                                          CustomDepthStencilValue;                           // 0x304(0x4)
	int                                                          TranslucencySortPriority;                          // 0x308(0x4)
	int                                                          VisibilityId;                                      // 0x30c(0x4)
	char                                                         pad0x4_RSS3U[0x4];                                 // 0x310(0x4)
	float                                                        LpvBiasMultiplier;                                 // 0x314(0x4)
	float                                                        FarCascadeLPVBiasMultiplier;                       // 0x318(0x4)
	float                                                        LpvIntensityMultiplier;                            // 0x31c(0x4)
	struct CustomPrimitiveData                                   CustomPrimitiveData;                               // 0x320(0x10)
	struct BodyInstance                                          BodyInstance;                                      // 0x330(0x180)
	bool                                                         bAffectRain;                                       // 0x4b0(0x1)
	bool                                                         bCanEverAffectNavigation;                          // 0x4b0(0x1)
	bool                                                         bSkipRenderingInOuterLPVCascades;                  // 0x4b0(0x1)
	bool                                                         bEnableMergeCollisionComponents;                   // 0x4b0(0x1)
	bool                                                         bVisibleWhenAboveWaterAndPlayerUnderwater;         // 0x4b0(0x1)
	bool                                                         bVisibleWhenAboveWaterAndPlayerAbove;              // 0x4b0(0x1)
	bool                                                         bVisibleWhenUnderwaterAndPlayerAbove;              // 0x4b0(0x1)
	bool                                                         bVisibleWhenUnderwaterAndPlayerUnderwater;         // 0x4b1(0x1)
	bool                                                         bCanRenderAboveAndBelowWaterAtSameTime;            // 0x4b1(0x1)
	char                                                         pad0x6_I7QI8[0x6];                                 // 0x4b2(0x6)
	float                                                        BoundsScale;                                       // 0x4b8(0x4)
	float                                                        OcclusionBoundsScale;                              // 0x4bc(0x4)
	float                                                        LastRenderTime;                                    // 0x4c0(0x4)
	bool                                                         bGPUVisibility;                                    // 0x4c4(0x1)
	char                                                         bHasCustomNavigableGeometry;                       // 0x4c5(0x1)
	char                                                         CanCharacterStepUpOn;                              // 0x4c6(0x1)
	char                                                         pad0x59_TJFYK[0x59];                               // 0x4c7(0x59)
	class PrimitiveComponent*                                    LODParentPrimitive;                                // 0x558(0x8)
	struct PrimitiveComponentPostPhysicsTickFunction             PostPhysicsComponentTick;                          // 0x560(0x50)
	class PrimitiveComponent*                                    MergedCollisionComponentParent;                    // 0x5b0(0x8)
	char                                                         pad0x8_ILQZC[0x8];                                 // 0x5b8(0x8)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class ParticleModuleParameterDynamic: public ParticleModuleParameterBase
{
public:
	TArray<struct EmitterDynamicParameter>                       DynamicParams;                                     // 0x50(0x10)
	int                                                          UpdateFlags;                                       // 0x60(0x4)
	bool                                                         bUsesVelocity;                                     // 0x64(0x1)
	char                                                         pad0x3_UYYBV[0x3];                                 // 0x65(0x3)
};


// Size 0x20 (Full Size[0x2f0] - InheritedSize[0x2d0]
class ChildActorComponent: public SceneComponent
{
public:
	class UClass*                                                ChildActorClass;                                   // 0x2d0(0x8)
	class Actor*                                                 ChildActor;                                        // 0x2d8(0x8)
	char                                                         pad0x10_E0SC2[0x10];                               // 0x2e0(0x10)
};


// Size 0x40 (Full Size[0x98] - InheritedSize[0x58]
class ParticleModuleVelocityOverLifetime: public ParticleModuleVelocityBase
{
public:
	struct RawDistributionVector                                 VelOverLife;                                       // 0x58(0x38)
	bool                                                         Absolute;                                          // 0x90(0x1)
	char                                                         pad0x7_K5P57[0x7];                                 // 0x91(0x7)
};


// Size 0x28 (Full Size[0x440] - InheritedSize[0x418]
class DefaultPawn: public Pawn
{
public:
	float                                                        BaseTurnRate;                                      // 0x418(0x4)
	float                                                        BaseLookUpRate;                                    // 0x41c(0x4)
	class PawnMovementComponent*                                 MovementComponent;                                 // 0x420(0x8)
	class SphereComponent*                                       CollisionComponent;                                // 0x428(0x8)
	class StaticMeshComponent*                                   MeshComponent;                                     // 0x430(0x8)
	bool                                                         bAddDefaultMovementBindings;                       // 0x438(0x1)
	char                                                         pad0x7_O2A5C[0x7];                                 // 0x439(0x7)
};


// Size 0x0 (Full Size[0x5c0] - InheritedSize[0x5c0]
class NavTestRenderingComponent: public PrimitiveComponent
{
public:
};


// Size 0x20 (Full Size[0x88] - InheritedSize[0x68]
class ParticleModuleParameterDynamic_Seeded: public ParticleModuleParameterDynamic
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x68(0x20)
};


// Size 0x0 (Full Size[0x3d0] - InheritedSize[0x3d0]
class PlayerStartPIE: public PlayerStart
{
public:
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class TriggerVolume: public Volume
{
public:
};


// Size 0x0 (Full Size[0x178] - InheritedSize[0x178]
class ParticleModuleLocationWorldOffset: public ParticleModuleLocation
{
public:
};


// Size 0x10 (Full Size[0x5d0] - InheritedSize[0x5c0]
class MeshComponent: public PrimitiveComponent
{
public:
	TArray<class MaterialInterface*>                             OverrideMaterials;                                 // 0x5b8(0x10)
	char                                                         pad0x8_21LHI[0x8];                                 // 0x5c8(0x8)
};


// Size 0x10 (Full Size[0x5d0] - InheritedSize[0x5c0]
class BaseWaterComponent: public PrimitiveComponent
{
public:
	class UClass*                                                WaterId;                                           // 0x5b8(0x8)
	bool                                                         ActiveInExclusionZone;                             // 0x5c0(0x1)
	char                                                         pad0xf_WNAMF[0xf];                                 // 0x5c1(0xf)
};


// Size 0x20 (Full Size[0x328] - InheritedSize[0x308]
class ParticleModuleColor_Seeded: public ParticleModuleColor
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x308(0x20)
};


// Size 0x20 (Full Size[0x1c8] - InheritedSize[0x1a8]
class ParticleModuleRotationRate_Seeded: public ParticleModuleRotationRate
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x1a8(0x20)
};


// Size 0x60 (Full Size[0x620] - InheritedSize[0x5c0]
class TextRenderComponent: public PrimitiveComponent
{
public:
	struct FText                                                 Text;                                              // 0x5b8(0x38)
	class MaterialInterface*                                     TextMaterial;                                      // 0x5f0(0x8)
	class Font*                                                  Font;                                              // 0x5f8(0x8)
	char                                                         HorizontalAlignment;                               // 0x600(0x1)
	char                                                         VerticalAlignment;                                 // 0x601(0x1)
	char                                                         pad0x2_64PSC[0x2];                                 // 0x602(0x2)
	struct Color                                                 TextRenderColor;                                   // 0x604(0x4)
	float                                                        XScale;                                            // 0x608(0x4)
	float                                                        YScale;                                            // 0x60c(0x4)
	float                                                        WorldSize;                                         // 0x610(0x4)
	float                                                        InvDefaultSize;                                    // 0x614(0x4)
	float                                                        HorizSpacingAdjust;                                // 0x618(0x4)
	bool                                                         bAlwaysRenderAsText;                               // 0x61c(0x1)
	char                                                         pad0x3_ZJ9K1[0x3];                                 // 0x61d(0x3)
};


// Size 0x10 (Full Size[0x300] - InheritedSize[0x2f0]
class EditorOnlyChildActorComponent: public ChildActorComponent
{
public:
	class UClass*                                                CachedChildActorClass;                             // 0x2f0(0x8)
	char                                                         pad0x8_SL3NK[0x8];                                 // 0x2f8(0x8)
};


// Size 0x20 (Full Size[0x158] - InheritedSize[0x138]
class ParticleModuleLight_Seeded: public ParticleModuleLight
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x138(0x20)
};


// Size 0x20 (Full Size[0x198] - InheritedSize[0x178]
class ParticleModuleLocation_Seeded: public ParticleModuleLocation
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x178(0x20)
};


// Size 0x10 (Full Size[0x1b8] - InheritedSize[0x1a8]
class ParticleModuleLocationGPU2: public ParticleModuleLocationGPU
{
public:
	char                                                         SpawnLocationValueSemantic;                        // 0x1a8(0x1)
	char                                                         AdditionalSpawnLocationValueSemantics;             // 0x1a9(0x1)
	char                                                         pad0x6_77WQ5[0x6];                                 // 0x1aa(0x6)
	bool                                                         bUseGroupASpawnLocationValueSemanticForAllGroups;  // 0x1b0(0x1)
	char                                                         pad0x7_4RH4Q[0x7];                                 // 0x1b1(0x7)
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class BlockingVolume: public Volume
{
public:
};


// Size 0x10 (Full Size[0x88] - InheritedSize[0x78]
class AnimComposite: public AnimCompositeBase
{
public:
	struct AnimTrack                                             AnimationTrack;                                    // 0x78(0x10)
};


// Size 0x8 (Full Size[0x150] - InheritedSize[0x148]
class PawnMovementComponent: public NavMovementComponent
{
public:
	class Pawn*                                                  PawnOwner;                                         // 0x148(0x8)
};


// Size 0x20 (Full Size[0x5e0] - InheritedSize[0x5c0]
class MergedCollisionComponent: public PrimitiveComponent
{
public:
	TArray<struct MergedCollisionComponentStaticMeshInstanceData> PerInstanceData;                                   // 0x5b8(0x10)
	char                                                         pad0x18_HOAQ9[0x18];                               // 0x5c8(0x18)
};


// Size 0x20 (Full Size[0x5e0] - InheritedSize[0x5c0]
class ShapeComponent: public PrimitiveComponent
{
public:
	struct Color                                                 ShapeColor;                                        // 0x5b8(0x4)
	char                                                         pad0x4_OJIVV[0x4];                                 // 0x5bc(0x4)
	class BodySetup*                                             ShapeBodySetup;                                    // 0x5c0(0x8)
	bool                                                         bDrawOnlyIfSelected;                               // 0x5c8(0x1)
	bool                                                         bShouldCollideWhenPlacing;                         // 0x5c8(0x1)
	bool                                                         bDynamicObstacle;                                  // 0x5c8(0x1)
	char                                                         pad0x7_Y3R42[0x7];                                 // 0x5c9(0x7)
	class UClass*                                                AreaClass;                                         // 0x5d0(0x8)
	char                                                         pad0x8_P12OV[0x8];                                 // 0x5d8(0x8)
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class DistributionVectorParameterBase: public DistributionVectorConstant
{
public:
	struct FName                                                 ParameterName;                                     // 0x50(0x8)
	struct Vector                                                MinInput;                                          // 0x58(0xc)
	struct Vector                                                MaxInput;                                          // 0x64(0xc)
	struct Vector                                                MinOutput;                                         // 0x70(0xc)
	struct Vector                                                MaxOutput;                                         // 0x7c(0xc)
	char                                                         ParamModes;                                        // 0x88(0x1)
	char                                                         pad0x7_F18L6[0x7];                                 // 0x89(0x7)
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class LightmassCharacterIndirectDetailVolume: public Volume
{
public:
};


// Size 0x10 (Full Size[0x5d0] - InheritedSize[0x5c0]
class ArrowComponent: public PrimitiveComponent
{
public:
	struct Color                                                 ArrowColor;                                        // 0x5b8(0x4)
	float                                                        ArrowSize;                                         // 0x5bc(0x4)
	bool                                                         bIsScreenSizeScaled;                               // 0x5c0(0x1)
	char                                                         pad0x3_BXKLD[0x3];                                 // 0x5c1(0x3)
	float                                                        ScreenSize;                                        // 0x5c4(0x4)
	bool                                                         bTreatAsASprite;                                   // 0x5c8(0x1)
	char                                                         pad0x7_I15F7[0x7];                                 // 0x5c9(0x7)
};


// Size 0x0 (Full Size[0x5c0] - InheritedSize[0x5c0]
class NavMeshRenderingComponent: public PrimitiveComponent
{
public:
};


// Size 0x0 (Full Size[0xa8] - InheritedSize[0xa8]
class ParticleModuleSpawnPerUnitNew: public ParticleModuleSpawnPerUnit
{
public:
};


// Size 0x160 (Full Size[0x460] - InheritedSize[0x300]
class LightComponent: public LightComponentBase
{
public:
	float                                                        Temperature;                                       // 0x300(0x4)
	bool                                                         bUseTemperature;                                   // 0x304(0x1)
	char                                                         pad0x3_945L2[0x3];                                 // 0x305(0x3)
	int                                                          ShadowMapChannel;                                  // 0x308(0x4)
	char                                                         pad0x4_9R8I4[0x4];                                 // 0x30c(0x4)
	float                                                        SourceRadius;                                      // 0x310(0x4)
	float                                                        MinRoughness;                                      // 0x314(0x4)
	float                                                        ShadowBias;                                        // 0x318(0x4)
	float                                                        ShadowSharpen;                                     // 0x31c(0x4)
	float                                                        ShadowResMaxDynamicDegradation;                    // 0x320(0x4)
	bool                                                         InverseSquaredFalloff;                             // 0x324(0x1)
	bool                                                         CastTranslucentShadows;                            // 0x324(0x1)
	bool                                                         bCastShadowsFromCinematicObjectsOnly;              // 0x324(0x1)
	bool                                                         bAffectDynamicIndirectLighting;                    // 0x324(0x1)
	char                                                         pad0x3_S0HPB[0x3];                                 // 0x325(0x3)
	class MaterialInterface*                                     LightFunctionMaterial;                             // 0x328(0x8)
	struct Vector                                                LightFunctionScale;                                // 0x330(0xc)
	char                                                         pad0x4_DQZ95[0x4];                                 // 0x33c(0x4)
	class TextureLightProfile*                                   IESTexture;                                        // 0x340(0x8)
	bool                                                         bUseIESBrightness;                                 // 0x348(0x1)
	char                                                         pad0x3_FIAHA[0x3];                                 // 0x349(0x3)
	float                                                        IESBrightnessScale;                                // 0x34c(0x4)
	float                                                        LightFunctionFadeDistance;                         // 0x350(0x4)
	float                                                        DisabledBrightness;                                // 0x354(0x4)
	bool                                                         bEnableLightShaftBloom;                            // 0x358(0x1)
	char                                                         pad0x3_SV8SV[0x3];                                 // 0x359(0x3)
	float                                                        BloomScale;                                        // 0x35c(0x4)
	float                                                        BloomThreshold;                                    // 0x360(0x4)
	struct Color                                                 BloomTint;                                         // 0x364(0x4)
	bool                                                         bUseRayTracedDistanceFieldShadows;                 // 0x368(0x1)
	char                                                         pad0x3_XG6KA[0x3];                                 // 0x369(0x3)
	float                                                        RayStartOffsetDepthScale;                          // 0x36c(0x4)
	char                                                         pad0xf0_ES3W5[0xf0];                               // 0x370(0xf0)
};


// Size 0x50 (Full Size[0x798] - InheritedSize[0x748]
class DebugCameraController: public PlayerController
{
public:
	bool                                                         bUseOriginalPlayerHUD;                             // 0x748(0x1)
	bool                                                         bShowSelectedInfo;                                 // 0x748(0x1)
	bool                                                         bIsFrozenRendering;                                // 0x748(0x1)
	char                                                         pad0x7_U1G0Q[0x7];                                 // 0x749(0x7)
	class DrawFrustumComponent*                                  DrawFrustum;                                       // 0x750(0x8)
	char                                                         pad0x10_XQHH3[0x10];                               // 0x758(0x10)
	class PlayerController*                                      OriginalControllerRef;                             // 0x768(0x8)
	class Player*                                                OriginalPlayer;                                    // 0x770(0x8)
	float                                                        SpeedScale;                                        // 0x778(0x4)
	float                                                        InitialMaxSpeed;                                   // 0x77c(0x4)
	float                                                        InitialAccel;                                      // 0x780(0x4)
	float                                                        InitialDecel;                                      // 0x784(0x4)
	float                                                        SpeedScaleAdjustment;                              // 0x788(0x4)
	float                                                        FovScaleAdjustment;                                // 0x78c(0x4)
	char                                                         pad0x8_Q5JBA[0x8];                                 // 0x790(0x8)
};


// Size 0x570 (Full Size[0x8b0] - InheritedSize[0x340]
class SceneCaptureComponent2D: public SceneCaptureComponent
{
public:
	float                                                        FOVAngle;                                          // 0x338(0x4)
	char                                                         pad0x4_JPBWI[0x4];                                 // 0x33c(0x4)
	class TextureRenderTarget2D*                                 TextureTarget;                                     // 0x340(0x8)
	char                                                         CaptureSource;                                     // 0x348(0x1)
	char                                                         pad0x7_VORUN[0x7];                                 // 0x349(0x7)
	struct PostProcessSettings                                   PostProcessSettings;                               // 0x350(0x540)
	float                                                        PostProcessBlendWeight;                            // 0x890(0x4)
	float                                                        OrthoWidth;                                        // 0x894(0x4)
	float                                                        OrthoNearClipPlane;                                // 0x898(0x4)
	float                                                        OrthoFarClipPlane;                                 // 0x89c(0x4)
	char                                                         ProjectionMode;                                    // 0x8a0(0x1)
	char                                                         pad0x3_4X1Q7[0x3];                                 // 0x8a1(0x3)
	float                                                        AspectRatio;                                       // 0x8a4(0x4)
	bool                                                         bConstrainAspectRatio;                             // 0x8a8(0x1)
	char                                                         pad0x3_VYW9H[0x3];                                 // 0x8a9(0x3)
	int                                                          LandscapeLODOverride;                              // 0x8ac(0x4)
};


// Size 0x2f0 (Full Size[0x3b8] - InheritedSize[0xc8]
class ParticleModuleLocationPrimitiveSphereGPU: public ParticleModuleLocationPrimitiveBase
{
public:
	struct RawDistributionFloat                                  StartRadius;                                       // 0xc8(0x38)
	struct RawDistributionFloat                                  AdditionalStartRadius;                             // 0x100(0x38)
	char                                                         pad0xa8_POFGQ[0xa8];                               // 0x138(0xa8)
	bool                                                         bUseGroupAStartRadiusForAllGroups;                 // 0x1e0(0x1)
	char                                                         pad0x7_5VFJC[0x7];                                 // 0x1e1(0x7)
	struct RawDistributionFloat                                  AdditionalVelocityScales;                          // 0x1e8(0x38)
	char                                                         pad0xa8_1MEFH[0xa8];                               // 0x220(0xa8)
	bool                                                         bUseGroupAVelocityScaleForAllGroups;               // 0x2c8(0x1)
	char                                                         pad0x7_Y3X9G[0x7];                                 // 0x2c9(0x7)
	struct RawDistributionVector                                 AdditionalStartLocations;                          // 0x2d0(0x38)
	char                                                         pad0xa8_G0EN0[0xa8];                               // 0x308(0xa8)
	bool                                                         bUseGroupAStartLocationForAllGroups;               // 0x3b0(0x1)
	char                                                         pad0x7_1IQUY[0x7];                                 // 0x3b1(0x7)
};


// Size 0x20 (Full Size[0x380] - InheritedSize[0x360]
class PlaneReflectionCaptureComponent: public ReflectionCaptureComponent
{
public:
	float                                                        InfluenceRadiusScale;                              // 0x360(0x4)
	char                                                         pad0x4_99RE2[0x4];                                 // 0x364(0x4)
	class DrawSphereComponent*                                   PreviewInfluenceRadius;                            // 0x368(0x8)
	class BoxComponent*                                          PreviewCaptureBox;                                 // 0x370(0x8)
	char                                                         pad0x8_692GJ[0x8];                                 // 0x378(0x8)
};


// Size 0x8 (Full Size[0x1b0] - InheritedSize[0x1a8]
class MaterialExpressionParticleSubUV: public MaterialExpressionTextureSample
{
public:
	bool                                                         bBlend;                                            // 0x1a8(0x1)
	bool                                                         bMipBiasOnLowResolution;                           // 0x1a8(0x1)
	char                                                         pad0x7_YQX6A[0x7];                                 // 0x1a9(0x7)
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class LightmassImportanceVolume: public Volume
{
public:
};


// Size 0x18 (Full Size[0x3f0] - InheritedSize[0x3d8]
class LevelStreamingVolume: public Volume
{
public:
	TArray<struct Name>                                          StreamingLevelNames;                               // 0x3d8(0x10)
	bool                                                         bEditorPreVisOnly;                                 // 0x3e8(0x1)
	bool                                                         bDisabled;                                         // 0x3e8(0x1)
	char                                                         pad0x3_LQTHE[0x3];                                 // 0x3e9(0x3)
	char                                                         StreamingUsage;                                    // 0x3ec(0x1)
	char                                                         pad0x3_E8JCT[0x3];                                 // 0x3ed(0x3)
};


// Size 0x1a0 (Full Size[0x4a0] - InheritedSize[0x300]
class SkyLightComponent: public LightComponentBase
{
public:
	char                                                         SourceType;                                        // 0x300(0x1)
	char                                                         pad0x7_SL6IM[0x7];                                 // 0x301(0x7)
	class TextureCube*                                           Cubemap;                                           // 0x308(0x8)
	float                                                        SkyDistanceThreshold;                              // 0x310(0x4)
	bool                                                         bLowerHemisphereIsBlack;                           // 0x314(0x1)
	char                                                         pad0x3_CV8A2[0x3];                                 // 0x315(0x3)
	float                                                        OcclusionMaxDistance;                              // 0x318(0x4)
	float                                                        Contrast;                                          // 0x31c(0x4)
	float                                                        MinOcclusion;                                      // 0x320(0x4)
	struct Color                                                 OcclusionTint;                                     // 0x324(0x4)
	float                                                        ScaleForInteriors;                                 // 0x328(0x4)
	char                                                         pad0xac_FRJQO[0xac];                               // 0x32c(0xac)
	class TextureCube*                                           BlendDestinationCubemap;                           // 0x3d8(0x8)
	char                                                         pad0xc0_991ZM[0xc0];                               // 0x3e0(0xc0)
};


// Size 0x10 (Full Size[0x3e8] - InheritedSize[0x3d8]
class FFTWater: public Volume
{
public:
	class FFTWaterComponent*                                     FFTWaterComponent;                                 // 0x3d8(0x8)
	class FFTWaterExtendedPlaneComponent*                        ExtendedPlaneComponent;                            // 0x3e0(0x8)
};


// Size 0x20 (Full Size[0x5e0] - InheritedSize[0x5c0]
class BrushComponent: public PrimitiveComponent
{
public:
	class Model*                                                 Brush;                                             // 0x5b8(0x8)
	class BodySetup*                                             BrushBodySetup;                                    // 0x5c0(0x8)
	struct Vector                                                PrePivot;                                          // 0x5c8(0xc)
	char                                                         pad0xc_LUP5X[0xc];                                 // 0x5d4(0xc)
};


// Size 0x50 (Full Size[0x428] - InheritedSize[0x3d8]
class AudioVolume: public Volume
{
public:
	float                                                        Priority;                                          // 0x3d8(0x4)
	bool                                                         bEnabled;                                          // 0x3dc(0x1)
	char                                                         pad0x3_03O47[0x3];                                 // 0x3dd(0x3)
	struct ReverbSettings                                        Settings;                                          // 0x3e0(0x18)
	struct InteriorSettings                                      AmbientZoneSettings;                               // 0x3f8(0x24)
	char                                                         pad0x4_6W13P[0x4];                                 // 0x41c(0x4)
	class AudioVolume*                                           NextLowerPriorityVolume;                           // 0x420(0x8)
};


// Size 0x0 (Full Size[0x440] - InheritedSize[0x440]
class SpectatorPawn: public DefaultPawn
{
public:
};


// Size 0x48 (Full Size[0xd8] - InheritedSize[0x90]
class ParticleModuleSubUVMovie: public ParticleModuleSubUV
{
public:
	bool                                                         bUseEmitterTime;                                   // 0x90(0x1)
	char                                                         pad0x7_KBZLZ[0x7];                                 // 0x91(0x7)
	struct RawDistributionFloat                                  FrameRate;                                         // 0x98(0x38)
	int                                                          StartingFrame;                                     // 0xd0(0x4)
	char                                                         pad0x4_0TMKB[0x4];                                 // 0xd4(0x4)
};


// Size 0x0 (Full Size[0x340] - InheritedSize[0x340]
class SceneCaptureComponentCube: public SceneCaptureComponent
{
public:
	class TextureRenderTargetCube*                               TextureTarget;                                     // 0x338(0x8)
};


// Size 0x20 (Full Size[0x380] - InheritedSize[0x360]
class BoxReflectionCaptureComponent: public ReflectionCaptureComponent
{
public:
	float                                                        BoxTransitionDistance;                             // 0x360(0x4)
	char                                                         pad0x4_E3DLH[0x4];                                 // 0x364(0x4)
	class BoxComponent*                                          PreviewInfluenceBox;                               // 0x368(0x8)
	class BoxComponent*                                          PreviewCaptureBox;                                 // 0x370(0x8)
	char                                                         pad0x8_TF2TZ[0x8];                                 // 0x378(0x8)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class ParticleModuleLocationComputeShaderOutput: public ParticleModuleLocationPrimitiveBase
{
public:
	class ParticleComputeShaderData*                             PositionData;                                      // 0xc8(0x8)
};


// Size 0x190 (Full Size[0x1f0] - InheritedSize[0x60]
class ParticleModuleEventReceiverSpawn: public ParticleModuleEventReceiverBase
{
public:
	struct RawDistributionFloat                                  SpawnCount;                                        // 0x60(0x38)
	struct RawDistributionFloat                                  AdditionalSpawnCounts;                             // 0x98(0x38)
	char                                                         pad0xe0_3OTXW[0xe0];                               // 0xd0(0xe0)
	bool                                                         bUseGroupAForAll;                                  // 0x1b0(0x1)
	bool                                                         bUseParticleTime;                                  // 0x1b0(0x1)
	bool                                                         bUsePSysLocation;                                  // 0x1b0(0x1)
	bool                                                         bInheritVelocity;                                  // 0x1b0(0x1)
	char                                                         pad0x7_UHRP1[0x7];                                 // 0x1b1(0x7)
	struct RawDistributionVector                                 InheritVelocityScale;                              // 0x1b8(0x38)
};


// Size 0x0 (Full Size[0x3b0] - InheritedSize[0x3b0]
class GeneratedMeshAreaLight: public SpotLight
{
public:
};


// Size 0x150 (Full Size[0x218] - InheritedSize[0xc8]
class ParticleModuleLocationPrimitiveSphere: public ParticleModuleLocationPrimitiveBase
{
public:
	struct RawDistributionFloat                                  StartRadius;                                       // 0xc8(0x38)
	struct RawDistributionFloat                                  AdditionalStartRadiuses;                           // 0x100(0x38)
	char                                                         pad0xa8_JCYTN[0xa8];                               // 0x138(0xa8)
	bool                                                         StartRadiusUseGroupAForAll;                        // 0x1e0(0x1)
	char                                                         pad0x3_6L6IY[0x3];                                 // 0x1e1(0x3)
	struct Vector2D                                              PositiveXAngleRange;                               // 0x1e4(0x8)
	struct Vector2D                                              NegativeXAngleRange;                               // 0x1ec(0x8)
	struct Vector2D                                              PositiveYAngleRange;                               // 0x1f4(0x8)
	struct Vector2D                                              NegativeYAngleRange;                               // 0x1fc(0x8)
	struct Vector2D                                              PositiveZAngleRange;                               // 0x204(0x8)
	struct Vector2D                                              NegativeZAngleRange;                               // 0x20c(0x8)
	char                                                         pad0x4_QQ7K2[0x4];                                 // 0x214(0x4)
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class PrecomputedVisibilityVolume: public Volume
{
public:
};


// Size 0x70 (Full Size[0xe8] - InheritedSize[0x78]
class AnimMontage: public AnimCompositeBase
{
public:
	float                                                        BlendInTime;                                       // 0x78(0x4)
	float                                                        BlendOutTime;                                      // 0x7c(0x4)
	float                                                        BlendOutTriggerTime;                               // 0x80(0x4)
	char                                                         pad0x4_SFYZ1[0x4];                                 // 0x84(0x4)
	TArray<struct CompositeSection>                              CompositeSections;                                 // 0x88(0x10)
	TArray<struct SlotAnimationTrack>                            SlotAnimTracks;                                    // 0x98(0x10)
	TArray<struct BranchingPoint>                                BranchingPoints;                                   // 0xa8(0x10)
	bool                                                         bEnableRootMotionTranslation;                      // 0xb8(0x1)
	bool                                                         bEnableRootMotionRotation;                         // 0xb9(0x1)
	char                                                         RootMotionRootLock;                                // 0xba(0x1)
	char                                                         pad0x5_G6BVD[0x5];                                 // 0xbb(0x5)
	TArray<struct BranchingPointMarker>                          BranchingPointMarkers;                             // 0xc0(0x10)
	bool                                                         bAnimBranchingPointNeedsSort;                      // 0xd0(0x1)
	char                                                         pad0x7_OGB9F[0x7];                                 // 0xd1(0x7)
	TArray<int>                                                  BranchingPointStateNotifyIndices;                  // 0xd8(0x10)
};


// Size 0x20 (Full Size[0x1d0] - InheritedSize[0x1b0]
class ParticleModuleSize_Seeded: public ParticleModuleSize
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x1b0(0x20)
};


// Size 0x280 (Full Size[0x348] - InheritedSize[0xc8]
class ParticleModuleLocationPrimitiveCylinder: public ParticleModuleLocationPrimitiveBase
{
public:
	bool                                                         RadialVelocity;                                    // 0xc8(0x1)
	char                                                         pad0x7_A4255[0x7];                                 // 0xc9(0x7)
	struct RawDistributionFloat                                  StartRadius;                                       // 0xd0(0x38)
	struct RawDistributionFloat                                  AdditionalStartRadiuses;                           // 0x108(0x38)
	char                                                         pad0xa8_Q21JI[0xa8];                               // 0x140(0xa8)
	bool                                                         StartRadiusUseGroupAForAll;                        // 0x1e8(0x1)
	char                                                         pad0x3_ZDN2Y[0x3];                                 // 0x1e9(0x3)
	struct Vector2D                                              RadiusScale;                                       // 0x1ec(0x8)
	char                                                         pad0x4_OT8BH[0x4];                                 // 0x1f4(0x4)
	struct RawDistributionFloat                                  StartHeight;                                       // 0x1f8(0x38)
	bool                                                         StartHeightUseGroupAForAll;                        // 0x230(0x1)
	char                                                         pad0x7_0OO8H[0x7];                                 // 0x231(0x7)
	struct RawDistributionFloat                                  AdditionalStartHeights;                            // 0x238(0x38)
	char                                                         pad0xa8_J7NKB[0xa8];                               // 0x270(0xa8)
	struct Vector2D                                              AngleRange;                                        // 0x318(0x8)
	struct Vector2D                                              AdditionalAngleRanges;                             // 0x320(0x8)
	char                                                         pad0x18_CXO9G[0x18];                               // 0x328(0x18)
	bool                                                         AngleRangeUseGroupAForAll;                         // 0x340(0x1)
	char                                                         pad0x3_M3IX6[0x3];                                 // 0x341(0x3)
	char                                                         HeightAxis;                                        // 0x344(0x1)
	char                                                         pad0x3_ZZXSG[0x3];                                 // 0x345(0x3)
};


// Size 0x0 (Full Size[0x5c0] - InheritedSize[0x5c0]
class NavLinkRenderingComponent: public PrimitiveComponent
{
public:
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class CameraBlockingVolume: public Volume
{
public:
};


// Size 0x40 (Full Size[0x1e8] - InheritedSize[0x1a8]
class MaterialExpressionPredicatedTextureSample: public MaterialExpressionTextureSample
{
public:
	struct ExpressionInput                                       Predicate;                                         // 0x1a8(0x38)
	struct Color                                                 DefaultColour;                                     // 0x1e0(0x4)
	char                                                         pad0x4_NDAZN[0x4];                                 // 0x1e4(0x4)
};


// Size 0x30 (Full Size[0x5f0] - InheritedSize[0x5c0]
class LineBatchComponent: public PrimitiveComponent
{
public:
	char                                                         pad0x30_4IV2N[0x30];                               // 0x5c0(0x30)
};


// Size 0x0 (Full Size[0x110] - InheritedSize[0x110]
class AimOffsetBlendSpace1D: public BlendSpace1D
{
public:
};


// Size 0x20 (Full Size[0x208] - InheritedSize[0x1e8]
class ParticleModuleVelocity_Seeded: public ParticleModuleVelocity
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x1e8(0x20)
};


// Size 0x30 (Full Size[0x408] - InheritedSize[0x3d8]
class PrecomputedVisibilityOverrideVolume: public Volume
{
public:
	TArray<class Actor*>                                         OverrideVisibleActors;                             // 0x3d8(0x10)
	TArray<class Actor*>                                         OverrideInvisibleActors;                           // 0x3e8(0x10)
	TArray<struct Name>                                          OverrideInvisibleLevels;                           // 0x3f8(0x10)
};


// Size 0x70 (Full Size[0x108] - InheritedSize[0x98]
class MaterialExpressionStaticSwitchParameter: public MaterialExpressionStaticBoolParameter
{
public:
	struct ExpressionInput                                       A;                                                 // 0x98(0x38)
	struct ExpressionInput                                       B;                                                 // 0xd0(0x38)
};


// Size 0xf0 (Full Size[0x1b8] - InheritedSize[0xc8]
class ParticleModuleLocationVelocityComputeShaderOutput: public ParticleModuleLocationPrimitiveBase
{
public:
	class ParticleComputeShaderData*                             PositionData;                                      // 0xc8(0x8)
	struct RawDistributionVector                                 ComputedVelocityScale;                             // 0xd0(0x38)
	float                                                        SpeedCap;                                          // 0x108(0x4)
	char                                                         pad0x4_CSR38[0x4];                                 // 0x10c(0x4)
	struct RawDistributionVector                                 BaseVelocity;                                      // 0x110(0x38)
	struct RawDistributionVector                                 LocationOffset;                                    // 0x148(0x38)
	struct RawDistributionVector                                 LocationOffsetScaledDirection;                     // 0x180(0x38)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class InputVectorAxisDelegateBinding: public InputAxisKeyDelegateBinding
{
public:
};


// Size 0x80 (Full Size[0x640] - InheritedSize[0x5c0]
class SplineComponent: public PrimitiveComponent
{
public:
	struct InterpCurveVector                                     SplineInfo;                                        // 0x5b8(0x18)
	struct InterpCurveQuat                                       SplineRotInfo;                                     // 0x5d0(0x18)
	struct InterpCurveVector                                     SplineScaleInfo;                                   // 0x5e8(0x18)
	struct InterpCurveFloat                                      SplineReparamTable;                                // 0x600(0x18)
	bool                                                         bAllowSplineEditingPerInstance;                    // 0x618(0x1)
	char                                                         pad0x3_4Z2P0[0x3];                                 // 0x619(0x3)
	int                                                          ReparamStepsPerSegment;                            // 0x61c(0x4)
	float                                                        Duration;                                          // 0x620(0x4)
	bool                                                         bStationaryEndpoints;                              // 0x624(0x1)
	bool                                                         bSplineHasBeenEdited;                              // 0x625(0x1)
	bool                                                         bClosedLoop;                                       // 0x626(0x1)
	char                                                         pad0x1_L2SOP[0x1];                                 // 0x627(0x1)
	struct Vector                                                DefaultUpVector;                                   // 0x628(0xc)
	char                                                         pad0xc_Z9JH3[0xc];                                 // 0x634(0xc)
};


// Size 0x18 (Full Size[0x188] - InheritedSize[0x170]
class CanvasRenderTarget2D: public TextureRenderTarget2D
{
public:
	char                                                         pad0x18_JD2CX[0x18];                               // 0x170(0x18)
};


// Size 0x40 (Full Size[0x600] - InheritedSize[0x5c0]
class ModelComponent: public PrimitiveComponent
{
public:
	char                                                         pad0x10_CCQS5[0x10];                               // 0x5c0(0x10)
	class BodySetup*                                             ModelBodySetup;                                    // 0x5d0(0x8)
	char                                                         pad0x28_72KUF[0x28];                               // 0x5d8(0x28)
};


// Size 0x20 (Full Size[0x5e0] - InheritedSize[0x5c0]
class BillboardComponent: public PrimitiveComponent
{
public:
	class Texture2D*                                             Sprite;                                            // 0x5b8(0x8)
	bool                                                         bIsScreenSizeScaled;                               // 0x5c0(0x1)
	char                                                         pad0x3_X2SPW[0x3];                                 // 0x5c1(0x3)
	float                                                        ScreenSize;                                        // 0x5c4(0x4)
	float                                                        U;                                                 // 0x5c8(0x4)
	float                                                        UL;                                                // 0x5cc(0x4)
	float                                                        V;                                                 // 0x5d0(0x4)
	float                                                        VL;                                                // 0x5d4(0x4)
	char                                                         pad0x8_70PY9[0x8];                                 // 0x5d8(0x8)
};


// Size 0x300 (Full Size[0x8c0] - InheritedSize[0x5c0]
class ParticleSystemComponent: public PrimitiveComponent
{
public:
	class ParticleSystem*                                        Template;                                          // 0x5b8(0x8)
	TArray<class MaterialInterface*>                             EmitterMaterials;                                  // 0x5c0(0x10)
	TArray<class SkeletalMeshComponent*>                         SkelMeshComponents;                                // 0x5d0(0x10)
	bool                                                         bInheritVisibilityFromAttach;                      // 0x5e0(0x1)
	bool                                                         bResetOnDetach;                                    // 0x5e0(0x1)
	bool                                                         bUpdateOnDedicatedServer;                          // 0x5e1(0x1)
	char                                                         pad0x6_J1EUX[0x6];                                 // 0x5e2(0x6)
	TArray<struct ParticleSysParam>                              InstanceParameters;                                // 0x5e8(0x10)
	struct ParticleSysParam                                      EmitterPointParameter;                             // 0x5f8(0x50)
	struct Vector                                                OldPosition;                                       // 0x688(0xc)
	struct Vector                                                PartSysVelocity;                                   // 0x694(0xc)
	char                                                         pad0x18_1XPXL[0x18];                               // 0x6a0(0x18)
	struct Vector                                                CustomInheritedVelocity;                           // 0x6b8(0xc)
	char                                                         pad0x1c_1U4R0[0x1c];                               // 0x6c4(0x1c)
	float                                                        CustomParameterDrivingCurves;                      // 0x6e0(0x4)
	struct LinearColor                                           ColourTint;                                        // 0x6e4(0x10)
	float                                                        WarmUpTime;                                        // 0x6f4(0x4)
	float                                                        WarmupTickRate;                                    // 0x6f8(0x4)
	bool                                                         bWarmingUp;                                        // 0x6fc(0x1)
	char                                                         pad0x1f_W9EPF[0x1f];                               // 0x6fd(0x1f)
	float                                                        SecondsBeforeInactive;                             // 0x71c(0x4)
	char                                                         pad0x8_6BQ5V[0x8];                                 // 0x720(0x8)
	float                                                        MaxTimeBeforeForceUpdateTransform;                 // 0x728(0x4)
	char                                                         pad0x4_YXV4R[0x4];                                 // 0x72c(0x4)
	bool                                                         bOverrideLODMethod;                                // 0x730(0x1)
	char                                                         pad0x3_9XHNH[0x3];                                 // 0x731(0x3)
	char                                                         LODMethod;                                         // 0x734(0x1)
	char                                                         pad0x3_3N5XM[0x3];                                 // 0x735(0x3)
	bool                                                         bSkipUpdateDynamicDataDuringTick;                  // 0x738(0x1)
	char                                                         pad0x7_OU4X3[0x7];                                 // 0x739(0x7)
	TArray<struct MaterialRelevance>                             CachedViewRelevanceFlags;                          // 0x740(0x10)
	char                                                         pad0x8_77AN6[0x8];                                 // 0x750(0x8)
	TArray<class ParticleSystemReplay*>                          ReplayClips;                                       // 0x758(0x10)
	char                                                         pad0x60_C3S37[0x60];                               // 0x768(0x60)
	float                                                        CustomTimeDilation;                                // 0x7c8(0x4)
	char                                                         pad0x4_B97A6[0x4];                                 // 0x7cc(0x4)
	bool                                                         bUnbound;                                          // 0x7e0(0x1)
	char                                                         pad0xdf_PBBVX[0xdf];                               // 0x7e1(0xdf)
};


// Size 0x10 (Full Size[0x3e8] - InheritedSize[0x3d8]
class NavMeshBoundsVolume: public Volume
{
public:
	struct NavAgentSelector                                      SupportedAgents;                                   // 0x3d8(0x4)
	struct FName                                                 OriginatingLevelName;                              // 0x3dc(0x8)
	char                                                         pad0x4_JR4AQ[0x4];                                 // 0x3e4(0x4)
};


// Size 0x20 (Full Size[0x5e0] - InheritedSize[0x5c0]
class VectorFieldComponent: public PrimitiveComponent
{
public:
	class VectorField*                                           VectorField;                                       // 0x5b8(0x8)
	float                                                        Intensity;                                         // 0x5c0(0x4)
	float                                                        Tightness;                                         // 0x5c4(0x4)
	bool                                                         bPreviewVectorField;                               // 0x5c8(0x1)
	char                                                         pad0x17_1B0XO[0x17];                               // 0x5c9(0x17)
};


// Size 0x10 (Full Size[0x3e8] - InheritedSize[0x3d8]
class PhysicsVolume: public Volume
{
public:
	float                                                        TerminalVelocity;                                  // 0x3d8(0x4)
	int                                                          Priority;                                          // 0x3dc(0x4)
	float                                                        FluidFriction;                                     // 0x3e0(0x4)
	bool                                                         bWaterVolume;                                      // 0x3e4(0x1)
	bool                                                         bPhysicsOnContact;                                 // 0x3e4(0x1)
	char                                                         pad0x3_TSXEL[0x3];                                 // 0x3e5(0x3)
};


// Size 0x10 (Full Size[0x3e8] - InheritedSize[0x3d8]
class NavModifierVolume: public Volume
{
public:
	char                                                         pad0x8_UZYD5[0x8];                                 // 0x3d8(0x8)
	class UClass*                                                AreaClass;                                         // 0x3e0(0x8)
};


// Size 0x28 (Full Size[0x4c0] - InheritedSize[0x498]
class LogVisualizerHUD: public DebugCameraHUD
{
public:
	char                                                         pad0x28_MMH9G[0x28];                               // 0x498(0x28)
};


// Size 0x18 (Full Size[0x3f0] - InheritedSize[0x3d8]
class CullDistanceVolume: public Volume
{
public:
	TArray<struct CullDistanceSizePair>                          CullDistances;                                     // 0x3d8(0x10)
	bool                                                         bEnabled;                                          // 0x3e8(0x1)
	char                                                         pad0x7_RGHV4[0x7];                                 // 0x3e9(0x7)
};


// Size 0x20 (Full Size[0x5e0] - InheritedSize[0x5c0]
class DrawFrustumComponent: public PrimitiveComponent
{
public:
	struct Color                                                 FrustumColor;                                      // 0x5b8(0x4)
	float                                                        FrustumAngle;                                      // 0x5bc(0x4)
	float                                                        FrustumAspectRatio;                                // 0x5c0(0x4)
	float                                                        FrustumStartDist;                                  // 0x5c4(0x4)
	float                                                        FrustumEndDist;                                    // 0x5c8(0x4)
	char                                                         pad0x4_QW9H5[0x4];                                 // 0x5cc(0x4)
	class Texture*                                               Texture;                                           // 0x5d0(0x8)
	char                                                         pad0x8_KY7EF[0x8];                                 // 0x5d8(0x8)
};


// Size 0x558 (Full Size[0x930] - InheritedSize[0x3d8]
class PostProcessVolume: public Volume
{
public:
	char                                                         pad0x8_N5MVJ[0x8];                                 // 0x3d8(0x8)
	struct PostProcessSettings                                   Settings;                                          // 0x3e0(0x540)
	float                                                        Priority;                                          // 0x920(0x4)
	float                                                        BlendRadius;                                       // 0x924(0x4)
	float                                                        BlendWeight;                                       // 0x928(0x4)
	bool                                                         bEnabled;                                          // 0x92c(0x1)
	bool                                                         bUnbound;                                          // 0x92c(0x1)
	char                                                         pad0x3_V3R70[0x3];                                 // 0x92d(0x3)
};


// Size 0x20 (Full Size[0x1c8] - InheritedSize[0x1a8]
class MaterialExpressionTextureSampleParameter: public MaterialExpressionTextureSample
{
public:
	struct FName                                                 ParameterName;                                     // 0x1a8(0x8)
	struct Guid                                                  ExpressionGUID;                                    // 0x1b0(0x10)
	struct FName                                                 Group;                                             // 0x1c0(0x8)
};


// Size 0x20 (Full Size[0x1e0] - InheritedSize[0x1c0]
class ParticleModuleLifetime_Seeded: public ParticleModuleLifetime
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x1c0(0x20)
};


// Size 0x20 (Full Size[0xb0] - InheritedSize[0x90]
class ParticleModuleMeshRotation_Seeded: public ParticleModuleMeshRotation
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x90(0x20)
};


// Size 0x20 (Full Size[0x60] - InheritedSize[0x40]
class DistributionFloatParameterBase: public DistributionFloatConstant
{
public:
	struct FName                                                 ParameterName;                                     // 0x40(0x8)
	float                                                        MinInput;                                          // 0x48(0x4)
	float                                                        MaxInput;                                          // 0x4c(0x4)
	float                                                        MinOutput;                                         // 0x50(0x4)
	float                                                        MaxOutput;                                         // 0x54(0x4)
	char                                                         ParamMode;                                         // 0x58(0x1)
	char                                                         pad0x7_476JQ[0x7];                                 // 0x59(0x7)
};


// Size 0x20 (Full Size[0x1c8] - InheritedSize[0x1a8]
class ParticleModuleRotation_Seeded: public ParticleModuleRotation
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x1a8(0x20)
};


// Size 0x10 (Full Size[0x370] - InheritedSize[0x360]
class SphereReflectionCaptureComponent: public ReflectionCaptureComponent
{
public:
	float                                                        InfluenceRadius;                                   // 0x360(0x4)
	float                                                        CaptureDistanceScale;                              // 0x364(0x4)
	class DrawSphereComponent*                                   PreviewInfluenceRadius;                            // 0x368(0x8)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class ParticleModuleEventReceiverKillParticles: public ParticleModuleEventReceiverBase
{
public:
	bool                                                         bStopSpawning;                                     // 0x60(0x1)
	char                                                         pad0x7_BCXRF[0x7];                                 // 0x61(0x7)
};


// Size 0x10 (Full Size[0x5d0] - InheritedSize[0x5c0]
class MaterialBillboardComponent: public PrimitiveComponent
{
public:
	TArray<struct MaterialSpriteElement>                         Elements;                                          // 0x5b8(0x10)
	char                                                         pad0x8_B68UO[0x8];                                 // 0x5c8(0x8)
};


// Size 0x20 (Full Size[0xa8] - InheritedSize[0x88]
class ParticleModuleMeshRotationRate_Seeded: public ParticleModuleMeshRotationRate
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x88(0x20)
};


// Size 0x0 (Full Size[0x110] - InheritedSize[0x110]
class AimOffsetBlendSpace: public BlendSpace
{
public:
};


// Size 0x320 (Full Size[0x8f0] - InheritedSize[0x5d0]
class FFTWaterExtendedPlaneComponent: public BaseWaterComponent
{
public:
	struct FFTWaterComponentParams                               WaterParams;                                       // 0x5c8(0x310)
	class Material*                                              Material;                                          // 0x8d8(0x8)
	char                                                         pad0x10_5CVCN[0x10];                               // 0x8e0(0x10)
};


// Size 0x18 (Full Size[0x168] - InheritedSize[0x150]
class FloatingPawnMovement: public PawnMovementComponent
{
public:
	float                                                        MaxSpeed;                                          // 0x150(0x4)
	float                                                        Acceleration;                                      // 0x154(0x4)
	float                                                        Deceleration;                                      // 0x158(0x4)
	float                                                        TurningBoost;                                      // 0x15c(0x4)
	bool                                                         bPositionCorrected;                                // 0x160(0x1)
	char                                                         pad0x7_0L975[0x7];                                 // 0x161(0x7)
};


// Size 0x0 (Full Size[0x5e0] - InheritedSize[0x5e0]
class CapsuleComponent: public ShapeComponent
{
public:
	float                                                        CapsuleHalfHeight;                                 // 0x5d8(0x4)
	float                                                        CapsuleRadius;                                     // 0x5dc(0x4)
};


// Size 0x0 (Full Size[0x1c8] - InheritedSize[0x1c8]
class MaterialExpressionTextureSampleParameter2D: public MaterialExpressionTextureSampleParameter
{
public:
};


// Size 0x0 (Full Size[0x1c8] - InheritedSize[0x1c8]
class MaterialExpressionTextureObjectParameter: public MaterialExpressionTextureSampleParameter
{
public:
};


// Size 0x0 (Full Size[0x3e8] - InheritedSize[0x3e8]
class InstancedNavMeshBoundsVolume: public NavMeshBoundsVolume
{
public:
};


// Size 0x0 (Full Size[0x3e8] - InheritedSize[0x3e8]
class DefaultPhysicsVolume: public PhysicsVolume
{
public:
};


// Size 0x20 (Full Size[0x198] - InheritedSize[0x178]
class ParticleModuleLocationWorldOffset_Seeded: public ParticleModuleLocationWorldOffset
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x178(0x20)
};


// Size 0x430 (Full Size[0x580] - InheritedSize[0x150]
class CharacterMovementComponent: public PawnMovementComponent
{
public:
	char                                                         pad0x18_CID68[0x18];                               // 0x150(0x18)
	class Character*                                             CharacterOwner;                                    // 0x168(0x8)
	float                                                        GravityScale;                                      // 0x170(0x4)
	float                                                        MaxStepHeight;                                     // 0x174(0x4)
	float                                                        JumpZVelocity;                                     // 0x178(0x4)
	float                                                        JumpOffJumpZFactor;                                // 0x17c(0x4)
	float                                                        WalkableFloorAngle;                                // 0x180(0x4)
	float                                                        WalkableFloorZ;                                    // 0x184(0x4)
	char                                                         MovementMode;                                      // 0x188(0x1)
	char                                                         CustomMovementMode;                                // 0x189(0x1)
	char                                                         pad0x26_NJFT3[0x26];                               // 0x18a(0x26)
	float                                                        GroundFriction;                                    // 0x1b0(0x4)
	float                                                        MaxWalkSpeed;                                      // 0x1b4(0x4)
	float                                                        MaxWalkSpeedBackwards;                             // 0x1b8(0x4)
	float                                                        WalkBackwardsMinAngle;                             // 0x1bc(0x4)
	float                                                        WalkBackwardsMaxAngle;                             // 0x1c0(0x4)
	float                                                        MaxWalkSpeedCrouched;                              // 0x1c4(0x4)
	float                                                        MaxSwimSpeed;                                      // 0x1c8(0x4)
	float                                                        MaxFlySpeed;                                       // 0x1cc(0x4)
	float                                                        MaxCustomMovementSpeed;                            // 0x1d0(0x4)
	float                                                        MaxAcceleration;                                   // 0x1d4(0x4)
	float                                                        MaxChargeAcceleration;                             // 0x1d8(0x4)
	float                                                        BrakingFrictionFactor;                             // 0x1dc(0x4)
	float                                                        BrakingFriction;                                   // 0x1e0(0x4)
	bool                                                         bUseSeparateBrakingFriction;                       // 0x1e4(0x1)
	char                                                         pad0x3_RWRID[0x3];                                 // 0x1e5(0x3)
	float                                                        BrakingDecelerationWalking;                        // 0x1e8(0x4)
	float                                                        BrakingDecelerationFalling;                        // 0x1ec(0x4)
	float                                                        BrakingDecelerationSwimming;                       // 0x1f0(0x4)
	float                                                        BrakingDecelerationFlying;                         // 0x1f4(0x4)
	float                                                        AirControl;                                        // 0x1f8(0x4)
	float                                                        AirControlBoostMultiplier;                         // 0x1fc(0x4)
	float                                                        AirControlBoostVelocityThreshold;                  // 0x200(0x4)
	float                                                        FallingLateralFriction;                            // 0x204(0x4)
	float                                                        CrouchedHalfHeight;                                // 0x208(0x4)
	float                                                        Buoyancy;                                          // 0x20c(0x4)
	float                                                        PerchRadiusThreshold;                              // 0x210(0x4)
	float                                                        PerchAdditionalHeight;                             // 0x214(0x4)
	struct Rotator                                               RotationRate;                                      // 0x218(0xc)
	bool                                                         bUseControllerDesiredRotation;                     // 0x224(0x1)
	bool                                                         bOrientRotationToMovement;                         // 0x224(0x1)
	bool                                                         bMovementInProgress;                               // 0x224(0x1)
	bool                                                         bEnableScopedMovementUpdates;                      // 0x224(0x1)
	bool                                                         bForceMaxAccel;                                    // 0x224(0x1)
	bool                                                         bRunPhysicsWithNoController;                       // 0x224(0x1)
	bool                                                         bForceNextFloorCheck;                              // 0x224(0x1)
	bool                                                         bShrinkProxyCapsule;                               // 0x224(0x1)
	bool                                                         bCanWalkOffLedges;                                 // 0x225(0x1)
	bool                                                         bCanWalkOffLedgesWhenCrouching;                    // 0x225(0x1)
	bool                                                         bDeferUpdateMoveComponent;                         // 0x225(0x1)
	char                                                         pad0x2_2CJR0[0x2];                                 // 0x226(0x2)
	class SceneComponent*                                        DeferredUpdatedMoveComponent;                      // 0x228(0x8)
	float                                                        MaxOutOfWaterStepHeight;                           // 0x230(0x4)
	float                                                        OutofWaterZ;                                       // 0x234(0x4)
	float                                                        Mass;                                              // 0x238(0x4)
	bool                                                         bEnablePhysicsInteraction;                         // 0x23c(0x1)
	bool                                                         bTouchForceScaledToMass;                           // 0x23d(0x1)
	bool                                                         bPushForceScaledToMass;                            // 0x23e(0x1)
	bool                                                         bScalePushForceToVelocity;                         // 0x23f(0x1)
	float                                                        StandingDownwardForceScale;                        // 0x240(0x4)
	float                                                        InitialPushForceFactor;                            // 0x244(0x4)
	float                                                        PushForceFactor;                                   // 0x248(0x4)
	float                                                        PushForcePointZOffsetFactor;                       // 0x24c(0x4)
	float                                                        TouchForceFactor;                                  // 0x250(0x4)
	float                                                        MinTouchForce;                                     // 0x254(0x4)
	float                                                        MaxTouchForce;                                     // 0x258(0x4)
	float                                                        RepulsionForce;                                    // 0x25c(0x4)
	float                                                        NetMoveDelta;                                      // 0x260(0x4)
	bool                                                         bForceBraking;                                     // 0x264(0x1)
	char                                                         pad0x3_M5QJQ[0x3];                                 // 0x265(0x3)
	float                                                        CrouchedSpeedMultiplier;                           // 0x268(0x4)
	float                                                        UpperImpactNormalScale;                            // 0x26c(0x4)
	struct Vector                                                Acceleration;                                      // 0x270(0xc)
	struct Vector                                                LastUpdateLocation;                                // 0x27c(0xc)
	struct Vector                                                PendingImpulseToApply;                             // 0x288(0xc)
	struct Vector                                                PendingForceToApply;                               // 0x294(0xc)
	float                                                        AnalogInputModifier;                               // 0x2a0(0x4)
	char                                                         pad0x34_S0R6W[0x34];                               // 0x2a4(0x34)
	float                                                        MaxSimulationTimeStep;                             // 0x2d8(0x4)
	int                                                          MaxSimulationIterations;                           // 0x2dc(0x4)
	float                                                        MaxSmoothNetUpdateDist;                            // 0x2e0(0x4)
	float                                                        NoSmoothNetUpdateDist;                             // 0x2e4(0x4)
	float                                                        NetworkSimulatedSmoothLocationTime;                // 0x2e8(0x4)
	float                                                        NetworkSimulatedSmoothRotationTime;                // 0x2ec(0x4)
	float                                                        LedgeCheckThreshold;                               // 0x2f0(0x4)
	float                                                        JumpOutOfWaterPitch;                               // 0x2f4(0x4)
	struct FindFloorResult                                       CurrentFloor;                                      // 0x2f8(0x8c)
	char                                                         DefaultLandMovementMode;                           // 0x384(0x1)
	char                                                         DefaultWaterMovementMode;                          // 0x385(0x1)
	char                                                         GroundMovementMode;                                // 0x386(0x1)
	char                                                         pad0x1_49AZD[0x1];                                 // 0x387(0x1)
	bool                                                         bMaintainHorizontalGroundVelocity;                 // 0x388(0x1)
	bool                                                         bImpartBaseVelocityX;                              // 0x388(0x1)
	bool                                                         bImpartBaseVelocityY;                              // 0x388(0x1)
	bool                                                         bImpartBaseVelocityZ;                              // 0x388(0x1)
	bool                                                         bImpartBaseAngularVelocity;                        // 0x388(0x1)
	bool                                                         bJustTeleported;                                   // 0x388(0x1)
	bool                                                         bNetworkUpdateReceived;                            // 0x388(0x1)
	bool                                                         bBasedMovementUpdateReceived;                      // 0x388(0x1)
	bool                                                         bMovementUpdateReceived;                           // 0x389(0x1)
	bool                                                         bNetworkMovementModeChanged;                       // 0x389(0x1)
	bool                                                         bNotifyApex;                                       // 0x389(0x1)
	bool                                                         bCheatFlying;                                      // 0x389(0x1)
	bool                                                         bWantsToCrouch;                                    // 0x389(0x1)
	bool                                                         bCrouchMaintainsBaseLocation;                      // 0x389(0x1)
	bool                                                         bIgnoreBaseRotation;                               // 0x389(0x1)
	bool                                                         bFastAttachedMove;                                 // 0x389(0x1)
	bool                                                         bAlwaysCheckFloor;                                 // 0x38a(0x1)
	bool                                                         bUseFlatBaseForFloorChecks;                        // 0x38a(0x1)
	bool                                                         bPerformingJumpOff;                                // 0x38a(0x1)
	bool                                                         bWantsToLeaveNavWalking;                           // 0x38a(0x1)
	bool                                                         bUseRVOAvoidance;                                  // 0x38a(0x1)
	bool                                                         bRequestedMoveUseAcceleration;                     // 0x38a(0x1)
	bool                                                         bPreventSimulatedFloorChecks;                      // 0x38a(0x1)
	bool                                                         bPreventNavMeshFalling;                            // 0x38a(0x1)
	bool                                                         bHasRequestedVelocity;                             // 0x38b(0x1)
	bool                                                         bRequestedMoveWithMaxSpeed;                        // 0x38b(0x1)
	bool                                                         bWasAvoidanceUpdated;                              // 0x38b(0x1)
	bool                                                         bProjectNavMeshWalking;                            // 0x38b(0x1)
	char                                                         pad0x14_PB9IR[0x14];                               // 0x38c(0x14)
	float                                                        SmoothingClientPositionTolerance;                  // 0x3a0(0x4)
	float                                                        AvoidanceConsiderationRadius;                      // 0x3a4(0x4)
	struct Vector                                                RequestedVelocity;                                 // 0x3a8(0xc)
	int                                                          AvoidanceUID;                                      // 0x3b4(0x4)
	struct NavAvoidanceMask                                      AvoidanceGroup;                                    // 0x3b8(0x4)
	struct NavAvoidanceMask                                      GroupsToAvoid;                                     // 0x3bc(0x4)
	struct NavAvoidanceMask                                      GroupsToIgnore;                                    // 0x3c0(0x4)
	float                                                        AvoidanceWeight;                                   // 0x3c4(0x4)
	struct Vector                                                PendingLaunchVelocity;                             // 0x3c8(0xc)
	char                                                         pad0x9c_2I995[0x9c];                               // 0x3d4(0x9c)
	float                                                        NavMeshProjectionInterval;                         // 0x470(0x4)
	float                                                        NavMeshProjectionTimer;                            // 0x474(0x4)
	bool                                                         bUseNavMeshProjectionTimeModifier;                 // 0x478(0x1)
	char                                                         pad0x3_JNB5H[0x3];                                 // 0x479(0x3)
	float                                                        MaxNavMeshProjectionInterval;                      // 0x47c(0x4)
	char                                                         pad0x4_6Q4QJ[0x4];                                 // 0x480(0x4)
	float                                                        NavMeshProjectionInterpSpeed;                      // 0x484(0x4)
	bool                                                         bUsePlaneBasedNavMeshProjectionInterpSystem;       // 0x488(0x1)
	char                                                         pad0x3_SXEX2[0x3];                                 // 0x489(0x3)
	float                                                        MaxAllowedZOffsetFromCurrentPlane;                 // 0x48c(0x4)
	float                                                        MaxZDiffFromPrevPlane;                             // 0x490(0x4)
	char                                                         pad0x1c_IECL9[0x1c];                               // 0x494(0x1c)
	float                                                        NavMeshProjectionHeightScaleUp;                    // 0x4b0(0x4)
	float                                                        NavMeshProjectionHeightScaleDown;                  // 0x4b4(0x4)
	bool                                                         UseControllerRotationInNavWalkingMoveComponent;    // 0x4b8(0x1)
	char                                                         pad0x7_4K1QA[0x7];                                 // 0x4b9(0x7)
	struct CharacterMovementComponentPreClothTickFunction        PreClothComponentTick;                             // 0x4c0(0x50)
	char                                                         pad0x14_T45OG[0x14];                               // 0x510(0x14)
	float                                                        MinTimeBetweenTimeStampResets;                     // 0x524(0x4)
	char                                                         pad0x8_8NATP[0x8];                                 // 0x528(0x8)
	struct RootMotionMovementParams                              RootMotionParams;                                  // 0x530(0x40)
	bool                                                         bWasSimulatingRootMotion;                          // 0x570(0x1)
	char                                                         pad0xf_23925[0xf];                                 // 0x571(0xf)
};


// Size 0x80 (Full Size[0x4e0] - InheritedSize[0x460]
class DirectionalLightComponent: public LightComponent
{
public:
	bool                                                         bEnableLightShaftOcclusion;                        // 0x458(0x1)
	char                                                         pad0x3_E24BF[0x3];                                 // 0x459(0x3)
	float                                                        OcclusionMaskDarkness;                             // 0x45c(0x4)
	float                                                        OcclusionDepthRange;                               // 0x460(0x4)
	struct Vector                                                LightShaftOverrideDirection;                       // 0x464(0xc)
	float                                                        WholeSceneDynamicShadowRadius;                     // 0x470(0x4)
	float                                                        DynamicShadowDistanceMovableLight;                 // 0x474(0x4)
	float                                                        DynamicShadowDistanceStationaryLight;              // 0x478(0x4)
	int                                                          DynamicShadowCascades;                             // 0x47c(0x4)
	float                                                        CascadeDistributionExponent;                       // 0x480(0x4)
	float                                                        CascadeTransitionFraction;                         // 0x484(0x4)
	float                                                        ShadowDistanceFadeoutFraction;                     // 0x488(0x4)
	float                                                        LastTransitionSizeOverride;                        // 0x48c(0x4)
	float                                                        CloseCascadeUpdateRateInMs;                        // 0x490(0x4)
	float                                                        FarCascadesUpdateRateInMs;                         // 0x494(0x4)
	bool                                                         bUseInsetShadowsForMovableObjects;                 // 0x498(0x1)
	char                                                         pad0x3_UMLC3[0x3];                                 // 0x499(0x3)
	int                                                          FarShadowCascadeCount;                             // 0x49c(0x4)
	float                                                        FarShadowDistance;                                 // 0x4a0(0x4)
	float                                                        NormalOffsetScale;                                 // 0x4a4(0x4)
	float                                                        CloudsShadowsIntensity;                            // 0x4a8(0x4)
	float                                                        DistanceFieldShadowDistance;                       // 0x4ac(0x4)
	float                                                        LightSourceAngle;                                  // 0x4b0(0x4)
	float                                                        TraceDistance;                                     // 0x4b4(0x4)
	struct LightmassDirectionalLightSettings                     LightmassSettings;                                 // 0x4b8(0x10)
	bool                                                         bCastModulatedShadows;                             // 0x4c8(0x1)
	char                                                         pad0x3_NVT36[0x3];                                 // 0x4c9(0x3)
	struct Color                                                 ModulatedShadowColor;                              // 0x4cc(0x4)
	bool                                                         bUsedAsAtmosphereSunLight;                         // 0x4d0(0x1)
	char                                                         pad0xf_YGJTO[0xf];                                 // 0x4d1(0xf)
};


// Size 0x0 (Full Size[0x1c8] - InheritedSize[0x1c8]
class MaterialExpressionTextureSampleParameterCube: public MaterialExpressionTextureSampleParameter
{
public:
};


// Size 0x3e0 (Full Size[0x9b0] - InheritedSize[0x5d0]
class FFTWaterComponent: public BaseWaterComponent
{
public:
	struct FFTWaterComponentParams                               WaterParams;                                       // 0x5c8(0x310)
	class Model*                                                 Brush;                                             // 0x8d8(0x8)
	class BodySetup*                                             BrushBodySetup;                                    // 0x8e0(0x8)
	struct Vector                                                PrePivot;                                          // 0x8e8(0xc)
	char                                                         pad0x84_NX2WW[0x84];                               // 0x8f4(0x84)
	class MaterialInterface*                                     LightFunctionMaterial;                             // 0x978(0x8)
	class Material*                                              DefaultLightFunctionMaterial;                      // 0x980(0x8)
	char                                                         pad0x28_74J9C[0x28];                               // 0x988(0x28)
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class DistributionFloatParticleParameter: public DistributionFloatParameterBase
{
public:
};


// Size 0x10 (Full Size[0x5f0] - InheritedSize[0x5e0]
class BoxComponent: public ShapeComponent
{
public:
	struct Vector                                                BoxExtent;                                         // 0x5d8(0xc)
	char                                                         pad0xc_VKZ8O[0xc];                                 // 0x5e4(0xc)
};


// Size 0x28 (Full Size[0x410] - InheritedSize[0x3e8]
class PainCausingVolume: public PhysicsVolume
{
public:
	bool                                                         bPainCausing;                                      // 0x3e8(0x1)
	char                                                         pad0x3_4FCE8[0x3];                                 // 0x3e9(0x3)
	float                                                        DamagePerSec;                                      // 0x3ec(0x4)
	class UClass*                                                DamageType;                                        // 0x3f0(0x8)
	float                                                        PainInterval;                                      // 0x3f8(0x4)
	bool                                                         bEntryPain;                                        // 0x3fc(0x1)
	bool                                                         BACKUP_bPainCausing;                               // 0x3fc(0x1)
	char                                                         pad0x3_38LCN[0x3];                                 // 0x3fd(0x3)
	class Controller*                                            DamageInstigator;                                  // 0x400(0x8)
	char                                                         pad0x8_4GFUS[0x8];                                 // 0x408(0x8)
};


// Size 0x20 (Full Size[0x238] - InheritedSize[0x218]
class ParticleModuleLocationPrimitiveSphere_Seeded: public ParticleModuleLocationPrimitiveSphere
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x218(0x20)
};


// Size 0x0 (Full Size[0x5e0] - InheritedSize[0x5e0]
class SphereComponent: public ShapeComponent
{
public:
	float                                                        SphereRadius;                                      // 0x5d8(0x4)
	char                                                         pad0x4_JBMJ4[0x4];                                 // 0x5dc(0x4)
};


// Size 0x20 (Full Size[0x368] - InheritedSize[0x348]
class ParticleModuleLocationPrimitiveCylinder_Seeded: public ParticleModuleLocationPrimitiveCylinder
{
public:
	struct ParticleRandomSeedInfo                                RandomSeedInfo;                                    // 0x348(0x20)
};


// Size 0x120 (Full Size[0x6f0] - InheritedSize[0x5d0]
class SkinnedMeshComponent: public MeshComponent
{
public:
	class SkeletalMesh*                                          SkeletalMesh;                                      // 0x5c8(0x8)
	class MaterialInterface*                                     CustomDepthMaterial;                               // 0x618(0x8)
	char                                                         pad0x10_FDW6O[0x10];                               // 0x620(0x10)
	bool                                                         bUseBoundsFromMasterPoseComponent;                 // 0x630(0x1)
	char                                                         pad0x7_EK4DC[0x7];                                 // 0x631(0x7)
	TArray<struct ActiveVertexAnim>                              ActiveVertexAnims;                                 // 0x638(0x10)
	class PhysicsAsset*                                          PhysicsAssetOverride;                              // 0x648(0x8)
	int                                                          ForcedLodModel;                                    // 0x650(0x4)
	int                                                          MinLodModel;                                       // 0x654(0x4)
	int                                                          PredictedLODLevel;                                 // 0x658(0x4)
	int                                                          OldPredictedLODLevel;                              // 0x65c(0x4)
	float                                                        MaxDistanceFactor;                                 // 0x660(0x4)
	char                                                         pad0x4_43N58[0x4];                                 // 0x664(0x4)
	TArray<struct SkelMeshComponentLODInfo>                      LODInfo;                                           // 0x668(0x10)
	float                                                        StreamingDistanceMultiplier;                       // 0x678(0x4)
	struct Color                                                 WireframeColor;                                    // 0x67c(0x4)
	bool                                                         bForceWireframe;                                   // 0x680(0x1)
	bool                                                         bDisplayBones;                                     // 0x680(0x1)
	bool                                                         bDisplayBoneCollisions;                            // 0x680(0x1)
	bool                                                         bDisableMorphTarget;                               // 0x680(0x1)
	bool                                                         bHideSkin;                                         // 0x680(0x1)
	char                                                         pad0x17_GTDGB[0x17];                               // 0x681(0x17)
	bool                                                         bPerBoneMotionBlur;                                // 0x698(0x1)
	bool                                                         bComponentUseFixedSkelBounds;                      // 0x698(0x1)
	bool                                                         bConsiderAllBodiesForBounds;                       // 0x698(0x1)
	char                                                         pad0x3_ECWFL[0x3];                                 // 0x699(0x3)
	char                                                         MeshComponentUpdateFlag;                           // 0x69c(0x1)
	char                                                         pad0x3_NOT2V[0x3];                                 // 0x69d(0x3)
	bool                                                         bForceMeshObjectUpdate;                            // 0x6a0(0x1)
	bool                                                         bChartDistanceFactor;                              // 0x6a0(0x1)
	bool                                                         bCanHighlightSelectedSections;                     // 0x6a0(0x1)
	bool                                                         bRecentlyRendered;                                 // 0x6a0(0x1)
	char                                                         pad0x3_O2KZP[0x3];                                 // 0x6a1(0x3)
	float                                                        ProgressiveDrawingFraction;                        // 0x6a4(0x4)
	char                                                         CustomSortAlternateIndexMode;                      // 0x6a8(0x1)
	char                                                         pad0x13_NX195[0x13];                               // 0x6a9(0x13)
	struct BoxSphereBounds                                       CachedLocalBounds;                                 // 0x6bc(0x1c)
	bool                                                         bCachedLocalBoundsUpToDate;                        // 0x6d8(0x1)
	bool                                                         bEnableUpdateRateOptimizations;                    // 0x6d9(0x1)
	bool                                                         bDisplayDebugUpdateRateOptimizations;              // 0x6da(0x1)
	char                                                         pad0x15_W33UU[0x15];                               // 0x6db(0x15)
};


// Size 0x40 (Full Size[0x4a0] - InheritedSize[0x460]
class PointLightComponent: public LightComponent
{
public:
	float                                                        Radius;                                            // 0x458(0x4)
	float                                                        AttenuationRadius;                                 // 0x45c(0x4)
	bool                                                         bUseInverseSquaredFalloff;                         // 0x460(0x1)
	char                                                         pad0x3_W8RRJ[0x3];                                 // 0x461(0x3)
	float                                                        LightFalloffExponent;                              // 0x464(0x4)
	float                                                        IntensityScaleForWater;                            // 0x468(0x4)
	float                                                        MinDistanceToLightAssumed;                         // 0x46c(0x4)
	float                                                        SourceRadius;                                      // 0x470(0x4)
	float                                                        SourceLength;                                      // 0x474(0x4)
	char                                                         SimpleFunctionType;                                // 0x478(0x1)
	char                                                         pad0x3_YQLFX[0x3];                                 // 0x479(0x3)
	float                                                        ScaleOffset;                                       // 0x47c(0x4)
	float                                                        PulsePhase;                                        // 0x480(0x4)
	float                                                        FlickerFrequency;                                  // 0x484(0x4)
	int                                                          FlickerPerlinRow;                                  // 0x488(0x4)
	struct LightmassPointLightSettings                           LightmassSettings;                                 // 0x48c(0xc)
	char                                                         pad0x8_9E660[0x8];                                 // 0x498(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class DistributionVectorParticleParameter: public DistributionVectorParameterBase
{
public:
};


// Size 0x18 (Full Size[0x7b0] - InheritedSize[0x798]
class LogVisualizerCameraController: public DebugCameraController
{
public:
	class Actor*                                                 PickedActor;                                       // 0x798(0x8)
	char                                                         pad0x10_UY0CV[0x10];                               // 0x7a0(0x10)
};


// Size 0x0 (Full Size[0x3e8] - InheritedSize[0x3e8]
class KillZVolume: public PhysicsVolume
{
public:
};


// Size 0x30 (Full Size[0x490] - InheritedSize[0x460]
class AmbientLightSourceComponent: public LightComponent
{
public:
	float                                                        Radius;                                            // 0x458(0x4)
	float                                                        AmbientIntensity;                                  // 0x45c(0x4)
	struct LinearColor                                           Tint;                                              // 0x460(0x10)
	bool                                                         QuadraticFalloff;                                  // 0x470(0x1)
	char                                                         pad0x3_Z8P3L[0x3];                                 // 0x471(0x3)
	char                                                         Shape;                                             // 0x474(0x1)
	char                                                         SimpleFunctionType;                                // 0x475(0x1)
	char                                                         pad0x2_FVPAR[0x2];                                 // 0x476(0x2)
	float                                                        ScaleOffset;                                       // 0x478(0x4)
	float                                                        PulsePhase;                                        // 0x47c(0x4)
	float                                                        FlickerFrequency;                                  // 0x480(0x4)
	int                                                          FlickerPerlinRow;                                  // 0x484(0x4)
	bool                                                         bShadowed;                                         // 0x488(0x1)
	char                                                         GroupingPolicy;                                    // 0x489(0x1)
	char                                                         pad0x6_G7LEO[0x6];                                 // 0x48a(0x6)
};


// Size 0x50 (Full Size[0x620] - InheritedSize[0x5d0]
class StaticMeshComponent: public MeshComponent
{
public:
	int                                                          ForcedLodModel;                                    // 0x5c8(0x4)
	bool                                                         bOverrideMinLOD;                                   // 0x5cc(0x1)
	bool                                                         bOverrideNavigationToDefaultObstacle;              // 0x5cd(0x1)
	char                                                         pad0x2_OWNO4[0x2];                                 // 0x5ce(0x2)
	int                                                          MinLOD;                                            // 0x5d0(0x4)
	char                                                         pad0x4_W4ECG[0x4];                                 // 0x5d4(0x4)
	class StaticMesh*                                            StaticMesh;                                        // 0x5d8(0x8)
	bool                                                         bOverrideWireframeColor;                           // 0x5e0(0x1)
	char                                                         pad0x3_NCGQT[0x3];                                 // 0x5e1(0x3)
	struct Color                                                 WireframeColorOverride;                            // 0x5e4(0x4)
	bool                                                         bIgnoreInstanceForTextureStreaming;                // 0x5e8(0x1)
	bool                                                         bOverrideLightMapRes;                              // 0x5e8(0x1)
	char                                                         pad0x3_3GUT4[0x3];                                 // 0x5e9(0x3)
	int                                                          OverriddenLightMapRes;                             // 0x5ec(0x4)
	float                                                        StreamingDistanceMultiplier;                       // 0x5f0(0x4)
	char                                                         pad0x4_2Q4LX[0x4];                                 // 0x5f4(0x4)
	TArray<struct Guid>                                          IrrelevantLights;                                  // 0x5f8(0x10)
	TArray<struct StaticMeshComponentLODInfo>                    LODData;                                           // 0x608(0x10)
	class MaterialInterface*                                     CustomDepthMaterial;                               // 0x618(0x8)
};


// Size 0x40 (Full Size[0x660] - InheritedSize[0x620]
class MergedStaticMeshComponent: public StaticMeshComponent
{
public:
	bool                                                         bDisplayMergedInEditor;                            // 0x620(0x1)
	char                                                         pad0x7_AJDOJ[0x7];                                 // 0x621(0x7)
	TArray<float>                                                LODScreenSizes;                                    // 0x628(0x10)
	TArray<float>                                                LODReductionPercentTriangles;                      // 0x638(0x10)
	int                                                          LODForCollision;                                   // 0x648(0x4)
	bool                                                         ClampNumberOfLODs;                                 // 0x64c(0x1)
	char                                                         pad0x3_E7VUD[0x3];                                 // 0x64d(0x3)
	int                                                          MaxNumberOfLODs;                                   // 0x650(0x4)
	bool                                                         bMergeVertexColours;                               // 0x654(0x1)
	char                                                         pad0xb_7EWJC[0xb];                                 // 0x655(0xb)
};


// Size 0x2d0 (Full Size[0x9c0] - InheritedSize[0x6f0]
class SkeletalMeshComponent: public SkinnedMeshComponent
{
public:
	char                                                         pad0x10_UTRES[0x10];                               // 0x6f0(0x10)
	char                                                         AnimationMode;                                     // 0x700(0x1)
	char                                                         pad0x7_P9JST[0x7];                                 // 0x701(0x7)
	class UClass*                                                AnimBlueprintGeneratedClass;                       // 0x708(0x8)
	class AnimInstance*                                          AnimScriptInstance;                                // 0x710(0x8)
	struct SingleAnimationPlayData                               AnimationData;                                     // 0x718(0x20)
	char                                                         pad0x10_GHLY7[0x10];                               // 0x738(0x10)
	TArray<struct Transform>                                     CachedLocalAtoms;                                  // 0x748(0x10)
	TArray<struct Transform>                                     CachedSpaceBases;                                  // 0x758(0x10)
	char                                                         pad0x28_ETNIP[0x28];                               // 0x768(0x28)
	float                                                        GlobalAnimRateScale;                               // 0x790(0x4)
	bool                                                         bHasValidBodies;                                   // 0x794(0x1)
	char                                                         pad0x3_TIRCX[0x3];                                 // 0x795(0x3)
	char                                                         KinematicBonesUpdateType;                          // 0x798(0x1)
	char                                                         pad0x3_KZJXE[0x3];                                 // 0x799(0x3)
	bool                                                         bBlendPhysics;                                     // 0x79c(0x1)
	bool                                                         bEnablePhysicsOnDedicatedServer;                   // 0x79c(0x1)
	bool                                                         bUpdateJointsFromAnimation;                        // 0x79c(0x1)
	bool                                                         bDisableClothSimulation;                           // 0x79c(0x1)
	bool                                                         bCollideWithEnvironment;                           // 0x79c(0x1)
	bool                                                         bCollideWithAttachedChildren;                      // 0x79c(0x1)
	bool                                                         bLocalSpaceSimulation;                             // 0x79c(0x1)
	bool                                                         bClothMorphTarget;                                 // 0x79c(0x1)
	bool                                                         bResetAfterTeleport;                               // 0x79d(0x1)
	char                                                         pad0x2_JSJ3X[0x2];                                 // 0x79e(0x2)
	float                                                        TeleportDistanceThreshold;                         // 0x7a0(0x4)
	float                                                        TeleportRotationThreshold;                         // 0x7a4(0x4)
	float                                                        ClothBlendWeight;                                  // 0x7a8(0x4)
	char                                                         pad0x4_I6G6Z[0x4];                                 // 0x7ac(0x4)
	struct Vector                                                RootBoneTranslation;                               // 0x7b0(0xc)
	bool                                                         bNoSkeletonUpdate;                                 // 0x7bc(0x1)
	bool                                                         bPauseAnims;                                       // 0x7bc(0x1)
	bool                                                         bEnablePerPolyCollision;                           // 0x7bc(0x1)
	char                                                         pad0x3_YEQNC[0x3];                                 // 0x7bd(0x3)
	class BodySetup*                                             BodySetup;                                         // 0x7c0(0x8)
	bool                                                         bAutonomousTickPose;                               // 0x7c8(0x1)
	bool                                                         bForceRefpose;                                     // 0x7c8(0x1)
	bool                                                         bOldForceRefPose;                                  // 0x7c8(0x1)
	bool                                                         bShowPrePhysBones;                                 // 0x7c8(0x1)
	bool                                                         bRequiredBonesUpToDate;                            // 0x7c8(0x1)
	bool                                                         bAnimTreeInitialised;                              // 0x7c8(0x1)
	bool                                                         bEnableLineCheckWithBounds;                        // 0x7c8(0x1)
	char                                                         pad0x3_NSK8Q[0x3];                                 // 0x7c9(0x3)
	struct Vector                                                LineCheckBoundsScale;                              // 0x7cc(0xc)
	int                                                          RagdollAggregateThreshold;                         // 0x7d8(0x4)
	char                                                         pad0x4_UHGTD[0x4];                                 // 0x7dc(0x4)
	bool                                                         UseRefPoseToInitialise;                            // 0x7f0(0x1)
	char                                                         pad0x1c7_W5FGL[0x1c7];                             // 0x7f1(0x1c7)
	float                                                        LastPoseTickTime;                                  // 0x9b8(0x4)
	char                                                         pad0x4_1TSJG[0x4];                                 // 0x9bc(0x4)
};


// Size 0x0 (Full Size[0x5e0] - InheritedSize[0x5e0]
class EllipsoidComponent: public SphereComponent
{
public:
};


// Size 0x90 (Full Size[0x6b0] - InheritedSize[0x620]
class InstancedCoverageMeshComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_E3FIQ[0x8];                                 // 0x620(0x8)
	int                                                          InstanceCount;                                     // 0x628(0x4)
	int                                                          InstancingRandomSeed;                              // 0x62c(0x4)
	float                                                        InstancePositionExtrusion;                         // 0x630(0x4)
	float                                                        InstanceScale;                                     // 0x634(0x4)
	float                                                        InstanceScaleVariance;                             // 0x638(0x4)
	struct Rotator                                               InstanceRotation;                                  // 0x63c(0xc)
	struct Rotator                                               InstanceRotationVariance;                          // 0x648(0xc)
	struct Vector                                                InstanceAttractionDirection;                       // 0x654(0xc)
	float                                                        InstanceAttractionIntensity;                       // 0x660(0x4)
	int                                                          InstanceBaseMeshPlacementLOD;                      // 0x664(0x4)
	TArray<struct InstancedCoverageMeshLOD>                      LODs;                                              // 0x668(0x10)
	float                                                        CompleteCullingDistance;                           // 0x678(0x4)
	bool                                                         InstanceLODPreserveSilhouette;                     // 0x67c(0x1)
	char                                                         pad0x3_N2LMM[0x3];                                 // 0x67d(0x3)
	float                                                        BackFaceCullingAngle;                              // 0x680(0x4)
	float                                                        ShadowBackFaceCullingAngle;                        // 0x684(0x4)
	int                                                          MaxPlacementAttempts;                              // 0x688(0x4)
	bool                                                         bEvenlySpaced;                                     // 0x68c(0x1)
	bool                                                         bVertexColourDensity;                              // 0x68d(0x1)
	bool                                                         bUpdatePlacement;                                  // 0x68e(0x1)
	char                                                         pad0x1_9SW9D[0x1];                                 // 0x68f(0x1)
	TArray<float>                                                RandomNumbers;                                     // 0x690(0x10)
	float                                                        BaseMeshSurfaceArea;                               // 0x6a0(0x4)
	char                                                         pad0x4_4EOVQ[0x4];                                 // 0x6a4(0x4)
	class StaticMesh*                                            CoveredMesh;                                       // 0x6a8(0x8)
};


// Size 0x8 (Full Size[0x170] - InheritedSize[0x168]
class SpectatorPawnMovement: public FloatingPawnMovement
{
public:
	bool                                                         bIgnoreTimeDilation;                               // 0x168(0x1)
	char                                                         pad0x7_FL18A[0x7];                                 // 0x169(0x7)
};


// Size 0x8 (Full Size[0x1d0] - InheritedSize[0x1c8]
class MaterialExpressionAntialiasedTextureMask: public MaterialExpressionTextureSampleParameter2D
{
public:
	float                                                        Threshold;                                         // 0x1c8(0x4)
	char                                                         Channel;                                           // 0x1cc(0x1)
	char                                                         pad0x3_T1ZEX[0x3];                                 // 0x1cd(0x3)
};


// Size 0xb0 (Full Size[0x6d0] - InheritedSize[0x620]
class InstancedStaticMeshComponent: public StaticMeshComponent
{
public:
	TArray<struct InstancedStaticMeshInstanceData>               PerInstanceSMData;                                 // 0x620(0x10)
	int                                                          InstancingRandomSeed;                              // 0x630(0x4)
	int                                                          InstanceStartCullDistance;                         // 0x634(0x4)
	int                                                          InstanceEndCullDistance;                           // 0x638(0x4)
	char                                                         pad0x4_CKZWJ[0x4];                                 // 0x63c(0x4)
	TArray<int>                                                  InstanceReorderTable;                              // 0x640(0x10)
	TArray<int>                                                  RemovedInstances;                                  // 0x650(0x10)
	char                                                         pad0x48_ZY53P[0x48];                               // 0x660(0x48)
	class PhysicsSerializer*                                     PhysicsSerializer;                                 // 0x6a8(0x8)
	int                                                          NumPendingLightmaps;                               // 0x6b0(0x4)
	char                                                         pad0x4_TSGHB[0x4];                                 // 0x6b4(0x4)
	TArray<struct InstancedStaticMeshMappingInfo>                CachedMappings;                                    // 0x6b8(0x10)
	char                                                         pad0x8_OIHTQ[0x8];                                 // 0x6c8(0x8)
};


// Size 0x10 (Full Size[0x4b0] - InheritedSize[0x4a0]
class SpotLightComponent: public PointLightComponent
{
public:
	float                                                        InnerConeAngle;                                    // 0x498(0x4)
	float                                                        OuterConeAngle;                                    // 0x49c(0x4)
	float                                                        LightShaftConeAngle;                               // 0x4a0(0x4)
	float                                                        KickBackRatio;                                     // 0x4a4(0x4)
	char                                                         pad0x8_A2FGM[0x8];                                 // 0x4a8(0x8)
};


// Size 0x0 (Full Size[0x5e0] - InheritedSize[0x5e0]
class DrawSphereComponent: public SphereComponent
{
public:
};


// Size 0x8 (Full Size[0x1d0] - InheritedSize[0x1c8]
class MaterialExpressionTextureSampleParameterSubUV: public MaterialExpressionTextureSampleParameter2D
{
public:
	bool                                                         bBlend;                                            // 0x1c8(0x1)
	bool                                                         bMipBiasOnLowResolution;                           // 0x1c8(0x1)
	char                                                         pad0x7_YW6HW[0x7];                                 // 0x1c9(0x7)
};


// Size 0x40 (Full Size[0x208] - InheritedSize[0x1c8]
class MaterialExpressionPredicatedTextureSampleParameter2D: public MaterialExpressionTextureSampleParameter2D
{
public:
	struct ExpressionInput                                       Predicate;                                         // 0x1c8(0x38)
	struct Color                                                 DefaultColour;                                     // 0x200(0x4)
	char                                                         pad0x4_23LYP[0x4];                                 // 0x204(0x4)
};


// Size 0xd0 (Full Size[0x7c0] - InheritedSize[0x6f0]
class PoseableMeshComponent: public SkinnedMeshComponent
{
public:
	char                                                         pad0xd0_8QJCQ[0xd0];                               // 0x6f0(0xd0)
};


// Size 0x90 (Full Size[0x6b0] - InheritedSize[0x620]
class MobileInstancedStaticMeshComponent: public StaticMeshComponent
{
public:
	int                                                          MaxInstances;                                      // 0x620(0x4)
	char                                                         pad0x24_KEA2G[0x24];                               // 0x624(0x24)
	TArray<struct Transform>                                     InstanceTransforms;                                // 0x648(0x10)
	TArray<struct Matrix>                                        InstanceMatrices;                                  // 0x658(0x10)
	struct BoxSphereBounds                                       LocalBounds;                                       // 0x668(0x1c)
	bool                                                         bBoundsBuilt;                                      // 0x684(0x1)
	char                                                         pad0x3_DP2D6[0x3];                                 // 0x685(0x3)
	class PhysicsSerializer*                                     PhysicsSerializer;                                 // 0x688(0x8)
	char                                                         pad0x20_CTQ8G[0x20];                               // 0x690(0x20)
};


// Size 0xa0 (Full Size[0x6c0] - InheritedSize[0x620]
class FlatWaterMeshComponent: public StaticMeshComponent
{
public:
	int                                                          RandomDropRate;                                    // 0x620(0x4)
	float                                                        RandomDropSize;                                    // 0x624(0x4)
	float                                                        RandomDropHeight;                                  // 0x628(0x4)
	float                                                        RestorationScale;                                  // 0x62c(0x4)
	float                                                        ForceScale;                                        // 0x630(0x4)
	float                                                        DampHeight;                                        // 0x634(0x4)
	float                                                        NormalMapScale;                                    // 0x638(0x4)
	int                                                          TextureWidth;                                      // 0x63c(0x4)
	int                                                          TextureHeight;                                     // 0x640(0x4)
	char                                                         pad0x4_CCY6X[0x4];                                 // 0x644(0x4)
	class StaticMesh*                                            ClippingHull;                                      // 0x648(0x8)
	float                                                        MaxSimulationDistance;                             // 0x650(0x4)
	float                                                        InitialRandomHeight;                               // 0x654(0x4)
	float                                                        InitialRandomVelocity;                             // 0x658(0x4)
	char                                                         pad0x4_3KK73[0x4];                                 // 0x65c(0x4)
	class Texture2D*                                             Texture;                                           // 0x660(0x8)
	class Texture2D*                                             NormalTexture;                                     // 0x668(0x8)
	class TextureRenderTarget2D*                                 WaterMaskTexture;                                  // 0x670(0x8)
	char                                                         pad0x18_2JQAY[0x18];                               // 0x678(0x18)
	TArray<class MaterialInterface*>                             OriginalMaterials;                                 // 0x690(0x10)
	TArray<struct FlatWaterMeshTextureOverride>                  TextureOverrides;                                  // 0x6a0(0x10)
	char                                                         pad0x10_P586T[0x10];                               // 0x6b0(0x10)
};


// Size 0xc0 (Full Size[0x7b0] - InheritedSize[0x6f0]
class DestructibleComponent: public SkinnedMeshComponent
{
public:
	bool                                                         bFractureEffectOverride;                           // 0x6f0(0x1)
	char                                                         pad0x7_A1XJU[0x7];                                 // 0x6f1(0x7)
	TArray<struct FractureEffect>                                FractureEffects;                                   // 0x6f8(0x10)
	bool                                                         bEnableHardSleeping;                               // 0x708(0x1)
	char                                                         pad0x3_ZDDUT[0x3];                                 // 0x709(0x3)
	float                                                        LargeChunkThreshold;                               // 0x70c(0x4)
	char                                                         pad0x10_WKJ8G[0x10];                               // 0x710(0x10)
	char                                                         pad0x90_IBERV[0x90];                               // 0x720(0x90)
};


// Size 0xa0 (Full Size[0x6c0] - InheritedSize[0x620]
class SplineMeshComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_4IGCJ[0x8];                                 // 0x620(0x8)
	struct SplineMeshParams                                      SplineParams;                                      // 0x628(0x58)
	struct Vector                                                SplineUpDir;                                       // 0x680(0xc)
	bool                                                         bAllowSplineEditingPerInstance;                    // 0x68c(0x1)
	bool                                                         bSmoothInterpRollScale;                            // 0x68c(0x1)
	char                                                         pad0x3_ARFD9[0x3];                                 // 0x68d(0x3)
	char                                                         ForwardAxis;                                       // 0x690(0x1)
	char                                                         pad0x3_UAEUC[0x3];                                 // 0x691(0x3)
	float                                                        SplineBoundaryMin;                                 // 0x694(0x4)
	float                                                        SplineBoundaryMax;                                 // 0x698(0x4)
	char                                                         pad0x4_5AVYC[0x4];                                 // 0x69c(0x4)
	class BodySetup*                                             BodySetup;                                         // 0x6a0(0x8)
	struct Guid                                                  CachedMeshBodySetupGuid;                           // 0x6a8(0x10)
	bool                                                         bMeshDirty;                                        // 0x6b8(0x1)
	char                                                         pad0x7_8Q70L[0x7];                                 // 0x6b9(0x7)
};


// Size 0xd0 (Full Size[0x7a0] - InheritedSize[0x6d0]
class HierarchicalInstancedStaticMeshComponent: public InstancedStaticMeshComponent
{
public:
	char                                                         pad0x40_X2G9U[0x40];                               // 0x6d0(0x40)
	TArray<int>                                                  SortedInstances;                                   // 0x710(0x10)
	int                                                          NumBuiltInstances;                                 // 0x720(0x4)
	struct Box                                                   BuiltInstanceBounds;                               // 0x724(0x1c)
	struct Box                                                   UnbuiltInstanceBounds;                             // 0x740(0x1c)
	char                                                         pad0x4_9C82Y[0x4];                                 // 0x75c(0x4)
	TArray<struct Box>                                           UnbuiltInstanceBoundsList;                         // 0x760(0x10)
	int                                                          OcclusionLayerNumNodes;                            // 0x770(0x4)
	char                                                         pad0x2_3LL3N[0x2];                                 // 0x774(0x2)
	bool                                                         bDisableCollision;                                 // 0x776(0x1)
	char                                                         pad0x29_9PDSH[0x29];                               // 0x777(0x29)
};


// Size 0x10 (Full Size[0x9d0] - InheritedSize[0x9c0]
class PoseableSkeletalMeshComponent: public SkeletalMeshComponent
{
public:
	char                                                         pad0x10_TPAVB[0x10];                               // 0x9c0(0x10)
};


