// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid
namespace DougsSDKDumper
{
//-----
// Classes
//-----

// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class AthenaAIFormComponent: public ActorComponent
{
public:
	char                                                         pad0x8_VUF9X[0x8];                                 // 0xc8(0x8)
	TArray<struct VfxCustomisations>                             VfxCustomisations;                                 // 0xd0(0x10)
	Class AthenaAIFormDataAsset*                                 FormData;                                          // 0xe0(0x8)
	Class CharacterHitReactionDamagerTypeToAnimTypeLayer*        HitReactionsLayer;                                 // 0xe8(0x8)
	char                                                         pad0x58_HO50P[0x58];                               // 0xf0(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIAbilityType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIStrategyId: public Object
{
public:
};


// Size 0x410 (Full Size[0x438] - InheritedSize[0x28]
class AISpawner: public DataAsset
{
public:
	char                                                         pad0x10_QGTUX[0x10];                               // 0x28(0x10)
	bool                                                         HasSpawnerLevelEncounters;                         // 0x38(0x1)
	char                                                         pad0x7_697S6[0x7];                                 // 0x39(0x7)
	Struct AISpawnTypeParamsCollection                           SpawnTypeParamsCollection;                         // 0x40(0x48)
	Class AIEncounterSettings*                                   DefaultEncounterSettings;                          // 0x88(0x8)
	Class AISpawnWaveSequenceRankProgression*                    DefaultSpawnWaveProgression;                       // 0x90(0x8)
	TArray<struct SpawnContextSpecificEncounterSettings>         SpawnContextSpecificEncounterSettings;             // 0x98(0x10)
	bool                                                         ShouldSpawnFacingRegionCentre;                     // 0xa8(0x1)
	byte                                                         DefaultSpawnType;                                  // 0xa9(0x1)
	char                                                         pad0x6_NY0XD[0x6];                                 // 0xaa(0x6)
	Class EnvQuery*                                              FindSpawnPosQuery;                                 // 0xb0(0x8)
	byte                                                         FindSpawnPosQueryRunMode;                          // 0xb8(0x1)
	char                                                         pad0x3_PWTW3[0x3];                                 // 0xb9(0x3)
	struct FName                                                 SpawnLocationType;                                 // 0xbc(0x8)
	int                                                          MaxNumOfSpawnedPawns;                              // 0xc4(0x4)
	int                                                          PriorityForSpawnedPawns;                           // 0xc8(0x4)
	char                                                         pad0x4_HZAAP[0x4];                                 // 0xcc(0x4)
	TArray<struct SpawnOverrides>                                SpawnOverrides;                                    // 0xd0(0x10)
	TArray<struct AdditionalBehaviours>                          AdditionalBehaviours;                              // 0xe0(0x10)
	bool                                                         EnforceHomePosition;                               // 0xf0(0x1)
	bool                                                         SpawnEvenIfExcluded;                               // 0xf1(0x1)
	char                                                         pad0x27e_RG0QG[0x27e];                             // 0xf2(0x27e)
	Class AthenaAISettings*                                      AthenaAISettings;                                  // 0x370(0x8)
	char                                                         pad0xc0_B8D5V[0xc0];                               // 0x378(0xc0)
};


// Size 0x160 (Full Size[0x598] - InheritedSize[0x438]
class AIPerCrewSpawner: public AISpawner
{
public:
	Class AIWeightedProbabilityRangeOfRangesRankProgression*     DefaultRespawnTimerRanges;                         // 0x438(0x8)
	int                                                          MaxNumOfCrewsToSpawnFor;                           // 0x440(0x4)
	bool                                                         ActivateBySettingFootOnIsland;                     // 0x444(0x1)
	bool                                                         UseRespawnTimerForFirstSpawn;                      // 0x445(0x1)
	bool                                                         AssociateSpawnsWithSpecificCrews;                  // 0x446(0x1)
	bool                                                         PerceiveTriggerActorOnSpawn;                       // 0x447(0x1)
	bool                                                         EnforceRespawnTimeAfterCrewLeaves;                 // 0x448(0x1)
	bool                                                         IgnoreSpawningGracePeriodForNewCrew;               // 0x449(0x1)
	char                                                         pad0x6_Q47H7[0x6];                                 // 0x44a(0x6)
	Class AIPerCrewSpawnerSettingsStoryOverrideAsset*            StoryOverrideRespawnSettingsAsset;                 // 0x450(0x8)
	char                                                         pad0x140_N8029[0x140];                             // 0x458(0x140)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class AthenaAIFormDataAsset: public DataAsset
{
public:
	TArray<Byte PreventHealthChangedReasons>                     PreventHealthChangedReasons;                       // 0x28(0x10)
	TArray<struct DamageResponses>                               DamageResponses;                                   // 0x38(0x10)
	Class StatusRecipientResponseList*                           OverrideStatusRecipientResponseList;               // 0x48(0x8)
	Class PhysicalMaterial*                                      SurfaceMaterial;                                   // 0x50(0x8)
	Class Object*                                                KilledVfxTemplate;                                 // 0x58(0x8)
	class                                                        AICharacterAudioComponent;                         // 0x60(0x8)
	class                                                        AnimNotifyEmitterWithObservers;                    // 0x68(0x8)
	bool                                                         HighPriorityFootstepAudio;                         // 0x70(0x1)
	char                                                         pad0x3_34UMF[0x3];                                 // 0x71(0x3)
	float                                                        MovementSpeedMultipler;                            // 0x74(0x4)
	Struct PlayerStat                                            StatToFireOnDeath;                                 // 0x78(0x4)
	struct FName                                                 FeatureName;                                       // 0x7c(0x8)
	char                                                         pad0x4_E0FY1[0x4];                                 // 0x84(0x4)
	class                                                        FormComponentClass;                                // 0x88(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPlayerTracker: public Object
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AISpawnerPlayerTracker: public AIPlayerTracker
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIInteractableType: public Object
{
public:
};


// Size 0x138 (Full Size[0x570] - InheritedSize[0x438]
class AIWaveSpawner: public AISpawner
{
public:
	char                                                         pad0x8_D342A[0x8];                                 // 0x438(0x8)
	Struct AISpawnerWave                                         SpawnedWave;                                       // 0x440(0x100)
	float                                                        MinRespawnTime;                                    // 0x540(0x4)
	float                                                        MaxRespawnTime;                                    // 0x544(0x4)
	char                                                         pad0x28_D6FAA[0x28];                               // 0x548(0x28)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAIAbilityStageParams: public Object
{
public:
	float                                                        AbilityCooldownSpeedMultiplier;                    // 0x28(0x4)
	float                                                        DamageRequiredForNextIntervalMultiplier;           // 0x2c(0x4)
	bool                                                         OverrideParams;                                    // 0x30(0x1)
	bool                                                         AutoActivateOnStageTransition;                     // 0x31(0x1)
	char                                                         pad0x6_MNC22[0x6];                                 // 0x32(0x6)
	class                                                        TypeClass;                                         // 0x38(0x8)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AthenaAIAbility: public Object
{
public:
	Class AthenaAIAbilityParams*                                 AbilityParams;                                     // 0x28(0x8)
	Class Pawn*                                                  Pawn;                                              // 0x30(0x8)
	Class AthenaAIController*                                    Controller;                                        // 0x38(0x8)
	Class AthenaAIAbilityStageParams*                            CurrentAbilityStageParams;                         // 0x50(0x8)
	char                                                         pad0x20_AWOA5[0x20];                               // 0x58(0x20)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class AthenaAIAbilityParams: public Object
{
public:
	TArray<struct NamedControllerParams>                         NamedControllerParams;                             // 0x28(0x10)
	byte                                                         DamageIntervalCountingMode;                        // 0x38(0x1)
	bool                                                         UseTimeBetweenAbility;                             // 0x39(0x1)
	char                                                         pad0x6_FG4ER[0x6];                                 // 0x3a(0x6)
	Struct AthenaAIAbilityPlayerBasedRanges                      ActivationTimerCooldown;                           // 0x40(0x10)
	Struct AthenaAIAbilityPlayerBasedRanges                      TimeBetweenAbility;                                // 0x50(0x10)
	bool                                                         UseDamageBetweenAbility;                           // 0x60(0x1)
	char                                                         pad0x7_ZAFSQ[0x7];                                 // 0x61(0x7)
	Struct AthenaAIAbilityPlayerBasedRanges                      DamageBetweenAbility;                              // 0x68(0x10)
	float                                                        AbilityRadius;                                     // 0x78(0x4)
	bool                                                         UseMinMaxAttackRange;                              // 0x7c(0x1)
	char                                                         pad0x3_Y2FTH[0x3];                                 // 0x7d(0x3)
	Struct MinMaxAbilityRange                                    MinMaxAttackRange;                                 // 0x80(0x8)
	TArray<struct FollowUpAbilities>                             FollowUpAbilities;                                 // 0x88(0x10)
	float                                                        Weight;                                            // 0x98(0x4)
	char                                                         pad0x4_EHLB5[0x4];                                 // 0x9c(0x4)
	Struct AIAbilityContinuousCooldownParameterData              ContinuousCooldownAbilityParameters;               // 0xa0(0x20)
	class                                                        AIAbilityTypeClass;                                // 0xc0(0x8)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class AIInteractableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NCT82[0x8];                                 // 0xc8(0x8)
	class                                                        Type;                                              // 0xd0(0x8)
	Struct Vector                                                DetachOffsetFromOwner;                             // 0xd8(0xc)
	bool                                                         CanHaveTarget;                                     // 0xe4(0x1)
	char                                                         pad0x1b_0SA4O[0x1b];                               // 0xe5(0x1b)
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_BaseConditional: public BTDecorator
{
public:
};


// Size 0x38 (Full Size[0xa0] - InheritedSize[0x68]
class BTDecorator_TargetOnShip: public BTDecorator_BaseConditional
{
public:
	bool                                                         Invert;                                            // 0x68(0x1)
	byte                                                         ShipOwnership;                                     // 0x69(0x1)
	char                                                         pad0x36_EN8AG[0x36];                               // 0x6a(0x36)
};


// Size 0x2a0 (Full Size[0x310] - InheritedSize[0x70]
class BTService_QueryShipsForTarget: public BTService
{
public:
	Struct AIDataProviderFloatValue                              MaxShipDistanceFromHomePosition;                   // 0x70(0x30)
	Struct AIDataProviderFloatValue                              MinDamageToSwitchTargets;                          // 0xa0(0x30)
	Struct AIDataProviderFloatValue                              MinSecondsBeforeSwitchTargets;                     // 0xd0(0x30)
	Struct AIDataProviderBoolValue                               SwitchTargetsAfterTimerExpires;                    // 0x100(0x30)
	Struct AIDataProviderFloatValue                              SecondsBeforeSwitchTargetsAfterTimerExpires;       // 0x130(0x30)
	Struct AIDataProviderFloatValue                              TimeBetweenDiceRolls;                              // 0x160(0x30)
	Struct AIDataProviderFloatValue                              DiceRollForAggression;                             // 0x190(0x30)
	Struct AIDataProviderFloatValue                              MinTotalDamageToTurnDiceRollForAggression;         // 0x1c0(0x30)
	Struct AIDataProviderFloatValue                              DiceRollForDamageAggression;                       // 0x1f0(0x30)
	Struct AIDataProviderFloatValue                              DiceRollForDamageDormancy;                         // 0x220(0x30)
	Struct AIDataProviderFloatValue                              PlayerDistanceThresholdToTurnAggressive;           // 0x250(0x30)
	bool                                                         IgnoreAI;                                          // 0x280(0x1)
	char                                                         pad0x8f_BKR62[0x8f];                               // 0x281(0x8f)
};


// Size 0x58 (Full Size[0xe0] - InheritedSize[0x88]
class BTTask_SwimAttackTargetActor: public BTTask_BlackboardBase
{
public:
	float                                                        DamageToApply;                                     // 0x88(0x4)
	float                                                        MaxAngleToTargetToSuccessfullyAttack;              // 0x8c(0x4)
	TArray<struct AttackAnimMapping>                             AttackAnimMapping;                                 // 0x90(0x10)
	struct FName                                                 LoSTraceProfileName;                               // 0xa0(0x8)
	Struct AIDataProviderFloatValue                              LosTraceRadius;                                    // 0xa8(0x30)
	float                                                        MaxDistanceToTargetToApplyDamage;                  // 0xd8(0x4)
	char                                                         pad0x4_2E8IG[0x4];                                 // 0xdc(0x4)
};


// Size 0x1b8 (Full Size[0x240] - InheritedSize[0x88]
class BTTask_SwimAttackTargetShip: public BTTask_BlackboardBase
{
public:
	float                                                        BiteRadiusOffsetToBeginAttackHeadOn;               // 0x88(0x4)
	float                                                        BiteRadiusOffsetToBeginAttackPerpendicular;        // 0x8c(0x4)
	float                                                        MaxTimeToStartAttack;                              // 0x90(0x4)
	char                                                         pad0x4_GYUOL[0x4];                                 // 0x94(0x4)
	Class AnimSequence*                                          AttackAnim;                                        // 0x98(0x8)
	float                                                        AttackAnimLength;                                  // 0xa0(0x4)
	float                                                        TimeToPerformAttack;                               // 0xa4(0x4)
	Class Object*                                                AttackVFX;                                         // 0xa8(0x8)
	float                                                        AttackVFXZOffset;                                  // 0xb0(0x4)
	struct FName                                                 LoSTraceProfileName;                               // 0xb4(0x8)
	char                                                         pad0x4_ICZ9U[0x4];                                 // 0xbc(0x4)
	Struct AIDataProviderFloatValue                              LosTraceRadius;                                    // 0xc0(0x30)
	TArray<struct ImpulseData>                                   ImpulseData;                                       // 0xf0(0x10)
	Struct AIDataProviderIntValue                                MinDamageHolesToApply;                             // 0x100(0x30)
	Struct AIDataProviderIntValue                                MaxDamageHolesToApply;                             // 0x130(0x30)
	int                                                          LevelsOfHullDamage;                                // 0x160(0x4)
	char                                                         pad0x4_4CLVZ[0x4];                                 // 0x164(0x4)
	class                                                        DamageCauserType;                                  // 0x168(0x8)
	float                                                        AreaOfEffectOfShipHitAttack;                       // 0x170(0x4)
	byte                                                         CollisionChannelForGunpowderKegs;                  // 0x174(0x1)
	char                                                         pad0x3_0JJMJ[0x3];                                 // 0x175(0x3)
	Struct AIDataProviderFloatValue                              PlayerBiteRadius;                                  // 0x178(0x30)
	Struct KnockBackInfo                                         KnockbackParams;                                   // 0x1a8(0x50)
	Struct AIDataProviderFloatValue                              PlayerBiteDamage;                                  // 0x1f8(0x30)
	char                                                         pad0x10_9SYU2[0x10];                               // 0x228(0x10)
	Class Ship*                                                  TargetShip;                                        // 0x238(0x8)
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class BurrowEruptBase: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIAnimationStateId: public Object
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SpawnerBehaviourStrategy: public Object
{
public:
};


// Size 0xd0 (Full Size[0x660] - InheritedSize[0x590]
class AICreatureCharacterMovementComponent: public CharacterMovementComponent
{
public:
	TArray<struct AIStrategyMovementProperties>                  AIStrategyMovementProperties;                      // 0x588(0x10)
	float                                                        BlendSpeed;                                        // 0x598(0x4)
	bool                                                         bCreateDisturbance;                                // 0x59c(0x1)
	char                                                         pad0x3_Y2EUS[0x3];                                 // 0x59d(0x3)
	float                                                        DisturbanceSize;                                   // 0x5a0(0x4)
	float                                                        DisturbanceVelocityScale;                          // 0x5a4(0x4)
	float                                                        OrientationBlendSpeed;                             // 0x5a8(0x4)
	float                                                        OrientationMaxPitch;                               // 0x5ac(0x4)
	float                                                        UpdateOrientationFrequency;                        // 0x5b0(0x4)
	float                                                        MinStairAngle;                                     // 0x5b4(0x4)
	float                                                        MinStairVelocityDampen;                            // 0x5b8(0x4)
	char                                                         pad0x4_TRHQJ[0x4];                                 // 0x5bc(0x4)
	TArray<class Class*>                                         SubscribedStairClimbStrategies;                    // 0x5c0(0x10)
	char                                                         pad0x90_5WAXW[0x90];                               // 0x5d0(0x90)
};


// Size 0x230 (Full Size[0x810] - InheritedSize[0x5e0]
class AICreatureCharacter: public Character
{
public:
	char                                                         pad0x58_GNRT7[0x58];                               // 0x5e0(0x58)
	float                                                        DelayBeforeDestroying;                             // 0x638(0x4)
	float                                                        TimeBeforeFadingOut;                               // 0x63c(0x4)
	float                                                        PickupTime;                                        // 0x640(0x4)
	Struct Vector                                                TooltipDisplayOffset;                              // 0x644(0xc)
	Class ActionStateMachineComponent*                           ActionStateMachineComponent;                       // 0x650(0x8)
	Class ActionStatePriorityTableData*                          ActionStatePriorityTableData;                      // 0x658(0x8)
	class                                                        ActionStateCreatorDefinition;                      // 0x660(0x8)
	Class AthenaAIControllerParamsDataAsset*                     AIControllerParams;                                // 0x668(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x670(0x8)
	Class WaterHeightProviderComponent*                          WaterHeightProviderComponent;                      // 0x678(0x8)
	Class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x680(0x8)
	Class RewindComponent*                                       RewindComponent;                                   // 0x688(0x8)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x690(0x8)
	char                                                         pad0x100_63RWI[0x100];                             // 0x698(0x100)
	Class AICreatureCharacterMovementComponent*                  AICreatureCharacterMovementComponent;              // 0x798(0x8)
	char                                                         pad0x68_8NV3G[0x68];                               // 0x7a0(0x68)
	class                                                        CurrentAIStrategy;                                 // 0x808(0x8)
};


// Size 0x38 (Full Size[0x2f0] - InheritedSize[0x2b8]
class AthenaAICharacterPathFollowingComponent: public PathFollowingComponent
{
public:
	float                                                        ProportionOfTurnToMove;                            // 0x2b8(0x4)
	float                                                        MinAngleToTurnOnSpot;                              // 0x2bc(0x4)
	float                                                        ReachedGoalMaxSpeedToSlowDistanceFactor;           // 0x2c0(0x4)
	float                                                        AbortMoveMaxSpeedToSlowDistanceFactor;             // 0x2c4(0x4)
	char                                                         pad0x4_PDN6A[0x4];                                 // 0x2c8(0x4)
	float                                                        MinSlowDownSpeed;                                  // 0x2cc(0x4)
	char                                                         pad0x20_AETI3[0x20];                               // 0x2d0(0x20)
};


// Size 0x30 (Full Size[0x320] - InheritedSize[0x2f0]
class AICreatureCharacterPathFollowingComponent: public AthenaAICharacterPathFollowingComponent
{
public:
	float                                                        LandingAngle;                                      // 0x2f0(0x4)
	float                                                        HopDistanceScale;                                  // 0x2f4(0x4)
	float                                                        MaximumLandTime;                                   // 0x2f8(0x4)
	float                                                        MinStairAngle;                                     // 0x2fc(0x4)
	float                                                        MinStairVelocityDampen;                            // 0x300(0x4)
	char                                                         pad0x4_RP8FY[0x4];                                 // 0x304(0x4)
	TArray<class Class*>                                         SubscribedStairClimbStrategies;                    // 0x308(0x10)
	char                                                         pad0x8_XLBPO[0x8];                                 // 0x318(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AICreatureMovementModifierInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AICreatureMovementModifierParamsDataAsset: public DataAsset
{
public:
	float                                                        TurnRateMultiplier;                                // 0x28(0x4)
	float                                                        FlyingTurnRateMultiplier;                          // 0x2c(0x4)
	bool                                                         UseTighterTurningCircle;                           // 0x30(0x1)
	bool                                                         UseHighResNavMesh;                                 // 0x31(0x1)
	char                                                         pad0x6_WQKVF[0x6];                                 // 0x32(0x6)
};


// Size 0x120 (Full Size[0x4e8] - InheritedSize[0x3c8]
class AICreatureSpline: public Actor
{
public:
	char                                                         pad0x8_7UQ0L[0x8];                                 // 0x3c8(0x8)
	Class SkeletalMeshComponent*                                 AICreatureMesh;                                    // 0x3d0(0x8)
	Class SplineComponent*                                       SplineComponent;                                   // 0x3d8(0x8)
	char                                                         pad0x8_DPYGB[0x8];                                 // 0x3e0(0x8)
	bool                                                         ShouldBeTickEnabled;                               // 0x3e8(0x1)
	bool                                                         RequireStartEventToStartMovement;                  // 0x3e9(0x1)
	char                                                         pad0x2_HTX7Z[0x2];                                 // 0x3ea(0x2)
	float                                                        CreatureSpeed;                                     // 0x3ec(0x4)
	float                                                        GroundHeightInterpSpeed;                           // 0x3f0(0x4)
	bool                                                         FollowGroundHeight;                                // 0x3f4(0x1)
	byte                                                         LineTraceChannel;                                  // 0x3f5(0x1)
	char                                                         pad0xb2_NCGO3[0xb2];                               // 0x3f6(0xb2)
	Class WwiseEvent*                                            CreatureAudioMovementStarted;                      // 0x4a8(0x8)
	Class WwiseEvent*                                            CreatureAudioMovementCompleted;                    // 0x4b0(0x8)
	Class WwiseEvent*                                            CreatureAudioOnMovementCompletedAdditional;        // 0x4b8(0x8)
	Class WwiseObjectPoolWrapper*                                WwiseEmitterPool;                                  // 0x4c0(0x8)
	char                                                         pad0x20_40U20[0x20];                               // 0x4c8(0x20)
};


// Size 0x80 (Full Size[0x568] - InheritedSize[0x4e8]
class LimitedInteractableAICreatureSpline: public AICreatureSpline
{
public:
	char                                                         pad0x8_ZTKOC[0x8];                                 // 0x4e8(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x4f0(0x8)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x4f8(0x8)
	Struct LimitedInteractbaleAICreatureSplineInteractionParams  InteractionParams;                                 // 0x500(0x50)
	class                                                        PromptCounterKey;                                  // 0x550(0x8)
	int                                                          MaxInteractCount;                                  // 0x558(0x4)
	char                                                         pad0x8_AW5NH[0x8];                                 // 0x55c(0x8)
	Struct PlayerStat                                            StatToFireOnInteraction;                           // 0x564(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BehaviourTreeInterruptionInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x460] - InheritedSize[0x440]
class CreatureSplineAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x18_PGM2V[0x18];                               // 0x440(0x18)
	bool                                                         IsCreatureMoving;                                  // 0x458(0x1)
	char                                                         pad0x3_OS5LX[0x3];                                 // 0x459(0x3)
	float                                                        CreatureSpeed;                                     // 0x45c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ForcedIdleBehaviourInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIItemParameterInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AthenaAIDamageModifierBase: public Object
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class AthenaAIControllerSharedParamValuesDataAsset: public DataAsset
{
public:
	bool                                                         OverrideMeshScale;                                 // 0x28(0x1)
	char                                                         pad0x3_QRIXT[0x3];                                 // 0x29(0x3)
	float                                                        MeshScale;                                         // 0x2c(0x4)
	bool                                                         OverrideCurrentTargetPerceivedNotVisibleAge;       // 0x30(0x1)
	char                                                         pad0x3_T66HQ[0x3];                                 // 0x31(0x3)
	float                                                        CurrentTargetPerceivedNotVisibleAge;               // 0x34(0x4)
	TArray<struct AIStrategySenseSettingOverrides>               AIStrategySenseSettingOverrides;                   // 0x38(0x10)
	Struct AthenaAIControllerHealthCustomisation                 HealthCustomisationValues;                         // 0x48(0xc)
	char                                                         pad0x4_U4T4N[0x4];                                 // 0x54(0x4)
	TArray<struct InitialBlackboardValues>                       InitialBlackboardValues;                           // 0x58(0x10)
	TArray<struct NamedControllerParams>                         NamedControllerParams;                             // 0x68(0x10)
	TArray<struct FeatureToggleNamedParamOverrides>              FeatureToggleNamedParamOverrides;                  // 0x78(0x10)
	TArray<struct NamedWeightedRangesControllerParams>           NamedWeightedRangesControllerParams;               // 0x88(0x10)
	TArray<class AthenaAIDamageModifierBase*>                    DamageModifiers;                                   // 0x98(0x10)
};


// Size 0x110 (Full Size[0x138] - InheritedSize[0x28]
class AthenaAIControllerParamsDataAsset: public DataAsset
{
public:
	Struct AthenaAIControllerSenseSettings                       DefaultSenseSettings;                              // 0x28(0x14)
	float                                                        AutoSuccessRangeFromLastSeenLocation;              // 0x3c(0x4)
	float                                                        DefaultPerceivedNotVisibleAge;                     // 0x40(0x4)
	bool                                                         CanTargetNotSeenPerceivedActors;                   // 0x44(0x1)
	bool                                                         OverrideTeamID;                                    // 0x45(0x1)
	byte                                                         TeamID;                                            // 0x46(0x1)
	char                                                         pad0x1_W1QYB[0x1];                                 // 0x47(0x1)
	float                                                        TargetSwitchScoreTolerance;                        // 0x48(0x4)
	char                                                         pad0x4_XE5RM[0x4];                                 // 0x4c(0x4)
	TArray<Float TargetLoadWeightingBias>                        TargetLoadWeightingBias;                           // 0x50(0x10)
	float                                                        DistanceToStartTargetPickingDecrease;              // 0x60(0x4)
	float                                                        TargetPickingDistScoreAtMaxSightRange;             // 0x64(0x4)
	float                                                        VisionAngleToStartTargetPickingDecrease;           // 0x68(0x4)
	float                                                        TargetPickingFacingScoreAtMaxPeripheralVisionAngle; // 0x6c(0x4)
	bool                                                         UseDamageAsFactorInTargetScore;                    // 0x70(0x1)
	char                                                         pad0x3_MI2ZC[0x3];                                 // 0x71(0x3)
	Struct AthenaAIControllerDamageTargetScoreFromPerceivedTarget DamageTargetScores;                                // 0x74(0x14)
	TArray<class AthenaAIControllerSharedParamValuesDataAsset*>  SharedParamValues;                                 // 0x88(0x10)
	TArray<struct AdditionalToggleableSharedParamValues>         AdditionalToggleableSharedParamValues;             // 0x98(0x10)
	bool                                                         IndividualOverrideMeshScale;                       // 0xa8(0x1)
	char                                                         pad0x3_GLUPT[0x3];                                 // 0xa9(0x3)
	float                                                        IndividualMeshScale;                               // 0xac(0x4)
	Struct AthenaAIControllerHealthCustomisation                 IndividualHealthCustomisationValues;               // 0xb0(0xc)
	char                                                         pad0x4_UY8MN[0x4];                                 // 0xbc(0x4)
	TArray<struct IndividualInitialBlackboardValues>             IndividualInitialBlackboardValues;                 // 0xc0(0x10)
	TArray<struct IndividualNamedControllerParams>               IndividualNamedControllerParams;                   // 0xd0(0x10)
	TArray<struct FeatureToggleIndividualNamedParamOverrides>    FeatureToggleIndividualNamedParamOverrides;        // 0xe0(0x10)
	TArray<struct IndividualNamedWeightedRangesControllerParams> IndividualNamedWeightedRangesControllerParams;     // 0xf0(0x10)
	TArray<struct IndividualAIStrategySenseSettingOverrides>     IndividualAIStrategySenseSettingOverrides;         // 0x100(0x10)
	bool                                                         IndividualOverrideCurrentTargetPerceivedNotVisibleAge; // 0x110(0x1)
	char                                                         pad0x3_1J70V[0x3];                                 // 0x111(0x3)
	float                                                        IndividualCurrentTargetPerceivedNotVisibleAge;     // 0x114(0x4)
	TArray<class AthenaAIDamageModifierBase*>                    DamageModifiers;                                   // 0x118(0x10)
	Class AthenaAICrewStrengthDynamicParamsDataAsset*            CrewStrengthDynamicParams;                         // 0x128(0x8)
	struct FName                                                 FeatureName;                                       // 0x130(0x8)
};


// Size 0xe0 (Full Size[0x188] - InheritedSize[0xa8]
class AthenaAICharacterControllerSharedParamValuesDataAsset: public AthenaAIControllerSharedParamValuesDataAsset
{
public:
	bool                                                         OverrideUseRVOAvoidance;                           // 0xa8(0x1)
	bool                                                         UseRVOAvoidance;                                   // 0xa9(0x1)
	bool                                                         OverridePrioritiseInteractablesBeforeEnemies;      // 0xaa(0x1)
	bool                                                         PrioritiseInteractablesBeforeEnemies;              // 0xab(0x1)
	char                                                         pad0x4_M0BEG[0x4];                                 // 0xac(0x4)
	Class CurveFloat*                                            DistanceInMToCannonShotHitChanceCurve;             // 0xb0(0x8)
	TArray<struct AIStrategyMovementProperties>                  AIStrategyMovementProperties;                      // 0xb8(0x10)
	TArray<struct ItemCategoryAIStrategyMovementPropertiesOverrides> ItemCategoryAIStrategyMovementPropertiesOverrides; // 0xc8(0x10)
	Struct AthenaAICharacterCannonTargetingParams                CannonTargetingParams;                             // 0xd8(0x10)
	TArray<struct WieldedItemProjectileEffectivenessProperties>  WieldedItemProjectileEffectivenessProperties;      // 0xe8(0x10)
	TArray<struct WieldedItemOverrideNamedControllerParams>      WieldedItemOverrideNamedControllerParams;          // 0xf8(0x10)
	TArray<struct NamedItemParams>                               NamedItemParams;                                   // 0x108(0x10)
	TArray<struct SpawnItemDescForItemCategories>                SpawnItemDescForItemCategories;                    // 0x118(0x10)
	TArray<class AthenaAIAbilityParams*>                         AIAbilityParams;                                   // 0x128(0x10)
	TArray<struct IndividualDamageBasedAIAbilityStages>          IndividualDamageBasedAIAbilityStages;              // 0x138(0x10)
	TArray<struct NonItemEngageOptions>                          NonItemEngageOptions;                              // 0x148(0x10)
	Struct StringAssetReference                                  AnimationDataOverrideAsset;                        // 0x158(0x10)
	Struct StringAssetReference                                  CustomAnimationAsset;                              // 0x168(0x10)
	bool                                                         OverrideNoInitialItem;                             // 0x178(0x1)
	bool                                                         NoInitialItem;                                     // 0x179(0x1)
	bool                                                         OverrideBeginFleeing;                              // 0x17a(0x1)
	bool                                                         BeginFleeing;                                      // 0x17b(0x1)
	char                                                         pad0x4_IB2DW[0x4];                                 // 0x17c(0x4)
	Class EnvQuery*                                              FleeingEQS;                                        // 0x180(0x8)
};


// Size 0xf8 (Full Size[0x230] - InheritedSize[0x138]
class AthenaAICharacterControllerParamsDataAsset: public AthenaAIControllerParamsDataAsset
{
public:
	bool                                                         IndividualOverrideUseRVOAvoidance;                 // 0x138(0x1)
	bool                                                         IndividualUseRVOAvoidance;                         // 0x139(0x1)
	bool                                                         IndividualOverridePrioritiseInteractablesBeforeEnemies; // 0x13a(0x1)
	bool                                                         IndividualPrioritiseInteractablesBeforeEnemies;    // 0x13b(0x1)
	char                                                         pad0x4_9ZZKL[0x4];                                 // 0x13c(0x4)
	Class CurveFloat*                                            IndividualDistanceInMToCannonShotHitChanceCurve;   // 0x140(0x8)
	TArray<struct IndividualAIStrategyMovementProperties>        IndividualAIStrategyMovementProperties;            // 0x148(0x10)
	TArray<struct IndividualItemCategoryAIStrategyMovementPropertiesOverrides> IndividualItemCategoryAIStrategyMovementPropertiesOverrides; // 0x158(0x10)
	Struct AthenaAICharacterCannonTargetingParams                IndividualCannonTargetingParams;                   // 0x168(0x10)
	TArray<struct IndividualWieldedItemProjectileEffectivenessProperties> IndividualWieldedItemProjectileEffectivenessProperties; // 0x178(0x10)
	TArray<struct IndividualWieldedItemOverrideNamedControllerParams> IndividualWieldedItemOverrideNamedControllerParams; // 0x188(0x10)
	TArray<struct IndividualNamedItemParams>                     IndividualNamedItemParams;                         // 0x198(0x10)
	TArray<struct IndividualSpawnItemDescForItemCategories>      IndividualSpawnItemDescForItemCategories;          // 0x1a8(0x10)
	bool                                                         UseDamageBasedAbilityStages;                       // 0x1b8(0x1)
	char                                                         pad0x7_VQCA4[0x7];                                 // 0x1b9(0x7)
	TArray<Float HealthStages>                                   HealthStages;                                      // 0x1c0(0x10)
	TArray<struct IndividualDamageBasedAIAbilityStages>          IndividualDamageBasedAIAbilityStages;              // 0x1d0(0x10)
	TArray<class AthenaAIAbilityParams*>                         IndividualAIAbilityParams;                         // 0x1e0(0x10)
	TArray<struct IndividualNonItemEngageOptions>                IndividualNonItemEngageOptions;                    // 0x1f0(0x10)
	Struct StringAssetReference                                  IndividualAnimationDataOverrideAsset;              // 0x200(0x10)
	Struct StringAssetReference                                  IndividualCustomAnimationAsset;                    // 0x210(0x10)
	bool                                                         IndividualOverrideNoInitialItem;                   // 0x220(0x1)
	bool                                                         IndividualNoInitialItem;                           // 0x221(0x1)
	bool                                                         IndividualOverrideBeginFleeing;                    // 0x222(0x1)
	bool                                                         IndividualBeginFleeing;                            // 0x223(0x1)
	char                                                         pad0x4_WDM47[0x4];                                 // 0x224(0x4)
	Class EnvQuery*                                              IndividualFleeingEQS;                              // 0x228(0x8)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class AthenaAIAmmoDataAsset: public DataAsset
{
public:
	char                                                         pad0x90_CHDMG[0x90];                               // 0x28(0x90)
	TArray<struct AmmoWeights>                                   AmmoWeights;                                       // 0xb8(0x10)
	struct FName                                                 FeatureName;                                       // 0xc8(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIAmmoRankProgression: public DataAsset
{
public:
	TArray<struct RankMappings>                                  RankMappings;                                      // 0x28(0x10)
	int                                                          NumberOfRanks;                                     // 0x38(0x4)
	char                                                         pad0x4_S4HWH[0x4];                                 // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIAmmoProgressionTypeList: public DataAsset
{
public:
	TArray<class AIAmmoRankProgression*>                         AllProgressions;                                   // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIAmmoTypeList: public DataAsset
{
public:
	TArray<class AthenaAIAmmoDataAsset*>                         AllAmmo;                                           // 0x28(0x10)
	Class AthenaAIAmmoDataAsset*                                 DefaultAmmo;                                       // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIAnimationStateInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AIChargeUpInterruptedStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIClassId: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AIPartsDesc: public DataAsset
{
public:
	Struct AIPartId                                              AIPartId;                                          // 0x28(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AIPartsCategory: public DataAsset
{
public:
	TArray<class AIPartsDesc*>                                   Parts;                                             // 0x28(0x10)
	int                                                          NextPartsIndex;                                    // 0x38(0x4)
	bool                                                         UseWeightedArray;                                  // 0x3c(0x1)
	char                                                         pad0x3_ZBTDM[0x3];                                 // 0x3d(0x3)
	struct FName                                                 UseWeightedArrayFeatureName;                       // 0x40(0x8)
	Struct WeightedProbabilityRange                              WeightedArray;                                     // 0x48(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPartsServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIEncounterServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIClassIdTypeList: public DataAsset
{
public:
	TArray<class Class*>                                         AllClassIds;                                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIColorVariantPool: public DataAsset
{
public:
	TArray<struct AvailableColors>                               AvailableColors;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AICombatEncounterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIDeathInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class AIDebugVisualisationComponent: public ActorComponent
{
public:
	TArray<struct Lines>                                         Lines;                                             // 0xc8(0x10)
	TArray<struct Boxes>                                         Boxes;                                             // 0xd8(0x10)
	TArray<struct Cylinders>                                     Cylinders;                                         // 0xe8(0x10)
	TArray<struct Spheres>                                       Spheres;                                           // 0xf8(0x10)
	TArray<struct Cones>                                         Cones;                                             // 0x108(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIInteractableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AIElectricProjectileInterruptedStatus: public StatusBase
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class AIEncounterGenerationRecipe: public DataAsset
{
public:
	TArray<struct Forms>                                         Forms;                                             // 0x28(0x10)
	Struct StringAssetReference                                  SkillsetProgression;                               // 0x38(0x10)
	Struct StringAssetReference                                  ItemDropProgression;                               // 0x48(0x10)
	Struct TargetSkillsetProgressionPair                         TargetSkillsetOverrides;                           // 0x58(0x20)
	Struct TargetItemDropProgressionPair                         TargetItemDropOverrides;                           // 0x78(0x20)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AIEncounterGenerationRecipeRankOrderList: public DataAsset
{
public:
	TArray<class AIEncounterGenerationRecipe*>                   Recipes;                                           // 0x28(0x10)
	TArray<struct FeatureBasedRecipeLists>                       FeatureBasedRecipeLists;                           // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIEncounterGenerationRecipeTypeList: public DataAsset
{
public:
	TArray<class AIEncounterGenerationRecipe*>                   AllRecipes;                                        // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIEncounterGenerationServiceInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x450] - InheritedSize[0x3c8]
class AIEncounterGenerationService: public Actor
{
public:
	char                                                         pad0x8_2TM5T[0x8];                                 // 0x3c8(0x8)
	Class AIEncounterGenerationRecipeTypeList*                   GenerationRecipes;                                 // 0x3d0(0x8)
	char                                                         pad0x78_FJYO3[0x78];                               // 0x3d8(0x78)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIFormRankProgression: public DataAsset
{
public:
	TArray<struct RankMappings>                                  RankMappings;                                      // 0x28(0x10)
	int                                                          NumberOfRanks;                                     // 0x38(0x4)
	char                                                         pad0x4_RIF7F[0x4];                                 // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIFormProgressionTypeList: public DataAsset
{
public:
	TArray<class AIFormRankProgression*>                         AllProgressions;                                   // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIFormTypeList: public DataAsset
{
public:
	TArray<class AthenaAIFormDataAsset*>                         AllForms;                                          // 0x28(0x10)
	Class AthenaAIFormDataAsset*                                 DefaultForm;                                       // 0x38(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AILoadoutProgressionTypeList: public DataAsset
{
public:
	TArray<class AILoadoutRankProgression*>                      AllProgressions;                                   // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AILoadoutTypeList: public DataAsset
{
public:
	TArray<class LoadoutAsset*>                                  AllLoadouts;                                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AISkillsetProgressionTypeList: public DataAsset
{
public:
	TArray<class AISkillsetRankProgression*>                     AllProgressions;                                   // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AISkillsetTypeList: public DataAsset
{
public:
	TArray<class AthenaAIControllerParamsDataAsset*>             AllSkillsets;                                      // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIPartsCategoryTypeList: public DataAsset
{
public:
	TArray<class AIPartsCategory*>                               AllPartsCategories;                                // 0x28(0x10)
};


// Size 0x3d0 (Full Size[0x798] - InheritedSize[0x3c8]
class AIEncounterService: public Actor
{
public:
	char                                                         pad0x8_2KC8M[0x8];                                 // 0x3c8(0x8)
	TArray<struct DefaultPartsCategories>                        DefaultPartsCategories;                            // 0x3d0(0x10)
	TArray<struct FormPartsCategories>                           FormPartsCategories;                               // 0x3e0(0x10)
	Class AIAmmoTypeList*                                        Ammo;                                              // 0x3f0(0x8)
	Class AIAmmoProgressionTypeList*                             AmmoProgressions;                                  // 0x3f8(0x8)
	Class AIFormTypeList*                                        Forms;                                             // 0x400(0x8)
	Class AIFormProgressionTypeList*                             FormProgressions;                                  // 0x408(0x8)
	Class AILoadoutTypeList*                                     Loadouts;                                          // 0x410(0x8)
	Class AILoadoutProgressionTypeList*                          LoadoutProgressions;                               // 0x418(0x8)
	Class AISkillsetTypeList*                                    Skillsets;                                         // 0x420(0x8)
	Class AISkillsetProgressionTypeList*                         SkillsetProgressions;                              // 0x428(0x8)
	Class AIClassIdTypeList*                                     ClassIds;                                          // 0x430(0x8)
	Class AIPartsCategoryTypeList*                               PartsCategories;                                   // 0x438(0x8)
	Class AIColorVariantPool*                                    TeamColors;                                        // 0x440(0x8)
	Class AIItemDropComponentList*                               AIItemDropSpawners;                                // 0x448(0x8)
	Class AIItemDropComponentRankProgressionList*                AIItemDropSpawnerProgressions;                     // 0x450(0x8)
	TArray<class AIEncounterSettings*>                           DebugSpawnableEncounterSettings;                   // 0x458(0x10)
	char                                                         pad0x330_9T0PA[0x330];                             // 0x468(0x330)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AISkillsetRankProgression: public DataAsset
{
public:
	TArray<struct RankMappings>                                  RankMappings;                                      // 0x28(0x10)
	int                                                          NumberOfRanks;                                     // 0x38(0x4)
	char                                                         pad0x4_CF5T2[0x4];                                 // 0x3c(0x4)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AIEncounterSettings: public DataAsset
{
public:
	char                                                         pad0x20_M2KVC[0x20];                               // 0x28(0x20)
	class                                                        AIClass;                                           // 0x48(0x8)
	Struct StringAssetReference                                  TeamColor;                                         // 0x50(0x10)
};


// Size 0xc0 (Full Size[0x120] - InheritedSize[0x60]
class AIEncounterSettingsFixed: public AIEncounterSettings
{
public:
	Struct StringAssetReference                                  SpecificSkillset;                                  // 0x60(0x10)
	Struct FeatureToggledAIEncounterSpecificSkillSetCollection   ToggledSpecificSkillsetOverrides;                  // 0x70(0x10)
	Struct StringAssetReference                                  Loadout;                                           // 0x80(0x10)
	Struct StringAssetReference                                  Form;                                              // 0x90(0x10)
	Struct StringAssetReference                                  Ammo;                                              // 0xa0(0x10)
	struct FName                                                 DioramaRole;                                       // 0xb0(0x8)
	Struct FText                                                 LocalisableName;                                   // 0xb8(0x38)
	Struct EncounterParams                                       EncounterTrackingParams;                           // 0xf0(0xc)
	char                                                         pad0x4_08ZOC[0x4];                                 // 0xfc(0x4)
	char                                                         pad0x20_K36TG[0x20];                               // 0x100(0x20)
};


// Size 0x60 (Full Size[0xc0] - InheritedSize[0x60]
class AIEncounterSettingsRankProgression: public AIEncounterSettings
{
public:
	Struct StringAssetReference                                  SkillsetProgression;                               // 0x60(0x10)
	Struct StringAssetReference                                  LoadoutProgression;                                // 0x70(0x10)
	Struct StringAssetReference                                  FormProgression;                                   // 0x80(0x10)
	Struct StringAssetReference                                  AmmoProgression;                                   // 0x90(0x10)
	Struct StringAssetReference                                  ItemDropComponentProgression;                      // 0xa0(0x10)
	Struct EncounterParams                                       EncounterTrackingParams;                           // 0xb0(0xc)
	char                                                         pad0x4_MNO4O[0x4];                                 // 0xbc(0x4)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class AIFormItemSpawnRequirement: public SpawnRequirement
{
public:
	TArray<class AthenaAIFormDataAsset*>                         AllowedForms;                                      // 0x50(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIIdentifierOwnerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIInteractableOperatorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIItemDropComponentList: public DataAsset
{
public:
	TArray<Assetclass AllSpawners>                               AllSpawners;                                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIItemDropComponentRankProgressionList: public DataAsset
{
public:
	TArray<class AIItemSpawnRankProgression*>                    AllProgressions;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIItemSpawnDataSourceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x2f0] - InheritedSize[0x2e0]
class AIItemSpawnDataSourceComponent: public SceneComponent
{
public:
	char                                                         pad0x8_L9FW4[0x8];                                 // 0x2e0(0x8)
	Class ItemSpawnTransformWithRandomQuantityDataAssset*        ItemSpawnDataAsset;                                // 0x2e8(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIItemSpawnRankProgression: public DataAsset
{
public:
	TArray<struct RankMappings>                                  RankMappings;                                      // 0x28(0x10)
	int                                                          NumberOfRanks;                                     // 0x38(0x4)
	char                                                         pad0x4_I8M2T[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AILoadoutInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class AILoadoutItemSpawnRequirement: public SpawnRequirement
{
public:
	TArray<class LoadoutAsset*>                                  AllowedLoadouts;                                   // 0x50(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AILoadoutRankProgression: public DataAsset
{
public:
	TArray<struct RankMappings>                                  RankMappings;                                      // 0x28(0x10)
	int                                                          NumberOfRanks;                                     // 0x38(0x4)
	char                                                         pad0x4_RAP08[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AILoadoutWithNonStorableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIManagerBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIManagerServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AthenaAITypeListDataAsset: public DataAsset
{
public:
	TArray<struct AITypes>                                       AITypes;                                           // 0x28(0x10)
	TArray<struct AdditionalAIActors>                            AdditionalAIActors;                                // 0x38(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AISpawnWaveSequence: public DataAsset
{
public:
	TArray<struct Waves>                                         Waves;                                             // 0x28(0x10)
	struct FName                                                 FeatureName;                                       // 0x38(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AISpawnWaveSequenceRankProgression: public DataAsset
{
public:
	TArray<struct RankMappings>                                  RankMappings;                                      // 0x28(0x10)
	int                                                          NumberOfRanks;                                     // 0x38(0x4)
	char                                                         pad0x4_FD89F[0x4];                                 // 0x3c(0x4)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AIWeightedProbabilityRangeOfRangesAsset: public DataAsset
{
public:
	float                                                        RespawnChance;                                     // 0x28(0x4)
	char                                                         pad0x4_N72NN[0x4];                                 // 0x2c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      RespawnTimerRanges;                                // 0x30(0x30)
	struct FName                                                 FeatureName;                                       // 0x60(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIWeightedProbabilityRangeOfRangesRankProgression: public DataAsset
{
public:
	TArray<struct RankMappings>                                  RankMappings;                                      // 0x28(0x10)
	int                                                          NumberOfRanks;                                     // 0x38(0x4)
	char                                                         pad0x4_QKC23[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPlayerTrackerObservedInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPlayerTrackerObserverInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnerInterface: public AIPlayerTrackerObserverInterface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnRequestResultLoggerInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0xe0] - InheritedSize[0x38]
class AthenaAISettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  AITypesAsset;                                      // 0x38(0x10)
	Struct StringAssetReference                                  AISpawnContextListAsset;                           // 0x48(0x10)
	int                                                          FallbackAIDifficultyRank;                          // 0x58(0x4)
	int                                                          MaxNumOfSpawnedActors;                             // 0x5c(0x4)
	int                                                          MaxPlayerEquivalentAIsPerRegion;                   // 0x60(0x4)
	int                                                          MaxWorldAICostUnitsForWorld;                       // 0x64(0x4)
	int                                                          AIRegionCostUnitsForPlayer;                        // 0x68(0x4)
	float                                                        CharacterNetRelevancy;                             // 0x6c(0x4)
	float                                                        CharacterRegionDensityCheckTimer;                  // 0x70(0x4)
	float                                                        CharacterWorldDensityCheckTimer;                   // 0x74(0x4)
	float                                                        DistanceToPlayerToRaiseSpawnPriority;              // 0x78(0x4)
	float                                                        MinRetryingCanSpawnRequestTime;                    // 0x7c(0x4)
	float                                                        MaxRetryingCanSpawnRequestTime;                    // 0x80(0x4)
	float                                                        MinRetryingLocationCheckTime;                      // 0x84(0x4)
	float                                                        MaxRetryingLocationCheckTime;                      // 0x88(0x4)
	float                                                        CharacterAINoiseTickInterval;                      // 0x8c(0x4)
	float                                                        PeriodicAINoiseComponentTickInterval;              // 0x90(0x4)
	float                                                        FaunaPlayerProximityDormancyRange;                 // 0x94(0x4)
	float                                                        FaunaPlayerProximityTickTime;                      // 0x98(0x4)
	float                                                        FaunaTimeOutOfPlayerProximityForDormancy;          // 0x9c(0x4)
	float                                                        DefaultNavAgentCapsuleRadius;                      // 0xa0(0x4)
	float                                                        DefaultNavAgentCapsuleHalfHeight;                  // 0xa4(0x4)
	float                                                        MinDelayBeforeRetryingUnsuccessfulWave;            // 0xa8(0x4)
	float                                                        MaxDelayBeforeRetryingUnsuccessfulWave;            // 0xac(0x4)
	Struct StringAssetReference                                  AIEncounterServiceAssetClassFileLocation;          // 0xb0(0x10)
	Struct StringAssetReference                                  AIEncounterGenerationServiceAssetClassFileLocation; // 0xc0(0x10)
	struct FName                                                 AICharacterWaterInteractionCollisionProfileName;   // 0xd0(0x8)
	float                                                        AICountTelemetryEventFrequency;                    // 0xd8(0x4)
	char                                                         pad0x4_SQMBS[0x4];                                 // 0xdc(0x4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AISpawnContextId: public Object
{
public:
	int                                                          Weighting;                                         // 0x28(0x4)
	char                                                         pad0x4_4IFM6[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableAIManagerInterface: public Interface
{
public:
};


// Size 0x788 (Full Size[0xb50] - InheritedSize[0x3c8]
class AIManagerService: public Actor
{
public:
	char                                                         pad0x108_T3EHU[0x108];                             // 0x3c8(0x108)
	TArray<class Class*>                                         LoadedAIPawnClasses;                               // 0x4d0(0x10)
	TArray<class Class*>                                         LoadedAIItemDropComponentClasses;                  // 0x4e0(0x10)
	char                                                         pad0x8_2R9LD[0x8];                                 // 0x4f0(0x8)
	Class AmbientWaterSpawnerManager*                            AmbientWaterSpawnerManager;                        // 0x4f8(0x8)
	char                                                         pad0x430_7H0HB[0x430];                             // 0x500(0x430)
	TArray<class AIPlayerTracker*>                               PlayerTrackers;                                    // 0x930(0x10)
	TArray<struct CustomPlayersTrackerDatas>                     CustomPlayersTrackerDatas;                         // 0x940(0x10)
	char                                                         pad0x100_MINPK[0x100];                             // 0x950(0x100)
	TArray<Interface SpawnersPendingShutdown>                    SpawnersPendingShutdown;                           // 0xa50(0x10)
	char                                                         pad0xa8_NZ822[0xa8];                               // 0xa60(0xa8)
	Class AthenaAITypeListDataAsset*                             AITypeList;                                        // 0xb08(0x8)
	Class AISpawnContextList*                                    AISpawnContextList;                                // 0xb10(0x8)
	char                                                         pad0x38_TMQQW[0x38];                               // 0xb18(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugAIManagerServiceInterface: public Interface
{
public:
};


// Size 0x120 (Full Size[0xc70] - InheritedSize[0xb50]
class DebugAIManagerService: public AIManagerService
{
public:
	char                                                         pad0x110_3VMA0[0x110];                             // 0xb50(0x110)
	TArray<class Class*>                                         BlockedAIAbilities;                                // 0xc60(0x10)
};


// Size 0x190 (Full Size[0x4a0] - InheritedSize[0x310]
class AINameplateComponent: public NameplateComponent
{
public:
	char                                                         pad0x8_XBVZF[0x8];                                 // 0x310(0x8)
	float                                                        VisibleFromWorldDistance;                          // 0x318(0x4)
	float                                                        VisibleUntilWorldDistance;                         // 0x31c(0x4)
	float                                                        VisibleAfterDeathDuration;                         // 0x320(0x4)
	char                                                         pad0x4_CZLQX[0x4];                                 // 0x324(0x4)
	Struct FText                                                 Title;                                             // 0x328(0x38)
	Struct FText                                                 DisplayName;                                       // 0x360(0x38)
	Struct FString                                               DisplayNameAsString;                               // 0x398(0x10)
	Struct FString                                               DebugDisplayText;                                  // 0x3a8(0x10)
	bool                                                         VisibilityDisabled;                                // 0x3b8(0x1)
	char                                                         pad0xe7_NWS2W[0xe7];                               // 0x3b9(0xe7)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class AINoiseFireInstigator: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIOnShipManagerInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIPartsService: public Object
{
public:
	char                                                         pad0x8_E3KOK[0x8];                                 // 0x28(0x8)
	Class AIPartsCategoryTypeList*                               PartsCategoriesList;                               // 0x30(0x8)
	Class AIColorVariantPool*                                    TeamColors;                                        // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPartCustomizationInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIPartIdListingAsset: public DataAsset
{
public:
	TArray<struct AIPartIdsVariantInfo>                          AIPartIdsVariantInfo;                              // 0x28(0x10)
};


// Size 0x50 (Full Size[0x80] - InheritedSize[0x30]
class MeshMemoryConstraintsAIPartsDesc: public AIPartsDesc
{
public:
	char                                                         pad0x8_PDACR[0x8];                                 // 0x30(0x8)
	Struct StringAssetReference                                  Mesh;                                              // 0x38(0x10)
	class                                                        MeshFallbackCategory;                              // 0x50(0x8)
	class                                                        BudgetToCountMemoryAgainstIfNoFallback;            // 0x58(0x8)
	TArray<class MaterialInterface*>                             OverrideMaterials;                                 // 0x60(0x10)
	TArray<struct FallbackOverrideMaterials>                     FallbackOverrideMaterials;                         // 0x70(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPartsRetrievalInterface: public Interface
{
public:
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class AIPartsRetrievalComponent: public ActorComponent
{
public:
	char                                                         pad0x8_4ZLP4[0x8];                                 // 0xc8(0x8)
	Class AIPartsCategory*                                       PartsCategory;                                     // 0xd0(0x8)
	Struct ReplicatedAIPartsData                                 ReplicatedAIPartsData;                             // 0xd8(0x18)
	char                                                         pad0x90_LYUOH[0x90];                               // 0xf0(0x90)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPawnInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIPawnTurnActiveInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AIPerCrewSpawnerSettingsStoryOverrideAsset: public DataAsset
{
public:
	Struct FeatureFlag                                           Feature;                                           // 0x28(0xc)
	char                                                         pad0x4_RX775[0x4];                                 // 0x34(0x4)
	TArray<struct StoryResponses>                                StoryResponses;                                    // 0x38(0x10)
	TArray<class AIPerCrewSpawnerSettingsStoryOverrideAsset*>    AssetsList;                                        // 0x48(0x10)
};


// Size 0x200 (Full Size[0x248] - InheritedSize[0x48]
class AIProximityPlayerTracker: public AISpawnerPlayerTracker
{
public:
};


// Size 0x38 (Full Size[0x80] - InheritedSize[0x48]
class FilterFirstPlayerEnterPlayerTrackerDecorator: public AISpawnerPlayerTracker
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIProjectileInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIRegionInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x350] - InheritedSize[0x2e0]
class AIRegionComponent: public SceneComponent
{
public:
	char                                                         pad0x8_HB86Q[0x8];                                 // 0x2e0(0x8)
	bool                                                         UpdateRegionPosition;                              // 0x2e8(0x1)
	char                                                         pad0x3_1TP5X[0x3];                                 // 0x2e9(0x3)
	struct FName                                                 NavMeshAgentType;                                  // 0x2ec(0x8)
	float                                                        RegionRadius;                                      // 0x2f4(0x4)
	TArray<struct SpawnLocationGroups>                           SpawnLocationGroups;                               // 0x2f8(0x10)
	char                                                         pad0x48_3DLS7[0x48];                               // 0x308(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class AISkillsetItemSpawnRequirement: public SpawnRequirement
{
public:
	TArray<class AthenaAIControllerParamsDataAsset*>             DisallowedSkillsets;                               // 0x50(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnContextContainerInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class AISpawnContextContainerComponent: public ActorComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AISpawnContextList: public DataAsset
{
public:
	TArray<struct SpawnContextList>                              SpawnContextList;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnContextProviderInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x478] - InheritedSize[0x438]
class AIFixedWavesSpawner: public AISpawner
{
public:
	TArray<struct SpawnedWaves>                                  SpawnedWaves;                                      // 0x438(0x10)
	int                                                          NumWavesToSpawnOnSpottedNewTarget;                 // 0x448(0x4)
	char                                                         pad0x2c_4ATJZ[0x2c];                               // 0x44c(0x2c)
};


// Size 0x120 (Full Size[0x558] - InheritedSize[0x438]
class AIIncrementalWaveSpawner: public AISpawner
{
public:
	Struct AISpawnerWave                                         SpawnedWave;                                       // 0x438(0x100)
	Class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x538(0x8)
	char                                                         pad0x18_9BZAZ[0x18];                               // 0x540(0x18)
};


// Size 0x100 (Full Size[0x538] - InheritedSize[0x438]
class AIInteractableSpawner: public AISpawner
{
public:
	class                                                        AIInteractableType;                                // 0x438(0x8)
	float                                                        InhabitedChance;                                   // 0x440(0x4)
	char                                                         pad0x4_6H9W4[0x4];                                 // 0x444(0x4)
	Struct WeightedProbabilityRangeOfRanges                      DelayAfterSuccessfulInhabitedCheck;                // 0x448(0x30)
	Struct WeightedProbabilityRangeOfRanges                      DelayAfterFailedInhabitedCheck;                    // 0x478(0x30)
	bool                                                         BlockSubsequentSpawningAtInteractableOnceAiKilled; // 0x4a8(0x1)
	char                                                         pad0x3_805VY[0x3];                                 // 0x4a9(0x3)
	float                                                        SpawnForInteractableChance;                        // 0x4ac(0x4)
	Struct WeightedProbabilityRangeOfRanges                      DelayAfterSuccessfulSpawnOnInteractableCheck;      // 0x4b0(0x30)
	Struct WeightedProbabilityRangeOfRanges                      DelayAfterFailedSpawnOnInteractableCheck;          // 0x4e0(0x30)
	bool                                                         RunInhabitedSimulation;                            // 0x510(0x1)
	bool                                                         RunSpawnForInteractableSimulation;                 // 0x511(0x1)
	char                                                         pad0x2_VDM00[0x2];                                 // 0x512(0x2)
	int                                                          NumIterations;                                     // 0x514(0x4)
	char                                                         pad0x19_ED7YR[0x19];                               // 0x518(0x19)
	byte                                                         CachedPlaymode;                                    // 0x531(0x1)
	char                                                         pad0x6_3SDW6[0x6];                                 // 0x532(0x6)
};


// Size 0x0 (Full Size[0x438] - InheritedSize[0x438]
class AIOnDemandSpawner: public AISpawner
{
public:
};


// Size 0x218 (Full Size[0x650] - InheritedSize[0x438]
class AIPerPlayerSpawner: public AISpawner
{
public:
	bool                                                         CheckSpawnedActorsInRadiusBeforeSpawning;          // 0x438(0x1)
	char                                                         pad0x3_ABOOU[0x3];                                 // 0x439(0x3)
	float                                                        RadiusToCheckForExistingPopulation;                // 0x43c(0x4)
	int                                                          MaxExistingPopulationInRadius;                     // 0x440(0x4)
	bool                                                         DespawnAllPawnsWhenAllPlayersLeave;                // 0x444(0x1)
	char                                                         pad0x3_3Z2JQ[0x3];                                 // 0x445(0x3)
	int                                                          MaxActorsTotalPerPlayer;                           // 0x448(0x4)
	bool                                                         RunSimulation;                                     // 0x44c(0x1)
	char                                                         pad0x3_WTGN6[0x3];                                 // 0x44d(0x3)
	int                                                          RankForSimulation;                                 // 0x450(0x4)
	int                                                          NumIterations;                                     // 0x454(0x4)
	bool                                                         WantsToTemporarilyRememberPlayers;                 // 0x458(0x1)
	char                                                         pad0x7_DN00A[0x7];                                 // 0x459(0x7)
	Struct WeightedProbabilityRangeOfRanges                      TemporaryPlayerMemoryTimeRange;                    // 0x460(0x30)
	char                                                         pad0x118_IN20Y[0x118];                             // 0x490(0x118)
	char                                                         pad0xa8_63PS3[0xa8];                               // 0x5a8(0xa8)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class NamedAIDataAsset: public DataAsset
{
public:
	TArray<struct FText>                                         MaleCaptainNames;                                  // 0x28(0x10)
	TArray<struct FText>                                         FemaleCaptainNames;                                // 0x38(0x10)
	TArray<struct FText>                                         MaleCrewNames;                                     // 0x48(0x10)
	TArray<struct FText>                                         FemaleCrewNames;                                   // 0x58(0x10)
	TArray<struct CustomNameTitles>                              CustomNameTitles;                                  // 0x68(0x10)
	TArray<struct CustomNameOverrides>                           CustomNameOverrides;                               // 0x78(0x10)
	class                                                        DefaultClassId;                                    // 0x88(0x8)
	class                                                        FemaleCaptainClassId;                              // 0x90(0x8)
	class                                                        MaleCaptainClassId;                                // 0x98(0x8)
	class                                                        FemaleCrewClassId;                                 // 0xa0(0x8)
	class                                                        MaleCrewClassId;                                   // 0xa8(0x8)
};


// Size 0xe0 (Full Size[0x730] - InheritedSize[0x650]
class AIBoobyTrapSpawner: public AIPerPlayerSpawner
{
public:
	int                                                          NumberOfWavesToSpawn;                              // 0x650(0x4)
	char                                                         pad0x4_2CIGC[0x4];                                 // 0x654(0x4)
	Class WwiseEvent*                                            NewWaveSpawnSfx;                                   // 0x658(0x8)
	float                                                        NewWaveSpawnSfxTriggerRadius;                      // 0x660(0x4)
	char                                                         pad0x4_9U2NB[0x4];                                 // 0x664(0x4)
	TArray<class Class*>                                         ShowNameplatesFor;                                 // 0x668(0x10)
	Class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x678(0x8)
	Class Actor*                                                 ActorToTrack;                                      // 0x680(0x8)
	char                                                         pad0xa8_I33FH[0xa8];                               // 0x688(0xa8)
};


// Size 0x38 (Full Size[0x470] - InheritedSize[0x438]
class AIProgressiveWavesSpawner: public AISpawner
{
public:
	bool                                                         ApplyLocalisableNamesToNameplates;                 // 0x438(0x1)
	char                                                         pad0x7_59INW[0x7];                                 // 0x439(0x7)
	TArray<struct Waves>                                         Waves;                                             // 0x440(0x10)
	char                                                         pad0x18_UEWWR[0x18];                               // 0x450(0x18)
	Class Actor*                                                 TriggerActor;                                      // 0x468(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnerSpawnInteractableAssignmentInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x590] - InheritedSize[0x570]
class AIEscalatingWaveSpawner: public AIWaveSpawner
{
public:
	TArray<struct EscalatingWaves>                               EscalatingWaves;                                   // 0x570(0x10)
	char                                                         pad0x10_GNWC0[0x10];                               // 0x580(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AISpawnerList: public DataAsset
{
public:
	TArray<class AISpawner*>                                     Spawners;                                          // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AISpawnOverrideCondition: public Object
{
public:
	bool                                                         InvertResult;                                      // 0x28(0x1)
	char                                                         pad0x7_P2FVB[0x7];                                 // 0x29(0x7)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class AISpawnCampaignCondition: public AISpawnOverrideCondition
{
public:
	struct FName                                                 CampaignName;                                      // 0x30(0x8)
	char                                                         pad0x18_XH79M[0x18];                               // 0x38(0x18)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class AISpawnComplexCondition: public AISpawnOverrideCondition
{
public:
	TArray<class AISpawnOverrideCondition*>                      Conditions;                                        // 0x30(0x10)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class AISpawnAndCondition: public AISpawnComplexCondition
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class AISpawnOrCondition: public AISpawnComplexCondition
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class AISpawnMatchesAllContextsCondition: public AISpawnOverrideCondition
{
public:
	TArray<class Class*>                                         Contexts;                                          // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class AISpawnMatchesAnyContextCondition: public AISpawnOverrideCondition
{
public:
	TArray<class Class*>                                         Contexts;                                          // 0x30(0x10)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class AISpawnStoryCondition: public AISpawnOverrideCondition
{
public:
	Struct StoryFlag                                             StoryFlag;                                         // 0x30(0x8)
	char                                                         pad0x18_2A8L1[0x18];                               // 0x38(0x18)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StaticAISpawnCondition: public AISpawnOverrideCondition
{
public:
	bool                                                         ShouldApplyOverride;                               // 0x30(0x1)
	char                                                         pad0x7_Y6KRU[0x7];                                 // 0x31(0x7)
};


// Size 0x0 (Full Size[0x2e0] - InheritedSize[0x2e0]
class AISpawnPointSeedComponent: public SceneComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnRegionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AITargetServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AITargetInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class AITargetActor: public Actor
{
public:
	char                                                         pad0x8_OX7TV[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	byte                                                         Team;                                              // 0x3d8(0x1)
	char                                                         pad0x7_WJ73T[0x7];                                 // 0x3d9(0x7)
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class AITargetService: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AITargetWeaponInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIWithFormInterface: public Interface
{
public:
};


// Size 0x270 (Full Size[0x638] - InheritedSize[0x3c8]
class AmbientWaterSpawnerManager: public Actor
{
public:
	char                                                         pad0x10_86GOS[0x10];                               // 0x3c8(0x10)
	Class SceneComponent*                                        Root;                                              // 0x3d8(0x8)
	Class AthenaAISettings*                                      AthenaAISettings;                                  // 0x3e0(0x8)
	TArray<struct FName>                                         AISpawnBlockingContextNames;                       // 0x3e8(0x10)
	Class AIPerPlayerSpawner*                                    SharkPerPlayerSpawnerTemplate;                     // 0x3f8(0x8)
	Class AIPerPlayerSpawner*                                    SirenPerPlayerSpawnerTemplate;                     // 0x400(0x8)
	float                                                        SirenEncounterRegionRadius;                        // 0x408(0x4)
	float                                                        SirenEncounterShutdownTime;                        // 0x40c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      InitialSirenSpawningWeightedTimeRange;             // 0x410(0x30)
	Struct WeightedProbabilityRangeOfRanges                      UnsuccessfulSirenSpawningWeightedTimeRange;        // 0x440(0x30)
	Struct WeightedProbabilityRangeOfRanges                      SuccessfulSirenSpawningWeightedTimeRange;          // 0x470(0x30)
	Struct ChanceForSharksToBlockSirenEncounterData              SharkEncounterSpawnBlockingData;                   // 0x4a0(0xc)
	char                                                         pad0x4_D650N[0x4];                                 // 0x4ac(0x4)
	TArray<struct PerDepthSpawnChances>                          PerDepthSpawnChances;                              // 0x4b0(0x10)
	Class AIPerPlayerSpawner*                                    SharkPerPlayerSpawner;                             // 0x4c0(0x8)
	char                                                         pad0x150_9YA86[0x150];                             // 0x4c8(0x150)
	TArray<struct PlayersInWater>                                PlayersInWater;                                    // 0x618(0x10)
	TArray<struct SirenEncounters>                               SirenEncounters;                                   // 0x628(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AmmunitionItemClassProviderInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class AppliedStatusToMultipleAIWithFormsStatCondition: public StatCondition
{
public:
	TArray<class Class*>                                         Status;                                            // 0x28(0x10)
	int                                                          AICountMinimum;                                    // 0x38(0x4)
	bool                                                         AllowAllForms;                                     // 0x3c(0x1)
	char                                                         pad0x3_ZM43F[0x3];                                 // 0x3d(0x3)
	TArray<Assetclass AllowedAIForms>                            AllowedAIForms;                                    // 0x40(0x10)
	TArray<class Class*>                                         AIClassesToIgnore;                                 // 0x50(0x10)
	TArray<Assetclass AllowedSources>                            AllowedSources;                                    // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AquaticAITargetInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x140] - InheritedSize[0x78]
class BurrowAIAbility: public AthenaAIAbility
{
public:
	TArray<struct LocationsToSpawnCrack>                         LocationsToSpawnCrack;                             // 0x78(0x10)
	Struct TimerHandle                                           TimerHandleStartNextSpawnWave;                     // 0x88(0x4)
	char                                                         pad0x4_13C0A[0x4];                                 // 0x8c(0x4)
	Class Actor*                                                 CachedTarget;                                      // 0x90(0x8)
	char                                                         pad0x8c_728OT[0x8c];                               // 0x98(0x8c)
	bool                                                         bExecuting;                                        // 0x124(0x1)
	bool                                                         bProcessingSpawnLocations;                         // 0x125(0x1)
	char                                                         pad0x1a_AO5XM[0x1a];                               // 0x126(0x1a)
};


// Size 0x40 (Full Size[0x408] - InheritedSize[0x3c8]
class BurrowCrack: public Actor
{
public:
	Class SceneComponent*                                        DefaultSceneComponent;                             // 0x3c8(0x8)
	Class DecalComponent*                                        DecalComponent;                                    // 0x3d0(0x8)
	float                                                        FadeOutTimeSeconds;                                // 0x3d8(0x4)
	bool                                                         HasFadeStarted;                                    // 0x3dc(0x1)
	char                                                         pad0x2b_9IZQ9[0x2b];                               // 0x3dd(0x2b)
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class BurrowAIAbilityParams: public AthenaAIAbilityParams
{
public:
	TArray<Byte ValidBurrowSurfaceTypes>                         ValidBurrowSurfaceTypes;                           // 0xc8(0x10)
	class                                                        BurrowCrackToSpawn;                                // 0xd8(0x8)
	class                                                        BurrowEruptArea;                                   // 0xe0(0x8)
	Class EnvQuery*                                              EnvQueryLinesToTarget;                             // 0xe8(0x8)
	Class EnvQuery*                                              EnvQueryAroundTarget;                              // 0xf0(0x8)
	Struct Vector                                                OffsetPositionForStartTrace;                       // 0xf8(0xc)
	float                                                        SurfaceDetectRaycastLength;                        // 0x104(0x4)
	float                                                        BurrowAroundTargetRange;                           // 0x108(0x4)
	float                                                        MaxSurfaceAngleForBurrow;                          // 0x10c(0x4)
	bool                                                         bEruptFromClosestSpawn;                            // 0x110(0x1)
	char                                                         pad0x3_NN50Y[0x3];                                 // 0x111(0x3)
	Struct MinMaxBurrowAbility                                   EruptionDelayRndBetweenMinMaxSeconds;              // 0x114(0x8)
	Struct MinMaxBurrowAbility                                   NumberOfCrackWavesMinMax;                          // 0x11c(0x8)
	Struct MinMaxBurrowAbility                                   RndSecondsBetweenCrackWaves;                       // 0x124(0x8)
	Struct MinMaxBurrowAbility                                   NumberOfCracksPerWaveMinMax;                       // 0x12c(0x8)
	Struct MinMaxBurrowAbility                                   RndSecondsBetweenEachCrackSpawn;                   // 0x134(0x8)
	char                                                         pad0x4_P0327[0x4];                                 // 0x13c(0x4)
};


// Size 0x30 (Full Size[0x170] - InheritedSize[0x140]
class BurrowHealAIAbilityParams: public BurrowAIAbilityParams
{
public:
	class                                                        AllyTypeToHeal;                                    // 0x140(0x8)
	float                                                        HealDuration;                                      // 0x148(0x4)
	float                                                        RadiusForValidTargets;                             // 0x14c(0x4)
	int                                                          NumberOfTargetsToHeal;                             // 0x150(0x4)
	char                                                         pad0x4_TJ034[0x4];                                 // 0x154(0x4)
	Struct Status                                                StatusToApplyOnHeal;                               // 0x158(0x18)
};


// Size 0x10 (Full Size[0x150] - InheritedSize[0x140]
class BurrowHealAIAbility: public BurrowAIAbility
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIBuffAbilityInterface: public Interface
{
public:
};


// Size 0xc0 (Full Size[0x138] - InheritedSize[0x78]
class CoralShieldAbility: public AthenaAIAbility
{
public:
	TArray<Weakclass PotentialTargets>                           PotentialTargets;                                  // 0x78(0x10)
	TArray<struct BuffedTargets>                                 BuffedTargets;                                     // 0xa8(0x10)
	char                                                         pad0x80_4FOI3[0x80];                               // 0xb8(0x80)
};


// Size 0xa8 (Full Size[0x120] - InheritedSize[0x78]
class ElectricShieldAbility: public AthenaAIAbility
{
public:
	char                                                         pad0x8_P2H8N[0x8];                                 // 0x78(0x8)
	TArray<Interface SelectedTargets>                            SelectedTargets;                                   // 0x80(0x10)
	char                                                         pad0x90_37RSR[0x90];                               // 0x90(0x90)
};


// Size 0x38 (Full Size[0xb0] - InheritedSize[0x78]
class SporeBreathAIAbility: public AthenaAIAbility
{
public:
	Class StatusEffectOverlapZone*                               BreathActor;                                       // 0x78(0x8)
	Class VFXSpawnerComponent*                                   BreathVFX;                                         // 0x80(0x8)
	char                                                         pad0x28_DTYWQ[0x28];                               // 0x88(0x28)
};


// Size 0x8 (Full Size[0x80] - InheritedSize[0x78]
class TeleportAIAbility: public AthenaAIAbility
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIAbilityHandlerInterface: public Interface
{
public:
};


// Size 0x128 (Full Size[0x1f0] - InheritedSize[0xc8]
class AthenaAIAbilityComponent: public ActorComponent
{
public:
	char                                                         pad0x8_37894[0x8];                                 // 0xc8(0x8)
	TArray<class AthenaAIAbility*>                               AIAbilities;                                       // 0xd0(0x10)
	TArray<class AthenaAIAbility*>                               ActivatableAbilitiesInCurrentStage;                // 0xe0(0x10)
	Class AthenaAIAbility*                                       CurrentAIAbility;                                  // 0xf0(0x8)
	class                                                        QueuedAbilityType;                                 // 0xf8(0x8)
	class                                                        DebugAlwaysOnAbility;                              // 0x100(0x8)
	TArray<struct AbilityDamageStages>                           AbilityDamageStages;                               // 0x108(0x10)
	char                                                         pad0xd8_8J12V[0xd8];                               // 0x118(0xd8)
};


// Size 0x138 (Full Size[0x200] - InheritedSize[0xc8]
class AthenaAIAbilityHandlerComponent: public ActorComponent
{
public:
	char                                                         pad0xd0_Q99K8[0xd0];                               // 0xc8(0xd0)
	TArray<struct AbilityStages>                                 AbilityStages;                                     // 0x198(0x10)
	TArray<class AthenaAIAbility*>                               AIAbilities;                                       // 0x1a8(0x10)
	TArray<class Class*>                                         ReadyAbilitiesPool;                                // 0x1b8(0x10)
	char                                                         pad0x20_7S9YZ[0x20];                               // 0x1c8(0x20)
	class                                                        DebugAlwaysOnAbility;                              // 0x1e8(0x8)
	class                                                        RequiresActivation;                                // 0x1f0(0x8)
	char                                                         pad0x8_8FT5I[0x8];                                 // 0x1f8(0x8)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class CoralShieldAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        ShieldEffectRadius;                                // 0xc8(0x4)
	float                                                        DamageNeededToBreakShield;                         // 0xcc(0x4)
	float                                                        ShieldLifeTime;                                    // 0xd0(0x4)
	char                                                         pad0x4_C1Q4B[0x4];                                 // 0xd4(0x4)
	Struct Status                                                CoralShieldStatusEffect;                           // 0xd8(0x18)
	Class DamageableVulnerabilityLayer*                          VulnerabilityToApplyToSelf;                        // 0xf0(0x8)
	float                                                        DelayBeforeSFXPlays;                               // 0xf8(0x4)
	char                                                         pad0x4_KFTKI[0x4];                                 // 0xfc(0x4)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class ElectricShieldAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        ChargeUpTime;                                      // 0xc8(0x4)
	char                                                         pad0x4_6IEAN[0x4];                                 // 0xcc(0x4)
	Struct Status                                                BuffInterruptedStatusEffect;                       // 0xd0(0x18)
	Struct Status                                                ElectricShieldStatusEffect;                        // 0xe8(0x18)
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class SporeBreathAIAbilityParams: public AthenaAIAbilityParams
{
public:
	Struct AthenaAIAbilityPlayerBasedRanges                      BreathMaxDuration;                                 // 0xc8(0x10)
	float                                                        BreathContinueThresholdDistance;                   // 0xd8(0x4)
	char                                                         pad0x4_THBFE[0x4];                                 // 0xdc(0x4)
	class                                                        BreathActor;                                       // 0xe0(0x8)
	Struct VFXHandlerComponentParams                             BreathVFXParams;                                   // 0xe8(0x40)
	Struct Vector                                                BreathCollisionVolumeSize;                         // 0x128(0xc)
	float                                                        BreathCollisionForwardOffset;                      // 0x134(0x4)
	float                                                        BreathStartDelay;                                  // 0x138(0x4)
	char                                                         pad0x4_0385L[0x4];                                 // 0x13c(0x4)
	class                                                        VfxSpawner;                                        // 0x140(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BurrowAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BurrowHealAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoralShieldAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ElectricShieldAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SporeBreathAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x10 (Full Size[0xe0] - InheritedSize[0xd0]
class AthenaAIRangeBasedAmmoDataAsset: public AthenaAIAmmoDataAsset
{
public:
	TArray<struct AmmoTypeRanges>                                AmmoTypeRanges;                                    // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAICharacterStatsInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x610] - InheritedSize[0x4b8]
class AthenaAIControllerBase: public AIController
{
public:
};


// Size 0x350 (Full Size[0x960] - InheritedSize[0x610]
class AthenaAIController: public AthenaAIControllerBase
{
public:
	char                                                         pad0x24_BNGJZ[0x24];                               // 0x610(0x24)
	float                                                        CurrentTargetPerceivedNotVisibleAge;               // 0x634(0x4)
	char                                                         pad0x40_NJ54O[0x40];                               // 0x638(0x40)
	Class AISenseConfig_Sight*                                   SightConfig;                                       // 0x678(0x8)
	Class AISenseConfig_Hearing*                                 HearingConfig;                                     // 0x680(0x8)
	Class AISenseConfig_Damage*                                  DamageSenseConfig;                                 // 0x688(0x8)
	char                                                         pad0x48_7S6Y9[0x48];                               // 0x690(0x48)
	TArray<struct AIStrategySenseSettingOverrides>               AIStrategySenseSettingOverrides;                   // 0x6d8(0x10)
	char                                                         pad0x248_FN671[0x248];                             // 0x6e8(0x248)
	Class Actor*                                                 CurrentNotSeenPerceivedActor;                      // 0x930(0x8)
	Class Actor*                                                 PendingSpawnTriggerActor;                          // 0x938(0x8)
	char                                                         pad0x20_5EW5I[0x20];                               // 0x940(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpawnItemDescProviderInterface: public Interface
{
public:
};


// Size 0x260 (Full Size[0xbc0] - InheritedSize[0x960]
class AthenaAICharacterController: public AthenaAIController
{
public:
	char                                                         pad0x8_C40GC[0x8];                                 // 0x960(0x8)
	Class AthenaAIItemParamsDataAsset*                           ItemParamsDataAsset;                               // 0x968(0x8)
	Class LoadoutAsset*                                          FallbackLoadoutIfAllEngageItemsDropped;            // 0x970(0x8)
	float                                                        ControlRotationInterpSpeed;                        // 0x978(0x4)
	bool                                                         ControlRotationUseConstantInterp;                  // 0x97c(0x1)
	bool                                                         FaceTargetDisabled;                                // 0x97d(0x1)
	char                                                         pad0x2_KB827[0x2];                                 // 0x97e(0x2)
	float                                                        MinTurnAngleToPlayTurnAnim;                        // 0x980(0x4)
	char                                                         pad0x14_1MTSV[0x14];                               // 0x984(0x14)
	Class AthenaAICharacterControllerParamsDataAsset*            CharacterParamsDataAsset;                          // 0x998(0x8)
	char                                                         pad0x90_F883D[0x90];                               // 0x9a0(0x90)
	TArray<struct SpawnItemDescForItemCategories>                SpawnItemDescForItemCategories;                    // 0xa30(0x10)
	TArray<class AthenaAIAbilityParams*>                         AIAbilityParams;                                   // 0xa40(0x10)
	TArray<struct AIAbilityStageParams>                          AIAbilityStageParams;                              // 0xa50(0x10)
	TArray<struct NonItemEngageOptions>                          NonItemEngageOptions;                              // 0xa60(0x10)
	Class CurveFloat*                                            DistanceInMToCannonShotHitChanceCurve;             // 0xa70(0x8)
	char                                                         pad0x148_M69PW[0x148];                             // 0xa78(0x148)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIControllerNavMeshTogglesInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x1c0] - InheritedSize[0x138]
class FaunaAIContollerParamsDataAsset: public AthenaAIControllerParamsDataAsset
{
public:
	Struct WeightedProbabilityRange                              Courage;                                           // 0x138(0x20)
	TArray<struct CarriedItemThreatOverrides>                    CarriedItemThreatOverrides;                        // 0x158(0x10)
	bool                                                         ThreatenedBySightOfCarrier;                        // 0x168(0x1)
	char                                                         pad0x7_L8ZSJ[0x7];                                 // 0x169(0x7)
	TArray<struct KnownHearingDangers>                           KnownHearingDangers;                               // 0x170(0x10)
	float                                                        CarrierHearingThreatSpeedThreshold;                // 0x180(0x4)
	float                                                        DamageThreat;                                      // 0x184(0x4)
	Class CurveFloat*                                            CharacterDistanceToDangerRatingCurve;              // 0x188(0x8)
	Class CurveFloat*                                            DangerRatingToAgitationDurationCurve;              // 0x190(0x8)
	float                                                        TimeToBecomeAgitatedMin;                           // 0x198(0x4)
	float                                                        TimeToBecomeAgitatedMax;                           // 0x19c(0x4)
	float                                                        AgitationDurationVariance;                         // 0x1a0(0x4)
	int                                                          AlertThreshold;                                    // 0x1a4(0x4)
	int                                                          FleeThreshold;                                     // 0x1a8(0x4)
	float                                                        TimeToBecomeCalm;                                  // 0x1ac(0x4)
	float                                                        CalmCooldownTime;                                  // 0x1b0(0x4)
	float                                                        MaxDistanceFromLeaderForIdle;                      // 0x1b4(0x4)
	Class CurveFloat*                                            DistanceToLeaderPatrolChanceCurve;                 // 0x1b8(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAIControllerParamsDataProvider: public AIDataProvider
{
public:
	struct FName                                                 ParamName;                                         // 0x28(0x8)
	float                                                        FloatValue;                                        // 0x30(0x4)
	int                                                          IntValue;                                          // 0x34(0x4)
	bool                                                         BoolValue;                                         // 0x38(0x1)
	char                                                         pad0x7_1QZO8[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIControllerParamsTargetInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x90] - InheritedSize[0x30]
class AthenaAIDamageModifierCrewProximity: public AthenaAIDamageModifierBase
{
public:
	float                                                        Radius;                                            // 0x30(0x4)
	bool                                                         UseSeparateRadiusForShips;                         // 0x34(0x1)
	char                                                         pad0x3_ZAXAV[0x3];                                 // 0x35(0x3)
	float                                                        ShipRadius;                                        // 0x38(0x4)
	char                                                         pad0x4_807IY[0x4];                                 // 0x3c(0x4)
	TArray<struct VulnerabilityData>                             VulnerabilityData;                                 // 0x40(0x10)
	char                                                         pad0x40_F722I[0x40];                               // 0x50(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIFormComponentContainerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIInteractableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x1c8] - InheritedSize[0x1c8]
class AthenaAIPerceptionComponent: public AIPerceptionComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAISightTargetInterface: public AISightTargetInterface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AthenaAIWeightedRangesDataProvider: public AIDataProvider
{
public:
	struct FName                                                 ParamName;                                         // 0x28(0x8)
	Struct WeightedProbabilityRangeOfRanges                      WeightedRangesValue;                               // 0x30(0x30)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BlackboardAIDataProvider: public AIDataProvider
{
public:
	struct FName                                                 ParamName;                                         // 0x28(0x8)
	float                                                        FloatValue;                                        // 0x30(0x4)
	int                                                          IntValue;                                          // 0x34(0x4)
	bool                                                         BoolValue;                                         // 0x38(0x1)
	char                                                         pad0x7_04F7K[0x7];                                 // 0x39(0x7)
};


// Size 0x20 (Full Size[0x88] - InheritedSize[0x68]
class BTDecorator_ActionState: public BTDecorator
{
public:
	byte                                                         TrackId;                                           // 0x68(0x1)
	char                                                         pad0x7_90L0Q[0x7];                                 // 0x69(0x7)
	class                                                        StateId;                                           // 0x70(0x8)
	char                                                         pad0x10_YQ8HM[0x10];                               // 0x78(0x10)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class BTDecorator_ActorInWater: public BTDecorator_BlackboardBase
{
public:
	bool                                                         ReverseLogic;                                      // 0x90(0x1)
	char                                                         pad0x7_30C6K[0x7];                                 // 0x91(0x7)
};


// Size 0x10 (Full Size[0x78] - InheritedSize[0x68]
class BTDecorator_CurrentAIStrategy: public BTDecorator_BaseConditional
{
public:
	TArray<class Class*>                                         Strategies;                                        // 0x68(0x10)
};


// Size 0x10 (Full Size[0x78] - InheritedSize[0x68]
class BTDecorator_IsActorInExpectedActionState: public BTDecorator_BaseConditional
{
public:
	class                                                        ExpectedActionState;                               // 0x68(0x8)
	byte                                                         ExpectedTrackId;                                   // 0x70(0x1)
	char                                                         pad0x7_1HZMI[0x7];                                 // 0x71(0x7)
};


// Size 0x8 (Full Size[0x70] - InheritedSize[0x68]
class BTDecorator_ItemReadyToUse: public BTDecorator_BaseConditional
{
public:
	class                                                        NotificationId;                                    // 0x68(0x8)
};


// Size 0x30 (Full Size[0x98] - InheritedSize[0x68]
class BTDecorator_LeftOfAIPawn: public BTDecorator_BaseConditional
{
public:
	Struct BlackboardKeySelector                                 TargetKey;                                         // 0x68(0x28)
	bool                                                         ReverseLogic;                                      // 0x90(0x1)
	char                                                         pad0x7_1S2QS[0x7];                                 // 0x91(0x7)
};


// Size 0x88 (Full Size[0xf0] - InheritedSize[0x68]
class BTDecorator_LineOfSightToTarget: public BTDecorator_BaseConditional
{
public:
	float                                                        Interval;                                          // 0x68(0x4)
	char                                                         pad0x4_8N4AZ[0x4];                                 // 0x6c(0x4)
	Struct BlackboardKeySelector                                 TargetActorKey;                                    // 0x70(0x28)
	bool                                                         UseTargetPosition;                                 // 0x98(0x1)
	char                                                         pad0x7_UT8DH[0x7];                                 // 0x99(0x7)
	Struct BlackboardKeySelector                                 TargetPositionKey;                                 // 0xa0(0x28)
	Struct Vector                                                OffsetToApplyToTargetPosition;                     // 0xc8(0xc)
	char                                                         pad0x1c_CHWLG[0x1c];                               // 0xd4(0x1c)
};


// Size 0x28 (Full Size[0xb8] - InheritedSize[0x90]
class BTDecorator_CompareBlackboardClassValue: public BTDecorator_BlackboardBase
{
public:
	class                                                        Class;                                             // 0x90(0x8)
	bool                                                         Invert;                                            // 0x98(0x1)
	char                                                         pad0x7_LTO9Y[0x7];                                 // 0x99(0x7)
	Struct FString                                               CachedDescription;                                 // 0xa0(0x10)
	byte                                                         NotifyObserver;                                    // 0xb0(0x1)
	char                                                         pad0x7_WLB4H[0x7];                                 // 0xb1(0x7)
};


// Size 0x30 (Full Size[0x98] - InheritedSize[0x68]
class BTDecorator_CompareBlackboardIntValue: public BTDecorator
{
public:
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x68(0x28)
	int                                                          Value;                                             // 0x90(0x4)
	byte                                                         ComparisonType;                                    // 0x94(0x1)
	char                                                         pad0x3_TWDUD[0x3];                                 // 0x95(0x3)
};


// Size 0x18 (Full Size[0x80] - InheritedSize[0x68]
class BTDecorator_CompareBlackboardValues: public BTDecorator
{
public:
	TArray<struct FloatConditions>                               FloatConditions;                                   // 0x68(0x10)
	byte                                                         FloatConditionComposite;                           // 0x78(0x1)
	char                                                         pad0x7_WGZTZ[0x7];                                 // 0x79(0x7)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class BTDecorator_CompareFloatValueBase: public BTDecorator_CompareBlackboardValues
{
public:
	byte                                                         Comparison;                                        // 0x80(0x1)
	char                                                         pad0x7_Z42H5[0x7];                                 // 0x81(0x7)
	Struct AIDataProviderFloatValue                              Value;                                             // 0x88(0x30)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class BTDecorator_CompareBlackboardActorSpeed: public BTDecorator_CompareFloatValueBase
{
public:
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0xb8(0x28)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class BTDecorator_CompareBlackboardFloatValue: public BTDecorator_CompareFloatValueBase
{
public:
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0xb8(0x28)
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class BTDecorator_CompareCurrentHealth: public BTDecorator_CompareFloatValueBase
{
public:
};


// Size 0x88 (Full Size[0x108] - InheritedSize[0x80]
class BTDecorator_TargetInRange: public BTDecorator_CompareBlackboardValues
{
public:
	Struct AIDataProviderFloatValue                              EnterRange;                                        // 0x80(0x30)
	Struct AIDataProviderFloatValue                              ExitRange;                                         // 0xb0(0x30)
	Struct BlackboardKeySelector                                 TargetKey;                                         // 0xe0(0x28)
};


// Size 0x28 (Full Size[0x130] - InheritedSize[0x108]
class BTDecorator_TargetInRangeOfPoint: public BTDecorator_TargetInRange
{
public:
	Struct BlackboardKeySelector                                 ReferencePointKey;                                 // 0x108(0x28)
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class BTDecorator_TestRange: public BTDecorator_CompareBlackboardValues
{
public:
	Struct AIDataProviderFloatValue                              EnterRange;                                        // 0x80(0x30)
	Struct AIDataProviderFloatValue                              ExitRange;                                         // 0xb0(0x30)
	bool                                                         TestForOutsideRange;                               // 0xe0(0x1)
	char                                                         pad0x7_3AHU0[0x7];                                 // 0xe1(0x7)
};


// Size 0x10 (Full Size[0xf8] - InheritedSize[0xe8]
class BTDecorator_TestRangeOfSeenActors: public BTDecorator_TestRange
{
public:
};


// Size 0x58 (Full Size[0xc0] - InheritedSize[0x68]
class BTDecorator_ConeCheck3D: public BTDecorator
{
public:
	float                                                        ConeHalfAngle;                                     // 0x68(0x4)
	char                                                         pad0x4_UKKAX[0x4];                                 // 0x6c(0x4)
	Struct BlackboardKeySelector                                 ConeOrigin;                                        // 0x70(0x28)
	Struct BlackboardKeySelector                                 Observed;                                          // 0x98(0x28)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BTDecorator_DockedToInteractable: public BTDecorator_BlackboardBase
{
public:
};


// Size 0x10 (Full Size[0x78] - InheritedSize[0x68]
class BTDecorator_FeatureToggle: public BTDecorator
{
public:
	Struct FeatureFlag                                           Feature;                                           // 0x68(0xc)
	char                                                         pad0x4_21Q1P[0x4];                                 // 0x74(0x4)
};


// Size 0x8 (Full Size[0x70] - InheritedSize[0x68]
class BTDecorator_IsAbilityAvailable: public BTDecorator
{
public:
	class                                                        AIAbilityType;                                     // 0x68(0x8)
};


// Size 0x58 (Full Size[0xe8] - InheritedSize[0x90]
class BTDecorator_IsLocationInWater: public BTDecorator_BlackboardBase
{
public:
	Struct BlackboardKeySelector                                 WaterVolumeActor;                                  // 0x90(0x28)
	Struct BlackboardKeySelector                                 TargetLocation;                                    // 0xb8(0x28)
	bool                                                         OnlyConsidersSwimmableWater;                       // 0xe0(0x1)
	char                                                         pad0x7_GBEEG[0x7];                                 // 0xe1(0x7)
};


// Size 0x10 (Full Size[0x78] - InheritedSize[0x68]
class BTDecorator_MultipleRandomDiceRolls: public BTDecorator
{
public:
	TArray<struct ChanceKeyPairs>                                ChanceKeyPairs;                                    // 0x68(0x10)
};


// Size 0x30 (Full Size[0x98] - InheritedSize[0x68]
class BTDecorator_RandomDiceRoll: public BTDecorator
{
public:
	Struct AIDataProviderFloatValue                              Chance;                                            // 0x68(0x30)
};


// Size 0x10 (Full Size[0x78] - InheritedSize[0x68]
class BTDecorator_RandomLoop: public BTDecorator
{
public:
	int                                                          MinNumLoops;                                       // 0x68(0x4)
	int                                                          MaxNumLoops;                                       // 0x6c(0x4)
	Class CurveFloat*                                            RandomNumLoopCurve;                                // 0x70(0x8)
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_RollAgainstPatrolChance: public BTDecorator
{
public:
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class BTDecorator_TestAIInteractableType: public BTDecorator_BlackboardBase
{
public:
	class                                                        Type;                                              // 0x90(0x8)
};


// Size 0x78 (Full Size[0xe8] - InheritedSize[0x70]
class BTService_AimAIInteractable: public BTService
{
public:
	Struct BlackboardKeySelector                                 Interactable;                                      // 0x70(0x28)
	Struct BlackboardKeySelector                                 TargetForInteractable;                             // 0x98(0x28)
	Struct BlackboardKeySelector                                 TargetRelativeAimVector;                           // 0xc0(0x28)
};


// Size 0x8 (Full Size[0xa8] - InheritedSize[0xa0]
class BTService_DefaultFocusToPosAtRelativeAngleToObject: public BTService_DefaultFocus
{
public:
	float                                                        RelativeYawAngleOffset;                            // 0xa0(0x4)
	float                                                        RelativeDistance;                                  // 0xa4(0x4)
};


// Size 0x28 (Full Size[0x98] - InheritedSize[0x70]
class BTService_DetermineAIAbility: public BTService
{
public:
	Struct BlackboardKeySelector                                 BlockChangeAIAbilitiesKey;                         // 0x70(0x28)
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class BTService_DisableCollisions: public BTService
{
public:
	TArray<Byte ChannelsToLeaveUnaffected>                       ChannelsToLeaveUnaffected;                         // 0x70(0x10)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class BTService_DisableDamageResponses: public BTService
{
public:
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class BTService_DisableStun: public BTService
{
public:
};


// Size 0x40 (Full Size[0xd8] - InheritedSize[0x98]
class BTService_EnableFaceFocusActor: public BTService_BlackboardBase
{
public:
	bool                                                         DisableUpdateMoveFocusForCurrentPathOnExit;        // 0x98(0x1)
	char                                                         pad0x7_0195R[0x7];                                 // 0x99(0x7)
	Struct ConditionalBasedOnBlackboardKey                       Conditional;                                       // 0xa0(0x38)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class BTService_IncrementFloatValueWithTimeSpentInBranch: public BTService_BlackboardBase
{
public:
	float                                                        TimeMultiplier;                                    // 0x98(0x4)
	char                                                         pad0x4_4YAEP[0x4];                                 // 0x9c(0x4)
};


// Size 0x30 (Full Size[0xa0] - InheritedSize[0x70]
class BTService_OverrideTurnSpeed: public BTService
{
public:
	Struct AIDataProviderFloatValue                              TurnSpeed;                                         // 0x70(0x30)
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class BTService_PlayCustomMontageId: public BTService
{
public:
	Struct CustomAnimationMontageId                              CustomAnimationMontageId;                          // 0x70(0x8)
};


// Size 0x0 (Full Size[0x70] - InheritedSize[0x70]
class BTService_QueryPerceptionForTarget: public BTService
{
public:
};


// Size 0x50 (Full Size[0xe8] - InheritedSize[0x98]
class BTService_RunEQSQuery: public BTService_BlackboardBase
{
public:
	bool                                                         OverrideQueryTemplateWithBlackboardValue;          // 0x98(0x1)
	char                                                         pad0x7_MR0M7[0x7];                                 // 0x99(0x7)
	Struct BlackboardKeySelector                                 OverrideEQSKey;                                    // 0xa0(0x28)
	Class EnvQuery*                                              QueryTemplate;                                     // 0xc8(0x8)
	TArray<struct QueryParams>                                   QueryParams;                                       // 0xd0(0x10)
	byte                                                         RunMode;                                           // 0xe0(0x1)
	bool                                                         ThrottleQueryTimePerFrame;                         // 0xe1(0x1)
	char                                                         pad0x2_HYVK8[0x2];                                 // 0xe2(0x2)
	float                                                        MaxSecondsToSpendOnQueryPerFrame;                  // 0xe4(0x4)
};


// Size 0x0 (Full Size[0xe8] - InheritedSize[0xe8]
class BTService_DoesEQSQuerySucceed: public BTService_RunEQSQuery
{
public:
};


// Size 0x40 (Full Size[0x128] - InheritedSize[0xe8]
class BTService_RunEQSQueryOnActorMovement: public BTService_RunEQSQuery
{
public:
	Struct BlackboardKeySelector                                 MovingActorKey;                                    // 0xe8(0x28)
	float                                                        MinimumActorMovementToRunEQS;                      // 0x110(0x4)
	float                                                        MinimumActorVelocityChangeToRunEQS;                // 0x114(0x4)
	bool                                                         RunEQSForYawChanges;                               // 0x118(0x1)
	char                                                         pad0x3_RZC6V[0x3];                                 // 0x119(0x3)
	float                                                        MinimumActorYawChangeToRunEQS;                     // 0x11c(0x4)
	char                                                         pad0x8_6C3U8[0x8];                                 // 0x120(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class BTService_SetAIAnimationState: public BTService_BlackboardBase
{
public:
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class BTService_SetAIStrategy: public BTService
{
public:
	class                                                        NewStrategy;                                       // 0x70(0x8)
};


// Size 0x28 (Full Size[0x98] - InheritedSize[0x70]
class BTService_SetBoolBlackboardValueToTrueOnCeaseRelevant: public BTService
{
public:
	Struct BlackboardKeySelector                                 BoolValueKey;                                      // 0x70(0x28)
};


// Size 0x28 (Full Size[0x98] - InheritedSize[0x70]
class BTService_SetBoolBlackboardValueTrueWhileRelevant: public BTService
{
public:
	Struct BlackboardKeySelector                                 BoolValueKey;                                      // 0x70(0x28)
};


// Size 0x30 (Full Size[0xa0] - InheritedSize[0x70]
class BTService_SetNameBlackboardValueWhileRelevant: public BTService
{
public:
	Struct BlackboardKeySelector                                 NameValueKey;                                      // 0x70(0x28)
	struct FName                                                 Value;                                             // 0x98(0x8)
};


// Size 0x28 (Full Size[0x98] - InheritedSize[0x70]
class BTService_TriggerNotifications: public BTService
{
public:
	class                                                        EnterBranchNotificationId;                         // 0x70(0x8)
	class                                                        LeaveBranchNotificationId;                         // 0x78(0x8)
	char                                                         pad0x18_LUODA[0x18];                               // 0x80(0x18)
};


// Size 0x40 (Full Size[0xe0] - InheritedSize[0xa0]
class BTService_UpdateFocusOnBBChange: public BTService_DefaultFocus
{
public:
	bool                                                         DisableUpdateMoveFocusForCurrentPathOnExit;        // 0xa0(0x1)
	char                                                         pad0x7_0BFZV[0x7];                                 // 0xa1(0x7)
	Struct ConditionalBasedOnBlackboardKey                       Conditional;                                       // 0xa8(0x38)
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class BTService_UpdateFocusOnBBChangeWithOffsetFromWieldedProjectile: public BTService_UpdateFocusOnBBChange
{
public:
};


// Size 0x50 (Full Size[0xc0] - InheritedSize[0x70]
class BTService_UpdateTargetForInteractable: public BTService
{
public:
	Struct BlackboardKeySelector                                 Interactable;                                      // 0x70(0x28)
	Struct BlackboardKeySelector                                 TargetForInteractable;                             // 0x98(0x28)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class BTService_UpdateViewPitchForWieldedProjectileToHitTarget: public BTService_BlackboardBase
{
public:
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class BTTask_ApplyStatusComposite: public BTTaskNode
{
public:
	bool                                                         bOneShot;                                          // 0x60(0x1)
	char                                                         pad0x7_SIYG3[0x7];                                 // 0x61(0x7)
	Struct AIDataProviderFloatValue                              ContinuousStatusDuration;                          // 0x68(0x30)
	Struct Status                                                StatusToApply;                                     // 0x98(0x18)
};


// Size 0x18 (Full Size[0xb8] - InheritedSize[0xa0]
class BTTask_AthenaMoveTo: public BTTask_MoveTo
{
public:
	bool                                                         ShouldFailBeforeSlowDown;                          // 0xa0(0x1)
	char                                                         pad0x3_OSH2U[0x3];                                 // 0xa1(0x3)
	float                                                        ExitBeforeSlowDownDistanceTolerance;               // 0xa4(0x4)
	bool                                                         ShouldOverrideMaxSpeedToSlow;                      // 0xa8(0x1)
	char                                                         pad0x3_RQ51B[0x3];                                 // 0xa9(0x3)
	float                                                        OverrideMaxSpeedToSlowDistanceFactor;              // 0xac(0x4)
	bool                                                         MaintainFacingBeforeMove;                          // 0xb0(0x1)
	char                                                         pad0x7_CCMK6[0x7];                                 // 0xb1(0x7)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class BTTask_MoveToFailOnDistanceChange: public BTTask_AthenaMoveTo
{
public:
	bool                                                         FailOnDistanceBeingLess;                           // 0xb8(0x1)
	char                                                         pad0x3_BOXHF[0x3];                                 // 0xb9(0x3)
	float                                                        FailDistance;                                      // 0xbc(0x4)
};


// Size 0x10 (Full Size[0xd0] - InheritedSize[0xc0]
class BTTask_MoveToFailOnDistanceToSeenActors: public BTTask_MoveToFailOnDistanceChange
{
public:
};


// Size 0x28 (Full Size[0xe8] - InheritedSize[0xc0]
class BTTask_MoveToFailOnDistanceToTargetChanged: public BTTask_MoveToFailOnDistanceChange
{
public:
	Struct BlackboardKeySelector                                 TargetBlackboardKey;                               // 0xc0(0x28)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class BTTask_MoveToMovingLocation: public BTTask_AthenaMoveTo
{
public:
	float                                                        MinimumLocationMovementForRePath;                  // 0xb8(0x4)
	float                                                        MinimumTimeBeforeRePath;                           // 0xbc(0x4)
	bool                                                         IsContinuous;                                      // 0xc0(0x1)
	char                                                         pad0x7_IUQ1I[0x7];                                 // 0xc1(0x7)
};


// Size 0x98 (Full Size[0xf8] - InheritedSize[0x60]
class BTTask_AthenaWait: public BTTaskNode
{
public:
	bool                                                         UseMinMax;                                         // 0x60(0x1)
	char                                                         pad0x7_W2C97[0x7];                                 // 0x61(0x7)
	Struct AIDataProviderFloatValue                              Min;                                               // 0x68(0x30)
	Struct AIDataProviderFloatValue                              Max;                                               // 0x98(0x30)
	Struct AIDataProviderFloatValue                              FixedWaitTime;                                     // 0xc8(0x30)
};


// Size 0x30 (Full Size[0x128] - InheritedSize[0xf8]
class BTTask_AthenaWaitWithFloor: public BTTask_AthenaWait
{
public:
	Struct AIDataProviderFloatValue                              Floor;                                             // 0xf8(0x30)
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_BurrowAbilityTriggerEruptAreaFromBlackboard: public BTTaskNode
{
public:
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_BurrowIntoGround: public BTTaskNode
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class BTTask_ClearBlackboardValue: public BTTask_BlackboardBase
{
public:
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_ClearPerceptualData: public BTTaskNode
{
public:
};


// Size 0x78 (Full Size[0xd8] - InheritedSize[0x60]
class BTTask_CopyAIInteractionPointAndFocusToBlackboard: public BTTaskNode
{
public:
	Struct BlackboardKeySelector                                 SourceInteractable;                                // 0x60(0x28)
	Struct BlackboardKeySelector                                 InteractionPosition;                               // 0x88(0x28)
	Struct BlackboardKeySelector                                 InteractionFocusPosition;                          // 0xb0(0x28)
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class BTTask_CopyBlackboardActor: public BTTaskNode
{
public:
	Struct BlackboardKeySelector                                 SrcBlackboardKey;                                  // 0x60(0x28)
	Struct BlackboardKeySelector                                 TargetBlackboardKey;                               // 0x88(0x28)
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class BTTask_CopyBlackboardVector: public BTTaskNode
{
public:
	Struct BlackboardKeySelector                                 SrcBlackboardKey;                                  // 0x60(0x28)
	Struct BlackboardKeySelector                                 TargetBlackboardKey;                               // 0x88(0x28)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_DetermineFollowUpAIAbility: public BTTaskNode
{
public:
	class                                                        AIAbilityTypeToFollowUp;                           // 0x60(0x8)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_ExecuteAIAbility: public BTTaskNode
{
public:
	class                                                        AIAbilityType;                                     // 0x60(0x8)
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class BTTask_GetCurrentHealth: public BTTask_BlackboardBase
{
public:
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class BTTask_IgnoreActorTemporarily: public BTTask_BlackboardBase
{
public:
	float                                                        TimeToForget;                                      // 0x88(0x4)
	char                                                         pad0x4_GT08U[0x4];                                 // 0x8c(0x4)
};


// Size 0x30 (Full Size[0xb8] - InheritedSize[0x88]
class BTTask_IncrementBlackboardFloatValue: public BTTask_BlackboardBase
{
public:
	Struct AIDataProviderFloatValue                              FloatValueDelta;                                   // 0x88(0x30)
};


// Size 0x30 (Full Size[0xb8] - InheritedSize[0x88]
class BTTask_IncrementBlackboardIntValue: public BTTask_BlackboardBase
{
public:
	Struct AIDataProviderIntValue                                IntegerValueDelta;                                 // 0x88(0x30)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class BTTask_InteractWith: public BTTask_BlackboardBase
{
public:
	class                                                        NotificationId;                                    // 0x88(0x8)
};


// Size 0x30 (Full Size[0xd0] - InheritedSize[0xa0]
class BTTask_MoveToTarget: public BTTask_MoveTo
{
public:
	float                                                        MaxDistFromDestinationPosToTargetPos;              // 0xa0(0x4)
	float                                                        OverrideMaxSpeedToSlowDistanceFactor;              // 0xa4(0x4)
	Struct BlackboardKeySelector                                 TargetBlackboardKey;                               // 0xa8(0x28)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BTTask_NetworkTriggerAnim: public BTTaskNode
{
public:
	Class AnimSequence*                                          Anim;                                              // 0x60(0x8)
	float                                                        AnimLength;                                        // 0x68(0x4)
	float                                                        AnimPlayRate;                                      // 0x6c(0x4)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_NOP: public BTTaskNode
{
public:
	int                                                          Id;                                                // 0x60(0x4)
	char                                                         pad0x4_908LN[0x4];                                 // 0x64(0x4)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BTTask_PlayCustomMontageId: public BTTaskNode
{
public:
	Struct CustomAnimationMontageId                              CustomAnimationMontageId;                          // 0x60(0x8)
	float                                                        TimeToWaitOnServer;                                // 0x68(0x4)
	char                                                         pad0x4_I7F76[0x4];                                 // 0x6c(0x4)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BTTask_PlayMontage: public BTTaskNode
{
public:
	Class Object*                                                MontageToPlay;                                     // 0x60(0x8)
	bool                                                         PlayAsDynamicMontage;                              // 0x68(0x1)
	char                                                         pad0x7_F1TR4[0x7];                                 // 0x69(0x7)
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_RequestDespawn: public BTTaskNode
{
public:
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetAIStrategy: public BTTaskNode
{
public:
	class                                                        NewStrategy;                                       // 0x60(0x8)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BTTask_SetAIStrategyFromWeightedArray: public BTTaskNode
{
public:
	TArray<struct WeightedStrategies>                            WeightedStrategies;                                // 0x60(0x10)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class BTTask_SetBlackboardActor: public BTTask_BlackboardBase
{
public:
	Class Actor*                                                 Actor;                                             // 0x88(0x8)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class BTTask_SetBlackboardBoolValue: public BTTask_BlackboardBase
{
public:
	bool                                                         NewValue;                                          // 0x88(0x1)
	char                                                         pad0x7_68VE4[0x7];                                 // 0x89(0x7)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class BTTask_SetBlackboardClassValue: public BTTask_BlackboardBase
{
public:
	class                                                        ClassValue;                                        // 0x88(0x8)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class BTTask_SetBlackboardEQSValue: public BTTask_BlackboardBase
{
public:
	Class EnvQuery*                                              EQS;                                               // 0x88(0x8)
};


// Size 0x30 (Full Size[0xb8] - InheritedSize[0x88]
class BTTask_SetBlackboardFloatValue: public BTTask_BlackboardBase
{
public:
	Struct AIDataProviderFloatValue                              FloatValue;                                        // 0x88(0x30)
};


// Size 0x60 (Full Size[0xe8] - InheritedSize[0x88]
class BTTask_SetBlackboardFloatValueFromMinMax: public BTTask_BlackboardBase
{
public:
	Struct AIDataProviderFloatValue                              MinValue;                                          // 0x88(0x30)
	Struct AIDataProviderFloatValue                              MaxValue;                                          // 0xb8(0x30)
};


// Size 0x30 (Full Size[0xb8] - InheritedSize[0x88]
class BTTask_SetBlackboardFloatValueFromWeightedArray: public BTTask_BlackboardBase
{
public:
	Struct AIDataProviderStructValue                             WeightedArrayFromParams;                           // 0x88(0x30)
};


// Size 0x30 (Full Size[0xb8] - InheritedSize[0x88]
class BTTask_SetBlackboardIntValue: public BTTask_BlackboardBase
{
public:
	Struct AIDataProviderIntValue                                IntValue;                                          // 0x88(0x30)
};


// Size 0x38 (Full Size[0xc0] - InheritedSize[0x88]
class BTTask_SetBlackboardVectorValue: public BTTask_BlackboardBase
{
public:
	bool                                                         UseVectorFromBlackboard;                           // 0x88(0x1)
	char                                                         pad0x3_4Y749[0x3];                                 // 0x89(0x3)
	Struct Vector                                                StaticValue;                                       // 0x8c(0xc)
	Struct BlackboardKeySelector                                 BlackboardKeyToUseForVector;                       // 0x98(0x28)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetFollowUpAbility: public BTTaskNode
{
public:
	class                                                        AIAbilityType;                                     // 0x60(0x8)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetInHiddenActionState: public BTTaskNode
{
public:
	bool                                                         EnableHiddenActionState;                           // 0x60(0x1)
	char                                                         pad0x7_V0A33[0x7];                                 // 0x61(0x7)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetIsHeadingOffNavMeshCheck: public BTTaskNode
{
public:
	bool                                                         DisableIsHeadingOffNavMeshCheck;                   // 0x60(0x1)
	char                                                         pad0x7_CO5ZM[0x7];                                 // 0x61(0x7)
};


// Size 0x78 (Full Size[0xd8] - InheritedSize[0x60]
class BTTask_SetupAITargetWeaponForNextShot: public BTTaskNode
{
public:
	Struct BlackboardKeySelector                                 Interactable;                                      // 0x60(0x28)
	Struct BlackboardKeySelector                                 TargetForInteractable;                             // 0x88(0x28)
	Struct BlackboardKeySelector                                 TargetRelativeAimVector;                           // 0xb0(0x28)
};


// Size 0x10 (Full Size[0x98] - InheritedSize[0x88]
class BTTask_SetVelocity: public BTTask_BlackboardBase
{
public:
	bool                                                         UseBlackboardKey;                                  // 0x88(0x1)
	char                                                         pad0x3_1NLLW[0x3];                                 // 0x89(0x3)
	Struct Vector                                                NewVelocity;                                       // 0x8c(0xc)
};


// Size 0x40 (Full Size[0xa0] - InheritedSize[0x60]
class BTTask_SpawnActorAndStore: public BTTaskNode
{
public:
	Struct BlackboardKeySelector                                 BlackBoardKeyNameToStoreActor;                     // 0x60(0x28)
	class                                                        ActorToSpawn;                                      // 0x88(0x8)
	Struct Vector                                                SpawnOffset;                                       // 0x90(0xc)
	char                                                         pad0x4_I80A0[0x4];                                 // 0x9c(0x4)
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_StopMovementImmediately: public BTTaskNode
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class BTTask_StorePawnLocationInBlackboard: public BTTask_BlackboardBase
{
public:
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class BTTask_TeleportTo: public BTTask_BlackboardBase
{
public:
	bool                                                         UseNavMesh;                                        // 0x88(0x1)
	char                                                         pad0x7_Q7N4O[0x7];                                 // 0x89(0x7)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BTTask_TriggerNotification: public BTTaskNode
{
public:
	class                                                        NotificationId;                                    // 0x60(0x8)
	char                                                         pad0x8_LLE7A[0x8];                                 // 0x68(0x8)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_UnwieldCurrentWeapon: public BTTaskNode
{
public:
	bool                                                         WaitForSuccessfulUnwield;                          // 0x60(0x1)
	bool                                                         ShouldUnwieldFast;                                 // 0x61(0x1)
	char                                                         pad0x6_V9AQX[0x6];                                 // 0x62(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BurrowInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class BurrowComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NVXB1[0x8];                                 // 0xc8(0x8)
	class                                                        BurrowCrackClass;                                  // 0xd0(0x8)
	class                                                        BurrowEruptClass;                                  // 0xd8(0x8)
	float                                                        BurrowFadeoutTime;                                 // 0xe0(0x4)
	char                                                         pad0x4_Y07CG[0x4];                                 // 0xe4(0x4)
	TArray<class BurrowCrack*>                                   BurrowCracks;                                      // 0xe8(0x10)
	Class BurrowEruptBase*                                       BurrowErupt;                                       // 0xf8(0x8)
	char                                                         pad0x8_NNUTZ[0x8];                                 // 0x100(0x8)
};


// Size 0x10 (Full Size[0x520] - InheritedSize[0x510]
class ControllableAIActionSpot: public ControllableObject
{
public:
	Class AIActionSpotComponent*                                 AIActionSpotComponent;                             // 0x510(0x8)
	Class SceneComponent*                                        SceneComponent;                                    // 0x518(0x8)
};


// Size 0xe0 (Full Size[0x1a8] - InheritedSize[0xc8]
class CoralShieldVFXComponent: public ActorComponent
{
public:
	Class ParticleSystem*                                        VFXAsset;                                          // 0xc8(0x8)
	struct FName                                                 VfxSocketName;                                     // 0xd0(0x8)
	Class ParticleSystemComponent*                               SpawnedVFXSystem;                                  // 0xd8(0x8)
	byte                                                         CurrentCoralShieldRole;                            // 0xe0(0x1)
	char                                                         pad0x7_K4VL1[0x7];                                 // 0xe1(0x7)
	Class CurveFloat*                                            OffToOnCurve;                                      // 0xe8(0x8)
	float                                                        OffToOnDuration;                                   // 0xf0(0x4)
	char                                                         pad0x4_ZDWUH[0x4];                                 // 0xf4(0x4)
	Class CurveFloat*                                            OnToOffCurve;                                      // 0xf8(0x8)
	float                                                        OnToOffDuration;                                   // 0x100(0x4)
	struct FName                                                 OffToOnParamOverrideName;                          // 0x104(0x8)
	struct FName                                                 OnToOffParamOverrideName;                          // 0x10c(0x8)
	struct FName                                                 ReceiverMeshComponentName;                         // 0x114(0x8)
	struct FName                                                 CasterMeshComponentName;                           // 0x11c(0x8)
	char                                                         pad0x4_834A1[0x4];                                 // 0x124(0x4)
	TArray<class MaterialInstanceDynamic*>                       OverriddenMaterialsForReceive;                     // 0x128(0x10)
	TArray<class MaterialInstanceDynamic*>                       OverriddenMaterialsForCast;                        // 0x138(0x10)
	char                                                         pad0x60_I8E0P[0x60];                               // 0x148(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomAttitudeInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CustomSkeletonAnimationDataList: public DataAsset
{
public:
	TArray<struct CustomAnimationAssets>                         CustomAnimationAssets;                             // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class EnvQueryContext_PositionFromBlackboard: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EnvQueryContext_ContextLocationFromBlackboard: public EnvQueryContext_PositionFromBlackboard
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EnvQueryContext_HomePositionFromBlackboard: public EnvQueryContext_PositionFromBlackboard
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EnvQueryContext_KnockbackPosFromBlackboard: public EnvQueryContext_PositionFromBlackboard
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EnvQueryContext_ThrowableTargetPositionFromBlackboard: public EnvQueryContext_PositionFromBlackboard
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EnvQueryContext_SeenActors: public EnvQueryContext
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class EnvQueryContext_SeenActorsProjectedToGround: public EnvQueryContext
{
public:
	TArray<class Actor*>                                         SeenActors;                                        // 0x28(0x10)
	char                                                         pad0x20_QFXZJ[0x20];                               // 0x38(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_SpawnedForActorFromBlackboard: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_TargetActorFromBlackboard: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_TargetActorFromBlackboardPredictedLocation: public EnvQueryContext_TargetActorFromBlackboard
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_TargetActorFromParams: public EnvQueryContext
{
public:
};


// Size 0x10 (Full Size[0x68] - InheritedSize[0x58]
class EnvQueryGenerator_AIRegionLocations: public EnvQueryGenerator
{
public:
	bool                                                         UseOverrideSpawnType;                              // 0x58(0x1)
	char                                                         pad0x3_I4O9V[0x3];                                 // 0x59(0x3)
	struct FName                                                 OverrideSpawnType;                                 // 0x5c(0x8)
	char                                                         pad0x4_FRR6R[0x4];                                 // 0x64(0x4)
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class EnvQueryGenerator_FromContext: public EnvQueryGenerator
{
public:
	class                                                        Context;                                           // 0x58(0x8)
};


// Size 0xa8 (Full Size[0x140] - InheritedSize[0x98]
class EnvQueryGenerator_Line: public EnvQueryGenerator_ProjectedPoints
{
public:
	class                                                        FromContext;                                       // 0x98(0x8)
	class                                                        ToContext;                                         // 0xa0(0x8)
	Struct AIDataProviderFloatValue                              PointSpacing;                                      // 0xa8(0x30)
	Struct AIDataProviderIntValue                                NumExtraPairsOfParallelLines;                      // 0xd8(0x30)
	Struct AIDataProviderFloatValue                              ParallelLineSpacing;                               // 0x108(0x30)
	float                                                        MaxValidLineLength;                                // 0x138(0x4)
	bool                                                         ForceIncludeEndPoint;                              // 0x13c(0x1)
	bool                                                         ProjectPointsToWaterSurface;                       // 0x13d(0x1)
	char                                                         pad0x2_BK8H7[0x2];                                 // 0x13e(0x2)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class EnvQueryGenerator_PointsAtContext: public EnvQueryGenerator_ProjectedPoints
{
public:
	class                                                        Context;                                           // 0x98(0x8)
};


// Size 0xd0 (Full Size[0x168] - InheritedSize[0x98]
class EnvQueryGenerator_Sphere: public EnvQueryGenerator_ProjectedPoints
{
public:
	TArray<struct Radiuses>                                      Radiuses;                                          // 0x98(0x10)
	Struct AIDataProviderIntValue                                NumberOfVerticalCircles;                           // 0xa8(0x30)
	Struct AIDataProviderIntValue                                NumberOfHorizontalCircles;                         // 0xd8(0x30)
	bool                                                         DefineFirstPointDirection;                         // 0x108(0x1)
	char                                                         pad0x7_G9T2S[0x7];                                 // 0x109(0x7)
	Struct EnvDirection                                          FirstPointDirection;                               // 0x110(0x20)
	class                                                        Centre;                                            // 0x130(0x8)
	Struct AIDataProviderFloatValue                              ZOffsetFromCentre;                                 // 0x138(0x30)
};


// Size 0x180 (Full Size[0x218] - InheritedSize[0x98]
class EnvQueryGenerator_WaterArc: public EnvQueryGenerator_ProjectedPoints
{
public:
	class                                                        Origin;                                            // 0x98(0x8)
	Struct AIDataProviderIntValue                                NumberOfArcsToGenerate;                            // 0xa0(0x30)
	Struct AIDataProviderFloatValue                              MinArcRadius;                                      // 0xd0(0x30)
	Struct AIDataProviderFloatValue                              MaxArcRadius;                                      // 0x100(0x30)
	Struct AIDataProviderFloatValue                              MinArcTiltDegrees;                                 // 0x130(0x30)
	Struct AIDataProviderFloatValue                              MaxArcTiltDegrees;                                 // 0x160(0x30)
	Struct AIDataProviderFloatValue                              MinArcPercentage;                                  // 0x190(0x30)
	Struct AIDataProviderFloatValue                              MaxArcPercentage;                                  // 0x1c0(0x30)
	bool                                                         IncludeDirectArcToTarget;                          // 0x1f0(0x1)
	char                                                         pad0x7_RT6HR[0x7];                                 // 0x1f1(0x7)
	class                                                        DirectArcTarget;                                   // 0x1f8(0x8)
	char                                                         pad0x18_43BCR[0x18];                               // 0x200(0x18)
};


// Size 0x160 (Full Size[0x1f8] - InheritedSize[0x98]
class EnvQueryGenerator_WaterDonut: public EnvQueryGenerator_ProjectedPoints
{
public:
	Struct AIDataProviderFloatValue                              InnerRadius;                                       // 0x98(0x30)
	Struct AIDataProviderFloatValue                              OuterRadius;                                       // 0xc8(0x30)
	Struct AIDataProviderIntValue                                NumberOfRings;                                     // 0xf8(0x30)
	Struct AIDataProviderIntValue                                PointsPerRing;                                     // 0x128(0x30)
	Struct EnvDirection                                          ArcDirection;                                      // 0x158(0x20)
	Struct AIDataProviderFloatValue                              ArcAngle;                                          // 0x178(0x30)
	Struct AIDataProviderFloatValue                              ZOffsetFromCentre;                                 // 0x1a8(0x30)
	class                                                        Center;                                            // 0x1d8(0x8)
	bool                                                         bDefineArc;                                        // 0x1e0(0x1)
	bool                                                         ProjectPointsToWaterSurface;                       // 0x1e0(0x1)
	char                                                         pad0x7_80GY6[0x7];                                 // 0x1e1(0x7)
	class                                                        WaterPlaneSourceContext;                           // 0x1e8(0x8)
	bool                                                         ApplyZOffsetToProjectPoints;                       // 0x1f0(0x1)
	char                                                         pad0x7_29XKY[0x7];                                 // 0x1f1(0x7)
};


// Size 0x78 (Full Size[0x110] - InheritedSize[0x98]
class EnvQueryGenerator_WaterMultiDeckerRing: public EnvQueryGenerator_ProjectedPoints
{
public:
	Struct AIDataProviderFloatValue                              Radius;                                            // 0x98(0x30)
	TArray<struct ZOffsetOfRingsFromContext>                     ZOffsetOfRingsFromContext;                         // 0xc8(0x10)
	Struct AIDataProviderIntValue                                PointsPerRing;                                     // 0xd8(0x30)
	class                                                        Center;                                            // 0x108(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryProviderInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x1b0] - InheritedSize[0x170]
class EnvQueryTest_HasLineOfSight: public EnvQueryTest
{
public:
	byte                                                         TraceDirection;                                    // 0x170(0x1)
	char                                                         pad0x7_PV2VT[0x7];                                 // 0x171(0x7)
	class                                                        Context;                                           // 0x178(0x8)
	Struct AIDataProviderFloatValue                              RadialOffsetFromLOSEndTest;                        // 0x180(0x30)
};


// Size 0xa0 (Full Size[0x210] - InheritedSize[0x170]
class EnvQueryTest_IsAngleInRange2D: public EnvQueryTest
{
public:
	Struct EnvDirection                                          LineA;                                             // 0x170(0x20)
	Struct EnvDirection                                          LineB;                                             // 0x190(0x20)
	Struct AIDataProviderFloatValue                              MinAngleDegrees;                                   // 0x1b0(0x30)
	Struct AIDataProviderFloatValue                              MaxAngleDegrees;                                   // 0x1e0(0x30)
};


// Size 0x10 (Full Size[0x180] - InheritedSize[0x170]
class EnvQueryTest_WaterHeight: public EnvQueryTest
{
public:
	float                                                        WaterHeightCheckOffset;                            // 0x170(0x4)
	char                                                         pad0x4_RODX7[0x4];                                 // 0x174(0x4)
	class                                                        ActorWithWaterPlaneContext;                        // 0x178(0x8)
};


// Size 0x158 (Full Size[0x220] - InheritedSize[0xc8]
class HealthGemComponent: public ActorComponent
{
public:
	char                                                         pad0x138_6LJLN[0x138];                             // 0xc8(0x138)
	TArray<class MaterialInstanceDynamic*>                       OverridenMaterials;                                // 0x200(0x10)
	struct FName                                                 EmissiveMaterialParameterName;                     // 0x210(0x8)
	bool                                                         BuildMaterialMapOnBeginPlay;                       // 0x218(0x1)
	char                                                         pad0x7_PO7L5[0x7];                                 // 0x219(0x7)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsAIOfClassStatCondition: public TargetedStatCondition
{
public:
	TArray<class Class*>                                         AIClasses;                                         // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsAIOfFormStatCondition: public TargetedStatCondition
{
public:
	TArray<Assetclass AllowedAIForms>                            AllowedAIForms;                                    // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsAIOfSkillsetStatCondition: public TargetedStatCondition
{
public:
	TArray<class AthenaAIControllerParamsDataAsset*>             AISkillsets;                                       // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsAIUsingFormDataAssetStatCondition: public TargetedStatCondition
{
public:
	TArray<class AthenaAIFormDataAsset*>                         AllowedAIDataAssetForms;                           // 0x30(0x10)
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class PeriodicAINoiseEventComponent: public ActorComponent
{
public:
	struct FName                                                 NoiseTag;                                          // 0xc8(0x8)
	bool                                                         NoiseRangeBasedOnMovementSpeed;                    // 0xd0(0x1)
	char                                                         pad0x3_KQ8OL[0x3];                                 // 0xd1(0x3)
	float                                                        ConstantNoiseRange;                                // 0xd4(0x4)
	Class CurveFloat*                                            MovementSpeedToNoiseRange;                         // 0xd8(0x8)
	Class Actor*                                                 OwnerActor;                                        // 0xe0(0x8)
	char                                                         pad0x28_UGYYO[0x28];                               // 0xe8(0x28)
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class PlayerEntitlementCustomAttitudeComponent: public ActorComponent
{
public:
	char                                                         pad0x8_BD3DR[0x8];                                 // 0xc8(0x8)
	class                                                        Entitlement;                                       // 0xd0(0x8)
	byte                                                         HasEntitlementAttitude;                            // 0xd8(0x1)
	byte                                                         LacksEntitlementAttitude;                          // 0xd9(0x1)
	char                                                         pad0x6_4NAIY[0x6];                                 // 0xda(0x6)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PlayerProximityObservedSpawnContextProvider: public Object
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class SimpleAIRegion: public Object
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class SpawnContextProviderZone: public Actor
{
public:
	TArray<struct FName>                                         SpawnContextIDs;                                   // 0x3c8(0x10)
	Class BoxComponent*                                          BoundingBox;                                       // 0x3d8(0x8)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class BaseSpawnBlockingBehaviourStrategy: public SpawnerBehaviourStrategy
{
public:
};


// Size 0x10 (Full Size[0x58] - InheritedSize[0x48]
class SirenEncounterSpawnBlockingBehaviourStrategy: public BaseSpawnBlockingBehaviourStrategy
{
public:
	float                                                        ChanceToSpawn;                                     // 0x48(0x4)
	char                                                         pad0xc_QXMSE[0xc];                                 // 0x4c(0xc)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponseSetBlackboardBoolKey: public StatusResponse
{
public:
	struct FName                                                 BlackboardBoolKeyName;                             // 0x30(0x8)
	bool                                                         bValueWhenActive;                                  // 0x38(0x1)
	bool                                                         ShouldClearKeyOnEnd;                               // 0x39(0x1)
	char                                                         pad0x6_GEEUS[0x6];                                 // 0x3a(0x6)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class StatusResponseSetBlackboardClassKey: public StatusResponse
{
public:
	struct FName                                                 BlackboardClassKeyName;                            // 0x30(0x8)
	class                                                        ValueWhenActive;                                   // 0x38(0x8)
	bool                                                         SetValueOnDeactivate;                              // 0x40(0x1)
	char                                                         pad0x7_K79CW[0x7];                                 // 0x41(0x7)
	class                                                        ValueWhenDeactivated;                              // 0x48(0x8)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class StatusResponseSetBlackboardFloatKey: public StatusResponse
{
public:
	struct FName                                                 BlackboardFloatKeyName;                            // 0x30(0x8)
	float                                                        ValueWhenActive;                                   // 0x38(0x4)
	bool                                                         ShouldClearKeyOnEnd;                               // 0x3c(0x1)
	char                                                         pad0xb_WQ0OH[0xb];                                 // 0x3d(0xb)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class TinySharkLootSpawnParamsDataAsset: public DataAsset
{
public:
	float                                                        SpawnDelayAfterDeath;                              // 0x28(0x4)
	float                                                        PercentageChanceToDrop;                            // 0x2c(0x4)
	TArray<struct DeathItemSpawnDistributionOverrides>           DeathItemSpawnDistributionOverrides;               // 0x30(0x10)
	Class ShortRangeMarkerDataAsset*                             RewardMarkerDataAsset;                             // 0x40(0x8)
	bool                                                         SpawnOnStart;                                      // 0x48(0x1)
	char                                                         pad0x7_YE1TQ[0x7];                                 // 0x49(0x7)
	Struct ItemSpawnParams                                       SpawnParams;                                       // 0x50(0x28)
	Class WeightedItemDescSpawnDataAsset*                        ReferencedSpawnDistributionAsset;                  // 0x78(0x8)
	TArray<struct SpawnTransforms>                               SpawnTransforms;                                   // 0x80(0x10)
	TArray<struct SpawnTransformsWithRandomQuantities>           SpawnTransformsWithRandomQuantities;               // 0x90(0x10)
	byte                                                         SpawnSource;                                       // 0xa0(0x1)
	char                                                         pad0x3_GHZVF[0x3];                                 // 0xa1(0x3)
	float                                                        SpawnRate;                                         // 0xa4(0x4)
	bool                                                         DestroyProxiesOnEndPlay;                           // 0xa8(0x1)
	bool                                                         SpawnWithPhysicsEnabled;                           // 0xa9(0x1)
	bool                                                         DoNotAttachToOwnerWhenSpawned;                     // 0xaa(0x1)
	bool                                                         DropItemsOnSpawn;                                  // 0xab(0x1)
	bool                                                         DropItemsUsingPriorityAIDropParams;                // 0xac(0x1)
	char                                                         pad0x3_ZW8RB[0x3];                                 // 0xad(0x3)
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class VulnerabilityDuringAIStrategyComponent: public ActorComponent
{
public:
	TArray<struct StrategyVulnerabilities>                       StrategyVulnerabilities;                           // 0xc8(0x10)
	Class HealthComponent*                                       HealthComponent;                                   // 0xd8(0x8)
	char                                                         pad0x80_Z6XXA[0x80];                               // 0xe0(0x80)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class WaterbasedAISupplier: public Actor
{
public:
	Class AISpawnerList*                                         Spawners;                                          // 0x3c8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIDialogueStateProviderInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SimpleDialogueStateProvider: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BountySpawnerAudioZonesInterface: public Interface
{
public:
};


// Size 0x1c0 (Full Size[0x5f8] - InheritedSize[0x438]
class AIBountySpawner: public AISpawner
{
public:
	float                                                        MaximumDistanceToPerceiveOnSpawnsAfterFirstGroup;  // 0x438(0x4)
	char                                                         pad0x4_UNVHX[0x4];                                 // 0x43c(0x4)
	TArray<struct WaveGroups>                                    WaveGroups;                                        // 0x440(0x10)
	Struct StringAssetReference                                  TeamColor;                                         // 0x450(0x10)
	Struct WeightedProbabilityRange                              WavesPerRelocate;                                  // 0x460(0x20)
	Struct WeightedProbabilityRange                              WaveSplitChance;                                   // 0x480(0x20)
	TArray<Float WaveSuicideTime>                                WaveSuicideTime;                                   // 0x4a0(0x10)
	float                                                        WaveSuicideMinDist;                                // 0x4b0(0x4)
	bool                                                         ImmediatelyPerceiveTargets;                        // 0x4b4(0x1)
	bool                                                         DynamicallyCreateWaveDelays;                       // 0x4b5(0x1)
	char                                                         pad0x2_MT6VI[0x2];                                 // 0x4b6(0x2)
	float                                                        DynamicMinTimeBetweenSpawns;                       // 0x4b8(0x4)
	float                                                        DynamicMaxTimeBetweenSpawns;                       // 0x4bc(0x4)
	Class AICombatDialogue*                                      ActiveCombatDialogue;                              // 0x4c0(0x8)
	char                                                         pad0x28_LS4A5[0x28];                               // 0x4c8(0x28)
	TArray<class Actor*>                                         CrewMembers;                                       // 0x4f0(0x10)
	TArray<class Actor*>                                         NonCrewMembersInRegion;                            // 0x500(0x10)
	TArray<class PlayerController*>                              AllPlayersThatParticipated;                        // 0x510(0x10)
	TArray<class Actor*>                                         AllCurrentlyParticipatingPlayers;                  // 0x520(0x10)
	TArray<class Actor*>                                         AllCurrentlyParticipatingShips;                    // 0x530(0x10)
	Class OverlapTriggerComponent*                               AudioZoneTriggerComponent;                         // 0x540(0x8)
	char                                                         pad0xb0_KCEXM[0xb0];                               // 0x548(0xb0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PostBountyAIPawnSpawnedAction: public DataAsset
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ApplyNameplateToBountyWaveSpawnedAction: public PostBountyAIPawnSpawnedAction
{
public:
	Struct FText                                                 AIName;                                            // 0x28(0x38)
};


// Size 0x148 (Full Size[0x580] - InheritedSize[0x438]
class AIFaunaSpawner: public AISpawner
{
public:
	Struct AIFaunaSpawnerWave                                    FaunaWave;                                         // 0x438(0x110)
	char                                                         pad0x10_PUH50[0x10];                               // 0x548(0x10)
	Class Actor*                                                 FaunaLeader;                                       // 0x558(0x8)
	char                                                         pad0x10_9GCY0[0x10];                               // 0x560(0x10)
	TArray<class Actor*>                                         PlayersInSpawnArea;                                // 0x570(0x10)
};


// Size 0x1c8 (Full Size[0xb28] - InheritedSize[0x960]
class AthenaFaunaAIController: public AthenaAIController
{
public:
	float                                                        MaxTimeBetweenThreatDetermination;                 // 0x960(0x4)
	float                                                        DefaultControlRotationInterpSpeed;                 // 0x964(0x4)
	TArray<struct StrategyControllerMovementMods>                StrategyControllerMovementMods;                    // 0x968(0x10)
	float                                                        MinAgentHalfHeightPctOverride;                     // 0x978(0x4)
	char                                                         pad0x4_U97IF[0x4];                                 // 0x97c(0x4)
	Class FaunaAIContollerParamsDataAsset*                       FaunaDataAsset;                                    // 0x980(0x8)
	Class Actor*                                                 CarrierActor;                                      // 0x988(0x8)
	char                                                         pad0xc8_FRQ1K[0xc8];                               // 0x990(0xc8)
	Class Actor*                                                 HighestDangerActor;                                // 0xa58(0x8)
	char                                                         pad0x98_WAEYV[0x98];                               // 0xa60(0x98)
	Class FaunaAIPlayerTracker*                                  PlayerTracker;                                     // 0xaf8(0x8)
	char                                                         pad0x28_4YP66[0x28];                               // 0xb00(0x28)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CatchFaunaConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_LeaderFromBlackboard: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_Threat: public EnvQueryContext
{
public:
};


// Size 0x3d0 (Full Size[0xbe0] - InheritedSize[0x810]
class Fauna: public AICreatureCharacter
{
public:
	char                                                         pad0x8_GD7RZ[0x8];                                 // 0x810(0x8)
	Struct FText                                                 DisplayName;                                       // 0x818(0x38)
	class                                                        FaunaSpecies;                                      // 0x850(0x8)
	class                                                        FaunaBreed;                                        // 0x858(0x8)
	Struct Vector                                                HeadOffset;                                        // 0x860(0xc)
	Struct Vector                                                MountedScale;                                      // 0x86c(0xc)
	float                                                        NearToSurfaceDistance;                             // 0x878(0x4)
	float                                                        StartDrowningTimePercentage;                       // 0x87c(0x4)
	float                                                        DrowningDeathTimeMin;                              // 0x880(0x4)
	float                                                        DrowningDeathTimeMax;                              // 0x884(0x4)
	float                                                        PercentageStarvedToChangeAnimation;                // 0x888(0x4)
	float                                                        FadeOutTime;                                       // 0x88c(0x4)
	Class Object*                                                HitImpactParticleSystem;                           // 0x890(0x8)
	Class Object*                                                DeathParticleSystem;                               // 0x898(0x8)
	Class Object*                                                PutInCrateParticleSystem;                          // 0x8a0(0x8)
	Class WwiseEvent*                                            PutInCrateSoundCue;                                // 0x8a8(0x8)
	Class WwiseEvent*                                            TookDamageSoundCue;                                // 0x8b0(0x8)
	Class WwiseEvent*                                            AgitationStartedSoundCue;                          // 0x8b8(0x8)
	Class WwiseEvent*                                            AgitationStoppedSoundCue;                          // 0x8c0(0x8)
	Class WwiseEvent*                                            CalmStartedSoundCue;                               // 0x8c8(0x8)
	Class WwiseEvent*                                            CalmStoppedSoundCue;                               // 0x8d0(0x8)
	Class Object*                                                BreathBubblesParticleSystem;                       // 0x8d8(0x8)
	struct FName                                                 BreathBubblesSocketName;                           // 0x8e0(0x8)
	struct FName                                                 UnderwaterRTPCName;                                // 0x8e8(0x8)
	Class ForceFeedbackEffect*                                   OnFeedingForceFeedbackEffect;                      // 0x8f0(0x8)
	Class MountableComponent*                                    MountableComponent;                                // 0x8f8(0x8)
	Class HealthComponent*                                       HealthComponent;                                   // 0x900(0x8)
	Class DamageableComponent*                                   DamageableComponent;                               // 0x908(0x8)
	Class PrimitiveComponent*                                    AttackHitVolume;                                   // 0x910(0x8)
	Class FaunaAnimationData*                                    Animations;                                        // 0x918(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x920(0x8)
	Class LightWeightStatusEffectManagerComponent*               StatusEffectManagerComponent;                      // 0x928(0x8)
	Class AthenaAIControllerParamsDataAsset*                     AIControllerParamsWhenInCrate;                     // 0x930(0x8)
	Class PeriodicAINoiseEventComponent*                         PeriodicAINoiseEventComponent;                     // 0x938(0x8)
	int                                                          AgitationResponseChance;                           // 0x960(0x4)
	int                                                          AgitationResponseTestFrequencyMin;                 // 0x964(0x4)
	int                                                          AgitationResponseTestFrequencyMax;                 // 0x968(0x4)
	int                                                          MaxNumFailedAgitationResponseTests;                // 0x96c(0x4)
	float                                                        AgitationResponseVFXDelay;                         // 0x970(0x4)
	float                                                        AgitationResponseRange;                            // 0x974(0x4)
	Class Object*                                                AgitationResponseParticleSystem;                   // 0x978(0x8)
	float                                                        AgitationResponseRangeParticleSystemAngle;         // 0x980(0x4)
	byte                                                         AgitationCollisionChannel;                         // 0x984(0x1)
	bool                                                         StopMovementWhenAgitated;                          // 0x985(0x1)
	char                                                         pad0x2_VI68Q[0x2];                                 // 0x986(0x2)
	float                                                        ApproximateSpitTravelTime;                         // 0x988(0x4)
	bool                                                         StopMovementWhenCalm;                              // 0x98c(0x1)
	char                                                         pad0x3_3MVWS[0x3];                                 // 0x98d(0x3)
	float                                                        TurningSpringAcceleration;                         // 0x990(0x4)
	float                                                        TurningSpringMaxVelocity;                          // 0x994(0x4)
	float                                                        TurnResetDelay;                                    // 0x998(0x4)
	Struct Vector                                                PivotPointOffset;                                  // 0x99c(0xc)
	bool                                                         ShouldTurn;                                        // 0x9a8(0x1)
	char                                                         pad0x7_DYZ21[0x7];                                 // 0x9a9(0x7)
	Class FeedingComponent*                                      FeedingComponent;                                  // 0x9b0(0x8)
	Class FaunaMovementComponent*                                FaunaMovementComponent;                            // 0x9b8(0x8)
	float                                                        TimeUntilDrowned;                                  // 0x9c0(0x4)
	int                                                          RandomAnimationSeed;                               // 0x9c4(0x4)
	char                                                         pad0xc_LF64J[0xc];                                 // 0x9c8(0xc)
	bool                                                         Drowned;                                           // 0x9d4(0x1)
	char                                                         pad0x2_1PXGQ[0x2];                                 // 0x9d5(0x2)
	byte                                                         CratedState;                                       // 0x9d7(0x1)
	byte                                                         InWaterState;                                      // 0x9d8(0x1)
	char                                                         pad0x7_519JO[0x7];                                 // 0x9d9(0x7)
	Class Actor*                                                 Crate;                                             // 0x9e0(0x8)
	Class ParticleSystemComponent*                               BreathBubblesParticleSystemComponent;              // 0x9e8(0x8)
	float                                                        DrowningDeathTime;                                 // 0x9f0(0x4)
	bool                                                         IsPlayingStarvingAnim;                             // 0x9f4(0x1)
	bool                                                         IsAgitated;                                        // 0x9f5(0x1)
	bool                                                         IsCalm;                                            // 0x9f6(0x1)
	char                                                         pad0x1_W9C9L[0x1];                                 // 0x9f7(0x1)
	float                                                        TargetTurnAngle;                                   // 0x9f8(0x4)
	char                                                         pad0x14c_ZY6PD[0x14c];                             // 0x9fc(0x14c)
	Class VenomComponent*                                        VenomComponent;                                    // 0xb48(0x8)
	Class AthenaAICharacterPathFollowingComponent*               PathFollowingComponent;                            // 0xb50(0x8)
	Class Actor*                                                 CurrentShip;                                       // 0xb58(0x8)
	char                                                         pad0x80_FM21G[0x80];                               // 0xb60(0x80)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class FaunaAIPlayerTracker: public AIPlayerTracker
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FaunaAnimationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x660] - InheritedSize[0x660]
class FaunaMovementComponent: public AICreatureCharacterMovementComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class MerchantCrateMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x100 (Full Size[0xa60] - InheritedSize[0x960]
class AthenaSwimmingAIController: public AthenaAIController
{
public:
	Class SwimmingPathFollowingComponent*                        SwimmingPathFollowingComponent;                    // 0x960(0x8)
	bool                                                         IgnoreTargetsOutOfWater;                           // 0x968(0x1)
	char                                                         pad0x7_1O8IO[0x7];                                 // 0x969(0x7)
	Class CurveFloat*                                            DistOfAttackerVsChanceToPursue;                    // 0x970(0x8)
	TArray<struct FName>                                         TimersToZeroIfStartingRevengeAttack;               // 0x978(0x10)
	struct FName                                                 DespawnRequiredBlackboardKey;                      // 0x988(0x8)
	struct FName                                                 DespawnRequiredReasonBlackboardKey;                // 0x990(0x8)
	float                                                        PathingFailedWeight;                               // 0x998(0x4)
	float                                                        PathingFailedThresholdToDespawn;                   // 0x99c(0x4)
	char                                                         pad0xc0_SMVOG[0xc0];                               // 0x9a0(0xc0)
};


// Size 0x8 (Full Size[0x70] - InheritedSize[0x68]
class BTDecorator_NearSurfaceOfWater: public BTDecorator
{
public:
	float                                                        DistanceFromSurface;                               // 0x68(0x4)
	bool                                                         ReverseLogic;                                      // 0x6c(0x1)
	char                                                         pad0x3_N3NF5[0x3];                                 // 0x6d(0x3)
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class BTService_SetFloatToTheSurfaceWhileInBranch: public BTService
{
public:
	bool                                                         FloatToTheSurfaceWhileInBranch;                    // 0x70(0x1)
	char                                                         pad0x7_8Z5NB[0x7];                                 // 0x71(0x7)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetFloatToTheSurface: public BTTaskNode
{
public:
	bool                                                         ShouldFloatToTheSurface;                           // 0x60(0x1)
	char                                                         pad0x7_4N1QH[0x7];                                 // 0x61(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimmingCreatureMovementAnimationInterface: public Interface
{
public:
};


// Size 0x138 (Full Size[0x200] - InheritedSize[0xc8]
class SwimmingPathFollowingComponent: public ActorComponent
{
public:
	float                                                        DirectSwimmingDotToTarget;                         // 0xc8(0x4)
	float                                                        ArcToTargetDotToTarget;                            // 0xcc(0x4)
	float                                                        MaxTargetPitchFactor;                              // 0xd0(0x4)
	float                                                        MinPosDeltaSqToRepathToMovingTarget;               // 0xd4(0x4)
	float                                                        MinPosDeltaSqToInvalidateFixedLocation;            // 0xd8(0x4)
	float                                                        PitchBezierControlPointsLengthFactor;              // 0xdc(0x4)
	float                                                        TimeMovingAwayFromTargetPosToFlagFailure;          // 0xe0(0x4)
	struct FName                                                 LineOfSightCollisionProfile;                       // 0xe4(0x8)
	float                                                        LineOfSightSphereCastRadius;                       // 0xec(0x4)
	float                                                        LineOfSightCheckInterval;                          // 0xf0(0x4)
	float                                                        FirstLoSTriggerTimeInNewPath;                      // 0xf4(0x4)
	float                                                        FirstLoSTriggerTimeInRePath;                       // 0xf8(0x4)
	bool                                                         DrawDebugOnServer;                                 // 0xfc(0x1)
	char                                                         pad0x3_ZFN0Z[0x3];                                 // 0xfd(0x3)
	TArray<Byte CollisionTypesToDoPathUpdate>                    CollisionTypesToDoPathUpdate;                      // 0x100(0x10)
	Class SwimmingCreatureMovementComponent*                     MovementComponent;                                 // 0x110(0x8)
	Class AthenaSwimmingAIController*                            SwimmingAIController;                              // 0x118(0x8)
	byte                                                         ArcFollowingMode;                                  // 0x120(0x1)
	char                                                         pad0x57_63N3V[0x57];                               // 0x121(0x57)
	Class Actor*                                                 TargetActor;                                       // 0x178(0x8)
	char                                                         pad0x80_HKJML[0x80];                               // 0x180(0x80)
};


// Size 0x78 (Full Size[0x100] - InheritedSize[0x88]
class BTTask_SwimTo: public BTTask_BlackboardBase
{
public:
	bool                                                         WantsToReportPathFailure;                          // 0x88(0x1)
	char                                                         pad0x7_LSF5J[0x7];                                 // 0x89(0x7)
	Struct BlackboardKeySelector                                 PathFailureCounter;                                // 0x90(0x28)
	float                                                        AcceptableRadius;                                  // 0xb8(0x4)
	byte                                                         GoalCheckMode;                                     // 0xbc(0x1)
	byte                                                         ArcMode;                                           // 0xbd(0x1)
	byte                                                         ArcToTargetDirection;                              // 0xbe(0x1)
	byte                                                         Swim3DCrestingReaction;                            // 0xbf(0x1)
	Struct SpatialOffset                                         OffsetFromTargetActor;                             // 0xc0(0x8)
	byte                                                         SwimSyncMode;                                      // 0xc8(0x1)
	bool                                                         TrackTargetActor;                                  // 0xc9(0x1)
	char                                                         pad0x6_UM069[0x6];                                 // 0xca(0x6)
	Struct BlackboardKeySelector                                 TrackedTargetActorKey;                             // 0xd0(0x28)
	float                                                        TimeToSlowDownAndStop;                             // 0xf8(0x4)
	byte                                                         LineOfSightTestMode;                               // 0xfc(0x1)
	char                                                         pad0x3_VTVL4[0x3];                                 // 0xfd(0x3)
};


// Size 0x10 (Full Size[0x98] - InheritedSize[0x88]
class BTTask_SwimTurnOnTheSpot: public BTTask_BlackboardBase
{
public:
	float                                                        MaxTurnSpringAccel;                                // 0x88(0x4)
	float                                                        TimeUntilMaxTurnSpringAccel;                       // 0x8c(0x4)
	float                                                        AngleDeltaToAcceptFinalRotation;                   // 0x90(0x4)
	float                                                        Timeout;                                           // 0x94(0x4)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestGetTinySharkExperienceParticipatingCrews: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class TaleQuestGetTinySharkExperienceParticipatingCrewsDesc: public TaleQuestStepDesc
{
public:
	Class TinySharkExperience*                                   TinySharkExperience;                               // 0x80(0x8)
	Struct QuestVariableGuidArray                                ParticipatingCrews;                                // 0x88(0x30)
};


// Size 0x80 (Full Size[0x118] - InheritedSize[0x98]
class TaleQuestGetTinySharkPawn: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class TaleQuestGetTinySharkPawnDesc: public TaleQuestStepDesc
{
public:
	Class TinySharkExperience*                                   TinySharkExperience;                               // 0x80(0x8)
	Struct QuestVariableSharkPawn                                TinySharkPawn;                                     // 0x88(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestStartTinySharkExperienceStep: public TaleQuestStep
{
public:
};


// Size 0x78 (Full Size[0xd8] - InheritedSize[0x60]
class TaleQuestTinySharkService: public TaleQuestService
{
public:
	TArray<class TinySharkExperience*>                           ActiveExperiences;                                 // 0x60(0x10)
	char                                                         pad0x68_IOZ70[0x68];                               // 0x70(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestTinySharkServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x140 (Full Size[0x1c0] - InheritedSize[0x80]
class TaleQuestStartTinySharkExperienceStepDesc: public TaleQuestStepDesc
{
public:
	Struct Vector                                                SpawnLocation;                                     // 0x80(0xc)
	int                                                          PartIndex;                                         // 0x8c(0x4)
	Struct TinySharkParams                                       TinySharkParams;                                   // 0x90(0xc8)
	Class Ship*                                                  TargetShip;                                        // 0x178(0x8)
	Class TaleQuestTinySharkExperienceTracker*                   ExperienceTracker;                                 // 0x180(0x8)
	bool                                                         FireTinySharkVariantDefeatedStats;                 // 0x188(0x1)
	char                                                         pad0x7_MKSK1[0x7];                                 // 0x189(0x7)
	Struct QuestVariableTinySharkExperience                      TinySharkExperience;                               // 0x190(0x30)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class TaleQuestTinySharkExperienceTracker: public Object
{
public:
	char                                                         pad0x38_0JZJR[0x38];                               // 0x28(0x38)
	float                                                        UpdateFrequency;                                   // 0x60(0x4)
	char                                                         pad0xc_4STGZ[0xc];                                 // 0x64(0xc)
};


// Size 0xc0 (Full Size[0x130] - InheritedSize[0x70]
class TaleQuestShroudedDeepSGExperienceTracker: public TaleQuestTinySharkExperienceTracker
{
public:
	Struct Vector2D                                              TrackingLocation;                                  // 0x70(0x8)
	float                                                        InnerSafezoneRadius;                               // 0x78(0x4)
	float                                                        TargetWeightSloop;                                 // 0x7c(0x4)
	float                                                        TargetWeightBrig;                                  // 0x80(0x4)
	float                                                        TargetWeightGaleon;                                // 0x84(0x4)
	float                                                        ExperienceRadiusConsiderationRatio;                // 0x88(0x4)
	float                                                        ShipInsideExperiencePreference;                    // 0x8c(0x4)
	float                                                        ShipNearExperiencePreference;                      // 0x90(0x4)
	float                                                        ShipNearKillerWhalePreference;                     // 0x94(0x4)
	Struct WeightedProbabilityRangeOfRanges                      ForceRetargetFrequency;                            // 0x98(0x30)
	char                                                         pad0x68_I21Z6[0x68];                               // 0xc8(0x68)
};


// Size 0x140 (Full Size[0x208] - InheritedSize[0xc8]
class TinySharkTelemetryComponent: public ActorComponent
{
public:
};


// Size 0x538 (Full Size[0x900] - InheritedSize[0x3c8]
class TinySharkExperience: public Actor
{
public:
	char                                                         pad0x10_CB4J4[0x10];                               // 0x3c8(0x10)
	float                                                        RelevancyDistance;                                 // 0x3d8(0x4)
	float                                                        TrackingMovementCheckInterval;                     // 0x3dc(0x4)
	Class EnvQuery*                                              TrackingMovementValidQuery;                        // 0x3e0(0x8)
	bool                                                         ShouldBlockMigrationForAllAttackingCrewsFromAnyDistance; // 0x3e8(0x1)
	char                                                         pad0xa7_OKICL[0xa7];                               // 0x3e9(0xa7)
	Class AIOnDemandSpawner*                                     TinySharkSpawner;                                  // 0x490(0x8)
	Class SharkPawn*                                             TinySharkPawn;                                     // 0x498(0x8)
	struct FName                                                 HealthRTPC;                                        // 0x4a0(0x8)
	char                                                         pad0x8_MZ7UL[0x8];                                 // 0x4a8(0x8)
	Struct TinySharkParams                                       Params;                                            // 0x4b0(0xc8)
	Class TinySharkTelemetryComponent*                           TinySharkTelemetryComponent;                       // 0x578(0x8)
	Class AIItemSpawnComponent*                                  LootItemSpawnComponent;                            // 0x580(0x8)
	Class AIItemSpawnComponent*                                  FoodItemSpawnComponent;                            // 0x588(0x8)
	Class Ship*                                                  TrackedShip;                                       // 0x590(0x8)
	char                                                         pad0x90_7Y5L2[0x90];                               // 0x598(0x90)
	Struct EncounterParams                                       SightingEncounterParams;                           // 0x628(0xc)
	Struct EncounterParams                                       CloseEncounterParams;                              // 0x634(0xc)
	char                                                         pad0x168_G8EHB[0x168];                             // 0x640(0x168)
	TArray<class AIItemSpawnComponent*>                          ItemSpawnComps;                                    // 0x7a8(0x10)
	char                                                         pad0x108_GFU89[0x108];                             // 0x7b8(0x108)
	char                                                         pad0x40_6GDR2[0x40];                               // 0x8c0(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkLootSpawnParamsInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class TinySharkParamsDataAsset: public DataAsset
{
public:
	Struct TinySharkParams                                       Params;                                            // 0x28(0xc8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkServiceInterface: public Interface
{
public:
};


// Size 0x1c8 (Full Size[0x590] - InheritedSize[0x3c8]
class TinySharkService: public Actor
{
public:
	char                                                         pad0x10_AT0TP[0x10];                               // 0x3c8(0x10)
	Class TinySharkServiceParamsDataAsset*                       TinySharkServiceParams;                            // 0x3d8(0x8)
	char                                                         pad0x170_RMTSH[0x170];                             // 0x3e0(0x170)
	TArray<class TinySharkExperience*>                           TinySharkExperiences;                              // 0x550(0x10)
	TArray<class TinySharkExperience*>                           ExternallyManagedTinySharkExperiences;             // 0x560(0x10)
	char                                                         pad0x20_SXOI8[0x20];                               // 0x570(0x20)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class TinySharkServiceParamsDataAsset: public DataAsset
{
public:
	Struct TinySharkServiceParams                                Params;                                            // 0x28(0x28)
	int                                                          MaxNumTinySharkExperiences;                        // 0x50(0x4)
	char                                                         pad0x4_RPF8W[0x4];                                 // 0x54(0x4)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class AIDebugSpawnActor: public Actor
{
public:
	Struct AthenaAIDebugCostDisplay                              DebugCostDisplay;                                  // 0x3c8(0x1)
	char                                                         pad0x7_0QYYM[0x7];                                 // 0x3c9(0x7)
	TArray<struct SpawnConfigList>                               SpawnConfigList;                                   // 0x3d0(0x10)
	int                                                          Seed;                                              // 0x3e0(0x4)
	char                                                         pad0x4_LXARK[0x4];                                 // 0x3e4(0x4)
	TArray<class Pawn*>                                          SpawnedAIList;                                     // 0x3e8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAIDebugFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class DebugAISpawnerCreator: public Actor
{
public:
	Class AISpawner*                                             SpawnerTemplate;                                   // 0x3c8(0x8)
	float                                                        TriggerRadius;                                     // 0x3d0(0x4)
	char                                                         pad0x4_ZR6NS[0x4];                                 // 0x3d4(0x4)
	Class AISpawner*                                             Spawner;                                           // 0x3d8(0x8)
	Class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x3e0(0x8)
	Class SimpleAIRegion*                                        Region;                                            // 0x3e8(0x8)
	char                                                         pad0x30_2ESN4[0x30];                               // 0x3f0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIDioramaLocationSourceInterface: public Interface
{
public:
};


// Size 0x248 (Full Size[0x610] - InheritedSize[0x3c8]
class AIDiorama: public Actor
{
public:
	char                                                         pad0x8_M7N99[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        SceneComponent;                                    // 0x3d0(0x8)
	Class SceneDialogueCoordinator*                              SpawnedDialogueCoordinator;                        // 0x3d8(0x8)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x3e0(0x8)
	TArray<struct LinkedActors>                                  LinkedActors;                                      // 0x3e8(0x10)
	char                                                         pad0x218_S7E7U[0x218];                             // 0x3f8(0x218)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIDioramaCategory: public Object
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class AIDioramaController: public Object
{
public:
	char                                                         pad0x8_0RWUE[0x8];                                 // 0x28(0x8)
	Class AIDioramaDesc*                                         AIDioramaDesc;                                     // 0x30(0x8)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x38(0x8)
	TArray<struct SpawnedDioramaPawns>                           SpawnedDioramaPawns;                               // 0x40(0x10)
	Class AIDiorama*                                             AIDiorama;                                         // 0x50(0x8)
	Class AISpawner*                                             Spawner;                                           // 0x58(0x8)
	char                                                         pad0x48_JRBFI[0x48];                               // 0x60(0x48)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIDioramaDesc: public DataAsset
{
public:
	TArray<struct RoleList>                                      RoleList;                                          // 0x28(0x10)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x38(0x8)
};


// Size 0x90 (Full Size[0x370] - InheritedSize[0x2e0]
class AIDioramaLocationSourceComponent: public SceneComponent
{
public:
	char                                                         pad0x10_2WOGZ[0x10];                               // 0x2e0(0x10)
	TArray<struct DioramaRelativeLocations>                      DioramaRelativeLocations;                          // 0x2f0(0x10)
	float                                                        DialogueTriggerRadius;                             // 0x300(0x4)
	float                                                        DialogueSubtitleBuffer;                            // 0x304(0x4)
	float                                                        AISenseRadiusForDebugDisplay;                      // 0x308(0x4)
	char                                                         pad0x4_CXHCX[0x4];                                 // 0x30c(0x4)
	TArray<class Class*>                                         Categories;                                        // 0x310(0x10)
	struct FName                                                 FeatureToggle;                                     // 0x320(0x8)
	Struct Color                                                 DebugTriggerRadiusColor;                           // 0x328(0x4)
	Struct Color                                                 DebugSubtitleRadiusColor;                          // 0x32c(0x4)
	Struct Color                                                 AISenseRadiusColor;                                // 0x330(0x4)
	char                                                         pad0x4_8OWZ4[0x4];                                 // 0x334(0x4)
	Class SphereComponent*                                       DialogueTriggerRadiusSphere;                       // 0x338(0x8)
	Class SphereComponent*                                       DialogueSubtitleRadiusSphere;                      // 0x340(0x8)
	Class SphereComponent*                                       AISenseRadiusSphere;                               // 0x348(0x8)
	char                                                         pad0x20_SZ97R[0x20];                               // 0x350(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIDioramaServiceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x430] - InheritedSize[0x3c8]
class AIDioramaService: public Actor
{
public:
};


// Size 0x18 (Full Size[0x438] - InheritedSize[0x420]
class DebugDioramaCreator: public DebugAISpawnerCreator
{
public:
	Class AIDioramaDesc*                                         AIDioramaDesc;                                     // 0x420(0x8)
	Class AIDioramaLocationSourceComponent*                      Location;                                          // 0x428(0x8)
	Class AIDioramaController*                                   AIDioramaController;                               // 0x430(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InDioramaAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x20 (Full Size[0x4c0] - InheritedSize[0x4a0]
class PetNameplateComponent: public AINameplateComponent
{
public:
	char                                                         pad0x8_PXBAU[0x8];                                 // 0x4a0(0x8)
	Struct FString                                               DefaultPetName;                                    // 0x4a8(0x10)
	char                                                         pad0x8_3M530[0x8];                                 // 0x4b8(0x8)
};


// Size 0x4c0 (Full Size[0xcd0] - InheritedSize[0x810]
class Pet: public AICreatureCharacter
{
public:
	char                                                         pad0xb0_ZCFI0[0xb0];                               // 0x810(0xb0)
	Class PetWieldableReactMappingsDataAsset*                    WieldableReactMappingsAsset;                       // 0x8c0(0x8)
	float                                                        MaxVelocityForLocomotionAnimation;                 // 0x8c8(0x4)
	bool                                                         CanFly;                                            // 0x8cc(0x1)
	char                                                         pad0x3_Z9E8B[0x3];                                 // 0x8cd(0x3)
	TArray<struct FlyingStrategyProperties>                      FlyingStrategyProperties;                          // 0x8d0(0x10)
	float                                                        FlyingLandTime;                                    // 0x8e0(0x4)
	char                                                         pad0x4_8Q4MV[0x4];                                 // 0x8e4(0x4)
	Class CurveFloat*                                            FlyingLandCurve;                                   // 0x8e8(0x8)
	float                                                        FlyingTakeOffTime;                                 // 0x8f0(0x4)
	char                                                         pad0x4_4U8B8[0x4];                                 // 0x8f4(0x4)
	Class CurveFloat*                                            FlyingTakeOffCurve;                                // 0x8f8(0x8)
	Struct FloatRange                                            MidFlightAdjustmentTimerRange;                     // 0x900(0x10)
	Class CurveFloat*                                            MidFlightAdjustmentCurve;                          // 0x910(0x8)
	Class CurveFloat*                                            MidFlightTimeToDistanceAdjustmentCurve;            // 0x918(0x8)
	struct FName                                                 FiredFromActorCollision;                           // 0x920(0x8)
	Class WwiseEvent*                                            FiredFromActorSFX;                                 // 0x928(0x8)
	Class PetDitherComponent*                                    DitherComponent;                                   // 0x930(0x8)
	float                                                        MinimumDamageForHealthReact;                       // 0x938(0x4)
	float                                                        MaxDistForWaterBucketToClean;                      // 0x93c(0x4)
	float                                                        MinimumDurationUntilPetCanDespawnConcealed;        // 0x940(0x4)
	float                                                        DefaultNamePlateHeight;                            // 0x944(0x4)
	float                                                        AlternateNamePlateHeight;                          // 0x948(0x4)
	char                                                         pad0x4_9JVPK[0x4];                                 // 0x94c(0x4)
	TArray<Byte StatesToUseAlternateNamePlatePos>                StatesToUseAlternateNamePlatePos;                  // 0x950(0x10)
	Struct FloatRange                                            PetTimeSpentSad;                                   // 0x960(0x10)
	byte                                                         DebugStateDescriptor;                              // 0x970(0x1)
	char                                                         pad0x7_XYPDB[0x7];                                 // 0x971(0x7)
	Class PetNameplateComponent*                                 AINameplateComponent;                              // 0x978(0x8)
	Class FeedingComponent*                                      FeedingComponent;                                  // 0x980(0x8)
	Class StarvingComponent*                                     StarvingComponent;                                 // 0x988(0x8)
	Class CleanlinessComponent*                                  CleanlinessComponent;                              // 0x990(0x8)
	Class CannonSquashComponent*                                 CannonSquashComponent;                             // 0x998(0x8)
	Struct PetMovementRequest                                    ReplicatedMovementRequest;                         // 0x9a0(0xc)
	float                                                        TargetMeshRoll;                                    // 0x9ac(0x4)
	char                                                         pad0x10_7J7CI[0x10];                               // 0x9b0(0x10)
	float                                                        DefaultShipTurnRateModifier;                       // 0x9c0(0x4)
	char                                                         pad0x4_98BXZ[0x4];                                 // 0x9c4(0x4)
	TArray<struct TurnRateModifierList>                          TurnRateModifierList;                              // 0x9c8(0x10)
	TArray<Byte LocomotingMovementStates>                        LocomotingMovementStates;                          // 0x9d8(0x10)
	TArray<Byte RequestIdleOrMovementValidMovementStates>        RequestIdleOrMovementValidMovementStates;          // 0x9e8(0x10)
	float                                                        MaxRollAngle;                                      // 0x9f8(0x4)
	float                                                        DelayForDisablingMovementOnIdle;                   // 0x9fc(0x4)
	float                                                        IslandDustRatePerSecond;                           // 0xa00(0x4)
	Struct Guid                                                  CrewId;                                            // 0xa04(0x10)
	bool                                                         InHangout;                                         // 0xa14(0x1)
	bool                                                         PerchedInHangout;                                  // 0xa15(0x1)
	bool                                                         ResetRollAndZOffset;                               // 0xa16(0x1)
	bool                                                         ShouldIgnoreTooltipDisplayOffset;                  // 0xa17(0x1)
	char                                                         pad0x8_BMAOF[0x8];                                 // 0xa18(0x8)
	Struct PetTurnToFaceData                                     PetTurnToFaceData;                                 // 0xa20(0x20)
	float                                                        MaximumSubmergedWaterDepthBeforeDespawn;           // 0xa40(0x4)
	char                                                         pad0x24_8PYWP[0x24];                               // 0xa44(0x24)
	Class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0xa68(0x8)
	Class PetPartCustomisationComponent*                         PetPartCustomisationComponent;                     // 0xa70(0x8)
	Class LightWeightStatusEffectManagerComponent*               LightWeightStatusEffectManagerComponent;           // 0xa78(0x8)
	Class PetTelemetryComponent*                                 TelemetryComponent;                                // 0xa80(0x8)
	Class PetSicknessComponent*                                  SicknessComponent;                                 // 0xa88(0x8)
	Class WaterExposureComponent*                                WaterExposureComponent;                            // 0xa90(0x8)
	Class AnimationDataStoreComponent*                           AnimationDataStoreComponent;                       // 0xa98(0x8)
	Class Actor*                                                 SpawnedForShip;                                    // 0xaa0(0x8)
	Class Actor*                                                 PetOwner;                                          // 0xaa8(0x8)
	Class ItemInfo*                                              PetInfo;                                           // 0xab0(0x8)
	char                                                         pad0x8_EFYBM[0x8];                                 // 0xab8(0x8)
	Struct Docker                                                Docker;                                            // 0xac0(0x90)
	Struct StartPickupObjectActionRuleParams                     StartPickupObjectActionRuleParams;                 // 0xb50(0x10)
	char                                                         pad0x10_C9I2P[0x10];                               // 0xb60(0x10)
	Class ParticleSystemComponent*                               CurrentlyPlayingParticleSystem;                    // 0xb70(0x8)
	class                                                        LandingStrategy;                                   // 0xb78(0x8)
	class                                                        PursuitStrategy;                                   // 0xb80(0x8)
	float                                                        DefaultRollLerpTime;                               // 0xb88(0x4)
	float                                                        LandingRollLerpTime;                               // 0xb8c(0x4)
	bool                                                         IsBeingDismissed;                                  // 0xb90(0x1)
	char                                                         pad0xfb_O7A34[0xfb];                               // 0xb91(0xfb)
	bool                                                         IsInDisabledPetPerchHangout;                       // 0xc8c(0x1)
	bool                                                         PetIsSad;                                          // 0xc8d(0x1)
	char                                                         pad0x42_NWJO1[0x42];                               // 0xc8e(0x42)
};


// Size 0xa8 (Full Size[0x130] - InheritedSize[0x88]
class BTTask_SetRoamingPetAnimationState: public BTTask_BlackboardBase
{
public:
	Struct WeightedPetAnimationSelector                          WeightedAnimationSelection;                        // 0x88(0xa0)
	char                                                         pad0x8_AAIKX[0x8];                                 // 0x128(0x8)
};


// Size 0x80 (Full Size[0x250] - InheritedSize[0x1d0]
class PetDitherComponent: public DitherComponent
{
public:
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class PetPartCustomisationComponent: public ActorComponent
{
public:
	char                                                         pad0x10_7VIUT[0x10];                               // 0xc8(0x10)
	class                                                        AnimationDataStoreId;                              // 0xd8(0x8)
	Class PetPartSizeMappingsDataAsset*                          SizeMappingsAsset;                                 // 0xe0(0x8)
	TArray<struct CurrentlyLoadedMaterials>                      CurrentlyLoadedMaterials;                          // 0xe8(0x10)
	Struct StringAssetReference                                  DefaultMeshRef;                                    // 0xf8(0x10)
	Struct StringAssetReference                                  HighResMeshRef;                                    // 0x108(0x10)
	Class SkeletalMesh*                                          CurrentlyLoadedMesh;                               // 0x118(0x8)
	byte                                                         CurrentPetSize;                                    // 0x120(0x1)
	char                                                         pad0x7_B050E[0x7];                                 // 0x121(0x7)
	Class PetCustomisationOverrideDataAsset*                     CurrentlyLoadedOverrideAsset;                      // 0x128(0x8)
	char                                                         pad0x50_EFE7J[0x50];                               // 0x130(0x50)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PetPartSizeMappingsDataAsset: public DataAsset
{
public:
	TArray<struct Mappings>                                      Mappings;                                          // 0x28(0x10)
	Struct FloatRange                                            ConcealedScaleBounds;                              // 0x38(0x10)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class PetSicknessComponent: public ActorComponent
{
public:
};


// Size 0x40 (Full Size[0x70] - InheritedSize[0x30]
class PetsPartsDesc: public AIPartsDesc
{
public:
	Struct StringAssetReference                                  Mesh;                                              // 0x30(0x10)
	Struct StringAssetReference                                  HighResMesh;                                       // 0x40(0x10)
	TArray<struct PetMaterials>                                  PetMaterials;                                      // 0x50(0x10)
	byte                                                         PetSize;                                           // 0x60(0x1)
	char                                                         pad0x7_5TAGM[0x7];                                 // 0x61(0x7)
	Class PetCustomisationOverrideDataAsset*                     PetOverrideAsset;                                  // 0x68(0x8)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class PetTelemetryComponent: public ActorComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PetWieldableReactMappingsDataAsset: public DataAsset
{
public:
	TArray<struct WieldableReactMappings>                        WieldableReactMappings;                            // 0x28(0x10)
};


// Size 0xe8 (Full Size[0x4b0] - InheritedSize[0x3c8]
class PreviewPet: public Actor
{
public:
	char                                                         pad0x8_HLINA[0x8];                                 // 0x3c8(0x8)
	byte                                                         InitialAnimState;                                  // 0x3d0(0x1)
	char                                                         pad0x3_TN6V3[0x3];                                 // 0x3d1(0x3)
	Struct AIPartId                                              InitialPartIdToLoad;                               // 0x3d4(0x8)
	char                                                         pad0x4_2GAI8[0x4];                                 // 0x3dc(0x4)
	Class AIPartsCategory*                                       PreviewPetPartsCategory;                           // 0x3e0(0x8)
	Class SkeletalMeshComponent*                                 PreviewPetMesh;                                    // 0x3e8(0x8)
	Struct PetAnimationDataPreview                               PreviewPetAnimationData;                           // 0x3f0(0x10)
	Class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0x400(0x8)
	Class PetPartCustomisationComponent*                         PetPartCustomisationComponent;                     // 0x408(0x8)
	char                                                         pad0xa0_H0KVL[0xa0];                               // 0x410(0xa0)
};


}