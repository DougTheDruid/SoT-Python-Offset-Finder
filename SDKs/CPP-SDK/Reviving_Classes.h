#pragma once

// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid

#include "Reviving_Structs.h"


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReviveInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReviveableActionStateId: public ActionStateId
{
public:
};


// Size 0x20 (Full Size[0x320] - InheritedSize[0x300]
class ReviveAudioComponent: public WwiseEmitterComponent
{
public:
	class ReviveEffectsDataAsset*                                ReviveEffectsDataAsset;                            // 0x300(0x8)
	char                                                         pad0x18_6IF5V[0x18];                               // 0x308(0x18)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class ReviveEffectsDataAsset: public DataAsset
{
public:
	class MaterialParameterCollection*                           ReviveMaterialParameterCollection;                 // 0x28(0x8)
	struct FName                                                 AstralCordReviveInProgressMaterialCollectionScalarParameterName; // 0x30(0x8)
	struct FName                                                 AstralCordFadeMaterialCollectionScalarParameterName; // 0x38(0x8)
	struct FName                                                 AstralCordBorderMaterialCollectionScalarParameterName; // 0x40(0x8)
	class CurveFloat*                                            AstralCordBorderParamValueByAbsoluteTimeSinceDeath; // 0x48(0x8)
	class Material*                                              ReviveePostProcessMaterial;                        // 0x50(0x8)
	float                                                        GhostShaderGhostEffectInterpolationValue;          // 0x58(0x4)
	float                                                        ReviveSuccessfulEffectDuration;                    // 0x5c(0x4)
	class Object*                                                ReviveSuccessfulOneShotVFX;                        // 0x60(0x8)
	class Object*                                                ReviveSuccessfulOneShotVFX_Revivee;                // 0x68(0x8)
	class Object*                                                ReviveInProgressLoopingVFX;                        // 0x70(0x8)
	float                                                        AstralCordReviveInProgressInterpolationSpeed;      // 0x78(0x4)
	float                                                        AstralCordReviveNotInProgressInterpolationSpeed;   // 0x7c(0x4)
	class Object*                                                ContinuousBodyLoopingVFX;                          // 0x80(0x8)
	float                                                        AstralCordFadeInInterpolationSpeed;                // 0x88(0x4)
	float                                                        AstralCordFadeOutInterpolationSpeed;               // 0x8c(0x4)
	float                                                        DefaultAstralCordHeight;                           // 0x90(0x4)
	float                                                        AstralCordHeightOffsetFromTheGhost;                // 0x94(0x4)
	class Object*                                                DeadPlayerBodyEvaporatesOneShotVFX;                // 0x98(0x8)
	class WwiseEvent*                                            OtherPlayers_ReviveGhostAmbientStart;              // 0xa0(0x8)
	class WwiseEvent*                                            OtherPlayers_ReviveGhostAmbientStop;               // 0xa8(0x8)
	class WwiseEvent*                                            DeadPlayer_ReviveInProgressStart;                  // 0xb0(0x8)
	class WwiseEvent*                                            DeadPlayer_ReviveInProgressStop;                   // 0xb8(0x8)
	class WwiseEvent*                                            OtherPlayers_ReviveInProgressStart;                // 0xc0(0x8)
	class WwiseEvent*                                            OtherPlayers_ReviveInProgressStop;                 // 0xc8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReviveableRepresentationInterface: public Interface
{
public:
};


// Size 0x1a0 (Full Size[0x2e0] - InheritedSize[0x140]
class ReviveComponent: public InteractableComponent
{
public:
	char                                                         pad0x10_XWEU3[0x10];                               // 0x140(0x10)
	class Character*                                             OwningCharacter;                                   // 0x150(0x8)
	class Actor*                                                 ReviveableRepresentationActor;                     // 0x158(0x8)
	char                                                         ReviveState;                                       // 0x160(0x1)
	char                                                         InteractionState;                                  // 0x161(0x1)
	char                                                         pad0x6_JBJCG[0x6];                                 // 0x162(0x6)
	class UClass*                                                ReviveableRepresentationClass;                     // 0x168(0x8)
	char                                                         pad0xc_9VQFB[0xc];                                 // 0x170(0xc)
	bool                                                         ReviveWindowIsOpen;                                // 0x17c(0x1)
	char                                                         pad0xd3_3SWTD[0xd3];                               // 0x17d(0xd3)
	struct Status                                                RevivableStatus;                                   // 0x250(0x20)
	char                                                         pad0x70_DB804[0x70];                               // 0x270(0x70)
};


// Size 0xc8 (Full Size[0x468] - InheritedSize[0x3a0]
class RevivableRepresentationActor: public Actor
{
public:
	char                                                         pad0xc8_OK7JL[0xc8];                               // 0x3a0(0xc8)
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class ReviveDebugComponent: public ActorComponent
{
public:
	char                                                         pad0x98_VE31H[0x98];                               // 0xb8(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ToggleRevivalOnDeathInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x190] - InheritedSize[0x140]
class DeathSelfInteractionComponent: public InteractableComponent
{
public:
	char                                                         pad0x8_7R9H6[0x8];                                 // 0x140(0x8)
	bool                                                         HasGivenUp;                                        // 0x148(0x1)
	char                                                         pad0x47_SINY2[0x47];                               // 0x149(0x47)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PostReviveLocomotionActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ReviveConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x50 (Full Size[0x88] - InheritedSize[0x38]
class ReviveSettings: public DeveloperSettings
{
public:
	float                                                        MaximumReviveDistance;                             // 0x38(0x4)
	struct LinearColor                                           FadeColour;                                        // 0x3c(0x10)
	bool                                                         ShouldFadeAudio;                                   // 0x4c(0x1)
	char                                                         pad0x3_IQV3X[0x3];                                 // 0x4d(0x3)
	float                                                        ReviveTime;                                        // 0x50(0x4)
	float                                                        MaxRevertEvaporateDuration;                        // 0x54(0x4)
	TArray<char>                                                 UnsupportedPlayModes;                              // 0x58(0x10)
	TArray<struct ModeSpecificReviveSettings>                    ModeSpecificSettings;                              // 0x68(0x10)
	float                                                        GiveUpHoldTime;                                    // 0x78(0x4)
	float                                                        GiveUpFadeDuration;                                // 0x7c(0x4)
	float                                                        GiveUpEvaporateDuration;                           // 0x80(0x4)
	char                                                         pad0x4_UW17K[0x4];                                 // 0x84(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReviveableCharacterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevivedActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevivePlayerActionStateId: public ActionStateId
{
public:
};


// Size 0x168 (Full Size[0x220] - InheritedSize[0xb8]
class RevivableAIComponent: public ActorComponent
{
public:
	char                                                         pad0x18_MIY1E[0x18];                               // 0xb8(0x18)
	bool                                                         RevivableOnDeathFromTheStart;                      // 0xd0(0x1)
	bool                                                         RevivableOnDeath;                                  // 0xd1(0x1)
	char                                                         pad0x6_1SIUZ[0x6];                                 // 0xd2(0x6)
	struct FText                                                 CannotReviveAIBecauseDiffrentCrewDisplayText;      // 0xd8(0x38)
	class UClass*                                                StartRevivingInputId;                              // 0x110(0x8)
	class UClass*                                                HoldToReviveInputId;                               // 0x118(0x8)
	class UClass*                                                EmoteIdToPlayAfterSuccessfulRevive;                // 0x120(0x8)
	char                                                         ReviveState;                                       // 0x128(0x1)
	bool                                                         ReviveWindowIsOpen;                                // 0x129(0x1)
	bool                                                         OnlyCrewCanReviveFromTheStart;                     // 0x12a(0x1)
	bool                                                         OnlyCrewCanRevive;                                 // 0x12b(0x1)
	char                                                         pad0x54_DF554[0x54];                               // 0x12c(0x54)
	float                                                        ReviveTime;                                        // 0x180(0x4)
	char                                                         pad0x4_XA65D[0x4];                                 // 0x184(0x4)
	class UClass*                                                ReviveableRepresentationClass;                     // 0x188(0x8)
	struct Status                                                RevivableStatus;                                   // 0x190(0x20)
	class Actor*                                                 ReviveableRepresentationActor;                     // 0x1b0(0x8)
	char                                                         pad0x68_CFD4B[0x68];                               // 0x1b8(0x68)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RevivableStatus: public StatusBase
{
public:
};


// Size 0x198 (Full Size[0x600] - InheritedSize[0x468]
class ReviveGhost: public RevivableRepresentationActor
{
public:
	TArray<class MaterialInstanceDynamic*>                       CorpseMaterials;                                   // 0x468(0x10)
	class SceneComponent*                                        Root;                                              // 0x478(0x8)
	class SkeletalMeshComponent*                                 MeshComponent;                                     // 0x480(0x8)
	class SceneComponent*                                        AstralCordContainer;                               // 0x488(0x8)
	class AnimationDataStoreComponent*                           AnimationDataStoreComponent;                       // 0x490(0x8)
	class PostProcessComponent*                                  PostProcessComponent;                              // 0x498(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x4a0(0x8)
	class ReviveAudioComponent*                                  AudioComponent;                                    // 0x4a8(0x8)
	char                                                         pad0x8_C14OQ[0x8];                                 // 0x4b0(0x8)
	char                                                         RevivableOwnerNetRole;                             // 0x4b8(0x1)
	char                                                         pad0x7_ZV1WG[0x7];                                 // 0x4b9(0x7)
	class GhostDataAsset*                                        ReviveGhostDataAsset;                              // 0x4c0(0x8)
	class ReviveEffectsDataAsset*                                ReviveEffectsDataAsset;                            // 0x4c8(0x8)
	struct ReviveEffectsValues                                   ReviveEffectsValues;                               // 0x4d0(0x20)
	struct ModeSpecificReviveSettings                            ReviveSettings;                                    // 0x4f0(0x38)
	char                                                         pad0x8c_PRFHX[0x8c];                               // 0x528(0x8c)
	TArray<class MaterialInstanceDynamic*>                       AstralCordDynamicMaterials;                        // 0x5e0(0x10)
	struct GhostPlayModeParameters                               GhostPlayModeSpecificParameters;                   // 0x5f0(0xc)
	char                                                         pad0x4_S1E86[0x4];                                 // 0x5fc(0x4)
};


// Size 0x18 (Full Size[0x480] - InheritedSize[0x468]
class SFXRevivalRepresentationActor: public RevivableRepresentationActor
{
public:
	class SceneComponent*                                        Root;                                              // 0x468(0x8)
	class ReviveAudioComponent*                                  AudioComponent;                                    // 0x470(0x8)
	char                                                         pad0x8_I1MKQ[0x8];                                 // 0x478(0x8)
};


