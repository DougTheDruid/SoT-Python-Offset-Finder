#pragma once

// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid

#include "Athena_Structs.h"


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCompanyControlInterface: public Interface
{
public:
};


// Size 0x300 (Full Size[0x328] - InheritedSize[0x28]
class LightingControllerSettings: public DataAsset
{
public:
	class CurveFloat*                                            FogDensityCurve;                                   // 0x28(0x8)
	class CurveFloat*                                            FogStartDistanceCurve;                             // 0x30(0x8)
	class CurveFloat*                                            LightIntensityCurve;                               // 0x38(0x8)
	class CurveFloat*                                            SkyDomeBrightnessCurve;                            // 0x40(0x8)
	class CurveFloat*                                            SkyDomeMoonVisibilityCurve;                        // 0x48(0x8)
	class CurveFloat*                                            SkyDomeStarBrightnessCurve;                        // 0x50(0x8)
	class CurveFloat*                                            SkyDomeSunBrightnessCurve;                         // 0x58(0x8)
	class CurveFloat*                                            PostLPVIntensityCurve;                             // 0x60(0x8)
	class CurveFloat*                                            PostExposureBiasCurve;                             // 0x68(0x8)
	class CurveFloat*                                            PostLPVOcclusionIntensityCurve;                    // 0x70(0x8)
	class CurveFloat*                                            SkyLightIntensityCurve;                            // 0x78(0x8)
	class CurveFloat*                                            FogBrightnessNearCurve;                            // 0x80(0x8)
	class CurveFloat*                                            FogBrightnessFarCurve;                             // 0x88(0x8)
	class CurveFloat*                                            PostBloomIntensityCurve;                           // 0x90(0x8)
	class CurveFloat*                                            PostBloomThresholdCurve;                           // 0x98(0x8)
	class CurveFloat*                                            SkyDomeAuraBrightnessCurve;                        // 0xa0(0x8)
	class CurveFloat*                                            PostReflectionProbeBrightnessCurve;                // 0xa8(0x8)
	class CurveFloat*                                            PostReflectionProbeShadowBrightnessCurve;          // 0xb0(0x8)
	class CurveFloat*                                            VfxControllerCurve;                                // 0xb8(0x8)
	class CurveFloat*                                            FogMaxOpacityCurve;                                // 0xc0(0x8)
	class CurveFloat*                                            FogScatterExpCurve;                                // 0xc8(0x8)
	class CurveFloat*                                            FogUnderwaterDensityCurve;                         // 0xd0(0x8)
	class CurveFloat*                                            PostLensFlareIntensityCurve;                       // 0xd8(0x8)
	class CurveFloat*                                            EmissiveFoliageCurve;                              // 0xe0(0x8)
	class CurveFloat*                                            EmissiveLightsCurve;                               // 0xe8(0x8)
	class CurveFloat*                                            PostExposureMinBrightnessCurve;                    // 0xf0(0x8)
	class CurveFloat*                                            PostExposureMaxBrightnessCurve;                    // 0xf8(0x8)
	class CurveFloat*                                            SkyDomeMoonBrightnessCurve;                        // 0x100(0x8)
	class CurveFloat*                                            SkyDomeHorizonCloudBrightnessCurve;                // 0x108(0x8)
	class CurveFloat*                                            SkyDomeGreenFlashStrengthCurve;                    // 0x110(0x8)
	class CurveFloat*                                            PostSaturationCurve;                               // 0x118(0x8)
	class CurveFloat*                                            PostContrastCurve;                                 // 0x120(0x8)
	class CurveFloat*                                            CloudRimlightScaleCurve;                           // 0x128(0x8)
	class CurveFloat*                                            CloudSkylightScaleCurve;                           // 0x130(0x8)
	class CurveFloat*                                            CloudSunlightScaleCurve;                           // 0x138(0x8)
	class CurveFloat*                                            CloudGlobalPressureCurve;                          // 0x140(0x8)
	class CurveFloat*                                            PostUnderWaterBrightnessCurve;                     // 0x148(0x8)
	class CurveFloat*                                            VfxCloudBrightnessCurve;                           // 0x150(0x8)
	class CurveFloat*                                            LightGodRayIntensityCurve;                         // 0x158(0x8)
	class CurveFloat*                                            CloudBottomBrightnessCurve;                        // 0x160(0x8)
	class CurveFloat*                                            CloudSunlightShadowingCurve;                       // 0x168(0x8)
	class CurveFloat*                                            SunDiscScaleCurve;                                 // 0x170(0x8)
	class CurveFloat*                                            WaterSpecularBrightnessCurve;                      // 0x178(0x8)
	class CurveFloat*                                            VfxAmbientScaleCurve;                              // 0x180(0x8)
	class CurveFloat*                                            CloudShadowBrightnessCurve;                        // 0x188(0x8)
	class CurveFloat*                                            StormCloudShadowBrightnessCurve;                   // 0x190(0x8)
	class CurveFloat*                                            StormPostBloomIntensityCurve;                      // 0x198(0x8)
	class CurveFloat*                                            StormPostBloomThresholdCurve;                      // 0x1a0(0x8)
	class CurveFloat*                                            DirectionalLightShadowSteppingRateCurve;           // 0x1a8(0x8)
	class CurveFloat*                                            SkullBrightnessCurve;                              // 0x1b0(0x8)
	class CurveLinearColor*                                      FogColourAwayCurve;                                // 0x1b8(0x8)
	class CurveLinearColor*                                      FogColourTowardsCurve;                             // 0x1c0(0x8)
	class CurveLinearColor*                                      LightSunColourCurve;                               // 0x1c8(0x8)
	class CurveLinearColor*                                      SkyDomeHorizonColourCurve;                         // 0x1d0(0x8)
	class CurveLinearColor*                                      SkyDomeZenithColourCurve;                          // 0x1d8(0x8)
	class CurveLinearColor*                                      SkyLightColourCurve;                               // 0x1e0(0x8)
	class CurveLinearColor*                                      PostAmbientShadowColourCurve;                      // 0x1e8(0x8)
	class CurveLinearColor*                                      FogColourAwayFarCurve;                             // 0x1f0(0x8)
	class CurveLinearColor*                                      FogColourUnderwaterCurve;                          // 0x1f8(0x8)
	class CurveLinearColor*                                      FogColourAwayUnderwaterCurve;                      // 0x200(0x8)
	class CurveLinearColor*                                      WaterColourCurve;                                  // 0x208(0x8)
	class CurveLinearColor*                                      WaterColourShallowCurve;                           // 0x210(0x8)
	class CurveLinearColor*                                      WaterBackLitColourCurve;                           // 0x218(0x8)
	class CurveLinearColor*                                      WaterFoamColourCurve;                              // 0x220(0x8)
	class CurveLinearColor*                                      WaterFoamHighlightColourCurve;                     // 0x228(0x8)
	class CurveLinearColor*                                      WaterAmbientColourCurve;                           // 0x230(0x8)
	class CurveLinearColor*                                      PostReflectionProbeTintCurve;                      // 0x238(0x8)
	class CurveLinearColor*                                      CloudRimlightColourCurve;                          // 0x240(0x8)
	class CurveLinearColor*                                      CloudSkylightColourCurve;                          // 0x248(0x8)
	class CurveLinearColor*                                      CloudSunlightColourCurve;                          // 0x250(0x8)
	class CurveLinearColor*                                      PostUnderWaterTintCurve;                           // 0x258(0x8)
	class CurveLinearColor*                                      SkyDomeMoonColourCurve;                            // 0x260(0x8)
	class CurveLinearColor*                                      PostGammaCurve;                                    // 0x268(0x8)
	class CurveLinearColor*                                      SkyDomeSunColourCurve;                             // 0x270(0x8)
	class CurveLinearColor*                                      VFXFoamColourCurve;                                // 0x278(0x8)
	class CurveLinearColor*                                      VFXWindColourCurve;                                // 0x280(0x8)
	class CurveLinearColor*                                      VFXUnderwaterTintCurve;                            // 0x288(0x8)
	class CurveLinearColor*                                      StormRainColourCurve;                              // 0x290(0x8)
	class CurveLinearColor*                                      StormSkyLightColourCurve;                          // 0x298(0x8)
	class CurveLinearColor*                                      StormPostGammaCurve;                               // 0x2a0(0x8)
	class CurveLinearColor*                                      StormFogColourUnderwaterCurve;                     // 0x2a8(0x8)
	class CurveLinearColor*                                      StormFogColourAwayUnderwaterCurve;                 // 0x2b0(0x8)
	class CurveLinearColor*                                      StormWaterColourCurve;                             // 0x2b8(0x8)
	class CurveLinearColor*                                      StormWaterColourShallowCurve;                      // 0x2c0(0x8)
	class CurveLinearColor*                                      StormWaterBackLitColourCurve;                      // 0x2c8(0x8)
	class CurveLinearColor*                                      StormWaterFoamColourCurve;                         // 0x2d0(0x8)
	class CurveLinearColor*                                      StormWaterFoamHighlightColourCurve;                // 0x2d8(0x8)
	class CurveLinearColor*                                      StormWaterAmbientColourCurve;                      // 0x2e0(0x8)
	class CurveLinearColor*                                      StormPostReflectionProbeTintCurve;                 // 0x2e8(0x8)
	class CurveLinearColor*                                      SkullEyeColourCurve;                               // 0x2f0(0x8)
	struct LinearColor                                           SandColourStatic;                                  // 0x2f8(0x10)
	float                                                        FogUnderwaterMaxOpacityStatic;                     // 0x308(0x4)
	float                                                        FogUnderwaterScatterExpStatic;                     // 0x30c(0x4)
	float                                                        FogUnderwaterStartDistanceStatic;                  // 0x310(0x4)
	float                                                        FogUnderwaterBrightnessNearStatic;                 // 0x314(0x4)
	float                                                        FogUnderwaterBrightnessFarStatic;                  // 0x318(0x4)
	float                                                        FogDirectionalInscatteringStartStatic;             // 0x31c(0x4)
	float                                                        FogUnderwaterDirectionalInscatteringStartStatic;   // 0x320(0x4)
	float                                                        UnderwaterDirectionalLightMinBrightnessStatic;     // 0x324(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCOnSurfaceVOManagerInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class CategoryBase: public Object
{
public:
	struct FText                                                 Name;                                              // 0x28(0x38)
	struct FName                                                 UniqueTextIdentifier;                              // 0x60(0x8)
	struct StringAssetReference                                  IconPath;                                          // 0x68(0x10)
	struct FeatureFlag                                           FeatureToggle;                                     // 0x78(0xc)
	char                                                         pad0x4_LBTTI[0x4];                                 // 0x84(0x4)
};


// Size 0x148 (Full Size[0x200] - InheritedSize[0xb8]
class LoadableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_KQW57[0x8];                                 // 0xb8(0x8)
	float                                                        LoadTime;                                          // 0xc0(0x4)
	float                                                        UnloadTime;                                        // 0xc4(0x4)
	TArray<struct LoadableComponentTimerOverride>                TimerOverrides;                                    // 0xc8(0x10)
	class UClass*                                                DefaultObjectToLoad;                               // 0xd8(0x8)
	char                                                         pad0x50_G7VG6[0x50];                               // 0xe0(0x50)
	struct Transform                                             UnloadingPoint;                                    // 0x130(0x30)
	char                                                         pad0x18_GC7SF[0x18];                               // 0x160(0x18)
	struct LoadableComponentState                                LoadableComponentState;                            // 0x178(0x10)
	bool                                                         AlwaysLoaded;                                      // 0x188(0x1)
	char                                                         pad0x77_AN02V[0x77];                               // 0x189(0x77)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToShovelNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCOnSurfaceVOManager: public Object
{
public:
	char                                                         pad0x10_4I0AS[0x10];                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AtlasSlotRenderer: public Interface
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class SetTaleProgressStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    TriggerVolume;                                     // 0x80(0x30)
};


// Size 0xc0 (Full Size[0x178] - InheritedSize[0xb8]
class PlayerCurseComponent: public ActorComponent
{
public:
	class ParticleSystem*                                        TemplateVFX;                                       // 0xb8(0x8)
	class UClass*                                                AudioComponentClass;                               // 0xc0(0x8)
	class WwiseEvent*                                            PlayCurseActiveAudioLoopEvent;                     // 0xc8(0x8)
	class WwiseEvent*                                            StopCurseActiveAudioLoopEvent;                     // 0xd0(0x8)
	struct FName                                                 CurseAudioSwitchGroup;                             // 0xd8(0x8)
	TArray<struct PlayerCurseToAudioSwitchValue>                 CurseToAudioSwitchValues;                          // 0xe0(0x10)
	char                                                         pad0x18_CEN7F[0x18];                               // 0xf0(0x18)
	class ParticleSystemComponent*                               CurseVFX;                                          // 0x108(0x8)
	char                                                         pad0x50_GMIX8[0x50];                               // 0x110(0x50)
	char                                                         ActiveCurseForFX;                                  // 0x160(0x1)
	char                                                         pad0x17_IZHM6[0x17];                               // 0x161(0x17)
};


// Size 0x78 (Full Size[0x418] - InheritedSize[0x3a0]
class Rudder: public Actor
{
public:
	char                                                         pad0x8_OUSO7[0x8];                                 // 0x3a0(0x8)
	float                                                        AngleBlend;                                        // 0x3a8(0x4)
	float                                                        MaxAngle;                                          // 0x3ac(0x4)
	struct Vector                                                PositionForRudderDynamicsRelativeToRudderActor;    // 0x3b0(0xc)
	struct Vector                                                RelativeRightShipDir;                              // 0x3bc(0xc)
	class BaseRudderDynamicsDesc*                                RudderDynamicsDesc;                                // 0x3c8(0x8)
	char                                                         pad0x18_S7HJD[0x18];                               // 0x3d0(0x18)
	float                                                        ServerAngleRatio;                                  // 0x3e8(0x4)
	char                                                         pad0x2c_XWUYC[0x2c];                               // 0x3ec(0x2c)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveMechanismTriggerStep: public TaleQuestStep
{
public:
	class RemoveMechanismTriggerStepDesc*                        Desc;                                              // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestResetShipBuoyancyServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x20 (Full Size[0x2f0] - InheritedSize[0x2d0]
class RainZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_1ICSR[0x8];                                 // 0x2d0(0x8)
	struct RainZoneParameters                                    RainZoneParameters;                                // 0x2d8(0xc)
	char                                                         pad0xc_5FRJE[0xc];                                 // 0x2e4(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x100 (Full Size[0x6b0] - InheritedSize[0x5b0]
class TestClimbingActor: public Character
{
public:
	char                                                         pad0x60_6F2SG[0x60];                               // 0x5b0(0x60)
	class ClimbingComponent*                                     ClimbingComponent;                                 // 0x610(0x8)
	char                                                         pad0x98_TKJSQ[0x98];                               // 0x618(0x98)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseOCReceiveBuffAudio: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapRadialInventoryActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapRadialActionRightTriggerGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AIControlledWaterFillRateParamsDataAsset: public DataAsset
{
public:
	float                                                        LeakAmountMultiplier;                              // 0x28(0x4)
	float                                                        RepairTimeMultiplier;                              // 0x2c(0x4)
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class ActivateReapersChestComponent: public ActorComponent
{
public:
	class UClass*                                                BreakSealActionInputId;                            // 0xb8(0x8)
	class UClass*                                                BreakSealActionReleasedInputId;                    // 0xc0(0x8)
	struct BreakReapersChestSealActionRuleVerbiage               BreakReapersChestSealActionRuleVerbiage;           // 0xc8(0x70)
	char                                                         pad0x18_6KWLN[0x18];                               // 0x138(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationInstanceTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookingAtWieldableCycleForwardsNotificationInputId: public NotificationInputId
{
public:
};


// Size 0xd0 (Full Size[0x188] - InheritedSize[0xb8]
class VisualHealthResponseComponent: public ActorComponent
{
public:
	class ParticleSystemComponent*                               ActiveVfx;                                         // 0xb8(0x8)
	class VisualHealthResponseDataAsset*                         VisualHealthResponseData;                          // 0xc0(0x8)
	TArray<class MaterialInstanceDynamic*>                       HealthResponseMaterials;                           // 0xc8(0x10)
	char                                                         pad0x88_IY9UE[0x88];                               // 0xd8(0x88)
	bool                                                         WaitForAllMeshChange;                              // 0x170(0x1)
	char                                                         pad0x7_DH7KT[0x7];                                 // 0x171(0x7)
	char                                                         pad0x10_XV40R[0x10];                               // 0x178(0x10)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AllianceSettingsAsset: public DataAsset
{
public:
	float                                                        MaximumAllianceDistance;                           // 0x28(0x4)
	float                                                        PollDelay;                                         // 0x2c(0x4)
	class UClass*                                                OfferFlag;                                         // 0x30(0x8)
	class UClass*                                                AcceptFlag;                                        // 0x38(0x8)
	class UClass*                                                LeaveFlag;                                         // 0x40(0x8)
	class AlliancePennantAsset*                                  AlliancePennantAsset;                              // 0x48(0x8)
	TArray<class Class*>                                         AllianceAllowedShipSizes;                          // 0x50(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpawnedImpactProxyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ashen_dragon_skl_figurehead_01_a: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x1c0 (Full Size[0x1e8] - InheritedSize[0x28]
class FragileComponentDataAsset: public DataAsset
{
public:
	float                                                        DefaultDamageScalar;                               // 0x28(0x4)
	char                                                         pad0x4_NU4SL[0x4];                                 // 0x2c(0x4)
	class CurveFloat*                                            DropDistanceToDamageCurve;                         // 0x30(0x8)
	class CurveFloat*                                            FallSpeedToDamageCurve;                            // 0x38(0x8)
	class WwiseEvent*                                            DamageSound;                                       // 0x40(0x8)
	struct FName                                                 ObjectDamageRTPCName;                              // 0x48(0x8)
	class Object*                                                DamageVfx;                                         // 0x50(0x8)
	struct FName                                                 DamageVfxSocketName;                               // 0x58(0x8)
	float                                                        SignificantHealthChangeAbsolute;                   // 0x60(0x4)
	char                                                         pad0x4_Z7CY8[0x4];                                 // 0x64(0x4)
	TArray<struct FragileComponentShipDamageTypeEntry>           ShipDamageTypeValues;                              // 0x1a8(0x10)
	TArray<struct FragileComponentHealthScalarEntry>             DamageTypeScalars;                                 // 0x1b8(0x10)
	TArray<char>                                                 BlockedHealthChangedReasons;                       // 0x1c8(0x10)
	TArray<Class>                                                BlockedWielderTypesForDamage;                      // 0x1d8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBaseType: public Object
{
public:
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class SimpleSceneDialogueComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NGR8H[0x8];                                 // 0xb8(0x8)
	TArray<class WwiseEvent*>                                    AudioEvents;                                       // 0xc0(0x10)
	char                                                         pad0x8_JS8YD[0x8];                                 // 0xd0(0x8)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class ReapersMarkTrackedItemComponent: public ActorComponent
{
public:
	char                                                         pad0x10_ZZ89K[0x10];                               // 0xb8(0x10)
	char                                                         ItemType;                                          // 0xc8(0x1)
	char                                                         pad0x7_4QT5I[0x7];                                 // 0xc9(0x7)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class LaunchableProjectileService: public Object
{
public:
	char                                                         pad0x8_9HEYE[0x8];                                 // 0x28(0x8)
	class World*                                                 World;                                             // 0x30(0x8)
	TArray<struct LaunchableActiveProjectileData>                ActiveProjectiles;                                 // 0x38(0x10)
};


// Size 0xa0 (Full Size[0x158] - InheritedSize[0xb8]
class PostGrappleComponent: public ActorComponent
{
public:
	struct RuntimeFloatCurve                                     GroundMovementSpeedMultiplierCurve;                // 0xb8(0x80)
	float                                                        Duration;                                          // 0x138(0x4)
	char                                                         pad0x1_OYULP[0x1];                                 // 0x13c(0x1)
	bool                                                         AuthIsInPostGrappleState;                          // 0x13d(0x1)
	char                                                         pad0x2_802EO[0x2];                                 // 0x13e(0x2)
	class AthenaPlayerCharacter*                                 Player;                                            // 0x140(0x8)
	char                                                         pad0x10_U1J9Q[0x10];                               // 0x148(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageParticipantInterface: public Interface
{
public:
};


// Size 0x110 (Full Size[0x4b0] - InheritedSize[0x3a0]
class MatineeUtility: public Actor
{
public:
	char                                                         pad0x108_KV5L3[0x108];                             // 0x3a0(0x108)
	class AthenaPlayerCharacter*                                 BoundCharacter;                                    // 0x4a8(0x8)
};


// Size 0xb0 (Full Size[0x148] - InheritedSize[0x98]
class AwaitCrewShipToSailAwayFromCurrentLocationStep: public TaleQuestStep
{
public:
	char                                                         pad0xb0_O58Y9[0xb0];                               // 0x98(0xb0)
};


// Size 0xa0 (Full Size[0x120] - InheritedSize[0x80]
class TaleQuestNotificationStepDesc: public TaleQuestStepDesc
{
public:
	class PopUpMessageDesc*                                      Notification;                                      // 0x80(0x8)
	struct QuestVariablePlayerActor                              PreventNotificationForPlayer;                      // 0x88(0x30)
	struct QuestVariablePlayerActor                              Player;                                            // 0xb8(0x30)
	struct QuestVariableActorArray                               ExplicitPlayerList;                                // 0xe8(0x30)
	bool                                                         OnlyShowNotificationForDiscoveringPlayer;          // 0x118(0x1)
	char                                                         pad0x7_EE54Y[0x7];                                 // 0x119(0x7)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class ShantyService: public Object
{
public:
	char                                                         pad0x8_XDD6R[0x8];                                 // 0x28(0x8)
	TArray<class Ensemble*>                                      EnsembleActors;                                    // 0x30(0x10)
	class ShantySettings*                                        ShantySettings;                                    // 0x40(0x8)
	char                                                         pad0x60_YPQWJ[0x60];                               // 0x48(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneResponseMetaData: public Object
{
public:
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class ActorBuriedByPlayerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetMovementStateModifierInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonRetractNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class PlayerPermissionsComponent: public ActorComponent
{
public:
	bool                                                         AllowDebugMenuAccess;                              // 0xb8(0x1)
	bool                                                         AllowDebugMenuButtonShortcutsAccess;               // 0xb9(0x1)
	bool                                                         AllowExecuteOnServer;                              // 0xba(0x1)
	bool                                                         DisableWatermark;                                  // 0xbb(0x1)
	char                                                         pad0x4_1UC81[0x4];                                 // 0xbc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogHeaderInfoInterface: public Interface
{
public:
};


// Size 0x118 (Full Size[0x280] - InheritedSize[0x168]
class SwimmingCreatureMovementComponent: public FloatingPawnMovement
{
public:
	char                                                         pad0x10_GSTWE[0x10];                               // 0x168(0x10)
	float                                                        MinPlayRate;                                       // 0x178(0x4)
	float                                                        MaxPlayRate;                                       // 0x17c(0x4)
	float                                                        NetworkSimulatedSmoothLocationTime;                // 0x180(0x4)
	float                                                        NetworkSimulatedSmoothRotationTime;                // 0x184(0x4)
	float                                                        WaterSurfaceCheckHeightOffset;                     // 0x188(0x4)
	float                                                        DistanceFromWaterSurfaceForMaxAdjustmentVelocity;  // 0x18c(0x4)
	float                                                        MaxWaterSurfaceAdjustmentVelocity;                 // 0x190(0x4)
	float                                                        VelocitySmoothingFactor;                           // 0x194(0x4)
	float                                                        SharkFinHeightCheckOffset;                         // 0x198(0x4)
	char                                                         pad0x4_NTOPU[0x4];                                 // 0x19c(0x4)
	class CurveFloat*                                            SinkingAccelerationOverTime;                       // 0x1a0(0x8)
	int                                                          PushOutHemisphereSteps;                            // 0x1a8(0x4)
	int                                                          PushOutStepsOnNarrowestHemisphereBand;             // 0x1ac(0x4)
	int                                                          PushOutStepsOnWidestHemisphereBand;                // 0x1b0(0x4)
	float                                                        MaxExtraPushOut;                                   // 0x1b4(0x4)
	int                                                          NumStepsToRampUpToMaxPushOut;                      // 0x1b8(0x4)
	struct CollisionProfileName                                  PenetrationPanicCollisionProfile;                  // 0x1bc(0x8)
	bool                                                         ShouldDestroyOnUnresolvedCollision;                // 0x1c4(0x1)
	char                                                         pad0x3_IVS6O[0x3];                                 // 0x1c5(0x3)
	float                                                        SmoothNetUpdateLocationTime;                       // 0x1c8(0x4)
	float                                                        SmoothNetUpdateRotationTime;                       // 0x1cc(0x4)
	float                                                        MaxMovementTimeAllowedForSmoothNetUpdate;          // 0x1d0(0x4)
	float                                                        DebugDrawHeight;                                   // 0x1d4(0x4)
	float                                                        DebugDrawRadius;                                   // 0x1d8(0x4)
	char                                                         ReplicatedSwimmingMode;                            // 0x1dc(0x1)
	char                                                         pad0x23_BCGBH[0x23];                               // 0x1dd(0x23)
	TArray<struct SwimmingCreatureAIStrategyMovementProperties>  AIStrategyMovementProperties;                      // 0x200(0x10)
	struct SwimmingCreatureMovementReplicatedData                ReplicatedMovementData;                            // 0x210(0x30)
	char                                                         pad0x40_7GOZ5[0x40];                               // 0x240(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipCaptainActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class CharacterMeshRetrievalComponent: public ActorComponent
{
public:
	char                                                         pad0x8_3CAQL[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldSequenceInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class BroadcasterPuzzleStatueAudioParamsDataAsset: public DataAsset
{
public:
	class WwiseEvent*                                            BroadcasterInitiateReactionSequence;               // 0x28(0x8)
	class WwiseEvent*                                            SuccessHumStart;                                   // 0x30(0x8)
	class WwiseEvent*                                            SuccessHumStop;                                    // 0x38(0x8)
	class WwiseEvent*                                            SuccessWaterLevelUp;                               // 0x40(0x8)
	class WwiseEvent*                                            SuccessWaterLevelDown;                             // 0x48(0x8)
	class WwiseEvent*                                            SuccessGeneralActivation;                          // 0x50(0x8)
	class WwiseEvent*                                            UnsuccessfulSequence;                              // 0x58(0x8)
	class WwiseEvent*                                            ShockwaveEffect;                                   // 0x60(0x8)
};


// Size 0x1e8 (Full Size[0x2a0] - InheritedSize[0xb8]
class BootyItemShipOwnershipComponent: public ActorComponent
{
public:
	bool                                                         FirstTimeDroppedConditionalStatTriggerSent;        // 0xb8(0x1)
	char                                                         pad0x7_5NNEQ[0x7];                                 // 0xb9(0x7)
	class Actor*                                                 OwningShip;                                        // 0xc0(0x8)
	TArray<struct Guid>                                          CrewShipsOwnedByHistory;                           // 0xc8(0x10)
	char                                                         pad0x1c8_JDZF7[0x1c8];                             // 0xd8(0x1c8)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class LoadoutSettings: public Object
{
public:
	struct StringAssetReference                                  DefaultLoadoutAsset;                               // 0x28(0x10)
	struct StringAssetReference                                  InitialLoadoutAsset;                               // 0x38(0x10)
	struct StringAssetReference                                  FallbackLoadoutAsset;                              // 0x48(0x10)
	struct StringAssetReference                                  ContestLoadoutAsset;                               // 0x58(0x10)
	TArray<struct SupplementalLoadout>                           SupplementalLoadouts;                              // 0x68(0x10)
	char                                                         pad0x20_9V29A[0x20];                               // 0x78(0x20)
};


// Size 0x140 (Full Size[0x4e0] - InheritedSize[0x3a0]
class HauntedFort: public Actor
{
public:
	char                                                         pad0x10_JP1OE[0x10];                               // 0x3a0(0x10)
	class StaticMeshComponent*                                   FortMesh;                                          // 0x3b0(0x8)
	class ChildActorComponent*                                   Target_A;                                          // 0x3b8(0x8)
	class ChildActorComponent*                                   Target_B;                                          // 0x3c0(0x8)
	class ChildActorComponent*                                   Target_C;                                          // 0x3c8(0x8)
	class ChildActorComponent*                                   Target_D;                                          // 0x3d0(0x8)
	class ChildActorComponent*                                   Target_E;                                          // 0x3d8(0x8)
	class ChildActorComponent*                                   Target_F;                                          // 0x3e0(0x8)
	class ChildActorComponent*                                   Target_G;                                          // 0x3e8(0x8)
	class ChildActorComponent*                                   Target_H;                                          // 0x3f0(0x8)
	class ChildActorComponent*                                   Target_I;                                          // 0x3f8(0x8)
	class HauntedFortEmplacement*                                Emplacement_A;                                     // 0x400(0x8)
	class HauntedFortEmplacement*                                Emplacement_B;                                     // 0x408(0x8)
	class HauntedFortEmplacement*                                Emplacement_C;                                     // 0x410(0x8)
	TArray<class HauntedFortTarget*>                             TargetsArray;                                      // 0x418(0x10)
	TArray<class HauntedFortTarget*>                             EmplacementsArray;                                 // 0x428(0x10)
	float                                                        ServerMigrationExclusionRadius;                    // 0x438(0x4)
	char                                                         pad0xa4_GEQO0[0xa4];                               // 0x43c(0xa4)
};


// Size 0x1b0 (Full Size[0x2f0] - InheritedSize[0x140]
class BalanceableWalkwayComponent: public InteractableComponent
{
public:
	char                                                         pad0x30_8RBSL[0x30];                               // 0x140(0x30)
	struct Vector                                                StartPoint;                                        // 0x170(0xc)
	struct Vector                                                EndPoint;                                          // 0x17c(0xc)
	struct ReplicatedDataForSimulatedProxy                       ReplicatedDataForSimulatedProxy;                   // 0x188(0x30)
	char                                                         pad0x8_70478[0x8];                                 // 0x1b8(0x8)
	class CurveFloat*                                            UniqueRopeCounterBalanceForceCurve;                // 0x1c0(0x8)
	class BalanceableWalkwayDataAsset*                           WalkwayDataAsset;                                  // 0x1c8(0x8)
	class BalanceableWalkwayFXParams*                            WalkwayFXDataAsset;                                // 0x1d0(0x8)
	char                                                         pad0x14_F42LL[0x14];                               // 0x1d8(0x14)
	bool                                                         IsValidWalkway;                                    // 0x1ec(0x1)
	char                                                         pad0x103_2GF9H[0x103];                             // 0x1ed(0x103)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UsableItemsActionRulesBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountpointViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RemoteServicesProviderInterface: public Interface
{
public:
};


// Size 0x188 (Full Size[0x240] - InheritedSize[0xb8]
class RewindComponent: public ActorComponent
{
public:
	char                                                         pad0x10_26KK7[0x10];                               // 0xb8(0x10)
	bool                                                         AutoRegister;                                      // 0xc8(0x1)
	char                                                         CollisionChannel;                                  // 0xc9(0x1)
	char                                                         pad0x2_9XJ6E[0x2];                                 // 0xca(0x2)
	struct RewindComponentParameters                             Parameters;                                        // 0xcc(0x10)
	bool                                                         ShouldRegisterToAggregateTick;                     // 0xdc(0x1)
	char                                                         pad0x163_E4Y9K[0x163];                             // 0xdd(0x163)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLifetimeManagerServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeathCustomisationInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x98] - InheritedSize[0x80]
class DebugSkipToStepDesc: public TaleQuestStepDesc
{
public:
	class TaleQuestStepDesc*                                     NextDesc;                                          // 0x80(0x8)
	struct FString                                               SkipName;                                          // 0x88(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseAnchorDynamicsDesc: public DataAsset
{
public:
};


// Size 0x190 (Full Size[0x1b8] - InheritedSize[0x28]
class GameNarrationCoordinator: public Object
{
public:
	class WwiseEvent*                                            NarrationSpeakEvent;                               // 0x28(0x8)
	struct WwiseEmitter                                          Emitter;                                           // 0x30(0x20)
	char                                                         pad0x138_WEJDY[0x138];                             // 0x50(0x138)
	struct FString                                               CachedPreferredVoice;                              // 0x188(0x10)
	struct FString                                               CachedLanguage;                                    // 0x198(0x10)
	int                                                          CachedGender;                                      // 0x1a8(0x4)
	bool                                                         IsNarrationSettingEnabled;                         // 0x1ac(0x1)
	char                                                         pad0x3_KLJOV[0x3];                                 // 0x1ad(0x3)
	int                                                          NarrationOverride;                                 // 0x1b0(0x4)
	char                                                         pad0x4_VQJ0C[0x4];                                 // 0x1b4(0x4)
};


// Size 0x0 (Full Size[0x460] - InheritedSize[0x460]
class InGameCommandAISpawner: public AISpawner
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentKeyPressNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0x258] - InheritedSize[0x228]
class AthenaLocalPlayer: public LocalPlayer
{
public:
	char                                                         pad0x30_NIAZ0[0x30];                               // 0x228(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunServiceQueryInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterGunInfoInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SinkingInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class AnimNotifyWwiseEmitterRetrievalComponent: public ActorComponent
{
public:
	char                                                         pad0x8_1A1AA[0x8];                                 // 0xb8(0x8)
	class AnimNotifyWwiseEmitterComponent*                       CachedComponent;                                   // 0xc0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseSickness: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlockReactionInterface: public Interface
{
public:
};


// Size 0xf0 (Full Size[0x170] - InheritedSize[0x80]
class SpawnShipwreckTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableShipwreck                                SpawnedShipwreck;                                  // 0x80(0x30)
	struct QuestVariableClass                                    CustomWreckType;                                   // 0xb0(0x30)
	struct QuestVariableVector                                   CustomWreckLocation;                               // 0xe0(0x30)
	struct QuestVariableRotator                                  CustomWreckRotation;                               // 0x110(0x30)
	struct QuestVariableText                                     CustomWreckVesselName;                             // 0x140(0x30)
};


// Size 0x2c8 (Full Size[0x668] - InheritedSize[0x3a0]
class EmissaryVoteInteractionActor: public Actor
{
public:
	char                                                         pad0x10_IMDQR[0x10];                               // 0x3a0(0x10)
	class BoxedRpcDispatcherComponent*                           BoxedRpcDispatcherComponent;                       // 0x3b0(0x8)
	float                                                        FadeDuration;                                      // 0x3b8(0x4)
	char                                                         pad0x4_E5J9I[0x4];                                 // 0x3bc(0x4)
	struct EmissaryDisplayInformation                            EmissaryActiveInfo;                                // 0x3c0(0x90)
	struct EmissaryDisplayInformation                            EmissaryInactiveInfo;                              // 0x450(0x90)
	struct EmissaryDisplayInformation                            EmissarySaferSeasInfo;                             // 0x4e0(0x90)
	char                                                         pad0xf8_HE5CM[0xf8];                               // 0x570(0xf8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseHullDragDynamicsDesc: public DataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneActorInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x640] - InheritedSize[0x5a0]
class SurfaceWaterComponent: public PrimitiveComponent
{
public:
	struct Vector                                                BoxExtent;                                         // 0x598(0xc)
	float                                                        UpdateCullDistance;                                // 0x5a4(0x4)
	class Texture2D*                                             AddWaterMaskTexture;                               // 0x5a8(0x8)
	class Texture2D*                                             BaseHeightTexture;                                 // 0x5b0(0x8)
	int                                                          TextureSizeX;                                      // 0x5b8(0x4)
	int                                                          TextureSizeY;                                      // 0x5bc(0x4)
	float                                                        WetnessPerStrength;                                // 0x5c0(0x4)
	float                                                        WetnessDecayRate;                                  // 0x5c4(0x4)
	char                                                         pad0x18_RV4LB[0x18];                               // 0x5c8(0x18)
	struct Vector4                                               SplatData;                                         // 0x5e0(0x10)
	class TextureRenderTarget2D*                                 WaterHeightTexture;                                // 0x5f0(0x8)
	class TextureRenderTarget2D*                                 WaterHeightTexturePingPong;                        // 0x5f8(0x8)
	class TextureRenderTarget2D*                                 NormalTexture;                                     // 0x600(0x8)
	class TextureRenderTarget2D*                                 OutflowTexture;                                    // 0x608(0x8)
	class TextureRenderTarget2D*                                 OutflowTexturePingPong;                            // 0x610(0x8)
	char                                                         pad0x28_DDIYZ[0x28];                               // 0x618(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedObjectInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickSwitchSecondaryWeaponNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamagerType: public Object
{
public:
};


// Size 0x10 (Full Size[0x650] - InheritedSize[0x640]
class FishingLineRenderComponent: public RopeCatenaryRenderComponent
{
public:
	struct LinearColor                                           LineColour;                                        // 0x640(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_LegendarySkellyFortEventSignal: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipPartsCatalogueDataAsset: public DataAsset
{
public:
	struct ShipPartsCatalogue                                    Catalogue;                                         // 0x28(0x10)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class SpawnCollectableQuestObjectStep: public TaleQuestStep
{
public:
	char                                                         pad0x18_LNT2H[0x18];                               // 0x98(0x18)
};


// Size 0x1f0 (Full Size[0x218] - InheritedSize[0x28]
class SirenTridentProjectileParams: public DataAsset
{
public:
	char                                                         ParameterState;                                    // 0x28(0x1)
	char                                                         pad0x7_6BQZG[0x7];                                 // 0x29(0x7)
	struct ExplosionInfo                                         ExplosionParams;                                   // 0x30(0x198)
	float                                                        CollisionRadius;                                   // 0x1c8(0x4)
	float                                                        MaterialScale;                                     // 0x1cc(0x4)
	float                                                        MaterialScaleChangeDuration;                       // 0x1d0(0x4)
	float                                                        LaunchSpeed;                                       // 0x1d4(0x4)
	float                                                        ChargeTime;                                        // 0x1d8(0x4)
	float                                                        Lifespan;                                          // 0x1dc(0x4)
	int                                                          AmmoCost;                                          // 0x1e0(0x4)
	float                                                        VfxCustomParameterValue;                           // 0x1e4(0x4)
	struct FName                                                 ProjectileAudioSwitchState;                        // 0x1e8(0x8)
	class WwiseEvent*                                            TrailSfxEventStart;                                // 0x1f0(0x8)
	class WwiseEvent*                                            TrailSfxEventStop;                                 // 0x1f8(0x8)
	class UClass*                                                ImpactId;                                          // 0x200(0x8)
	class ForceFeedbackEffect*                                   FireForceFeedback;                                 // 0x208(0x8)
	class ForceFeedbackEffect*                                   SizeChangeForceFeedback;                           // 0x210(0x8)
};


// Size 0x2140 (Full Size[0x21f8] - InheritedSize[0xb8]
class CharacterAudioComponent: public ActorComponent
{
public:
	char                                                         pad0x10_M364T[0x10];                               // 0xb8(0x10)
	class CharacterAudioComponentParams*                         Params;                                            // 0xc8(0x8)
	class WwiseEvent*                                            MonsterCallEvent;                                  // 0xd0(0x8)
	int                                                          MonsterCallHourToPlay;                             // 0xd8(0x4)
	struct FName                                                 TimeOfDayRtpc;                                     // 0xdc(0x8)
	char                                                         pad0x4_6UD7G[0x4];                                 // 0xe4(0x4)
	struct PlayerMusicController                                 PlayerMusicController;                             // 0xe8(0x210)
	class CharacterAudioFootfallControllerParams*                FootfallParams;                                    // 0x2f8(0x8)
	class CharacterAudioEventControllerParams*                   EventParams;                                       // 0x300(0x8)
	class UClass*                                                PegLegCategory;                                    // 0x308(0x8)
	class UClass*                                                BootsCategory;                                     // 0x310(0x8)
	char                                                         pad0x48_K9UF8[0x48];                               // 0x318(0x48)
	class AudioSpaceTrackerComponent*                            AudioSpaceTracker;                                 // 0x360(0x8)
	class AthenaPlayerCharacter*                                 AthenaPlayerCharacter;                             // 0x368(0x8)
	char                                                         pad0x1e30_0FKZ8[0x1e30];                           // 0x370(0x1e30)
	class AudioSpaceDataAsset*                                   CurrentSpace;                                      // 0x21a0(0x8)
	char                                                         pad0x18_2VI2B[0x18];                               // 0x21a8(0x18)
	class Ship*                                                  CurrentShip;                                       // 0x21c0(0x8)
	char                                                         pad0x30_RWD4E[0x30];                               // 0x21c8(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainRammingAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class AnimationDataOverriderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_GNOTR[0x8];                                 // 0xb8(0x8)
	struct StringAssetReference                                  AnimationDataStoreAssetReference;                  // 0xc0(0x10)
	class AnimationDataStoreAsset*                               AnimationDataStoreAsset;                           // 0xd0(0x8)
	char                                                         pad0x18_BQZGI[0x18];                               // 0xd8(0x18)
};


// Size 0x978 (Full Size[0x9a0] - InheritedSize[0x28]
class AshenWindsFlamethrowerController: public Object
{
public:
	char                                                         pad0x8_RTTE1[0x8];                                 // 0x28(0x8)
	struct FlamethrowerCollisionsParams                          FlamethrowerCollisionParams;                       // 0x30(0x68)
	class FireGridCellSelectionParamsDataAsset*                  FlamethrowerFirePropagationIgnitionParams;         // 0x98(0x8)
	struct Status                                                FlamethrowerCollisionStatusEffect;                 // 0xa0(0x20)
	float                                                        TimeUntilApplyStatusEffect;                        // 0xc0(0x4)
	float                                                        TimeUntilIgniteFirePropagation;                    // 0xc4(0x4)
	float                                                        TimeToConsiderActorOutsideFlame;                   // 0xc8(0x4)
	float                                                        AngleBehindWielderToIgnoreCollisions;              // 0xcc(0x4)
	float                                                        FlamethrowerCollisionDamageAmount;                 // 0xd0(0x4)
	float                                                        DamagePerSecondInsideFlame;                        // 0xd4(0x4)
	struct PlayerStat                                            DamageableInterfaceStat;                           // 0xd8(0x4)
	char                                                         pad0x4_A0SQF[0x4];                                 // 0xdc(0x4)
	class UClass*                                                DamagerTypeClass;                                  // 0xe0(0x8)
	char                                                         HealthChangedReason;                               // 0xe8(0x1)
	bool                                                         ShouldFireStatsOnActorWithFirePropogationInterface; // 0xe9(0x1)
	char                                                         pad0x6_95XD3[0x6];                                 // 0xea(0x6)
	class AshenWindsSkull*                                       AshenWindsSkull;                                   // 0xf0(0x8)
	char                                                         pad0x8a8_D24GZ[0x8a8];                             // 0xf8(0x8a8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_ReapersTributeShip: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class DeepSeaSettings: public DeveloperSettings
{
public:
	float                                                        DeepSeaStartDepth;                                 // 0x38(0x4)
	float                                                        DepthToRemoveSurfaceNetCluster;                    // 0x3c(0x4)
};


// Size 0xb8 (Full Size[0x458] - InheritedSize[0x3a0]
class EmissaryFlag: public Actor
{
public:
	char                                                         pad0x8_SLQFC[0x8];                                 // 0x3a0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3a8(0x8)
	class WwiseEvent*                                            StartAmbientFlagSfx;                               // 0x3b0(0x8)
	class WwiseEvent*                                            StopAmbientFlagSfx;                                // 0x3b8(0x8)
	class WwiseEvent*                                            AttachFlagSfx;                                     // 0x3c0(0x8)
	class WwiseEvent*                                            DetachFlagSfx;                                     // 0x3c8(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x3d0(0x8)
	class SceneComponent*                                        RootSceneComponent;                                // 0x3d8(0x8)
	class StaticMeshComponent*                                   EmissaryFlagStaticMeshComponent;                   // 0x3e0(0x8)
	char                                                         pad0x28_PGO18[0x28];                               // 0x3e8(0x28)
	struct StringAssetReference                                  CurrentEmissaryFlagMesh;                           // 0x410(0x10)
	char                                                         pad0x38_2OSV4[0x38];                               // 0x420(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPreviewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersChestInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIInteractableInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xc8] - InheritedSize[0x98]
class ChooseIslandStep: public TaleQuestStep
{
public:
	char                                                         pad0x30_PGBBC[0x30];                               // 0x98(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_CursedSkellyFortEventSignal: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestAddTemporarySessionEntitlementStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapRadialInventoryDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedServiceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0xc8] - InheritedSize[0x78]
class AthenaGameUserSettings: public GameUserSettings
{
public:
	int                                                          MaxVerticalResolution;                             // 0x78(0x4)
	int                                                          MaxFPS;                                            // 0x7c(0x4)
	int                                                          VSync;                                             // 0x80(0x4)
	int                                                          LightingDetail;                                    // 0x84(0x4)
	int                                                          ModelDetail;                                       // 0x88(0x4)
	int                                                          ShadowDetail;                                      // 0x8c(0x4)
	int                                                          TextureDetail;                                     // 0x90(0x4)
	int                                                          WaterDetail;                                       // 0x94(0x4)
	int                                                          AnimationQuality;                                  // 0x98(0x4)
	int                                                          MMCThresholdScale;                                 // 0x9c(0x4)
	float                                                        ResolutionScaling;                                 // 0xa0(0x4)
	int                                                          ParticleEmitterQuality;                            // 0xa4(0x4)
	int                                                          ParticleResolutionQuality;                         // 0xa8(0x4)
	int                                                          BackBufferCount;                                   // 0xac(0x4)
	int                                                          ShowPerformanceCounters;                           // 0xb0(0x4)
	int                                                          ShowPerformanceCounters_Console;                   // 0xb4(0x4)
	bool                                                         SmoothFPS;                                         // 0xb8(0x1)
	bool                                                         HDR;                                               // 0xb9(0x1)
	bool                                                         AudioOutputSpatialAudio;                           // 0xba(0x1)
	char                                                         pad0x1_WXA9J[0x1];                                 // 0xbb(0x1)
	int                                                          D3DVersion;                                        // 0xbc(0x4)
	bool                                                         ParallelRendering;                                 // 0xc0(0x1)
	bool                                                         GpuCrashDetection;                                 // 0xc1(0x1)
	bool                                                         Fullscreen;                                        // 0xc2(0x1)
	char                                                         pad0x5_9ZD7I[0x5];                                 // 0xc3(0x5)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TunnelPresenterObjectParamsBase: public Object
{
public:
	class UClass*                                                PresenterObjectClass;                              // 0x28(0x8)
	char                                                         StartMode;                                         // 0x30(0x1)
	char                                                         pad0x7_8NX5T[0x7];                                 // 0x31(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TelemetrySubjectInterface: public Interface
{
public:
};


// Size 0x110 (Full Size[0x4b0] - InheritedSize[0x3a0]
class SkeletonActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	struct AISpawnActionStateParams                              AISpawnParams;                                     // 0x3a0(0x10)
	struct AIDeadActionStateParams                               AIDeadParams;                                      // 0x3b0(0x4)
	struct UseItemActionStateParams                              UseItemParams;                                     // 0x3b4(0x1)
	char                                                         pad0x3_AOOLE[0x3];                                 // 0x3b5(0x3)
	struct UseCannonActionStateParams                            UseCannonParams;                                   // 0x3b8(0x80)
	struct RepairObjectActionStateParams                         RepairObjectParams;                                // 0x438(0x8)
	struct ControlObjectActionStateParams                        ControlObjectParams;                               // 0x440(0x38)
	struct HiddenActionStateParams                               HiddenStateParams;                                 // 0x478(0x5)
	char                                                         pad0x3_UVYJU[0x3];                                 // 0x47d(0x3)
	struct RevivedActionStateParams                              PostReviveParameters;                              // 0x480(0x10)
	struct RemoveSpearActionStateParams                          RemoveSpearParams;                                 // 0x490(0x1)
	char                                                         pad0x1f_2E0JD[0x1f];                               // 0x491(0x1f)
};


// Size 0x150 (Full Size[0x178] - InheritedSize[0x28]
class PlayerModerationService: public Object
{
public:
	char                                                         pad0x148_NJ62Y[0x148];                             // 0x28(0x148)
	class AthenaPlayerCharacter*                                 ReportingCharacter;                                // 0x170(0x8)
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class ViewModelComponentBase: public ActorComponent
{
public:
	char                                                         pad0x60_1J43D[0x60];                               // 0xb8(0x60)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class PlayerWorldLocationComponent: public ActorComponent
{
public:
	struct FName                                                 CurrentWorldLocation;                              // 0xb8(0x8)
};


// Size 0xb8 (Full Size[0x170] - InheritedSize[0xb8]
class LookAtOffsetComponent: public ActorComponent
{
public:
	char                                                         pad0xb8_IRYXF[0xb8];                               // 0xb8(0xb8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DisableShipContainersStatus: public StatusBase
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class WaitForUnlockStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_7HQSV[0x8];                                 // 0x98(0x8)
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class FogTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_J1QPH[0x8];                                 // 0xb8(0x8)
	float                                                        FogDensityThreshold;                               // 0xc0(0x4)
	char                                                         pad0x5c_NJT0F[0x5c];                               // 0xc4(0x5c)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AIBuffStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CharacterHitReactionDamagerTypeToAnimTypeLayer: public Object
{
public:
	TArray<struct CharacterHitReactionDamagerTypeToAnimTypePair> DamagerTypeToAnimTypePairs;                        // 0x28(0x10)
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class IslandDataAssetEntry: public DataAsset
{
public:
	struct FName                                                 IslandName;                                        // 0x28(0x8)
	TArray<struct TreasureMapData>                               TreasureMaps;                                      // 0x30(0x10)
	class WorldMapIslandDataAsset*                               WorldMapData;                                      // 0x40(0x8)
	class GeneratedLocationsDataAsset*                           UndergroundTreasureLocationsSource;                // 0x48(0x8)
	TArray<struct Vector>                                        UndergroundTreasureLocations;                      // 0x50(0x10)
	class LandmarkTreasureLocationsDataAsset*                    LandmarkTreasureLocationsSource;                   // 0x60(0x8)
	class GeneratedLocationsDataAsset*                           AISpawnLocationsSource;                            // 0x68(0x8)
	TArray<struct Vector>                                        AISpawnLocations;                                  // 0x70(0x10)
	class GeneratedLocationsDataAsset*                           FishingSpotLocationsSource;                        // 0x80(0x8)
	TArray<struct Vector>                                        FishingSpotLocations;                              // 0x88(0x10)
	TArray<class IslandItemDataAsset*>                           IslandItemLocationDataSources;                     // 0x98(0x10)
	TArray<class IslandSalvageSpawnerCollection*>                IslandSalvageSpawnerCollections;                   // 0xa8(0x10)
	TArray<struct TypedIslandItemSpawnLocationData>              SalvageItemsLocationData;                          // 0xb8(0x10)
	struct FText                                                 LocalisedName;                                     // 0xc8(0x38)
	class AISpawner*                                             AISpawner;                                         // 0x100(0x8)
	class AISpawner*                                             CannonsAISpawner;                                  // 0x108(0x8)
	class AISpawner*                                             EmergentCaptainSpawner;                            // 0x110(0x8)
	class IslandMaterialStatusZone*                              IslandMaterialStatusZone;                          // 0x118(0x8)
	struct PlayerStat                                            StatToFireWhenPlayerSetsFootOnIsland;              // 0x120(0x4)
	struct PlayerStat                                            StatToFireWhenShipVisitsAnIsland;                  // 0x124(0x4)
	bool                                                         ShouldBeHiddenOnWorldMap;                          // 0x128(0x1)
	bool                                                         UseAdvancedSearchForMermaidSpawn;                  // 0x129(0x1)
	char                                                         IslandActiveEventType;                             // 0x12a(0x1)
	char                                                         pad0x5_UQ2PZ[0x5];                                 // 0x12b(0x5)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class MutateCollectorsChestStep: public TaleQuestStep
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseSpawnAIOnShip: public StatusResponse
{
public:
	class AIFixedWavesSpawner*                                   AISpawner;                                         // 0x38(0x8)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class CutsceneResponseCoordinator: public Object
{
public:
	char                                                         pad0x10_331XV[0x10];                               // 0x28(0x10)
	bool                                                         SuppressResponses;                                 // 0x38(0x1)
	char                                                         pad0x7_2BLVD[0x7];                                 // 0x39(0x7)
	class Object*                                                WorldContextObject;                                // 0x40(0x8)
	char                                                         pad0x80_11QKD[0x80];                               // 0x48(0x80)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MountpointParamsDataAsset: public DataAsset
{
public:
	TArray<struct MountpointParams>                              MountpointParams;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GatedHealthInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SampledMovementInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x148] - InheritedSize[0x80]
class TaleQuestSetVoyageBoarIslandStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableName                                     IslandName;                                        // 0x80(0x30)
	struct QuestVariableBool                                     IslandNameMigrated;                                // 0xb0(0x30)
	struct QuestVariableName                                     MigratedIslandName;                                // 0xe0(0x30)
	struct QuestVariableActor                                    WallowToMigrate;                                   // 0x110(0x30)
	bool                                                         IsReadingMigration;                                // 0x140(0x1)
	char                                                         pad0x7_SSGWP[0x7];                                 // 0x141(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightingZoneInterface: public Interface
{
public:
};


// Size 0x2d8 (Full Size[0x678] - InheritedSize[0x3a0]
class ShipService: public Actor
{
public:
	char                                                         pad0x40_H1MZN[0x40];                               // 0x3a0(0x40)
	struct CrewShipPersistentDataManager                         PersistentCrewShipData;                            // 0x3e0(0x10)
	TArray<struct WeakActorHandle>                               ShipList;                                          // 0x3f0(0x10)
	TArray<struct CrewShipEntry>                                 CrewedShips;                                       // 0x400(0x10)
	char                                                         pad0x268_0XZQC[0x268];                             // 0x410(0x268)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class CaptainsLogbookAccoladeDefinitionsAsset: public DataAsset
{
public:
	struct CaptainsLogbookAccoladeDefinition                     DefaultDefinition;                                 // 0x28(0x18)
	TArray<struct CaptainsLogbookAccoladeDefinition>             Definitions;                                       // 0x40(0x10)
};


// Size 0xb8 (Full Size[0x138] - InheritedSize[0x80]
class CreateAshenLordEncounterTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct AshenLordCustomEncounterSettings                      CustomisationOptions;                              // 0x80(0x58)
	struct QuestVariableAISpawner                                AshenLordSpawner;                                  // 0xd8(0x30)
	struct QuestVariableGameEvent                                AshenLordEncounterEvent;                           // 0x108(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestNotificationUsingVariableStep: public TaleQuestStep
{
public:
	class TaleQuestNotificationUsingVariableStepDesc*            Desc;                                              // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CarouselPirateDescConversion: public BlueprintFunctionLibrary
{
public:
};


// Size 0x140 (Full Size[0x168] - InheritedSize[0x28]
class MeshMemoryConstraintService: public Object
{
public:
	char                                                         pad0x30_DIR6N[0x30];                               // 0x28(0x30)
	class World*                                                 World;                                             // 0x58(0x8)
	char                                                         pad0x20_CVH91[0x20];                               // 0x60(0x20)
	class MeshMemoryConstraintSettings*                          MMCSettings;                                       // 0x120(0x8)
	class MeshMemoryConstraintFallbackCollection*                MMCFallbackCollection;                             // 0x128(0x8)
	char                                                         pad0x38_A1BMW[0x38];                               // 0x130(0x38)
};


// Size 0x88 (Full Size[0x310] - InheritedSize[0x288]
class MenuInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x88_U49KN[0x88];                               // 0x288(0x88)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StarChartConstellationInterface: public Interface
{
public:
};


// Size 0x2c0 (Full Size[0x660] - InheritedSize[0x3a0]
class HullDamage: public Actor
{
public:
	char                                                         pad0x20_JI2SX[0x20];                               // 0x3a0(0x20)
	class SceneComponent*                                        Root;                                              // 0x3c0(0x8)
	class MobileInstancedStaticMeshComponent*                    RepairPlanksMesh;                                  // 0x3c8(0x8)
	class ShipDamageableComponent*                               ShipDamageComponent;                               // 0x3d0(0x8)
	class BakedDecalComponent*                                   ImpactDecalComponent;                              // 0x3d8(0x8)
	struct RandomStream                                          RandomDecalStream;                                 // 0x3e0(0x8)
	TArray<class Texture2D*>                                     PersistentDamageDecals;                            // 0x3e8(0x10)
	float                                                        PersistentDamageDecalMinSize;                      // 0x3f8(0x4)
	float                                                        PersistentDamageDecalMaxSize;                      // 0x3fc(0x4)
	float                                                        PersistentDamageDecalNearDistance;                 // 0x400(0x4)
	float                                                        PersistentDamageDecalFarDistance;                  // 0x404(0x4)
	float                                                        PersistentDamageDecalCullDistance;                 // 0x408(0x4)
	char                                                         PersistentDamageDecalBlendMode;                    // 0x40c(0x1)
	char                                                         pad0x3_XQO97[0x3];                                 // 0x40d(0x3)
	int                                                          PersistentDamageDecalLODIndex;                     // 0x410(0x4)
	char                                                         pad0x4_QAF7T[0x4];                                 // 0x414(0x4)
	TArray<class MaterialInstance*>                              DeferredDamageDecals;                              // 0x418(0x10)
	float                                                        DeferredDamageDecalMinSize;                        // 0x428(0x4)
	float                                                        DeferredDamageDecalMaxSize;                        // 0x42c(0x4)
	int                                                          DamageZoneTickInterval;                            // 0x430(0x4)
	char                                                         pad0x4_OVOAQ[0x4];                                 // 0x434(0x4)
	class ShipInternalWater*                                     InternalWater;                                     // 0x438(0x8)
	TArray<class DamageZone*>                                    DamageZones;                                       // 0x440(0x10)
	TArray<class DamageZone*>                                    ActiveHullDamageZones;                             // 0x450(0x10)
	TArray<class DamageZone*>                                    BottomDeckDamageZones;                             // 0x460(0x10)
	TArray<class DamageZone*>                                    MiddleDeckDamageZones;                             // 0x470(0x10)
	struct WeightedProbabilityRange                              DamageZoneDeckDistribution;                        // 0x480(0x20)
	class PersistenceIdentifierSettingsAsset*                    PersistenceIdentifierSettingsAsset;                // 0x4a0(0x8)
	char                                                         pad0x178_MKWJL[0x178];                             // 0x4a8(0x178)
	TArray<class RepairableComponent*>                           RepairablePoints;                                  // 0x620(0x10)
	char                                                         pad0x30_TO19V[0x30];                               // 0x630(0x30)
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class TallTaleSpawnedActorComponent: public ActorComponent
{
public:
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class FaceTargetComponent: public ActorComponent
{
public:
	float                                                        BlendRotationInterpSpeed;                          // 0xb8(0x4)
	bool                                                         BlendRotationUseConstantInterp;                    // 0xbc(0x1)
	char                                                         pad0x1b_2AHPS[0x1b];                               // 0xbd(0x1b)
	class Actor*                                                 TargetActorToFace;                                 // 0xd8(0x8)
	char                                                         pad0x48_R3FPU[0x48];                               // 0xe0(0x48)
	float                                                        ClampYawRange;                                     // 0x128(0x4)
	float                                                        ClampYawCentre;                                    // 0x12c(0x4)
	float                                                        ClampYawRate;                                      // 0x130(0x4)
	char                                                         pad0x4_1P17S[0x4];                                 // 0x134(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipDynamicsProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFortLockoutInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMouseXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x110 (Full Size[0x4b0] - InheritedSize[0x3a0]
class ChaliceStatue: public Actor
{
public:
	class StaticMeshComponent*                                   Mesh;                                              // 0x3a0(0x8)
	TArray<class ParticleSystemComponent*>                       PhaseParticleSystems;                              // 0x3a8(0x10)
	char                                                         pad0x58_T97FW[0x58];                               // 0x3b8(0x58)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x410(0xa0)
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class AimAssistDataAsset: public DataAsset
{
public:
	float                                                        MinPlayerStrafeSpeed;                              // 0x28(0x4)
	float                                                        MaxPlayerStrafeSpeed;                              // 0x2c(0x4)
	TArray<class Class*>                                         ItemCategoriesForAimAssist;                        // 0x30(0x10)
	struct AimAssistStyleData                                    DefaultWeaponConfig;                               // 0x40(0x58)
	TArray<struct AimAssistStyleData>                            WeaponConfigs;                                     // 0x98(0x10)
	class CurveFloat*                                            DampingValueOfSlowdownBasedOnTargetOffsetX;        // 0xa8(0x8)
	class CurveFloat*                                            DampingValueOfSlowdownBasedOnTargetOffsetY;        // 0xb0(0x8)
	float                                                        MaxADSSlowdownFactor;                              // 0xb8(0x4)
	float                                                        MaxHipFireSlowdownFactor;                          // 0xbc(0x4)
	float                                                        MaxADSRotationFactor;                              // 0xc0(0x4)
	float                                                        MaxHipFireRotationFactor;                          // 0xc4(0x4)
	float                                                        RotationUnderwaterModifier;                        // 0xc8(0x4)
	float                                                        SlowdownUnderwaterModifier;                        // 0xcc(0x4)
	float                                                        RotationPitchAdjustment;                           // 0xd0(0x4)
	float                                                        NearPlayerAudioStartDistanceScreenPercentage;      // 0xd4(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AllianceBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class IslandAirPocketComponent: public ActorComponent
{
public:
	char                                                         pad0x8_PAW35[0x8];                                 // 0xb8(0x8)
	TArray<struct AirGivingVolumeData>                           AirGivingVolumes;                                  // 0xc0(0x10)
	char                                                         pad0x10_OFDNZ[0x10];                               // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UndoRepairActionStateId: public ActionStateId
{
public:
};


// Size 0x228 (Full Size[0x2e0] - InheritedSize[0xb8]
class ShipModifierComponent: public ActorComponent
{
public:
	TArray<struct ShipModifierStatus>                            ModifiersToApply;                                  // 0xb8(0x10)
	char                                                         pad0x218_ENEBI[0x218];                             // 0xc8(0x218)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class SwitchPresetDataAsset: public DataAsset
{
public:
	TArray<struct NonShippingSwitch>                             SwitchValues;                                      // 0x28(0x10)
	class CustomScoreValuesMasterListDataAsset*                  ScoreValuesMasterList;                             // 0x38(0x8)
	TArray<struct NonShippingScoreSwitch>                        ItemSwitchValues;                                  // 0x40(0x10)
	TArray<struct NonShippingScoreSwitch>                        EventSwitchValues;                                 // 0x50(0x10)
	struct FString                                               JSonObjectString;                                  // 0x60(0x10)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class BuoyantObjectSpawnProfileDataAsset: public DataAsset
{
public:
	struct BuoyantObjectSpawnProfile                             Profile;                                           // 0x28(0xf0)
};


// Size 0x190 (Full Size[0x248] - InheritedSize[0xb8]
class SicknessComponent: public ActorComponent
{
public:
	char                                                         pad0x8_47N9X[0x8];                                 // 0xb8(0x8)
	struct WeightedProbabilityRangeOfRanges                      IncubationPeriodDuration;                          // 0xc0(0x30)
	struct WeightedProbabilityRangeOfRanges                      LatentPeriodDuration;                              // 0xf0(0x30)
	struct WeightedProbabilityRangeOfRanges                      VomitingPeriodDuration;                            // 0x120(0x30)
	struct WeightedProbabilityRangeOfRanges                      VomitBoutDuration;                                 // 0x150(0x30)
	struct WeightedProbabilityRangeOfRanges                      DelayBetweenVomitBouts;                            // 0x180(0x30)
	float                                                        ScreenEffectStrengthWhenSicknessActive;            // 0x1b0(0x4)
	float                                                        ScreenEffectStrengthWhileVomiting;                 // 0x1b4(0x4)
	float                                                        MaterialEffectStrengthWhenSicknessActive;          // 0x1b8(0x4)
	float                                                        ScreenEffectSpringAcceleration;                    // 0x1bc(0x4)
	float                                                        MaterialEffectSpringAcceleration;                  // 0x1c0(0x4)
	bool                                                         CanGetSick;                                        // 0x1c4(0x1)
	char                                                         pad0x4b_3LIFG[0x4b];                               // 0x1c5(0x4b)
	float                                                        TargetScreenEffectStrength;                        // 0x210(0x4)
	float                                                        TargetMaterialEffectStrength;                      // 0x214(0x4)
	char                                                         pad0x30_PYS4G[0x30];                               // 0x218(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageModifierInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class CreateAshenLordEncounterTaleStep: public TaleQuestStep
{
public:
};


// Size 0x120 (Full Size[0x148] - InheritedSize[0x28]
class MerchantMapLayout: public DataAsset
{
public:
	struct TreasureMapWidgetText                                 PickupLocation;                                    // 0x28(0x3c)
	struct TreasureMapWidgetText                                 DeliveryLocation;                                  // 0x64(0x3c)
	struct TreasureMapWidgetText                                 DeliverByTime;                                     // 0xa0(0x3c)
	struct TreasureMapWidgetText                                 PickupLocationHint;                                // 0xdc(0x3c)
	TArray<struct MerchantMapLayoutItem>                         Items;                                             // 0x118(0x10)
	TArray<struct TreasureMapWidgetTexture>                      Images;                                            // 0x128(0x10)
	TArray<struct TreasureMapWidgetLocalisedText>                GeneralText;                                       // 0x138(0x10)
};


// Size 0x30 (Full Size[0x128] - InheritedSize[0xf8]
class TaleQuestSequenceStep: public TaleQuestFramedStep
{
public:
	class TaleQuestSequenceStepDesc*                             Desc;                                              // 0xf8(0x8)
	TArray<struct ForkedStep>                                    ForkedSteps;                                       // 0x118(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HighFlyAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutscenesBlueprintFunctionLibrary: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerTelemetryInfoProviderInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class TripwireMechanismTrigger: public Actor
{
public:
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3a0(0x8)
	class BoxComponent*                                          BoxCollisionThatTriggersWireSnap;                  // 0x3a8(0x8)
	class StaticMeshComponent*                                   WireStaticMesh;                                    // 0x3b0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToFishingRodNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CannonballStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseTooltipDescriptorId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugShipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerModerationServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimToSurfaceAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TelemetryDispatcherRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RotationControlInterface: public Interface
{
public:
};


// Size 0x138 (Full Size[0x160] - InheritedSize[0x28]
class BalanceableWalkwayDataAsset: public DataAsset
{
public:
	struct FText                                                 UseBalanceableWalkwayTooltip;                      // 0x28(0x38)
	struct FText                                                 SlideDownWalkwayTooltip;                           // 0x60(0x38)
	struct FText                                                 InWaterTooltip;                                    // 0x98(0x38)
	struct FText                                                 AngleTooBigTooltip;                                // 0xd0(0x38)
	struct FText                                                 TooShortTooltip;                                   // 0x108(0x38)
	struct Vector                                                TooltipOffset;                                     // 0x140(0xc)
	float                                                        InteractionAreaSize;                               // 0x14c(0x4)
	float                                                        MaxTooltipDistance;                                // 0x150(0x4)
	float                                                        MaxAngleOfRopeToInteract;                          // 0x154(0x4)
	float                                                        MaxAngleOfRopeToWalk;                              // 0x158(0x4)
	char                                                         pad0x4_4YGWG[0x4];                                 // 0x15c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_RitualSkellyFortEventSignal: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShopOfferBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLifetimeMetaDataInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrackedActorInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x190] - InheritedSize[0xb8]
class OfferingNPCComponent: public ActorComponent
{
public:
	char                                                         pad0x8_X1PP6[0x8];                                 // 0xb8(0x8)
	struct FName                                                 RightHandWieldSocket;                              // 0xc0(0x8)
	struct FName                                                 LeftHandWieldSocket;                               // 0xc8(0x8)
	bool                                                         ShouldOfferItemWithoutAnimation;                   // 0xd0(0x1)
	char                                                         pad0x7_00R25[0x7];                                 // 0xd1(0x7)
	class UClass*                                                ItemToShow;                                        // 0xd8(0x8)
	class Actor*                                                 ItemShown;                                         // 0xe0(0x8)
	struct FText                                                 PickupItemText;                                    // 0xe8(0x38)
	struct FText                                                 CannotPickupItemText;                              // 0x120(0x38)
	char                                                         pad0x38_U8XBU[0x38];                               // 0x158(0x38)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BoobyTrapSpawnerDataAsset: public DataAsset
{
public:
	TArray<struct BoobyTrapSpawnerRankEntry>                     RankEntries;                                       // 0x28(0x10)
};


// Size 0x138 (Full Size[0x4d8] - InheritedSize[0x3a0]
class ScrambledNamesService: public Actor
{
public:
	char                                                         pad0x138_EI6FG[0x138];                             // 0x3a0(0x138)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConstellationsServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObjectMeshRetrievalInterface: public Interface
{
public:
};


// Size 0x260 (Full Size[0x600] - InheritedSize[0x3a0]
class PortableHarpoonProjectile: public Actor
{
public:
	char                                                         pad0x10_XTHI4[0x10];                               // 0x3a0(0x10)
	class WwiseEvent*                                            TrailSfxPlay;                                      // 0x3b0(0x8)
	class WwiseEvent*                                            TrailSfxStop;                                      // 0x3b8(0x8)
	class WwiseObjectPoolWrapper*                                TrailSfxPool;                                      // 0x3c0(0x8)
	class WaterSplashComponent*                                  WaterSplashComponent;                              // 0x3c8(0x8)
	class PortableHarpoon*                                       OwningPortableHarpoon;                             // 0x3d0(0x8)
	struct ReplicatedTransformState                              ReplicatedTransformState;                          // 0x3d8(0x30)
	struct NetTimeStampCalculator                                NetMovementTimeStamp;                              // 0x408(0x70)
	char                                                         pad0x20_SUDPG[0x20];                               // 0x478(0x20)
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x498(0x8)
	class HarpoonRenderComponent*                                TetherRenderComponent;                             // 0x4a0(0x8)
	class SceneComponent*                                        RootSceneComponent;                                // 0x4a8(0x8)
	class SceneComponent*                                        MovementBase;                                      // 0x4b0(0x8)
	char                                                         pad0x18_AM0K8[0x18];                               // 0x4b8(0x18)
	struct FName                                                 TetherAttachSocketName;                            // 0x4d0(0x8)
	struct FName                                                 ArrowTipSocketName;                                // 0x4d8(0x8)
	char                                                         pad0x8_QM9KG[0x8];                                 // 0x4e0(0x8)
	struct PortableHarpoonProjectileReplicateState               ReplicatedProjectileState;                         // 0x4e8(0x8)
	char                                                         pad0x110_ZIVQC[0x110];                             // 0x4f0(0x110)
};


// Size 0x10 (Full Size[0x310] - InheritedSize[0x300]
class ShipAudioEmitterComponent: public WwiseEmitterComponent
{
public:
	class WwiseEvent*                                            WwiseEvent;                                        // 0x300(0x8)
	bool                                                         SetRTPC_Pitch;                                     // 0x308(0x1)
	bool                                                         SetRTPC_Roll;                                      // 0x309(0x1)
	bool                                                         SetRTPC_Velocity;                                  // 0x30a(0x1)
	char                                                         pad0x5_WV788[0x5];                                 // 0x30b(0x5)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class FireSettingsDataAsset: public DataAsset
{
public:
	float                                                        CharacterOnFireEffectRadius;                       // 0x28(0x4)
	char                                                         TraceChannel;                                      // 0x2c(0x1)
	char                                                         pad0x3_Q59RP[0x3];                                 // 0x2d(0x3)
	float                                                        CharacterToCharacterPropagationInterval;           // 0x30(0x4)
	float                                                        MaxInitialPropagationOffset;                       // 0x34(0x4)
	struct Status                                                BurnStatus;                                        // 0x38(0x20)
	struct Status                                                FirePropagationStatus;                             // 0x58(0x20)
	char                                                         pad0x8_H5S8H[0x8];                                 // 0x78(0x8)
};


// Size 0x70 (Full Size[0xe8] - InheritedSize[0x78]
class VulnerabilityAIAbility: public AthenaAIAbility
{
public:
	class Pawn*                                                  Owner;                                             // 0x78(0x8)
	class VulnerabilityAIAbilityParams*                          SetupAbilityParams;                                // 0x80(0x8)
	char                                                         pad0x60_X295E[0x60];                               // 0x88(0x60)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class StatConditionTargetSelector: public Object
{
public:
	char                                                         Target;                                            // 0x28(0x1)
	char                                                         pad0x7_7POM6[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllableMessagesInterface: public ObjectMessagingInterface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ZoomInOnWieldableItemPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugSuperSailorActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PursuitAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EncounterListenerInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class LightningManagerComponent: public ActorComponent
{
public:
	bool                                                         QueueLightningStrikeOnStart;                       // 0xb8(0x1)
	char                                                         pad0x7_LSV4I[0x7];                                 // 0xb9(0x7)
	class LightningManagerDataAsset*                             LightningManagerDataAsset;                         // 0xc0(0x8)
	float                                                        Radius;                                            // 0xc8(0x4)
	char                                                         pad0x4_K2OPB[0x4];                                 // 0xcc(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageDescList: public DataAsset
{
public:
	TArray<Class>                                                Tales;                                             // 0x28(0x10)
};


// Size 0x108 (Full Size[0x178] - InheritedSize[0x70]
class BTService_RunLoopingCustomAnimation: public BTService
{
public:
	bool                                                         UseFixedLoopingCustomAnimationName;                // 0x70(0x1)
	char                                                         pad0x3_W6AON[0x3];                                 // 0x71(0x3)
	struct FName                                                 FixedLoopingCustomAnimationName;                   // 0x74(0x8)
	char                                                         pad0x4_MFN8S[0x4];                                 // 0x7c(0x4)
	struct BlackboardKeySelector                                 LoopingCustomAnimationNameKey;                     // 0x80(0x28)
	bool                                                         GetAnimationDurations;                             // 0xa8(0x1)
	char                                                         pad0x7_NIPKU[0x7];                                 // 0xa9(0x7)
	struct BlackboardKeySelector                                 IntoAnimationEffectTime;                           // 0xb0(0x28)
	struct BlackboardKeySelector                                 IntoAnimationDuration;                             // 0xd8(0x28)
	struct BlackboardKeySelector                                 OutOfUndockTime;                                   // 0x100(0x28)
	struct BlackboardKeySelector                                 OutOfAnimationDuration;                            // 0x128(0x28)
	struct BlackboardKeySelector                                 AlternateOutOfAnimationIndex;                      // 0x150(0x28)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InReservedInvasionLocation: public EnvQueryTest
{
public:
	float                                                        BufferRadius;                                      // 0x170(0x4)
	char                                                         pad0x4_E3CEV[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewServiceCostumeInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ItemSnapshotMetaGenerator: public Object
{
public:
	class ScriptStruct*                                          MetaWrapper;                                       // 0x28(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class EmergentFaunaSwitchesDataAsset: public DataAsset
{
public:
	struct EmergentFaunaSwitches                                 EmergentFaunaSwitches;                             // 0x28(0x20)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class DeactivateSpawnerVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableName                                     SpawnerName;                                       // 0x80(0x30)
};


// Size 0x58 (Full Size[0x3f8] - InheritedSize[0x3a0]
class ExplosionMechanismAction: public Actor
{
public:
	class SceneComponent*                                        Base;                                              // 0x3a0(0x8)
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3a8(0x8)
	class ExplosiveComponent*                                    ExplosiveComponent;                                // 0x3b0(0x8)
	class ExplosionComponent*                                    ExplosionComponent;                                // 0x3b8(0x8)
	float                                                        Delay;                                             // 0x3c0(0x4)
	float                                                        Cooldown;                                          // 0x3c4(0x4)
	bool                                                         ApplyCooldownPostDelay;                            // 0x3c8(0x1)
	char                                                         pad0x2f_GU6JA[0x2f];                               // 0x3c9(0x2f)
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class OpenableItemComponent: public ActorComponent
{
public:
	char                                                         pad0x28_P0SN8[0x28];                               // 0xb8(0x28)
	char                                                         OpenState;                                         // 0xe0(0x1)
	bool                                                         HasEverClosed;                                     // 0xe1(0x1)
	char                                                         pad0x16_LEP5Q[0x16];                               // 0xe2(0x16)
};


// Size 0x10 (Full Size[0x2e0] - InheritedSize[0x2d0]
class SpawnActorComponent: public SceneComponent
{
public:
	class UClass*                                                ChildActorClass;                                   // 0x2d0(0x8)
	class Actor*                                                 ChildActor;                                        // 0x2d8(0x8)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class ProjectileHitRegService: public Actor
{
public:
	char                                                         pad0x8_74HR2[0x8];                                 // 0x3a0(0x8)
	struct HitRegToggleStruct                                    HitRegToggles;                                     // 0x3a8(0x10)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class KnockbackAIAbilityTriggerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_0WFN9[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildInviteeInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x158] - InheritedSize[0xb8]
class ItemProxyShipTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x10_TJCWO[0x10];                               // 0xb8(0x10)
	class ItemProxyShipTrackerComponentDataAsset*                ShipTrackingData;                                  // 0xc8(0x8)
	class Actor*                                                 CurrentShip;                                       // 0xd0(0x8)
	char                                                         pad0x80_RJD0V[0x80];                               // 0xd8(0x80)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class EquipClothingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_F5X39[0x8];                                 // 0xb8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerActivityIconDictionaryDataAsset: public DataAsset
{
public:
	TArray<struct PlayerActivityIconInfo>                        PlayerActivityIcons;                               // 0x28(0x10)
};


// Size 0x150 (Full Size[0x4f0] - InheritedSize[0x3a0]
class FortPlinthActor: public Actor
{
public:
	char                                                         pad0x8_TV2ID[0x8];                                 // 0x3a0(0x8)
	class LockComponent*                                         LockComponent;                                     // 0x3a8(0x8)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x3b0(0x8)
	class PlinthInteractableComponent*                           InteractableComponent;                             // 0x3b8(0x8)
	class SceneComponent*                                        SceneComponent;                                    // 0x3c0(0x8)
	struct StringAssetReference                                  OptionalVoyageAsset;                               // 0x3c8(0x10)
	float                                                        CooldownTime;                                      // 0x3d8(0x4)
	char                                                         pad0x34_0SLHX[0x34];                               // 0x3dc(0x34)
	class VoyageDescDataAsset*                                   OptionalVoyageDesc;                                // 0x410(0x8)
	char                                                         pad0xd8_99K0P[0xd8];                               // 0x418(0xd8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MoveToLocationActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTelemetryDescriptorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDropRedirectorInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x180] - InheritedSize[0xb8]
class WieldableItemCanvasRenderingComponent: public ActorComponent
{
public:
	char                                                         pad0x10_K078J[0x10];                               // 0xb8(0x10)
	int                                                          CanvasWidth;                                       // 0xc8(0x4)
	int                                                          CanvasHeight;                                      // 0xcc(0x4)
	struct FName                                                 PrimaryMaterialTextureParameterName;               // 0xd0(0x8)
	class MaybeCompressedCanvasRenderTarget2D*                   PrimaryRenderTarget;                               // 0xe8(0x8)
	TArray<class MaybeCompressedCanvasRenderTarget2D*>           AdditionalRenderTargets;                           // 0xf0(0x10)
	char                                                         pad0x80_5G0Y8[0x80];                               // 0x100(0x80)
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class LauncherParentMock: public Actor
{
public:
	char                                                         pad0x18_C4HA7[0x18];                               // 0x3a0(0x18)
	TArray<class Actor*>                                         IgnoreActors;                                      // 0x3b8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipsLogServiceInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class ChainLightningReceiverComponent: public ActorComponent
{
public:
	char                                                         pad0x8_QFN61[0x8];                                 // 0xb8(0x8)
	float                                                        ShockDuration;                                     // 0xc0(0x4)
	char                                                         pad0x84_D1E8K[0x84];                               // 0xc4(0x84)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveFogBankAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HandOverableInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseMermaidSuppression: public StatusResponse
{
public:
	float                                                        SuppressionDuration;                               // 0x38(0x4)
	char                                                         pad0x4_1R160[0x4];                                 // 0x3c(0x4)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class TornMapSettings: public DeveloperSettings
{
public:
	class UClass*                                                TornMapItemDescClass;                              // 0x38(0x8)
	struct StringAssetReference                                  DefaultParams;                                     // 0x40(0x10)
	char                                                         DefaultMapBlendMode;                               // 0x50(0x1)
	char                                                         pad0x3_XKDKU[0x3];                                 // 0x51(0x3)
	float                                                        DefaultMarkScale;                                  // 0x54(0x4)
	char                                                         DefaultMarkBlendMode;                              // 0x58(0x1)
	char                                                         pad0x7_4NDE6[0x7];                                 // 0x59(0x7)
};


// Size 0x10 (Full Size[0x3d0] - InheritedSize[0x3c0]
class ReapersTributeShipMusicZoneComponent: public MusicZoneComponent
{
public:
	char                                                         pad0x10_FW67K[0x10];                               // 0x3c0(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BloatingStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_SeaDamsel: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class FireBreathAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        FireBreathDurationMultiplier;                      // 0x40(0x4)
	char                                                         pad0x4_ZL5HG[0x4];                                 // 0x44(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SeaFortAddOnDataAsset: public DataAsset
{
public:
	TArray<struct SpawnTransformToPositionMapping>               PrisonerSpawnTransformToPositionMappings;          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RemoteConfigurationProviderBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class RewindDataVisualisationComponent: public ActorComponent
{
public:
	char                                                         pad0x8_RO9AC[0x8];                                 // 0xb8(0x8)
	struct RewindPhysicsServiceEntry                             RewindEntry;                                       // 0xc0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllablePulleyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialMiniIconInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SenseSearchingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PhrasesRadialDataAsset: public DataAsset
{
public:
	TArray<struct PhraseData>                                    Phrases;                                           // 0x28(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AthenaAICrewStrengthDynamicParamsDataAsset: public DataAsset
{
public:
	TArray<struct AIControllerDynamicBalancingPlayerShipValueDesc> PlayerShipSizeValues;                              // 0x28(0x10)
	int                                                          PlayerValue;                                       // 0x38(0x4)
	float                                                        Radius;                                            // 0x3c(0x4)
	TArray<struct AIControllerDynamicBalancingNamedParamMapping> PlayerCrewStrengthNamedParamMapping;               // 0x40(0x10)
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class AIShipRegionPlayerTracker: public AISpawnerPlayerTracker
{
public:
	char                                                         pad0x30_0DDGY[0x30];                               // 0x48(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HotFootStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class ContestTaleQuestService: public TaleQuestService
{
public:
	TArray<struct NPCPurchaseList>                               NPCPurchaseLists;                                  // 0x60(0x10)
};


// Size 0x60 (Full Size[0x330] - InheritedSize[0x2d0]
class MountpointComponent: public SceneComponent
{
public:
	char                                                         pad0x8_5S4RJ[0x8];                                 // 0x2d0(0x8)
	TArray<class Class*>                                         AcceptedMountableTypes;                            // 0x2d8(0x10)
	struct Rotator                                               DetachForwardDirectionRotator;                     // 0x2e8(0xc)
	float                                                        DetachOffset;                                      // 0x2f4(0x4)
	bool                                                         UseOverrideMountedCollisionProfile;                // 0x2f8(0x1)
	char                                                         pad0x17_28F26[0x17];                               // 0x2f9(0x17)
	class Object*                                                ReplicatedMountedItem;                             // 0x310(0x8)
	char                                                         pad0x10_CV589[0x10];                               // 0x318(0x10)
	bool                                                         IsMountingDisabled;                                // 0x328(0x1)
	char                                                         pad0x7_9YS79[0x7];                                 // 0x329(0x7)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class GetIsShipInOpenWaterStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        BufferRadiusInMetres;                              // 0x80(0x4)
	char                                                         pad0x4_4SRSD[0x4];                                 // 0x84(0x4)
	struct QuestVariableBool                                     Result;                                            // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetAnimationInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PlayerBuriedItemServiceMapStorePopulator: public Object
{
public:
	class PlayerBuriedItemServiceMapStorePopulatorDataAsset*     DataAsset;                                         // 0x28(0x8)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ReapersTributeShipSequenceCutsceneSpawnLocation: public Actor
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerBuriedItemServiceHaulSizeDataAsset: public DataAsset
{
public:
	TArray<struct PlayerBuriedItemServiceHaulSizeEntry>          HaulSizes;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LayerInContainerInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class LightingZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_YL076[0x8];                                 // 0x2d0(0x8)
	struct LightingZoneParameters                                LightingZoneParameters;                            // 0x2d8(0x20)
	char                                                         pad0x8_8ANLU[0x8];                                 // 0x2f8(0x8)
};


// Size 0x100 (Full Size[0x180] - InheritedSize[0x80]
class TelemetryProgressStepDesc: public TaleQuestStepDesc
{
public:
	struct FString                                               Progression;                                       // 0x80(0x10)
	struct TelemetryStepContext                                  TelemetryContext;                                  // 0x90(0xf0)
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class NPCOnSurfaceTaleQuestFunctionStepLibrary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ForceFeedbackCondition_IsOwnerLocalPlayer: public ForceFeedbackCondition
{
public:
};


// Size 0xd8 (Full Size[0x100] - InheritedSize[0x28]
class EmoteInfo: public DataAsset
{
public:
	struct EmoteData                                             EmoteData;                                         // 0x28(0xc8)
	struct StringAssetReference                                  RadialIconPath;                                    // 0xf0(0x10)
};


// Size 0x158 (Full Size[0x180] - InheritedSize[0x28]
class DeliverableRedirectionActionDataAsset: public DataAsset
{
public:
	TArray<class DeliverableRedirectionContextHandlerBase*>      Handlers;                                          // 0x28(0x10)
	TArray<class Class*>                                         OutpostBasedCompanies;                             // 0x38(0x10)
	struct FText                                                 RedirectionTooltip;                                // 0x48(0x38)
	struct FText                                                 VisitSingleFemaleNPCTooltip;                       // 0x80(0x38)
	struct FText                                                 VisitSingleMaleNPCTooltip;                         // 0xb8(0x38)
	struct FText                                                 VisitSingleCompanyNPCTooltip;                      // 0xf0(0x38)
	TArray<struct SingleNPCCompanyRedirectionData>               VisitSingleCompanyNPCTooltipOverride;              // 0x128(0x10)
	TArray<struct MultipleNPCCompaniesRedirectionData>           VisitMultipleNPCCompaniesTooltip;                  // 0x138(0x10)
	struct FText                                                 GoToOutpostTooltip;                                // 0x148(0x38)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class NPCDialogConditionalText: public Object
{
public:
	struct FText                                                 Text;                                              // 0x28(0x38)
	class NPCDialogExpression*                                   Expression;                                        // 0x60(0x8)
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class PressurePlateMechanismTriggerBase: public Actor
{
public:
	char                                                         pad0x8_A0IMJ[0x8];                                 // 0x3a0(0x8)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3a8(0x8)
	class ParticleSystem*                                        SteppedOnVFX;                                      // 0x3b0(0x8)
	float                                                        SteppedOnVFXStartTime;                             // 0x3b8(0x4)
	struct Vector                                                SteppedOnVFXLocation;                              // 0x3bc(0xc)
	struct Rotator                                               SteppedOnVFXRotation;                              // 0x3c8(0xc)
	char                                                         pad0x4_K9Q8T[0x4];                                 // 0x3d4(0x4)
	class SceneComponent*                                        Root;                                              // 0x3d8(0x8)
	class MechanismInteractionComponent*                         MechanismInteractionComponent;                     // 0x3e0(0x8)
	class BoxComponent*                                          TriggerBox;                                        // 0x3e8(0x8)
	char                                                         pad0x8_BA7EJ[0x8];                                 // 0x3f0(0x8)
	TArray<struct PressurePlateAnimationComponent>               AnimationComponents;                               // 0x3f8(0x10)
	char                                                         pad0x8_JVKEE[0x8];                                 // 0x408(0x8)
};


// Size 0x568 (Full Size[0x620] - InheritedSize[0xb8]
class ShopViewModelComponent: public ActorComponent
{
public:
	char                                                         pad0x10_X8JXY[0x10];                               // 0xb8(0x10)
	TArray<struct MaxNumVoyagesOverride>                         MaxVoyagesOwnedOverride;                           // 0xc8(0x10)
	TArray<class Class*>                                         IgnoredCompaniesForMaxVoyagesOwned;                // 0xd8(0x10)
	int                                                          StockRefreshTime;                                  // 0xe8(0x4)
	char                                                         pad0x4_KKJ4C[0x4];                                 // 0xec(0x4)
	TArray<class Class*>                                         PrioritisedVoyages;                                // 0xf0(0x10)
	struct FText                                                 EmissaryLockedCommodityOfferDescription;           // 0x100(0x38)
	struct FText                                                 OutOfStockLockedCommodityOfferDescription;         // 0x138(0x38)
	struct FText                                                 ShipCapacityLockedCommodityOfferDescription;       // 0x170(0x38)
	struct FText                                                 UnavailableDuringSaferSeasDescription;             // 0x1a8(0x38)
	struct FText                                                 AvailableAtLevelX;                                 // 0x1e0(0x38)
	struct FText                                                 AvailableToClaimInHighSeas;                        // 0x218(0x38)
	struct FText                                                 AvailableInHighSeas;                               // 0x250(0x38)
	TArray<struct CompanyCatalog>                                AllNPCCompanies;                                   // 0x288(0x10)
	char                                                         pad0x388_98JWZ[0x388];                             // 0x298(0x388)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAISkillsetList: public DataAsset
{
public:
	TArray<struct SpawnCommandsAISkillset>                       SkillsetList;                                      // 0x28(0x10)
};


// Size 0x118 (Full Size[0x4b8] - InheritedSize[0x3a0]
class DeepSeaRegionService: public Actor
{
public:
	char                                                         pad0x118_CUFXK[0x118];                             // 0x3a0(0x118)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BattleElevatorEventRoomPhasesDataAsset: public DataAsset
{
public:
	TArray<struct BattleElevatorEventRoomPhase>                  Phases;                                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandLocationVerifierInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class VulnerabilityAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        VulnerabilityDurationMultiplier;                   // 0x40(0x4)
	float                                                        MaxVulnerabilityPeriodHealthMultiplier;            // 0x44(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAIEncounterTypeList: public DataAsset
{
public:
	TArray<class AIEncounterSettings*>                           SpawnableEncounterSettings;                        // 0x28(0x10)
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class ContestMerchantSpawnerComponent: public ActorComponent
{
public:
	char                                                         pad0x30_ORM5H[0x30];                               // 0xb8(0x30)
	TArray<class CompanyShopkeeper*>                             SpawnedMerchantsArray;                             // 0xe8(0x10)
	TArray<struct MerchantSpawnData>                             MerchantSpawnDataArray;                            // 0xf8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileWeaponFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x78 (Full Size[0x130] - InheritedSize[0xb8]
class MaterialManipulationSettingsComponent: public ActorComponent
{
public:
	char                                                         pad0x8_MFDTD[0x8];                                 // 0xb8(0x8)
	struct MaterialManipulationSettings                          Settings;                                          // 0xc0(0x30)
	class MaterialInstance*                                      OverrideMaterial;                                  // 0xf0(0x8)
	char                                                         pad0x8_OTRLB[0x8];                                 // 0xf8(0x8)
	struct Transform                                             PosedTransform;                                    // 0x100(0x30)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class TrinketSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  TrinketMapDataAsset;                               // 0x38(0x10)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetDartAmmoType: public BTTaskNode
{
public:
	char                                                         DartAmmoType;                                      // 0x60(0x1)
	char                                                         pad0x7_STI4J[0x7];                                 // 0x61(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OptInDamageableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class RelinquishIslandSalvageSpawnLocationOnDestructionComponent: public ActorComponent
{
public:
};


// Size 0x8 (Full Size[0x108] - InheritedSize[0x100]
class RetractableCharacterComponent: public RetractableComponent
{
public:
	bool                                                         RetainOriginalOrientationOnRetraction;             // 0x100(0x1)
	bool                                                         RedirectRetractionToHeldItem;                      // 0x101(0x1)
	char                                                         pad0x6_X99OD[0x6];                                 // 0x102(0x6)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class VfxSelectorDataAsset: public DataAsset
{
public:
	struct VfxSelectorEntry                                      MinDefaultEffectParams;                            // 0x28(0x28)
	TArray<struct VfxSelectorRange>                              Ranges;                                            // 0x50(0x10)
	struct VfxSelectorEntry                                      MaxDefaultEffectParams;                            // 0x60(0x28)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class WorldSequenceService: public Object
{
public:
	char                                                         pad0x78_6UK75[0x78];                               // 0x28(0x78)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class IslandEventHUDData: public DataAsset
{
public:
	TArray<class Class*>                                         EventTypes;                                        // 0x28(0x10)
	struct Vector2D                                              IslandIconSize;                                    // 0x38(0x8)
	struct Vector2D                                              HeaderIconSize;                                    // 0x40(0x8)
	float                                                        HeaderYOffset;                                     // 0x48(0x4)
	float                                                        TriggerLerpAtZoomLevel;                            // 0x4c(0x4)
	struct CanvasLerpData                                        LerpData;                                          // 0x50(0x10)
	struct CanvasLerpData                                        HighlightLerpData;                                 // 0x60(0x10)
	struct CanvasLerpData                                        FadeInOutData;                                     // 0x70(0x10)
	float                                                        MarkerHighlightRadiusAdjuster;                     // 0x80(0x4)
	struct Vector2D                                              MarkerHighlightCentreOffset;                       // 0x84(0x8)
	float                                                        MarkerHighlightScale;                              // 0x8c(0x4)
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class ShipCreatureManagerComponent: public ActorComponent
{
public:
	TArray<struct ActorComponentSelector>                        CreatureMeshComponents;                            // 0xb8(0x10)
	TArray<struct ShipCreatureManagerCreatureInstance>           CreatureInstances;                                 // 0xc8(0x10)
	class SceneComponent*                                        CreatureMeshAttachParent;                          // 0xd8(0x8)
	char                                                         pad0x58_XLA4W[0x58];                               // 0xe0(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewMemberInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RevealableServiceSettingsDataAsset: public DataAsset
{
public:
	class RevealableSceneMappingsDataAsset*                      SceneTypeMappingsDataAsset;                        // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RammableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnboardingFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchableProjectileInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x478] - InheritedSize[0x3a0]
class IgnitableMechanismTrigger: public Actor
{
public:
	char                                                         pad0x8_1H9TU[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3a8(0x8)
	class TimedFlammableComponent*                               FlammableComponent;                                // 0x3b0(0x8)
	class LightWeightStatusEffectManagerComponent*               StatusEffectManagerComponent;                      // 0x3b8(0x8)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3c0(0x8)
	char                                                         pad0xb0_VVDIG[0xb0];                               // 0x3c8(0xb0)
};


// Size 0xd8 (Full Size[0x190] - InheritedSize[0xb8]
class InvasionBattleBoundsComponent: public ActorComponent
{
public:
	char                                                         pad0x48_1AWH9[0x48];                               // 0xb8(0x48)
	class PostProcessComponent*                                  BattleBoundsPostProcessComponent;                  // 0x100(0x8)
	class Actor*                                                 HourglassOfFate;                                   // 0x108(0x8)
	class MaterialManipulationComponent*                         HourglassOfFateMaterialManipulationComponent;      // 0x110(0x8)
	class ParticleSystemComponent*                               HourglassOfFateParticleSystemComponent;            // 0x118(0x8)
	float                                                        MaxEffectsT;                                       // 0x120(0x4)
	char                                                         pad0x4_783RZ[0x4];                                 // 0x124(0x4)
	class Object*                                                ExplosionParticleSystem;                           // 0x128(0x8)
	class Object*                                                HourglassOfFateParticleSystemReaper;               // 0x130(0x8)
	class Object*                                                HourglassOfFateParticleSystemAthena;               // 0x138(0x8)
	float                                                        HourglassOfFateParticleSystemStartT;               // 0x140(0x4)
	struct Vector                                                HourglassOfFateParticleSystemOffset;               // 0x144(0xc)
	class UClass*                                                AthenaFaction;                                     // 0x150(0x8)
	class WwiseObjectPoolWrapper*                                HourglassEmitterPool;                              // 0x158(0x8)
	class WwiseEvent*                                            InitialBoundaryTellSfx;                            // 0x160(0x8)
	class WwiseEvent*                                            FinalBoundaryExplosionSfx;                         // 0x168(0x8)
	class WwiseEvent*                                            BoundaryBuildUpLoopStart;                          // 0x170(0x8)
	class WwiseEvent*                                            BoundaryBuildUpLoopEnd;                            // 0x178(0x8)
	char                                                         pad0x10_1D1LS[0x10];                               // 0x180(0x10)
};


// Size 0x80 (Full Size[0x680] - InheritedSize[0x600]
class InstrumentKeyComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_PC3WT[0x8];                                 // 0x600(0x8)
	int                                                          KeyID;                                             // 0x608(0x4)
	int                                                          OctaveID;                                          // 0x60c(0x4)
	bool                                                         SelectedByDefault;                                 // 0x610(0x1)
	char                                                         pad0x3_5K8TK[0x3];                                 // 0x611(0x3)
	struct NavigationOptions                                     NavigationOptions;                                 // 0x614(0x10)
	char                                                         pad0x4_SBY4D[0x4];                                 // 0x624(0x4)
	class WwiseEvent*                                            KeyPressSFX;                                       // 0x628(0x8)
	class WwiseEvent*                                            KeyReleaseSFX;                                     // 0x630(0x8)
	float                                                        HighlightValue;                                    // 0x638(0x4)
	float                                                        PressedValue;                                      // 0x63c(0x4)
	struct FName                                                 DepressionParamName;                               // 0x640(0x8)
	class MaterialInstanceDynamic*                               DynamicMaterialInstance;                           // 0x648(0x8)
	char                                                         pad0x30_28ES8[0x30];                               // 0x650(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DeliverableCollectorsChestRequirement: public DeliverableRequirementBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialContextBase: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class UnlockLockConditionalStatTrigger: public Object
{
public:
	struct PlayerStat                                            Stat;                                              // 0x28(0x4)
	char                                                         pad0x4_6YCLV[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuriedItemInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x1a0] - InheritedSize[0x138]
class AshenLordAIFormComponent: public AthenaAIFormComponent
{
public:
	class WwiseEvent*                                            AshenLordVulnerabilityDamageAudioEvent;            // 0x138(0x8)
	struct FName                                                 AshenLordHeartBeatShaderParamName;                 // 0x140(0x8)
	class UClass*                                                CameraShake;                                       // 0x168(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x170(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x174(0x4)
	class MaterialInstanceDynamic*                               AshenLordDynamicMaterialInstance;                  // 0x178(0x8)
	float                                                        CachedNormalisedHealthScalar;                      // 0x180(0x4)
	bool                                                         IsInVulnerability;                                 // 0x184(0x1)
	char                                                         pad0x1b_D8ZP4[0x1b];                               // 0x185(0x1b)
};


// Size 0x5e8 (Full Size[0x988] - InheritedSize[0x3a0]
class CrewShipManifest: public Actor
{
public:
	char                                                         pad0x28_AAL9R[0x28];                               // 0x3a0(0x28)
	class NPCIdAsset*                                            NPCIdList;                                         // 0x3c8(0x8)
	char                                                         pad0x2d0_YKPT9[0x2d0];                             // 0x3d0(0x2d0)
	class UClass*                                                AssociatedShipSize;                                // 0x6a0(0x8)
	char                                                         pad0x10_6KLKM[0x10];                               // 0x6a8(0x10)
	TArray<class Interface*>                                     VoyageVoteUpdaters;                                // 0x6b8(0x10)
	TArray<class Interface*>                                     VoyageCancellers;                                  // 0x6c8(0x10)
	char                                                         pad0x10_JQMGI[0x10];                               // 0x6d8(0x10)
	TArray<class Interface*>                                     TaleVoteUpdaters;                                  // 0x6e8(0x10)
	TArray<class Interface*>                                     TaleCancellers;                                    // 0x6f8(0x10)
	class ShipCustomizationLoadoutComponent*                     ShipCustomizationLoadoutComponent;                 // 0x708(0x8)
	class TrinketLoadoutComponent*                               TrinketLoadoutComponent;                           // 0x710(0x8)
	class ShipEntitlementComponent*                              ShipEntitlementComponent;                          // 0x718(0x8)
	char                                                         pad0xa8_WOUCL[0xa8];                               // 0x720(0xa8)
	bool                                                         EmissaryMaxRankQuestBeenRedeemed;                  // 0x7c8(0x1)
	bool                                                         IsShipAssociated;                                  // 0x7c9(0x1)
	bool                                                         IsPendingExCaptainedShipDissociation;              // 0x7ca(0x1)
	bool                                                         ShouldForceSpawnOnShip;                            // 0x7cb(0x1)
	char                                                         pad0x2c_12HCE[0x2c];                               // 0x7cc(0x2c)
	TArray<struct CommodityTrackingModel>                        CommodityPurchases;                                // 0x7f8(0x10)
	TArray<struct CommodityRedemptionTrackingModel>              CommodityRedemptions;                              // 0x808(0x10)
	struct VoteSessionData                                       VoyageSelectionVoteData;                           // 0x818(0x28)
	struct VoteSessionData                                       VoyageCancelVoteData;                              // 0x840(0x28)
	struct VoteSessionData                                       TaleSelectionVoteData;                             // 0x868(0x28)
	struct VoteSessionData                                       TaleCancelVoteData;                                // 0x890(0x28)
	struct Guid                                                  AssociatedCrew;                                    // 0x8b8(0x10)
	TArray<struct ProposedVoyageEntry>                           ProposedVoyages;                                   // 0x8c8(0x10)
	struct ProposedVoyageEntry                                   CurrentActiveVoyage;                               // 0x8d8(0x50)
	TArray<struct BeckonTag>                                     CrewBeckonTags;                                    // 0x928(0x10)
	TArray<struct ProposedTaleEntry>                             ProposedTales;                                     // 0x938(0x10)
	class VoyageDescDataAsset*                                   CurrentActiveTale;                                 // 0x948(0x8)
	int                                                          ReapersVoyageCount;                                // 0x950(0x4)
	char                                                         pad0x4_SVRHS[0x4];                                 // 0x954(0x4)
	class ShipPersistenceComponent*                              ShipPersistenceComponent;                          // 0x958(0x8)
	class Company*                                               CurrentActiveEmissaryCompany;                      // 0x960(0x8)
	struct Guid                                                  CurrentActiveEmissarySessionId;                    // 0x968(0x10)
	int                                                          CurrentEmissaryTotal;                              // 0x980(0x4)
	bool                                                         IsCaptained;                                       // 0x984(0x1)
	char                                                         pad0x3_GYHHR[0x3];                                 // 0x985(0x3)
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class DelayStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        Delay;                                             // 0x80(0x4)
	char                                                         pad0x4_1D0D6[0x4];                                 // 0x84(0x4)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetIsShipInOpenWaterStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_LM7RJ[0x8];                                 // 0x98(0x8)
};


// Size 0x220 (Full Size[0x5c0] - InheritedSize[0x3a0]
class SummonMegalodonRitualTable: public Actor
{
public:
	char                                                         pad0x8_DEK1H[0x8];                                 // 0x3a0(0x8)
	struct FName                                                 MeshName;                                          // 0x3a8(0x8)
	struct FName                                                 MusicGlowParameterName;                            // 0x3b0(0x8)
	float                                                        RitualFailRate;                                    // 0x3b8(0x4)
	float                                                        RitualTime;                                        // 0x3bc(0x4)
	float                                                        PlateVFXTime;                                      // 0x3c0(0x4)
	char                                                         pad0x4_RGQ99[0x4];                                 // 0x3c4(0x4)
	TArray<struct PlateData>                                     PlateData;                                         // 0x3c8(0x10)
	float                                                        RitualDisabledScalar;                              // 0x3d8(0x4)
	float                                                        RitualCompleteScalar;                              // 0x3dc(0x4)
	class WwiseEvent*                                            PlayRitualAudioEvent;                              // 0x3e0(0x8)
	class WwiseEvent*                                            StopRitualAudioEvent;                              // 0x3e8(0x8)
	class WwiseEvent*                                            PlayPrimedAudioLoopEvent;                          // 0x3f0(0x8)
	class WwiseEvent*                                            StopPrimedAudioLoopEvent;                          // 0x3f8(0x8)
	class WwiseEvent*                                            PlayRitualCompleteAudioEvent;                      // 0x400(0x8)
	class WwiseObjectPoolWrapper*                                RitualTableAudioPool;                              // 0x408(0x8)
	struct PlayerStat                                            StatToFireOnShantyPuzzleComplete;                  // 0x410(0x4)
	char                                                         pad0x24_DMM7W[0x24];                               // 0x414(0x24)
	TArray<class ParticleSystemComponent*>                       RitualParticleSystems;                             // 0x438(0x10)
	TArray<class ParticleSystemComponent*>                       CompleteParticleSystems;                           // 0x448(0x10)
	class MaterialInstanceDynamic*                               WispsMaterialInstanceDynamic;                      // 0x458(0x8)
	class MaterialInstanceDynamic*                               TableMaterialInstanceDynamic;                      // 0x460(0x8)
	TArray<char>                                                 ActiveTypes;                                       // 0x468(0x10)
	TArray<struct Guid>                                          ParticipatingCrews;                                // 0x478(0x10)
	char                                                         RitualState;                                       // 0x488(0x1)
	char                                                         pad0x137_HBSEZ[0x137];                             // 0x489(0x137)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnboardCharacterTrackerInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GhostCharacterAudioComponentParams: public DataAsset
{
public:
	struct FName                                                 PlayerStateName;                                   // 0x28(0x8)
	struct FName                                                 PlayerStateGhostShip;                              // 0x30(0x8)
	struct FName                                                 PlayerStateDefault;                                // 0x38(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentMoveXInputId: public AnalogInputId
{
public:
};


// Size 0x8 (Full Size[0xc8] - InheritedSize[0xc0]
class WaterBarrelAdaptiveTriggerComponent: public AdaptiveTriggerComponent
{
public:
	struct AdaptiveTriggerEffectMode_Feedback                    RightTrigger_PullHandle;                           // 0xc0(0x3)
	char                                                         pad0x5_RM806[0x5];                                 // 0xc3(0x5)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BlowpipeDartCollectionDataAsset: public DataAsset
{
public:
	TArray<class BlowpipeDartDataAsset*>                         Darts;                                             // 0x28(0x10)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class ScreenSpaceVFXComponentParams: public DataAsset
{
public:
	float                                                        EffectStrengthSpringAcceleration;                  // 0x28(0x4)
	char                                                         pad0x4_ZNGB4[0x4];                                 // 0x2c(0x4)
	class CurveFloat*                                            EffectStrengthOverTimeCurve;                       // 0x30(0x8)
	float                                                        ContinuousDamageStrengthSpringAcceleration;        // 0x38(0x4)
	char                                                         pad0x4_4B739[0x4];                                 // 0x3c(0x4)
	class CurveFloat*                                            ContinuousDamageTimeCurve;                         // 0x40(0x8)
	float                                                        ContinuousDamageMaxDamageValue;                    // 0x48(0x4)
	float                                                        ContinuousDamageMaxDamageStrength;                 // 0x4c(0x4)
	float                                                        ContinuousDamageCycleTime;                         // 0x50(0x4)
	struct FName                                                 VFXNameDamage;                                     // 0x54(0x8)
	char                                                         pad0x4_QAPOI[0x4];                                 // 0x5c(0x4)
	struct FString                                               DirectionalDamageIndicatorParameterName;           // 0x60(0x10)
	float                                                        DirectionalDamageIndicatorLifetime;                // 0x70(0x4)
	char                                                         pad0x4_08SU7[0x4];                                 // 0x74(0x4)
	class CurveFloat*                                            DrowningEffectStrengthOverTimeCurve;               // 0x78(0x8)
	struct FName                                                 VFXNameDrowning;                                   // 0x80(0x8)
	struct FName                                                 VFXNameStunned;                                    // 0x88(0x8)
	struct FName                                                 VFXNameBoundsDarkness;                             // 0x90(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetworkedEventsWhitelistInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OwnedByShipBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x138 (Full Size[0x1f0] - InheritedSize[0xb8]
class CutsceneComponent: public ActorComponent
{
public:
	char                                                         pad0x10_0VVT7[0x10];                               // 0xb8(0x10)
	TArray<struct Text>                                          LocalisedNames;                                    // 0xc8(0x10)
	class CutsceneDataAsset*                                     CutsceneAsset;                                     // 0xd8(0x8)
	class Actor*                                                 CutSceneActor;                                     // 0xe0(0x8)
	class UClass*                                                CutsceneActorType;                                 // 0xe8(0x8)
	float                                                        MaxPlayRange;                                      // 0x100(0x4)
	float                                                        DelayBeforeDequeueAttempt;                         // 0x104(0x4)
	char                                                         pad0xe8_XMXLE[0xe8];                               // 0x108(0xe8)
};


// Size 0xb8 (Full Size[0x458] - InheritedSize[0x3a0]
class PledgeToReapersVoteInteractionActor: public Actor
{
public:
	char                                                         pad0x8_A0735[0x8];                                 // 0x3a0(0x8)
	class BoxedRpcDispatcherComponent*                           BoxedRpcDispatcherComponent;                       // 0x3a8(0x8)
	class PledgeToReapersVoteAudioComponent*                     PledgeToReapersVoteAudioComponent;                 // 0x3b0(0x8)
	char                                                         pad0xa0_4HHWN[0xa0];                               // 0x3b8(0xa0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StarPointInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class CutsceneTimestampComponent: public ActorComponent
{
public:
	char                                                         pad0x48_GT3I4[0x48];                               // 0xb8(0x48)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class ContentEngagementMessageParams: public DataAsset
{
public:
	struct FText                                                 Title;                                             // 0x28(0x38)
	struct FText                                                 Body;                                              // 0x60(0x38)
	struct StringAssetReference                                  KeyArt;                                            // 0x98(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ReplacePagesStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DivingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x80 (Full Size[0x820] - InheritedSize[0x7a0]
class PoseableMeshMemoryConstraintComponent: public PoseableMeshComponent
{
public:
	char                                                         pad0x18_19M2V[0x18];                               // 0x7a0(0x18)
	class MeshMemoryConstraintHandler*                           Handler;                                           // 0x7b8(0x8)
	TArray<struct StringAssetReference>                          FallbackOverrideMaterials;                         // 0x7c0(0x10)
	class UClass*                                                MeshFallbackCategory;                              // 0x7d0(0x8)
	struct StringAssetReference                                  MeshReference;                                     // 0x7d8(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x7f0(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x7f1(0x1)
	char                                                         pad0x6_T8JHD[0x6];                                 // 0x7f2(0x6)
	class UClass*                                                BudgetToCountMemoryAgainstIfNoFallback;            // 0x7f8(0x8)
	struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0x800(0xc)
	char                                                         pad0x4_LSQGE[0x4];                                 // 0x80c(0x4)
	char                                                         pad0x10_TRMZJ[0x10];                               // 0x810(0x10)
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class GetDigsiteProgressTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableInt                                      InDigsiteID;                                       // 0x80(0x30)
	struct QuestVariableInt                                      OutNumberOfDigsRemainingInDigsite;                 // 0xb0(0x30)
	struct QuestVariableInt                                      OutNumberOfBuriedActorsInDigsite;                  // 0xe0(0x30)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InteractableLightParameters: public DataAsset
{
public:
	bool                                                         LiveUpdate;                                        // 0x28(0x1)
	bool                                                         StartLit;                                          // 0x29(0x1)
	char                                                         pad0x6_LZ8OU[0x6];                                 // 0x2a(0x6)
	TArray<struct InteractableLightParams>                       LightParams;                                       // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class DoubleIntentComponent: public ActorComponent
{
public:
	char                                                         pad0x8_IJEJU[0x8];                                 // 0xb8(0x8)
	float                                                        ServerFirstIntent;                                 // 0xc0(0x4)
	char                                                         pad0x4_H4K2Z[0x4];                                 // 0xc4(0x4)
	float                                                        ServerSecondIntent;                                // 0xc8(0x4)
	char                                                         pad0x4_M9NSG[0x4];                                 // 0xcc(0x4)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class PortableHarpoonInteractionIgnoreObstructionComponent: public ActorComponent
{
public:
	TArray<struct ActorComponentSelector>                        ComponentsToIgnoreForObstructions;                 // 0xb8(0x10)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class StatFireOnItemNPCHandinComponent: public ActorComponent
{
public:
	char                                                         pad0x8_VFXGI[0x8];                                 // 0xb8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class UnlockableEntitlementsDataAsset: public DataAsset
{
public:
	TArray<struct UnlockableEntitlementCategory>                 Categories;                                        // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EncounterServiceInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xa8] - InheritedSize[0x80]
class SharkPartsDesc: public MeshMemoryConstraintsAIPartsDesc
{
public:
	struct FString                                               SharkPartsTag;                                     // 0x80(0x10)
	struct SharkPlayerStats                                      SharkPlayerStats;                                  // 0x90(0x8)
	TArray<struct SharkMaterialEntry>                            Materials;                                         // 0x98(0x10)
};


// Size 0x398 (Full Size[0x738] - InheritedSize[0x3a0]
class BootyStorageService: public Actor
{
public:
	char                                                         pad0x88_MKVM0[0x88];                               // 0x3a0(0x88)
	class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x428(0x8)
	class BootyStorageSettingsAsset*                             BootyStorageSettingsAsset;                         // 0x430(0x8)
	TArray<struct CrewBootyStorage>                              Storage;                                           // 0x438(0x10)
	struct EnvQueryRequest                                       SpawnBootyEQSRequest;                              // 0x448(0x170)
	struct EnvQueryRequest                                       SpawnRetrievalActorEQSRequest;                     // 0x5b8(0x170)
	char                                                         pad0x10_YEHDB[0x10];                               // 0x728(0x10)
};


// Size 0x1a8 (Full Size[0x260] - InheritedSize[0xb8]
class PlayerMigratableStatusComponent: public ActorComponent
{
public:
	char                                                         pad0x188_LV4WI[0x188];                             // 0xb8(0x188)
	class Actor*                                                 CurrentShip;                                       // 0x240(0x8)
	char                                                         pad0x18_XM2Y6[0x18];                               // 0x248(0x18)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class DartCharacterBoneOffsets: public DataAsset
{
public:
	TArray<String>                                               ChestBoneNames;                                    // 0x28(0x10)
	float                                                        FemaleDefaultBodyLimbsOffset;                      // 0x38(0x4)
	float                                                        FemaleDefaultBodyChestOffset;                      // 0x3c(0x4)
	float                                                        MaleDefaultBodyLimbsOffset;                        // 0x40(0x4)
	float                                                        MaleDefaultBodyChestOffset;                        // 0x44(0x4)
	float                                                        FemaleAthleticBodyLimbsOffset;                     // 0x48(0x4)
	float                                                        FemaleAthleticBodyChestOffset;                     // 0x4c(0x4)
	float                                                        MaleAthleticBodyLimbsOffset;                       // 0x50(0x4)
	float                                                        MaleAthleticBodyChestOffset;                       // 0x54(0x4)
	float                                                        FemaleThinBodyLimbsOffset;                         // 0x58(0x4)
	float                                                        FemaleThinBodyChestOffset;                         // 0x5c(0x4)
	float                                                        MaleThinBodyLimbsOffset;                           // 0x60(0x4)
	float                                                        MaleThinBodyChestOffset;                           // 0x64(0x4)
	float                                                        FemaleLargeBodyLimbsOffset;                        // 0x68(0x4)
	float                                                        FemaleLargeBodyChestOffset;                        // 0x6c(0x4)
	float                                                        MaleLargeBodyLimbsOffset;                          // 0x70(0x4)
	float                                                        MaleLargeBodyChestOffset;                          // 0x74(0x4)
	float                                                        FemaleUnfitBodyLimbsOffset;                        // 0x78(0x4)
	float                                                        FemaleUnfitBodyChestOffset;                        // 0x7c(0x4)
	float                                                        MaleUnfitBodyLimbsOffset;                          // 0x80(0x4)
	float                                                        MaleUnfitBodyChestOffset;                          // 0x84(0x4)
	float                                                        FaunaOffset;                                       // 0x88(0x4)
	char                                                         pad0x4_2UF1H[0x4];                                 // 0x8c(0x4)
};


// Size 0x50 (Full Size[0x190] - InheritedSize[0x140]
class InteractableStorageContainer: public InteractableComponent
{
public:
	char                                                         pad0x40_DBLLM[0x40];                               // 0x140(0x40)
	class Object*                                                Aggregator;                                        // 0x180(0x8)
	class UClass*                                                InteractInput;                                     // 0x188(0x8)
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class PlayNpcAnimationResourceStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    TargetNpc;                                         // 0x80(0x30)
	struct QuestVariableActor                                    PlaceableReaction;                                 // 0xb0(0x30)
	class PlayNpcAnimationResource*                              PlayNpcAnimationResource;                          // 0xe0(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CustomScoreItemValuesDataAsset: public DataAsset
{
public:
	struct FString                                               Category;                                          // 0x28(0x10)
	TArray<struct CustomScoreItemValue>                          ItemValues;                                        // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeferredSpawnInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanXMouseInputId: public AnalogInputId
{
public:
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class SequenceComponent: public ActorComponent
{
public:
	char                                                         pad0x30_SKFOF[0x30];                               // 0xb8(0x30)
	TArray<int>                                                  Sequence;                                          // 0xe8(0x10)
	bool                                                         ResetOnError;                                      // 0xf8(0x1)
	bool                                                         SequenceComplete;                                  // 0xf9(0x1)
	char                                                         pad0x6_S66ZG[0x6];                                 // 0xfa(0x6)
	TArray<struct SequenceResponseContainer>                     Responses;                                         // 0x100(0x10)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class OverlapTriggerActor: public Actor
{
public:
	class CapsuleComponent*                                      SceneComponent;                                    // 0x3a0(0x8)
	class OverlapTriggerComponent*                               OverlapComponent;                                  // 0x3a8(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryInteractNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FeedableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleCrouchNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DrowningComponentInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class GameAudioService: public Object
{
public:
	char                                                         pad0x8_2OIU9[0x8];                                 // 0x28(0x8)
	TArray<class Ship*>                                          ClientRegisteredShips;                             // 0x30(0x10)
	char                                                         pad0x18_06T4O[0x18];                               // 0x40(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ScrambledNamesComponentInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForArrivalTunnelOfTheDamnedCompletionTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableGuid                                     CrewId;                                            // 0x80(0x30)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class DiscardTransientActorStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Actor;                                             // 0x80(0x30)
	char                                                         DiscardType;                                       // 0xb0(0x1)
	char                                                         pad0x7_TF4T7[0x7];                                 // 0xb1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationLadderBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class PortableHarpoonNonOverlapInteractionOverrideComponent: public ActorComponent
{
public:
	struct Vector                                                Origin;                                            // 0xb8(0xc)
	bool                                                         IsSphereVolume;                                    // 0xc4(0x1)
	char                                                         pad0x3_RUO9K[0x3];                                 // 0xc5(0x3)
	float                                                        SphereRadius;                                      // 0xc8(0x4)
	struct Vector                                                BoxExtents;                                        // 0xcc(0xc)
	bool                                                         BlockGrappling;                                    // 0xd8(0x1)
	bool                                                         BlockItemRetraction;                               // 0xd9(0x1)
	bool                                                         BlockCharacterRetraction;                          // 0xda(0x1)
	char                                                         pad0x25_SMI5C[0x25];                               // 0xdb(0x25)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VulnerabilityLayerStateManagerInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x1a0] - InheritedSize[0x170]
class EnvQueryTest_InStorm: public EnvQueryTest
{
public:
	struct AIDataProviderFloatValue                              Radius;                                            // 0x170(0x30)
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class LookAtEmoteCameraComponent: public ActorComponent
{
public:
	class AthenaCameraComponent*                                 TargetCamera;                                      // 0xb8(0x8)
	float                                                        BlendInTime;                                       // 0xc0(0x4)
	float                                                        AttachedTargetLerpFactor;                          // 0xc4(0x4)
	char                                                         pad0x38_A7PMR[0x38];                               // 0xc8(0x38)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonFireNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x98 (Full Size[0xd0] - InheritedSize[0x38]
class SwitchesSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  EmergentAISwitchesDataAsset;                       // 0x38(0x10)
	struct StringAssetReference                                  EmergentFaunaSwitchesDataAsset;                    // 0x48(0x10)
	struct StringAssetReference                                  EmergentWatercraftSwitchesDataAsset;               // 0x58(0x10)
	struct StringAssetReference                                  EventsSchedulerSwitchesDataAsset;                  // 0x68(0x10)
	struct StringAssetReference                                  EntitlementSwitchesDataAsset;                      // 0x78(0x10)
	struct StringAssetReference                                  ModifiedStorageSwitchesDataAsset;                  // 0x88(0x10)
	struct StringAssetReference                                  ModifiedLoadoutSwitchesDataAsset;                  // 0x98(0x10)
	struct StringAssetReference                                  SwitchDefinitionsDataAsset;                        // 0xa8(0x10)
	struct StringAssetReference                                  SwitchPresetDataAsset;                             // 0xb8(0x10)
	float                                                        ServicesLagSimulationInSeconds;                    // 0xc8(0x4)
	char                                                         pad0x4_GDGQB[0x4];                                 // 0xcc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunParticipantInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class SwitchesDataTypeManagerBase: public Object
{
public:
	char                                                         pad0x38_YB46C[0x38];                               // 0x28(0x38)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SplutterStatus: public StatusBase
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleQuestStatQueryFunctionComparator: public Object
{
public:
	char                                                         pad0x8_9W0RX[0x8];                                 // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIKnockbackActionStateId: public ActionStateId
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class IslandMaterialStatusZone: public Object
{
public:
	char                                                         pad0x10_FFKXT[0x10];                               // 0x28(0x10)
	TArray<struct IslandMaterialZoneStatusMapping>               StatusMappings;                                    // 0x38(0x10)
	char                                                         pad0x50_H008M[0x50];                               // 0x48(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RammerInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x298] - InheritedSize[0x288]
class ShantyRadialActivationInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x10_5P5ME[0x10];                               // 0x288(0x10)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class StatusResponseScreenSpaceVFX: public StatusResponse
{
public:
	struct FName                                                 MaterialParamName;                                 // 0x38(0x8)
	struct FName                                                 TintParamName;                                     // 0x40(0x8)
	struct LinearColor                                           TintColor;                                         // 0x48(0x10)
	float                                                        EffectStrength;                                    // 0x58(0x4)
	float                                                        FadeInAcceleration;                                // 0x5c(0x4)
	float                                                        FadeOutAcceleration;                               // 0x60(0x4)
	char                                                         pad0x4_HE2X8[0x4];                                 // 0x64(0x4)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TelemetryProgressStep: public TaleQuestStep
{
public:
	class TelemetryProgressStepDesc*                             StepDesc;                                          // 0x98(0x8)
};


// Size 0xb0 (Full Size[0x130] - InheritedSize[0x80]
class TaleQuestBlueprintStepDesc: public TaleQuestStepDesc
{
public:
	char                                                         pad0xa0_PV03Q[0xa0];                               // 0x80(0xa0)
	class UClass*                                                StepType;                                          // 0x120(0x8)
	class BlueprintStepBase*                                     StepInstance;                                      // 0x128(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class ResolveActorStringReferenceStep: public TaleQuestStep
{
public:
	class ResolveActorStringReferenceStepDesc*                   Desc;                                              // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterFootImpactMeshInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class BakedDecalComponent: public ActorComponent
{
public:
	int                                                          TargetTextureSize;                                 // 0xb8(0x4)
	struct LinearColor                                           ClearColour;                                       // 0xbc(0x10)
	int                                                          MaxDeferredDecals;                                 // 0xcc(0x4)
	class TextureRenderTarget2D*                                 TargetTexture;                                     // 0xd0(0x8)
	TArray<class StaticMeshComponent*>                           StaticMeshes;                                      // 0xd8(0x10)
	TArray<struct DeferredBakedDecal>                            DeferredDecals;                                    // 0xe8(0x10)
	char                                                         pad0x8_DLMNI[0x8];                                 // 0xf8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindTransformProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhrasesRadialInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class ItemRepresentationCountMaterialDisplayComponent: public CountMaterialDisplayComponent
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ClearTaleProgressStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LiquidLauncherChargeVisualsProviderInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class SpawnPhasedActorStep: public TaleQuestStep
{
public:
	class SpawnPhasedActorStepDesc*                              Desc;                                              // 0x98(0x8)
	char                                                         pad0x30_5IRAK[0x30];                               // 0xa0(0x30)
};


// Size 0x18 (Full Size[0x90] - InheritedSize[0x78]
class AshCloudAIAbility: public AthenaAIAbility
{
public:
	class Pawn*                                                  Owner;                                             // 0x78(0x8)
	class AshCloudAIAbilityParams*                               SetupAbilityParams;                                // 0x80(0x8)
	class AshenLordAshCloud*                                     AshCloudInstance;                                  // 0x88(0x8)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class LandmarkReactionActor: public Actor
{
public:
	char                                                         pad0x8_T035J[0x8];                                 // 0x3a0(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestSetNPCDialogKeyStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlockImpactProxyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildChroniclesInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x300] - InheritedSize[0x2d0]
class NameplateComponent: public SceneComponent
{
public:
	float                                                        FadeTime;                                          // 0x2d0(0x4)
	char                                                         pad0x4_24V39[0x4];                                 // 0x2d4(0x4)
	class SkeletalMeshSocket*                                    NameplateSocket;                                   // 0x2d8(0x8)
	char                                                         pad0x20_JFYMG[0x20];                               // 0x2e0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BalancingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotifyQuestBookForcePageRedraw: public AnimNotify
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class ClientMemoryReservationActor: public Actor
{
public:
	char                                                         pad0x10_IYIB1[0x10];                               // 0x3a0(0x10)
};


// Size 0x48 (Full Size[0x3e8] - InheritedSize[0x3a0]
class HideoutEntrance: public Actor
{
public:
	class BoxComponent*                                          TriggerZoneComponent;                              // 0x3a0(0x8)
	TArray<class SpawnLocation*>                                 HideoutExitSpawnPoints;                            // 0x3a8(0x10)
	char                                                         pad0x30_PIHSQ[0x30];                               // 0x3b8(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckNameGeneratorAbstract: public Object
{
public:
};


// Size 0x3d0 (Full Size[0x488] - InheritedSize[0xb8]
class PopUpNotificationComponent: public ActorComponent
{
public:
	class RewardPopUpNotificationCollectionDataAsset*            RewardPopUpNotificationCollection;                 // 0xb8(0x8)
	TArray<class DeferralReasonPopUpNotificationDataAsset*>      DeferralReasonPopUpNotifications;                  // 0xc0(0x10)
	TArray<class CampaignPopUpNotificationDataAsset*>            CampaignPopUpNotifications;                        // 0xd0(0x10)
	class PopUpMessageDesc*                                      PeriodicObjectiveCompletePopUp;                    // 0xe0(0x8)
	class PopUpMessageDesc*                                      PeriodicObjectiveIncompletePopUp;                  // 0xe8(0x8)
	class PopUpMessageDesc*                                      NPCOnBeachFlowPopUpNoTaleCheckpointVoyage;         // 0xf0(0x8)
	class PopUpMessageDesc*                                      NPCOnBeachFlowPopUpHasTaleCheckpointVoyage;        // 0xf8(0x8)
	class PopUpMessageDesc*                                      GuildCosmeticEntitlementRemovedPopup;              // 0x100(0x8)
	class PopUpMessageDesc*                                      AncientKnowledgeGainedPopup;                       // 0x108(0x8)
	TArray<struct AlignmentOfTypePopUpInformation>               AlignmentOfTypePopUpInformation;                   // 0x110(0x10)
	struct MermaidServicePopUpData                               MermaidToggledPopUpData;                           // 0x120(0x10)
	TArray<struct NewVoyagesAvailablePerCompanyPopupMessage>     NewVoyagesAvailableToPlayerPrompts;                // 0x130(0x10)
	class CrewNotificationSettings*                              CrewNotificationDataAsset;                         // 0x140(0x8)
	class CaptainsLogbookAccoladeLocalisedTextDefinitionAsset*   AccoladeLocalisedTextDefinitionAsset;              // 0x148(0x8)
	TArray<class Class*>                                         Factions;                                          // 0x150(0x10)
	TArray<struct DistinctionBanners>                            DistinctionBanners;                                // 0x160(0x10)
	char                                                         pad0x18_S108K[0x18];                               // 0x170(0x18)
	struct EmissaryNotificationState                             EmissaryState;                                     // 0x188(0xc)
	char                                                         pad0x4_Y9OE1[0x4];                                 // 0x194(0x4)
	class PopUpMessageDesc*                                      NewTitlesAvailableToBuyPopUp;                      // 0x198(0x8)
	int                                                          NewTitlePopupCompanyBackgroundGrade;               // 0x1a0(0x4)
	char                                                         pad0x4_6NN0U[0x4];                                 // 0x1a4(0x4)
	class PrioritisedPromptsManager*                             PrioritisedPrompts;                                // 0x1a8(0x8)
	class EmissaryLevelSettingsAsset*                            EmissaryLevelSettings;                             // 0x1b0(0x8)
	class TradingCompanyPopUpBackgroundCollectionDataAsset*      CompanyPopUpBackgroundCollection;                  // 0x1b8(0x8)
	class SessionManagementServiceSettingsDataAsset*             SessionManagementSettings;                         // 0x1c0(0x8)
	char                                                         pad0x2c0_ZDWEL[0x2c0];                             // 0x1c8(0x2c0)
};


// Size 0x50 (Full Size[0x88] - InheritedSize[0x38]
class PlayerActivitySettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  PlayerActivityLifetimeRulesCatalogue;              // 0x38(0x10)
	struct StringAssetReference                                  PlayerActivityIconCatalogue;                       // 0x48(0x10)
	class UClass*                                                PlayerActivityIconSetIdToBeusedByPlayers;          // 0x58(0x8)
	float                                                        NameplateMaxVisibilityDistance;                    // 0x60(0x4)
	char                                                         pad0x4_UQDW8[0x4];                                 // 0x64(0x4)
	TArray<char>                                                 HealthChangeReasonsToTriggerLoseHealthActivity;    // 0x68(0x10)
	TArray<Class>                                                InstigatorsToTriggerLoseHealthActivity;            // 0x78(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class MimicStatus: public StatusBase
{
public:
};


// Size 0xd0 (Full Size[0x150] - InheritedSize[0x80]
class TaleQuestAddZoomMapQuestbookPageStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableName                                     IslandName;                                        // 0x80(0x30)
	class TreasureMapDataAsset*                                  TreasureMapDataAsset;                              // 0xb0(0x8)
	class ZoomMapParamsDataAsset*                                Params;                                            // 0xb8(0x8)
	struct QuestVariablePageLayout                               BottomPageLayout;                                  // 0xc0(0x30)
	struct QuestVariablePageLayout                               TopPageLayout;                                     // 0xf0(0x30)
	struct QuestVariableVector                                   DigSpot;                                           // 0x120(0x30)
};


// Size 0xd0 (Full Size[0x188] - InheritedSize[0xb8]
class DrunkenChestComponent: public ActorComponent
{
public:
	class WwiseEvent*                                            OnPickedUpLocalPlayerOnlyEvent;                    // 0xb8(0x8)
	class DrunkennessComponent*                                  DrunkennessComponent;                              // 0xc0(0x8)
	class Actor*                                                 Wielder;                                           // 0xc8(0x8)
	float                                                        TargetDrunkenness;                                 // 0xd0(0x4)
	char                                                         pad0xb4_0N5LN[0xb4];                               // 0xd4(0xb4)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class CoastService: public Object
{
public:
	char                                                         pad0x78_DZ6VY[0x78];                               // 0x28(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LockableDoorInterface: public Interface
{
public:
};


// Size 0x168 (Full Size[0x220] - InheritedSize[0xb8]
class StaggerComponent: public ActorComponent
{
public:
	class CurveFloat*                                            XStickInputOverloaderAmplitude;                    // 0xb8(0x8)
	class CurveFloat*                                            YStickInputOverloaderAmplitude;                    // 0xc0(0x8)
	float                                                        MinInputOverloaderSpd;                             // 0xc8(0x4)
	float                                                        MaxInputOverloaderSpd;                             // 0xcc(0x4)
	float                                                        ChanceToChangeDirectionOnSpeedChange;              // 0xd0(0x4)
	float                                                        InputOverloaderSpdChangePerSec;                    // 0xd4(0x4)
	float                                                        MinOverloaderSpdChangeTime;                        // 0xd8(0x4)
	float                                                        MaxOverloaderSpdChangeTime;                        // 0xdc(0x4)
	float                                                        StickInputForMaxInterferenceScalar;                // 0xe0(0x4)
	float                                                        InterferenceScalarAtMinStickInput;                 // 0xe4(0x4)
	float                                                        InterferenceScalarOnLadderStationary;              // 0xe8(0x4)
	float                                                        InterferenceScalarOnLadderMoving;                  // 0xec(0x4)
	float                                                        MaxStickDeflectionOnLadderToConsiderStationary;    // 0xf0(0x4)
	float                                                        StickDeflectionForMaxScalingOnLadder;              // 0xf4(0x4)
	TArray<struct StaggerModifiersEntry>                         StaggerModifierEntries;                            // 0xf8(0x10)
	char                                                         pad0x118_VYPPW[0x118];                             // 0x108(0x118)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrackedActorOriginInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AtmosphericPressureService: public Object
{
public:
	char                                                         pad0x8_HXJMW[0x8];                                 // 0x28(0x8)
	TArray<class Interface*>                                     RegisteredAtmosphericPressureZones;                // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnsembleInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex2SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class LimpingTestActor: public Actor
{
public:
	class LimpingComponent*                                      Limping;                                           // 0x3a0(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ZoomMapParamsDataAsset: public DataAsset
{
public:
	float                                                        Offset;                                            // 0x28(0x4)
	float                                                        ZoomLevel;                                         // 0x2c(0x4)
	float                                                        XMarkSizeModifier;                                 // 0x30(0x4)
	float                                                        MaxDistanceFromCentreToDigspot;                    // 0x34(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ReapersTributeShipDefeatedStateDataAsset: public DataAsset
{
public:
	int                                                          NumberOfCannonHitsToSinkWaterloggedShip;           // 0x28(0x4)
	float                                                        TimeBeforeCannonHitsCountForDefeatedWaterloggedShip; // 0x2c(0x4)
	TArray<class Class*>                                         DamageTypesAllowed;                                // 0x30(0x10)
};


// Size 0x160 (Full Size[0x430] - InheritedSize[0x2d0]
class WieldedItemComponent: public SceneComponent
{
public:
	class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x2d0(0x8)
	class Actor*                                                 ReplicatedCurrentlyWieldedItem;                    // 0x2d8(0x8)
	class Actor*                                                 CurrentlyWieldedItem;                              // 0x2e0(0x8)
	char                                                         pad0x118_RAOIQ[0x118];                             // 0x2e8(0x118)
	int                                                          EpochId;                                           // 0x400(0x4)
	char                                                         pad0xc_PUZEH[0xc];                                 // 0x404(0xc)
	struct ServerWieldSet                                        PendingServerWieldSet;                             // 0x410(0x1c)
	char                                                         pad0x4_78M6G[0x4];                                 // 0x42c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShip_SeaDamsel: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x190 (Full Size[0x248] - InheritedSize[0xb8]
class ShipPersistenceComponent: public ActorComponent
{
public:
	char                                                         pad0x8_54TTV[0x8];                                 // 0xb8(0x8)
	class PersistenceIdentifierSettingsAsset*                    PersistenceIdentifierSettingsAsset;                // 0xc0(0x8)
	struct ShipCaptainedSessionData                              CaptaincyData;                                     // 0xc8(0x58)
	struct Guid                                                  ReplicatedCrewId;                                  // 0x120(0x10)
	struct ShipPersistenceModel                                  ShipModel;                                         // 0x130(0x50)
	struct ShipLoadoutPersistenceModel                           ShipLoadoutModel;                                  // 0x180(0x40)
	char                                                         LoadoutPersistence;                                // 0x1c0(0x1)
	char                                                         pad0x87_KD9E0[0x87];                               // 0x1c1(0x87)
};


// Size 0x40 (Full Size[0x78] - InheritedSize[0x38]
class CaptainsLogSettings: public DeveloperSettings
{
public:
	struct Guid                                                  ShipScheduleId;                                    // 0x38(0x10)
	struct Guid                                                  CrewScheduleId;                                    // 0x48(0x10)
	TArray<struct AccoladeProgressId>                            DefaultShipAccolades;                              // 0x58(0x10)
	TArray<struct AccoladeProgressId>                            DefaultCrewAccolades;                              // 0x68(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class RewardDistributionModelDataAsset: public DataAsset
{
public:
	struct RewardDistributionModelData                           RewardDistributionModelData;                       // 0x28(0x20)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class InGameCommandTeleportManager: public Object
{
public:
	char                                                         pad0x30_XTDPB[0x30];                               // 0x28(0x30)
	class TeleportCommandSettings*                               TeleportCommandSettings;                           // 0x58(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SignalMechanismTargetInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class ScrambledNamesSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  ScrambledPlayerNamesDataAssetReference;            // 0x38(0x10)
	struct StringAssetReference                                  ScrambledShipNamesDataAssetReference;              // 0x48(0x10)
	struct StringAssetReference                                  ScrambledGuildNamesDataAssetReference;             // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipSessionInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TimeOfDayDataAsset: public DataAsset
{
public:
	float                                                        SunriseStartHour;                                  // 0x28(0x4)
	float                                                        MorningStartHour;                                  // 0x2c(0x4)
	float                                                        MidDayStartHour;                                   // 0x30(0x4)
	float                                                        AfternoonStartHour;                                // 0x34(0x4)
	float                                                        SunsetStartHour;                                   // 0x38(0x4)
	float                                                        NightStartHour;                                    // 0x3c(0x4)
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class ShroudBreakerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerUpdateReportingServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestIsFeatureEnabledStep: public TaleQuestStep
{
public:
	class TaleQuestIsFeatureEnabledStepDesc*                     Desc;                                              // 0x98(0x8)
};


// Size 0x98 (Full Size[0xc0] - InheritedSize[0x28]
class ServerNotificationsService: public Object
{
public:
	char                                                         pad0x98_UZSLW[0x98];                               // 0x28(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipSinkingHandlerInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x210] - InheritedSize[0xb8]
class PlayerGeneratedMapsContainerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_JK1QC[0x8];                                 // 0xb8(0x8)
	struct FText                                                 ContainerDisplayName;                              // 0xc0(0x38)
	char                                                         pad0x8_EPF2J[0x8];                                 // 0xf8(0x8)
	struct Transform                                             InstanceTransform;                                 // 0x100(0x30)
	class UClass*                                                MapDesc;                                           // 0x130(0x8)
	class PlayerGeneratedMapsContainerComponentDataAsset*        ContainerDataAsset;                                // 0x138(0x8)
	TArray<struct PlayerGeneratedMapDisplayData>                 PlayerMapInventory;                                // 0x140(0x10)
	TArray<struct PlayerGeneratedMapDisplayData>                 StoreMapInventory;                                 // 0x150(0x10)
	class WwiseEvent*                                            AddMapSFX;                                         // 0x160(0x8)
	class WwiseEvent*                                            TakeMapSFX;                                        // 0x168(0x8)
	class WwiseEvent*                                            OpenContainerSFX;                                  // 0x170(0x8)
	int                                                          MaxNumStoreMapsToReplicate;                        // 0x178(0x4)
	int                                                          MaxNumPlayerMapsToReplicate;                       // 0x17c(0x4)
	int                                                          DailyMapLimit;                                     // 0x180(0x4)
	char                                                         pad0x4_WJ0B6[0x4];                                 // 0x184(0x4)
	struct StringAssetReference                                  MapTakenBackgroundImage;                           // 0x188(0x10)
	TArray<struct StringAssetReference>                          MapTakenImages;                                    // 0x198(0x10)
	TArray<class Actor*>                                         ServerAttachedPlayers;                             // 0x1a8(0x10)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x1b8(0x8)
	char                                                         pad0x50_NVSSQ[0x50];                               // 0x1c0(0x50)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShantyItemDescToSlotRemappingDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         Slots;                                             // 0x28(0x10)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class HarpoonLauncherAudioParamsDataAsset: public DataAsset
{
public:
	struct Vector                                                AudioEmitterOffset;                                // 0x28(0xc)
	struct FName                                                 MoveYawRateRTPCName;                               // 0x34(0x8)
	struct FName                                                 MovePitchRateRTPCName;                             // 0x3c(0x8)
	struct FName                                                 SpoolingSpeedRTPCName;                             // 0x44(0x8)
	char                                                         pad0x4_K0XG9[0x4];                                 // 0x4c(0x4)
	class WwiseEvent*                                            StartMovePitchAudioLoopEvent;                      // 0x50(0x8)
	class WwiseEvent*                                            StopMovePitchAudioLoopEvent;                       // 0x58(0x8)
	class WwiseEvent*                                            StartMoveYawAudioLoopEvent;                        // 0x60(0x8)
	class WwiseEvent*                                            StopMoveYawAudioLoopEvent;                         // 0x68(0x8)
	class WwiseEvent*                                            StoppedAimAtEdgeOfRangeAudioEvent;                 // 0x70(0x8)
	class WwiseEvent*                                            FireAudioEvent;                                    // 0x78(0x8)
	class WwiseEvent*                                            RetractTriggeredAudioEvent;                        // 0x80(0x8)
	class WwiseEvent*                                            RetractFinishedAudioEvent;                         // 0x88(0x8)
	class WwiseEvent*                                            ReleaseRetractableAudioEvent;                      // 0x90(0x8)
	class WwiseEvent*                                            StartSpoolingAudioEvent;                           // 0x98(0x8)
	class WwiseEvent*                                            StopSpoolingAudioEvent;                            // 0xa0(0x8)
	class WwiseEvent*                                            TetherExtentReachedAudioEvent;                     // 0xa8(0x8)
	class WwiseEvent*                                            ReelLockInputPressedAudioEvent;                    // 0xb0(0x8)
	class WwiseEvent*                                            ReelLockInputReleasedAudioEvent;                   // 0xb8(0x8)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0xc0(0x8)
	float                                                        SpoolingSpeedClampValue;                           // 0xc8(0x4)
	float                                                        AttachedSpoolingSpeedClampValue;                   // 0xcc(0x4)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GetDistantLocationsFromListTaleStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x288] - InheritedSize[0x288]
class MigrationInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerTelemetrySubjectGetterInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveFogBankAvoidanceAreaStep: public TaleQuestStep
{
public:
	class RemoveFogBankAvoidanceAreaStepDesc*                    StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoastQueryInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindPhysicsServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class ApplyStatusToConsumerComponent: public ActorComponent
{
public:
	TArray<struct ItemConsumptionStatusChanceEntry>              ConsumptionStatuses;                               // 0xb8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReplenishableItemsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamesOfFateSettingsServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class FireChargedAttackAIAbilityParams: public AthenaAIAbilityParams
{
public:
	TArray<struct ChargedAttackProjectileWeights>                ProjectileParams;                                  // 0xc8(0x10)
};


// Size 0x1d8 (Full Size[0x290] - InheritedSize[0xb8]
class RewardComponent: public ActorComponent
{
public:
	char                                                         pad0x1d8_H5XQX[0x1d8];                             // 0xb8(0x1d8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedRewardTableAsset: public DataAsset
{
public:
	struct WeightedRewardTable                                   RewardTable;                                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraViewRestrictableInteractorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class WorldMarkerOnSpawnPositionComponent: public ActorComponent
{
public:
	float                                                        ZOffset;                                           // 0xb8(0x4)
	char                                                         pad0x4_27FCA[0x4];                                 // 0xbc(0x4)
	class UClass*                                                MarkerVariant;                                     // 0xc0(0x8)
};


// Size 0x160 (Full Size[0x1e0] - InheritedSize[0x80]
class TaleQuestAssignVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVector                                   SelectionOriginPointVar;                           // 0x80(0x30)
	struct QuestVariableInt                                      GoldHoarderVoyageTier;                             // 0xb0(0x30)
	struct QuestVariableClassArray                               ValidSeas;                                         // 0xe0(0x30)
	struct QuestVariableTextArray                                VaultNamesToIgnore;                                // 0x110(0x30)
	struct QuestVariableTaleResourceHandle                       AlloctedVaultHandleVar;                            // 0x140(0x30)
	struct QuestVariableActor                                    AlloctedVaultVar;                                  // 0x170(0x30)
	struct QuestVariableClass                                    VaultKeyTypeVar;                                   // 0x1a0(0x30)
	bool                                                         AlwaysClosestVault;                                // 0x1d0(0x1)
	bool                                                         UsePriorityRange;                                  // 0x1d1(0x1)
	char                                                         pad0x2_WP3D2[0x2];                                 // 0x1d2(0x2)
	float                                                        PriorityRange;                                     // 0x1d4(0x4)
	int                                                          NumberOfSearches;                                  // 0x1d8(0x4)
	char                                                         pad0x4_QL3A9[0x4];                                 // 0x1dc(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class HarpoonLauncherVFXDataAsset: public DataAsset
{
public:
	class Object*                                                MuzzleFlashVfxFirstPerson;                         // 0x28(0x8)
	class Object*                                                MuzzleFlashVfxThirdPerson;                         // 0x30(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleNarratedShipDirectionComponentInputId: public NotificationInputId
{
public:
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class PlayerNameplateLocationOverrideComponent: public ActorComponent
{
public:
	char                                                         pad0x8_8GEK4[0x8];                                 // 0xb8(0x8)
	struct Transform                                             NameplateLocation;                                 // 0xc0(0x30)
	float                                                        AdditionalHeight;                                  // 0xf0(0x4)
	char                                                         pad0xc_EQU3A[0xc];                                 // 0xf4(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemSetInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandmarkReactionTriggerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PuzzleObjectInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAITypeList: public DataAsset
{
public:
	TArray<struct SpawnCommandsAIType>                           AITypes;                                           // 0x28(0x10)
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class QuickInventoryComponent: public ActorComponent
{
public:
	char                                                         pad0x18_MSBTO[0x18];                               // 0xb8(0x18)
	class UClass*                                                CannonballItemCategory;                            // 0xd0(0x8)
	class UClass*                                                CursedCannonballItemCategory;                      // 0xd8(0x8)
	class UClass*                                                FoodItemCategory;                                  // 0xe0(0x8)
	class UClass*                                                EnchantedFoodItemCategory;                         // 0xe8(0x8)
	class UClass*                                                RepairablesItemCategory;                           // 0xf0(0x8)
	class UClass*                                                BaitItemCategory;                                  // 0xf8(0x8)
	class UClass*                                                FireBombCategory;                                  // 0x100(0x8)
	class UClass*                                                ChainShotCategory;                                 // 0x108(0x8)
	class UClass*                                                GrapeShotCategory;                                 // 0x110(0x8)
	class UClass*                                                FireworkCategory;                                  // 0x118(0x8)
	class UClass*                                                DeployableCategory;                                // 0x120(0x8)
	char                                                         pad0x10_JF13U[0x10];                               // 0x128(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemPersistentCooldownInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KeepStillAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseEmote: public StatusResponse
{
public:
	struct FName                                                 EmoteIdentifier;                                   // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_BoarWallowLocationOnIsland: public EnvQueryContext
{
public:
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class AggressiveGhostShipEncounterDataAsset: public DataAsset
{
public:
	struct WeightedProbabilityRangeOfRanges                      TimeBetweenSpawns;                                 // 0x28(0x30)
	struct WeightedProbabilityRangeOfRanges                      TimeBetweenFormationMemberSpawns;                  // 0x58(0x30)
	TArray<struct AggressiveGhostShipEncounterWaveDesc>          WaveDescs;                                         // 0x88(0x10)
	class BuoyantObjectSpawnProfileDataAsset*                    BarrelsOfPlentySpawnProfileOverride;               // 0x98(0x8)
	class UClass*                                                Ship;                                              // 0xa0(0x8)
	class UClass*                                                Ship_SPCActivity;                                  // 0xa8(0x8)
	class UClass*                                                MineActorClass;                                    // 0xb0(0x8)
	class UClass*                                                AnchorDropActorClass;                              // 0xb8(0x8)
	char                                                         Allegiance;                                        // 0xc0(0x1)
	bool                                                         CanAttackEnemyGhostShips;                          // 0xc1(0x1)
	char                                                         pad0x6_P8Z89[0x6];                                 // 0xc2(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestManagerServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemDiggingEffectsConfig: public Object
{
public:
	TArray<struct ItemProxyImpactVfxParams>                      FullyDugUpVfxParams;                               // 0x28(0x10)
};


// Size 0x70 (Full Size[0x340] - InheritedSize[0x2d0]
class MountableSceneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_Y1OFZ[0x8];                                 // 0x2d0(0x8)
	class UClass*                                                MountableType;                                     // 0x2d8(0x8)
	TArray<struct PlayerStat>                                    MountableTypeCrewStats;                            // 0x2e0(0x10)
	struct FText                                                 Description;                                       // 0x2f0(0x38)
	char                                                         pad0x18_RRZL3[0x18];                               // 0x328(0x18)
};


// Size 0xc8 (Full Size[0x2c0] - InheritedSize[0x1f8]
class CharacterFlammableComponent: public ActorFlammableComponent
{
public:
	char                                                         pad0x30_4E4QH[0x30];                               // 0x1f8(0x30)
	float                                                        FireFalloffDuration;                               // 0x228(0x4)
	float                                                        FireRateOfFalloffInRain;                           // 0x22c(0x4)
	float                                                        FireFalloffMultiplier;                             // 0x230(0x4)
	struct FName                                                 VfxSocketName;                                     // 0x234(0x8)
	char                                                         pad0x4_SI3G3[0x4];                                 // 0x23c(0x4)
	struct Transform                                             SocketRelativeOffset;                              // 0x240(0x30)
	char                                                         pad0x8_WOIS6[0x8];                                 // 0x270(0x8)
	class FireSettingsDataAsset*                                 FireSettingsAsset;                                 // 0x278(0x8)
	char                                                         pad0x40_DU6VQ[0x40];                               // 0x280(0x40)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookUpRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RainZoneServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class HitReactionComponent: public ActorComponent
{
public:
	char                                                         pad0x30_2JQ47[0x30];                               // 0xb8(0x30)
	bool                                                         ServerAuthoritiveReactions;                        // 0xe8(0x1)
	char                                                         pad0x7_PAUAE[0x7];                                 // 0xe9(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ActivateAllSpawnersVaultStep: public TaleQuestStep
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class DiggingAudioDataAsset: public DataAsset
{
public:
	TArray<struct ItemDiggingAudioOverride>                      AudioOverrides;                                    // 0x28(0x10)
	class ItemDiggingAudioConfig*                                Default;                                           // 0x38(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x40(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ContestZoneRespawnLocationsDataAsset: public DataAsset
{
public:
	TArray<struct Transform>                                     ContestRespawnLocations;                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RegistrablePartTestObject: public Object
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AthenaCharacterMovementSettings: public Object
{
public:
	struct NetPositionErrorTolerance                             StandardError;                                     // 0x28(0x8)
	struct NetPositionErrorTolerance                             SwimmingError;                                     // 0x30(0x8)
	float                                                        SwimmingClientTrustThreshold;                      // 0x38(0x4)
	float                                                        MaxSwimmingTimeStep;                               // 0x3c(0x4)
	int                                                          MaxSwimmingIterations;                             // 0x40(0x4)
	float                                                        RebaseToServerErrorSqrDist;                        // 0x44(0x4)
	float                                                        OnlyInterpolationAfterSqrDist;                     // 0x48(0x4)
	float                                                        InterpolationSqrDistWhenWithinConeAngle;           // 0x4c(0x4)
	float                                                        IncreasedInterpolationDistConeAngleDegrees;        // 0x50(0x4)
	bool                                                         OnlyUseInterpolationConeAngleForPlayerCharacters;  // 0x54(0x1)
	char                                                         pad0x3_WBJG9[0x3];                                 // 0x55(0x3)
	float                                                        NoVisualUpdateAfterSqrDist;                        // 0x58(0x4)
	float                                                        TimeBetweenPlayerDistanceChecks;                   // 0x5c(0x4)
	float                                                        TimeBetweenPlayerDistanceChecksWhenConsideringConeAngle; // 0x60(0x4)
	float                                                        TimeToSimulateNewCharacters;                       // 0x64(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipWorldSettingsGetterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelLockPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class ChecklistMapLayout: public DataAsset
{
public:
	struct TreasureMapWidgetText                                 Title;                                             // 0x28(0x3c)
	struct TreasureMapWidgetText                                 Description;                                       // 0x64(0x3c)
	TArray<struct TreasureMapWidgetText>                         Items;                                             // 0xa0(0x10)
	struct TreasureMapWidgetText                                 Afternote;                                         // 0xb0(0x3c)
	char                                                         pad0x4_PCD9X[0x4];                                 // 0xec(0x4)
};


// Size 0x90 (Full Size[0x640] - InheritedSize[0x5b0]
class PickupActorMock: public Character
{
public:
	char                                                         pad0x90_58TT3[0x90];                               // 0x5b0(0x90)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RadialAction: public Object
{
public:
	class UClass*                                                InputID;                                           // 0x28(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class OtherCrewNameplatesToggleInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPartRegistrationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonYawRateRightStickAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ItemDiggingAnimationConfig: public Object
{
public:
	float                                                        PosSpringAccel;                                    // 0x28(0x4)
	float                                                        RotSpringAccel;                                    // 0x2c(0x4)
	float                                                        ZOffsetToStartFirstPosBlendFrom;                   // 0x30(0x4)
	float                                                        InitialZOffset;                                    // 0x34(0x4)
	float                                                        FinalZOffset;                                      // 0x38(0x4)
	float                                                        PercentageOfExhumingTravelLastDigDoes;             // 0x3c(0x4)
	class CurveFloat*                                            PitchRollAngleRandomCurve;                         // 0x40(0x8)
	class CurveFloat*                                            PitchRollRattleCurveWhileMoving;                   // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldedItemSpeedModifierInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackCategoryDataAsset: public DataAsset
{
public:
	class UClass*                                                ConstraintCategory;                                // 0x28(0x8)
	struct StringAssetReference                                  MeshFallbackReference;                             // 0x30(0x10)
	char                                                         pad0x8_GSTU3[0x8];                                 // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldEndAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x240 (Full Size[0x2f8] - InheritedSize[0xb8]
class PremiumShopViewModelComponentBase: public ActorComponent
{
public:
	char                                                         pad0x1b0_H19X3[0x1b0];                             // 0xb8(0x1b0)
	class PetShopDataAsset*                                      PetShopDataAsset;                                  // 0x268(0x8)
	char                                                         pad0x88_JIMIL[0x88];                               // 0x270(0x88)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SkeletonAICharacterAudioComponentParams: public DataAsset
{
public:
	TArray<struct SkeletonAICharacterStrategyAudioEvents>        StrategyAudioEvents;                               // 0x28(0x10)
	class WwiseEvent*                                            SuccessfullyRevivedSfx;                            // 0x38(0x8)
};


// Size 0xe0 (Full Size[0x3b0] - InheritedSize[0x2d0]
class HangingGroupComponent: public SceneComponent
{
public:
	class HangingParamsDataAsset*                                HangingParamsDataAsset;                            // 0x2d0(0x8)
	struct FText                                                 InteractionVerb;                                   // 0x2d8(0x38)
	struct FText                                                 InteractionDisplayName;                            // 0x310(0x38)
	struct FText                                                 InteractionTextTakingDamage;                       // 0x348(0x38)
	TArray<struct HangingComponentPositions>                     HangingPositions;                                  // 0x380(0x10)
	TArray<class HangingComponent*>                              HangingComponents;                                 // 0x390(0x10)
	char                                                         pad0x10_CG2M1[0x10];                               // 0x3a0(0x10)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class PhasedActorSourceComponent: public ActorComponent
{
public:
	class Actor*                                                 PhasingSourceActor;                                // 0xb8(0x8)
};


// Size 0x170 (Full Size[0x2b0] - InheritedSize[0x140]
class MegalodonSoulInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x10_3II86[0x10];                               // 0x140(0x10)
	struct FText                                                 DisplayName;                                       // 0x150(0x38)
	struct FText                                                 TakeSoulTooltipText;                               // 0x188(0x38)
	struct FText                                                 EffigyNotRaisedToolTipText;                        // 0x1c0(0x38)
	struct FText                                                 NotWieldingEffigyTooltipText;                      // 0x1f8(0x38)
	struct FText                                                 CannotEnchantEffigyTooltipText;                    // 0x230(0x38)
	char                                                         MegalodonSoulType;                                 // 0x268(0x1)
	char                                                         pad0x7_XJ6WE[0x7];                                 // 0x269(0x7)
	class UClass*                                                ActivationInput;                                   // 0x270(0x8)
	class UClass*                                                ReleaseInput;                                      // 0x278(0x8)
	bool                                                         RequiresRaisedEffigy;                              // 0x280(0x1)
	char                                                         pad0x3_60ZWC[0x3];                                 // 0x281(0x3)
	float                                                        HoldDuration;                                      // 0x284(0x4)
	float                                                        SoulVFXReturnModifier;                             // 0x288(0x4)
	float                                                        SoulVFXClientPredictionModifier;                   // 0x28c(0x4)
	char                                                         pad0x18_HI353[0x18];                               // 0x290(0x18)
	class ParticleSystemComponent*                               ParticleSystem;                                    // 0x2a8(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class AssignItemStep: public TaleQuestStep
{
public:
	class AssignItemStepDesc*                                    StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StunnableInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class MerchantQuestItemData: public DataAsset
{
public:
	class MerchantQuestItemPluralisationData*                    DisplayNameLookup;                                 // 0x28(0x8)
	struct RewardId                                              HandInOnTimeRewardId;                              // 0x30(0x8)
	class UClass*                                                CrateDesc;                                         // 0x38(0x8)
	TArray<struct MerchantQuestItemDescAndReward>                AcceptableAlternativeCrateItemData;                // 0x40(0x10)
	class Texture*                                               IconImage;                                         // 0x50(0x8)
	class UClass*                                                FaunaSpecies;                                      // 0x58(0x8)
	class UClass*                                                FaunaBreed;                                        // 0x60(0x8)
	class PopUpMessageDesc*                                      CrateFilledPopupDesc;                              // 0x68(0x8)
	bool                                                         IsOnlyFoundInWorld;                                // 0x70(0x1)
	char                                                         pad0x7_TJN5H[0x7];                                 // 0x71(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialInventorySelectionXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseSicknessInterrupt: public StatusResponse
{
public:
};


// Size 0xb98 (Full Size[0xbc0] - InheritedSize[0x28]
class WaterGunLiquidLauncherController: public Object
{
public:
	char                                                         pad0x8_C057P[0x8];                                 // 0x28(0x8)
	struct LiquidLauncherCollisionsParams                        LiquidLauncherCollisionParams;                     // 0x30(0x68)
	struct Status                                                LiquidLauncherCollisionStatusEffect;               // 0x98(0x20)
	float                                                        TimeUntilApplyStatusEffect;                        // 0xb8(0x4)
	float                                                        TimeToConsiderActorOutsideLiquid;                  // 0xbc(0x4)
	float                                                        LiquidLauncherCollisionDamageAmount;               // 0xc0(0x4)
	float                                                        DamagePerSecondInsideLiquid;                       // 0xc4(0x4)
	float                                                        GravityStrength;                                   // 0xc8(0x4)
	float                                                        GravityCurveStrength;                              // 0xcc(0x4)
	float                                                        LiquidLauncherGoopBurningTime;                     // 0xd0(0x4)
	float                                                        LiquidLauncherGoopBurningDrainPerSecond;           // 0xd4(0x4)
	class WaterGunWieldableItem*                                 WaterGun;                                          // 0xd8(0x8)
	char                                                         pad0xae0_75N2F[0xae0];                             // 0xe0(0xae0)
};


// Size 0x348 (Full Size[0x400] - InheritedSize[0xb8]
class GuildUIComponent: public ActorComponent
{
public:
	char                                                         pad0x2b8_G0SP0[0x2b8];                             // 0xb8(0x2b8)
	struct PlayerCompanyProgressCache                            GuildProgressCache;                                // 0x370(0x68)
	class GuildSettings*                                         GuildSettings;                                     // 0x3d8(0x8)
	char                                                         pad0x18_VWEEY[0x18];                               // 0x3e0(0x18)
	bool                                                         HasInitialCompanyProgressRequestBeenMade;          // 0x3f8(0x1)
	bool                                                         IsCompanyProgressRequestPending;                   // 0x3f8(0x1)
	bool                                                         ShouldCacheGuildReputation;                        // 0x3f8(0x1)
	bool                                                         IsPendingSentInvitesResponse;                      // 0x3f8(0x1)
	char                                                         pad0x7_631W1[0x7];                                 // 0x3f9(0x7)
};


// Size 0x160 (Full Size[0x500] - InheritedSize[0x3a0]
class ReapersChestAISpawnerService: public Actor
{
public:
	char                                                         pad0x50_7A0AB[0x50];                               // 0x3a0(0x50)
	class ReapersChestAISpawnerServiceParams*                    ServiceParams;                                     // 0x3f0(0x8)
	TArray<struct ReapersChestActiveChestData>                   ActiveChests;                                      // 0x3f8(0x10)
	TArray<struct Guid>                                          CrewsBlockedFromOpeningChests;                     // 0x408(0x10)
	class ReapersChestAISpawnerSettings*                         ReapersChestAISpawnerSettings;                     // 0x418(0x8)
	char                                                         pad0x18_R2ZKI[0x18];                               // 0x420(0x18)
	int                                                          MaxActiveChestsPerCrewCount;                       // 0x438(0x4)
	char                                                         pad0xbc_W6864[0xbc];                               // 0x43c(0xbc)
	float                                                        ReapersChestAIRegionCleanupDelayTimerValue;        // 0x4f8(0x4)
	char                                                         pad0x4_SJQH6[0x4];                                 // 0x4fc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KillableCharacterInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class BTService_DetermineRecoveryMethod: public BTService
{
public:
	float                                                        TimeToForgetAfterSuccessfulFlee;                   // 0x70(0x4)
	char                                                         pad0x4_FNH79[0x4];                                 // 0x74(0x4)
	class AthenaAICharacterController*                           CachedAICharacterController;                       // 0x78(0x8)
	char                                                         pad0x60_LYVJ8[0x60];                               // 0x80(0x60)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetHiddenOnKeyTakenStep: public TaleQuestStep
{
public:
	class SetHiddenOnKeyTakenStepDesc*                           StepDesc;                                          // 0x98(0x8)
};


// Size 0x20 (Full Size[0x2f0] - InheritedSize[0x2d0]
class AtmosphericPressureZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_L0YCJ[0x8];                                 // 0x2d0(0x8)
	struct AtmosphericPressureZoneParameters                     PressureZoneParameters;                            // 0x2d8(0x14)
	char                                                         pad0x4_O5929[0x4];                                 // 0x2ec(0x4)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class AshenGarrisonAISpawnDataAsset: public DataAsset
{
public:
	class AIBountySpawner*                                       OnePlayerCrewBountySpawner;                        // 0x28(0x8)
	class AIBountySpawner*                                       TwoPlayerCrewBountySpawner;                        // 0x30(0x8)
	class AIBountySpawner*                                       ThreePlayerCrewBountySpawner;                      // 0x38(0x8)
	class AIBountySpawner*                                       FourPlayerCrewBountySpawner;                       // 0x40(0x8)
	struct FText                                                 SpawnedAITargetName;                               // 0x48(0x38)
	bool                                                         DespawnOnPhaseCompletion;                          // 0x80(0x1)
	char                                                         pad0x7_5TXLP[0x7];                                 // 0x81(0x7)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class BlueprintTelemetrySettings: public DeveloperSettings
{
public:
	bool                                                         ShouldExcludeNativeUFunctions;                     // 0x38(0x1)
	char                                                         pad0x7_WDS3E[0x7];                                 // 0x39(0x7)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class PlayerPermissionsTestActor: public Actor
{
public:
	class PlayerPermissionsComponent*                            PlayerPermissionsComponent;                        // 0x3a0(0x8)
};


// Size 0x10 (Full Size[0xc0] - InheritedSize[0xb0]
class WaitForAshenLordPawnBaseStep: public WaitForSpawnedPawnBaseStep
{
public:
	class AshenLordEncounter*                                    AshenLordEncounter;                                // 0xb0(0x8)
	class Pawn*                                                  AshenLordPawn;                                     // 0xb8(0x8)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class DamageableProjectileLauncherMechanism: public Actor
{
public:
	char                                                         pad0x8_PVYGB[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3a8(0x8)
	class ProjectileLauncherMechanismSourceComponent*            ProjectileLauncher;                                // 0x3b0(0x8)
	class DamageableComponent*                                   DamageableComponent;                               // 0x3b8(0x8)
	char                                                         pad0x10_DRF3Q[0x10];                               // 0x3c0(0x10)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class NPCCustomAnimationDataAsset: public DataAsset
{
public:
	char                                                         pad0x8_0EGFR[0x8];                                 // 0x28(0x8)
	struct NPCCustomAnimationDataStructure                       NPCCustomAnimationData;                            // 0x30(0x38)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleAggressiveGhostShipEncounterServiceDesc: public TaleQuestServiceDesc
{
public:
	class AggressiveGhostShipsEncounterParams*                   AggressiveGhostShipEncounterParams;                // 0x28(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TriggerCrewEnteredPortalTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Portal;                                            // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RainZoneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LungeBeginAshenLordUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class ObstacleCourseBlackboard: public Actor
{
public:
	TArray<struct PlayerStateAndTopTime>                         PlayerStatesAndTopTimes;                           // 0x3a0(0x10)
	class ObstacleCourse*                                        ObstacleCourseActor;                               // 0x3b0(0x8)
	char                                                         pad0x18_514AT[0x18];                               // 0x3b8(0x18)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class RatManagerComponentDataAsset: public DataAsset
{
public:
	float                                                        TurnBlendInOutPercentage;                          // 0x28(0x4)
	int                                                          NumPseudoRandomValues;                             // 0x2c(0x4)
	int                                                          FixedSeed;                                         // 0x30(0x4)
	struct Vector                                                RatEmitterOffset;                                  // 0x34(0xc)
	class WwiseEvent*                                            StartRatSounds;                                    // 0x40(0x8)
	class WwiseEvent*                                            StopRatSounds;                                     // 0x48(0x8)
	class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x50(0x8)
	int                                                          MaxNumShipsToDisplayRatsOn;                        // 0x58(0x4)
	char                                                         pad0x4_IJ0NF[0x4];                                 // 0x5c(0x4)
	struct WeightedProbabilityRangeOfRanges                      RatScale;                                          // 0x60(0x30)
	TArray<struct RatManagerRatInfestationLevel>                 RatInfestationLevels;                              // 0x90(0x10)
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class PhasedActorComponent: public ActorComponent
{
public:
	char                                                         pad0x28_IHBJD[0x28];                               // 0xb8(0x28)
	class Actor*                                                 SpawnedMapActor;                                   // 0xe0(0x8)
	class PhasedClusterRoot*                                     ClusterRoot;                                       // 0xe8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitReactionDisableInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PlayerGeneratedMapsContainerComponentDataAsset: public DataAsset
{
public:
	TArray<struct WorldRegionMapping>                            WorldRegionMappings;                               // 0x28(0x10)
	TArray<struct Name>                                          IslandsToExcludeFromTavernBoardDisplay;            // 0x38(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleQuestReleaseContendedResourceStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableTaleResourceHandle                       ResourceHandle;                                    // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LookAtInterface: public Interface
{
public:
};


// Size 0x120 (Full Size[0x148] - InheritedSize[0x28]
class DelayLoadService: public Object
{
public:
	char                                                         pad0x120_XBIG4[0x120];                             // 0x28(0x120)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class BodyTypeSpecificSequenceMap: public DataAsset
{
public:
	struct StringAssetReference                                  DefaultSequence;                                   // 0x28(0x10)
	struct StringAssetReference                                  LargeSequence;                                     // 0x38(0x10)
	struct StringAssetReference                                  ThinSequence;                                      // 0x48(0x10)
	struct StringAssetReference                                  UnfitSequence;                                     // 0x58(0x10)
	struct StringAssetReference                                  AthleticSequence;                                  // 0x68(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsUsingMountableSpotlightMechanismInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NameplateSettings: public DeveloperSettings
{
public:
	char                                                         NameplateCollisionChannel;                         // 0x38(0x1)
	char                                                         pad0x7_VTXSJ[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ShipEmbedToken: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EquipClothingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SprintActivationNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenLordEncounterServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class PortalDesc: public DataAsset
{
public:
	class TunnelDesc*                                            TunnelDesc;                                        // 0x28(0x8)
	struct StringAssetReference                                  RequestedPortalInstance;                           // 0x30(0x10)
	char                                                         pad0x20_4QSS6[0x20];                               // 0x40(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnBottomTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class WetnessComponent: public ActorComponent
{
public:
	struct Vector                                                MaxWaterLevel;                                     // 0xb8(0xc)
	struct Vector                                                MinWaterLevel;                                     // 0xc4(0xc)
	float                                                        DryingTime;                                        // 0xd0(0x4)
	float                                                        LastWaterLevel;                                    // 0xd4(0x4)
	float                                                        LastWetTime;                                       // 0xd8(0x4)
	float                                                        WaterLevel;                                        // 0xdc(0x4)
	struct Vector                                                Rep_WetData;                                       // 0xe0(0xc)
	char                                                         pad0x4_F5KGK[0x4];                                 // 0xec(0x4)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0xf0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GenericWorldMapMarkerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoginOptionsProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintScoringInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimationMontageInterface: public Interface
{
public:
};


// Size 0x648 (Full Size[0x9e8] - InheritedSize[0x3a0]
class Mast: public Actor
{
public:
	char                                                         pad0x48_EXM1L[0x48];                               // 0x3a0(0x48)
	char                                                         MastType;                                          // 0x3e8(0x1)
	char                                                         pad0x7_CB0FU[0x7];                                 // 0x3e9(0x7)
	class MastAudioParams*                                       MastAudioParams;                                   // 0x3f0(0x8)
	class SceneComponent*                                        SceneRootComponent;                                // 0x3f8(0x8)
	class IntentCombinerComponent*                               AngleCombinerComponent;                            // 0x400(0x8)
	class IntentCombinerComponent*                               SailHoistIntentCombinerComponent;                  // 0x408(0x8)
	class IntentCombinerComponent*                               MastHoistIntentCombinerComponent;                  // 0x410(0x8)
	class SceneComponent*                                        MastMovingAttachComponent;                         // 0x418(0x8)
	class SceneComponent*                                        SailAnglePivotComponent;                           // 0x420(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x428(0x8)
	class RepairableComponent*                                   RepairableComponentFirst;                          // 0x430(0x8)
	class RepairableComponent*                                   RepairableComponentSecond;                         // 0x438(0x8)
	class RepairableComponent*                                   RepairableComponentThird;                          // 0x440(0x8)
	class ShipDamageableComponent*                               DamageableComponent;                               // 0x448(0x8)
	class MastFlammableComponent*                                MastFlammableComponent;                            // 0x450(0x8)
	float                                                        AngleBlend;                                        // 0x458(0x4)
	float                                                        LoweredBlend;                                      // 0x45c(0x4)
	float                                                        LoweringSpeed;                                     // 0x460(0x4)
	float                                                        RaisingSpeed;                                      // 0x464(0x4)
	float                                                        TurnSpeed;                                         // 0x468(0x4)
	float                                                        MaxTurnAngle;                                      // 0x46c(0x4)
	float                                                        SailOffsetFromMast;                                // 0x470(0x4)
	float                                                        SailWidth;                                         // 0x474(0x4)
	float                                                        SailHeight;                                        // 0x478(0x4)
	float                                                        SailStartOffset;                                   // 0x47c(0x4)
	struct Vector                                                LookAtPosLow;                                      // 0x480(0xc)
	struct Vector                                                LookAtPosHigh;                                     // 0x48c(0xc)
	class WwiseObjectPoolWrapper*                                SailAudioPool;                                     // 0x498(0x8)
	class WwiseEvent*                                            AmbientSailFlapsSfx;                               // 0x4a0(0x8)
	class WwiseEvent*                                            AmbientSailFlapsStopSfx;                           // 0x4a8(0x8)
	class WwiseEvent*                                            PerfectSailInflationOneShot;                       // 0x4b0(0x8)
	class WwiseEvent*                                            SailLostPerfectWindOneShot;                        // 0x4b8(0x8)
	struct FName                                                 InflationRTPC;                                     // 0x4c0(0x8)
	struct FName                                                 SailLengthRTPC;                                    // 0x4c8(0x8)
	float                                                        ClientSailBlendSpeed;                              // 0x4d0(0x4)
	char                                                         pad0x4_ZN8QZ[0x4];                                 // 0x4d4(0x4)
	TArray<class StaticMeshComponent*>                           YardArms;                                          // 0x4d8(0x10)
	struct FName                                                 TelemetryIdentifier;                               // 0x4e8(0x8)
	bool                                                         MastShouldBeFractured;                             // 0x4f0(0x1)
	char                                                         pad0x3_FC1LT[0x3];                                 // 0x4f1(0x3)
	struct MastCollisionProfiles                                 MastCollisionProfiles;                             // 0x4f4(0x28)
	char                                                         pad0x4_7J6D4[0x4];                                 // 0x51c(0x4)
	struct MastPhysicsComponents                                 MastPhysicsComponents;                             // 0x520(0x38)
	class StaticMesh*                                            MastIntactMesh;                                    // 0x558(0x8)
	class StaticMesh*                                            MastFractureMeshBottom;                            // 0x560(0x8)
	float                                                        MastFractureMeshBottomScale;                       // 0x568(0x4)
	float                                                        MastFractureMeshOriginalScale;                     // 0x56c(0x4)
	class StaticMesh*                                            MastFractureMeshTop;                               // 0x570(0x8)
	class ParticleSystem*                                        DamageParticleSystem;                              // 0x578(0x8)
	float                                                        HingeHeight;                                       // 0x580(0x4)
	float                                                        HingeDistanceFromCentre;                           // 0x584(0x4)
	float                                                        HingeDirectionAngle;                               // 0x588(0x4)
	float                                                        MaxFallAngle;                                      // 0x58c(0x4)
	float                                                        MastLiftingSpeed;                                  // 0x590(0x4)
	bool                                                         OverrideSailLengthWhenFalling;                     // 0x594(0x1)
	char                                                         pad0x3_QH58N[0x3];                                 // 0x595(0x3)
	float                                                        MaxFallenSailLength;                               // 0x598(0x4)
	float                                                        SailFoldingSpeed;                                  // 0x59c(0x4)
	bool                                                         OverrideSailAngleWhenFalling;                      // 0x5a0(0x1)
	char                                                         pad0x3_4BC8B[0x3];                                 // 0x5a1(0x3)
	float                                                        DesiredFallingSailAngle;                           // 0x5a4(0x4)
	float                                                        SailTwistingSpeed;                                 // 0x5a8(0x4)
	char                                                         pad0x4_E66H6[0x4];                                 // 0x5ac(0x4)
	class MastHinge*                                             Hinge;                                             // 0x5b0(0x8)
	struct WeightedProbabilityRangeOfRanges                      MastImpactForceToApplyToShip;                      // 0x5b8(0x30)
	float                                                        MastImpactForceModifierToApplyToKrakenWrappedShip; // 0x5e8(0x4)
	float                                                        MastImpactHeightLocation;                          // 0x5ec(0x4)
	class UClass*                                                CameraShake;                                       // 0x5f0(0x8)
	float                                                        CameraShakeInnerRadius;                            // 0x5f8(0x4)
	float                                                        CameraShakeOuterRadius;                            // 0x5fc(0x4)
	bool                                                         PreviewMastFallenPosition;                         // 0x600(0x1)
	char                                                         pad0x7_FY25M[0x7];                                 // 0x601(0x7)
	TArray<class RepairableComponent*>                           RepairableComponents;                              // 0x608(0x10)
	struct MastDamageAudioParams                                 DamageAudioParameters;                             // 0x618(0xb0)
	char                                                         pad0x8_PBK8M[0x8];                                 // 0x6c8(0x8)
	class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x6d0(0x8)
	char                                                         pad0xa0_X6GE5[0xa0];                               // 0x6d8(0xa0)
	TArray<class ChildActorComponent*>                           LinkedSails;                                       // 0x778(0x10)
	struct IntentPredictor                                       LengthIntentPredictor;                             // 0x788(0x1c)
	struct IntentPredictor                                       AngleIntentPredictor;                              // 0x7a4(0x1c)
	struct IntentPredictor                                       MastHoistIntentPredictor;                          // 0x7c0(0x1c)
	bool                                                         MastHoistingControlSchemeActive;                   // 0x7dc(0x1)
	char                                                         pad0x3_U6UQS[0x3];                                 // 0x7dd(0x3)
	struct ObjectMessagingHandle                                 SailGotPerfectWindEventHandle;                     // 0x7e0(0x58)
	struct ObjectMessagingHandle                                 SailLostPerfectWindEventHandle;                    // 0x838(0x58)
	struct ObjectMessagingHandle                                 MastRepairStoppedHandle;                           // 0x890(0x58)
	char                                                         pad0x10_RQQZY[0x10];                               // 0x8e8(0x10)
	struct WwiseEmitter                                          SailsAudioEmitter;                                 // 0x8f8(0x20)
	float                                                        ServerAngleRatio;                                  // 0x918(0x4)
	float                                                        ServerLoweredProportion;                           // 0x91c(0x4)
	char                                                         ForceBillowingState;                               // 0x920(0x1)
	char                                                         pad0x3_NBT7M[0x3];                                 // 0x921(0x3)
	float                                                        ServerMastFallingProportion;                       // 0x924(0x4)
	char                                                         pad0x1c_FMVDC[0x1c];                               // 0x928(0x1c)
	bool                                                         AllowedToFall;                                     // 0x944(0x1)
	bool                                                         PlayAudio;                                         // 0x945(0x1)
	char                                                         pad0x3a_84LUM[0x3a];                               // 0x946(0x3a)
	bool                                                         IsCursed;                                          // 0x980(0x1)
	char                                                         pad0x67_JLALD[0x67];                               // 0x981(0x67)
};


// Size 0x460 (Full Size[0x518] - InheritedSize[0xb8]
class NPCDialogComponent: public ActorComponent
{
public:
	char                                                         pad0x18_N9V41[0x18];                               // 0xb8(0x18)
	struct FText                                                 WelcomeMessage;                                    // 0xd0(0x38)
	class NPCDialogTreeData*                                     Data;                                              // 0x108(0x8)
	class NPCDialogTreeDataOptions*                              OverrideDialogData;                                // 0x110(0x8)
	class ScriptStruct*                                          DialogBlackboardSchema;                            // 0x118(0x8)
	class UClass*                                                InputID;                                           // 0x120(0x8)
	char                                                         ActionDisplayPriority;                             // 0x128(0x1)
	char                                                         pad0x7_MZTS3[0x7];                                 // 0x129(0x7)
	class WwiseObjectPoolWrapper*                                NpcDialoguePool;                                   // 0x130(0x8)
	class WwiseEvent*                                            NpcDialogueWelcome;                                // 0x138(0x8)
	class WwiseEvent*                                            NpcDialogueBridge;                                 // 0x140(0x8)
	class WwiseEvent*                                            NpcDialogueGoodbye;                                // 0x148(0x8)
	bool                                                         CreateInteractionRules;                            // 0x150(0x1)
	char                                                         pad0x3_092HV[0x3];                                 // 0x151(0x3)
	float                                                        DialogueInputFocusTimeout;                         // 0x154(0x4)
	struct FString                                               TelemetryKey;                                      // 0x158(0x10)
	TArray<struct MysteriousNotesCompletionEventsModelEntry>     NoteCompletionIdents;                              // 0x168(0x10)
	TArray<struct PlayerStat>                                    StatsToFireOnDialogStart;                          // 0x178(0x10)
	TArray<class Class*>                                         ConditionalStatsToFireOnDialogStart;               // 0x188(0x10)
	char                                                         pad0x240_P4KZR[0x240];                             // 0x198(0x240)
	float                                                        MaximumDistanceForContinuedInteraction;            // 0x3d8(0x4)
	char                                                         pad0x4_E8J0Q[0x4];                                 // 0x3dc(0x4)
	class Controller*                                            InteractingController;                             // 0x3e0(0x8)
	TArray<struct OverrideDialogOptionUsageCounter>              DialogOptionUsageCounters;                         // 0x3e8(0x10)
	TArray<char>                                                 DialogBlackboard;                                  // 0x3f8(0x10)
	char                                                         pad0x34_WSS9U[0x34];                               // 0x408(0x34)
	bool                                                         Disabled;                                          // 0x43c(0x1)
	char                                                         pad0x3_4GBFM[0x3];                                 // 0x43d(0x3)
	struct Guid                                                  CurrentInteractionSessionId;                       // 0x440(0x10)
	int                                                          ActiveOverrideDataIndex;                           // 0x450(0x4)
	char                                                         pad0x4_XAPI0[0x4];                                 // 0x454(0x4)
	class NPCDialogTreeData*                                     ActiveData;                                        // 0x458(0x8)
	TArray<class Actor*>                                         ActiveDialogueInteractorsOnServer;                 // 0x460(0x10)
	class UClass*                                                PreviousConversationInteractionType;               // 0x4c0(0x8)
	char                                                         pad0x50_U2RW6[0x50];                               // 0x4c8(0x50)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AlliancePennantAsset: public DataAsset
{
public:
	TArray<struct AlliancePennantData>                           AlliancePennants;                                  // 0x28(0x10)
	TArray<struct ShipSizePartCustomizationNameData>             ShipAlliancePennantPartNames;                      // 0x38(0x10)
	struct StringAssetReference                                  EmptyPennantDesc;                                  // 0x48(0x10)
};


// Size 0x28 (Full Size[0xb8] - InheritedSize[0x90]
class BTDecorator_ActorWieldedItemClass: public BTDecorator_BlackboardBase
{
public:
	float                                                        Interval;                                          // 0x90(0x4)
	char                                                         pad0x4_KLDSP[0x4];                                 // 0x94(0x4)
	char                                                         pad0x20_M6WQW[0x20];                               // 0x98(0x20)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class KrakenShipWrappingTentacleAIAudioComponentParams: public DataAsset
{
public:
	class WwiseEvent*                                            PlayWrapping;                                      // 0x28(0x8)
	class WwiseEvent*                                            StopWrapping;                                      // 0x30(0x8)
	class WwiseEvent*                                            PlayWrappedLoop;                                   // 0x38(0x8)
	class WwiseEvent*                                            StopWrappedLoop;                                   // 0x40(0x8)
	class WwiseEvent*                                            PlayUnwrapping;                                    // 0x48(0x8)
	class WwiseEvent*                                            StopUnwrapping;                                    // 0x50(0x8)
};


// Size 0x108 (Full Size[0x188] - InheritedSize[0x80]
class SpawnRewardStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableItemSpawnDataType                        ItemSpawnData;                                     // 0x80(0x30)
	struct QuestVariableVector                                   SpawnLocationVector;                               // 0xb0(0x30)
	struct QuestVariableTransform                                SpawnLocationTransform;                            // 0xe0(0x38)
	struct QuestVariableActor                                    SpawnedActor;                                      // 0x118(0x30)
	bool                                                         Tracked;                                           // 0x148(0x1)
	bool                                                         TrackedProxy;                                      // 0x149(0x1)
	bool                                                         Critical;                                          // 0x14a(0x1)
	bool                                                         DropOnSpawn;                                       // 0x14b(0x1)
	char                                                         pad0x4_Q2PXY[0x4];                                 // 0x14c(0x4)
	struct FText                                                 FailureMessage;                                    // 0x150(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortsWorldDataInterface: public Interface
{
public:
};


// Size 0x2f0 (Full Size[0x730] - InheritedSize[0x440]
class NPCOnShipSimpleAnimInstance: public AnimInstance
{
public:
	class AnimSequenceBase*                                      Into;                                              // 0x440(0x8)
	class AnimSequenceBase*                                      Loop;                                              // 0x448(0x8)
	class AnimSequenceBase*                                      ActiveLoop;                                        // 0x450(0x8)
	class AnimSequenceBase*                                      Outof;                                             // 0x458(0x8)
	class AnimSequenceBase*                                      OutOfAlternate;                                    // 0x460(0x8)
	class CustomAnimationMontageDefinitionListingDataAsset*      CustomAnimationMontageDefinitionListingDataAsset;  // 0x468(0x8)
	class CustomAnimationMontageDefinitionListingDataAsset*      FacialCustomAnimationMontageDefinitionListingDataAsset; // 0x470(0x8)
	struct AnimationLookAt                                       LookAt;                                            // 0x478(0xa8)
	struct CustomAnimationMontageStateMachine                    MontageStateMachine;                               // 0x520(0xd8)
	struct CustomAnimationMontageStateMachine                    FacialMontageStateMachine;                         // 0x5f8(0xd8)
	class WeightedAnimSequenceLoadOnDemand*                      LoadOnDemandInactive;                              // 0x6d0(0x8)
	class WeightedAnimSequenceLoadOnDemand*                      LoadOnDemandActive;                                // 0x6d8(0x8)
	class WeightedAnimationLoadOnDemandDataAsset*                LoadOnDemandActiveData;                            // 0x6e0(0x8)
	class WeightedAnimationLoadOnDemandDataAsset*                LoadOnDemandInactiveData;                          // 0x6e8(0x8)
	bool                                                         ActiveUsesWeightedIdles;                           // 0x6f0(0x1)
	bool                                                         InactiveUsesWeightedIdles;                         // 0x6f1(0x1)
	bool                                                         UseActiveAnimSet;                                  // 0x6f2(0x1)
	bool                                                         LoopCompleted;                                     // 0x6f3(0x1)
	bool                                                         UseAlternateOutOf;                                 // 0x6f4(0x1)
	char                                                         pad0x3b_2EOKU[0x3b];                               // 0x6f5(0x3b)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class BaseItemScoreProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_3VQ1D[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeAttackClientResponseInterface: public Interface
{
public:
};


// Size 0x58 (Full Size[0xf0] - InheritedSize[0x98]
class WaitForTunnelOfTheDamnedMigrationTaleQuestStep: public TaleQuestStep
{
public:
	class WaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc*    Desc;                                              // 0x98(0x8)
	char                                                         pad0x50_SZSTE[0x50];                               // 0xa0(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomInactivityDetectionInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x108] - InheritedSize[0x28]
class CargoRunCrateData: public DataAsset
{
public:
	TArray<struct Text>                                          DeliveryNoteDescriptions;                          // 0x28(0x10)
	TArray<struct Text>                                          DeliveryNoteDescriptionsNoDeadline;                // 0x38(0x10)
	TArray<struct Text>                                          DeliveryNoteDescriptionsLate;                      // 0x48(0x10)
	TArray<struct Text>                                          DeliveryNoteClose;                                 // 0x58(0x10)
	TArray<struct Text>                                          DeliveryNoteWelcome;                               // 0x68(0x10)
	TArray<struct Text>                                          DeliveryNoteWelcomeLate;                           // 0x78(0x10)
	bool                                                         ShowCareInstructions;                              // 0x88(0x1)
	char                                                         pad0x7_XNWEQ[0x7];                                 // 0x89(0x7)
	struct FText                                                 CareInstructionsText;                              // 0x90(0x38)
	struct FText                                                 CareInstructionsBackText;                          // 0xc8(0x38)
	float                                                        WashedUpMinDistanceToNPC;                          // 0x100(0x4)
	float                                                        WashedUpMaxDistanceToNPC;                          // 0x104(0x4)
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class ShipInteractionHandlerComponent: public ActorComponent
{
public:
	TArray<class Class*>                                         CapstanTypes;                                      // 0xb8(0x10)
	TArray<class Class*>                                         WheelTypes;                                        // 0xc8(0x10)
	TArray<class Class*>                                         CannonPlayerLoadingInteractionPointTypes;          // 0xd8(0x10)
	TArray<class Class*>                                         CannonTypes;                                       // 0xe8(0x10)
	TArray<class Class*>                                         HarpoonTypes;                                      // 0xf8(0x10)
	TArray<class Class*>                                         LadderTypes;                                       // 0x108(0x10)
	TArray<class Class*>                                         SailAngleTypes;                                    // 0x118(0x10)
	TArray<class Class*>                                         SailLengthTypes;                                   // 0x128(0x10)
	TArray<class Class*>                                         BarrelTypes;                                       // 0x138(0x10)
	bool                                                         IsInteractionOnShipPartsEnabled;                   // 0x148(0x1)
	char                                                         pad0x7_FEFOQ[0x7];                                 // 0x149(0x7)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class SetVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AmmoBaseEffect: public Object
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingRightStickYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0xa0 (Full Size[0x440] - InheritedSize[0x3a0]
class ServiceStatusNotificationsService: public Actor
{
public:
	char                                                         pad0x8_Q1HFI[0x8];                                 // 0x3a0(0x8)
	TArray<struct ServiceStatusNotification>                     ActiveNotifications;                               // 0x3a8(0x10)
	char                                                         pad0x80_CU563[0x80];                               // 0x3b8(0x80)
	char                                                         pad0x8_VGYKX[0x8];                                 // 0x438(0x8)
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class LayerInContainerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_ARGNK[0x8];                                 // 0xb8(0x8)
	struct Transform                                             MeshComponentRelativeTransform;                    // 0xc0(0x30)
	struct ComponentReference                                    MeshComponentAttachParent;                         // 0xf0(0x18)
	float                                                        FadeRate;                                          // 0x108(0x4)
	bool                                                         CanTake;                                           // 0x10c(0x1)
	char                                                         pad0x3_1NTZH[0x3];                                 // 0x10d(0x3)
	class LayerInContainerComponent*                             LayerBlockingTakingThisLayer;                      // 0x110(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x118(0x10)
	char                                                         pad0x18_WHYA0[0x18];                               // 0x128(0x18)
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x140(0x8)
	bool                                                         Visible;                                           // 0x148(0x1)
	char                                                         pad0x7_7A4TW[0x7];                                 // 0x149(0x7)
	class StaticMesh*                                            LayerMesh;                                         // 0x150(0x8)
	char                                                         pad0x8_63EP4[0x8];                                 // 0x158(0x8)
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class CompassDirectionTaleQuestFunctionLibary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0xc0 (Full Size[0x140] - InheritedSize[0x80]
class ContestSelectIslandForItemStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableContestIslandArchetype                   IslandArchetype;                                   // 0x80(0x30)
	struct QuestVariableInt                                      NumberOfChests;                                    // 0xb0(0x30)
	struct QuestVariableNameArray                                PreviousIslands;                                   // 0xe0(0x30)
	struct QuestVariableNameArray                                SelectedIslands;                                   // 0x110(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OrbOfSecretsInterface: public Interface
{
public:
};


// Size 0x168 (Full Size[0x220] - InheritedSize[0xb8]
class DiggingComponent: public ActorComponent
{
public:
	char                                                         pad0x30_DLUOY[0x30];                               // 0xb8(0x30)
	class Actor*                                                 Discoverer;                                        // 0xe8(0x8)
	struct BuriedFactor                                          BuriedFactor;                                      // 0xf0(0x14)
	char                                                         State;                                             // 0x104(0x1)
	char                                                         pad0x3_9N1L5[0x3];                                 // 0x105(0x3)
	struct Vector                                                StartingLocation;                                  // 0x108(0xc)
	struct Rotator                                               StartingRotation;                                  // 0x114(0xc)
	class MaterialInstanceDynamic*                               ItemDynamicMaterial;                               // 0x120(0x8)
	struct ItemDiggingMergedConfig                               DiggingConfig;                                     // 0x128(0x28)
	class DiggingSettings*                                       DiggingSettings;                                   // 0x150(0x8)
	class WwiseObjectPoolWrapper*                                CachedSfxPool;                                     // 0x158(0x8)
	char                                                         pad0xc0_XG3MQ[0xc0];                               // 0x160(0xc0)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackCollection: public DataAsset
{
public:
	int                                                          MaxScoringPerFrame;                                // 0x28(0x4)
	char                                                         pad0x4_M2WHA[0x4];                                 // 0x2c(0x4)
	TArray<float>                                                GlobalThresholdsMB;                                // 0x30(0x10)
	TArray<class MeshMemoryConstraintFallbackDataAsset*>         FallbackDataAssets;                                // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeingRetractedActionStateId: public ActionStateId
{
public:
};


// Size 0x1b8 (Full Size[0x270] - InheritedSize[0xb8]
class PirateSelector: public ActorComponent
{
public:
	TArray<class PosablePirate*>                                 QueuedPiratesToSpawn;                              // 0xb8(0x10)
	char                                                         pad0x1a8_J2EXF[0x1a8];                             // 0xc8(0x1a8)
};


// Size 0x270 (Full Size[0x328] - InheritedSize[0xb8]
class IslandEventTooltipComponent: public ActorComponent
{
public:
	char                                                         pad0x10_9Z6MU[0x10];                               // 0xb8(0x10)
	TArray<struct IslandEventTooltipData>                        CachedTooltipData;                                 // 0xc8(0x10)
	struct Vector2D                                              TooltipOffsetRatio;                                // 0xd8(0x8)
	float                                                        FadeDuration;                                      // 0xe0(0x4)
	char                                                         pad0x4_E7S7V[0x4];                                 // 0xe4(0x4)
	struct FText                                                 ShowTooltipText;                                   // 0xe8(0x38)
	struct FText                                                 HideTooltipText;                                   // 0x120(0x38)
	char                                                         pad0x1d0_XN2YF[0x1d0];                             // 0x158(0x1d0)
};


// Size 0xe8 (Full Size[0x110] - InheritedSize[0x28]
class ContendedResourceService: public Object
{
public:
	char                                                         pad0x10_T7G9V[0x10];                               // 0x28(0x10)
	class World*                                                 World;                                             // 0x38(0x8)
	char                                                         pad0xd0_QRNFE[0xd0];                               // 0x40(0xd0)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NPCDialogConditional: public Object
{
public:
	bool                                                         ConditionalExpected;                               // 0x28(0x1)
	char                                                         pad0x7_9KSY6[0x7];                                 // 0x29(0x7)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class ProjectileCooldownService: public Actor
{
public:
	char                                                         pad0x28_AWPQ7[0x28];                               // 0x3a0(0x28)
	class ProjectileCooldownServiceSettings*                     ProjectileCooldownSettings;                        // 0x3c8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismAnimationDurationProviderInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x210] - InheritedSize[0xb8]
class BootyItemBuryHistoryComponent: public ActorComponent
{
public:
	char                                                         pad0x158_V4E7V[0x158];                             // 0xb8(0x158)
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class HealthRegenerationPoolComponent: public ActorComponent
{
public:
	char                                                         pad0x8_MG2QD[0x8];                                 // 0xb8(0x8)
	float                                                        MaxCapacity;                                       // 0xc0(0x4)
	float                                                        HealingRate;                                       // 0xc4(0x4)
	float                                                        HealingDelayWhenDamaged;                           // 0xc8(0x4)
	char                                                         pad0x4_06MYQ[0x4];                                 // 0xcc(0x4)
	double                                                       UIUpdateThrottleMs;                                // 0xd0(0x8)
	char                                                         pad0x38_Z6RNP[0x38];                               // 0xd8(0x38)
	struct HealthRegenState                                      RegenerationState;                                 // 0x110(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenLordsAIDioramaCategory: public AIDioramaCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogInteractionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanPlayEnsembleWithAnotherCrewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShip_Default: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObjectMeshInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EffectBlendObjectBase: public Object
{
public:
	float                                                        SubItemBlendRangeMin;                              // 0x28(0x4)
	float                                                        SubItemBlendRangeMax;                              // 0x2c(0x4)
	char                                                         pad0x8_DJKE2[0x8];                                 // 0x30(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class LoadoutAsset: public DataAsset
{
public:
	struct ItemLoadout                                           ItemLoadout;                                       // 0x28(0x20)
	struct FName                                                 FeatureName;                                       // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TraceableProjectileInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SoakableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class TriggerObject: public Actor
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleQuestLockCaptainCabinDoorStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableShipwreck                                Shipwreck;                                         // 0x80(0x30)
	struct QuestVariableItemInfo                                 CabinKey;                                          // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemKeepAliveSourceServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xc8] - InheritedSize[0x98]
class ShadowAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	float                                                        LightStateActivationTime;                          // 0x98(0x4)
	float                                                        LightStateCooldown;                                // 0x9c(0x4)
	float                                                        PlayerLanternIdleLightRange;                       // 0xa0(0x4)
	float                                                        PlayerLanternRaisedLightRange;                     // 0xa4(0x4)
	float                                                        FlareLightRange;                                   // 0xa8(0x4)
	float                                                        LightExposureStunDuration;                         // 0xac(0x4)
	TArray<char>                                                 FlamePhobias;                                      // 0xb0(0x10)
	bool                                                         AfraidOfLight;                                     // 0xc0(0x1)
	char                                                         pad0x7_NT80U[0x7];                                 // 0xc1(0x7)
};


// Size 0x50 (Full Size[0xd0] - InheritedSize[0x80]
class TaleQuestPlayerStatQueryStepDesc: public TaleQuestStepDesc
{
public:
	class TaleQuestStatQueryFunctionComparator*                  Comparator;                                        // 0x80(0x8)
	struct PlayerStat                                            Stat;                                              // 0x88(0x4)
	char                                                         pad0x4_00A36[0x4];                                 // 0x8c(0x4)
	struct QuestVariableActor                                    Participant;                                       // 0x90(0x30)
	class TaleQuestStepDesc*                                     IfCondition;                                       // 0xc0(0x8)
	class TaleQuestStepDesc*                                     ElseCondition;                                     // 0xc8(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class RandomPirateLegendSectionStep: public TaleQuestStep
{
public:
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class TaleQuestLoopStep: public TaleQuestStep
{
public:
	class TaleQuestLoopStepDesc*                                 Desc;                                              // 0x98(0x8)
	char                                                         pad0x10_4DU9R[0x10];                               // 0xa0(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipAssetClassDatabaseService: public Object
{
public:
	char                                                         pad0x8_5BMYL[0x8];                                 // 0x28(0x8)
	class StringToAssetClassMap*                                 StringToAssetClassMap;                             // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AccessibilityFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAIItemDropList: public DataAsset
{
public:
	TArray<struct SpawnCommandsAIItemDrop>                       LootList;                                          // 0x28(0x10)
};


// Size 0x118 (Full Size[0x1d0] - InheritedSize[0xb8]
class CrewLockableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_2Q8K5[0x8];                                 // 0xb8(0x8)
	bool                                                         StartLocked;                                       // 0xc0(0x1)
	bool                                                         AllianceInteractable;                              // 0xc1(0x1)
	char                                                         pad0x2_N28EC[0x2];                                 // 0xc2(0x2)
	float                                                        LockHoldTime;                                      // 0xc4(0x4)
	bool                                                         CrewCanUnlock;                                     // 0xc8(0x1)
	char                                                         pad0x3_JE6GU[0x3];                                 // 0xc9(0x3)
	float                                                        UnlockHoldTime;                                    // 0xcc(0x4)
	bool                                                         CrewCanUseWhenLocked;                              // 0xd0(0x1)
	bool                                                         OpponentCanPickLock;                               // 0xd1(0x1)
	char                                                         pad0x2_B0ICJ[0x2];                                 // 0xd2(0x2)
	float                                                        OpponentPickLockHoldTime;                          // 0xd4(0x4)
	class UClass*                                                LockUnlockPressedNotificationInputID;              // 0xd8(0x8)
	class UClass*                                                LockUnlockReleasedNotificationInputID;             // 0xe0(0x8)
	char                                                         LockUnlockDisplayPriority;                         // 0xe8(0x1)
	char                                                         pad0x7_I9UO1[0x7];                                 // 0xe9(0x7)
	class UClass*                                                PickLockPressedNotificationInputID;                // 0xf0(0x8)
	class UClass*                                                PickLockReleasedNotificationInputID;               // 0xf8(0x8)
	char                                                         PickLockDisplayPriority;                           // 0x100(0x1)
	char                                                         pad0x7_1DI9T[0x7];                                 // 0x101(0x7)
	struct ComponentReference                                    LockMeshComponentReference;                        // 0x108(0x18)
	class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x120(0x8)
	class WwiseEvent*                                            StartPickingLockAudioEvent;                        // 0x128(0x8)
	class WwiseEvent*                                            StopPickingLockAudioEvent;                         // 0x130(0x8)
	class WwiseEvent*                                            StartLockingAudioEvent;                            // 0x138(0x8)
	class WwiseEvent*                                            StopLockingAudioEvent;                             // 0x140(0x8)
	class WwiseEvent*                                            StartUnlockingAudioEvent;                          // 0x148(0x8)
	class WwiseEvent*                                            StopUnlockingAudioEvent;                           // 0x150(0x8)
	class WwiseEvent*                                            LockAudioEvent;                                    // 0x158(0x8)
	class WwiseEvent*                                            UnlockAudioEvent;                                  // 0x160(0x8)
	bool                                                         Locked;                                            // 0x168(0x1)
	bool                                                         IsLockPickingStarted;                              // 0x169(0x1)
	bool                                                         IsLockingStarted;                                  // 0x16a(0x1)
	bool                                                         IsUnlockingStarted;                                // 0x16b(0x1)
	char                                                         pad0x4_TX8C8[0x4];                                 // 0x16c(0x4)
	class StaticMeshComponent*                                   LockedStateMesh;                                   // 0x170(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x178(0x8)
	struct Guid                                                  AssociatedCrewID;                                  // 0x180(0x10)
	char                                                         pad0x40_WFBZI[0x40];                               // 0x190(0x40)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AggressiveGhostShipLocationDataAsset: public DataAsset
{
public:
	float                                                        MinRadialSplineOffsetInMetres;                     // 0x28(0x4)
	float                                                        MaxRadialSplineOffsetInMetres;                     // 0x2c(0x4)
	bool                                                         UseAlternativeSplinePoints;                        // 0x30(0x1)
	char                                                         pad0x3_L01II[0x3];                                 // 0x31(0x3)
	int                                                          MinNumAlternativeSplinePoints;                     // 0x34(0x4)
	int                                                          MaxNumAlternativeSplinePoints;                     // 0x38(0x4)
	float                                                        AlternativeMinRadialSplineOffsetInMetres;          // 0x3c(0x4)
	float                                                        AlternativeMaxRadialSplineOffsetInMetres;          // 0x40(0x4)
	float                                                        AlternativeMinRadialBlendValue1;                   // 0x44(0x4)
	float                                                        AlternativeMinRadialBlendValue2;                   // 0x48(0x4)
	float                                                        MinDistanceBetweenSplinePointsInMetres;            // 0x4c(0x4)
	float                                                        CacheDistanceInMetres;                             // 0x50(0x4)
	char                                                         pad0x4_B3EUL[0x4];                                 // 0x54(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ShipNosediveBrake: public DataAsset
{
public:
	class CurveFloat*                                            SubmersionVsBrakeFactorCurve;                      // 0x28(0x8)
	float                                                        BrakeForceScalar;                                  // 0x30(0x4)
	struct Vector                                                LocalProbePos;                                     // 0x34(0xc)
	float                                                        ProbeHeight;                                       // 0x40(0x4)
	char                                                         pad0x4_RW87S[0x4];                                 // 0x44(0x4)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class DeliverableRedirectionCompanyContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
	bool                                                         ContextCanContainMoreCompanies;                    // 0x30(0x1)
	char                                                         pad0x7_CVW7M[0x7];                                 // 0x31(0x7)
	TArray<class Class*>                                         TargetCompanies;                                   // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DestroyableUsableInterface: public Interface
{
public:
};


// Size 0x2c8 (Full Size[0x668] - InheritedSize[0x3a0]
class LaunchableProjectile: public Actor
{
public:
	char                                                         pad0x20_8GHC1[0x20];                               // 0x3a0(0x20)
	class WaterSplashComponent*                                  WaterSplashComponent;                              // 0x3c0(0x8)
	class ProjectileMovementComponent*                           ProjectileComponent;                               // 0x3c8(0x8)
	float                                                        LaunchLerpTime;                                    // 0x3d0(0x4)
	char                                                         pad0x4_KL6DI[0x4];                                 // 0x3d4(0x4)
	class UClass*                                                ImpactProjectileId;                                // 0x3d8(0x8)
	class Object*                                                TrailEffectAboveWater;                             // 0x3e0(0x8)
	class Object*                                                TrailEffectBelowWater;                             // 0x3e8(0x8)
	char                                                         TrailVfxRegion;                                    // 0x3f0(0x1)
	char                                                         pad0x3_XJOYD[0x3];                                 // 0x3f1(0x3)
	struct Vector                                                TrailVFXScale;                                     // 0x3f4(0xc)
	struct FName                                                 TrailSocketName;                                   // 0x400(0x8)
	struct FName                                                 TrailEmitterName;                                  // 0x408(0x8)
	class WwiseEvent*                                            TrailSfxPlay;                                      // 0x410(0x8)
	class WwiseEvent*                                            TrailSfxStop;                                      // 0x418(0x8)
	class WwiseObjectPoolWrapper*                                TrailSfxPool;                                      // 0x420(0x8)
	bool                                                         DisableStandardCannonFireSfx;                      // 0x428(0x1)
	char                                                         pad0x7_UXODR[0x7];                                 // 0x429(0x7)
	class WwiseEvent*                                            ProjectileFiredSfx;                                // 0x430(0x8)
	class WwiseObjectPoolWrapper*                                ProjectileFiredSfxPool;                            // 0x438(0x8)
	bool                                                         DestroyWhenEnteringWater;                          // 0x440(0x1)
	bool                                                         AutoTriggerTrailEffects;                           // 0x441(0x1)
	char                                                         pad0xbe_DW7HY[0xbe];                               // 0x442(0xbe)
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x500(0x8)
	class ParticleSystemComponent*                               TrailEffect;                                       // 0x508(0x8)
	char                                                         pad0x2c_BMKLA[0x2c];                               // 0x510(0x2c)
	float                                                        LaunchSpeed;                                       // 0x53c(0x4)
	float                                                        GravityScale;                                      // 0x540(0x4)
	char                                                         pad0x124_ZGF0S[0x124];                             // 0x544(0x124)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class NPCService: public Actor
{
public:
	char                                                         pad0x8_FS390[0x8];                                 // 0x3a0(0x8)
	TArray<struct NPCData>                                       NPCData;                                           // 0x3a8(0x10)
	char                                                         pad0x18_YKIJZ[0x18];                               // 0x3b8(0x18)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class CompanySettings: public DeveloperSettings
{
public:
	TArray<struct Name>                                          CompaniesThatDoNotSupportDistinctions;             // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestNetworkedEventsFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class AdventuresActorBundleTaleFunctionLibrary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerFallDamageInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class AnimNotify_PlayWorldCameraShake: public AnimNotify
{
public:
	class UClass*                                                CameraShake;                                       // 0x38(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x40(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x44(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAnimationKeyedInstrumentDataAsset: public DataAsset
{
public:
	class AnimSequence*                                          Into;                                              // 0x28(0x8)
	class AnimSequence*                                          Action;                                            // 0x30(0x8)
	class AnimSequence*                                          Outof;                                             // 0x38(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ResetVaultStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IdleCircleAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InSeaRockZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_78G83[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainsLogInteractableActionStateId: public ActionStateId
{
public:
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class MermaidPartsDesc: public MeshMemoryConstraintsAIPartsDesc
{
public:
	struct StringAssetReference                                  PlaySongEvent;                                     // 0x80(0x10)
	struct StringAssetReference                                  StopSongEvent;                                     // 0x90(0x10)
};


// Size 0x88 (Full Size[0x428] - InheritedSize[0x3a0]
class ReapersTributeShipEventService: public Actor
{
public:
	char                                                         pad0x18_2T82W[0x18];                               // 0x3a0(0x18)
	class CountHolderComponent*                                  CountHolderComponent;                              // 0x3b8(0x8)
	char                                                         EventState;                                        // 0x3c0(0x1)
	char                                                         ReapersTributeShipVotingWindowState;               // 0x3c1(0x1)
	char                                                         pad0x2_Y4WLO[0x2];                                 // 0x3c2(0x2)
	struct Guid                                                  PlayerCrewControllingTheReapersTributeShip;        // 0x3c4(0x10)
	bool                                                         ReapersTributeShipIsInCombat;                      // 0x3dc(0x1)
	char                                                         pad0x3_PMVJK[0x3];                                 // 0x3dd(0x3)
	class ReapersTributeShipEventSettings*                       ReapersTributeShipEventSettings;                   // 0x3e0(0x8)
	class ReapersTributeShipHandoverHandler*                     ReapersTributeShipHandoverHandler;                 // 0x3e8(0x8)
	class GameEventOnDemandAvailabilityHandler*                  GameEventOnDemandAvailabilityHandler;              // 0x3f0(0x8)
	struct FName                                                 TargetIslandName;                                  // 0x3f8(0x8)
	char                                                         pad0x28_KYBW5[0x28];                               // 0x400(0x28)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FoodPoisoningStatus: public StatusBase
{
public:
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class UserSettingsMapMarkProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HDM5T[0x8];                                 // 0xb8(0x8)
	TArray<struct UserSettingsMapMarkDefinition>                 MarkMappings;                                      // 0xc0(0x10)
	char                                                         pad0x28_MUB48[0x28];                               // 0xd0(0x28)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedItemDescSpawnDataAssetWithRandomQuantity: public DataAsset
{
public:
	TArray<struct WeightedItemDescSpawnDataWithRandomQuantity>   WeightedItemSpawnDatas;                            // 0x28(0x10)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class AddReloadAmmoActionRuleComponent: public ActorComponent
{
public:
	class UClass*                                                NotificationInputId;                               // 0xb8(0x8)
	char                                                         DisplayPriority;                                   // 0xc0(0x1)
	char                                                         pad0x7_IQVD0[0x7];                                 // 0xc1(0x7)
};


// Size 0x98 (Full Size[0x118] - InheritedSize[0x80]
class AddNPCOnSurfaceStepDesc: public TaleQuestStepDesc
{
public:
	class NPCOnSurfaceDataAsset*                                 NPCOnSurfaceDataAsset;                             // 0x80(0x8)
	struct QuestVariableActor                                    ParentActor;                                       // 0x88(0x30)
	struct QuestVariableGuid                                     NPCOnSurfaceManager;                               // 0xb8(0x30)
	struct TaleQuestPhaseClusterRootActor                        PhaseClusterToSpawnFor;                            // 0xe8(0x30)
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class WaterVolume: public Actor
{
public:
	float                                                        MaxAmount;                                         // 0x3a0(0x4)
	bool                                                         EnableRipplesFromOverlappingActors;                // 0x3a4(0x1)
	char                                                         pad0x3_NFYGF[0x3];                                 // 0x3a5(0x3)
	TArray<struct Vector>                                        RippleLocations;                                   // 0x3a8(0x10)
	TArray<struct Vector>                                        RippleGenerators;                                  // 0x3b8(0x10)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x3c8(0x10)
	float                                                        RippleFrequency;                                   // 0x3d8(0x4)
	float                                                        CurrentAmount;                                     // 0x3dc(0x4)
	float                                                        TargetAmount;                                      // 0x3e0(0x4)
	float                                                        LerpRate;                                          // 0x3e4(0x4)
	char                                                         pad0x38_E0CHJ[0x38];                               // 0x3e8(0x38)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookUpRateWithFixedSensitivityAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryInteractReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class Hole: public Actor
{
public:
	char                                                         pad0x8_DW9KN[0x8];                                 // 0x3a0(0x8)
	float                                                        BoundsScaleFactor;                                 // 0x3a8(0x4)
	float                                                        LifeTimeSpan;                                      // 0x3ac(0x4)
	float                                                        DestroyTimeSpan;                                   // 0x3b0(0x4)
	float                                                        ChanceOfSpawningAnItem;                            // 0x3b4(0x4)
	TArray<struct HoleItemToSpawn>                               ItemsToSpawn;                                      // 0x3b8(0x10)
	char                                                         pad0x8_TMH8C[0x8];                                 // 0x3c8(0x8)
	char                                                         State;                                             // 0x3d0(0x1)
	char                                                         pad0x7_T5SNQ[0x7];                                 // 0x3d1(0x7)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class DiggingSettings: public DeveloperSettings
{
public:
	class UClass*                                                BuriedDecalClass;                                  // 0x38(0x8)
	int                                                          MaxNumVisibleDecals;                               // 0x40(0x4)
	float                                                        DecalReplicationDistance;                          // 0x44(0x4)
	float                                                        FullyBuriedItemDestroyDelay;                       // 0x48(0x4)
	struct FName                                                 DirtinessParameterName;                            // 0x4c(0x8)
	float                                                        UpdateDirtynessDelayOnBury;                        // 0x54(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AggressiveGhostShipBannerDataAsset: public DataAsset
{
public:
	class AggressiveGhostShipNamesDataAsset*                     Header;                                            // 0x28(0x8)
	class AggressiveGhostShipNamesDataAsset*                     Footer;                                            // 0x30(0x8)
	struct FName                                                 Tag;                                               // 0x38(0x8)
	bool                                                         DisableMusic;                                      // 0x40(0x1)
	char                                                         pad0x7_NO148[0x7];                                 // 0x41(0x7)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class PlayerControlledShipParamsDataAsset: public DataAsset
{
public:
	class AIShipEncounterParamsDataAsset*                        PlayerShipEncounterParams;                         // 0x28(0x8)
	class ShipSinkingHandler*                                    ShipSinkingHandler;                                // 0x30(0x8)
	char                                                         GenericTeamId;                                     // 0x38(0x1)
	char                                                         pad0x3_MBMPP[0x3];                                 // 0x39(0x3)
	float                                                        PledgeVotingStartDelay;                            // 0x3c(0x4)
	TArray<class PlayerControlledWaterFillRateParamsDataAsset*>  WaterFillRateParams;                               // 0x40(0x10)
	class StatusRecipientResponseList*                           ShipStatusReponseList;                             // 0x50(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyGNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class DockableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7JELK[0x8];                                 // 0xb8(0x8)
	bool                                                         CanFocusOnOtherInteractablesWhileDocked;           // 0xc0(0x1)
	char                                                         pad0x7_BZH0M[0x7];                                 // 0xc1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedPointsComponentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class GreatFallStatus: public StatusBase
{
public:
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class EncounterSignalMechanismTargetHandler: public Actor
{
public:
	char                                                         pad0x8_4TAGM[0x8];                                 // 0x3a0(0x8)
	TArray<struct StringAssetReference>                          SignalMechanismAssetRefs;                          // 0x3a8(0x10)
	char                                                         pad0x10_V8PHC[0x10];                               // 0x3b8(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetIsShipAloneStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_0SGN4[0x8];                                 // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IndividualReplicationChannelProvider: public Interface
{
public:
};


// Size 0x28 (Full Size[0x90] - InheritedSize[0x68]
class BTDecorator_CanRepair: public BTDecorator_BaseConditional
{
public:
	struct BlackboardKeySelector                                 RepairActor;                                       // 0x68(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CollectorsChestInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class RumbleHandlerComponent: public ActorComponent
{
public:
	TArray<struct RumbleParameters>                              RumbleParameters;                                  // 0xb8(0x10)
	char                                                         pad0x40_JXKBM[0x40];                               // 0xc8(0x40)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class CutSceneSubtitlesComponent: public ActorComponent
{
public:
	char                                                         pad0x8_DKOZK[0x8];                                 // 0xb8(0x8)
	float                                                        SubtitleSphereRadiusInCm;                          // 0xc0(0x4)
	bool                                                         CanDrawDebugSubtitleRadius;                        // 0xc4(0x1)
	char                                                         pad0x1f_48144[0x1f];                               // 0xc5(0x1f)
	float                                                        SubtitleSphereRadiusInCmSqr;                       // 0xe4(0x4)
};


// Size 0xd8 (Full Size[0x100] - InheritedSize[0x28]
class CrouchingAnimationDataAsset: public DataAsset
{
public:
	char                                                         pad0x40_PA2FX[0x40];                               // 0x28(0x40)
	class AnimSequence*                                          FirstPersonFallbackAnimation;                      // 0x68(0x8)
	class AnimSequence*                                          ThirdPersonIntoAnimation;                          // 0x70(0x8)
	float                                                        TimeToResetAnimations;                             // 0xf8(0x4)
	char                                                         pad0x4_NLBOL[0x4];                                 // 0xfc(0x4)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class DeathCustomisationComponent: public ActorComponent
{
public:
	char                                                         pad0x30_F7VS6[0x30];                               // 0xb8(0x30)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WieldableBookPageList: public DataAsset
{
public:
	TArray<struct WieldableBookPageReference>                    Pages;                                             // 0x28(0x10)
	TArray<struct StringAssetReference>                          InitialPages;                                      // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountableType: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VomitBoutData: public DataAsset
{
public:
	float                                                        MinTimeBetweenSpews;                               // 0x28(0x4)
	float                                                        MaxTimeBetweenSpews;                               // 0x2c(0x4)
	float                                                        MinSpewDuration;                                   // 0x30(0x4)
	float                                                        MaxSpewDuration;                                   // 0x34(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SailManipulatorAudioParams: public DataAsset
{
public:
	class WwiseEvent*                                            PlaySailManipulator;                               // 0x28(0x8)
	class WwiseEvent*                                            StopSailManipulator;                               // 0x30(0x8)
	class WwiseEvent*                                            PlaySailManipulatorEndExtremity;                   // 0x38(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class DeactivateAllSpawnersVaultStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class FirstPersonAnimaticList: public DataAsset
{
public:
	TArray<struct NamedFirstPersonAnimatic>                      NamedFirstPersonAnimatics;                         // 0x28(0x10)
};


// Size 0x50 (Full Size[0xe8] - InheritedSize[0x98]
class WaitForItemDroppedOnShipStep: public TaleQuestStep
{
public:
	char                                                         pad0x50_BTYY9[0x50];                               // 0x98(0x50)
};


// Size 0x3b0 (Full Size[0x960] - InheritedSize[0x5b0]
class FishingFish: public Character
{
public:
	char                                                         pad0x38_21ZL8[0x38];                               // 0x5b0(0x38)
	class FishDataAsset*                                         FishDataAsset;                                     // 0x5e8(0x8)
	class FishingMiniGameFishDataAsset*                          FishingMiniGameFishDataAsset;                      // 0x5f0(0x8)
	float                                                        FreeRoamDistanceFromWaterSurface;                  // 0x5f8(0x4)
	char                                                         FishingFishType;                                   // 0x5fc(0x1)
	char                                                         pad0x3_HXG7B[0x3];                                 // 0x5fd(0x3)
	float                                                        FreeRoamMoveToFloatSpeed;                          // 0x600(0x4)
	char                                                         pad0x4_XNZE6[0x4];                                 // 0x604(0x4)
	class ParticleSystemComponent*                               BattlingVFX;                                       // 0x608(0x8)
	class ParticleSystemComponent*                               BeingTiredVFX;                                     // 0x610(0x8)
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x618(0x8)
	class UClass*                                                CaughtFishItemDesc;                                // 0x620(0x8)
	char                                                         pad0x298_NCP6F[0x298];                             // 0x628(0x298)
	class DitherComponent*                                       DitherComponent;                                   // 0x8c0(0x8)
	struct Vector                                                MouthAttachLocation;                               // 0x8c8(0xc)
	float                                                        AutoKillTime;                                      // 0x8d4(0x4)
	char                                                         pad0x8_6N328[0x8];                                 // 0x8d8(0x8)
	int                                                          RandomAnimationLoopVal;                            // 0x8e0(0x4)
	char                                                         pad0x1f_83FZ9[0x1f];                               // 0x8e4(0x1f)
	bool                                                         TreatAsComedyItemOnceCaught;                       // 0x903(0x1)
	char                                                         pad0x1d_TYM3A[0x1d];                               // 0x904(0x1d)
	bool                                                         FreeRoamEnabled;                                   // 0x921(0x1)
	char                                                         pad0xa_L3XDU[0xa];                                 // 0x922(0xa)
	struct Guid                                                  FreeRoamFishGuid;                                  // 0x92c(0x10)
	struct Guid                                                  OwnerFishSpawnerGuid;                              // 0x93c(0x10)
	struct Guid                                                  VoyageGuid;                                        // 0x94c(0x10)
	char                                                         pad0x4_PR3AP[0x4];                                 // 0x95c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class OneShotUsableMock: public Object
{
public:
	char                                                         pad0x10_GJYBV[0x10];                               // 0x28(0x10)
};


// Size 0x120 (Full Size[0x6e0] - InheritedSize[0x5c0]
class FlamethrowerComponent: public CapsuleComponent
{
public:
	TArray<struct Status>                                        DefaultStatusesToApplyOnOverlap;                   // 0x5c0(0x10)
	TArray<struct FlamethrowerStatusOverride>                    OverrideStatusesToApplyOnOverlap;                  // 0x5d0(0x10)
	float                                                        DamageToApplyToWieldedItemsOnOverlap;              // 0x5e0(0x4)
	char                                                         pad0x4_QPV73[0x4];                                 // 0x5e4(0x4)
	class MechanismAnimationCurve_Flamethrower*                  Animation;                                         // 0x5e8(0x8)
	class ParticleSystem*                                        ParticleSystem;                                    // 0x5f0(0x8)
	struct Rotator                                               ParticleSystemRelativeRotation;                    // 0x5f8(0xc)
	char                                                         pad0x4_FBSCO[0x4];                                 // 0x604(0x4)
	struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x608(0x60)
	class ParticleSystemComponent*                               CachedParticleSystem;                              // 0x668(0x8)
	class PrimitiveComponent*                                    SimpleCollisionShape;                              // 0x670(0x8)
	char                                                         pad0x68_WWWMW[0x68];                               // 0x678(0x68)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class WaitForMechanismActionCompletionStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	bool                                                         BlockCrewMigrationWhileWaiting;                    // 0xb0(0x1)
	char                                                         pad0x7_S43HL[0x7];                                 // 0xb1(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GetDigsiteProgressTaleStep: public TaleQuestStep
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class GuildMottoLocalisedTextDefinitionAsset: public DataAsset
{
public:
	struct FText                                                 DefaultText;                                       // 0x28(0x38)
	TArray<struct GuildMottoLocalisedTextValue>                  LocalisedTexts;                                    // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewMembershipInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x4f8] - InheritedSize[0x3a0]
class ShipAudio: public Actor
{
public:
	char                                                         pad0x18_TPOYV[0x18];                               // 0x3a0(0x18)
	class Ship*                                                  ParentShip;                                        // 0x3b8(0x8)
	char                                                         pad0x138_0YEMR[0x138];                             // 0x3c0(0x138)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelOfTheDamnedInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class MeshMemoryConstraintScoringObject: public Object
{
public:
	struct FName                                                 ScoringName;                                       // 0x28(0x8)
	float                                                        ScoringFactor;                                     // 0x30(0x4)
	char                                                         pad0x14_8C1A3[0x14];                               // 0x34(0x14)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class SoulCollectorComponent: public ActorComponent
{
public:
	class SoulCollectorConfig*                                   Config;                                            // 0xb8(0x8)
	char                                                         pad0x20_CMJXR[0x20];                               // 0xc0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerTrackerServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LPVReferenceFrameAdaptationFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x210 (Full Size[0x2c8] - InheritedSize[0xb8]
class ShipSpeedModifierComponent: public ActorComponent
{
public:
	char                                                         pad0x210_2SC0I[0x210];                             // 0xb8(0x210)
};


// Size 0x28 (Full Size[0xc0] - InheritedSize[0x98]
class TaleQuestAssignVaultStep: public TaleQuestStep
{
public:
	class TaleQuestAssignVaultStepDesc*                          StepDesc;                                          // 0x98(0x8)
	bool                                                         VaultAssigned;                                     // 0xa0(0x1)
	char                                                         pad0x1f_0BS71[0x1f];                               // 0xa1(0x1f)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveNPCOnSurfaceStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableGuid                                     NPCOnSurfaceManager;                               // 0x80(0x30)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestItemPluralisationData: public DataAsset
{
public:
	TArray<struct Text>                                          ItemNames;                                         // 0x28(0x10)
};


// Size 0x8 (Full Size[0x290] - InheritedSize[0x288]
class DisengageFromHangingInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x8_FS69G[0x8];                                 // 0x288(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PuzzleConfigurationInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RewardSettings: public Object
{
public:
	struct StringAssetReference                                  RewardDefinitionAssetListLocation;                 // 0x28(0x10)
};


// Size 0xc0 (Full Size[0x178] - InheritedSize[0xb8]
class ReapersTributeShipDespawnComponent: public ActorComponent
{
public:
	float                                                        DespawningSequenceDuration;                        // 0xb8(0x4)
	bool                                                         ApplyAlphaValueToDynamicMaterials;                 // 0xbc(0x1)
	char                                                         pad0x3_W4LEY[0x3];                                 // 0xbd(0x3)
	struct FName                                                 MaterialParamToUseForAlpha;                        // 0xc0(0x8)
	class MaterialInterface*                                     MaterialToReplaceIncompatibleMaterialsWith;        // 0xc8(0x8)
	class WwiseEvent*                                            DespawnSFX;                                        // 0xe0(0x8)
	class WwiseObjectPoolWrapper*                                PoolWrapper;                                       // 0xe8(0x8)
	char                                                         pad0x88_ZIH9M[0x88];                               // 0xf0(0x88)
};


// Size 0xb8 (Full Size[0xe0] - InheritedSize[0x28]
class CargoRunCrateCustomData: public DataAsset
{
public:
	TArray<struct Text>                                          CrateNames;                                        // 0x28(0x10)
	struct FText                                                 CareInstructions;                                  // 0x38(0x38)
	struct CargoRunReward                                        DefaultRewards;                                    // 0x70(0x20)
	TArray<struct CompanySpecificCargoRunReward>                 CompanyRewards;                                    // 0x90(0x10)
	TArray<struct Name>                                          StatsSubStrings;                                   // 0xa0(0x10)
	TArray<struct PlayerStat>                                    DefaultStatsToFireUponPerfectOnTimeHandIn;         // 0xb0(0x10)
	TArray<struct CompanySpecificCargoRunStats>                  CompanyOverrideStatsToFireUponPerfectOnTimeHandIn; // 0xc0(0x10)
	TArray<struct CompanyCargoRunHandInStats>                    CompanyHandInStats;                                // 0xd0(0x10)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class PortableHarpoonGrappleAnimationDataAsset: public DataAsset
{
public:
	char                                                         pad0x20_CBUVP[0x20];                               // 0x28(0x20)
	float                                                        FullBodyOverlayPoseBlendOutTime;                   // 0x48(0x4)
	bool                                                         DynamicAnimationLoading;                           // 0x4c(0x1)
	char                                                         pad0x3_62S0X[0x3];                                 // 0x4d(0x3)
	float                                                        TimeToResetAnimAfterFiring;                        // 0x50(0x4)
	float                                                        TimeToResetAnimAfterGrappleEnd;                    // 0x54(0x4)
	float                                                        PitchResetStartDistance;                           // 0x58(0x4)
	char                                                         pad0x4_VT8TV[0x4];                                 // 0x5c(0x4)
};


// Size 0x2a8 (Full Size[0x360] - InheritedSize[0xb8]
class LockComponent: public ActorComponent
{
public:
	char                                                         pad0x8_UFHAP[0x8];                                 // 0xb8(0x8)
	struct FName                                                 FeatureFlag;                                       // 0xc0(0x8)
	TArray<struct LockData>                                      Locks;                                             // 0xc8(0x10)
	TArray<struct VaultLock>                                     VaultLocks;                                        // 0xd8(0x10)
	class UClass*                                                KeyUsedToUnlock;                                   // 0x148(0x8)
	TArray<struct LockState>                                     LockStates;                                        // 0x150(0x10)
	bool                                                         IsLockAvailableDuringSaferSeas;                    // 0x160(0x1)
	char                                                         pad0x7_47RIB[0x7];                                 // 0x161(0x7)
	class SceneComponent*                                        LockKeyMeshAttachParent;                           // 0x168(0x8)
	TArray<class StaticMeshMemoryConstraintComponent*>           LockKeyMeshComponents;                             // 0x170(0x10)
	class UClass*                                                UnlockInputId;                                     // 0x180(0x8)
	char                                                         TooltipDisplayPriority;                            // 0x188(0x1)
	char                                                         pad0x97_G5Q9O[0x97];                               // 0x189(0x97)
	class ActionRulesComponent*                                  ActionRules;                                       // 0x220(0x8)
	TArray<class UnlockLockConditionalStatTrigger*>              ConditionalLockStats;                              // 0x228(0x10)
	struct FText                                                 UnlockText;                                        // 0x238(0x38)
	struct FText                                                 NeedKeyToUnlockText;                               // 0x270(0x38)
	struct FText                                                 VaultUnavailableUnlockText;                        // 0x2a8(0x38)
	struct FText                                                 UnavailableDuringSaferSeasText;                    // 0x2e0(0x38)
	class Actor*                                                 AssociatedOwnerObject;                             // 0x318(0x8)
	char                                                         pad0x40_QW9FC[0x40];                               // 0x320(0x40)
};


// Size 0x110 (Full Size[0x170] - InheritedSize[0x60]
class TaleQuestToolService: public TaleQuestService
{
public:
	class TaleQuestToolServiceDesc*                              ServiceDesc;                                       // 0x60(0x8)
	TArray<class ItemDesc*>                                      WieldableDescs;                                    // 0x68(0x10)
	char                                                         pad0xf8_7GTCL[0xf8];                               // 0x78(0xf8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxSelectorFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneTimestampInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableRedirectionBootyContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
	TArray<char>                                                 TargetBootyTypes;                                  // 0x30(0x10)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class MockInventoryItem: public Actor
{
public:
	class InventoryItemComponent*                                InventoryItem;                                     // 0x3a0(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAnimationEmoteGroupingAsset: public DataAsset
{
public:
	TArray<struct AthenaAnimationEmoteAnimations>                EmoteAnimationData;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ActivateAllSpawnersVaultStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CargoRunQuestRandomRequiredItemsDataAsset: public DataAsset
{
public:
	TArray<struct CargoRunQuestCategoryGroup>                    CategoryGroups;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutRepairerInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0xc8] - InheritedSize[0x88]
class BTTask_RowToTarget: public BTTask_BlackboardBase
{
public:
	char                                                         pad0x40_VDSMR[0x40];                               // 0x88(0x40)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AthenaAnimationZiplineDataAsset: public DataAsset
{
public:
	char                                                         pad0x20_QBLLB[0x20];                               // 0x28(0x20)
	class AnimSequenceBase*                                      ActionFallbackAnimation;                           // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0xd8 (Full Size[0x478] - InheritedSize[0x3a0]
class ChainLightningVisualActor: public Actor
{
public:
	struct WwiseEmitter                                          Emitter;                                           // 0x3a0(0x20)
	char                                                         pad0x8_Q5R4E[0x8];                                 // 0x3c0(0x8)
	struct ChainData                                             Data;                                              // 0x3c8(0x18)
	TArray<class MaterialInstanceDynamic*>                       CachedChainMaterials;                              // 0x3e0(0x10)
	TArray<class StaticMeshComponent*>                           CachedChainComponents;                             // 0x3f0(0x10)
	char                                                         pad0x40_RJ89U[0x40];                               // 0x400(0x40)
	class ChainLightningVisualActorSettingsAsset*                SettingsAsset;                                     // 0x440(0x8)
	class SceneComponent*                                        RootSceneComponent;                                // 0x448(0x8)
	char                                                         pad0x18_JZVZS[0x18];                               // 0x450(0x18)
	TArray<uintptr_t>                                            LightningVFXComponents;                            // 0x468(0x10)
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class SignalMechanism: public Actor
{
public:
	char                                                         pad0x8_XRKLG[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3a8(0x8)
	class ArrowComponent*                                        Arrow;                                             // 0x3b0(0x8)
	float                                                        SignalSpreadDegrees;                               // 0x3b8(0x4)
	float                                                        FocusDurationBeforeSignalling;                     // 0x3bc(0x4)
	bool                                                         RequiresOcclusionValidation;                       // 0x3c0(0x1)
	char                                                         pad0x7_ATMV5[0x7];                                 // 0x3c1(0x7)
	TArray<class Actor*>                                         Targets;                                           // 0x3c8(0x10)
	char                                                         pad0x8_1IJ6T[0x8];                                 // 0x3d8(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestSelectAISpawnerStep: public TaleQuestStep
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class FeatureToggledLevelsDataAsset: public DataAsset
{
public:
	TArray<struct FeatureToggledLevel>                           FeaturedToggledWorldLayouts;                       // 0x28(0x10)
	TArray<struct FeatureToggledLevels>                          FeatureToggledLevels;                              // 0x38(0x10)
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class HelpfulAITaleQuestFunctionLibary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0xa0 (Full Size[0x158] - InheritedSize[0xb8]
class LoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x30_TP0WH[0x30];                               // 0xb8(0x30)
	bool                                                         HaveSourcedLoadout;                                // 0xe8(0x1)
	char                                                         LoadoutPersistence;                                // 0xe9(0x1)
	char                                                         pad0x6_GU1M2[0x6];                                 // 0xea(0x6)
	struct Loadout                                               SupplementalLoadout;                               // 0xf0(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseItemActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateLegendSectionFilter: public DataAsset
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class QuestConditionalStatIdentifier: public Object
{
public:
	char                                                         pad0x10_B9SO4[0x10];                               // 0x28(0x10)
	class UClass*                                                QuestMapOverride;                                  // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RammerType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteAudioInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class FlamesOfFateLantern: public Actor
{
public:
	char                                                         FlameOfFateType;                                   // 0x3a0(0x1)
	char                                                         pad0x1f_DPKL6[0x1f];                               // 0x3a1(0x1f)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class IteratorFrame: public Object
{
public:
	char                                                         pad0x18_QMI2Q[0x18];                               // 0x28(0x18)
	class TaleQuestParallelForeachStepDesc*                      Desc;                                              // 0x40(0x8)
	class ScriptStruct*                                          StructForCollector;                                // 0x48(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class GetCurrentLocationDataStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVarLocationData                                  OutLocationData;                                   // 0x80(0x30)
};


// Size 0x220 (Full Size[0x5c0] - InheritedSize[0x3a0]
class IslandService: public Actor
{
public:
	char                                                         pad0x88_0A689[0x88];                               // 0x3a0(0x88)
	class IslandFrameworkSettings*                               IslandFrameworkSettings;                           // 0x428(0x8)
	class IslandDataAsset*                                       IslandDataAsset;                                   // 0x430(0x8)
	class SunkenIslandSettingsDataAsset*                         SunkenIslandSettingsDataAsset;                     // 0x438(0x8)
	char                                                         pad0x18_1YE8K[0x18];                               // 0x440(0x18)
	TArray<struct Island>                                        IslandArray;                                       // 0x458(0x10)
	char                                                         pad0x120_H5HPP[0x120];                             // 0x468(0x120)
	TArray<struct CannonAISpawnerZone>                           CannonAISpawnerZoneDebugArray;                     // 0x588(0x10)
	TArray<struct CannonAILocation>                              CannonAILocationDebugArray;                        // 0x598(0x10)
	TArray<class AIProximityPlayerTracker*>                      PlayerTrackers;                                    // 0x5a8(0x10)
	char                                                         pad0x8_SK0CW[0x8];                                 // 0x5b8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CombatParticipantInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex6SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class EnvQueryTest_InAIShipEncounterZone: public EnvQueryTest
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class AnimNotify_WieldedItemEvent: public AnimNotify
{
public:
	struct FName                                                 EventName;                                         // 0x38(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class EmotesRadialDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HealStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldEventZoneInterface: public Interface
{
public:
};


// Size 0xb0 (Full Size[0x220] - InheritedSize[0x170]
class EnvQueryTest_FacingAwayFromActor: public EnvQueryTest
{
public:
	class UClass*                                                CentreContext;                                     // 0x170(0x8)
	class UClass*                                                ActorContext;                                      // 0x178(0x8)
	char                                                         ConeType;                                          // 0x180(0x1)
	char                                                         pad0x7_LVRMC[0x7];                                 // 0x181(0x7)
	struct AIDataProviderFloatValue                              ConeThreshold;                                     // 0x188(0x30)
	struct AIDataProviderFloatValue                              DistanceFromQuerierToValidBandOfPoints;            // 0x1b8(0x30)
	bool                                                         UseOriginAsThreat;                                 // 0x1e8(0x1)
	char                                                         pad0x7_0NCB7[0x7];                                 // 0x1e9(0x7)
	struct AIDataProviderFloatValue                              AngleBias;                                         // 0x1f0(0x30)
};


// Size 0xa8 (Full Size[0x458] - InheritedSize[0x3b0]
class QuestTableModalInteraction: public ModalInteraction
{
public:
	char                                                         pad0xa8_NF9DS[0xa8];                               // 0x3b0(0xa8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class LoadingExperimentSettings: public DeveloperSettings
{
public:
	struct FString                                               ActiveExperiments;                                 // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailManipulatorBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkeletonFortTrackerServiceInterface: public Interface
{
public:
};


// Size 0x138 (Full Size[0x160] - InheritedSize[0x28]
class WalkableEmoteInfo: public DataAsset
{
public:
	struct WalkableEmoteData                                     WalkableEmoteData;                                 // 0x28(0x128)
	struct StringAssetReference                                  RadialIconPath;                                    // 0x150(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CompanyLevelData: public DataAsset
{
public:
	class UClass*                                                Company;                                           // 0x28(0x8)
	struct DataTableRowHandle                                    DataTable;                                         // 0x30(0x10)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class PuzzleManager: public Actor
{
public:
	TArray<class PuzzleManagerPolicy*>                           PuzzleManagerPolicies;                             // 0x3a0(0x10)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LocationMapParams: public DataAsset
{
public:
	TArray<struct LocationMapBannerParams>                       BannerParams;                                      // 0x28(0x10)
	class UClass*                                                ChestMarkId;                                       // 0x38(0x8)
	float                                                        ChestScale;                                        // 0x40(0x4)
	char                                                         pad0x4_J913B[0x4];                                 // 0x44(0x4)
	TArray<class Class*>                                         CrossTextures;                                     // 0x48(0x10)
	float                                                        CrossScale;                                        // 0x58(0x4)
	struct Vector2D                                              VaultSymbolCanvasOffset;                           // 0x5c(0x8)
	float                                                        VaultSymbolScale;                                  // 0x64(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCAnimationInstanceOverrideInterface: public Interface
{
public:
};


// Size 0x120 (Full Size[0x148] - InheritedSize[0x28]
class AthenaCharacterMovementUnderwater: public DataAsset
{
public:
	bool                                                         bSphere;                                           // 0x28(0x1)
	char                                                         pad0x3_GJ44I[0x3];                                 // 0x29(0x3)
	float                                                        Radius;                                            // 0x2c(0x4)
	float                                                        HalfHeight;                                        // 0x30(0x4)
	float                                                        PenResolveInflation;                               // 0x34(0x4)
	float                                                        PullBackDistance;                                  // 0x38(0x4)
	float                                                        FanOutAngle;                                       // 0x3c(0x4)
	float                                                        MaxFanOutScalar;                                   // 0x40(0x4)
	float                                                        IdleBobSpeed;                                      // 0x48(0x4)
	float                                                        IdleBobDuration;                                   // 0x4c(0x4)
	struct FName                                                 CollisionProfileName;                              // 0x50(0x8)
	class CurveFloat*                                            VelocityToAngle;                                   // 0x58(0x8)
	bool                                                         bDrawDebugCapsule;                                 // 0x64(0x1)
	bool                                                         bDebugOldMovement;                                 // 0x65(0x1)
	char                                                         pad0xe2_EFENA[0xe2];                               // 0x66(0xe2)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleSingleStickToCameraControlPressedInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class DeactivateSpawnerVaultStep: public TaleQuestStep
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class HarpoonLauncherItemExclusionDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         ItemTypesToExclude;                                // 0x28(0x10)
	TArray<struct StringClassReference>                          ItemsToIgnore;                                     // 0x38(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionNorthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingBuryParamsDataAsset: public DataAsset
{
public:
	TArray<struct ItemBuryingBaseOverride>                       Overrides;                                         // 0x28(0x10)
	class ItemDiggingBuryConfig*                                 Default;                                           // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterHeightInterestInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleAddStormAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
	struct QuestVariableFloat                                    Radius;                                            // 0xb0(0x30)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class SeaFortAddOnAISpawnDataAsset: public DataAsset
{
public:
	struct FText                                                 SpawnedAITargetName;                               // 0x28(0x38)
	class AIBountySpawner*                                       AIBountySpawner;                                   // 0x60(0x8)
	TArray<struct AIBountySpawnerWaveLocation>                   AIBountySpawnerLocations;                          // 0x68(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandVisitorCallbackInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ReceiverPuzzleStatueAudioParamsDataAsset: public DataAsset
{
public:
	class WwiseEvent*                                            ReceiverChangingPosition;                          // 0x28(0x8)
	class WwiseEvent*                                            GrindingStart;                                     // 0x30(0x8)
	class WwiseEvent*                                            GrindingStop;                                      // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaHUDInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggressiveGhostShipsEncounterServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandmarkRegistryInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x310] - InheritedSize[0x2d0]
class HangerComponent: public SceneComponent
{
public:
	float                                                        Mass;                                              // 0x2d0(0x4)
	float                                                        LimitConeAngle;                                    // 0x2d4(0x4)
	float                                                        XAxisMotionScale;                                  // 0x2d8(0x4)
	float                                                        YAxisMotionScale;                                  // 0x2dc(0x4)
	char                                                         pad0x30_RQCO0[0x30];                               // 0x2e0(0x30)
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class TaleQuestStopAISpawningStepDesc: public TaleQuestStepDesc
{
public:
	int                                                          SpawnerIndex;                                      // 0x80(0x4)
	bool                                                         StopAllActiveSpawners;                             // 0x84(0x1)
	char                                                         pad0x3_04ZDI[0x3];                                 // 0x85(0x3)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TelemetryTaskStep: public TaleQuestStep
{
public:
	char                                                         pad0x20_FDRA9[0x20];                               // 0x98(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllerInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RevealRequirement: public Object
{
public:
	TArray<class RevealRequirement*>                             OR_Requirements;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IdentifiedAsShipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SleepingActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaStreamedLevelServiceInterface: public Interface
{
public:
};


// Size 0x180 (Full Size[0x520] - InheritedSize[0x3a0]
class NPCOnSurface: public Actor
{
public:
	char                                                         pad0x10_KFJO4[0x10];                               // 0x3a0(0x10)
	bool                                                         CanDamagePlayers;                                  // 0x3b0(0x1)
	char                                                         pad0x7_JPDMH[0x7];                                 // 0x3b1(0x7)
	class NPCOnSurfaceVODataAsset*                               VODataAsset;                                       // 0x3b8(0x8)
	struct FText                                                 NPCName;                                           // 0x3c0(0x38)
	class WwiseObjectPoolWrapper*                                Pool;                                              // 0x3f8(0x8)
	class SkeletalMeshComponent*                                 Mesh;                                              // 0x400(0x8)
	class WwiseEmitterComponent*                                 Emitter;                                           // 0x408(0x8)
	class CutSceneSubtitlesComponent*                            CutSceneSubtitlesComponent;                        // 0x410(0x8)
	class CustomAnimationMontageComponent*                       CustomAnimationMontageComponent;                   // 0x418(0x8)
	struct StringAssetReference                                  CurrentAnimInstance;                               // 0x420(0x10)
	bool                                                         IsPlayerCurrentlyNearNPC;                          // 0x430(0x1)
	char                                                         pad0xa7_ZVNHT[0xa7];                               // 0x431(0xa7)
	char                                                         pad0x48_108R9[0x48];                               // 0x4d8(0x48)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerControlledWaterFillRateParamsDataAsset: public DataAsset
{
public:
	int                                                          MaxCrewSize;                                       // 0x28(0x4)
	float                                                        LeakAmountMultiplier;                              // 0x2c(0x4)
	float                                                        RepairTimeMultiplier;                              // 0x30(0x4)
	char                                                         pad0x4_R38NW[0x4];                                 // 0x34(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimSensitivityInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class RegisterTransientActorStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Actor;                                             // 0x80(0x30)
	float                                                        DestructionRadius;                                 // 0xb0(0x4)
	bool                                                         IsPendingDestruction;                              // 0xb4(0x1)
	char                                                         pad0x3_GZ1OY[0x3];                                 // 0xb5(0x3)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class BuoyantObjectSpawnParamsDataAsset: public DataAsset
{
public:
	struct BuoyantObjectSpawnParams                              Params;                                            // 0x28(0x48)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class DebugTeleportCrewStep: public TaleQuestStep
{
public:
	class DebugTeleportCrewStepDesc*                             Desc;                                              // 0x98(0x8)
};


// Size 0x218 (Full Size[0x2d0] - InheritedSize[0xb8]
class ItemActionComponent: public ActorComponent
{
public:
	char                                                         ActionType;                                        // 0xb8(0x1)
	bool                                                         ShouldFireEventOnActionStart;                      // 0xb9(0x1)
	bool                                                         ShouldFireEventOnActionStop;                       // 0xba(0x1)
	bool                                                         ShouldApplyAimAndMovementSlowdown;                 // 0xbb(0x1)
	float                                                        ActionCooldown;                                    // 0xbc(0x4)
	char                                                         pad0x58_T7YX1[0x58];                               // 0xc0(0x58)
	struct WwiseEmitterCreationParams                            ActionStartSfxParams;                              // 0x118(0x28)
	struct WwiseEmitterCreationParams                            ActionStopSfxParams;                               // 0x140(0x28)
	char                                                         pad0x88_IDKVQ[0x88];                               // 0x168(0x88)
	class UClass*                                                StartInputId;                                      // 0x1f0(0x8)
	class UClass*                                                StopInputId;                                       // 0x1f8(0x8)
	char                                                         pad0x18_K1S6B[0x18];                               // 0x200(0x18)
	TArray<class ItemActionEffect*>                              ActionEffects;                                     // 0x218(0x10)
	char                                                         pad0x50_VXODD[0x50];                               // 0x228(0x50)
	class ItemActionComponentAudioParams*                        ItemActionAudio;                                   // 0x278(0x8)
	class ForceFeedbackEffect*                                   ActionForceFeedback;                               // 0x280(0x8)
	struct FName                                                 ActionForceFeedbackTag;                            // 0x288(0x8)
	char                                                         pad0x28_XM5RF[0x28];                               // 0x290(0x28)
	class Pawn*                                                  Wielder;                                           // 0x2b8(0x8)
	class WieldableItem*                                         ItemOwner;                                         // 0x2c0(0x8)
	char                                                         ActionState;                                       // 0x2c8(0x1)
	char                                                         pad0x7_H5I7E[0x7];                                 // 0x2c9(0x7)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AIControlledShipParamsDataAsset: public DataAsset
{
public:
	class AIShipEncounterParamsDataAsset*                        AIShipEncounterParams;                             // 0x28(0x8)
	class ShortRangeMarkerDataAsset*                             RewardMarkerParams;                                // 0x30(0x8)
	TArray<struct Name>                                          TributeIslands;                                    // 0x38(0x10)
	class ShipSinkingHandler*                                    ShipSinkingHandler;                                // 0x48(0x8)
	class AIControlledWaterFillRateParamsDataAsset*              WaterFillRateParams;                               // 0x50(0x8)
	class StatusRecipientResponseList*                           ShipStatusResponseList;                            // 0x58(0x8)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class WorldMarkerRoutingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_R5GJZ[0x8];                                 // 0xb8(0x8)
	class UClass*                                                DefaultListenerType;                               // 0xc0(0x8)
	char                                                         pad0x10_D3SIZ[0x10];                               // 0xc8(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ShipCreatureManagerCreatureInstanceMotionModifierDataAsset: public DataAsset
{
public:
	TArray<class CurveFloat*>                                    SpeedModifierCurves;                               // 0x28(0x10)
	TArray<class CurveFloat*>                                    RollCurves;                                        // 0x38(0x10)
	TArray<class CurveVector*>                                   OffsetCurves;                                      // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConcealableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCharacterFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_Brig: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class DeliverableRedirectionBootyContext: public DeliverableRedirectionContextBase
{
public:
	char                                                         BootyType;                                         // 0x28(0x1)
	char                                                         pad0x7_OT5NV[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TriggerCrewEnteredPortalTaleStep: public TaleQuestStep
{
public:
};


// Size 0x2a8 (Full Size[0x360] - InheritedSize[0xb8]
class InventoryManipulatorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_U2BMG[0x8];                                 // 0xb8(0x8)
	float                                                        StashItemTimeout;                                  // 0xc0(0x4)
	float                                                        SlowStashItemTimeout;                              // 0xc4(0x4)
	float                                                        WieldItemTimeout;                                  // 0xc8(0x4)
	char                                                         pad0x4_46DO7[0x4];                                 // 0xcc(0x4)
	class WwiseEvent*                                            PickupSFX;                                         // 0xd0(0x8)
	TArray<struct InventoryManipulatorAutoEquipPolicyEntry>      AutoEquipPolicies;                                 // 0xd8(0x10)
	class DataTable*                                             ItemWieldingParamsLookup;                          // 0xe8(0x8)
	struct InventoryMemory                                       InventoryMemory;                                   // 0xf0(0x50)
	class WieldingParamsAsset*                                   CachedWieldParamsAsset;                            // 0x340(0x8)
	char                                                         pad0x18_4251G[0x18];                               // 0x348(0x18)
};


// Size 0x60 (Full Size[0xc0] - InheritedSize[0x60]
class EventTaleQuestService: public TaleQuestService
{
public:
	char                                                         pad0x60_ZW0EH[0x60];                               // 0x60(0x60)
};


// Size 0x100 (Full Size[0x1b8] - InheritedSize[0xb8]
class InGameScrambledNamesComponent: public ActorComponent
{
public:
	char                                                         pad0xe8_E3J5Q[0xe8];                               // 0xb8(0xe8)
	class ScrambledNamesDataAsset*                               ScrambledPlayerNamesDataAsset;                     // 0x1a0(0x8)
	class ScrambledNamesDataAsset*                               ScrambledShipNamesDataAsset;                       // 0x1a8(0x8)
	class ScrambledNamesDataAsset*                               ScrambledGuildNamesDataAsset;                      // 0x1b0(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class AddNPCOnShipStep: public TaleQuestStep
{
public:
};


// Size 0x60 (Full Size[0x1c90] - InheritedSize[0x1c30]
class AthenaPlayerCameraManager: public PlayerCameraManager
{
public:
	char                                                         pad0x60_RH1CD[0x60];                               // 0x1c30(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategory: public Object
{
public:
};


// Size 0x198 (Full Size[0x250] - InheritedSize[0xb8]
class HealthComponent: public ActorComponent
{
public:
	char                                                         pad0x10_PXQWB[0x10];                               // 0xb8(0x10)
	float                                                        MinTimeSinceLastPredictedHealthChangeToFireChangedEventAgain; // 0xc8(0x4)
	bool                                                         PreventDamageFromAllSourcesExceptWhitelistedSources; // 0xcc(0x1)
	bool                                                         ShowKillNotifications;                             // 0xcd(0x1)
	char                                                         pad0x2_6FOZO[0x2];                                 // 0xce(0x2)
	float                                                        MaxHealth;                                         // 0xd0(0x4)
	struct CurrentHealthInfo                                     CurrentHealthInfo;                                 // 0xd4(0x18)
	char                                                         pad0x4_NN427[0x4];                                 // 0xec(0x4)
	TArray<struct ContinuousHealthChange>                        ContinuousHealthChangeSources;                     // 0xf0(0x10)
	bool                                                         IsHealthAdjustLocked;                              // 0x100(0x1)
	char                                                         pad0x14f_V40FB[0x14f];                             // 0x101(0x14f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindableLaunchableProjectileInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandFaunaSpawnComponentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LimpStatus: public StatusBase
{
public:
};


// Size 0x70 (Full Size[0xd0] - InheritedSize[0x60]
class TaleQuestShipwreckService: public TaleQuestService
{
public:
	class CustomShipwreck*                                       ActiveWreck;                                       // 0x60(0x8)
	class TaleQuestShipwreckServiceDesc*                         Desc;                                              // 0x68(0x8)
	char                                                         pad0x60_80XNJ[0x60];                               // 0x70(0x60)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EventsSchedulerSwitchesDataAsset: public DataAsset
{
public:
	TArray<struct EventsSchedulerSwitch>                         EventsSchedulerSwitches;                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetDormancyHelpers: public BlueprintFunctionLibrary
{
public:
};


// Size 0x250 (Full Size[0x308] - InheritedSize[0xb8]
class LightningComponent: public ActorComponent
{
public:
	class LightningDataAsset*                                    LightningDataAsset;                                // 0xb8(0x8)
	class ExplosionComponent*                                    CachedExplosionComponent;                          // 0xc0(0x8)
	class StaticMeshComponent*                                   BaseCloudMeshComponent;                            // 0xc8(0x8)
	struct ActiveLightning                                       ActiveLightning;                                   // 0xd0(0xc8)
	char                                                         pad0xc8_9TI9Y[0xc8];                               // 0x198(0xc8)
	TArray<class StaticMeshComponent*>                           LightningMeshComponents;                           // 0x260(0x10)
	char                                                         pad0x98_C7PNN[0x98];                               // 0x270(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RemoteConfigurationProviderRetrievalInterface: public Interface
{
public:
};


// Size 0x110 (Full Size[0x4b0] - InheritedSize[0x3a0]
class InterpolatingItem: public Actor
{
public:
	class StaticMeshMemoryConstraintComponent*                   FirstPersonMesh;                                   // 0x3a0(0x8)
	class StaticMeshMemoryConstraintComponent*                   ThirdPersonMesh;                                   // 0x3a8(0x8)
	class SceneComponent*                                        FromParent1P;                                      // 0x3b0(0x8)
	char                                                         pad0x8_S95O9[0x8];                                 // 0x3b8(0x8)
	class SceneComponent*                                        FromParent3P;                                      // 0x3c0(0x8)
	char                                                         pad0x68_ZEKMU[0x68];                               // 0x3c8(0x68)
	class SceneComponent*                                        ToParent;                                          // 0x430(0x8)
	char                                                         pad0x78_C4SZI[0x78];                               // 0x438(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class AwaitCrewShipToSailAwayFromCurrentLocationStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        MinShipDistanceToTravel;                           // 0x80(0x4)
	bool                                                         CompleteStepIfShipIsDestroyed;                     // 0x84(0x1)
	char                                                         pad0x3_TWNRL[0x3];                                 // 0x85(0x3)
};


// Size 0x118 (Full Size[0x188] - InheritedSize[0x70]
class BTService_ObserveTargetMeleeAttacks: public BTService
{
public:
	struct BlackboardKeySelector                                 TargetActorKey;                                    // 0x70(0x28)
	struct BlackboardKeySelector                                 IsTargetAttackingResultKey;                        // 0x98(0x28)
	char                                                         pad0xc8_UE7E6[0xc8];                               // 0xc0(0xc8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CompanyVoyageCategoryId: public Object
{
public:
	bool                                                         UseFixedCategoryName;                              // 0x28(0x1)
	char                                                         pad0x7_8J1H7[0x7];                                 // 0x29(0x7)
	struct FString                                               FixedCategoryName;                                 // 0x30(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class WieldingParamsAsset: public DataAsset
{
public:
	float                                                        WieldDuration;                                     // 0x28(0x4)
	char                                                         pad0x4_XIT4F[0x4];                                 // 0x2c(0x4)
	TArray<class Class*>                                         InvalidMidWieldInputs;                             // 0x30(0x10)
};


// Size 0x10 (Full Size[0x310] - InheritedSize[0x300]
class ShipwreckAudioEmitterComponent: public WwiseEmitterComponent
{
public:
	class WwiseEvent*                                            WwiseEvent;                                        // 0x300(0x8)
	char                                                         pad0x8_A8UD0[0x8];                                 // 0x308(0x8)
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class CampaignComponent: public ActorComponent
{
public:
	char                                                         pad0xa8_2WVOQ[0xa8];                               // 0xb8(0xa8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionWestNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x68 (Full Size[0x100] - InheritedSize[0x98]
class PlayNpcAnimationStep: public TaleQuestStep
{
public:
	class BasePlayNpcAnimationStepDesc*                          StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x10_SR150[0x10];                               // 0xa0(0x10)
	class NPCDialogComponent*                                    NPCDialogComponent;                                // 0xb0(0x8)
	class CutSceneActor*                                         CutSceneActor;                                     // 0xb8(0x8)
	char                                                         pad0x40_YM95I[0x40];                               // 0xc0(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StarvingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShipEventServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class TeleportLungeAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class LightningDataAsset: public DataAsset
{
public:
	float                                                        StrikeHitTime;                                     // 0x28(0x4)
	float                                                        StrikeCompleteTime;                                // 0x2c(0x4)
	float                                                        StormHeight;                                       // 0x30(0x4)
	float                                                        StandardLightningBaseDamage;                       // 0x34(0x4)
	float                                                        HighPriorityLightningBaseDamage;                   // 0x38(0x4)
	char                                                         pad0x4_BXXE6[0x4];                                 // 0x3c(0x4)
	class WwiseEvent*                                            LightningStrikeEvent;                              // 0x40(0x8)
	class WwiseObjectPoolWrapper*                                LightningStrikePool;                               // 0x48(0x8)
	class Material*                                              LightningMaterial;                                 // 0x50(0x8)
	struct FName                                                 LightningTimingParam;                              // 0x58(0x8)
	struct FName                                                 LightningSourcePosParam;                           // 0x60(0x8)
	struct FName                                                 LightningTag;                                      // 0x68(0x8)
	char                                                         CollisionChannel;                                  // 0x70(0x1)
	char                                                         pad0x7_53LXZ[0x7];                                 // 0x71(0x7)
	class Object*                                                StrikeWaterParticleSystem;                         // 0x78(0x8)
	class WwiseEvent*                                            StrikeWaterEvent;                                  // 0x80(0x8)
	class WwiseObjectPoolWrapper*                                StrikeWaterPool;                                   // 0x88(0x8)
	bool                                                         DisableStrikeGroundDecal;                          // 0x90(0x1)
	bool                                                         DisableStrikeGroundSFX;                            // 0x91(0x1)
	char                                                         pad0x6_3AYNB[0x6];                                 // 0x92(0x6)
	class WwiseEvent*                                            OverrideStrikeGroundEvent;                         // 0x98(0x8)
	class WwiseObjectPoolWrapper*                                OverrideStrikeGroundPool;                          // 0xa0(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ImpactListDataAsset: public DataAsset
{
public:
	int                                                          MaxAudioEventsPerDischarge;                        // 0x28(0x4)
	char                                                         pad0x4_7I3YC[0x4];                                 // 0x2c(0x4)
	TArray<struct ImpactProjectileData>                          ProjectileList;                                    // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunCrateInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemUserInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleQuestReleaseVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableTaleResourceHandle                       VaultHandleVar;                                    // 0x80(0x30)
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class PortalLocatorActor: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	class SphereComponent*                                       PortalBounds;                                      // 0x3a8(0x8)
	class ContendedResourceComponent*                            ContendedResourceComponent;                        // 0x3b0(0x8)
	class UClass*                                                ActivePortalClass;                                 // 0x3b8(0x8)
	TArray<class TunnelOfTheDamnedPortalShipSpawnLocation*>      AssociatedSpawnLocations;                          // 0x3c0(0x10)
	char                                                         pad0x10_GVA7N[0x10];                               // 0x3d0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChainLightningSourceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class SpawnRewardStep: public TaleQuestStep
{
public:
	char                                                         pad0x18_ZLPIQ[0x18];                               // 0x98(0x18)
};


// Size 0x190 (Full Size[0x1b8] - InheritedSize[0x28]
class MeshMemoryConstraintServiceBudgetData: public Object
{
public:
	char                                                         pad0x8_CK8OD[0x8];                                 // 0x28(0x8)
	class MeshMemoryConstraintService*                           MMCService;                                        // 0x30(0x8)
	TArray<struct MeshScoring>                                   MeshesScoringInfo;                                 // 0x88(0x10)
	char                                                         pad0x78_0DMTR[0x78];                               // 0x98(0x78)
	class MeshMemoryConstraintFallbackDataAsset*                 MeshMemoryConstraintFallbackAsset;                 // 0x110(0x8)
	class World*                                                 World;                                             // 0x118(0x8)
	TArray<struct IndividualMeshScoringToAdd>                    ConsumersToAddToScoring;                           // 0x120(0x10)
	char                                                         pad0x88_2O8UN[0x88];                               // 0x130(0x88)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  ConditionalStatsServiceSettingsLocation;           // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProgressLocationId: public Object
{
public:
};


// Size 0x0 (Full Size[0x5b0] - InheritedSize[0x5b0]
class MechanismVFXEmitterComponent: public ArrowComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CircleMapCollectionInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingBaseParamsDataAsset: public DataAsset
{
public:
	TArray<struct ItemDiggingBaseOverride>                       BaseOverrides;                                     // 0x28(0x10)
	class ItemDiggingBaseConfig*                                 Default;                                           // 0x38(0x8)
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class ReplacePagesStepDesc: public TaleQuestStepDesc
{
public:
	TArray<struct StringAssetReference>                          Pages;                                             // 0x80(0x10)
	TArray<struct StringAssetReference>                          PagesToReplace;                                    // 0x90(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DiggableParentInterface: public Interface
{
public:
};


// Size 0xc0 (Full Size[0x460] - InheritedSize[0x3a0]
class PosablePirate: public Actor
{
public:
	class SkeletalMeshComponent*                                 PirateMeshComponent;                               // 0x3a0(0x8)
	char                                                         Gender;                                            // 0x3a8(0x1)
	bool                                                         UseIPG;                                            // 0x3a9(0x1)
	char                                                         pad0x6_JCJDZ[0x6];                                 // 0x3aa(0x6)
	class PirateGeneratorService*                                GeneratorServiceActor;                             // 0x3b0(0x8)
	char                                                         pad0x88_4S6HX[0x88];                               // 0x3b8(0x88)
	TArray<class Class*>                                         Outfit;                                            // 0x440(0x10)
	TArray<class ParticleSystemComponent*>                       ParticleComponents;                                // 0x450(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WheelInterface: public Interface
{
public:
};


// Size 0x230 (Full Size[0x500] - InheritedSize[0x2d0]
class PlayerOceanAudioComponent: public SceneComponent
{
public:
	class WwiseEvent*                                            WaterAudioEvent;                                   // 0x2d0(0x8)
	class WwiseEvent*                                            WaterAudioStopEvent;                               // 0x2d8(0x8)
	class WwiseEvent*                                            WaterEmergeAudioEvent;                             // 0x2e0(0x8)
	class WwiseEvent*                                            WaterSubmergeAudioEvent;                           // 0x2e8(0x8)
	struct DeepSeaRegionAmbienceAudio                            DeepSeaRegionAmbienceAudio;                        // 0x2f0(0x18)
	struct FName                                                 ShorelineRtpc;                                     // 0x308(0x8)
	struct FName                                                 StateUnderwater;                                   // 0x310(0x8)
	struct FName                                                 ChoppinessRtpc;                                    // 0x318(0x8)
	struct FName                                                 CoastlineStormynessRtpc;                           // 0x320(0x8)
	float                                                        MaxValidDistanceBetweenCoastAndInnerSpline;        // 0x328(0x4)
	float                                                        MaxCoastAttenuation;                               // 0x32c(0x4)
	float                                                        MaxDistanceForAccurateSplineCheck;                 // 0x330(0x4)
	struct FName                                                 SuperheatedWaterStateGroup;                        // 0x334(0x8)
	struct FName                                                 SwitchSuperheatedWaterOff;                         // 0x33c(0x8)
	struct FName                                                 SwitchSuperheatedWaterOn;                          // 0x344(0x8)
	float                                                        MinStormDistCms;                                   // 0x34c(0x4)
	float                                                        MaxStormDistCms;                                   // 0x350(0x4)
	char                                                         pad0x24_4H6R8[0x24];                               // 0x354(0x24)
	class AthenaPlayerCharacter*                                 PlayerCharacter;                                   // 0x378(0x8)
	char                                                         pad0x180_K7E76[0x180];                             // 0x380(0x180)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class MeleeChargeAfterEndStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCharacterTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetworkedEventsWhitelistDefinition: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RiddleTextPhrasebookDataAsset: public DataAsset
{
public:
	TArray<struct RiddleTextPhrasebookEntry>                     Phrases;                                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialoguePoint: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SceneDialogueContext: public Object
{
public:
	char                                                         pad0x10_9BWPU[0x10];                               // 0x28(0x10)
	class SceneDialogueSection*                                  Section;                                           // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class WaterStatus: public StatusBase
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class AmmoStoreComponent: public ActorComponent
{
public:
	char                                                         pad0x8_P173W[0x8];                                 // 0xb8(0x8)
	int                                                          MaxAmmo;                                           // 0xc0(0x4)
	char                                                         pad0x4_4853P[0x4];                                 // 0xc4(0x4)
	class WwiseEvent*                                            ReloadSFX;                                         // 0xc8(0x8)
	class WwiseEvent*                                            RestockSFX;                                        // 0xd0(0x8)
	int                                                          CurrentAmmo;                                       // 0xd8(0x4)
	char                                                         pad0x14_NPUDB[0x14];                               // 0xdc(0x14)
};


// Size 0x138 (Full Size[0x1f0] - InheritedSize[0xb8]
class IslandAnnouncementComponent: public ActorComponent
{
public:
	bool                                                         AnnouncesOnUI;                                     // 0xb8(0x1)
	char                                                         pad0x7_96TZV[0x7];                                 // 0xb9(0x7)
	TArray<class Controller*>                                    MutedPlayers;                                      // 0xc0(0x10)
	char                                                         pad0x120_5PD55[0x120];                             // 0xd0(0x120)
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class UITelemetryComponent: public ActorComponent
{
public:
	char                                                         pad0x50_BWXRQ[0x50];                               // 0xb8(0x50)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class FillCollectorsChestWithItemsDataAsset: public DataAsset
{
public:
	struct WeightedProbabilityRange                              NumberOfItemsToSpawn;                              // 0x28(0x20)
	struct WeightedItemDescSpawnDataAssetsWithWeights            ItemsToSpawnInsideCollectorsChest;                 // 0x48(0x10)
	class WeightedGoldRewardsDataAsset*                          GoldToSpawnInsideCollectorsChest;                  // 0x58(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CaptainsLogbookActivityIconsAsset: public DataAsset
{
public:
	class Texture*                                               DefaultImage;                                      // 0x28(0x8)
	TArray<struct CaptainsLogbookIconKeyValue>                   Icons;                                             // 0x30(0x10)
};


// Size 0x68 (Full Size[0x100] - InheritedSize[0x98]
class WaitForArrivalTunnelOfTheDamnedCompletionTaleStep: public TaleQuestStep
{
public:
	char                                                         pad0x68_3LVOG[0x68];                               // 0x98(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameAudioInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x140] - InheritedSize[0xb8]
class CollectorsChestPickUpFromSlotRewardComponent: public ActorComponent
{
public:
	class UClass*                                                Company;                                           // 0xb8(0x8)
	char                                                         pad0x80_8A238[0x80];                               // 0xc0(0x80)
};


// Size 0xa70 (Full Size[0xe10] - InheritedSize[0x3a0]
class LightingController: public ThreadedActor
{
public:
	char                                                         pad0x8_RMRDY[0x8];                                 // 0x3a0(0x8)
	struct LightingControllerPostProcessParams                   PostProcessParams;                                 // 0x3a8(0x1a0)
	struct LightingControllerRainParams                          RainParams;                                        // 0x548(0x18)
	struct LightingControllerLightningParams                     LightningParams;                                   // 0x560(0x40)
	struct LightingControllerLightingParams                      LightingParams;                                    // 0x5a0(0x44)
	char                                                         pad0x4_WBVVL[0x4];                                 // 0x5e4(0x4)
	struct LightingControllerMoonParams                          MoonParams;                                        // 0x5e8(0x38)
	struct LightingControllerTransformParams                     TransformParams;                                   // 0x620(0x90)
	struct LightingControllerTimeParams                          TimeParams;                                        // 0x6b0(0x20)
	struct LightingControllerIslandDangerParams                  DangerLevelParams;                                 // 0x6d0(0x8)
	TArray<class LightingControllerSettings*>                    LightingSettings;                                  // 0x6d8(0x10)
	class StaticMeshActor*                                       OverworldFarQuad;                                  // 0x6e8(0x8)
	class StaticMeshActor*                                       UnderworldFarQuad;                                 // 0x6f0(0x8)
	float                                                        FixedTimeOfDay;                                    // 0x6f8(0x4)
	int                                                          FixedDay;                                          // 0x6fc(0x4)
	bool                                                         IsFixedTimeOfDay;                                  // 0x700(0x1)
	char                                                         pad0x7_VBT87[0x7];                                 // 0x701(0x7)
	class SceneComponent*                                        RootSceneComponent;                                // 0x708(0x8)
	struct LightingControllerAssetParams                         AssetParams;                                       // 0x710(0x50)
	class DirectionalLightComponent*                             DirectionalLight;                                  // 0x760(0x8)
	class StaticMeshComponent*                                   SkyDome;                                           // 0x768(0x8)
	class StaticMeshComponent*                                   NorthStar;                                         // 0x770(0x8)
	class ExponentialHeightFogComponent*                         Fog;                                               // 0x778(0x8)
	class ExponentialHeightFogComponent*                         UnderwaterFog;                                     // 0x780(0x8)
	class PostProcessComponent*                                  GlobalPostProcess;                                 // 0x788(0x8)
	class DirectionalLightComponent*                             RainLight;                                         // 0x790(0x8)
	class StaticMeshComponent*                                   Moon;                                              // 0x798(0x8)
	class SkyLightComponent*                                     SkyLight;                                          // 0x7a0(0x8)
	float                                                        DebugTimeOfDay;                                    // 0x7a8(0x4)
	float                                                        DebugRain;                                         // 0x7ac(0x4)
	float                                                        DebugMurk;                                         // 0x7b0(0x4)
	int                                                          DebugDay;                                          // 0x7b4(0x4)
	bool                                                         IsDebugFixedTimeOfDay;                             // 0x7b8(0x1)
	bool                                                         ShowDebugSunHeightInfo;                            // 0x7b8(0x1)
	bool                                                         ShowDebugLightingZoneInfo;                         // 0x7b8(0x1)
	bool                                                         ShowDebugUnderwater;                               // 0x7b8(0x1)
	char                                                         pad0x7_3M3CO[0x7];                                 // 0x7b9(0x7)
	struct LightingControllerLightingVars                        LightingVars;                                      // 0x7c0(0x460)
	struct LightingControllerMaterialInstances                   MaterialInstances;                                 // 0xc20(0x20)
	TArray<class Actor*>                                         ReflectionProbes;                                  // 0xc40(0x10)
	char                                                         pad0x20_Q1BVR[0x20];                               // 0xc50(0x20)
	TArray<struct WaterModifierZoneParametersAndLocation>        MurkZones;                                         // 0xc70(0x10)
	char                                                         pad0x98_QENHJ[0x98];                               // 0xc80(0x98)
	class CurveFloat*                                            EndOfWorldLightingZoneWeightCurve;                 // 0xd18(0x8)
	char                                                         pad0xf0_8N6DX[0xf0];                               // 0xd20(0xf0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamethrowerChargeVisualsProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkeletonCampReplicatedDataInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class CharacterVfxComponent: public ActorComponent
{
public:
	class ParticleSystemComponent*                               WindVFX;                                           // 0xb8(0x8)
	class AthenaPlayerCharacter*                                 OwnerCharacter;                                    // 0xc0(0x8)
	char                                                         pad0x8_ZN3V5[0x8];                                 // 0xc8(0x8)
};


// Size 0x98 (Full Size[0x130] - InheritedSize[0x98]
class TaleQuestAddZoomMapQuestbookPageStep: public TaleQuestStep
{
public:
	class TaleQuestAddZoomMapQuestbookPageStepDesc*              Desc;                                              // 0x98(0x8)
	struct FName                                                 IslandName;                                        // 0xa0(0x8)
	class BookTaleQuestService*                                  BookService;                                       // 0xa8(0x8)
	struct Vector                                                ZoomCenterPoint;                                   // 0xb0(0xc)
	struct Vector                                                DigSpot;                                           // 0xbc(0xc)
	struct Vector                                                CanvasDimensions;                                  // 0xc8(0xc)
	char                                                         pad0x4_EYZNP[0x4];                                 // 0xd4(0x4)
	class ZoomMapParamsDataAsset*                                Params;                                            // 0xd8(0x8)
	class Texture*                                               IslandMapTexture;                                  // 0xe0(0x8)
	char                                                         pad0x48_VPNU4[0x48];                               // 0xe8(0x48)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class BlueprintMechanismResetComponent: public ActorComponent
{
public:
	char                                                         pad0x28_KM6IA[0x28];                               // 0xb8(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeckonNPCGroupID: public Object
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class ShipAnnouncementService: public Object
{
public:
	char                                                         pad0x8_7ZHN1[0x8];                                 // 0x28(0x8)
	float                                                        ShipAnnouncementServiceTickRate;                   // 0x30(0x4)
	float                                                        ShipAnnouncementOwnShipDistThreshold;              // 0x34(0x4)
	class World*                                                 WorldPtr;                                          // 0x38(0x8)
	struct ShipAnnouncementCache                                 ShipAnnouncementCache;                             // 0x40(0x20)
	TArray<struct Guid>                                          PreviouslySpottedShips;                            // 0x60(0x10)
	char                                                         pad0x60_8KZFG[0x60];                               // 0x70(0x60)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleQuestGetCrewShipManifestStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableGuid                                     CrewId;                                            // 0x80(0x30)
	struct QuestVariableCrewShipManifest                         CrewShipManifest;                                  // 0xb0(0x30)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class NPCHideComponent: public ActorComponent
{
public:
	char                                                         pad0x8_UGDBB[0x8];                                 // 0xb8(0x8)
	bool                                                         bHideActive;                                       // 0xc0(0x1)
	char                                                         pad0x7_23IMT[0x7];                                 // 0xc1(0x7)
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class ImpactProxySpawnerComponent: public ActorComponent
{
public:
	char                                                         pad0x4_PJBVQ[0x4];                                 // 0xb8(0x4)
	struct FeatureFlag                                           FeatureToggle;                                     // 0xbc(0xc)
	class UClass*                                                ItemToSpawn;                                       // 0xc8(0x8)
	class ItemInfo*                                              SpawnedItemInfo;                                   // 0xd0(0x8)
	struct Vector                                                HeightAdjustment;                                  // 0xd8(0xc)
	char                                                         pad0xc_D33RB[0xc];                                 // 0xe4(0xc)
	bool                                                         RestrictWaterDepth;                                // 0xf0(0x1)
	char                                                         pad0x3_ST4Z0[0x3];                                 // 0xf1(0x3)
	float                                                        AllowedWaterDepth;                                 // 0xf4(0x4)
	float                                                        ImpactOffsetScale;                                 // 0xf8(0x4)
	float                                                        ImpactWallOffsetScale;                             // 0xfc(0x4)
	float                                                        ImpactWallOffsetAngle;                             // 0x100(0x4)
	float                                                        ImpactCeilingOffset;                               // 0x104(0x4)
	float                                                        RandomAngleRange;                                  // 0x108(0x4)
	bool                                                         OverrideInstigator;                                // 0x10c(0x1)
	char                                                         pad0x13_L53XK[0x13];                               // 0x10d(0x13)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PuzzleManagerPolicyInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x78] - InheritedSize[0x60]
class FogBankTaleService: public TaleQuestService
{
public:
	class FogBankTaleServiceDesc*                                Desc;                                              // 0x60(0x8)
	TArray<struct FogBankManagerFogAvoidanceArea>                FogBankAvoidanceAreas;                             // 0x68(0x10)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class DelayStep: public TaleQuestStep
{
public:
	class DelayStepDesc*                                         Desc;                                              // 0x98(0x8)
	char                                                         pad0x10_3DC0V[0x10];                               // 0xa0(0x10)
};


// Size 0xb0 (Full Size[0x450] - InheritedSize[0x3a0]
class ReapersTributeShipTeleportLocationContainer: public Actor
{
public:
	char                                                         pad0x8_221FT[0x8];                                 // 0x3a0(0x8)
	class TeleportLocationRetrievalComponent*                    TeleportLocationRetrievalComponent;                // 0x3a8(0x8)
	char                                                         pad0xa0_FGVXI[0xa0];                               // 0x3b0(0xa0)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CutsceneService: public Object
{
public:
	char                                                         pad0x8_IDQJ7[0x8];                                 // 0x28(0x8)
	TArray<class Actor*>                                         RegisteredCutsceneActors;                          // 0x30(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class NPCOnSurfaceStatesDataAsset: public DataAsset
{
public:
	struct FName                                                 StartState;                                        // 0x28(0x8)
	struct FName                                                 HidingState;                                       // 0x30(0x8)
	TArray<struct NPCOnSurfaceStateInfo>                         States;                                            // 0x38(0x10)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class PlayerNameService: public Object
{
public:
	char                                                         pad0x68_38E8B[0x68];                               // 0x28(0x68)
	class ScrambledNamesDataAsset*                               PlayerNameDataAsset;                               // 0x90(0x8)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class PlayerStreamedLevelActor: public Actor
{
public:
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3a0(0x10)
	char                                                         StreamedLevelIdentity;                             // 0x3b0(0x1)
	char                                                         pad0x7_2THHF[0x7];                                 // 0x3b1(0x7)
};


// Size 0x70 (Full Size[0xf0] - InheritedSize[0x80]
class RandomPirateLegendSectStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVarPLSectionBundle                               SectionBundle;                                     // 0x80(0x30)
	struct QuestVarPLSection                                     OutSection;                                        // 0xb0(0x30)
	TArray<class PirateLegendSectionFilter*>                     Filters;                                           // 0xe0(0x10)
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class MountableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_SCGU1[0x8];                                 // 0xb8(0x8)
	class UClass*                                                MountableType;                                     // 0xc0(0x8)
	TArray<struct PlayerStat>                                    MountableTypeStats;                                // 0xc8(0x10)
	bool                                                         ActorCanServerMigrate;                             // 0xd8(0x1)
	char                                                         pad0x7_L26JK[0x7];                                 // 0xd9(0x7)
	struct FText                                                 Description;                                       // 0xe0(0x38)
	TArray<struct PirateIdentity>                                PreviousMountInstigators;                          // 0x118(0x10)
	char                                                         pad0x18_SJEWY[0x18];                               // 0x128(0x18)
	class Object*                                                ReplicatedMountpoint;                              // 0x140(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class CommonShipSettings: public DeveloperSettings
{
public:
	class UClass*                                                TrinketMMCBudget;                                  // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableShipServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterAudioInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShovelInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterHeightInterestServiceInterface: public Interface
{
public:
};


// Size 0x128 (Full Size[0x1e0] - InheritedSize[0xb8]
class CutsceneTargetComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HN1ZA[0x8];                                 // 0xb8(0x8)
	struct FName                                                 SkeletalMeshComponentTag;                          // 0xc0(0x8)
	class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0xc8(0x8)
	char                                                         pad0x110_T29DB[0x110];                             // 0xd0(0x110)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeBlockingActionStateId: public ActionStateId
{
public:
};


// Size 0x1c0 (Full Size[0x560] - InheritedSize[0x3a0]
class CloudSystem: public Actor
{
public:
	struct CloudDomeParameters                                   CloudDome;                                         // 0x3a0(0x28)
	struct CloudVisualParameters                                 CloudVisuals;                                      // 0x3c8(0x70)
	struct CloudTileParameters                                   CloudTileGeneration;                               // 0x438(0x20)
	struct CloudWeatherParameters                                CloudWeather;                                      // 0x458(0x28)
	TArray<struct CloudTypeNormalizedWeight>                     NormalizedCloudWeights;                            // 0x480(0x10)
	struct Vector2D                                              CurrentWindAngleAndSpeed;                          // 0x490(0x8)
	float                                                        CloudSystemMaxActiveHeight;                        // 0x498(0x4)
	float                                                        CloudSystemMinActiveHeight;                        // 0x49c(0x4)
	int                                                          CloudTileGeneratedNumber;                          // 0x4a0(0x4)
	bool                                                         CloudSystemIsActive;                               // 0x4a4(0x1)
	char                                                         pad0xb_07931[0xb];                                 // 0x4a5(0xb)
	TArray<struct TiledCloudProperties>                          CloudTile;                                         // 0x4b0(0x10)
	struct Vector2D                                              GlobalCloudTileDisplacement;                       // 0x4c0(0x8)
	struct Vector2D                                              TileOffsets;                                       // 0x4c8(0x8)
	char                                                         pad0x18_S5ZBA[0x18];                               // 0x4d0(0x18)
	float                                                        CloudTileScale;                                    // 0x4e8(0x4)
	bool                                                         AreCloudsPossible;                                 // 0x4ec(0x1)
	char                                                         pad0x2b_A0P9F[0x2b];                               // 0x4ed(0x2b)
	class MaterialParameterCollectionInstance*                   AtmosphericMaterialParamsInstance;                 // 0x518(0x8)
	char                                                         pad0x40_OPAWP[0x40];                               // 0x520(0x40)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class PortalSignalCutSceneAnchor: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TauntAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestParallelStepDesc: public TaleQuestStepDesc
{
public:
	TArray<class TaleQuestStepDesc*>                             Descs;                                             // 0x80(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class AddFogBankAvoidanceAreaStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelOfTheDamnedMembershipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ClaimVaultStep: public TaleQuestStep
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class OverrideProgressSpawnStepDesc: public TaleQuestStepDesc
{
public:
	class UClass*                                                ProgressId;                                        // 0x80(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OffTopTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SharedObjectReplicationServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipServiceControlInterface: public Interface
{
public:
};


// Size 0x138 (Full Size[0x4d8] - InheritedSize[0x3a0]
class GuildPlaque: public Actor
{
public:
	char                                                         pad0x8_28IT7[0x8];                                 // 0x3a0(0x8)
	class StaticMeshMemoryConstraintComponent*                   GuildPlaqueMeshComponent;                          // 0x3a8(0x8)
	class GuildPlaqueIconsDataAsset*                             GuildPlaqueIconDataAsset;                          // 0x3b0(0x8)
	struct GuildPlaqueDisplayInfo                                GuildPlaqueDisplayInfo;                            // 0x3b8(0x38)
	char                                                         pad0xe8_4S6A6[0xe8];                               // 0x3f0(0xe8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HUDProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActionRulesProviderInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class CrewNotificationSettings: public DataAsset
{
public:
	class PopUpMessageDesc*                                      PlayerJoiningPopup;                                // 0x28(0x8)
	class PopUpMessageDesc*                                      PlayerLeavingPopup;                                // 0x30(0x8)
	float                                                        HoldDurationOverride;                              // 0x38(0x4)
	char                                                         pad0x4_8AG21[0x4];                                 // 0x3c(0x4)
	class PopUpMessageDesc*                                      CaptainJoiningPopup;                               // 0x40(0x8)
	class PopUpMessageDesc*                                      CaptainLeavingPopup;                               // 0x48(0x8)
	class PopUpMessageDesc*                                      TinSessionEndedPopup;                              // 0x50(0x8)
	class PopUpMessageDesc*                                      ShipRestoredPopup;                                 // 0x58(0x8)
	class PopUpMessageDesc*                                      GuildSessionEndedPopup;                            // 0x60(0x8)
	class PopUpMessageDesc*                                      StartGuildSessionFailedPopup;                      // 0x68(0x8)
	class PopUpMessageDesc*                                      PlayerRemovedFromGuildPopup;                       // 0x70(0x8)
};


// Size 0x10 (Full Size[0x180] - InheritedSize[0x170]
class EnvQueryTest_InSpecificIslandZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	struct FName                                                 IslandName;                                        // 0x174(0x8)
	char                                                         pad0x4_4OO5X[0x4];                                 // 0x17c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersChestAISpawnerServiceInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class RadialCreationRuleAsset: public DataAsset
{
public:
	struct RadialInstance                                        Ruleset;                                           // 0x28(0x80)
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class FlamethrowerCoordinatorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_45AEE[0x8];                                 // 0xb8(0x8)
	TArray<class FlamethrowerComponent*>                         Flamethrowers;                                     // 0xc0(0x10)
	char                                                         pad0x50_LHXFQ[0x50];                               // 0xd0(0x50)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class WaitForNPCOnSurfaceToSpawnStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableGuid                                     NPCOnSurfaceManager;                               // 0x80(0x30)
	struct QuestVariableActor                                    OutNPC;                                            // 0xb0(0x30)
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class GiveVoyageOnItemHandInRewardComponent: public ActorComponent
{
public:
	char                                                         pad0x8_183J1[0x8];                                 // 0xb8(0x8)
	class UClass*                                                Company;                                           // 0xc0(0x8)
	TArray<struct VoyageHandInEntry>                             VoyageEntries;                                     // 0xc8(0x10)
	char                                                         pad0x70_6D7DZ[0x70];                               // 0xd8(0x70)
};


// Size 0xd0 (Full Size[0x188] - InheritedSize[0xb8]
class UIDataRequestComponent: public ActorComponent
{
public:
	char                                                         pad0xd0_77TJZ[0xd0];                               // 0xb8(0xd0)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ConditionalStatsServiceSettings: public DataAsset
{
public:
	TArray<struct ConditionalStatsTriggerUnit>                   ConditionalStats;                                  // 0x28(0x10)
	TArray<struct ConditionalStatsTriggerUnit>                   SeasonConditionalStats;                            // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemProxyShipTrackerComponentDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         ShipTypes;                                         // 0x28(0x10)
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class WorldEndAIAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        AbilityDuration;                                   // 0xc8(0x4)
	char                                                         pad0x4_DWMHU[0x4];                                 // 0xcc(0x4)
	struct AshenLordFireShroudParams                             FireShroudParams;                                  // 0xd0(0x18)
	class GeyserManagerSetupDataAsset*                           GeyserManagerSetup;                                // 0xe8(0x8)
	float                                                        GeyserStartDelay;                                  // 0xf0(0x4)
	char                                                         pad0x4_AUUY8[0x4];                                 // 0xf4(0x4)
	class UClass*                                                VolcanicEmitterClass;                              // 0xf8(0x8)
	bool                                                         UseSuperHeatedWater;                               // 0x100(0x1)
	char                                                         pad0x7_B64VK[0x7];                                 // 0x101(0x7)
	class UClass*                                                SuperHeatedWaterClass;                             // 0x108(0x8)
	struct Vector                                                CloudOffset;                                       // 0x130(0xc)
	float                                                        CloudSpawnDelay;                                   // 0x13c(0x4)
	float                                                        CloudDespawnPreWarm;                               // 0x140(0x4)
	float                                                        VolcanicRockStartDelay;                            // 0x144(0x4)
	char                                                         pad0x18_4GKN5[0x18];                               // 0x148(0x18)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingAnimationDataAsset: public DataAsset
{
public:
	TArray<struct ItemDiggingAnimationOverride>                  AnimationOverrides;                                // 0x28(0x10)
	class ItemDiggingAnimationConfig*                            Default;                                           // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAITeamsServiceInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x70] - InheritedSize[0x48]
class CameraRollModifier: public CameraModifier
{
public:
	char                                                         pad0x28_BVTAQ[0x28];                               // 0x48(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmoteActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class FeedableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_FMEER[0x8];                                 // 0xb8(0x8)
	char                                                         FeedableType;                                      // 0xc0(0x1)
	bool                                                         Feedable;                                          // 0xc1(0x1)
	char                                                         pad0x6_VELYB[0x6];                                 // 0xc2(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WeakActorHandleTestsFunctionLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialInformationServiceBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismAudioEmitterInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class RiddleQuestDescGeneratorData: public DataAsset
{
public:
	float                                                        TemporaryLandmarkRadius;                           // 0x28(0x4)
	float                                                        TemporaryLandmarkHeight;                           // 0x2c(0x4)
	TArray<struct ValidRiddleOptions>                            ValidRiddleOptions;                                // 0x30(0x10)
	TArray<struct RiddleActionInfo>                              RiddleActionInfo;                                  // 0x40(0x10)
	TArray<struct Text>                                          CompassDirections;                                 // 0x50(0x10)
	struct FName                                                 NumPacesPhraseId;                                  // 0x60(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AnimNotifyState_BlockInterrupt: public AnimNotifyState
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ReapersTributeShipEventPopupsDataAsset: public DataAsset
{
public:
	struct StringAssetReference                                  HandInVoteCancelledPopUp;                          // 0x28(0x10)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class ItemAbandonmentHandlerComponent: public ActorComponent
{
public:
	float                                                        DelayBeforeAbandonment;                            // 0xb8(0x4)
	char                                                         pad0x2c_8VU3E[0x2c];                               // 0xbc(0x2c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleResourceBrokerServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class SeaFortStateComponent: public ActorComponent
{
public:
	TArray<class SeaFortStateBase*>                              States;                                            // 0xb8(0x10)
	TArray<class SeaFortStateBase*>                              ActiveStates;                                      // 0xc8(0x10)
	class Seafort*                                               OwningFort;                                        // 0xd8(0x8)
};


// Size 0xa0 (Full Size[0x158] - InheritedSize[0xb8]
class TankardRefillerComponent: public ActorComponent
{
public:
	char                                                         ActionDisplayPriority;                             // 0xb8(0x1)
	char                                                         pad0x7_NK3AU[0x7];                                 // 0xb9(0x7)
	class UClass*                                                NotificationInputId;                               // 0xc0(0x8)
	char                                                         RefillLiquidType;                                  // 0xc8(0x1)
	bool                                                         IgnoreLiquidType;                                  // 0xc9(0x1)
	char                                                         pad0x2_9JE6K[0x2];                                 // 0xca(0x2)
	int                                                          Capacity;                                          // 0xcc(0x4)
	int                                                          RemainingGrogs;                                    // 0xd0(0x4)
	char                                                         pad0x4_FS6Q8[0x4];                                 // 0xd4(0x4)
	struct FText                                                 RefillTankardTooltipDescription;                   // 0xd8(0x38)
	struct FText                                                 NotWieldingTankardTooltipDescription;              // 0x110(0x38)
	char                                                         pad0x10_BIXN8[0x10];                               // 0x148(0x10)
};


// Size 0x50 (Full Size[0x98] - InheritedSize[0x48]
class PreSpawnMusicZoneSpawnerStrategy: public SpawnerBehaviourStrategy
{
public:
	class UClass*                                                PreSpawnMusicZoneActor;                            // 0x48(0x8)
	class UClass*                                                PostSpawnMusicZoneActor;                           // 0x50(0x8)
	bool                                                         ShouldPlayBattleWonSting;                          // 0x58(0x1)
	bool                                                         ShouldStopMusicZoneWhenWaveCompleted;              // 0x59(0x1)
	char                                                         pad0x6_Q5Y6P[0x6];                                 // 0x5a(0x6)
	class Actor*                                                 SpawnedActor;                                      // 0x60(0x8)
	class MusicZoneComponent*                                    MusicZoneComponent;                                // 0x68(0x8)
	char                                                         pad0x28_K6GJQ[0x28];                               // 0x70(0x28)
};


// Size 0x160 (Full Size[0x218] - InheritedSize[0xb8]
class ExplosiveComponent: public ActorComponent
{
public:
	char                                                         pad0x18_DXAQF[0x18];                               // 0xb8(0x18)
	float                                                        ExplosionDelay;                                    // 0xd0(0x4)
	float                                                        ExplosionDelayPerMetre;                            // 0xd4(0x4)
	class Object*                                                ExplosionParticleSystem;                           // 0xd8(0x8)
	class Object*                                                ExplosionOnSandParticleSystem;                     // 0xe0(0x8)
	class Object*                                                ExplosionOnWaterSurfaceParticleSystem;             // 0xe8(0x8)
	class Object*                                                ExplosionUnderWaterParticleSystem;                 // 0xf0(0x8)
	class Object*                                                SplashParticles;                                   // 0xf8(0x8)
	float                                                        NearToSurfaceDistance;                             // 0x100(0x4)
	char                                                         pad0x4_T8PXR[0x4];                                 // 0x104(0x4)
	class WwiseEvent*                                            ExplosionSoundCue;                                 // 0x108(0x8)
	struct FName                                                 ExplosionSoundCueSwitchName;                       // 0x110(0x8)
	struct FName                                                 ExplosionSoundCueSwitchValueForOnLand;             // 0x118(0x8)
	struct FName                                                 ExplosionSoundCueSwitchValueForOnSand;             // 0x120(0x8)
	struct FName                                                 ExplosionSoundCueSwitchValueForOnWaterSurface;     // 0x128(0x8)
	struct FName                                                 ExplosionSoundCueIsObjectUnderWaterSwitchName;     // 0x130(0x8)
	struct FName                                                 ExplosionSoundCueIsObjectUnderWaterSwitchValueForAboveWater; // 0x138(0x8)
	struct FName                                                 ExplosionSoundCueIsObjectUnderWaterSwitchValueForBelowWater; // 0x140(0x8)
	class WwiseObjectPoolWrapper*                                ExplosionSfxPool;                                  // 0x148(0x8)
	class ParticleSystem*                                        HitReactParticleSystem;                            // 0x150(0x8)
	class WwiseEvent*                                            HitReactSoundCue;                                  // 0x158(0x8)
	float                                                        MaxDepthForSplash;                                 // 0x160(0x4)
	char                                                         HitTestTraceChannel;                               // 0x164(0x1)
	char                                                         SandSurfaceType;                                   // 0x165(0x1)
	bool                                                         MakeOwnerInvisibleOnExplosion;                     // 0x166(0x1)
	char                                                         pad0x1_HMU9J[0x1];                                 // 0x167(0x1)
	class Actor*                                                 RootExplosionInstigator;                           // 0x168(0x8)
	class HealthComponent*                                       HealthComponent;                                   // 0x170(0x8)
	char                                                         pad0x30_APV2P[0x30];                               // 0x178(0x30)
	bool                                                         IsExploding;                                       // 0x1a8(0x1)
	char                                                         pad0x6f_OF1CM[0x6f];                               // 0x1a9(0x6f)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class TrapSocketMMCData: public Object
{
public:
	char                                                         pad0x8_PYE4A[0x8];                                 // 0x28(0x8)
	struct StringAssetReference                                  StaticMesh;                                        // 0x30(0x10)
	TArray<class MaterialInterface*>                             Materials;                                         // 0x40(0x10)
	int                                                          MMC_ResourceSize;                                  // 0x50(0x4)
	char                                                         pad0x4_IMV5U[0x4];                                 // 0x54(0x4)
	class UClass*                                                MMC_FallbackCategory;                              // 0x58(0x8)
	class UClass*                                                MMC_Budget;                                        // 0x60(0x8)
	TArray<struct StringAssetReference>                          MMC_FallbackMaterials;                             // 0x68(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableGameEventServiceInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x1b0] - InheritedSize[0xb8]
class AthenaPlayerZonePenetrationTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_QP701[0x8];                                 // 0xb8(0x8)
	char                                                         OverlapType;                                       // 0xc0(0x1)
	char                                                         pad0x3_OHNY9[0x3];                                 // 0xc1(0x3)
	float                                                        UpdateInterval;                                    // 0xc4(0x4)
	class ShapeComponent*                                        ShapeComponent;                                    // 0xc8(0x8)
	TArray<class AthenaPlayerCharacter*>                         PlayersInZone;                                     // 0xd0(0x10)
	char                                                         pad0xd0_V3X93[0xd0];                               // 0xe0(0xd0)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackDataAsset: public DataAsset
{
public:
	struct FName                                                 FallbackName;                                      // 0x28(0x8)
	class UClass*                                                ConstraintBudget;                                  // 0x30(0x8)
	TArray<class MeshMemoryConstraintFallbackCategoryDataAsset*> MeshFallbacks;                                     // 0x38(0x10)
	TArray<float>                                                MinimumGuaranteeThresholdsMB;                      // 0x48(0x10)
	float                                                        ScoringIntervalInSeconds;                          // 0x58(0x4)
	char                                                         pad0x4_P5DCJ[0x4];                                 // 0x5c(0x4)
	TArray<class MeshMemoryConstraintScoringObject*>             ScoringData;                                       // 0x60(0x10)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ShipStorageJettisonServiceParams: public DataAsset
{
public:
	TArray<struct AllowedItemsToDetermineJettisonedContainerTypePair> JettisonedContainerTypes;                          // 0x28(0x10)
	class UClass*                                                DefaultContainerTypeToSpawn;                       // 0x38(0x8)
	float                                                        ContainerOwnershipLifetime;                        // 0x40(0x4)
	float                                                        ContainerKeepAliveRadius;                          // 0x44(0x4)
	float                                                        ContainerKeepAliveRadiusPlayers;                   // 0x48(0x4)
	float                                                        ServiceTickRate;                                   // 0x4c(0x4)
	float                                                        ThrottledJettisonRequestSpawnRate;                 // 0x50(0x4)
	int                                                          MaxJettisonedContainers;                           // 0x54(0x4)
	int                                                          MaxRepositionAttempts;                             // 0x58(0x4)
	float                                                        MinDistanceToOtherContainer;                       // 0x5c(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class InGameCommandItemSpawnManager: public Object
{
public:
	class SpawnCommandsItemList*                                 ItemList;                                          // 0x28(0x8)
	char                                                         pad0x18_CW7DN[0x18];                               // 0x30(0x18)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SoberStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyGReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindBaseProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewardServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileTraceHitVolumeProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockerInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InvasionTunnelScrollingSceneryPersistentServerData: public DataAsset
{
public:
	TArray<class Class*>                                         PersistentlyLoadedTileAssets;                      // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventSchedulerSettingsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TurnablePageInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class DebugTeleportCrewStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    LocatorVar;                                        // 0x80(0x30)
};


// Size 0x250 (Full Size[0x308] - InheritedSize[0xb8]
class PlayerCrewComponent: public ActorComponent
{
public:
	char                                                         pad0xc_6DXSM[0xc];                                 // 0xb8(0xc)
	int                                                          MaxTrapsInWorld;                                   // 0xc4(0x4)
	class DartLimitsDataAsset*                                   DartLimitsDataAsset;                               // 0xc8(0x8)
	char                                                         pad0x10_B95RP[0x10];                               // 0xd0(0x10)
	struct ObjectMessagingHandle                                 OnCrewSessionChangedEventHandle;                   // 0xf0(0x58)
	char                                                         pad0xa8_C9WP8[0xa8];                               // 0x148(0xa8)
	TArray<struct CrewMemberData>                                CrewMembers;                                       // 0x1f0(0x10)
	struct CrewShipData                                          CrewShip;                                          // 0x200(0x5)
	struct CrewMatchmakingVisibilityData                         CrewMatchmakingVisibility;                         // 0x205(0x3)
	struct CrewArenaRivalVotingData                              CrewRivalVotingData;                               // 0x208(0x2)
	char                                                         pad0x6_1BXND[0x6];                                 // 0x20a(0x6)
	bool                                                         HasValidSpawnProgress;                             // 0x220(0x1)
	char                                                         pad0x7_HBIOT[0x7];                                 // 0x221(0x7)
	int                                                          TaleProgressLevel;                                 // 0x238(0x4)
	bool                                                         IsCaptainedSession;                                // 0x23c(0x1)
	bool                                                         IsCaptain;                                         // 0x23d(0x1)
	bool                                                         IsShipCustomizationCaptainOnly;                    // 0x23e(0x1)
	char                                                         pad0x1_5L4AO[0x1];                                 // 0x23f(0x1)
	struct Guid                                                  ShipId;                                            // 0x240(0x10)
	char                                                         pad0x4_YE5TX[0x4];                                 // 0x250(0x4)
	bool                                                         CachedLocalCrossRegionOptOutSetting;               // 0x254(0x1)
	char                                                         pad0x33_XKFHO[0x33];                               // 0x255(0x33)
	TArray<struct Guid>                                          StashedMaps;                                       // 0x288(0x10)
	TArray<class ItemProxy*>                                     ThrowingKnifeItemProxies;                          // 0x298(0x10)
	TArray<class ItemProxy*>                                     TrapItemProxies;                                   // 0x2f8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipEntitlementInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class EventCatchStep: public TaleQuestStep
{
public:
	class EventCatchStepDesc*                                    Desc;                                              // 0x98(0x8)
	char                                                         pad0x8_YXA9D[0x8];                                 // 0xa0(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestStopAISpawningStep: public TaleQuestStep
{
public:
};


// Size 0xb8 (Full Size[0x170] - InheritedSize[0xb8]
class LimpingComponent: public ActorComponent
{
public:
	class CurveFloat*                                            LimpStickDeflectionCurve;                          // 0xb8(0x8)
	class CurveFloat*                                            LimpCameraCurve;                                   // 0xc0(0x8)
	int                                                          NumAntiCheatSamplesOnServer;                       // 0xc8(0x4)
	float                                                        MaxAveragePlayerSpeedServerTolerance;              // 0xcc(0x4)
	float                                                        MinLimpStrengthToCrossToPlayRumbleAndSfx;          // 0xd0(0x4)
	float                                                        PredictionValidityTime;                            // 0xd4(0x4)
	float                                                        MinStickDeflectionToLimp;                          // 0xd8(0x4)
	char                                                         pad0x4_3ZLKI[0x4];                                 // 0xdc(0x4)
	class ForceFeedbackEffect*                                   LimpCrunchRumble;                                  // 0xe0(0x8)
	float                                                        CameraSpringAccel;                                 // 0xe8(0x4)
	float                                                        CamPitchScalar;                                    // 0xec(0x4)
	float                                                        CamRollScalar;                                     // 0xf0(0x4)
	char                                                         pad0x4_EGG9C[0x4];                                 // 0xf4(0x4)
	class WwiseEvent*                                            LocalBrokenLegAudioStateEvent;                     // 0xf8(0x8)
	float                                                        DelayUntilStartCheatDetection;                     // 0x100(0x4)
	float                                                        CheatTimeThresholdToApplyServerPenalty;            // 0x104(0x4)
	float                                                        MoveSpeedScalarIfCheating;                         // 0x108(0x4)
	float                                                        CheatTimerDecaySpeed;                              // 0x10c(0x4)
	float                                                        CheatPenaltyTime;                                  // 0x110(0x4)
	int                                                          CheatPunishmentIncreasePerViolation;               // 0x114(0x4)
	char                                                         pad0x20_YFUDU[0x20];                               // 0x118(0x20)
	class AthenaPlayerCharacter*                                 Player;                                            // 0x138(0x8)
	char                                                         pad0x2e_17HBZ[0x2e];                               // 0x140(0x2e)
	bool                                                         bIsLimping;                                        // 0x16e(0x1)
	char                                                         pad0x1_GU9UV[0x1];                                 // 0x16f(0x1)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerManagerServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandEventTrackerInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class QuestDescDataAsset: public DataAsset
{
public:
	bool                                                         IsEmergent;                                        // 0x28(0x1)
	char                                                         pad0x7_VIZVX[0x7];                                 // 0x29(0x7)
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class ScrambledIdentityProviderComponent: public ActorComponent
{
public:
	struct ScrambledIdentityServer                               Identity;                                          // 0xb8(0x40)
	bool                                                         IsProvidingEnabled;                                // 0xf8(0x1)
	char                                                         pad0x7_1D2MH[0x7];                                 // 0xf9(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyAReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x250 (Full Size[0x690] - InheritedSize[0x440]
class NPCAnimInstance: public AnimInstance
{
public:
	char                                                         pad0x30_YS6Q0[0x30];                               // 0x440(0x30)
	class Actor*                                                 LeftHandObject;                                    // 0x470(0x8)
	class Actor*                                                 RightHandObject;                                   // 0x478(0x8)
	class NPCHeldObjectData*                                     HeldObjectList;                                    // 0x480(0x8)
	class SkeletalMeshComponent*                                 NPCSkeletalMesh;                                   // 0x488(0x8)
	TArray<class Actor*>                                         InitialSpawnedCosmeticItems;                       // 0x490(0x10)
	struct HitReactionAnimationState                             HitReactionState;                                  // 0x4a0(0x28)
	struct HitReactionAnimationData                              HitReactionData;                                   // 0x4c8(0x8)
	bool                                                         LookAtActive;                                      // 0x4d0(0x1)
	bool                                                         CustomAnimationLookAtActive;                       // 0x4d1(0x1)
	char                                                         pad0x2_HNXZ4[0x2];                                 // 0x4d2(0x2)
	float                                                        LookAtIKAlpha;                                     // 0x4d4(0x4)
	float                                                        LookAtEnabledInterpolationTime;                    // 0x4d8(0x4)
	float                                                        LookAtDisabledInterpolationTime;                   // 0x4dc(0x4)
	bool                                                         DisableLookAt;                                     // 0x4e0(0x1)
	char                                                         pad0x3_WGPMK[0x3];                                 // 0x4e1(0x3)
	float                                                        MinimumRunSpeed;                                   // 0x4e4(0x4)
	class NPCCustomAnimationDataAsset*                           NPCCustomAnimationData;                            // 0x4e8(0x8)
	struct NPCCustomAnimationBlueprintData                       NPCCustomAnimationBlueprintData;                   // 0x4f0(0x68)
	bool                                                         InitialSpawnedCosmeticItemsActive;                 // 0x558(0x1)
	char                                                         pad0x7_9K15P[0x7];                                 // 0x559(0x7)
	class AnimMontage*                                           NPCCustomAnimationCurrentMontage;                  // 0x560(0x8)
	class AnimMontage*                                           NPCCustomAnimationCurrentFacialAdditiveMontage;    // 0x568(0x8)
	TArray<class AnimSequence*>                                  IdleVariantAnims;                                  // 0x570(0x10)
	TArray<class AnimSequence*>                                  InactiveVariantAnims;                              // 0x580(0x10)
	TArray<class AnimSequence*>                                  InteractVariantAnims;                              // 0x590(0x10)
	struct NPCAnimationIdlesVariantStruct                        NPCAllocatedIdleAnimations;                        // 0x5a0(0x20)
	struct NPCAnimationResponseIdlesVariantStruct                NPCAllocatedInteractResponseAnimations;            // 0x5c0(0x10)
	class NPCInteractAnimResponseDataAsset*                      NPCInteractAnimResponseDataAsset;                  // 0x5d0(0x8)
	class UClass*                                                CurrentInteractResponse;                           // 0x5d8(0x8)
	float                                                        InteractResponseEntryTime;                         // 0x5e0(0x4)
	bool                                                         ResetInteractResponse;                             // 0x5e4(0x1)
	bool                                                         IsReacting;                                        // 0x5e5(0x1)
	char                                                         pad0x2_XBIPM[0x2];                                 // 0x5e6(0x2)
	class AnimSequence*                                          DefaultInteractionResponseStateAnim;               // 0x5e8(0x8)
	class AnimSequence*                                          PositiveInteractionResponseStateAnim;              // 0x5f0(0x8)
	class AnimSequence*                                          NegitiveInteractionResponseStateAnim;              // 0x5f8(0x8)
	bool                                                         Active;                                            // 0x600(0x1)
	bool                                                         Interacting;                                       // 0x601(0x1)
	char                                                         pad0x2_AZNPP[0x2];                                 // 0x602(0x2)
	float                                                        DotProductFOV;                                     // 0x604(0x4)
	char                                                         PreviousCustomAnimationState;                      // 0x608(0x1)
	bool                                                         UseLookAt;                                         // 0x609(0x1)
	bool                                                         SafeUseLookAt;                                     // 0x60a(0x1)
	char                                                         pad0x1_IVUH7[0x1];                                 // 0x60b(0x1)
	struct Vector                                                LookAtPlayerPosition;                              // 0x60c(0xc)
	bool                                                         PlayerCharacterIsValid;                            // 0x618(0x1)
	bool                                                         IsPlayingSequencerAnim;                            // 0x619(0x1)
	bool                                                         IsOffering;                                        // 0x61a(0x1)
	bool                                                         IsShowingOffer;                                    // 0x61b(0x1)
	bool                                                         IsMoving;                                          // 0x61c(0x1)
	bool                                                         IsRunning;                                         // 0x61d(0x1)
	char                                                         pad0x2_2VUNL[0x2];                                 // 0x61e(0x2)
	float                                                        MovementSpeed;                                     // 0x620(0x4)
	bool                                                         IsTalking;                                         // 0x624(0x1)
	bool                                                         ShouldIdleWhileInteracting;                        // 0x625(0x1)
	bool                                                         CanGoInactive;                                     // 0x626(0x1)
	char                                                         pad0x35_LALPA[0x35];                               // 0x627(0x35)
	float                                                        InteractionRange;                                  // 0x65c(0x4)
	bool                                                         UseTalkingAdditive;                                // 0x660(0x1)
	char                                                         pad0x3_AV52D[0x3];                                 // 0x661(0x3)
	float                                                        TalkingAdditiveAlpha;                              // 0x664(0x4)
	float                                                        InactiveStateSupressionTime;                       // 0x668(0x4)
	char                                                         pad0x4_Z7Y1O[0x4];                                 // 0x66c(0x4)
	class Character*                                             PlayerCharacter;                                   // 0x670(0x8)
	char                                                         pad0x18_57Z7F[0x18];                               // 0x678(0x18)
};


// Size 0x18 (Full Size[0x4b0] - InheritedSize[0x498]
class TestAthenaGameModeWithLoopBackServiceEndpoint: public GameMode
{
public:
	char                                                         pad0x18_HK5SD[0x18];                               // 0x498(0x18)
};


// Size 0x58 (Full Size[0xb8] - InheritedSize[0x60]
class TaleQuestBoarsService: public TaleQuestService
{
public:
	char                                                         pad0x58_XIRTW[0x58];                               // 0x60(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObscuringItemInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyEventsFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ModifiedStorageSwitchesManagerInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LockOnCameraModifierSettings: public DataAsset
{
public:
	bool                                                         BlockLowerPriorityCameraModifiers;                 // 0x28(0x1)
	bool                                                         DisablePlayerInputDuringLockOn;                    // 0x29(0x1)
	char                                                         pad0x2_ZSPFZ[0x2];                                 // 0x2a(0x2)
	struct FName                                                 TargetSocketName;                                  // 0x2c(0x8)
	float                                                        YawSnapStrength;                                   // 0x34(0x4)
	float                                                        PitchSnapStrength;                                 // 0x38(0x4)
	float                                                        MinYawLerpSpeed;                                   // 0x3c(0x4)
	bool                                                         LockOnScaledByInput;                               // 0x40(0x1)
	char                                                         pad0x3_0ZFSN[0x3];                                 // 0x41(0x3)
	float                                                        InputYawToScaleTo;                                 // 0x44(0x4)
	float                                                        InputTowardsTarget_LockOnScale;                    // 0x48(0x4)
	float                                                        ZeroInput_LockOnScale;                             // 0x4c(0x4)
	float                                                        InputAwayFromTarget_LockOnScale;                   // 0x50(0x4)
	bool                                                         AutoLockAllowed;                                   // 0x54(0x1)
	bool                                                         LimitLockOnByInput;                                // 0x55(0x1)
	char                                                         pad0x2_1VN6Y[0x2];                                 // 0x56(0x2)
	float                                                        InputAwayFromTarget_LockOnClampMultiplier;         // 0x58(0x4)
	bool                                                         FadeOutEnabled;                                    // 0x5c(0x1)
	char                                                         pad0x3_YRRWT[0x3];                                 // 0x5d(0x3)
	float                                                        FullLockDuration;                                  // 0x60(0x4)
	float                                                        FadeOutDuration;                                   // 0x64(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WaterBarrelLeverNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelInReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class VoyageGenerationSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  VoyageLocationExclusionFromFeatureToggleDataAssetLocation; // 0x38(0x10)
};


// Size 0x130 (Full Size[0x218] - InheritedSize[0xe8]
class AthenaAIInteractableComponent: public AIInteractableComponent
{
public:
	char                                                         pad0x8_9FCGS[0x8];                                 // 0xe8(0x8)
	bool                                                         Moveable;                                          // 0xf0(0x1)
	char                                                         pad0x3_71Y4J[0x3];                                 // 0xf1(0x3)
	struct Vector                                                InteractableRelativeVectorToSpawnPos;              // 0xf4(0xc)
	struct Vector                                                TriggerSphereCentreOffset;                         // 0x100(0xc)
	float                                                        TriggerSphereRadiusOffset;                         // 0x10c(0x4)
	float                                                        TimeToCacheLastBestTargetResult;                   // 0x110(0x4)
	char                                                         OwnerAITeam;                                       // 0x114(0x1)
	char                                                         pad0x103_2FBQJ[0x103];                             // 0x115(0x103)
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class AthenaCharacterDodgeComponent: public ActorComponent
{
public:
	struct AthenaCharacterDodgeParams                            Params;                                            // 0xb8(0x10)
	float                                                        ConsecutiveDodgeCountResetTimer;                   // 0xc8(0x4)
	char                                                         pad0x4_1HV8R[0x4];                                 // 0xcc(0x4)
	class CurveFloat*                                            BunnyHoppingScalarCurve;                           // 0xd0(0x8)
	class AthenaCharacter*                                       Character;                                         // 0xd8(0x8)
	char                                                         pad0x18_RYNPT[0x18];                               // 0xe0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SequencerVisibilityResetInterface: public Interface
{
public:
};


// Size 0x198 (Full Size[0x288] - InheritedSize[0xf0]
class ItemPreviewComponent: public CoherentUIGTRenderToTextureLiveView
{
public:
	char                                                         pad0x8_C8G2K[0x8];                                 // 0xf0(0x8)
	struct StringAssetReference                                  FallbackPreviewIconAsset;                          // 0xf8(0x10)
	class UClass*                                                RequiredPreviewObjectClass;                        // 0x108(0x8)
	struct FName                                                 DefaultCamera;                                     // 0x110(0x8)
	class UClass*                                                ClassToSpawn;                                      // 0x118(0x8)
	struct IntPoint                                              DefaultResolution;                                 // 0x120(0x8)
	class RenderToTextureSceneDetails*                           Details;                                           // 0x128(0x8)
	struct StringAssetReference                                  RequestedAssetReference;                           // 0x130(0x10)
	struct StringAssetReference                                  ActiveAssetReference;                              // 0x140(0x10)
	class Actor*                                                 InteractionActor;                                  // 0x150(0x8)
	struct ItemPreviewView                                       CurrentView;                                       // 0x1c0(0x18)
	char                                                         pad0xa0_SBMWZ[0xa0];                               // 0x1d8(0xa0)
	TArray<struct CategoryPreviewEntry>                          CategoryReplacementMap;                            // 0x278(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class MeleeAttackLockOnComponentSettings: public DataAsset
{
public:
	class LockOnCameraModifierSettings*                          CameraModifierSettings;                            // 0x28(0x8)
	float                                                        BreakDistance;                                     // 0x30(0x4)
	bool                                                         DelayTargetEvaluationUntilEndOfStrike;             // 0x34(0x1)
	bool                                                         AllowTargetSwitching;                              // 0x35(0x1)
	char                                                         pad0x2_MNOF4[0x2];                                 // 0x36(0x2)
	float                                                        MaxLockOnAngle;                                    // 0x38(0x4)
	float                                                        MaxLockOnDistance;                                 // 0x3c(0x4)
};


// Size 0x20 (Full Size[0x2a8] - InheritedSize[0x288]
class AthenaClampedFreelookInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x20_ELKYZ[0x20];                               // 0x288(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TitleLoadoutViewInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ItemSnapshotSettings: public DeveloperSettings
{
public:
	TArray<class Class*>                                         Generators;                                        // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObscuredVisionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TauntAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipInternalWaterContainerInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0xf8] - InheritedSize[0x60]
class TaleQuestStructGenService: public TaleQuestService
{
public:
	struct TQStructGenParams                                     Params;                                            // 0x60(0x78)
	TArray<struct TQStructGenSelection>                          QuestChain;                                        // 0xd8(0x10)
	class TaleResourceBrokerService*                             ResourceBroker;                                    // 0xe8(0x8)
	class GameEventExclusionZoneTaleService*                     GameEventExclusionZoneService;                     // 0xf0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WheelTurnAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetIdInterface: public Interface
{
public:
};


// Size 0x150 (Full Size[0x290] - InheritedSize[0x140]
class CollectorsChestItemSlotInteractable: public InteractableComponent
{
public:
	char                                                         pad0x10_YMLP6[0x10];                               // 0x140(0x10)
	int                                                          SlotId;                                            // 0x150(0x4)
	char                                                         pad0x14_WT12A[0x14];                               // 0x154(0x14)
	class StaticMeshMemoryConstraintComponent*                   ItemMeshComponent;                                 // 0x168(0x8)
	struct CollectorsChestStoredItemInfo                         StoredItemInfo;                                    // 0x170(0x68)
	char                                                         pad0x10_71691[0x10];                               // 0x1d8(0x10)
	class WwiseEvent*                                            PlaceItemSound;                                    // 0x1e8(0x8)
	class WwiseEvent*                                            PickupItemSound;                                   // 0x1f0(0x8)
	class WwiseObjectPoolWrapper*                                EmitterPool;                                       // 0x1f8(0x8)
	float                                                        PlaceLerpTime;                                     // 0x200(0x4)
	float                                                        LocalPredictionTimeout;                            // 0x204(0x4)
	char                                                         pad0x78_ENEMV[0x78];                               // 0x208(0x78)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x280(0x8)
	char                                                         pad0x8_895JD[0x8];                                 // 0x288(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex7SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class RewardedCurrencyConditionalStatsData: public Object
{
public:
	char                                                         pad0x30_7H81G[0x30];                               // 0x28(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterInteractionComponentTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseSoberUpOverTime: public StatusResponse
{
public:
	char                                                         SourceOfDrunkenness;                               // 0x38(0x1)
	char                                                         pad0x7_52MVJ[0x7];                                 // 0x39(0x7)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseBurpingGasChange: public StatusResponse
{
public:
	float                                                        IntensityMultiplier;                               // 0x38(0x4)
	char                                                         pad0x4_9S4Q0[0x4];                                 // 0x3c(0x4)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class RuntimeMaterialSwitcherComponent: public ActorComponent
{
public:
	struct FName                                                 MaterialSetName;                                   // 0xb8(0x8)
	class RuntimeMaterialVariantsDataAsset*                      RuntimeMaterialVariantsDataAsset;                  // 0xc0(0x8)
	class MeshComponent*                                         MeshComponentPtr;                                  // 0xc8(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NameplateService: public Object
{
public:
	char                                                         pad0x8_YX1I9[0x8];                                 // 0x28(0x8)
	TArray<class NameplateComponent*>                            RegisteredNameplates;                              // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockedToInteractableAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class MeleeChargeAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class VoyageRecipesDebugMenuEntryGenerator: public DebugMenuEntryGenerator
{
public:
	bool                                                         Regenerate;                                        // 0x28(0x1)
	char                                                         pad0x7_75LVS[0x7];                                 // 0x29(0x7)
	TArray<struct StringAssetReference>                          Recipes;                                           // 0x30(0x10)
	TArray<struct StringClassReference>                          Proposals;                                         // 0x40(0x10)
	TArray<struct StringAssetReference>                          DescAssets;                                        // 0x50(0x10)
	TArray<String>                                               AssetNames;                                        // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HideInObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class GlobalVoyageDirectorServiceSettings: public DeveloperSettings
{
public:
	TArray<struct DirectorSettingEntry>                          DefaultGlobalVoyages;                              // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchableProjectileServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ClientNotificationsService: public Object
{
public:
	char                                                         pad0x30_XM3EK[0x30];                               // 0x28(0x30)
	bool                                                         PlayerTextChatEnabled;                             // 0x58(0x1)
	char                                                         pad0x7_ZZXUQ[0x7];                                 // 0x59(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DamageableVulnerabilityLayer: public Object
{
public:
	TArray<struct DamageableVulnerabilityPair>                   Vulnerabilities;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReturnToCirclingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class UniversalDescriptorNavigateDownHeldInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FOVHandlerFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0xe0 (Full Size[0x480] - InheritedSize[0x3a0]
class ShipMovementProxy: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	class OwnedByShipComponent*                                  OwnedByShipComponent;                              // 0x3a8(0x8)
	struct ReplicatedShipMovement                                ShipMovement;                                      // 0x3b0(0xa8)
	char                                                         pad0x28_RPG54[0x28];                               // 0x458(0x28)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseChangeSailHeight: public StatusResponse
{
public:
	float                                                        Duration;                                          // 0x38(0x4)
	char                                                         pad0x4_HI81E[0x4];                                 // 0x3c(0x4)
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class ClientGlintComponent: public ActorComponent
{
public:
	class GlintComponentDataAsset*                               GlintComponentDataAsset;                           // 0xb8(0x8)
	class StaticMesh*                                            GlintStaticMesh;                                   // 0xc0(0x8)
	TArray<class MaterialInterface*>                             GlintMeshComponentOverrideMaterials;               // 0xc8(0x10)
	char                                                         pad0x8_6SD4X[0x8];                                 // 0xd8(0x8)
	struct Transform                                             GlintMeshRelativeTransform;                        // 0xe0(0x30)
	bool                                                         GlintMeshComponentUsesAttachParentBound;           // 0x110(0x1)
	char                                                         pad0x3_94QEQ[0x3];                                 // 0x111(0x3)
	float                                                        GlintMeshComponentOcclusionBoundsScale;            // 0x114(0x4)
	bool                                                         GlintMeshDontCull;                                 // 0x118(0x1)
	bool                                                         GlintMeshAbsoluteScale;                            // 0x119(0x1)
	char                                                         pad0x6_F66RW[0x6];                                 // 0x11a(0x6)
	TArray<class Actor*>                                         CurrentEnteredShips;                               // 0x120(0x10)
	struct ClientGlintVisibilityLock                             GlintVisibilityLock;                               // 0x130(0x1)
	char                                                         pad0x17_QLAGL[0x17];                               // 0x131(0x17)
	class StaticMeshComponent*                                   GlintStaticMeshComponent;                          // 0x148(0x8)
	bool                                                         GlintVisible;                                      // 0x150(0x1)
	char                                                         pad0xf_6VWSX[0xf];                                 // 0x151(0xf)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class NPCHeldObjectData: public DataAsset
{
public:
	struct FName                                                 LeftHandWieldSocket;                               // 0x28(0x8)
	struct FName                                                 RightHandWieldSocket;                              // 0x30(0x8)
	struct FName                                                 DetachSocketA;                                     // 0x38(0x8)
	struct FName                                                 DetachSocketB;                                     // 0x40(0x8)
	class UClass*                                                Object1;                                           // 0x48(0x8)
	class UClass*                                                Object2;                                           // 0x50(0x8)
	class UClass*                                                Object3;                                           // 0x58(0x8)
	class UClass*                                                Object4;                                           // 0x60(0x8)
	class UClass*                                                Object5;                                           // 0x68(0x8)
	class UClass*                                                Object6;                                           // 0x70(0x8)
	class UClass*                                                Object7;                                           // 0x78(0x8)
	class UClass*                                                Object8;                                           // 0x80(0x8)
	class UClass*                                                Object9;                                           // 0x88(0x8)
	class UClass*                                                Object10;                                          // 0x90(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutCostServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xa20] - InheritedSize[0xa20]
class LiquidContainerTestMaterial: public Material
{
public:
};


// Size 0xc8 (Full Size[0x180] - InheritedSize[0xb8]
class DamageableComponent: public ActorComponent
{
public:
	char                                                         pad0x60_77JIK[0x60];                               // 0xb8(0x60)
	struct FName                                                 FeatureFlag;                                       // 0x118(0x8)
	float                                                        DefaultVulnerability;                              // 0x120(0x4)
	char                                                         pad0x4_YHXHG[0x4];                                 // 0x124(0x4)
	TArray<struct DamageableVulnerabilityPair>                   Vulnerabilities;                                   // 0x128(0x10)
	bool                                                         BlockDamageVerification;                           // 0x138(0x1)
	char                                                         pad0x7_T99GT[0x7];                                 // 0x139(0x7)
	class DamageableVulnerabilityLayer*                          AddedVulnerabilityLayer;                           // 0x140(0x8)
	TArray<struct DamageableVulnerabilityLayerData>              VulnerabilityLayers;                               // 0x148(0x10)
	TArray<class Interface*>                                     DamageModifiers;                                   // 0x158(0x10)
	TArray<class Object*>                                        ReplicatedDamageModifierObjects;                   // 0x168(0x10)
	char                                                         pad0x8_CEEX7[0x8];                                 // 0x178(0x8)
};


// Size 0xa40 (Full Size[0xa68] - InheritedSize[0x28]
class AthenaGameContext: public Object
{
public:
	char                                                         pad0x90_ZFJPO[0x90];                               // 0x28(0x90)
	class VoiceChatRenderer*                                     VoiceChatRenderer;                                 // 0xb8(0x8)
	class AthenaPlayModeLevelsDataAsset*                         PlayModeLevels;                                    // 0xc0(0x8)
	class FeatureToggledLevelsDataAsset*                         FeatureToggledLevels;                              // 0xc8(0x8)
	char                                                         pad0x1b0_U2WK6[0x1b0];                             // 0xd0(0x1b0)
	class GameInstance*                                          PrimaryGameInstance;                               // 0x280(0x8)
	class AthenaServerIdentityManager*                           AthenaServerIdentityManager;                       // 0x288(0x8)
	struct GameServiceCoordinator                                ServiceCoordinator;                                // 0x290(0x20)
	char                                                         pad0x2e0_KFPQI[0x2e0];                             // 0x2b0(0x2e0)
	class AthenaLocalPlayerManager*                              AthenaLocalPlayerManager;                          // 0x590(0x8)
	class AthenaLocalPlayerReengage*                             AthenaLocalPlayerReengage;                         // 0x598(0x8)
	class GameNarrationCoordinator*                              GameNarrationCoordinator;                          // 0x5a0(0x8)
	class ApplicationSettings*                                   ApplicationSettings;                               // 0x5a8(0x8)
	char                                                         pad0x4b8_NK8UW[0x4b8];                             // 0x5b0(0x4b8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FootstepIDAsset: public DataAsset
{
public:
	struct FName                                                 FootstepName;                                      // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailHoistInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlameOfFateContainerInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SeaFortStateBase: public Object
{
public:
	char                                                         pad0x10_JC01Y[0x10];                               // 0x28(0x10)
	class World*                                                 World;                                             // 0x38(0x8)
	char                                                         pad0x8_CGIDL[0x8];                                 // 0x40(0x8)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class ContestAddItemToHandInListStepDesc: public TaleQuestStepDesc
{
public:
	class UClass*                                                Item;                                              // 0x80(0x8)
	struct QuestVariableActor                                    NPC;                                               // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FollowShipAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TrapStatus: public StatusBase
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RegisterTransientActorStep: public TaleQuestStep
{
public:
	class RegisterTransientActorStepDesc*                        Desc;                                              // 0x98(0x8)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class AddOpenContainerActionRuleComponent: public ActorComponent
{
public:
	class UClass*                                                NotificationInputId;                               // 0xb8(0x8)
	char                                                         DisplayPriority;                                   // 0xc0(0x1)
	char                                                         pad0x7_DNAKR[0x7];                                 // 0xc1(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToInstrumentNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MeleeWeaponMovementSpeedConfig: public DataAsset
{
public:
	TArray<struct MeleeWeaponMovementSpeedPair>                  MovementSpeeds;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProxyItemInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaPlayerControllerTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class TaleQuestSpawnFishingFishSpawnersStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_3N28F[0x8];                                 // 0x98(0x8)
	class FishingFishSpawnerManager*                             FishingFishSpawnerManager;                         // 0xa0(0x8)
	class TaleQuestSpawnFishingFishSpawnersStepDesc*             Desc;                                              // 0xa8(0x8)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class SeaFortsWorldDataAsset: public DataAsset
{
public:
	TArray<Class>                                                SeaForts;                                          // 0x28(0x10)
	int                                                          MaxActiveForts;                                    // 0x58(0x4)
	float                                                        ActivationMinDistanceFromPlayer;                   // 0x5c(0x4)
	struct FString                                               ActivationMinDistanceFromPlayerRemoteConfigKey;    // 0x60(0x10)
	float                                                        RandomActivationTimeMin;                           // 0x70(0x4)
	float                                                        RandomActivationTimeMax;                           // 0x74(0x4)
	float                                                        CrewVacantGracePeriod;                             // 0x78(0x4)
	float                                                        CrewVacantToStopBattleGracePeriod;                 // 0x7c(0x4)
	float                                                        SeaFortAlignmentReset;                             // 0x80(0x4)
	char                                                         pad0x4_IR2ZR[0x4];                                 // 0x84(0x4)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class AimAssistTargetComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CBAYM[0x8];                                 // 0xb8(0x8)
	bool                                                         IsAudioAimAssistOnly;                              // 0xc0(0x1)
	char                                                         pad0x7_7O727[0x7];                                 // 0xc1(0x7)
};


// Size 0x10 (Full Size[0x3e0] - InheritedSize[0x3d0]
class SpawnLocation: public PlayerStart
{
public:
	struct FString                                               Description;                                       // 0x3d0(0x10)
};


// Size 0x380 (Full Size[0x940] - InheritedSize[0x5c0]
class VomitComponent: public CapsuleComponent
{
public:
	float                                                        VomitFxDurationWhenSpewingIntoBucket;              // 0x5c0(0x4)
	char                                                         pad0x4_JMY51[0x4];                                 // 0x5c4(0x4)
	struct VomitVFX                                              VomitVFX;                                          // 0x5c8(0x240)
	class WwiseEvent*                                            VomitSfx;                                          // 0x808(0x8)
	class WwiseEvent*                                            VomitInBucketSfx;                                  // 0x810(0x8)
	struct VomitScreenFX                                         VomitScreenFX;                                     // 0x818(0x2c)
	char                                                         pad0x4_WVRWA[0x4];                                 // 0x844(0x4)
	struct VomitProjectiles                                      VomitProjectiles;                                  // 0x848(0x50)
	float                                                        ImmunityAgainstContractingAfterVomiting;           // 0x898(0x4)
	float                                                        ChanceForContractingVomitingIfBeingVomitedOn;      // 0x89c(0x4)
	struct FloatRange                                            ContractedVomitingSpewDuration;                    // 0x8a0(0x10)
	struct FloatRange                                            ContractedVomitingSpewDelay;                       // 0x8b0(0x10)
	struct FName                                                 ContractedVomitVFXType;                            // 0x8c0(0x8)
	float                                                        DebugInterval;                                     // 0x8c8(0x4)
	char                                                         pad0x4_ZYWLF[0x4];                                 // 0x8cc(0x4)
	class VomitBoutData*                                         BoutData;                                          // 0x8d0(0x8)
	char                                                         pad0x68_HLAOP[0x68];                               // 0x8d8(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCanvasRenderingInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GuildEntitlementDescriptions: public DataAsset
{
public:
	TArray<struct GuildEntitlement>                              GuildEntitlements;                                 // 0x28(0x10)
};


// Size 0x290 (Full Size[0x630] - InheritedSize[0x3a0]
class ShipInternalWater: public Actor
{
public:
	char                                                         pad0x18_UCLR4[0x18];                               // 0x3a0(0x18)
	struct ShipInternalWaterParams                               InternalWaterParams;                               // 0x3b8(0x38)
	float                                                        CurrentVisualWaterLevel;                           // 0x3f0(0x4)
	float                                                        WaterAmount;                                       // 0x3f4(0x4)
	float                                                        SuperheatedWaterScaleSpeed;                        // 0x3f8(0x4)
	struct Vector                                                OcclusionCylinderPosition;                         // 0x3fc(0xc)
	float                                                        OcclusionCylinderHeight;                           // 0x408(0x4)
	char                                                         pad0x4_MC7Q5[0x4];                                 // 0x40c(0x4)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x410(0x10)
	class FlatWaterPlaneComponent*                               WaterPlaneComponent;                               // 0x420(0x8)
	char                                                         pad0xa0_KEGG2[0xa0];                               // 0x428(0xa0)
	float                                                        ServerWaterAmount;                                 // 0x4c8(0x4)
	bool                                                         IsInSuperheatedWater;                              // 0x4cc(0x1)
	bool                                                         IsInSuperheatedWaterViaHeating;                    // 0x4cd(0x1)
	char                                                         pad0x2_52Z1F[0x2];                                 // 0x4ce(0x2)
	class SceneComponent*                                        SceneRootComponent;                                // 0x4d0(0x8)
	class StaticMeshComponent*                                   WaterPlaneActivationVolume;                        // 0x4d8(0x8)
	class StaticMeshComponent*                                   WaterOcclusionVolume;                              // 0x4e0(0x8)
	class FlatWaterMeshComponent*                                WaterMeshComponent;                                // 0x4e8(0x8)
	class DynamicFlowComponent*                                  DynamicFlowComponent;                              // 0x4f0(0x8)
	int                                                          WaterOcclusionVolumeShrinkMaterialId;              // 0x4f8(0x4)
	struct FName                                                 WaterOcclusionVolumeShrinkPropertyName;            // 0x4fc(0x8)
	char                                                         pad0x4_MJ4J0[0x4];                                 // 0x504(0x4)
	class CurveFloat*                                            WaterOcclusionZoneReductionCurve;                  // 0x508(0x8)
	TArray<int>                                                  WaterMeshIndicesForTextures;                       // 0x510(0x10)
	TArray<int>                                                  WaterOcclusionVolumeIndicesForDynamicMaterials;    // 0x520(0x10)
	class MaterialInterface*                                     DynamicMaterialToCreate;                           // 0x530(0x8)
	class CurveFloat*                                            FoaminessCurve;                                    // 0x538(0x8)
	float                                                        RippleSizeMin;                                     // 0x540(0x4)
	float                                                        RippleSizeMax;                                     // 0x544(0x4)
	float                                                        RippleHeight;                                      // 0x548(0x4)
	float                                                        SuperheatedWaterCoolingRatePerSecond;              // 0x54c(0x4)
	float                                                        TimeToIgnoreCoolingDueToSuperheating;              // 0x550(0x4)
	char                                                         pad0x4_BJEG2[0x4];                                 // 0x554(0x4)
	struct Status                                                SuperheatedWaterStatusToApply;                     // 0x558(0x20)
	char                                                         pad0xb8_YW536[0xb8];                               // 0x578(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VenomProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UniversalDescriptorServiceInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x1d0] - InheritedSize[0x170]
class EnvQueryTest_InsideWorldBounds: public EnvQueryTest
{
public:
	struct AIDataProviderFloatValue                              Radius;                                            // 0x170(0x30)
	struct AIDataProviderBoolValue                               IsShroudbreakerOnShip;                             // 0x1a0(0x30)
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class ShipSpawnLocation: public Actor
{
public:
	TArray<class ShipSpawnLocation*>                             LinkedShipSpawnLocations;                          // 0x3a0(0x10)
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3b0(0x10)
	class UClass*                                                ShipSize;                                          // 0x3c0(0x8)
	struct FString                                               Description;                                       // 0x3c8(0x10)
	class BoxComponent*                                          BoxComponent;                                      // 0x3d8(0x8)
	char                                                         pad0x10_K9DNH[0x10];                               // 0x3e0(0x10)
};


// Size 0xd0 (Full Size[0xf8] - InheritedSize[0x28]
class DrowningComponentParams: public DataAsset
{
public:
	struct BlendableDrowningParams                               DrowningParameters;                                // 0x28(0x28)
	class WwiseObjectPoolWrapper*                                DrowningEmitterPool;                               // 0x50(0x8)
	class WwiseEvent*                                            StartDrowningSfx;                                  // 0x58(0x8)
	class WwiseEvent*                                            StopDrowningSfx;                                   // 0x60(0x8)
	class WwiseEvent*                                            StartDrowningSfxRemotePlayer;                      // 0x68(0x8)
	class WwiseEvent*                                            StopDrowningSfxRemotePlayer;                       // 0x70(0x8)
	class WwiseEvent*                                            SurfaceBreathSfxSoft;                              // 0x78(0x8)
	class WwiseEvent*                                            SurfaceBreathSfxMed;                               // 0x80(0x8)
	class WwiseEvent*                                            SurfaceBreathSfxHard;                              // 0x88(0x8)
	class WwiseEvent*                                            BubblesSfx;                                        // 0x90(0x8)
	struct FName                                                 PlayerDrowningAmountRtpc;                          // 0x98(0x8)
	struct FName                                                 RemotePlayerDrowningAmountRtpc;                    // 0xa0(0x8)
	class Object*                                                BubblesFirstPerson;                                // 0xa8(0x8)
	class Object*                                                BubblesThirdPerson;                                // 0xb0(0x8)
	struct FName                                                 BubblesAmountRtpc;                                 // 0xb8(0x8)
	struct FName                                                 BubblesFirstPersonSocket;                          // 0xc0(0x8)
	struct FName                                                 BubblesThirdPersonSocket;                          // 0xc8(0x8)
	struct FName                                                 BubblesRateParam;                                  // 0xd0(0x8)
	struct FName                                                 BubblesLargeRateParam;                             // 0xd8(0x8)
	class CurveFloat*                                            BubbleRateTimeCurve;                               // 0xe0(0x8)
	struct Vector2D                                              BubbleIntervalForOxygenLevel;                      // 0xe8(0x8)
	float                                                        LargeBubbleStartTime;                              // 0xf0(0x4)
	char                                                         pad0x4_2NLBK[0x4];                                 // 0xf4(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrackedActorServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerGeneratedMapsContainerInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class BTTask_RotateToFaceBBEntryWithTime: public BTTask_RotateToFaceBBEntry
{
public:
	float                                                        Delay;                                             // 0x90(0x4)
	float                                                        RotationTime;                                      // 0x94(0x4)
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class ClientTimeModifier: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	float                                                        Radius;                                            // 0x3a8(0x4)
	float                                                        FixedTimeOfDay;                                    // 0x3ac(0x4)
	int                                                          FixedDay;                                          // 0x3b0(0x4)
	char                                                         pad0x2c_R36NN[0x2c];                               // 0x3b4(0x2c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCharacterDockingFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServiceProviderInterfaceTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShantySelectionInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipEncounterFormationsDataAsset: public DataAsset
{
public:
	TArray<struct AggressiveGhostShipEncounterFormationDescGroup> FormationDescGroups;                               // 0x28(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveCriticalActorStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    ActorVar;                                          // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LostTargetAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x3e0 (Full Size[0x780] - InheritedSize[0x3a0]
class SkellyFortService: public Actor
{
public:
	char                                                         pad0x18_HWH5W[0x18];                               // 0x3a0(0x18)
	TArray<class SkellyFort*>                                    SkellyForts;                                       // 0x3b8(0x10)
	TArray<class SkellyFortOnDemandProxy*>                       OnDemandProxies;                                   // 0x418(0x10)
	char                                                         pad0x1d0_4P89K[0x1d0];                             // 0x428(0x1d0)
	class SkellyFortListDataAsset*                               SkellyFortListDataAsset;                           // 0x5f8(0x8)
	TArray<class SkellyFortDataAsset*>                           AllFortsData;                                      // 0x600(0x10)
	class FortAIToggler*                                         FortAIToggler;                                     // 0x610(0x8)
	char                                                         pad0x90_VH7QV[0x90];                               // 0x618(0x90)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x6a8(0xa0)
	char                                                         pad0x24_ZZXLY[0x24];                               // 0x748(0x24)
	struct FName                                                 TargetFortOverride;                                // 0x76c(0x8)
	char                                                         pad0xc_AH1YM[0xc];                                 // 0x774(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleSingleStickToCameraControlReleasedInputId: public NotificationInputId
{
public:
};


// Size 0x60 (Full Size[0xf8] - InheritedSize[0x98]
class SetMechanismActionStateStep: public TaleQuestStep
{
public:
	char                                                         pad0x48_H7FTB[0x48];                               // 0x98(0x48)
	class SetMechanismActionStateStepDesc*                       Desc;                                              // 0xe0(0x8)
	char                                                         TriggerState;                                      // 0xe8(0x1)
	char                                                         TriggerType;                                       // 0xe9(0x1)
	char                                                         pad0xe_ME1E4[0xe];                                 // 0xea(0xe)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactDecalParamModifier: public Object
{
public:
};


// Size 0x50 (Full Size[0x80] - InheritedSize[0x30]
class AnimNotifyStateQuestBookRenderingModeRequest: public AnimNotifyState
{
public:
	char                                                         pad0x50_NZNA5[0x50];                               // 0x30(0x50)
};


// Size 0xf8 (Full Size[0x1b0] - InheritedSize[0xb8]
class ShipHullCollisionComponent: public ActorComponent
{
public:
	float                                                        SolidCollisionRetainTime;                          // 0xb8(0x4)
	float                                                        LandCollisionRetainTime;                           // 0xbc(0x4)
	class CurveFloat*                                            ImpactStrengthToDamageLevelMapping;                // 0xc0(0x8)
	float                                                        MinIntervalBetweenHitDamage;                       // 0xc8(0x4)
	float                                                        MinIntervalBetweenLandscapeHitDamage;              // 0xcc(0x4)
	float                                                        MinIntervalBetweenShipHitDamage;                   // 0xd0(0x4)
	char                                                         pad0x4_RSNW3[0x4];                                 // 0xd4(0x4)
	class ShipHullDamageDataAsset*                               HullDamageDataAsset;                               // 0xd8(0x8)
	class CurveFloat*                                            ShipFwdSpeedToFeedbackAmplitude;                   // 0xe0(0x8)
	TArray<class ForceFeedbackEffect*>                           HitLandForceFeedbackEffects;                       // 0xe8(0x10)
	class CurveFloat*                                            FeedbackStrengthToRumbleIndexMapping;              // 0xf8(0x8)
	class UClass*                                                CameraShake;                                       // 0x100(0x8)
	float                                                        MinIntervalBetweenHitFeedback;                     // 0x108(0x4)
	char                                                         pad0x4_YR9QD[0x4];                                 // 0x10c(0x4)
	class WwiseEvent*                                            StartScrapingEvent;                                // 0x110(0x8)
	class WwiseEvent*                                            StopScrapingEvent;                                 // 0x118(0x8)
	class WwiseEvent*                                            BarrelBumpEvent;                                   // 0x120(0x8)
	class WwiseObjectPoolWrapper*                                ShipDamagePool;                                    // 0x128(0x8)
	struct FName                                                 ShipDamageImpactRtpc;                              // 0x130(0x8)
	float                                                        MaxIntervalToDetermineAudioScrape;                 // 0x138(0x4)
	float                                                        MinSampledSpeedMagnitudeForMaxScrapeAudio;         // 0x13c(0x4)
	char                                                         pad0x10_K9TQQ[0x10];                               // 0x140(0x10)
	class Ship*                                                  Ship;                                              // 0x150(0x8)
	char                                                         pad0x58_RJA2N[0x58];                               // 0x158(0x58)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SpawnItemStep: public TaleQuestStep
{
public:
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class BeckonComponent: public ActorComponent
{
public:
	class UClass*                                                NPCGroupID;                                        // 0xb8(0x8)
	char                                                         pad0x30_XBLB2[0x30];                               // 0xc0(0x30)
	TArray<class Class*>                                         BeckonGestures;                                    // 0xf0(0x10)
	char                                                         pad0x10_LH6N2[0x10];                               // 0x100(0x10)
	class AnimMontage*                                           CurrentBeckonMontage;                              // 0x110(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ShipsVisitsAnIslandData: public Object
{
public:
	char                                                         pad0x8_FM3VV[0x8];                                 // 0x28(0x8)
};


// Size 0x48 (Full Size[0x3e8] - InheritedSize[0x3a0]
class InGameCommandsService: public Actor
{
public:
	char                                                         pad0x8_EBZOG[0x8];                                 // 0x3a0(0x8)
	class CrewManagementCommands*                                CrewManagementCommands;                            // 0x3a8(0x8)
	class SpawningCommands*                                      SpawningCommands;                                  // 0x3b0(0x8)
	class SessionManagementCommands*                             SessionManagementCommands;                         // 0x3b8(0x8)
	class WorldEventCommands*                                    WorldEventCommands;                                // 0x3c0(0x8)
	class TeleportCommands*                                      TeleportCommands;                                  // 0x3c8(0x8)
	class PlayerCommands*                                        PlayerCommands;                                    // 0x3d0(0x8)
	class ShipCommands*                                          ShipCommands;                                      // 0x3d8(0x8)
	class WorldSettingsCommands*                                 WorldSettingsCommands;                             // 0x3e0(0x8)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class MapTableCanvasDataAsset: public DataAsset
{
public:
	struct MapTableCanvasDetails                                 CanvasDetails;                                     // 0x28(0x88)
};


// Size 0x660 (Full Size[0xa00] - InheritedSize[0x3a0]
class BaseContinuousAnimatedMechanismAction: public Actor
{
public:
	char                                                         pad0x10_VWGRP[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        Root;                                              // 0x3b0(0x8)
	class SceneComponent*                                        Pivot;                                             // 0x3b8(0x8)
	struct TransformBlendCurve                                   Animation;                                         // 0x3c0(0x500)
	bool                                                         AnimateWithAcceleration;                           // 0x8c0(0x1)
	bool                                                         EnableCameraLookAt;                                // 0x8c1(0x1)
	char                                                         pad0x2_G3KH6[0x2];                                 // 0x8c2(0x2)
	struct Vector                                                MechanismLookAtLocationRelativeToActor;            // 0x8c4(0xc)
	class WwiseObjectPoolWrapper*                                EmitterPool;                                       // 0x8d0(0x8)
	struct FName                                                 MechanismMovementProgressRateOfChangeRTPCName;     // 0x8d8(0x8)
	class WwiseEvent*                                            MechanismStartedMovingAudioEvent;                  // 0x8e0(0x8)
	class WwiseEvent*                                            MechanismStoppedMovingAudioEvent;                  // 0x8e8(0x8)
	class WwiseEvent*                                            MechanismStoppedInProgressAudioEvent;              // 0x8f0(0x8)
	class WwiseEvent*                                            MechanismReachedMinimumAudioEvent;                 // 0x8f8(0x8)
	class WwiseEvent*                                            MechanismReachedMaximumAudioEvent;                 // 0x900(0x8)
	bool                                                         TransformAudioEmitterWithPivot;                    // 0x908(0x1)
	bool                                                         ParticleSystemsInheritActorScale;                  // 0x909(0x1)
	char                                                         pad0x6_9D2W3[0x6];                                 // 0x90a(0x6)
	class ParticleSystem*                                        MechanismMovingParticleSystem;                     // 0x910(0x8)
	struct Vector                                                MechanismMovingParticleSystemLocation;             // 0x918(0xc)
	struct Rotator                                               MechanismMovingParticleSystemRotation;             // 0x924(0xc)
	class ParticleSystem*                                        MechanismReachedMinimumParticleSystem;             // 0x930(0x8)
	struct Vector                                                MechanismReachedMinimumParticleSystemLocation;     // 0x938(0xc)
	struct Rotator                                               MechanismReachedMinimumParticleSystemRotation;     // 0x944(0xc)
	class ParticleSystem*                                        MechanismReachedMaximumParticleSystem;             // 0x950(0x8)
	struct Vector                                                MechanismReachedMaximumParticleSystemLocation;     // 0x958(0xc)
	struct Rotator                                               MechanismReachedMaximumParticleSystemRotation;     // 0x964(0xc)
	float                                                        CompletionThreshold;                               // 0x970(0x4)
	bool                                                         SmallerProgressSpringThresholdToggle;              // 0x974(0x1)
	char                                                         pad0x3_TW87B[0x3];                                 // 0x975(0x3)
	float                                                        SmallerProgressSpringThreshold;                    // 0x978(0x4)
	char                                                         pad0x4_6RN28[0x4];                                 // 0x97c(0x4)
	class ParticleSystemComponent*                               CachedMechanismMovingParticleSystem;               // 0x980(0x8)
	char                                                         pad0x78_W11OO[0x78];                               // 0x988(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AutoMoveInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VulnerabilityAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class GetIsShipInSafeWatersStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableBool                                     Result;                                            // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationWieldedItemAnimationOverlayFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x2d8 (Full Size[0x390] - InheritedSize[0xb8]
class StorageContainerComponent: public ActorComponent
{
public:
	char                                                         pad0x20_K75HT[0x20];                               // 0xb8(0x20)
	struct FText                                                 ContainerDisplayName;                              // 0xd8(0x38)
	bool                                                         ShowCapacityInDescription;                         // 0x110(0x1)
	char                                                         pad0xf_KMOXK[0xf];                                 // 0x111(0xf)
	struct Transform                                             InstanceTransform;                                 // 0x120(0x30)
	struct StorageContainerBackingStore                          ContainerNodes;                                    // 0x150(0x38)
	struct StorageContainerReplicatedContainerNodes              ReplicatedContainerNodes;                          // 0x188(0x40)
	TArray<uintptr_t>                                            QuickGivers;                                       // 0x218(0x10)
	TArray<uintptr_t>                                            QuickTakers;                                       // 0x228(0x10)
	class WwiseEvent*                                            AddItemSFX;                                        // 0x238(0x8)
	class WwiseEvent*                                            TakeItemSFX;                                       // 0x240(0x8)
	class WwiseEvent*                                            OpenContainerSFX;                                  // 0x248(0x8)
	class WwiseEvent*                                            BeginQuickGiveSFX;                                 // 0x250(0x8)
	class WwiseEvent*                                            EndQuickGiveSFX;                                   // 0x258(0x8)
	class WwiseEvent*                                            BeginQuickTakeSFX;                                 // 0x260(0x8)
	class WwiseEvent*                                            EndQuickTakeSFX;                                   // 0x268(0x8)
	class StorageContainerContentTypeSelector*                   CrateFillerContainerSelector;                      // 0x270(0x8)
	class StorageContainerContentTypeSelector*                   StorageContainerSelector;                          // 0x278(0x8)
	char                                                         pad0x28_BNOU7[0x28];                               // 0x280(0x28)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x2a8(0x8)
	char                                                         pad0xd8_2N4FC[0xd8];                               // 0x2b0(0xd8)
	class Object*                                                Aggregator;                                        // 0x388(0x8)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class GhostShipStreamingProbe: public Actor
{
public:
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class ShipwreckSiteGeneratorComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialInventorySelectorInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class ConsumableWieldableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HZGNF[0x8];                                 // 0xb8(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StorageContainerContentModifierSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  StorageContainerContentModifierDataAssetLocation;  // 0x38(0x10)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackRetrievalService: public Object
{
public:
	char                                                         pad0x58_7V4IH[0x58];                               // 0x28(0x58)
	class MeshMemoryConstraintFallbackCollection*                MMCFallbackCollection;                             // 0x80(0x8)
	char                                                         pad0x30_IS19V[0x30];                               // 0x88(0x30)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class DeliverableRedirectionNPCDestinationDescriptor: public DeliverableRedirectionDestinationDescriptorBase
{
public:
	char                                                         DisplayNameType;                                   // 0x28(0x1)
	char                                                         pad0x7_39G9L[0x7];                                 // 0x29(0x7)
	struct FText                                                 FemaleNPCDestination;                              // 0x30(0x38)
	struct FText                                                 MaleNPCDestination;                                // 0x68(0x38)
};


// Size 0x70 (Full Size[0x1b0] - InheritedSize[0x140]
class RetrieveBootyHandInComponent: public InteractableComponent
{
public:
	class UClass*                                                NotificationStartInputID;                          // 0x140(0x8)
	class UClass*                                                NotificationReleaseInputID;                        // 0x148(0x8)
	char                                                         DisplayPriority;                                   // 0x150(0x1)
	char                                                         pad0x3_X3UWX[0x3];                                 // 0x151(0x3)
	struct Vector                                                RetrieveTargetPoint;                               // 0x154(0xc)
	char                                                         pad0x10_7AT26[0x10];                               // 0x160(0x10)
	class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x170(0x8)
	char                                                         pad0x18_CEXTP[0x18];                               // 0x178(0x18)
	class WwiseEvent*                                            OnRetrievedSFX;                                    // 0x190(0x8)
	class ActionRulesComponent*                                  OwnerActionRulesComponent;                         // 0x198(0x8)
	class EnvQuery*                                              SpawnBootyEQSQuery;                                // 0x1a0(0x8)
	bool                                                         ShouldTellStoredBootyCounterOnTooltip;             // 0x1a8(0x1)
	char                                                         pad0x7_V82KX[0x7];                                 // 0x1a9(0x7)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class SeaFortDistantLights: public Actor
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class EntitlementAllowanceDataAsset: public DataAsset
{
public:
	struct FString                                               UsageTooltip;                                      // 0x28(0x10)
	TArray<struct EntitlementAllowance>                          EntitlementAllowance;                              // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TransientActorServiceInterface: public Interface
{
public:
};


// Size 0x190 (Full Size[0x248] - InheritedSize[0xb8]
class EmblemComponent: public ActorComponent
{
public:
	char                                                         pad0x190_22DZD[0x190];                             // 0xb8(0x190)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ParticleSystemPickerAsset: public DataAsset
{
public:
	struct ParticleSystemPicker                                  ParticleSystems;                                   // 0x28(0x20)
};


// Size 0x98 (Full Size[0x438] - InheritedSize[0x3a0]
class Constellation: public Actor
{
public:
	char                                                         pad0xc_YEQGH[0xc];                                 // 0x3a0(0xc)
	float                                                        ShaderFadeIn;                                      // 0x3ac(0x4)
	float                                                        ShaderFadeOut;                                     // 0x3b0(0x4)
	float                                                        ConstellationEffectSpeed;                          // 0x3b4(0x4)
	float                                                        InitialRevealAudioThreshold;                       // 0x3b8(0x4)
	float                                                        FullyRevealedAudioThreshold;                       // 0x3bc(0x4)
	class StaticMeshComponent*                                   ConstellationMesh;                                 // 0x3c0(0x8)
	class WwiseEvent*                                            StartBespokeSFX;                                   // 0x3c8(0x8)
	class WwiseEvent*                                            StopBespokeSFX;                                    // 0x3d0(0x8)
	char                                                         pad0x8_EUFOE[0x8];                                 // 0x3d8(0x8)
	class WwiseEvent*                                            StartInitialRevealSFX;                             // 0x3e0(0x8)
	class WwiseEvent*                                            StopInitialRevealSFX;                              // 0x3e8(0x8)
	char                                                         pad0x8_OSWDC[0x8];                                 // 0x3f0(0x8)
	class WwiseEvent*                                            StartFullyRevealedSFX;                             // 0x3f8(0x8)
	class WwiseEvent*                                            StopFullyRevealedSFX;                              // 0x400(0x8)
	char                                                         pad0x8_3XMYR[0x8];                                 // 0x408(0x8)
	class WwiseEvent*                                            StartInitialRevealMusic;                           // 0x410(0x8)
	class WwiseEvent*                                            StopInitialRevealMusic;                            // 0x418(0x8)
	char                                                         pad0x8_SJ2DB[0x8];                                 // 0x420(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x428(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveCriticalActorStep: public TaleQuestStep
{
public:
	class RemoveCriticalActorStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0xe0 (Full Size[0x480] - InheritedSize[0x3a0]
class InvasionDepartureTunnelScrollingScenery: public Actor
{
public:
	double                                                       ReplicatedServerStartTime;                         // 0x3a0(0x8)
	TArray<struct Vector>                                        ServerMovingObjectsCachedLocations;                // 0x3a8(0x10)
	TArray<class Class*>                                         CurrentlyLoadedTileAssets;                         // 0x3b8(0x10)
	class BoxComponent*                                          MovementRoot;                                      // 0x3c8(0x8)
	struct Vector                                                ScrollVelocity;                                    // 0x3d0(0xc)
	char                                                         pad0x4_7T6HV[0x4];                                 // 0x3dc(0x4)
	struct InvasionTunnelCreatureDioramaSpawnManager             CreatureDioramaManager;                            // 0x3e0(0x18)
	bool                                                         HaltRequested;                                     // 0x3f8(0x1)
	char                                                         pad0x3_58YWL[0x3];                                 // 0x3f9(0x3)
	int                                                          ReplicatedRandomSeed;                              // 0x3fc(0x4)
	class SceneComponent*                                        SharedRoot;                                        // 0x400(0x8)
	TArray<class SceneComponent*>                                MovingObjects;                                     // 0x408(0x10)
	char                                                         pad0x68_APUDF[0x68];                               // 0x418(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActivitiesServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EntitlementPreviewActorInterface: public Interface
{
public:
};


// Size 0x170 (Full Size[0x198] - InheritedSize[0x28]
class ExperienceService: public Object
{
public:
	char                                                         pad0x8_S8TQT[0x8];                                 // 0x28(0x8)
	class World*                                                 World;                                             // 0x30(0x8)
	char                                                         pad0xc8_E1WXZ[0xc8];                               // 0x38(0xc8)
	TArray<struct DisabledVoyageDetails>                         GlobalRestrictedVoyages;                           // 0x100(0x10)
	char                                                         pad0x88_XQCNZ[0x88];                               // 0x110(0x88)
};


// Size 0x288 (Full Size[0x628] - InheritedSize[0x3a0]
class Landmark: public Actor
{
public:
	struct FText                                                 Name;                                              // 0x3a0(0x38)
	struct FText                                                 NameV2;                                            // 0x3d8(0x38)
	struct FText                                                 NameV3;                                            // 0x410(0x38)
	struct FText                                                 NameV4;                                            // 0x448(0x38)
	char                                                         LandmarkVagueness;                                 // 0x480(0x1)
	char                                                         LandmarkUniqueness;                                // 0x481(0x1)
	bool                                                         IsUnderground;                                     // 0x482(0x1)
	char                                                         pad0x5_2VF1R[0x5];                                 // 0x483(0x5)
	TArray<char>                                                 IsUnsuitableFor;                                   // 0x488(0x10)
	char                                                         pad0x11c_UL44I[0x11c];                             // 0x498(0x11c)
	float                                                        PacingStartRadius;                                 // 0x5b4(0x4)
	TArray<struct LandmarkReaction>                              Reactions;                                         // 0x5b8(0x10)
	char                                                         pad0x20_F9HB7[0x20];                               // 0x5c8(0x20)
	class OverlapTriggerComponent*                               AudioZoneComponent;                                // 0x5e8(0x8)
	char                                                         pad0x2c_4NAJF[0x2c];                               // 0x5f0(0x2c)
	struct Vector                                                StartLocation;                                     // 0x61c(0xc)
};


// Size 0x18 (Full Size[0x78] - InheritedSize[0x60]
class TaleQuestProgressService: public TaleQuestService
{
public:
	class TaleQuestProgressServiceDesc*                          Desc;                                              // 0x60(0x8)
	TArray<struct Guid>                                          ParticipatingCrewIds;                              // 0x68(0x10)
};


// Size 0x2e0 (Full Size[0x680] - InheritedSize[0x3a0]
class CloudDome: public Actor
{
public:
	char                                                         pad0x8_525A7[0x8];                                 // 0x3a0(0x8)
	TArray<class StaticMeshComponent*>                           CloudMeshComponentsSolid;                          // 0x3a8(0x10)
	TArray<class StaticMeshComponent*>                           CloudMeshComponentsFluffy;                         // 0x3b8(0x10)
	TArray<class MaterialInstanceDynamic*>                       CloudMaterialsSolid;                               // 0x3c8(0x10)
	TArray<class MaterialInstanceDynamic*>                       CloudMaterialsFluffy;                              // 0x3d8(0x10)
	char                                                         pad0x68_XZUXC[0x68];                               // 0x3e8(0x68)
	class LocalPlayer*                                           LocalPlayer;                                       // 0x450(0x8)
	char                                                         pad0x228_DPP3Q[0x228];                             // 0x458(0x228)
};


// Size 0x30 (Full Size[0xe0] - InheritedSize[0xb0]
class WaitForAshenLordPawnBaseStepDesc: public WaitForSpawnedPawnBaseStepDesc
{
public:
	struct QuestVariableGameEvent                                AshenLordEncounter;                                // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionSouthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PeriodicResponseBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetCurrentLocationDataStep: public TaleQuestStep
{
public:
	class GetCurrentLocationDataStepDesc*                        Desc;                                              // 0x98(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class BowSplashContainer: public DataAsset
{
public:
	bool                                                         EnableProbes;                                      // 0x28(0x1)
	char                                                         pad0x3_LJ989[0x3];                                 // 0x29(0x3)
	float                                                        VisibleCullDistance;                               // 0x2c(0x4)
	float                                                        HiddenCullDistance;                                // 0x30(0x4)
	float                                                        SpeedThreshold;                                    // 0x34(0x4)
	float                                                        BowSplashFieldOfViewAngleAddition;                 // 0x38(0x4)
	char                                                         pad0x4_31TQ5[0x4];                                 // 0x3c(0x4)
	TArray<struct BowSplashProbe>                                Probes;                                            // 0x40(0x10)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class CustomScoreService: public Actor
{
public:
	char                                                         pad0x8_OB3KW[0x8];                                 // 0x3a0(0x8)
	class CustomScoreVariantBase*                                ScoreVariant;                                      // 0x3a8(0x8)
	char                                                         pad0x8_2J1FV[0x8];                                 // 0x3b0(0x8)
	TArray<struct TeamCustomScore>                               TeamScores;                                        // 0x3b8(0x10)
	char                                                         pad0x10_3D9IW[0x10];                               // 0x3c8(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToWoodPlankNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class TaleQuestSequenceStepDesc: public TaleQuestFramedStepDesc
{
public:
	TArray<class TaleQuestStepDesc*>                             Descs;                                             // 0xb8(0x10)
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestStartingBannerStepDesc: public TaleQuestStepDesc
{
public:
	struct FText                                                 Header;                                            // 0x80(0x38)
	struct FName                                                 Tag;                                               // 0xb8(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TaleQuestWeightedItemDescSpawnDataAsset: public DataAsset
{
public:
	TArray<struct TaleQuestWeightedItemDescSpawnData>            WeightedItemSpawnDatas;                            // 0x28(0x10)
	class ItemSpawnData*                                         QuestObjectSpawnData;                              // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerEntitlementBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeWeaponFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AICharacterEngageEnemyMethod: public Object
{
public:
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class OrbOfSecretsInteractable: public Actor
{
public:
	char                                                         pad0x8_0RL1H[0x8];                                 // 0x3a0(0x8)
	float                                                        PickUpInteractionHoldDuration;                     // 0x3a8(0x4)
	bool                                                         UseSimplifiedInteractionRules;                     // 0x3ac(0x1)
	char                                                         pad0x3_SS097[0x3];                                 // 0x3ad(0x3)
	class SceneComponent*                                        RootSceneComponent;                                // 0x3b0(0x8)
	class SphereComponent*                                       ShipInteractionRadius;                             // 0x3b8(0x8)
	struct SkeletonCampReplicatedData                            CachedSkeletonCampData;                            // 0x3c0(0x20)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SetVaultStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class TaleVaultService: public TaleQuestService
{
public:
	class PuzzleVault*                                           Vault;                                             // 0x60(0x8)
	class VaultPuzzleDataAsset*                                  SolutionAsset;                                     // 0x68(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickupableInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class MechanismElementProxy: public Actor
{
public:
	char                                                         pad0x10_2FCK6[0x10];                               // 0x3a0(0x10)
	class UClass*                                                ElementClass;                                      // 0x3b0(0x8)
	float                                                        Relevancy;                                         // 0x3b8(0x4)
	char                                                         pad0x4_0YMVM[0x4];                                 // 0x3bc(0x4)
	class Actor*                                                 Instance;                                          // 0x3c0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMoveRightInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class TurnRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableCutsceneActionStateId: public ActionStateId
{
public:
};


// Size 0x210 (Full Size[0x238] - InheritedSize[0x28]
class CargoRunMapLayout: public DataAsset
{
public:
	struct TreasureMapWidgetText                                 NPCNameDescription;                                // 0x28(0x3c)
	struct TreasureMapWidgetText                                 IslandNameDescription;                             // 0x64(0x3c)
	struct TreasureMapWidgetText                                 NumOfItemsDescription;                             // 0xa0(0x3c)
	struct TreasureMapWidgetText                                 PickupLocationHintDescription;                     // 0xdc(0x3c)
	TArray<struct TreasureMapWidgetLocalisedText>                GeneralText;                                       // 0x118(0x10)
	TArray<struct TreasureMapWidgetTexture>                      Images;                                            // 0x128(0x10)
	struct TreasureMapWidgetText                                 SmugglersRunIslandCoordinateDescription;           // 0x138(0x3c)
	struct TreasureMapWidgetText                                 SmugglersRunIslandRiddleDescription;               // 0x174(0x3c)
	struct TreasureMapWidgetText                                 SmugglersRunExtraLineDescription;                  // 0x1b0(0x3c)
	struct TreasureMapWidgetText                                 SmugglersRunExtraLineHeaderDescription;            // 0x1ec(0x3c)
	TArray<struct SmugglersRunMapLayout>                         SmugglersRunMapLayoutArray;                        // 0x228(0x10)
};


// Size 0xb0 (Full Size[0x660] - InheritedSize[0x5b0]
class MockCharacterWithAthenaPlayerCharacterMovementComponent: public Character
{
public:
	char                                                         pad0xb0_AXLUR[0xb0];                               // 0x5b0(0xb0)
};


// Size 0xc8 (Full Size[0x180] - InheritedSize[0xb8]
class RewardHandInComponent: public ActorComponent
{
public:
	char                                                         pad0x8_V3H0P[0x8];                                 // 0xb8(0x8)
	class UClass*                                                Company;                                           // 0xc0(0x8)
	struct FName                                                 NPCName;                                           // 0xc8(0x8)
	TArray<class Class*>                                         ConditionalStatsForHandIn;                         // 0xd0(0x10)
	char                                                         pad0xa0_PD51K[0xa0];                               // 0xe0(0xa0)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedTreasureChestDescAsset: public DataAsset
{
public:
	TArray<struct WeightedTreasureChestDesc>                     Rewards;                                           // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PersistenceIdentifierMap: public DataAsset
{
public:
	struct StringAssetReference                                  AssetReference;                                    // 0x28(0x10)
	TArray<struct PersistenceIdentifier>                         IdentifierMap;                                     // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipInternalWaterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StandingSpyglassActionStateId: public ActionStateId
{
public:
};


// Size 0x90 (Full Size[0xa30] - InheritedSize[0x9a0]
class SkeletalMeshMemoryConstraintComponent: public SkeletalMeshComponent
{
public:
	char                                                         pad0x20_EN6VA[0x20];                               // 0x9a0(0x20)
	class MeshMemoryConstraintHandler*                           Handler;                                           // 0x9c0(0x8)
	TArray<struct StringAssetReference>                          FallbackOverrideMaterials;                         // 0x9c8(0x10)
	class UClass*                                                MeshFallbackCategory;                              // 0x9d8(0x8)
	struct StringAssetReference                                  MeshReference;                                     // 0x9e0(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x9f8(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x9f9(0x1)
	char                                                         pad0x6_V5URR[0x6];                                 // 0x9fa(0x6)
	class UClass*                                                BudgetToCountMemoryAgainstIfNoFallback;            // 0xa00(0x8)
	struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0xa08(0xc)
	char                                                         pad0x4_CM6Q5[0x4];                                 // 0xa14(0x4)
	char                                                         pad0x18_2U1GS[0x18];                               // 0xa18(0x18)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class PortableHarpoonInteractionOverrideComponent: public ActorComponent
{
public:
	struct ActorComponentSelector                                UseSpecificComponentForOverlaps;                   // 0xb8(0x10)
	bool                                                         BlockGrappling;                                    // 0xc8(0x1)
	bool                                                         BlockItemRetraction;                               // 0xc9(0x1)
	bool                                                         BlockCharacterRetraction;                          // 0xca(0x1)
	char                                                         pad0x5_DU4DR[0x5];                                 // 0xcb(0x5)
	class PrimitiveComponent*                                    SelectedComponentForOverlaps;                      // 0xd0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_NamedActorOnIsland: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemProxyLifetimeParentInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class BalanceableWalkwayFXParams: public DataAsset
{
public:
	class WwiseEvent*                                            WalkwayStartSFX;                                   // 0x28(0x8)
	class WwiseEvent*                                            WalkwayEndSFX;                                     // 0x30(0x8)
	class WwiseEvent*                                            AttachToWalkwayAdditiveOneShotSFX;                 // 0x38(0x8)
	class WwiseEvent*                                            DetachFromWalkwayAdditiveOneShotSFX;               // 0x40(0x8)
	class WwiseEvent*                                            WalkwayLoopStartSFX;                               // 0x48(0x8)
	class WwiseEvent*                                            WalkwayLoopEndSFX;                                 // 0x50(0x8)
	class WwiseEvent*                                            WalkwaySprintLoopStartSFX;                         // 0x58(0x8)
	class WwiseEvent*                                            WalkwaySprintLoopEndSFX;                           // 0x60(0x8)
	class WwiseEvent*                                            WalkwaySlideLoopStartSFX;                          // 0x68(0x8)
	class WwiseEvent*                                            WalkwaySlideLoopEndSFX;                            // 0x70(0x8)
	class WwiseEvent*                                            WalkwaySlideEndSFX;                                // 0x78(0x8)
	struct FName                                                 PlayerSpeedOnWalkwayRTPC;                          // 0x80(0x8)
	struct FName                                                 PlayerTiltOnWalkwayRTPC;                           // 0x88(0x8)
	class ParticleSystem*                                        PlayerWalkwayWindVFX;                              // 0x90(0x8)
	class ParticleSystem*                                        PlayerWalkwayTrailVFX;                             // 0x98(0x8)
	struct Vector2D                                              SpawnParticleSpeedThreshold;                       // 0xa0(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CampaignPopUpNotificationDataAsset: public DataAsset
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
	TArray<struct CampaignPopUpNotificationInfo>                 CampaignPopUpNotifications;                        // 0x30(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class VenomStatus: public StatusBase
{
public:
};


// Size 0xf0 (Full Size[0x1a8] - InheritedSize[0xb8]
class PickupableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CPDIV[0x8];                                 // 0xb8(0x8)
	float                                                        PickupTime;                                        // 0xc0(0x4)
	char                                                         pad0x4_H9S6Y[0x4];                                 // 0xc4(0x4)
	struct FText                                                 PickupActionDisplayString;                         // 0xc8(0x38)
	struct FText                                                 PickupActionDisplayStringWhenFull;                 // 0x100(0x38)
	class UClass*                                                StartPickupInputId;                                // 0x138(0x8)
	char                                                         pad0x68_4HPU3[0x68];                               // 0x140(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AllianceServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPersistenceLocatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class UnclaimVaultStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x2d0] - InheritedSize[0x2d0]
class LaunchableAttachPointComponent: public SceneComponent
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class AncientAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	class UClass*                                                AwardableComponentType;                            // 0x98(0x8)
	float                                                        TimeBeforeDespawn;                                 // 0xa0(0x4)
	char                                                         pad0x4_OEQF3[0x4];                                 // 0xa4(0x4)
};


// Size 0x50 (Full Size[0xe8] - InheritedSize[0x98]
class DebugCreateAndPlayNpcAnimationStep: public TaleQuestStep
{
public:
	class DebugCreateAndPlayNpcAnimationStepDesc*                StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x10_QBZSW[0x10];                               // 0xa0(0x10)
	class NPCDialogComponent*                                    NPCDialogComponent;                                // 0xb0(0x8)
	class CutSceneActor*                                         CutSceneActor;                                     // 0xb8(0x8)
	class Actor*                                                 SpawnedActor;                                      // 0xc0(0x8)
	class PlaceableReaction*                                     PlaceableReactionActor;                            // 0xc8(0x8)
	char                                                         pad0x18_70120[0x18];                               // 0xd0(0x18)
};


// Size 0x70 (Full Size[0xf0] - InheritedSize[0x80]
class GenerateDigLocationStepDesc: public TaleQuestStepDesc
{
public:
	class Actor*                                                 IgnoredBuryLocation;                               // 0x80(0x8)
	float                                                        IgnoredBuryRadius;                                 // 0x88(0x4)
	char                                                         pad0x4_PH3AV[0x4];                                 // 0x8c(0x4)
	struct QuestVariableName                                     IslandName;                                        // 0x90(0x30)
	struct QuestVariableVector                                   DigLocation;                                       // 0xc0(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class CloakAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCompanyViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LauncherParentInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipShotSelectionDataAsset: public DataAsset
{
public:
	TArray<struct AggressiveGhostShipShotSelection>              ShotSelection;                                     // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BalanceableWalkwayInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseHarpoonLauncherActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class DeliverableRedirectionSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  DeliverableRedirectionActionDataAssetLocation;     // 0x38(0x10)
};


// Size 0xc8 (Full Size[0x148] - InheritedSize[0x80]
class TaleQuestSpawnFishingFishSpawnersStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableFishingFishSpawnerManager                FishingFishSpawnerManager;                         // 0x80(0x30)
	class UClass*                                                FishingFishSpawnerClassToSpawn;                    // 0xb0(0x8)
	struct QuestVariableVectorArray                              FishingFishSpawnerSpawnLocations;                  // 0xb8(0x30)
	struct TierFishToSpawnAcrossFishSpawners                     Tier1_FishData;                                    // 0xe8(0x10)
	struct TierFishToSpawnAcrossFishSpawners                     Tier2_FishData;                                    // 0xf8(0x10)
	struct TierFishToSpawnAcrossFishSpawners                     Tier3_FishData;                                    // 0x108(0x10)
	struct QuestVariableFishingFishSpawners                      FishingFishSpawners;                               // 0x118(0x30)
};


// Size 0x128 (Full Size[0x1a8] - InheritedSize[0x80]
class StartAggressiveGhostShipEncounterStepDesc: public TaleQuestStepDesc
{
public:
	class AggressiveGhostShipsEncounterParams*                   AggressiveGhostShipEncounterParams;                // 0x80(0x8)
	struct FName                                                 BountyMapName;                                     // 0x88(0x8)
	struct FName                                                 IslandToSpawnEncounter;                            // 0x90(0x8)
	bool                                                         UseQuestIslandNameAsIslandSearchStartLocation;     // 0x98(0x1)
	char                                                         pad0x3_K7SJF[0x3];                                 // 0x99(0x3)
	float                                                        EncounterIslandOverlapRadius;                      // 0x9c(0x4)
	class AggressiveGhostShipNamesDataAsset*                     ShipFleetNamesAsset;                               // 0xa0(0x8)
	class AggressiveGhostShipNamesDataAsset*                     IslandNamesAsset;                                  // 0xa8(0x8)
	float                                                        CustomEncounterRadiusInMetres;                     // 0xb0(0x4)
	char                                                         pad0x4_6KAYQ[0x4];                                 // 0xb4(0x4)
	struct QuestVariableVector                                   CustomEncounterLocation;                           // 0xb8(0x30)
	struct QuestVariableName                                     EncounterIslandName;                               // 0xe8(0x30)
	struct QuestVariableText                                     LocalisedEncounterIslandName;                      // 0x118(0x30)
	struct QuestVariableBountyTargetArray                        ShipFleetNames;                                    // 0x148(0x30)
	struct QuestVariableActor                                    AggressiveGhostShipsEncounterActor;                // 0x178(0x30)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyFNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class StatusResponseApplyStatusPlayerCurse: public StatusResponse
{
public:
	char                                                         CurseTag;                                          // 0x38(0x1)
	char                                                         pad0x7_9F8Q0[0x7];                                 // 0x39(0x7)
	struct Status                                                Status;                                            // 0x40(0x20)
};


// Size 0xa0 (Full Size[0x440] - InheritedSize[0x3a0]
class GameEventService: public Actor
{
public:
	char                                                         pad0x10_PYIEY[0x10];                               // 0x3a0(0x10)
	class GameEventOnDemandAvailabilityHandler*                  GameEventOnDemandAvailabilityHandler;              // 0x3b0(0x8)
	char                                                         pad0x70_68ET5[0x70];                               // 0x3b8(0x70)
	TArray<class GameEvent*>                                     GameEvents;                                        // 0x428(0x10)
	char                                                         pad0x8_XKMAY[0x8];                                 // 0x438(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class DebugShipService: public Object
{
public:
	char                                                         pad0x18_VGZWE[0x18];                               // 0x28(0x18)
	class Ship*                                                  PlayerShip;                                        // 0x40(0x8)
};


// Size 0x78 (Full Size[0x460] - InheritedSize[0x3e8]
class SpawnProgressTriggerVolume: public PhysicsVolume
{
public:
	char                                                         pad0x8_M9VN2[0x8];                                 // 0x3e8(0x8)
	bool                                                         ClearProgress;                                     // 0x3f0(0x1)
	char                                                         pad0x4f_BDYRA[0x4f];                               // 0x3f1(0x4f)
	bool                                                         StartDisabled;                                     // 0x440(0x1)
	char                                                         pad0x7_HQS70[0x7];                                 // 0x441(0x7)
	TArray<class ProgressSpawnLocation*>                         LinkedSpawnLocation;                               // 0x448(0x10)
	int                                                          ProgressLevel;                                     // 0x458(0x4)
	bool                                                         HasPriority;                                       // 0x45c(0x1)
	char                                                         pad0x3_YM9YR[0x3];                                 // 0x45d(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneTargetRetrievalInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class MimicConfig: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          AIFormWhitelist;                                   // 0x28(0x10)
	TArray<struct StringAssetReference>                          VisibleToAIWhitelist;                              // 0x38(0x10)
	float                                                        MimicDurationPlayer;                               // 0x48(0x4)
	float                                                        MimicDurationAI;                                   // 0x4c(0x4)
	struct Status                                                MimicStatus;                                       // 0x50(0x20)
	class ParticleSystem*                                        TransformationVFX;                                 // 0x70(0x8)
	class ParticleSystem*                                        FPTransformationVFX;                               // 0x78(0x8)
	class WwiseEvent*                                            TransformationSFXFirstPerson;                      // 0x80(0x8)
	class WwiseEvent*                                            TransformationSFXThirdPerson;                      // 0x88(0x8)
	TArray<struct StringAssetReference>                          MimickedParticleSystemBlacklist;                   // 0x90(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemRarityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class MeleeSpinAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageableVulnerabilityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoordinatedKrakenTentacleSpawnInfoBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorActivationFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xe0 (Full Size[0x198] - InheritedSize[0xb8]
class CharacterFootImpactComponent: public ActorComponent
{
public:
	char                                                         pad0x8_EQ7K9[0x8];                                 // 0xb8(0x8)
	TArray<struct CharacterSocketCollisionDesc>                  SocketCollisionDesc;                               // 0xc0(0x10)
	float                                                        SocketOffsetTolerance;                             // 0xd0(0x4)
	float                                                        CapsuleOffsetTolerance;                            // 0xd4(0x4)
	char                                                         pad0xc0_YRHGJ[0xc0];                               // 0xd8(0xc0)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WaterBarrelLeverDeactivatedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class AppearComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HOOMS[0x8];                                 // 0xb8(0x8)
	bool                                                         AppearOnStart;                                     // 0xc0(0x1)
	bool                                                         UseReversibleCurveTime;                            // 0xc1(0x1)
	char                                                         pad0x6_9LTGT[0x6];                                 // 0xc2(0x6)
	TArray<struct AppearMaterialParams>                          MaterialParams;                                    // 0xc8(0x10)
	bool                                                         IsVisible;                                         // 0x108(0x1)
	char                                                         pad0x7_Z4MPZ[0x7];                                 // 0x109(0x7)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x110(0x10)
	char                                                         pad0x28_X4DUI[0x28];                               // 0x120(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCustomizationLoadoutViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedRelativeSpawnInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0xc0] - InheritedSize[0x60]
class BTTask_WaitWeighted: public BTTaskNode
{
public:
	struct AIDataProviderStructValue                             WeightedRangesFromParams;                          // 0x60(0x30)
	struct WeightedProbabilityRangeOfRanges                      WeightedRanges;                                    // 0x90(0x30)
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class SessionManagementServiceSettingsDataAsset: public DataAsset
{
public:
	float                                                        GracePeriodTime;                                   // 0x28(0x4)
	char                                                         pad0x4_5P0IR[0x4];                                 // 0x2c(0x4)
	struct SessionManagementNotificationEntry                    SessionOwnerLeftNotificationEntry;                 // 0x30(0x40)
	struct SessionManagementNotificationEntry                    SessionOwnerReturnedNotificationEntry;             // 0x70(0x40)
	struct SessionManagementNotificationEntry                    NewSessionOwnerNotificationEntry;                  // 0xb0(0x40)
	class PopUpMessageDesc*                                      SessionOwnerLeftToastPopup;                        // 0xf0(0x8)
	class PopUpMessageDesc*                                      SessionOwnerReturnedToastPopup;                    // 0xf8(0x8)
	class PopUpMessageDesc*                                      SessionOwnerReturnedAffectedPlayerToastPopup;      // 0x100(0x8)
	class PopUpMessageDesc*                                      NewSessionOwnerToastPopup;                         // 0x108(0x8)
	class PopUpMessageDesc*                                      NewSessionOwnerAffectedPlayerToastPopup;           // 0x110(0x8)
	class PopUpMessageDesc*                                      PromotionToastPopup;                               // 0x118(0x8)
	class PopUpMessageDesc*                                      PromotionAffectedPlayerToastPopup;                 // 0x120(0x8)
	class PopUpMessageDesc*                                      DemotionAffectedPlayerToastPopup;                  // 0x128(0x8)
	TArray<struct SessionManagementGracePeriodNotificationEntry> GracePeriodNotificationEntries;                    // 0x130(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationJumpingBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LeaveGhostShipActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandNameProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class AshCloudAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x20 (Full Size[0x2a8] - InheritedSize[0x288]
class UniversalDescriptorInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x20_VUVJM[0x20];                               // 0x288(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnHitByLightningInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterMovementBaseNotificationInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CargoRunMapData: public DataAsset
{
public:
	TArray<class Class*>                                         Companies;                                         // 0x28(0x10)
	class CargoRunMapLayout*                                     Layout;                                            // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableStashPointInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x100] - InheritedSize[0x78]
class SummonAIAbility: public AthenaAIAbility
{
public:
	class AIIncrementalWaveSpawner*                              SummonSpawner;                                     // 0x78(0x8)
	char                                                         pad0x80_2ZPTS[0x80];                               // 0x80(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TutorialFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x858 (Full Size[0xd60] - InheritedSize[0x508]
class AthenaGameState: public ServiceProviderGameState
{
public:
	char                                                         pad0x78_D6TEZ[0x78];                               // 0x508(0x78)
	class WindService*                                           WindService;                                       // 0x580(0x8)
	class PlayerManagerService*                                  PlayerManagerService;                              // 0x588(0x8)
	class ShipService*                                           ShipService;                                       // 0x590(0x8)
	class WatercraftService*                                     WatercraftService;                                 // 0x598(0x8)
	class TimeService*                                           TimeService;                                       // 0x5a0(0x8)
	class HealthCustomizationService*                            HealthService;                                     // 0x5a8(0x8)
	class CustomWeatherService*                                  CustomWeatherService;                              // 0x5b0(0x8)
	class CustomStatusesService*                                 CustomStatusesService;                             // 0x5b8(0x8)
	class FFTWaterService*                                       WaterService;                                      // 0x5c0(0x8)
	class StormService*                                          StormService;                                      // 0x5c8(0x8)
	class CrewService*                                           CrewService;                                       // 0x5d0(0x8)
	class CaptainedSessionService*                               CaptainedSessionService;                           // 0x5d8(0x8)
	class ContestZoneService*                                    ContestZoneService;                                // 0x5e0(0x8)
	class IslandService*                                         IslandService;                                     // 0x5e8(0x8)
	class NPCService*                                            NPCService;                                        // 0x5f0(0x8)
	class SkellyFortService*                                     SkellyFortService;                                 // 0x5f8(0x8)
	class DeepSeaRegionService*                                  DeepSeaRegionService;                              // 0x600(0x8)
	class AIActionSpotService*                                   AIActionSpotService;                               // 0x608(0x8)
	class AIDioramaService*                                      AIDioramaService;                                  // 0x610(0x8)
	class AshenLordEncounterService*                             AshenLordEncounterService;                         // 0x618(0x8)
	class AggressiveGhostShipsEncounterService*                  AggressiveGhostShipsEncounterService;              // 0x620(0x8)
	class TallTaleService*                                       TallTaleService;                                   // 0x628(0x8)
	class AIShipObstacleService*                                 AIShipObstacleService;                             // 0x630(0x8)
	class AIShipService*                                         AIShipService;                                     // 0x638(0x8)
	class AITargetService*                                       AITargetService;                                   // 0x640(0x8)
	class ShipLiveryCatalogueService*                            ShipLiveryCatalogueService;                        // 0x648(0x8)
	class DrawDebugService*                                      DrawDebugService;                                  // 0x650(0x8)
	class WorldEventZoneService*                                 WorldEventZoneService;                             // 0x658(0x8)
	class WorldResourceRegistry*                                 WorldResourceRegistry;                             // 0x660(0x8)
	class KrakenService*                                         KrakenService;                                     // 0x668(0x8)
	class PlayerNameService*                                     PlayerNameService;                                 // 0x670(0x8)
	class TinySharkService*                                      TinySharkService;                                  // 0x678(0x8)
	class ReapersTributeShipEventService*                        ReapersTributeShipEventService;                    // 0x680(0x8)
	class NavalBattleService*                                    NavalBattleService;                                // 0x688(0x8)
	class SkeletonCampService*                                   SkeletonCampService;                               // 0x690(0x8)
	class DartProxyService*                                      DartProxyService;                                  // 0x698(0x8)
	class ParticleSystemService*                                 ParticleSystemService;                             // 0x6a0(0x8)
	class ProjectileService*                                     ProjectileService;                                 // 0x6a8(0x8)
	class ProjectileHitRegService*                               ProjectileHitRegService;                           // 0x6b0(0x8)
	class LaunchableProjectileService*                           LaunchableProjectileService;                       // 0x6b8(0x8)
	class ServerNotificationsService*                            ServerNotificationsService;                        // 0x6c0(0x8)
	class AIManagerService*                                      AIManagerService;                                  // 0x6c8(0x8)
	class AIEncounterService*                                    AIEncounterService;                                // 0x6d0(0x8)
	class AIEncounterGenerationService*                          AIEncounterGenerationService;                      // 0x6d8(0x8)
	class EncounterService*                                      EncounterService;                                  // 0x6e0(0x8)
	class GameEventSchedulerService*                             GameEventSchedulerService;                         // 0x6e8(0x8)
	class GameEventsOnDemandAvailabilityService*                 GameEventsOnDemandAvailabilityService;             // 0x6f0(0x8)
	class GameEventsOnDemandLoserTunnelService*                  GameEventsOnDemandLoserTunnelService;              // 0x6f8(0x8)
	class HideoutService*                                        HideoutService;                                    // 0x700(0x8)
	class AthenaStreamedLevelService*                            StreamedLevelService;                              // 0x708(0x8)
	class LocationProviderService*                               LocationProviderService;                           // 0x710(0x8)
	class HoleService*                                           HoleService;                                       // 0x718(0x8)
	class PlayerBuriedItemService*                               PlayerBuriedItemService;                           // 0x720(0x8)
	class LoadoutService*                                        LoadoutService;                                    // 0x728(0x8)
	class OcclusionService*                                      OcclusionService;                                  // 0x730(0x8)
	class PetsService*                                           PetsService;                                       // 0x738(0x8)
	class AthenaAITeamsService*                                  AthenaAITeamsService;                              // 0x740(0x8)
	class AllianceService*                                       AllianceService;                                   // 0x748(0x8)
	class MaterialAccessibilityService*                          MaterialAccessibilityService;                      // 0x750(0x8)
	class NPCLoadedOnClientService*                              NPCLoadedOnClientService;                          // 0x758(0x8)
	class ReapersMarkService*                                    ReapersMarkService;                                // 0x760(0x8)
	class EmissaryLevelService*                                  EmissaryLevelService;                              // 0x768(0x8)
	class FactionService*                                        FactionService;                                    // 0x770(0x8)
	class CampaignService*                                       CampaignService;                                   // 0x778(0x8)
	class StoryService*                                          StoryService;                                      // 0x780(0x8)
	class StorySpawnedActorsService*                             StorySpawnedActorsService;                         // 0x788(0x8)
	class StoryClaimedResourcesService*                          StoryClaimedResourcesService;                      // 0x790(0x8)
	class GlobalVoyageDirectorService*                           GlobalVoyageDirector;                              // 0x798(0x8)
	class UtilityVoyageService*                                  UtilityVoyageService;                              // 0x7a0(0x8)
	class FlamesOfFateSettingsService*                           FlamesOfFateSettingsService;                       // 0x7a8(0x8)
	class ServiceStatusNotificationsService*                     ServiceStatusNotificationsService;                 // 0x7b0(0x8)
	class MigrationService*                                      MigrationService;                                  // 0x7b8(0x8)
	class ShipStockService*                                      ShipStockService;                                  // 0x7c0(0x8)
	class ShroudBreakerService*                                  ShroudBreakerService;                              // 0x7c8(0x8)
	class ServerUpdateReportingService*                          ServerUpdateReportingService;                      // 0x7d0(0x8)
	class GenericMarkerService*                                  GenericMarkerService;                              // 0x7d8(0x8)
	class MechanismsService*                                     MechanismsService;                                 // 0x7e0(0x8)
	class MerchantContractsService*                              MerchantContractsService;                          // 0x7e8(0x8)
	class ShipFactory*                                           ShipFactory;                                       // 0x7f0(0x8)
	class RewindPhysicsService*                                  RewindPhysicsService;                              // 0x7f8(0x8)
	class NotificationMessagesDataAsset*                         NotificationMessagesDataAsset;                     // 0x800(0x8)
	class ProjectileCooldownService*                             ProjectileCooldownService;                         // 0x808(0x8)
	class IslandReservationService*                              IslandReservationService;                          // 0x810(0x8)
	class PortalService*                                         PortalService;                                     // 0x818(0x8)
	class MeshMemoryConstraintService*                           MeshMemoryConstraintService;                       // 0x820(0x8)
	class MeshMemoryConstraintFallbackRetrievalService*          MeshMemoryConstraintFallbackRetrievalService;      // 0x828(0x8)
	class SandboxPerformanceConstraintService*                   SandboxPerformanceConstraintService;               // 0x830(0x8)
	class BootyStorageService*                                   BootyStorageService;                               // 0x838(0x8)
	class LoadoutCostService*                                    LoadoutCostService;                                // 0x840(0x8)
	class SpireService*                                          SpireService;                                      // 0x848(0x8)
	class FireworkService*                                       FireworkService;                                   // 0x850(0x8)
	class InvasionService*                                       InvasionService;                                   // 0x858(0x8)
	class AirGivingService*                                      AirGivingService;                                  // 0x860(0x8)
	class CutsceneService*                                       CutsceneService;                                   // 0x868(0x8)
	class CargoRunService*                                       CargoRunService;                                   // 0x870(0x8)
	class CommodityDemandService*                                CommodityDemandService;                            // 0x878(0x8)
	class DebugTeleportationDestinationService*                  DebugTeleportationDestinationService;              // 0x880(0x8)
	class SeasonProgressionUIService*                            SeasonProgressionUIService;                        // 0x888(0x8)
	class TransientActorService*                                 TransientActorService;                             // 0x890(0x8)
	class TunnelsOfTheDamnedService*                             TunnelsOfTheDamnedService;                         // 0x898(0x8)
	class WorldSequenceService*                                  WorldSequenceService;                              // 0x8a0(0x8)
	class ItemLifetimeManagerService*                            ItemLifetimeManagerService;                        // 0x8a8(0x8)
	class ShipStorageJettisonService*                            ShipStorageJettisonService;                        // 0x8b0(0x8)
	class SeaFortsService*                                       SeaFortsService;                                   // 0x8b8(0x8)
	class SwitchesService*                                       SwitchesService;                                   // 0x8c0(0x8)
	class InGameCommandsService*                                 InGameCommandsService;                             // 0x8c8(0x8)
	class BuzzService*                                           BuzzService;                                       // 0x8d0(0x8)
	class CustomScoreService*                                    CustomScoreService;                                // 0x8d8(0x8)
	class CustomServerLocalisationService*                       CustomServerLocalisationService;                   // 0x8e0(0x8)
	class BeckonService*                                         BeckonService;                                     // 0x8e8(0x8)
	class VolcanoService*                                        VolcanoService;                                    // 0x8f0(0x8)
	class ShipAnnouncementService*                               ShipAnnouncementService;                           // 0x8f8(0x8)
	class ShipsLogService*                                       ShipsLogService;                                   // 0x900(0x8)
	class AsyncLoadingMonitoringService*                         AsyncLoadingMonitoringService;                     // 0x908(0x8)
	class ActorOfInterestService*                                ActorOfInterestService;                            // 0x910(0x8)
	class EnemyAIOnShipService*                                  EnemyAIOnShipService;                              // 0x918(0x8)
	class UserSettingsService*                                   UserSettingsService;                               // 0x920(0x8)
	class GuildService*                                          GuildService;                                      // 0x928(0x8)
	class GuildChroniclesService*                                GuildChroniclesService;                            // 0x930(0x8)
	class BoarsAndBoarWallowRandomiserService*                   BoarsAndBoarWallowRandomiserService;               // 0x938(0x8)
	class BoarWallowService*                                     BoarWallowService;                                 // 0x940(0x8)
	class SmugglersRunService*                                   SmugglersRunService;                               // 0x948(0x8)
	class HammerheadService*                                     HammerheadService;                                 // 0x950(0x8)
	class PlayerLootMarkerService*                               PlayerLootMarkerService;                           // 0x958(0x8)
	class BoneCallerService*                                     BoneCallerService;                                 // 0x960(0x8)
	class ReapersChestAISpawnerService*                          ReapersChestAISpawnerService;                      // 0x968(0x8)
	class FaunaSpawnaService*                                    FaunaSpawnaService;                                // 0x970(0x8)
	class InventoryPersistenceService*                           InventoryPersistenceService;                       // 0x978(0x8)
	class AdventureOnDemandService*                              AdventureOnDemandService;                          // 0x980(0x8)
	class ScrambledNamesService*                                 ScrambledNamesService;                             // 0x988(0x8)
	class ExperienceService*                                     ExperienceService;                                 // 0x990(0x8)
	class QuestTableService*                                     QuestTableService;                                 // 0x998(0x8)
	class CompetitiveVoyagesService*                             CompetitiveVoyagesService;                         // 0x9a0(0x8)
	class SaferSeasDataAssetProviderService*                     SaferSeasDataAssetProviderService;                 // 0x9a8(0x8)
	class PlayerStreamedLevelService*                            PlayerStreamedLevelService;                        // 0x9b0(0x8)
	class AncientTinySharkEventService*                          AncientTinySharkEventService;                      // 0x9b8(0x8)
	class TrackedEncountersEventService*                         TrackedEncountersEventService;                     // 0x9c0(0x8)
	class ExplosivesService*                                     ExplosivesService;                                 // 0x9c8(0x8)
	class TinyKrakenEventService*                                TinyKrakenEventService;                            // 0x9d0(0x8)
	class SessionManagementService*                              SessionManagementService;                          // 0x9d8(0x8)
	class MercenaryService*                                      MercenaryService;                                  // 0x9e0(0x8)
	char                                                         pad0x1c0_NFRZL[0x1c0];                             // 0x9e8(0x1c0)
	struct GameServiceCoordinator                                ServiceCoordinator;                                // 0xba8(0x20)
	char                                                         pad0x28_BZCSA[0x28];                               // 0xbc8(0x28)
	TArray<class Interface*>                                     ChatComponents;                                    // 0xbf0(0x10)
	char                                                         pad0x98_YOOGC[0x98];                               // 0xc00(0x98)
	bool                                                         IsXboxGamePadOnlyServer;                           // 0xc98(0x1)
	struct OnRepIsSoloSeas                                       IsSoloSeasServer;                                  // 0xc99(0x2)
	bool                                                         IsCrossplayEnabledOnServer;                        // 0xc9b(0x1)
	bool                                                         ShouldDisableAsyncOcclusionCheck;                  // 0xc9c(0x1)
	char                                                         pad0x3_KACDB[0x3];                                 // 0xc9d(0x3)
	struct FString                                               SubPlayMode;                                       // 0xca0(0x10)
	struct FString                                               ServerLocation;                                    // 0xcb0(0x10)
	class CustomVaultService*                                    CustomVaultService;                                // 0xcc0(0x8)
	class EntityEnumerationService*                              EntityEnumerationService;                          // 0xcc8(0x8)
	class LevelAssetCachingService*                              LevelAssetCachingService;                          // 0xcd0(0x8)
	class CrewSkillRatingService*                                CrewSkillRatingService;                            // 0xcd8(0x8)
	char                                                         pad0x80_CT467[0x80];                               // 0xce0(0x80)
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class WorldResourceRegistry: public Object
{
public:
	char                                                         pad0x108_X28EV[0x108];                             // 0x28(0x108)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class TeleportAIAbilityParams: public AthenaAIAbilityParams
{
public:
	class EnvQuery*                                              QueryTemplate;                                     // 0xc8(0x8)
	float                                                        MinDistance;                                       // 0xd0(0x4)
	float                                                        MaxDistance;                                       // 0xd4(0x4)
	bool                                                         MaintainRotation;                                  // 0xd8(0x1)
	bool                                                         UseResurfaceDelay;                                 // 0xd9(0x1)
	char                                                         pad0x6_0KWQH[0x6];                                 // 0xda(0x6)
	struct AthenaAIAbilityPlayerBasedRanges                      ResurfaceDelay;                                    // 0xe0(0x10)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class ControllableMock: public Object
{
public:
	char                                                         pad0x10_8LC5H[0x10];                               // 0x28(0x10)
	class Actor*                                                 ActorThatRequestedStateChange;                     // 0x38(0x8)
	struct FText                                                 ObjectDisplayName;                                 // 0x40(0x38)
	struct ControlObjectActionRuleParams                         ControlObjectActionRuleParams;                     // 0x78(0x10)
	char                                                         Role;                                              // 0x88(0x1)
	bool                                                         HasAController;                                    // 0x89(0x1)
	bool                                                         CanBeControlledByActorValue;                       // 0x8a(0x1)
	char                                                         pad0x5_AMB8R[0x5];                                 // 0x8b(0x5)
};


// Size 0x88 (Full Size[0x108] - InheritedSize[0x80]
class TaleQuestImportStepDesc: public TaleQuestStepDesc
{
public:
	class TaleQuestDescAsset*                                    Asset;                                             // 0x80(0x8)
	struct QuestVarTaleQuest                                     QuestInput;                                        // 0x88(0x30)
	char                                                         pad0x50_0ZN45[0x50];                               // 0xb8(0x50)
};


// Size 0x0 (Full Size[0x290] - InheritedSize[0x290]
class LookingAtWieldableBookInputComponent: public LookingAtWieldableInputComponent
{
public:
};


// Size 0xf8 (Full Size[0x498] - InheritedSize[0x3a0]
class HuntingSpearAltProjectile: public Actor
{
public:
	class ImpactProxySpawnerComponent*                           ImpactProxySpawnerComponent;                       // 0x3a0(0x8)
	char                                                         pad0xf0_V5Z5N[0xf0];                               // 0x3a8(0xf0)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PirateLegendSection: public DataAsset
{
public:
	char                                                         SectionType;                                       // 0x28(0x1)
	char                                                         pad0x7_5A5JS[0x7];                                 // 0x29(0x7)
	class TaleQuestDescAsset*                                    QuestDescription;                                  // 0x30(0x8)
};


// Size 0x180 (Full Size[0x238] - InheritedSize[0xb8]
class PlayerWalletComponent: public ActorComponent
{
public:
	char                                                         pad0x8_0HMNL[0x8];                                 // 0xb8(0x8)
	struct WalletBalance                                         LastKnownBalance;                                  // 0xc0(0x10)
	char                                                         pad0x168_Q57AF[0x168];                             // 0xd0(0x168)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LadderInterface: public Interface
{
public:
};


// Size 0x230 (Full Size[0x2e8] - InheritedSize[0xb8]
class PlayerStatsComponent: public ActorComponent
{
public:
	char                                                         pad0x230_DU8GU[0x230];                             // 0xb8(0x230)
};


// Size 0x208 (Full Size[0x2c0] - InheritedSize[0xb8]
class MeleeAttackProcessorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CO7EH[0x8];                                 // 0xb8(0x8)
	int                                                          MaxPlayerHitResponsesBroadcastPerAttack;           // 0xc0(0x4)
	int                                                          MaxNonPlayerPawnHitResponsesBroadcastPerAttack;    // 0xc4(0x4)
	int                                                          MaxOtherHitResponsesBroadcastPerAttack;            // 0xc8(0x4)
	float                                                        RewindInstigatorEstimationMaxSearchTime;           // 0xcc(0x4)
	float                                                        RewindInstigatorEstimationStepSize;                // 0xd0(0x4)
	char                                                         pad0x7c_U2OJB[0x7c];                               // 0xd4(0x7c)
	struct MeleeAttackHitResponses                               PredictiveHitResponses;                            // 0x150(0x1)
	struct MeleeAttackHitResponses                               ValidatedHitResponses;                             // 0x151(0x1)
	struct MeleeAttackHitResponses                               AuthoritativeHitResponses;                         // 0x152(0x1)
	struct MeleeAttackHitResponses                               ServerHitResponses;                                // 0x153(0x1)
	float                                                        ClientHitRangeReduction;                           // 0x154(0x4)
	bool                                                         ApplyStatusEffectsToAllies;                        // 0x158(0x1)
	char                                                         pad0x167_OYMQJ[0x167];                             // 0x159(0x167)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemProxyShipTrackerInterface: public Interface
{
public:
};


// Size 0x680 (Full Size[0xb18] - InheritedSize[0x498]
class AthenaGameMode: public GameMode
{
public:
	char                                                         pad0x38_LKM6O[0x38];                               // 0x498(0x38)
	class UClass*                                                GhostShipPawnClass;                                // 0x4d0(0x8)
	class UClass*                                                ServerNetworkedEventsWhitelistDefinition;          // 0x4d8(0x8)
	char                                                         pad0x190_5VEWV[0x190];                             // 0x4e0(0x190)
	struct GhostShipCoordinator                                  GhostShipCoordinator;                              // 0x670(0x370)
	struct StorageContainerRefresher                             StorageContainerRefresher;                         // 0x9e0(0x110)
	class RiddleQuestDescGeneratorData*                          RiddleQuestDescGeneratorData;                      // 0xaf0(0x8)
	float                                                        RespawnTimer;                                      // 0xaf8(0x4)
	float                                                        ContestRespawnTimer;                               // 0xafc(0x4)
	struct CrewBasedRespawnTimes                                 CrewBasedRespawnTimes;                             // 0xb00(0x10)
	float                                                        StorageContainerRefreshInterval;                   // 0xb10(0x4)
	int                                                          ContainerRefreshBatchSize;                         // 0xb14(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x188 (Full Size[0x1b0] - InheritedSize[0x28]
class VoyageRecipeDataAsset: public DataAsset
{
public:
	struct VoyageRecipe                                          Recipe;                                            // 0x28(0x180)
	bool                                                         IsVoyageLocationBound;                             // 0x1a8(0x1)
	char                                                         pad0x7_1LJK0[0x7];                                 // 0x1a9(0x7)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class MountableSpotlightAudioParamsDataAsset: public DataAsset
{
public:
	struct Vector                                                AudioEmitterOffset;                                // 0x28(0xc)
	struct FName                                                 MoveYawRateRTPCName;                               // 0x34(0x8)
	struct FName                                                 MovePitchRateRTPCName;                             // 0x3c(0x8)
	char                                                         pad0x4_PXVFB[0x4];                                 // 0x44(0x4)
	class WwiseEvent*                                            StartMovePitchAudioLoopEvent;                      // 0x48(0x8)
	class WwiseEvent*                                            StopMovePitchAudioLoopEvent;                       // 0x50(0x8)
	class WwiseEvent*                                            StartMoveYawAudioLoopEvent;                        // 0x58(0x8)
	class WwiseEvent*                                            StopMoveYawAudioLoopEvent;                         // 0x60(0x8)
	class WwiseEvent*                                            FocusBeamAudioEvent;                               // 0x68(0x8)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x70(0x8)
};


// Size 0x28 (Full Size[0xb0] - InheritedSize[0x88]
class BTTask_UpdateReapersTributeIslandTarget: public BTTask_BlackboardBase
{
public:
	struct BlackboardKeySelector                                 IslandTargetKey;                                   // 0x88(0x28)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InIslandShipDiveAndResurfaceExclusionZoneRadius: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_9YJOL[0x4];                                 // 0x174(0x4)
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class FogBankManager: public Actor
{
public:
	TArray<struct FeatureToggledFogBankManagerAsset>             FeatureToggledManagerAssetsArray;                  // 0x3a0(0x10)
	class FogBankManagerDataAsset*                               DefaultFogBankManagerDataAsset;                    // 0x3b0(0x8)
	class FogBankManagerDataAsset*                               ActiveFogBankManagerDataAsset;                     // 0x3b8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanvasLODControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismMaterialGroup: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAIItemParamsDataAsset: public DataAsset
{
public:
	TArray<struct AthenaAIItemEngageEnemyMethods>                ItemEngageEnemyMethods;                            // 0x28(0x10)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class InstigatorTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x10_6KG4L[0x10];                               // 0xb8(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatusResponsePlayAudioLoopOnLocalClient: public StatusResponse
{
public:
	class WwiseEvent*                                            StartLoopEvent;                                    // 0x38(0x8)
	class WwiseEvent*                                            StopLoopEvent;                                     // 0x40(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpawnAIOnShipStatus: public StatusBase
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ShipwreckTrackerService: public Object
{
public:
	char                                                         pad0x20_7Z9M2[0x20];                               // 0x28(0x20)
};


// Size 0x98 (Full Size[0x110] - InheritedSize[0x78]
class WorldEndAIAbility: public AthenaAIAbility
{
public:
	class Pawn*                                                  Owner;                                             // 0x78(0x8)
	class WorldEndAIAbilityParams*                               SetupAbilityParams;                                // 0x80(0x8)
	class AshenLordVolcano*                                      VolcanicEmitter;                                   // 0x88(0x8)
	class GeyserManager*                                         GeyserManager;                                     // 0x90(0x8)
	struct AshenLordFireShroud                                   FireShroud;                                        // 0x98(0x20)
	class SuperheatedWater*                                      OwnedSuperHeatedWater;                             // 0xb8(0x8)
	class UClass*                                                LoadedCloudAsset;                                  // 0xc0(0x8)
	char                                                         pad0x48_I6V3E[0x48];                               // 0xc8(0x48)
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class ShopDialogue: public DataAsset
{
public:
	struct FText                                                 ConfirmPurchaseMessage;                            // 0x28(0x38)
	struct FText                                                 PurchaseFailedMessage;                             // 0x60(0x38)
	struct FText                                                 PurchasePendingMessage;                            // 0x98(0x38)
	struct FText                                                 PurchaseSuccessMessage;                            // 0xd0(0x38)
	struct FText                                                 GetShopOffersFailedMessage;                        // 0x108(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AbsorbsLiquidInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonPitchRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ResourceCache: public Object
{
public:
	TArray<struct ResourceCacheEntry>                            Cache;                                             // 0x28(0x10)
	char                                                         pad0x8_L1GS9[0x8];                                 // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IngestedByKrakenActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryItemUsePressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class PLQuestLocationDataAsset: public DataAsset
{
public:
	char                                                         pad0x40_NFFFW[0x40];                               // 0x28(0x40)
	struct FName                                                 PageAuthorName;                                    // 0x68(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConstellationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TutorialTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class ZoomMapLayout: public DataAsset
{
public:
	struct TreasureMapWidgetText                                 MapTitle;                                          // 0x28(0x3c)
	char                                                         pad0x4_HN58K[0x4];                                 // 0x64(0x4)
	TArray<struct TreasureMapWidgetText>                         Descriptions;                                      // 0x68(0x10)
	struct Vector2D                                              Position;                                          // 0x78(0x8)
	float                                                        Width;                                             // 0x80(0x4)
	char                                                         pad0x4_E0IZX[0x4];                                 // 0x84(0x4)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class NPCLoadedOnClientService: public Object
{
public:
	char                                                         pad0x8_ZZWBR[0x8];                                 // 0x28(0x8)
	TArray<struct NPCData>                                       AllNPCData;                                        // 0x30(0x10)
	char                                                         pad0x18_4ABGF[0x18];                               // 0x40(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GeneratedLocationsDataAsset: public DataAsset
{
public:
	TArray<struct Vector>                                        Locations;                                         // 0x28(0x10)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class ImpulseThrottlerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_FLU85[0x8];                                 // 0xb8(0x8)
	float                                                        MinimumTimeBetweenImpulses;                        // 0xc0(0x4)
	float                                                        ImpulseMultiplier;                                 // 0xc4(0x4)
	char                                                         pad0x10_Y3YMW[0x10];                               // 0xc8(0x10)
};


// Size 0x100 (Full Size[0x1b8] - InheritedSize[0xb8]
class TreasureMapCollectionComponent: public ActorComponent
{
public:
	char                                                         pad0x88_67YKQ[0x88];                               // 0xb8(0x88)
	class UClass*                                                XMarksTheSpotMapType;                              // 0x140(0x8)
	class UClass*                                                ZoomMapType;                                       // 0x148(0x8)
	class UClass*                                                RiddleMapType;                                     // 0x150(0x8)
	class UClass*                                                BountyMapType;                                     // 0x158(0x8)
	class UClass*                                                MerchantMapType;                                   // 0x160(0x8)
	class UClass*                                                CargoRunMapType;                                   // 0x168(0x8)
	class UClass*                                                ContestMapType;                                    // 0x170(0x8)
	class UClass*                                                TornMapType;                                       // 0x178(0x8)
	class UClass*                                                LocationMapType;                                   // 0x180(0x8)
	TArray<class TreasureMap*>                                   TreasureMaps;                                      // 0x188(0x10)
	TArray<struct Name>                                          TreasureMapDestinationIslands;                     // 0x198(0x10)
	char                                                         pad0x10_966UR[0x10];                               // 0x1a8(0x10)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class PuzzleVaultAudioParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                PuzzleVaultPool;                                   // 0x28(0x8)
	class WwiseObjectPoolWrapper*                                PuzzleVaultWaterFillPool;                          // 0x30(0x8)
	class WwiseEvent*                                            PuzzleVaultDoorOpening;                            // 0x38(0x8)
	class WwiseEvent*                                            PuzzleVaultDoorClosing;                            // 0x40(0x8)
	class WwiseEvent*                                            PuzzleVaultTriggered;                              // 0x48(0x8)
	class WwiseEvent*                                            PuzzleVaultComplete;                               // 0x50(0x8)
	class WwiseEvent*                                            PuzzleVaultCorrectSolution;                        // 0x58(0x8)
	class WwiseEvent*                                            PuzzleVaultIncorrectSolution;                      // 0x60(0x8)
	class WwiseEvent*                                            PuzzleVaultIncorrectSolutionDelayStart;            // 0x68(0x8)
	class WwiseEvent*                                            PuzzleVaultIncorrectSolutionDelayEnd;              // 0x70(0x8)
	class WwiseEvent*                                            PuzzleVaultTurnBlock;                              // 0x78(0x8)
	class WwiseEvent*                                            WaterLeakStart;                                    // 0x80(0x8)
	class WwiseEvent*                                            WaterLeakStop;                                     // 0x88(0x8)
	class WwiseEvent*                                            WaterLeakEndClunk;                                 // 0x90(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipAssetClassDatabaseInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SeatStat: public Object
{
public:
	struct PlayerStat                                            Stat;                                              // 0x28(0x4)
	char                                                         pad0x1c_HKJXP[0x1c];                               // 0x2c(0x1c)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class EelSlapNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class WaterModifierZoneService: public Object
{
public:
	char                                                         pad0x8_ZBYV6[0x8];                                 // 0x28(0x8)
	TArray<class Interface*>                                     RegisteredWaterModifierZones;                      // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageProposalContainerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PuzzleManagerPolicyTriggerInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class AimAssistComponent: public ActorComponent
{
public:
	class AimAssistDataAsset*                                    AimAssistDataAsset;                                // 0xb8(0x8)
	char                                                         pad0x8_GL7TK[0x8];                                 // 0xc0(0x8)
	class AimAssistCameraModifier*                               AimAssistCameraModifier;                           // 0xc8(0x8)
	class AimAssistDebugComponent*                               AimAssistDebugComponent;                           // 0xd0(0x8)
	class CameraComponent*                                       Camera;                                            // 0xd8(0x8)
	char                                                         pad0x58_D49B9[0x58];                               // 0xe0(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindComponentInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class PlayNpcAnimationResourceStep: public TaleQuestStep
{
public:
	class PlayNpcAnimationResourceStepDesc*                      StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x10_XKKPG[0x10];                               // 0xa0(0x10)
	class NPCDialogComponent*                                    NPCDialogComponent;                                // 0xb0(0x8)
	class CutSceneActor*                                         CutSceneActor;                                     // 0xb8(0x8)
	char                                                         pad0x10_BO6XM[0x10];                               // 0xc0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProtoPlayTavernPianoActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x300] - InheritedSize[0x300]
class AICharacterAudioComponent: public WwiseEmitterComponent
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class DetachItemsWhenDestroyedComponent: public ActorComponent
{
public:
	char                                                         pad0x8_8YN8C[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetLoadoutViewInterface: public Interface
{
public:
};


// Size 0x1b0 (Full Size[0x268] - InheritedSize[0xb8]
class WeepingComponent: public ActorComponent
{
public:
	float                                                        FillRate;                                          // 0xb8(0x4)
	float                                                        MinWeepDuration;                                   // 0xbc(0x4)
	float                                                        MaxWeepDuration;                                   // 0xc0(0x4)
	float                                                        MinCalmDuration;                                   // 0xc4(0x4)
	float                                                        MaxCalmDuration;                                   // 0xc8(0x4)
	float                                                        MaterialBlendInTime;                               // 0xcc(0x4)
	float                                                        MaterialBlendOutTime;                              // 0xd0(0x4)
	float                                                        DecalBlendInTime;                                  // 0xd4(0x4)
	float                                                        DecalBlendOutTime;                                 // 0xd8(0x4)
	float                                                        SFXEmitterHeightOffset;                            // 0xdc(0x4)
	class WwiseEvent*                                            StartWeepingSFX;                                   // 0xe0(0x8)
	class WwiseEvent*                                            StopWeepingSFX;                                    // 0xe8(0x8)
	char                                                         pad0x38_VI734[0x38];                               // 0xf0(0x38)
	class WwiseObjectPoolWrapper*                                WeepingSFXPool;                                    // 0x128(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x130(0x10)
	class MaterialInstanceDynamic*                               DecalMaterial;                                     // 0x140(0x8)
	char                                                         State;                                             // 0x148(0x1)
	char                                                         pad0x37_9BKBE[0x37];                               // 0x149(0x37)
	struct FName                                                 SupressableEmitterTag;                             // 0x180(0x8)
	TArray<class ParticleSystemComponent*>                       ParticleEmitters;                                  // 0x188(0x10)
	char                                                         pad0xd0_XUA5W[0xd0];                               // 0x198(0xd0)
};


// Size 0xa0 (Full Size[0x158] - InheritedSize[0xb8]
class UIResponceComponent: public ActorComponent
{
public:
	class AthenaPlayerController*                                OwningPlayerController;                            // 0xb8(0x8)
	char                                                         pad0x98_XY6H0[0x98];                               // 0xc0(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerActivityFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class AssignItemStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableClass                                    TypeVar;                                           // 0x80(0x30)
	class UClass*                                                TypeValue;                                         // 0xb0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyShopkeeperCinematicCameraInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class StatProgressStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_NNIBM[0x8];                                 // 0x98(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AthenaAssetSettings: public Object
{
public:
	TArray<struct AssetDelayLoadEntry>                           DelayLoadedAssets;                                 // 0x28(0x10)
	TArray<struct AssetDelayLoadEntry>                           SteamOnlyDelayLoadedAssets;                        // 0x38(0x10)
	TArray<String>                                               PhysicsAuditBlueprintExceptions;                   // 0x48(0x10)
	TArray<struct Name>                                          PhysicsAuditExemptedCollisionProfiles;             // 0x58(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CoherentToWwiseEventDataAsset: public DataAsset
{
public:
	TArray<struct CoherentToWwiseEventDataAssetEntry>            CoherentToWwiseEventEntries;                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailHoistTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xb0] - InheritedSize[0x78]
class KnockbackAIAbility: public AthenaAIAbility
{
public:
	char                                                         pad0x8_5YLPG[0x8];                                 // 0x78(0x8)
	struct ExplosionForceFeedbackInfo                            ForceFeedbackInfo;                                 // 0x80(0x28)
	class ExplosionComponent*                                    PawnExplosion;                                     // 0xa8(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class SeatAnimationId: public Object
{
public:
	struct Vector                                                CharacterOffset;                                   // 0x28(0xc)
	float                                                        ThirdPersonCameraVerticalOffsetFactorWhenZoomed;   // 0x34(0x4)
	char                                                         pad0x8_N1JT2[0x8];                                 // 0x38(0x8)
	struct Transform                                             CharacterProjectileTraceHitVolumeOffset;           // 0x40(0x30)
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class EnvQueryGenerator_IslandTreasureLocations: public EnvQueryGenerator
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class ContestAwardScoreForItemDugUpStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariablePlayerActor                              DiscoveringCharacter;                              // 0x80(0x30)
	struct QuestVariableActor                                    ItemDugUp;                                         // 0xb0(0x30)
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class CharacterAINoiseEventComponent: public ActorComponent
{
public:
	class CharacterMovementAINoiseEventComponentParams*          Params;                                            // 0xb8(0x8)
	class AthenaCharacter*                                       AthenaCharacter;                                   // 0xc0(0x8)
	class AthenaCharacterMovementComponent*                      CharacterMovementComponent;                        // 0xc8(0x8)
	char                                                         pad0x38_V2G8P[0x38];                               // 0xd0(0x38)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SustenanceStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MigrationActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ShockStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogExpression: public Object
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class TestReturnCompleteAfterTimeoutPlayerRelevancyService: public Object
{
public:
	char                                                         pad0x38_O2PMQ[0x38];                               // 0x28(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerListenerInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class IndividualReplicationChannel: public Actor
{
public:
	char                                                         pad0x50_2G4AV[0x50];                               // 0x3a0(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SenseInitialReactionAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForUnlockStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    LockedActor;                                       // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpawnableItemMetadataInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanYMouseInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTitleProviderInterface: public Interface
{
public:
};


// Size 0x450 (Full Size[0x7f0] - InheritedSize[0x3a0]
class WieldableItem: public Actor
{
public:
	char                                                         pad0x68_9LSBT[0x68];                               // 0x3a0(0x68)
	class PrimitiveComponent*                                    FirstPersonMesh;                                   // 0x408(0x8)
	class PrimitiveComponent*                                    ThirdPersonMesh;                                   // 0x410(0x8)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x418(0x8)
	class UClass*                                                AnimationKey;                                      // 0x420(0x8)
	struct ObjectMessagingDispatcher                             MessagingDispatcher;                               // 0x428(0xa0)
	char                                                         pad0x8_50PO3[0x8];                                 // 0x4c8(0x8)
	struct Transform                                             AnimationOffset;                                   // 0x4d0(0x30)
	struct Transform                                             ThirdPersonAnimationOffset;                        // 0x500(0x30)
	bool                                                         UseThirdPersonAnimationOffset;                     // 0x530(0x1)
	char                                                         pad0x7_C1BA8[0x7];                                 // 0x531(0x7)
	class WwiseEvent*                                            EquipSfx;                                          // 0x538(0x8)
	class WwiseEvent*                                            UnequipSfx;                                        // 0x540(0x8)
	class WwiseEvent*                                            WielderLandedJumpSfx;                              // 0x548(0x8)
	class WwiseEvent*                                            WielderFootstepLayerOneshot;                       // 0x550(0x8)
	struct FName                                                 PlayerWalkSpeedRtpc;                               // 0x558(0x8)
	bool                                                         ForceUnequipSfx;                                   // 0x560(0x1)
	bool                                                         PropagateVisibilityToChildren;                     // 0x560(0x1)
	bool                                                         OfferingEnabled;                                   // 0x560(0x1)
	bool                                                         CanSprintWithLargeItem;                            // 0x560(0x1)
	char                                                         pad0x7_5PCXN[0x7];                                 // 0x561(0x7)
	class WwiseEvent*                                            FirstTimeEquipSfx;                                 // 0x568(0x8)
	char                                                         ItemSize;                                          // 0x570(0x1)
	char                                                         pad0x3_BDXNS[0x3];                                 // 0x571(0x3)
	struct FName                                                 AINoiseTag;                                        // 0x574(0x8)
	char                                                         pad0x4_QDIZW[0x4];                                 // 0x57c(0x4)
	struct DetailAppearenceDesc                                  DetailAppearence;                                  // 0x580(0x30)
	TArray<struct Name>                                          ThirdPersonExtraMeshNames;                         // 0x5b0(0x10)
	TArray<struct Name>                                          StashedExtraMeshNames;                             // 0x5c0(0x10)
	class MeshComponent*                                         StashedMeshComponent;                              // 0x5d0(0x8)
	struct FName                                                 StashedMeshAttachSocket;                           // 0x5d8(0x8)
	struct FName                                                 ServerWieldAttachSocket;                           // 0x5e0(0x8)
	class PhrasesRadialDataAsset*                                Phrases;                                           // 0x5e8(0x8)
	class Object*                                                CachedFirstPersonProxyMesh;                        // 0x5f0(0x8)
	class Object*                                                CachedThirdPersonProxyMesh;                        // 0x5f8(0x8)
	char                                                         pad0x160_LFXGY[0x160];                             // 0x600(0x160)
	class UClass*                                                ItemCategory;                                      // 0x760(0x8)
	class ItemInfo*                                              ItemInfo;                                          // 0x768(0x8)
	class InterpolatingItem*                                     InterpolatingItem;                                 // 0x770(0x8)
	char                                                         pad0x18_K4WZO[0x18];                               // 0x778(0x18)
	class WieldableItemVfxComponent*                             WieldableItemVfxComponent;                         // 0x798(0x8)
	TArray<class MeshComponent*>                                 ThirdPersonExtraMeshes;                            // 0x7a0(0x10)
	TArray<class MeshComponent*>                                 StashedExtraMeshes;                                // 0x7b0(0x10)
	char                                                         pad0x18_633XU[0x18];                               // 0x7c0(0x18)
	struct FName                                                 CanSprintWithLargeItemFeatureToggle;               // 0x7d8(0x8)
	struct Guid                                                  QuestId;                                           // 0x7e0(0x10)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AshenLordDesc: public DataAsset
{
public:
	struct FText                                                 LocalisedName;                                     // 0x28(0x38)
	class UClass*                                                ClassId;                                           // 0x60(0x8)
	class SceneDialogueData*                                     DialogueData;                                      // 0x68(0x8)
	struct PlayerStat                                            LordDefeatedStat;                                  // 0x70(0x4)
	char                                                         pad0x4_B3V74[0x4];                                 // 0x74(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToFireworkNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetCurrentQuestInfoStep: public TaleQuestStep
{
public:
	class GetCurrentQuestInfoStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0x108 (Full Size[0x1c0] - InheritedSize[0xb8]
class FrontendScrambledNamesComponent: public ActorComponent
{
public:
	char                                                         pad0xf0_7498Y[0xf0];                               // 0xb8(0xf0)
	class ScrambledNamesDataAsset*                               ScrambledPlayerNamesDataAsset;                     // 0x1a8(0x8)
	class ScrambledNamesDataAsset*                               ScrambledShipNamesDataAsset;                       // 0x1b0(0x8)
	class ScrambledNamesDataAsset*                               ScrambledGuildNamesDataAsset;                      // 0x1b8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandReservationServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class AddMechanismTriggerStep: public TaleQuestStep
{
public:
	class AddMechanismTriggerStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class WieldableItemVfxComponent: public ActorComponent
{
public:
	class ParticleSystemComponent*                               ActiveVfx;                                         // 0xb8(0x8)
	class Object*                                                WieldedVfxTemplate;                                // 0xc0(0x8)
	char                                                         pad0x58_J7QVZ[0x58];                               // 0xc8(0x58)
};


// Size 0x78 (Full Size[0x130] - InheritedSize[0xb8]
class SimpleAmmoComponent: public ActorComponent
{
public:
	char                                                         pad0x8_33CM2[0x8];                                 // 0xb8(0x8)
	int                                                          MaximumAmmoCount;                                  // 0xc0(0x4)
	bool                                                         ShouldShowAmmoUI;                                  // 0xc4(0x1)
	char                                                         AmmoType;                                          // 0xc5(0x1)
	char                                                         pad0x2_09XO1[0x2];                                 // 0xc6(0x2)
	int                                                          AmmoLeft;                                          // 0xc8(0x4)
	char                                                         pad0x64_N45UC[0x64];                               // 0xcc(0x64)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamesOfFateHelpers: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x148] - InheritedSize[0x140]
class PuzzleStatueInteractableComponent: public InteractableComponent
{
public:
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x140(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class UseConcealingObjectNotificationInputId: public NotificationInputId
{
public:
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class ShipStockService: public Object
{
public:
	char                                                         pad0xf0_38JC0[0xf0];                               // 0x28(0xf0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCameraInterface: public Interface
{
public:
};


// Size 0x1a8 (Full Size[0x548] - InheritedSize[0x3a0]
class ShipsLogService: public Actor
{
public:
	char                                                         pad0x20_IB530[0x20];                               // 0x3a0(0x20)
	TArray<struct CaptainsLogServiceEntry>                       Logbooks;                                          // 0x3c0(0x10)
	TArray<struct Guid>                                          PendingRemovalLogbooks;                            // 0x3d0(0x10)
	float                                                        HeartbeatUpdateFrequency;                          // 0x3e0(0x4)
	float                                                        ServiceHeartbeatUpdateFrequency;                   // 0x3e4(0x4)
	int                                                          MaxDryLogBooks;                                    // 0x3e8(0x4)
	char                                                         pad0x1c_I9Y6O[0x1c];                               // 0x3ec(0x1c)
	TArray<class EventLogDefinitionsDataAsset*>                  DefinitionAssets;                                  // 0x408(0x10)
	TArray<struct StringAssetReference>                          DefinitionAssetRefs;                               // 0x418(0x10)
	char                                                         pad0x120_WBBLI[0x120];                             // 0x428(0x120)
};


// Size 0x1120 (Full Size[0x1560] - InheritedSize[0x440]
class FaunaAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x10_E20I6[0x10];                               // 0x440(0x10)
	class Actor*                                                 Fauna;                                             // 0x450(0x8)
	class Fauna*                                                 FaunaCharacter;                                    // 0x458(0x8)
	struct FaunaAnimationStructure                               Animations;                                        // 0x460(0x720)
	struct Rotator                                               CurrentOrientation;                                // 0xb80(0xc)
	char                                                         CurrentState;                                      // 0xb8c(0x1)
	bool                                                         IsCaged;                                           // 0xb8d(0x1)
	bool                                                         LoopSpecial;                                       // 0xb8e(0x1)
	char                                                         pad0x1_REXQA[0x1];                                 // 0xb8f(0x1)
	int                                                          SpecialIndex;                                      // 0xb90(0x4)
	float                                                        LocomotionSpeed;                                   // 0xb94(0x4)
	float                                                        ImpactStrength;                                    // 0xb98(0x4)
	char                                                         Location;                                          // 0xb9c(0x1)
	char                                                         pad0x3_WJ88U[0x3];                                 // 0xb9d(0x3)
	struct FaunaAnimationLocationStructure                       BaseAnimSet;                                       // 0xba0(0x390)
	float                                                        TurnRate;                                          // 0xf30(0x4)
	float                                                        CurrentYaw;                                        // 0xf34(0x4)
	float                                                        CurrentDirection;                                  // 0xf38(0x4)
	bool                                                         TurningActive;                                     // 0xf3c(0x1)
	bool                                                         TurningLeft;                                       // 0xf3d(0x1)
	char                                                         pad0x2_FVOCY[0x2];                                 // 0xf3e(0x2)
	float                                                        TurnRateToDisableTurns;                            // 0xf40(0x4)
	float                                                        AnimationTurnRateMultiplier;                       // 0xf44(0x4)
	char                                                         StartledLevel;                                     // 0xf48(0x1)
	bool                                                         PigIsStarving;                                     // 0xf49(0x1)
	bool                                                         StartEating;                                       // 0xf4a(0x1)
	bool                                                         StartChargeAttack;                                 // 0xf4b(0x1)
	bool                                                         StartMeleeAttack;                                  // 0xf4c(0x1)
	char                                                         pad0x7_UE4FH[0x7];                                 // 0xf4d(0x7)
	bool                                                         SnakeInAttackStance;                               // 0xf54(0x1)
	bool                                                         SnakeInCharmStance;                                // 0xf55(0x1)
	bool                                                         StartSnakeStrike;                                  // 0xf56(0x1)
	char                                                         SnakeAttackDirection;                              // 0xf57(0x1)
	struct FaunaAnimationSnakeBiteStructure                      BaseSnakeAttackAnims;                              // 0xf58(0x20)
	struct FaunaAnimationCurrentPlayingAnimations                CurrentPlayingAnimations;                          // 0xf78(0x60)
	char                                                         pad0x588_EP3ME[0x588];                             // 0xfd8(0x588)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandVisitorInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LiquidLauncherChargeVisuals: public Object
{
public:
	char                                                         pad0x20_E29JH[0x20];                               // 0x28(0x20)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x48(0x10)
	char                                                         pad0x10_OB888[0x10];                               // 0x58(0x10)
};


// Size 0x50 (Full Size[0x650] - InheritedSize[0x600]
class StarPointComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_VK1TO[0x8];                                 // 0x600(0x8)
	class StarChartVisualsDataAsset*                             StarChartVisualsDataAsset;                         // 0x608(0x8)
	struct FName                                                 PointId;                                           // 0x610(0x8)
	char                                                         pad0x38_BQHO7[0x38];                               // 0x618(0x38)
};


// Size 0x78 (Full Size[0x418] - InheritedSize[0x3a0]
class Hideout: public Actor
{
public:
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3a0(0x10)
	class PrimitiveComponent*                                    RevealTriggerVolume;                               // 0x3b0(0x8)
	struct FText                                                 HideoutName;                                       // 0x3b8(0x38)
	TArray<struct PlayerHideoutInfo>                             Players;                                           // 0x3f0(0x10)
	char                                                         pad0x18_B7CVZ[0x18];                               // 0x400(0x18)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class FortAIToggler: public Object
{
public:
	char                                                         pad0x40_N9JC1[0x40];                               // 0x28(0x40)
	TArray<struct FortTogglerUnit>                               FortUnits;                                         // 0x68(0x10)
	class Object*                                                WorldContext;                                      // 0x78(0x8)
};


// Size 0x48 (Full Size[0x3e8] - InheritedSize[0x3a0]
class Hull: public Actor
{
public:
	char                                                         pad0x8_FR3N1[0x8];                                 // 0x3a0(0x8)
	class BaseHullDragDynamicsDesc*                              HullDragDynamicsDesc;                              // 0x3a8(0x8)
	class BaseHullDragDynamicsDesc*                              AlternateHullDragDynamicsDesc;                     // 0x3b0(0x8)
	struct FeatureFlag                                           AlternateHullDragDynamicsFeature;                  // 0x3b8(0xc)
	char                                                         pad0x24_HXPK4[0x24];                               // 0x3c4(0x24)
};


// Size 0x28 (Full Size[0x2b0] - InheritedSize[0x288]
class DockableKeyedInstrumentInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x28_6RXO7[0x28];                               // 0x288(0x28)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NonVerbalRadialInventoryActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class QuestBookRemapper: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersChestVFXInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VaultTableMaterialSetDataAsset: public DataAsset
{
public:
	TArray<class MaterialInstance*>                              SolutionHintMaterials;                             // 0x28(0x10)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class IslandVisitorCallbackComponent: public ActorComponent
{
public:
	char                                                         pad0x8_K08X0[0x8];                                 // 0xb8(0x8)
};


// Size 0xc0 (Full Size[0xe8] - InheritedSize[0x28]
class ConditionalStatsService: public Object
{
public:
	char                                                         pad0xc0_ACASH[0xc0];                               // 0x28(0xc0)
};


// Size 0xb0 (Full Size[0x4f0] - InheritedSize[0x440]
class FishAnimationInstance: public AnimInstance
{
public:
	class SkeletalMesh*                                          FishSkeletalMesh;                                  // 0x440(0x8)
	class FishingFish*                                           FishingFishCharacter;                              // 0x448(0x8)
	struct FishAnimationParams                                   FishingFishAnimationParams;                        // 0x450(0x8)
	struct FishAnimationSequences                                FishAnimationSequences;                            // 0x458(0x88)
	bool                                                         IsJumpActive;                                      // 0x4e0(0x1)
	bool                                                         IsOnSurface;                                       // 0x4e1(0x1)
	bool                                                         FishIsCaught;                                      // 0x4e2(0x1)
	char                                                         pad0x5_476E0[0x5];                                 // 0x4e3(0x5)
	class AnimMontage*                                           CurrentPlayingMontage;                             // 0x4e8(0x8)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class SwitchDefinitionsDataAsset: public DataAsset
{
public:
	struct SwitchDefinitionsModel                                SwitchDefinitions;                                 // 0x28(0x10)
	class CustomScoreValuesMasterListDataAsset*                  ScoreValuesMasterList;                             // 0x38(0x8)
	int                                                          MinItemValue;                                      // 0x40(0x4)
	int                                                          MaxItemValue;                                      // 0x44(0x4)
	int                                                          ItemValueIncrementSize;                            // 0x48(0x4)
	char                                                         pad0x4_0MNMG[0x4];                                 // 0x4c(0x4)
	struct SwitchDefinitionsModel                                ItemScoreSwitchDefinitions;                        // 0x50(0x10)
	int                                                          MinEventValue;                                     // 0x60(0x4)
	int                                                          MaxEventValue;                                     // 0x64(0x4)
	int                                                          EventValueIncrementSize;                           // 0x68(0x4)
	char                                                         pad0x4_DM5UN[0x4];                                 // 0x6c(0x4)
	struct SwitchDefinitionsModel                                EventScoreSwitchDefinitions;                       // 0x70(0x10)
	struct FString                                               JSonObjectString;                                  // 0x80(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogCustomLookAtInterface: public Interface
{
public:
};


// Size 0x150 (Full Size[0x420] - InheritedSize[0x2d0]
class PlayerAtmosphericsAudioComponent: public SceneComponent
{
public:
	class PlayerAtmosphericsAudioComponentParams*                AtmosphericParams;                                 // 0x2d0(0x8)
	struct NoiseMakerController                                  NoiseMakerController;                              // 0x2d8(0x40)
	char                                                         pad0x10_HQUHB[0x10];                               // 0x318(0x10)
	class AthenaPlayerCharacter*                                 AthenaPlayerCharacter;                             // 0x328(0x8)
	char                                                         pad0xf0_SU1N2[0xf0];                               // 0x330(0xf0)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class AthenaAnimationDeathDataAsset: public DataAsset
{
public:
	class AnimSequence*                                          SwimmingSurfaceDeath;                              // 0x28(0x8)
	class AnimSequence*                                          LocomotionDeath;                                   // 0x30(0x8)
	class AnimSequence*                                          DrowningDeath;                                     // 0x38(0x8)
	struct StringAssetReference                                  WakeUp;                                            // 0x40(0x10)
	struct StringAssetReference                                  WakeUpSwimming;                                    // 0x50(0x10)
	class BlendSpace1D*                                          DrowningDeathBS;                                   // 0x60(0x8)
	struct StringAssetReference                                  BeckonInto;                                        // 0x68(0x10)
	struct StringAssetReference                                  BeckonLoop;                                        // 0x78(0x10)
	class UClass*                                                RevivingStateId;                                   // 0x88(0x8)
	class UClass*                                                DeadStateId;                                       // 0x90(0x8)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class AssociateActorToCrewTaskStepDesc: public TaleQuestStepDesc
{
public:
	class TaleQuestStepDesc*                                     TaskDesc;                                          // 0x80(0x8)
	struct QuestVariableActor                                    ActorToAssociate;                                  // 0x88(0x30)
};


// Size 0x30 (Full Size[0x630] - InheritedSize[0x600]
class GlintComponent: public StaticMeshComponent
{
public:
	class GlintComponentDataAsset*                               GlintComponentDataAsset;                           // 0x600(0x8)
	TArray<class Actor*>                                         CurrentEnteredShips;                               // 0x608(0x10)
	struct GlintVisibilityLock                                   GlintVisibilityLock;                               // 0x618(0x1)
	char                                                         pad0x17_K0ICR[0x17];                               // 0x619(0x17)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class NPCOnSurfaceCannonManager: public Object
{
public:
	TArray<struct NPCOnSurfaceCannonManagerCannon>               Cannons;                                           // 0x28(0x10)
	class NPCOnSurfaceCannonManagerDataAsset*                    CannonManagerDataAsset;                            // 0x38(0x8)
	class NPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset*    CannonManagerCrewSizeSettingsDataAsset;            // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BootyStorageInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InSunkenIslandSurfaceZone: public EnvQueryTest
{
public:
	class UClass*                                                ExclusionType;                                     // 0x170(0x8)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class AthenaAnimationWaterSlideDataAsset: public DataAsset
{
public:
	char                                                         pad0x60_XSJKR[0x60];                               // 0x28(0x60)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CurseStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestDefinition: public Object
{
public:
};


// Size 0x1b8 (Full Size[0x270] - InheritedSize[0xb8]
class CoherentToWwiseEventComponent: public ActorComponent
{
public:
	struct StringAssetReference                                  UIAudioCuesTableLocation;                          // 0xb8(0x10)
	class CoherentToWwiseEventDataAsset*                         UIAudioCuesAsset;                                  // 0xc8(0x8)
	struct FName                                                 AudioGameStateGroup;                               // 0xd0(0x8)
	struct FName                                                 AudioGameStateIngame;                              // 0xd8(0x8)
	struct FName                                                 AudioGameStateInMenu;                              // 0xe0(0x8)
	struct FName                                                 AudioGameStateLoading;                             // 0xe8(0x8)
	struct FName                                                 AudioGameStateInFrontEnd;                          // 0xf0(0x8)
	char                                                         pad0x178_NR530[0x178];                             // 0xf8(0x178)
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class FlyingCreature: public Actor
{
public:
	class WwiseObjectPoolWrapper*                                CreatureSoundPool;                                 // 0x3a0(0x8)
	class WwiseEvent*                                            CreatureSoundToPlay;                               // 0x3a8(0x8)
	class WwiseEvent*                                            CreatureSoundToStop;                               // 0x3b0(0x8)
	class WwiseEvent*                                            CreatureOneShotToPlay;                             // 0x3b8(0x8)
	char                                                         pad0x20_O0TJQ[0x20];                               // 0x3c0(0x20)
};


// Size 0x128 (Full Size[0x1e0] - InheritedSize[0xb8]
class PacingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_07U1C[0x8];                                 // 0xb8(0x8)
	class PacingComponentPublicData*                             PublicData;                                        // 0xc0(0x8)
	char                                                         pad0x10_L3L5U[0x10];                               // 0xc8(0x10)
	class AthenaPlayerCharacter*                                 Player;                                            // 0xd8(0x8)
	char                                                         pad0x100_TC0C7[0x100];                             // 0xe0(0x100)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class TurnAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FirstPersonCameraOrientationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickupObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileCooldownServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoastInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuryingTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraFadeManagerTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class ContestOutOfBoundsComponent: public ActorComponent
{
public:
	char                                                         pad0x98_LVDS4[0x98];                               // 0xb8(0x98)
};


// Size 0x60 (Full Size[0x4a0] - InheritedSize[0x440]
class WheelAnimInstance: public AnimInstance
{
public:
	struct Rotator                                               WheelRotation;                                     // 0x440(0xc)
	float                                                        WheelTime;                                         // 0x44c(0x4)
	char                                                         AnimationType;                                     // 0x450(0x1)
	char                                                         pad0x3_THE7Z[0x3];                                 // 0x451(0x3)
	bool                                                         IsAnimationTypeLeftTurnFast;                       // 0x454(0x1)
	bool                                                         IsAnimationTypeRightTurnFast;                      // 0x454(0x1)
	bool                                                         IsAnimationTypeRightTurnMid;                       // 0x454(0x1)
	bool                                                         IsAnimationTypeLeftTurnMid;                        // 0x454(0x1)
	bool                                                         IsAnimationTypeSmallTurn;                          // 0x454(0x1)
	bool                                                         IsTurningLeft;                                     // 0x454(0x1)
	bool                                                         IsTurningRight;                                    // 0x454(0x1)
	char                                                         pad0x3_F31CM[0x3];                                 // 0x455(0x3)
	struct WheelPartsScales                                      WheelPartScales;                                   // 0x458(0x48)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PhotoModeToggleInputId: public NotificationInputId
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class LandmarkReactionTriggerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_L74VY[0x8];                                 // 0xb8(0x8)
	TArray<struct LandmarkReactionKeyFrame>                      ReactionFrames;                                    // 0xc0(0x10)
	char                                                         pad0x20_E6M3N[0x20];                               // 0xd0(0x20)
};


// Size 0x70 (Full Size[0xf0] - InheritedSize[0x80]
class FilterLocationsBasedOfZDistanceTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVectorArray                              InLocationArray;                                   // 0x80(0x30)
	float                                                        ZLocationForComparison;                            // 0xb0(0x4)
	float                                                        DistanceToConsiderValidity;                        // 0xb4(0x4)
	bool                                                         InverseResults;                                    // 0xb8(0x1)
	char                                                         pad0x7_V9L9O[0x7];                                 // 0xb9(0x7)
	struct QuestVariableVectorArray                              OutFoundLocations;                                 // 0xc0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkDebugFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class QuestBootyItemPopUpAsset: public DataAsset
{
public:
	TArray<struct QuestBootyItemPopUpEntry>                      PopUpDescEntries;                                  // 0x28(0x10)
};


// Size 0xe0 (Full Size[0x480] - InheritedSize[0x3a0]
class GameEvent: public Actor
{
public:
	char                                                         pad0x10_VO5NR[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        Root;                                              // 0x3b0(0x8)
	class GameEventOnDemandAvailabilityHandler*                  GameEventOnDemandAvailabilityHandler;              // 0x3b8(0x8)
	char                                                         pad0xc0_GF4RR[0xc0];                               // 0x3c0(0xc0)
};


// Size 0xf8 (Full Size[0x1b0] - InheritedSize[0xb8]
class GuildInviteeComponent: public ActorComponent
{
public:
	char                                                         pad0x8_DX0FQ[0x8];                                 // 0xb8(0x8)
	class Object*                                                GuildInviterInteractable;                          // 0xc0(0x8)
	TArray<char>                                                 CannotJoinReasons;                                 // 0xc8(0x10)
	char                                                         pad0xd0_1PKOY[0xd0];                               // 0xd8(0xd0)
	char                                                         GuildInviteStage;                                  // 0x1a8(0x1)
	char                                                         pad0x7_6ST7G[0x7];                                 // 0x1a9(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class AddNPCOnSurfaceStep: public TaleQuestStep
{
public:
};


// Size 0x160 (Full Size[0x430] - InheritedSize[0x2d0]
class FaunaRammerComponent: public SceneComponent
{
public:
	char                                                         pad0x10_E8DI8[0x10];                               // 0x2d0(0x10)
	class SphereComponent*                                       OverlapComponent;                                  // 0x2e0(0x8)
	class Actor*                                                 PreviouslyRammedActor;                             // 0x2e8(0x8)
	char                                                         pad0x28_GXNF6[0x28];                               // 0x2f0(0x28)
	bool                                                         bNeedsToEnanbleCollisionForRamming;                // 0x318(0x1)
	char                                                         pad0x17_7SYNP[0x17];                               // 0x319(0x17)
	struct Vector                                                SphereCastLocation;                                // 0x330(0xc)
	char                                                         pad0x34_9FOYE[0x34];                               // 0x33c(0x34)
	struct Vector                                                SphereCastLocationOffset;                          // 0x370(0xc)
	char                                                         CollisionChannelToLookForWhenRamming;              // 0x37c(0x1)
	char                                                         pad0x3_OPO04[0x3];                                 // 0x37d(0x3)
	class UClass*                                                DamagerType;                                       // 0x380(0x8)
	struct KnockBackInfo                                         FaunaRammingKnockBackInfo;                         // 0x388(0x54)
	char                                                         pad0x4_OFM0X[0x4];                                 // 0x3dc(0x4)
	struct DamageInstance                                        DamageInstance;                                    // 0x3e0(0x30)
	float                                                        DamageAmount;                                      // 0x410(0x4)
	char                                                         HealthChanngeReason;                               // 0x414(0x1)
	char                                                         pad0x1b_0VSG1[0x1b];                               // 0x415(0x1b)
};


// Size 0xd8 (Full Size[0x190] - InheritedSize[0xb8]
class GhostCharacterAudioComponent: public ActorComponent
{
public:
	TArray<class WwiseEvent*>                                    GhostShipPlayEvents;                               // 0xb8(0x10)
	class WwiseEvent*                                            GhostShipWaterphonePlay;                           // 0xc8(0x8)
	class WwiseEvent*                                            GhostShipMusicStopAll;                             // 0xd0(0x8)
	class WwiseEvent*                                            GhostShipAmbiencePlay;                             // 0xd8(0x8)
	class WwiseEvent*                                            GhostShipAmbienceStop;                             // 0xe0(0x8)
	float                                                        GhostShipEventChangeMinTriggerTime;                // 0xe8(0x4)
	float                                                        GhostShipEventChangeMaxTriggerTime;                // 0xec(0x4)
	class GhostCharacterAudioComponentParams*                    GhostCharacterAudioParams;                         // 0xf0(0x8)
	class CharacterAudioFootfallControllerParams*                FootfallParams;                                    // 0xf8(0x8)
	char                                                         pad0x90_W8FCD[0x90];                               // 0x100(0x90)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class UserPresenceHudComponent: public ActorComponent
{
public:
	char                                                         pad0x20_IT402[0x20];                               // 0xb8(0x20)
	TArray<struct UserPresenceRequestAndResponse>                RequestsAndResponses;                              // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SittingThirdPersonCameraActionStateId: public ActionStateId
{
public:
};


// Size 0xb0 (Full Size[0x148] - InheritedSize[0x98]
class StartAggressiveGhostShipEncounterStep: public TaleQuestStep
{
public:
	class StartAggressiveGhostShipEncounterStepDesc*             StepDesc;                                          // 0x98(0x8)
	class OverlapTriggerActor*                                   EncounterIslandOverlapTrigger;                     // 0xa0(0x8)
	char                                                         pad0xa0_R9GQ8[0xa0];                               // 0xa8(0xa0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ScrambledNamesServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x330] - InheritedSize[0x300]
class BuriedItemDecal: public DecalComponent
{
public:
	struct FName                                                 FadeTimeParameterName;                             // 0x300(0x8)
	struct FName                                                 FadeDistanceStartParameterName;                    // 0x308(0x8)
	float                                                        FadeDistanceStart;                                 // 0x310(0x4)
	struct FName                                                 FadeDistanceEndParameterName;                      // 0x314(0x8)
	float                                                        FadeDistanceEnd;                                   // 0x31c(0x4)
	class MaterialInstanceDynamic*                               Material;                                          // 0x320(0x8)
	char                                                         pad0x8_KL8YT[0x8];                                 // 0x328(0x8)
};


// Size 0x90 (Full Size[0x360] - InheritedSize[0x2d0]
class WaterModifierZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_KT1E8[0x8];                                 // 0x2d0(0x8)
	struct WaterModifierZoneParameters                           WaterModifierZoneParameters;                       // 0x2d8(0x78)
	bool                                                         RegisterOnBegin;                                   // 0x350(0x1)
	char                                                         pad0xf_JSP93[0xf];                                 // 0x351(0xf)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeAttackBlockerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SalvageSpawnerLocationReservationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x490] - InheritedSize[0x490]
class AthenaGameplayDebuggingHUDComponent: public GameplayDebuggingHUDComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AwardableInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class WorldMarkerOnDigPositionComponent: public ActorComponent
{
public:
	class UClass*                                                MarkerVariant;                                     // 0xb8(0x8)
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class TaleProgressStatue: public Actor
{
public:
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3a0(0x8)
	struct FName                                                 InteractionSocketName;                             // 0x3a8(0x8)
	class TaleProgressStatueInteractableComponent*               InteractableComponent;                             // 0x3b0(0x8)
	int                                                          StatueProgressLevel;                               // 0x3b8(0x4)
	bool                                                         HasReturnToShipInteraction;                        // 0x3bc(0x1)
	char                                                         pad0x3_NJTNG[0x3];                                 // 0x3bd(0x3)
	TArray<struct Name>                                          ValidTaleCampaignIds;                              // 0x3c0(0x10)
	class MaterialInstanceDynamic*                               DynamicGlowMaterialInstance;                       // 0x3d0(0x8)
	class ParticleSystemComponent*                               ResumeFromTaleProgressParticleSystem;              // 0x3d8(0x8)
	struct FName                                                 GlowParamName;                                     // 0x3e0(0x8)
	int                                                          GlowOffEmissiveScalarValue;                        // 0x3e8(0x4)
	int                                                          GlowOnEmissiveScalarValue;                         // 0x3ec(0x4)
	char                                                         pad0x20_K20F9[0x20];                               // 0x3f0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DitherFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LockableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x288] - InheritedSize[0x288]
class CapturedByKrakenInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StarChartPuzzleInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StrongholdKeyData: public DataAsset
{
public:
	TArray<struct StrongholdKeyInfo>                             StrongholdKeys;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GetIslandLocationStep: public TaleQuestStep
{
public:
};


// Size 0x78 (Full Size[0x300] - InheritedSize[0x288]
class AthenaCharacterBaseLocomotionInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x70_XKGDQ[0x70];                               // 0x288(0x70)
	class UClass*                                                ThrowablesItemCategory;                            // 0x2f8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SoakedStatus: public StatusBase
{
public:
};


// Size 0x138 (Full Size[0x4d8] - InheritedSize[0x3a0]
class CoordinatedCutsceneTrigger: public Actor
{
public:
	char                                                         pad0x8_NEW3F[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3a8(0x8)
	struct FName                                                 CutsceneName;                                      // 0x3b0(0x8)
	bool                                                         ActivationInitiallyEnabled;                        // 0x3b8(0x1)
	bool                                                         AllowInfiniteNumberOfReactivations;                // 0x3b9(0x1)
	char                                                         pad0x2_HEXN7[0x2];                                 // 0x3ba(0x2)
	int                                                          SpecificNumberOfReactivationsAllowed;              // 0x3bc(0x4)
	bool                                                         ReattemptActivationAfterConflictingCutsceneFinishes; // 0x3c0(0x1)
	char                                                         pad0x3_1TOKY[0x3];                                 // 0x3c1(0x3)
	struct FloatInterval                                         CutsceneStartDelayWhenReattemptingActivation;      // 0x3c4(0x8)
	char                                                         pad0x4_M0C0L[0x4];                                 // 0x3cc(0x4)
	TArray<struct StateChangeCoordination>                       StateChangeCoordination;                           // 0x3d0(0x10)
	class BillboardComponent*                                    EditorOnlyIcon;                                    // 0x4c0(0x8)
	class TextRenderComponent*                                   EditorOnlyCutsceneNameDisplay;                     // 0x4c8(0x8)
	struct CutsceneTriggerEditorOnlyData                         AllEditingPreferences;                             // 0x4d0(0x3)
	char                                                         pad0x5_HV8IE[0x5];                                 // 0x4d3(0x5)
};


// Size 0xf0 (Full Size[0x6f0] - InheritedSize[0x600]
class SeaFortAlignmentTableModelComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_C7RAX[0x8];                                 // 0x600(0x8)
	char                                                         IslandType;                                        // 0x608(0x1)
	char                                                         pad0x7_Y9S7M[0x7];                                 // 0x609(0x7)
	struct FlagAlignmentCosmetic                                 AlignmentCosmetic;                                 // 0x610(0x28)
	char                                                         pad0xb8_9YGIY[0xb8];                               // 0x638(0xb8)
};


// Size 0x40 (Full Size[0x78] - InheritedSize[0x38]
class ShipCustomizationSettings: public DeveloperSettings
{
public:
	TArray<struct ShipCustomizationCategorySettings>             ShipCustomizationSettings;                         // 0x38(0x10)
	TArray<struct StringClassReference>                          RestrictedAccessShipCustomisationEntitlements;     // 0x48(0x10)
	TArray<struct ShipPlatformRestrictedEntitlementSettings>     PlatformExclusiveShipCustomizationEntitlements;    // 0x58(0x10)
	struct FString                                               DebugTinCrewName;                                  // 0x68(0x10)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class CutSceneSubtitlesExecutableAnimMetaData: public AnimMetaData
{
public:
	char                                                         pad0x8_AZ8PJ[0x8];                                 // 0x28(0x8)
	struct SceneDialogueStructure                                SceneDialogueStructure;                            // 0x30(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDropperInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class TurnRateWithFixedSensitivityAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableZoomOutAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MastInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableBookBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OwnedByCrewInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class RewardService: public Object
{
public:
	char                                                         pad0x10_0KRZN[0x10];                               // 0x28(0x10)
	TArray<class RewardDefinitionAsset*>                         RewardDefinitionAssets;                            // 0x38(0x10)
	char                                                         pad0x50_H3PVJ[0x50];                               // 0x48(0x50)
};


// Size 0x10 (Full Size[0x118] - InheritedSize[0x108]
class AthenaDebugMenuComponent: public DebugMenuComponent
{
public:
	char                                                         pad0x10_EDP4V[0x10];                               // 0x108(0x10)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InsideTinySharkExperience: public EnvQueryTest
{
public:
	float                                                        BufferRadius;                                      // 0x170(0x4)
	char                                                         pad0x4_TKE4S[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDropHitReceiverInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CursedCannonballData: public DataAsset
{
public:
	TArray<class Class*>                                         AllCursedCannonballs;                              // 0x28(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class VaultPuzzleDataAsset: public DataAsset
{
public:
	TArray<struct VaultPuzzleSolutionEntry>                      SolutionSets;                                      // 0x28(0x10)
	char                                                         AudioSetting;                                      // 0x38(0x1)
	bool                                                         RequiresOpenDoor;                                  // 0x39(0x1)
	bool                                                         ShouldFillWithWater;                               // 0x3a(0x1)
	bool                                                         RequiresPuzzleSolution;                            // 0x3b(0x1)
	bool                                                         ShouldExtinguishBraziersOnComplete;                // 0x3c(0x1)
	bool                                                         ShouldOpenRewardDoorOnComplete;                    // 0x3d(0x1)
	char                                                         pad0x2_YSC5P[0x2];                                 // 0x3e(0x2)
	TArray<float>                                                FillRateOverrides;                                 // 0x40(0x10)
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class TeleportLungeAIAbility: public AthenaAIAbility
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SpawnCommandsItemCategory: public DataAsset
{
public:
	struct FName                                                 ItemCategoryName;                                  // 0x28(0x8)
	TArray<struct SpawnCommandsItemSubCategory>                  ItemSubCategories;                                 // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitRegSnapshotDebugManipulatorInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class RainZoneService: public Object
{
public:
	char                                                         pad0x8_SM5GN[0x8];                                 // 0x28(0x8)
	TArray<class Interface*>                                     RegisteredRainZones;                               // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CompanyValidationAsset: public DataAsset
{
public:
	TArray<struct CompanyValidationAssetUnit>                    CompaniesToValidate;                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x138] - InheritedSize[0x138]
class GhostAIFormComponent: public AthenaAIFormComponent
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ClearTaleProgressStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterAnimationInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class QuestTableDiscoverTileCategory: public Object
{
public:
	struct StringAssetReference                                  BladeImageUrl;                                     // 0x28(0x10)
	struct StringAssetReference                                  PreviewTileImageUrl;                               // 0x38(0x10)
	struct StringAssetReference                                  WatermarkImageUrl;                                 // 0x48(0x10)
};


// Size 0xb0 (Full Size[0x130] - InheritedSize[0x80]
class TaleQuestGetNPCOnIslandStepDesc: public TaleQuestStepDesc
{
public:
	class UClass*                                                Company;                                           // 0x80(0x8)
	struct FString                                               NameSearchString;                                  // 0x88(0x10)
	class UClass*                                                NPCClass;                                          // 0x98(0x8)
	struct QuestVariableName                                     IslandName;                                        // 0xa0(0x30)
	struct QuestVariableVector                                   Location;                                          // 0xd0(0x30)
	struct QuestVariableActor                                    NPC;                                               // 0x100(0x30)
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class FireBreathAIAbilityParams: public AthenaAIAbilityParams
{
public:
	struct AthenaAIAbilityPlayerBasedRanges                      FireBreathDuration;                                // 0xc8(0x10)
	class UClass*                                                FireBreathObject;                                  // 0xd8(0x8)
	struct VFXHandlerComponentParams                             FireBreathVFXParams;                               // 0xe0(0x40)
	struct Vector                                                FireCollisionVolumeSize;                           // 0x120(0xc)
	float                                                        FireBreathZoneStartOffset;                         // 0x12c(0x4)
	float                                                        FireStartDelay;                                    // 0x130(0x4)
	float                                                        FireEndPreWarn;                                    // 0x134(0x4)
	class UClass*                                                VfxSpawner;                                        // 0x138(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RendererSettingsFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class DeepSeaRegion: public Actor
{
public:
	char                                                         pad0x8_X7PL5[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3a8(0x8)
	char                                                         pad0x18_VB2BV[0x18];                               // 0x3b0(0x18)
	struct DeepSeaRegionData                                     DeepSeaRegionData;                                 // 0x3c8(0x1c)
	char                                                         pad0x4_S6EIN[0x4];                                 // 0x3e4(0x4)
	struct DeepSeaRegionAmbienceAudio                            DeepSeaRegionAudio;                                // 0x3e8(0x18)
	struct DeepSeaRegionScreenEffects                            DeepSeaRegionScreenEffects;                        // 0x400(0x10)
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class WieldableItemPersistentCooldownComponent: public ActorComponent
{
public:
	char                                                         pad0x58_K9F0I[0x58];                               // 0xb8(0x58)
};


// Size 0xa0 (Full Size[0x440] - InheritedSize[0x3a0]
class CaptainCurtains: public Actor
{
public:
	char                                                         pad0x8_R06RT[0x8];                                 // 0x3a0(0x8)
	class StaticMeshMemoryConstraintComponent*                   PrimaryCurtainMeshComponent;                       // 0x3a8(0x8)
	class StaticMeshComponent*                                   SecondaryCurtainMeshComponent;                     // 0x3b0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3b8(0x8)
	class CaptainCurtainsPartDescAsset*                          DescToSetWhenSafe;                                 // 0x3c0(0x8)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x3c8(0x8)
	char                                                         pad0x70_WNWH8[0x70];                               // 0x3d0(0x70)
};


// Size 0x90 (Full Size[0x690] - InheritedSize[0x600]
class StaticMeshMemoryConstraintComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x20_DZKHM[0x20];                               // 0x600(0x20)
	class MeshMemoryConstraintHandler*                           Handler;                                           // 0x620(0x8)
	TArray<struct StringAssetReference>                          FallbackOverrideMaterials;                         // 0x628(0x10)
	class UClass*                                                MeshFallbackCategory;                              // 0x638(0x8)
	struct StringAssetReference                                  MeshReference;                                     // 0x640(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x658(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x659(0x1)
	char                                                         pad0x6_VJE4N[0x6];                                 // 0x65a(0x6)
	class UClass*                                                BudgetToCountMemoryAgainstIfNoFallback;            // 0x660(0x8)
	struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0x668(0xc)
	char                                                         pad0x4_VU2FP[0x4];                                 // 0x674(0x4)
	char                                                         pad0x18_R0FGH[0x18];                               // 0x678(0x18)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class UniversalDescriptorNavigateUpHeldInputId: public NotificationInputId
{
public:
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class ContestWaitForItemHandInStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Item;                                              // 0x80(0x30)
	struct QuestVariableItemDescType                             ItemDesc;                                          // 0xb0(0x30)
	struct QuestVariableActor                                    NPC;                                               // 0xe0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaStreamedLevelServiceBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterInertInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class StarvingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_WN3G8[0x8];                                 // 0xb8(0x8)
	struct WeightedProbabilityRangeOfRanges                      WeightedTimeToStarveInSeconds;                     // 0xc0(0x30)
	float                                                        StarvingNotificationInterval;                      // 0xf0(0x4)
	bool                                                         StartStarvingImmediately;                          // 0xf4(0x1)
	bool                                                         RecalculateTimeToStarveOnReset;                    // 0xf5(0x1)
	char                                                         pad0x5e_YNJPH[0x5e];                               // 0xf6(0x5e)
	float                                                        TimeSpentStarving;                                 // 0x154(0x4)
	bool                                                         HasStartedStarving;                                // 0x158(0x1)
	char                                                         pad0x3_6JJS5[0x3];                                 // 0x159(0x3)
	float                                                        TimeToStarveInSeconds;                             // 0x15c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TakeControlActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickSwitchPrimaryWeaponNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x40 (Full Size[0x310] - InheritedSize[0x2d0]
class WorldRegionComponent: public SceneComponent
{
public:
	struct FName                                                 WorldRegionName;                                   // 0x2d0(0x8)
	class UClass*                                                RegionShanty;                                      // 0x2d8(0x8)
	float                                                        WorldRegionRadius;                                 // 0x2e0(0x4)
	char                                                         pad0x2c_PN8ZN[0x2c];                               // 0x2e4(0x2c)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class ParticleSystemService: public Actor
{
public:
	char                                                         pad0x18_IVM4O[0x18];                               // 0x3a0(0x18)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyEReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class Rugs: public Actor
{
public:
	class StaticMeshComponent*                                   RugMeshComponent;                                  // 0x3a0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3a8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemRepresentationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SendCrewToTunnelOfTheDamnedTaleStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotCounterClockwiseNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmergentAISwitchesDataAsset: public DataAsset
{
public:
	TArray<struct EmergentAISwitch>                              EmergentAISwitches;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ReloadPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x178 (Full Size[0x1f8] - InheritedSize[0x80]
class ChooseIslandStepDesc: public TaleQuestStepDesc
{
public:
	bool                                                         UseVoyageRecipeIslandIfAvailable;                  // 0x80(0x1)
	char                                                         pad0x7_FJST6[0x7];                                 // 0x81(0x7)
	struct QuestVariableVector                                   SourceLocation;                                    // 0x88(0x30)
	struct QuestVariableNameArray                                IslandsToIgnore;                                   // 0xb8(0x30)
	bool                                                         AvoidIslandsInVoyageHistory;                       // 0xe8(0x1)
	char                                                         pad0x7_L7PBI[0x7];                                 // 0xe9(0x7)
	struct VoyageLocationParams                                  LocationParams;                                    // 0xf0(0xd8)
	struct QuestVariableName                                     IslandName;                                        // 0x1c8(0x30)
};


// Size 0xc8 (Full Size[0x478] - InheritedSize[0x3b0]
class AthenaTextRender: public StaticMeshActor
{
public:
	struct FText                                                 Text;                                              // 0x3b0(0x38)
	struct TreasureMapWidgetText                                 TextDesc;                                          // 0x3e8(0x3c)
	int                                                          CanvasWidth;                                       // 0x424(0x4)
	int                                                          CanvasHeight;                                      // 0x428(0x4)
	char                                                         pad0x4_42QEH[0x4];                                 // 0x42c(0x4)
	class Font*                                                  Font;                                              // 0x430(0x8)
	struct Vector2D                                              FontScale;                                         // 0x438(0x8)
	float                                                        FontLineSpacingScale;                              // 0x440(0x4)
	char                                                         pad0xc_SXQKM[0xc];                                 // 0x444(0xc)
	class CanvasRenderTarget2D*                                  AthenaTextRenderTarget;                            // 0x450(0x8)
	char                                                         pad0x20_1EDPJ[0x20];                               // 0x458(0x20)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class BalanceableWalkwayAnimationDataAsset: public DataAsset
{
public:
	char                                                         pad0xa0_TAUDL[0xa0];                               // 0x28(0xa0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GarbageObject: public Object
{
public:
};


// Size 0x1230 (Full Size[0x1258] - InheritedSize[0x28]
class LoadoutService: public Object
{
public:
	char                                                         pad0x1180_LC8E7[0x1180];                           // 0x28(0x1180)
	TArray<struct LoadoutEntry>                                  LoadoutEntries;                                    // 0x11a8(0x10)
	char                                                         pad0xa0_VLUYL[0xa0];                               // 0x11b8(0xa0)
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class ServerUpdateReportingService: public Object
{
public:
	char                                                         pad0x108_HESSZ[0x108];                             // 0x28(0x108)
};


// Size 0x208 (Full Size[0x5a8] - InheritedSize[0x3a0]
class ProjectileService: public Actor
{
public:
	char                                                         pad0x28_YS9XF[0x28];                               // 0x3a0(0x28)
	TArray<struct WeaponProjectile>                              DeadProjectiles;                                   // 0x3c8(0x10)
	char                                                         pad0x60_55BZW[0x60];                               // 0x3d8(0x60)
	TArray<struct ProjectileAttackGroup>                         ProjectileAttackGroups;                            // 0x438(0x10)
	char                                                         pad0xf0_EPNQT[0xf0];                               // 0x448(0xf0)
	class AthenaProjectilesThrottledTickCollectionAsset*         ProjectileThrottledTickData;                       // 0x538(0x8)
	char                                                         pad0x68_MKBHX[0x68];                               // 0x540(0x68)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAILoadoutList: public DataAsset
{
public:
	TArray<struct SpawnCommandsAILoadout>                        LoadoutList;                                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadPlayerActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class EventBroadcastStep: public TaleQuestStep
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class NoiseMakerComponentParams: public DataAsset
{
public:
	float                                                        TriggerRadiusAroundNoiseMaker;                     // 0x28(0x4)
	char                                                         pad0x4_F3JZ7[0x4];                                 // 0x2c(0x4)
	class WwiseEvent*                                            LocalNoiseMakerFoliagePlay;                        // 0x30(0x8)
	class WwiseEvent*                                            LocalNoiseMakerFoliageStop;                        // 0x38(0x8)
	struct FName                                                 LocalSpeedRtpc;                                    // 0x40(0x8)
	class WwiseEvent*                                            SimulatedCharacterFoliagePlay;                     // 0x48(0x8)
	class WwiseEvent*                                            SimulatedCharacterFoliageStop;                     // 0x50(0x8)
	struct FName                                                 SimulatedCharacterSpeedRtpc;                       // 0x58(0x8)
	struct FName                                                 ProximityRtpc;                                     // 0x60(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ashen_dragon_flag_em_01_a: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_RitualSkellyFortEventSignal: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class InitialisePuzzleVaultStep: public TaleQuestStep
{
public:
};


// Size 0x98 (Full Size[0xf8] - InheritedSize[0x60]
class BTTask_RunOneShotCustomAnimation: public BTTaskNode
{
public:
	bool                                                         UseFixedOneShotCustomAnimationName;                // 0x60(0x1)
	char                                                         pad0x3_JR8WI[0x3];                                 // 0x61(0x3)
	struct FName                                                 FixedOneShotCustomAnimationName;                   // 0x64(0x8)
	char                                                         pad0x4_6FC4S[0x4];                                 // 0x6c(0x4)
	struct BlackboardKeySelector                                 OneShotCustomAnimationNameKey;                     // 0x70(0x28)
	bool                                                         GetDurationAndEffectTime;                          // 0x98(0x1)
	char                                                         pad0x7_HEICR[0x7];                                 // 0x99(0x7)
	struct BlackboardKeySelector                                 AnimationDuration;                                 // 0xa0(0x28)
	struct BlackboardKeySelector                                 AnimationEffectTime;                               // 0xc8(0x28)
	bool                                                         StopCurrentLoopingAnimation;                       // 0xf0(0x1)
	char                                                         pad0x7_NJ28C[0x7];                                 // 0xf1(0x7)
};


// Size 0x1b0 (Full Size[0x550] - InheritedSize[0x3a0]
class ItemReplenisher: public Actor
{
public:
	char                                                         pad0x10_SFDSC[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        Root;                                              // 0x3b0(0x8)
	class InteractableComponentWithActionRules*                  InteractableWithActionRulesComponent;              // 0x3b8(0x8)
	struct Transform                                             ItemSpawnTransform;                                // 0x3c0(0x30)
	class UClass*                                                ItemToSpawn;                                       // 0x3f0(0x8)
	int                                                          MaxItems;                                          // 0x3f8(0x4)
	bool                                                         ShouldItemBeSpawnedOnStart;                        // 0x3fc(0x1)
	bool                                                         WieldItemWhenSpawned;                              // 0x3fd(0x1)
	char                                                         pad0x2_E6NVX[0x2];                                 // 0x3fe(0x2)
	struct ItemReplenisherInteractionParams                      InteractionParams;                                 // 0x400(0x78)
	bool                                                         CanInteractOnStart;                                // 0x478(0x1)
	bool                                                         CanInteract;                                       // 0x479(0x1)
	char                                                         pad0x2_J0YKQ[0x2];                                 // 0x47a(0x2)
	int                                                          CurrentNumberOfItemsSpawned;                       // 0x47c(0x4)
	char                                                         pad0xd0_J73KB[0xd0];                               // 0x480(0xd0)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CustomScoreValuesMasterListDataAsset: public DataAsset
{
public:
	TArray<class CustomScoreItemValuesDataAsset*>                ItemValues;                                        // 0x28(0x10)
	TArray<class CustomScoreEventValuesDataAsset*>               EventValues;                                       // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActionRulesBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UsableInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class InventoryItemComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CM1IE[0x8];                                 // 0xb8(0x8)
	char                                                         Type;                                              // 0xc0(0x1)
	char                                                         pad0x7_FHVU5[0x7];                                 // 0xc1(0x7)
	struct StringAssetReference                                  Icon;                                              // 0xc8(0x10)
	struct StringAssetReference                                  BackgroundImage;                                   // 0xd8(0x10)
	struct FString                                               IconUrl;                                           // 0xe8(0x10)
	float                                                        IconRotation;                                      // 0xf8(0x4)
	float                                                        IconScale;                                         // 0xfc(0x4)
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class WaitForVaultCompletionStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
	struct FText                                                 VaultFailureMessage;                               // 0xb0(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildInviterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrinketMountpointManagerComponentDebugFunctions: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadableContainerInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x120] - InheritedSize[0x100]
class RetractableItemProxyComponent: public RetractableComponent
{
public:
	char                                                         pad0x20_TBEZD[0x20];                               // 0x100(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSocketCollisionFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StartledAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseCannonActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipLiveryCatalogueDataAsset: public DataAsset
{
public:
	struct ShipLiveryCatalogue                                   Catalogue;                                         // 0x28(0x10)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class AggressiveGhostShipRewardsDataAsset: public DataAsset
{
public:
	struct AggressiveGhostShipRewardData                         CaptainRewards;                                    // 0x28(0x18)
	struct AggressiveGhostShipRewardData                         FormationLeaderRewards;                            // 0x40(0x18)
	struct AggressiveGhostShipRewardData                         GruntRewards;                                      // 0x58(0x18)
	class UClass*                                                RewardMarker;                                      // 0x70(0x8)
	class UClass*                                                Company;                                           // 0x78(0x8)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class PhasedClusterRoot: public Actor
{
public:
	TArray<class Pawn*>                                          Pawns;                                             // 0x3a0(0x10)
	char                                                         pad0x8_6BNFF[0x8];                                 // 0x3b0(0x8)
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class WaitForCrewMemberToApproachNamedPointGroupStepDesc: public TaleQuestStepDesc
{
public:
	bool                                                         IsNamedPointActorCrewsShip;                        // 0x80(0x1)
	char                                                         pad0x7_RO163[0x7];                                 // 0x81(0x7)
	struct QuestVariableActor                                    ActorToSearch;                                     // 0x88(0x30)
	struct QuestVariablePlayerActor                              OptionalPlayerActor;                               // 0xb8(0x30)
	struct FName                                                 GroupName;                                         // 0xe8(0x8)
	int                                                          GroupIndex;                                        // 0xf0(0x4)
	struct Guid                                                  CrewId;                                            // 0xf4(0x10)
	char                                                         EvaluationType;                                    // 0x104(0x1)
	char                                                         pad0x3_N8U4O[0x3];                                 // 0x105(0x3)
	float                                                        MinRadiusFromAnyPointInGroup;                      // 0x108(0x4)
	bool                                                         CheckForLeave;                                     // 0x10c(0x1)
	char                                                         pad0x3_DUJ3Y[0x3];                                 // 0x10d(0x3)
};


// Size 0x0 (Full Size[0x290] - InheritedSize[0x290]
class LookingAtQuestBookInputComponent: public LookingAtWieldableInputComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AimWeaponPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x460] - InheritedSize[0x440]
class CannonAnimInstance: public AnimInstance
{
public:
	char                                                         pad0x8_Q7C5I[0x8];                                 // 0x440(0x8)
	bool                                                         CannonIsFiring;                                    // 0x448(0x1)
	char                                                         pad0x3_RH7UK[0x3];                                 // 0x449(0x3)
	float                                                        CannonFiringAnimBlend;                             // 0x44c(0x4)
	float                                                        Pitch;                                             // 0x450(0x4)
	float                                                        YawRangeMapped;                                    // 0x454(0x4)
	char                                                         pad0x8_0C5DO[0x8];                                 // 0x458(0x8)
};


// Size 0xc8 (Full Size[0x468] - InheritedSize[0x3a0]
class PortalService: public Actor
{
public:
	char                                                         pad0x8_W2I50[0x8];                                 // 0x3a0(0x8)
	class PortalServiceParams*                                   Params;                                            // 0x3a8(0x8)
	TArray<struct ActivePortal>                                  ActivePortals;                                     // 0x3b0(0x10)
	TArray<struct PortalSpawningInfo>                            PortalSpawnInfos;                                  // 0x3c0(0x10)
	char                                                         pad0x98_MDRVD[0x98];                               // 0x3d0(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmotesInterface: public Interface
{
public:
};


// Size 0x1a0 (Full Size[0x2d8] - InheritedSize[0x138]
class ShadowAIFormComponent: public AthenaAIFormComponent
{
public:
	char                                                         FlameSpecificPhobia;                               // 0x138(0x1)
	char                                                         pad0x7_F9AZR[0x7];                                 // 0x139(0x7)
	class ParticleSystem*                                        LightStateConstantParticlesTemplate;               // 0x140(0x8)
	class ParticleSystem*                                        DarkStateConstantParticlesTemplate;                // 0x148(0x8)
	class ParticleSystem*                                        ToLightTransitionParticlesTemplate;                // 0x150(0x8)
	class ParticleSystem*                                        ToDarkTransitionParticlesTemplate;                 // 0x158(0x8)
	class PhysicalMaterial*                                      ClientLightStatePhysMaterialOverride;              // 0x160(0x8)
	class PhysicalMaterial*                                      ClientDarkStatePhysMaterialOverride;               // 0x168(0x8)
	class WwiseEvent*                                            StartDarkStateAudioLoopEvent;                      // 0x170(0x8)
	class WwiseEvent*                                            StopDarkStateAudioLoopEvent;                       // 0x178(0x8)
	TArray<Class>                                                ShadowBaseMaterials;                               // 0x180(0x10)
	struct FName                                                 ShadowShaderParamName;                             // 0x190(0x8)
	float                                                        LightStateShaderParamValue;                        // 0x198(0x4)
	float                                                        DarkStateShaderParamValue;                         // 0x19c(0x4)
	float                                                        ShaderParamBlendSpeed;                             // 0x1a0(0x4)
	struct FName                                                 SeedShaderParamName;                               // 0x1a4(0x8)
	int                                                          MaxSeedShaderValue;                                // 0x1ac(0x4)
	char                                                         CurrentState;                                      // 0x1b0(0x1)
	char                                                         pad0x7_KTPO8[0x7];                                 // 0x1b1(0x7)
	class ParticleSystemComponent*                               LightStateConstantParticleSystemComponent;         // 0x1b8(0x8)
	class ParticleSystemComponent*                               DarkStateConstantParticleSystemComponent;          // 0x1c0(0x8)
	TArray<class MaterialInstanceDynamic*>                       ShadowDynamicMaterialInstances;                    // 0x1c8(0x10)
	char                                                         pad0x78_5D1OH[0x78];                               // 0x1d8(0x78)
	TArray<struct FlameSpecificDataEntry>                        FlameSpecificDataMap;                              // 0x250(0x10)
	char                                                         pad0x70_RXN1B[0x70];                               // 0x260(0x70)
	bool                                                         IsInitializedWithFormData;                         // 0x2d0(0x1)
	char                                                         pad0x7_8EXUJ[0x7];                                 // 0x2d1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MovementModeInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class CountTooltipCustomizerComponent: public ActorComponent
{
public:
	char                                                         pad0x18_WGFD0[0x18];                               // 0xb8(0x18)
	class UClass*                                                CountType;                                         // 0xd0(0x8)
	struct FText                                                 DescriptionDisplayText;                            // 0xd8(0x38)
	bool                                                         DisplayBaseTooltipOnlyWhenCountIsAboveACertainValue; // 0x110(0x1)
	char                                                         pad0x3_65EMV[0x3];                                 // 0x111(0x3)
	float                                                        MinimumValueToDisplayModifiedTooltip;              // 0x114(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxCustomisationInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CollectorsChestSharedParamsDataAsset: public DataAsset
{
public:
	TArray<class CollectorsChestItemSlotDefinitionDataAsset*>    SlotDefinitions;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OwnedByItemSpawnerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShip_MojoClaude: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToCannonballNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EventLogDefinitionsDataAsset: public DataAsset
{
public:
	TArray<struct StatEventDefinition>                           StatDefinitions;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryItemUsePressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x140 (Full Size[0x1f8] - InheritedSize[0xb8]
class GuildInviterComponent: public ActorComponent
{
public:
	char                                                         pad0x81_IVTK9[0x81];                               // 0xb8(0x81)
	bool                                                         LimitInviteToOnePlayerAtATime;                     // 0x139(0x1)
	char                                                         pad0x6_4G20Q[0x6];                                 // 0x13a(0x6)
	TArray<struct Name>                                          TriggerEmoteNames;                                 // 0x140(0x10)
	float                                                        JoinGuildInteractionInputHoldTime;                 // 0x150(0x4)
	float                                                        GuildCardFadeDuration;                             // 0x154(0x4)
	struct Vector2D                                              GuildCardScreenSpaceOffsetRatio;                   // 0x158(0x8)
	float                                                        DelayForGuildCardInteraction;                      // 0x160(0x4)
	char                                                         pad0x94_IDZKS[0x94];                               // 0x164(0x94)
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class ShipDynamicsProviderActor: public Actor
{
public:
	char                                                         pad0x40_CH7TE[0x40];                               // 0x3a0(0x40)
};


// Size 0x490 (Full Size[0x548] - InheritedSize[0xb8]
class PlayerEntitlementComponent: public ActorComponent
{
public:
	char                                                         pad0x20_H3UFL[0x20];                               // 0xb8(0x20)
	struct PlayerEntitlementsCompact                             ReplicatedEntitlements;                            // 0xd8(0x38)
	struct PlayerEntitlements                                    Entitlements;                                      // 0x110(0x120)
	char                                                         pad0x28_U8YQP[0x28];                               // 0x230(0x28)
	TArray<class Class*>                                         AlreadyLoadedEntitlements;                         // 0x258(0x10)
	TArray<struct Guid>                                          InstanceIds;                                       // 0x268(0x10)
	char                                                         pad0x1e8_Y7KHY[0x1e8];                             // 0x278(0x1e8)
	struct FString                                               OwnersUserId;                                      // 0x460(0x10)
	char                                                         pad0x58_0LMT8[0x58];                               // 0x470(0x58)
	TArray<Class>                                                CrewTemporaryEntitlements;                         // 0x4c8(0x10)
	char                                                         pad0x8_I25IS[0x8];                                 // 0x4d8(0x8)
	class ShipMilestoneDescriptions*                             ShipMilestoneDescriptions;                         // 0x4e0(0x8)
	class GuildEntitlementDescriptions*                          GuildEntitlementDescriptions;                      // 0x4e8(0x8)
	char                                                         pad0x58_XG23M[0x58];                               // 0x4f0(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeepSeaRegionServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AthenaCharacterMovementCheatDetectionSettings: public Object
{
public:
	float                                                        MinLifetime;                                       // 0x28(0x4)
	float                                                        MinRatioLifetimeToLifetimeRawTimeDiscrepancy;      // 0x2c(0x4)
};


// Size 0x3d0 (Full Size[0x770] - InheritedSize[0x3a0]
class HullDamage2: public Actor
{
public:
	char                                                         pad0x18_PKG4H[0x18];                               // 0x3a0(0x18)
	float                                                        ExternalScarDecalMinSize;                          // 0x3b8(0x4)
	float                                                        ExternalScarDecalMaxSize;                          // 0x3bc(0x4)
	TArray<class Texture2D*>                                     ExternalScarDecals;                                // 0x3c0(0x10)
	float                                                        ExternalHoleDecalMinSize;                          // 0x3d0(0x4)
	float                                                        ExternalHoleDecalMaxSize;                          // 0x3d4(0x4)
	TArray<class MaterialInstance*>                              ExternalHoleDecals;                                // 0x3d8(0x10)
	class MaterialInstance*                                      InternalHoleDecal;                                 // 0x3e8(0x8)
	struct WeightedProbabilityRange                              DamageZoneDeckDistribution;                        // 0x3f0(0x20)
	class ParticleSystem*                                        InternalHitVfx;                                    // 0x410(0x8)
	class WwiseEvent*                                            Strain_DamageSfx;                                  // 0x418(0x8)
	class WwiseObjectPoolWrapper*                                StrainDamagePool;                                  // 0x420(0x8)
	char                                                         pad0x8_VVS0F[0x8];                                 // 0x428(0x8)
	struct HullDamageParamSet                                    InternalParamDefaults;                             // 0x430(0x60)
	TArray<struct HullDamageNamedParamSet>                       InternalParamNamedSets;                            // 0x490(0x10)
	class BakedDecalComponent*                                   ImpactDecalComponent;                              // 0x4a0(0x8)
	class ShipDamageableComponent*                               ShipDamageComponent;                               // 0x4a8(0x8)
	class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x4b0(0x8)
	class ShipLeakerComponent*                                   ShipLeakerComponent;                               // 0x4b8(0x8)
	class MobileInstancedStaticMeshComponent*                    InstancedPlanksComponent;                          // 0x4c0(0x8)
	char                                                         pad0x8_RWFWD[0x8];                                 // 0x4c8(0x8)
	struct Transform                                             HiddenPlankLocation;                               // 0x4d0(0x30)
	TArray<class HullDamagePointProxy*>                          Points;                                            // 0x500(0x10)
	char                                                         pad0xe0_THGHE[0xe0];                               // 0x510(0xe0)
	TArray<struct HullDamageHit>                                 HitsCircularBuffer;                                // 0x5f0(0x10)
	TArray<class RepairableComponent*>                           RepairComponents;                                  // 0x600(0x10)
	TArray<class DecalComponent*>                                ExternalHoleDecalComponents;                       // 0x610(0x10)
	TArray<class DecalComponent*>                                InternalHoleDecalComponents;                       // 0x620(0x10)
	char                                                         pad0x68_NFVVH[0x68];                               // 0x630(0x68)
	int                                                          ServerHitCount;                                    // 0x698(0x4)
	char                                                         pad0xd4_YYWES[0xd4];                               // 0x69c(0xd4)
};


// Size 0x50 (Full Size[0x88] - InheritedSize[0x38]
class AnimNotify_AthenaPlayParticleEffect: public AnimNotify
{
public:
	class Object*                                                PSTemplate;                                        // 0x38(0x8)
	struct FName                                                 SocketName;                                        // 0x40(0x8)
	struct Vector                                                LocationOffset;                                    // 0x48(0xc)
	struct Rotator                                               RotationOffset;                                    // 0x54(0xc)
	struct Vector                                                RelativeScale;                                     // 0x60(0xc)
	struct LinearColor                                           ColorTint;                                         // 0x6c(0x10)
	float                                                        CustomParameter;                                   // 0x7c(0x4)
	bool                                                         Attached;                                          // 0x80(0x1)
	bool                                                         KeepWorldScale;                                    // 0x80(0x1)
	bool                                                         OwnerOnlySee;                                      // 0x80(0x1)
	bool                                                         OwnerNoSee;                                        // 0x80(0x1)
	bool                                                         OwnedByWorld;                                      // 0x80(0x1)
	char                                                         pad0x3_FSD80[0x3];                                 // 0x81(0x3)
	char                                                         UnderwaterMode;                                    // 0x84(0x1)
	char                                                         CustomLocalSpaceMode;                              // 0x85(0x1)
	char                                                         pad0x2_JM5V8[0x2];                                 // 0x86(0x2)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class InteractOrDisengageReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapMarkId: public Object
{
public:
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ActionRuleTestActor: public Actor
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AlcoholStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FireableFromActorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GuildBrandingTexturesAsset: public DataAsset
{
public:
	TArray<struct GuildBrandingTextureCollection>                TextureCollections;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShelteredInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleQuestDisableSeaFortCompleteBannerStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    SpecifiedSeaFort;                                  // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailAnimInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SpawnVaultTreasureStep: public TaleQuestStep
{
public:
};


// Size 0x4c0 (Full Size[0x860] - InheritedSize[0x3a0]
class AggressiveGhostShip: public Actor
{
public:
	char                                                         pad0x50_2QFS4[0x50];                               // 0x3a0(0x50)
	class AggressiveGhostShipDataAsset*                          DataAsset;                                         // 0x3f0(0x8)
	class AggressiveGhostShipDifficultyDataAsset*                DifficultyDataAsset;                               // 0x3f8(0x8)
	class AggressiveGhostShipMineFormationsDataAsset*            MineFormationsDataAsset;                           // 0x400(0x8)
	class AggressiveGhostShipLocationDataAsset*                  LocationDataAsset;                                 // 0x408(0x8)
	class AggressiveGhostShipShotSelectionDataAsset*             ShotSelectionDataAsset;                            // 0x410(0x8)
	struct AggressiveGhostShipRewardData                         RewardsData;                                       // 0x418(0x18)
	TArray<struct AggressiveGhostShipRewardData>                 RewardsDataList;                                   // 0x430(0x10)
	class UClass*                                                RewardMarker;                                      // 0x440(0x8)
	class BoxComponent*                                          HitDetectionVolume;                                // 0x448(0x8)
	class ExplosionComponent*                                    ShipDamageExplosionComponent;                      // 0x450(0x8)
	class ExplosionComponent*                                    OnDeathPushBackExplosionComponent;                 // 0x458(0x8)
	class ShipDamageableComponent*                               ShipDamageableComponent;                           // 0x460(0x8)
	class NamedPointsComponent*                                  NamedPointsComponent;                              // 0x468(0x8)
	class SplineComponent*                                       SplineComponent;                                   // 0x470(0x8)
	float                                                        MineSpawnZOffset;                                  // 0x478(0x4)
	float                                                        PortalEntryDistanceOffset;                         // 0x47c(0x4)
	float                                                        PortalSpawnZOffset;                                // 0x480(0x4)
	struct Vector                                                PortalSpawnScale;                                  // 0x484(0xc)
	class CurveFloat*                                            ImpulseCurve;                                      // 0x490(0x8)
	struct AggressiveGhostShipSplineData                         SplineData;                                        // 0x498(0x50)
	char                                                         pad0x10_RWU2G[0x10];                               // 0x4e8(0x10)
	TArray<uintptr_t>                                            GhostShipsToIgnore;                                // 0x4f8(0x10)
	struct AggressiveGhostShipState                              ShipState;                                         // 0x508(0x8)
	bool                                                         HasMadeShipAppear;                                 // 0x510(0x1)
	char                                                         pad0x7_9YDTK[0x7];                                 // 0x511(0x7)
	class AggressiveGhostShipPoolResource*                       PoolingResource;                                   // 0x518(0x8)
	bool                                                         IsOverlappingShip;                                 // 0x520(0x1)
	char                                                         pad0x3_W2RS2[0x3];                                 // 0x521(0x3)
	float                                                        NumShotsLeftToKill;                                // 0x524(0x4)
	struct WeightedItemDescSpawner                               RewardSpawner;                                     // 0x528(0x58)
	bool                                                         IsInert;                                           // 0x580(0x1)
	char                                                         pad0x3_ZI84S[0x3];                                 // 0x581(0x3)
	float                                                        ExtraDistanceAroundSplineOffset;                   // 0x584(0x4)
	class AggressiveGhostShipVisualsDataAsset*                   VisualsDataAsset;                                  // 0x588(0x8)
	char                                                         TrackedActorType;                                  // 0x590(0x1)
	char                                                         pad0x7_Z9QV6[0x7];                                 // 0x591(0x7)
	TArray<class Class*>                                         AllProjectiles;                                    // 0x598(0x10)
	class StaticMeshComponent*                                   VisibleMesh;                                       // 0x5a8(0x8)
	class ParticleSystemComponent*                               HealthIndicatorEffect;                             // 0x5b0(0x8)
	TArray<class StaticMeshComponent*>                           ExtraMeshes;                                       // 0x5b8(0x10)
	char                                                         pad0x178_HD6S8[0x178];                             // 0x5c8(0x178)
	TArray<class MeshComponent*>                                 AllMeshes;                                         // 0x740(0x10)
	TArray<class MaterialInstanceDynamic*>                       AllMaterials;                                      // 0x750(0x10)
	char                                                         pad0x100_ZL3N2[0x100];                             // 0x760(0x100)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SendCrewToTunnelOfTheDamnedTaleStepDesc: public TaleQuestStepDesc
{
public:
	class TunnelDesc*                                            TunnelDesc;                                        // 0x80(0x8)
	struct QuestVariableBool                                     Success;                                           // 0x88(0x30)
};


// Size 0x318 (Full Size[0x6b8] - InheritedSize[0x3a0]
class CrewService: public Actor
{
public:
	char                                                         pad0xd8_R4BPD[0xd8];                               // 0x3a0(0xd8)
	TArray<struct Crew>                                          Crews;                                             // 0x478(0x10)
	char                                                         pad0x230_AON3L[0x230];                             // 0x488(0x230)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EntitlementHelpersBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PetAnimationDataStore: public AnimationData
{
public:
	class PetsAnimationData*                                     PetAnimationData;                                  // 0x28(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class StatusResponseAddManagedVulnerabilityLayer: public StatusResponse
{
public:
	struct FName                                                 VulnerabilityName;                                 // 0x38(0x8)
	class DamageableVulnerabilityLayer*                          VulnerabilityToApply;                              // 0x40(0x8)
	bool                                                         CancelVulnerabilityOnDeactivate;                   // 0x48(0x1)
	char                                                         pad0x3_5Y27O[0x3];                                 // 0x49(0x3)
	float                                                        VulnerabilityDuration;                             // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GetNearestPortalLocationTaleStep: public TaleQuestStep
{
public:
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class AsyncLoadoutRepairComponent: public ActorComponent
{
public:
	char                                                         pad0x58_XL7BW[0x58];                               // 0xb8(0x58)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TrinketMapDataAsset: public DataAsset
{
public:
	TArray<struct TrinketMetadata>                               TrinketAndMountPairs;                              // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class QuestBookPageList: public DataAsset
{
public:
	TArray<struct PageReference>                                 Pages;                                             // 0x28(0x10)
	TArray<struct StringAssetReference>                          InitialPages;                                      // 0x38(0x10)
};


// Size 0x1b0 (Full Size[0x268] - InheritedSize[0xb8]
class ReapersChestVFXComponent: public ActorComponent
{
public:
	char                                                         pad0x10_8N9CL[0x10];                               // 0xb8(0x10)
	int                                                          RopeBurnMaterialIndex;                             // 0xc8(0x4)
	struct FName                                                 RopeBurnMaterialPropertyName;                      // 0xcc(0x8)
	int                                                          ChestLidMaterialIndex;                             // 0xd4(0x4)
	struct FName                                                 ChestLidMaterialPropertyName;                      // 0xd8(0x8)
	class ParticleSystem*                                        DestructibleLidParticleSystem;                     // 0xe0(0x8)
	struct FName                                                 DestructibleLidParticleSystemSocketName;           // 0xe8(0x8)
	class ParticleSystem*                                        ChestBeamParticleSystem;                           // 0xf0(0x8)
	struct FName                                                 ChestBeamParticleSystemSocketName;                 // 0xf8(0x8)
	int                                                          ChestRunesMaterialIndex;                           // 0x100(0x4)
	struct FName                                                 ChestRunesMaterialPropertyName;                    // 0x104(0x8)
	char                                                         pad0x4_G96MV[0x4];                                 // 0x10c(0x4)
	class ParticleSystem*                                        AmbientMistParticleSystem;                         // 0x110(0x8)
	struct FName                                                 AmbientMistParticleSystemSocketName;               // 0x118(0x8)
	int                                                          ChestBonesMaterialIndex;                           // 0x120(0x4)
	struct FName                                                 ChestBonesMaterialPropertyName;                    // 0x124(0x8)
	float                                                        BoneLerpTime;                                      // 0x12c(0x4)
	class ParticleSystem*                                        SpawnBurstParticleSystem;                          // 0x130(0x8)
	struct FName                                                 SpawnBurstParticleSystemSocketName;                // 0x138(0x8)
	class ParticleSystem*                                        UnsealingSparksAndSmokeParticleSystem;             // 0x140(0x8)
	struct FName                                                 UnsealingSparksAndSmokeParticleSystemSocketName;   // 0x148(0x8)
	class WwiseEvent*                                            PlaySealBreakSFX;                                  // 0x150(0x8)
	class WwiseEvent*                                            StopSealBreakSFX;                                  // 0x158(0x8)
	class WwiseEvent*                                            PlayLidExplosionSFX;                               // 0x160(0x8)
	class WwiseEvent*                                            PlaySpawnBurstSFX;                                 // 0x168(0x8)
	TArray<class ParticleSystemComponent*>                       AmbientMistParticleSystemComponents;               // 0x170(0x10)
	class ParticleSystemComponent*                               SpawnBurstParticleSystemComponent;                 // 0x180(0x8)
	TArray<class MaterialInstanceDynamic*>                       ChestRunesMaterialInstances;                       // 0x188(0x10)
	TArray<class MaterialInstanceDynamic*>                       ChestBonesMaterialInstances;                       // 0x198(0x10)
	TArray<class MaterialInstanceDynamic*>                       RopeBurnMaterialInstances;                         // 0x1a8(0x10)
	TArray<class MaterialInstanceDynamic*>                       ChestLidMaterialInstances;                         // 0x1b8(0x10)
	char                                                         pad0x8_SJ2RN[0x8];                                 // 0x1c8(0x8)
	TArray<class StaticMeshMemoryConstraintComponent*>           ChestContentsStaticMeshComponents;                 // 0x1d0(0x10)
	class MemoryConstrainedMeshInitializer*                      ChestMMCMeshInitializer;                           // 0x1e0(0x8)
	struct StringAssetReference                                  StaticMeshAssetReference;                          // 0x1e8(0x10)
	TArray<class MaterialInterface*>                             Materials;                                         // 0x1f8(0x10)
	class UClass*                                                MMC_FallbackCategory;                              // 0x210(0x8)
	class UClass*                                                MMC_Budget;                                        // 0x218(0x8)
	TArray<struct StringAssetReference>                          MMC_FallbackMaterials;                             // 0x220(0x10)
	char                                                         pad0x38_CZ56K[0x38];                               // 0x230(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingFloatInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkeletonCampServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableInterface: public Interface
{
public:
};


// Size 0x118 (Full Size[0x4b8] - InheritedSize[0x3a0]
class SceneDialogueCoordinator: public Actor
{
public:
	char                                                         pad0x10_FBYYL[0x10];                               // 0x3a0(0x10)
	TArray<class Actor*>                                         LinkedActors;                                      // 0x3b0(0x10)
	class SceneDialogueData*                                     DialogueData;                                      // 0x3c0(0x8)
	TArray<struct Text>                                          LocalisableNames;                                  // 0x3c8(0x10)
	float                                                        DefaultMessageDistance;                            // 0x3d8(0x4)
	char                                                         pad0xdc_Z9OAJ[0xdc];                               // 0x3dc(0xdc)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class RemoveMechanismTriggerStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	struct QuestVariableActor                                    Trigger;                                           // 0xb0(0x30)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class TutorialComponent: public ActorComponent
{
public:
	char                                                         pad0x10_OPYLM[0x10];                               // 0xb8(0x10)
	bool                                                         HasBegun;                                          // 0xc8(0x1)
	char                                                         pad0x7_MLLXR[0x7];                                 // 0xc9(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EventFortKeyInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class CharacterAudioFootfallControllerParams: public DataAsset
{
public:
	struct FName                                                 PlayerSpeedRtpcName;                               // 0x28(0x8)
	float                                                        MinPlayerSpeedRtpcValue;                           // 0x30(0x4)
	float                                                        MaxPlayerSpeedRtpcValue;                           // 0x34(0x4)
	struct FName                                                 WadingRtpcName;                                    // 0x38(0x8)
	float                                                        MinWadingWwiseRtpcValue;                           // 0x40(0x4)
	float                                                        MaxWadingWwiseRtpcValue;                           // 0x44(0x4)
	struct FName                                                 FootstepSquelchRtpcName;                           // 0x48(0x8)
	struct FName                                                 PlayerPerspectiveRtpcName;                         // 0x50(0x8)
	float                                                        PlayerPerspectiveRtpcValue;                        // 0x58(0x4)
	float                                                        RemotePlayerPerspectiveRtpcValue;                  // 0x5c(0x4)
	class WwiseEvent*                                            FootfallEvent;                                     // 0x60(0x8)
	class WwiseEvent*                                            FootfallPacingEvent;                               // 0x68(0x8)
	class WwiseEvent*                                            CharacterCleanLandEvent;                           // 0x70(0x8)
	class WwiseEvent*                                            CharacterJumpEvent;                                // 0x78(0x8)
	class WwiseEvent*                                            CharacterSplashEvent;                              // 0x80(0x8)
	class WwiseObjectPoolWrapper*                                FootfallsPool;                                     // 0x88(0x8)
	struct FName                                                 VerticalSpeedRtpcName;                             // 0x90(0x8)
	float                                                        MinVerticalSpeedRtpcValue;                         // 0x98(0x4)
	float                                                        MaxVerticalSpeedRtpcValue;                         // 0x9c(0x4)
	struct FName                                                 BrokenLegSwitchGroup;                              // 0xa0(0x8)
	struct FName                                                 BrokenLegSwitchBroken;                             // 0xa8(0x8)
	struct FName                                                 FootwareCategorySwitchGroup;                       // 0xb0(0x8)
	struct FName                                                 FootwareCategoryBoots;                             // 0xb8(0x8)
	struct FName                                                 FootwareCategoryBarefoot;                          // 0xc0(0x8)
	struct FName                                                 FootwareCategoryPegleg;                            // 0xc8(0x8)
	struct FName                                                 FootfallEmoteSwitchGroup;                          // 0xd0(0x8)
	struct FName                                                 PlayingEmoteSwitch;                                // 0xd8(0x8)
	struct FName                                                 HotFloorSwitchGroup;                               // 0xe0(0x8)
	struct FName                                                 HotFloorActive;                                    // 0xe8(0x8)
	struct FName                                                 FootfallBuriedTreasureRTPCName;                    // 0xf0(0x8)
	float                                                        DecalOverlapRadius;                                // 0xf8(0x4)
	float                                                        SteppingOnDecalRTPCValue;                          // 0xfc(0x4)
	float                                                        NotSteppingOnDecalRTPCValue;                       // 0x100(0x4)
	struct FName                                                 PirateTypeSwitchGroup;                             // 0x104(0x8)
	struct FName                                                 PirateTypeGhost;                                   // 0x10c(0x8)
	struct FName                                                 PirateTypeSkeleton;                                // 0x114(0x8)
	char                                                         pad0x4_STB8C[0x4];                                 // 0x11c(0x4)
};


// Size 0xd8 (Full Size[0x478] - InheritedSize[0x3a0]
class BeckonService: public Actor
{
public:
	char                                                         pad0x8_D85B8[0x8];                                 // 0x3a0(0x8)
	class BeckonDataAsset*                                       BeckonDataAsset;                                   // 0x3a8(0x8)
	char                                                         pad0xc8_T0HH9[0xc8];                               // 0x3b0(0xc8)
};


// Size 0x18 (Full Size[0x188] - InheritedSize[0x170]
class IterativeCanvasRenderTarget2D: public TextureRenderTarget2D
{
public:
	char                                                         pad0x18_C3V8X[0x18];                               // 0x170(0x18)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class TornMapParams: public DataAsset
{
public:
	TArray<struct TornMapTearingParams>                          TearingParams;                                     // 0x28(0x10)
	struct StringAssetReference                                  MarkTexture;                                       // 0x38(0x10)
	float                                                        MarkScale;                                         // 0x48(0x4)
	char                                                         pad0x4_0MVXF[0x4];                                 // 0x4c(0x4)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class CutsceneResponseSheet: public Object
{
public:
	char                                                         pad0x10_2TOAF[0x10];                               // 0x28(0x10)
	TArray<Class>                                                RelevantActorClasses;                              // 0x38(0x10)
	class Object*                                                CutsceneInstigator;                                // 0x58(0x8)
	bool                                                         IsActive;                                          // 0x60(0x1)
	char                                                         pad0x1f_LWPEM[0x1f];                               // 0x61(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadableProjectileInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChainLightningReceiverInterface: public Interface
{
public:
};


// Size 0x150 (Full Size[0x1c0] - InheritedSize[0x70]
class BTService_ObserveTargetReceivedDamage: public BTService
{
public:
	struct BlackboardKeySelector                                 ObservedActorKey;                                  // 0x70(0x28)
	struct BlackboardKeySelector                                 HasObservedActorReceivedSufficientDamageResultKey; // 0x98(0x28)
	struct AIDataProviderFloatValue                              ObservedActorDamageThreshold;                      // 0xc0(0x30)
	char                                                         pad0xd0_QDY47[0xd0];                               // 0xf0(0xd0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FeedingInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x670] - InheritedSize[0x640]
class SwingMechanismCordRenderComponent: public CordRenderComponent
{
public:
	float                                                        Length;                                            // 0x638(0x4)
	struct Vector                                                StartOffset;                                       // 0x63c(0xc)
	struct Vector                                                EndOffset;                                         // 0x648(0xc)
	char                                                         pad0x1c_PXGEJ[0x1c];                               // 0x654(0x1c)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SleepStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x440] - InheritedSize[0x3a0]
class TallTaleService: public Actor
{
public:
	char                                                         pad0x58_2TDD0[0x58];                               // 0x3a0(0x58)
	class TaleRankRequirements*                                  RankRequirementsAsset;                             // 0x3f8(0x8)
	class TaleBlockedByFactionDataAsset*                         TaleBlockedByFactionDataAsset;                     // 0x400(0x8)
	class TaleBlockedByPlayModeVariantDataAsset*                 TaleBlockedByPlayModeVariantDataAsset;             // 0x408(0x8)
	TArray<struct Guid>                                          InTaleCrews;                                       // 0x410(0x10)
	TArray<class QuestBook*>                                     ActiveLocalPlayerQuestBooks;                       // 0x420(0x10)
	TArray<class QuestBook*>                                     ActiveRemotePlayerQuestBooks;                      // 0x430(0x10)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class SequencerCameraDockingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_GANEN[0x8];                                 // 0xb8(0x8)
	class Actor*                                                 OldViewTarget;                                     // 0xc0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipStorageJettisonServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialStashMapInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseLimpingCurse: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InvasionTunnelDioramaSpawnCondition: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UserBannedHandlerRetrievalInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class LoadableProjectileComponent: public ActorComponent
{
public:
	char                                                         pad0x8_759Z5[0x8];                                 // 0xb8(0x8)
	class UClass*                                                ProjectileType;                                    // 0xc0(0x8)
	class ParticleSystem*                                        LoadedItemParticleTemplate;                        // 0xc8(0x8)
	class ParticleSystem*                                        LaunchParticleTemplate;                            // 0xd0(0x8)
	bool                                                         LaunchParticleDoReflections;                       // 0xd8(0x1)
	bool                                                         LaunchParticleAttachToBarrel;                      // 0xd9(0x1)
	char                                                         pad0x6_8RXBU[0x6];                                 // 0xda(0x6)
	class StaticMesh*                                            LoadedItemStaticMeshTemplate;                      // 0xe0(0x8)
	struct Vector                                                LoadedItemOffsetLocation;                          // 0xe8(0xc)
	struct Rotator                                               LoadedItemOffsetRotation;                          // 0xf4(0xc)
	float                                                        LoadedFuseTimer;                                   // 0x100(0x4)
	char                                                         pad0x4_IH6HF[0x4];                                 // 0x104(0x4)
	class WwiseObjectPoolWrapper*                                FuseSoundWisePool;                                 // 0x108(0x8)
	class WwiseEvent*                                            FuseActivateSoundPlayEvent;                        // 0x110(0x8)
	class WwiseEvent*                                            FuseSoundPlayEvent;                                // 0x118(0x8)
	class WwiseEvent*                                            FuseSoundStopEvent;                                // 0x120(0x8)
	class Object*                                                FuseParticleSystem;                                // 0x128(0x8)
	struct StringAssetReference                                  FuseMeshAssetReference;                            // 0x130(0x10)
	struct PlayerStat                                            FiredFromCannonStat;                               // 0x140(0x4)
	struct PlayerStat                                            FiredFromCannonShipStat;                           // 0x144(0x4)
};


// Size 0x18 (Full Size[0xad8] - InheritedSize[0xac0]
class AthenaGameEngine: public RareGameEngine
{
public:
	char                                                         pad0x8_0JIB7[0x8];                                 // 0xac0(0x8)
	class AthenaGameEngineSettings*                              EngineSettings;                                    // 0xac8(0x8)
	char                                                         pad0x8_1A9F9[0x8];                                 // 0xad0(0x8)
};


// Size 0x108 (Full Size[0x4b8] - InheritedSize[0x3b0]
class ShopkeeperInteractionProxy: public ModalInteraction
{
public:
	class ShopDesc*                                              ShopDesc;                                          // 0x3b0(0x8)
	char                                                         pad0x100_E3X5I[0x100];                             // 0x3b8(0x100)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CompanyDataList: public DataAsset
{
public:
	TArray<class CompanyData*>                                   ClientCompanyData;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestBoarsServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageVoyageProviderInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x448] - InheritedSize[0x3a0]
class StarChartStarCluster: public Actor
{
public:
	char                                                         pad0x8_UP4DW[0x8];                                 // 0x3a0(0x8)
	TArray<class StarPointComponent*>                            StarPointLightReceptors;                           // 0x3a8(0x10)
	TArray<String>                                               ReplicatedStarNames;                               // 0x3b8(0x10)
	TArray<char>                                                 ReplicatedStarStates;                              // 0x3c8(0x10)
	class LightSensitiveComponent*                               LightSensitiveComponent;                           // 0x3d8(0x8)
	char                                                         pad0x68_DWLDA[0x68];                               // 0x3e0(0x68)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAnimationSinkingTunnelDataAsset: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          Animations;                                        // 0x28(0x10)
	class UClass*                                                SinkingTunnelAnimationStateId;                     // 0x38(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ToggleCapstanStatus: public StatusBase
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class IslandDataAsset: public DataAsset
{
public:
	bool                                                         AllowDefaultIdentityTransform;                     // 0x28(0x1)
	char                                                         pad0x3_CBH1C[0x3];                                 // 0x29(0x3)
	float                                                        SpawningGracePeriod;                               // 0x2c(0x4)
	class AISpawner*                                             AncientSkeletonSpawner;                            // 0x30(0x8)
	TArray<class IslandDataDefaultAssetEntry*>                   IslandDefaultDataEntries;                          // 0x38(0x10)
	TArray<class IslandDataAssetEntry*>                          IslandDataEntries;                                 // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanBeMovedByActorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipNamesDataAsset: public DataAsset
{
public:
	TArray<struct AggressiveGhostShipNameBucket>                 NameBuckets;                                       // 0x28(0x10)
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class FragileComponent: public ActorComponent
{
public:
	class FragileComponentDataAsset*                             FragileComponentDataAsset;                         // 0xb8(0x8)
	char                                                         pad0xa0_NW6UF[0xa0];                               // 0xc0(0xa0)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class IslandReservationComponent: public ActorComponent
{
public:
	TArray<struct StoryFlag>                                     ReservationStories;                                // 0xb8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimingDownSightsInterface: public Interface
{
public:
};


// Size 0xb0 (Full Size[0x660] - InheritedSize[0x5b0]
class TestDelayedMeshCharacter: public Character
{
public:
	char                                                         pad0xb0_1DLPL[0xb0];                               // 0x5b0(0xb0)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SpotlightFocusBeamPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class NamedPointsContainer: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	class NamedPointsComponent*                                  NamedPoints;                                       // 0x3a8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SplashedStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PartConnectionMock: public Object
{
public:
	char                                                         pad0x10_KZOU2[0x10];                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhysicsCollisionFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class GoalDrivenCharacterActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	struct ControlObjectActionStateParams                        ControlObjectParams;                               // 0x3a0(0x38)
	char                                                         pad0x18_31RDQ[0x18];                               // 0x3d8(0x18)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WieldableBookPageLayout: public DataAsset
{
public:
	TArray<struct WieldableBookNamedWidgetTexture>               Images;                                            // 0x28(0x10)
	TArray<struct WieldableBookNamedWidgetText>                  GeneralText;                                       // 0x38(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoOctaveUpNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CrewSessionConfig: public Object
{
public:
	TArray<struct CrewSessionTemplate>                           SessionTemplates;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToLanternNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwingMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthRegenerationPoolInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class ArenaVendorShip: public Actor
{
public:
	class SceneComponent*                                        ArenaVendorShipRootComponent;                      // 0x3a0(0x8)
	class ContestMerchantSpawnerComponent*                       ContestMerchantSpawnerComponent;                   // 0x3a8(0x8)
	class GenericWorldMapMarker*                                 VendorShipWorldMarkerComponent;                    // 0x3b0(0x8)
	class SphereComponent*                                       VendorDeadZoneComponent;                           // 0x3b8(0x8)
	float                                                        VendorShipDeadZoneRadius;                          // 0x3c0(0x4)
	char                                                         pad0x4_XX8OK[0x4];                                 // 0x3c4(0x4)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class ShipBuilder: public Object
{
public:
	char                                                         pad0x30_3DGVU[0x30];                               // 0x28(0x30)
	class Ship*                                                  Template;                                          // 0x58(0x8)
	char                                                         pad0x40_C6DAF[0x40];                               // 0x60(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismsServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class TunnelWorldConfig: public DataAsset
{
public:
	TArray<struct Vector2D>                                      TunnelLocations;                                   // 0x28(0x10)
	TArray<struct TunnelLevelDefinition>                         TunnelLevelDefinitions;                            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class EnvQueryGenerator_IslandAISpawnLocations: public EnvQueryGenerator
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class FireStatStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariablePlayerStat                               Stat;                                              // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstigatorTrackerInterface: public Interface
{
public:
};


// Size 0x1c8 (Full Size[0x568] - InheritedSize[0x3a0]
class SpawnAIWaveMechanismAction: public Actor
{
public:
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3a0(0x8)
	class AIProgressiveWavesSpawner*                             ProgressiveWavesSpawnerTemplate;                   // 0x3a8(0x8)
	class AIProgressiveWavesSpawner*                             OnePlayerCrewSpawnerTemplateOverride;              // 0x3b0(0x8)
	class AIProgressiveWavesSpawner*                             TwoPlayerCrewSpawnerTemplateOverride;              // 0x3b8(0x8)
	class AIProgressiveWavesSpawner*                             ThreePlayerCrewSpawnerTemplateOverride;            // 0x3c0(0x8)
	class AIProgressiveWavesSpawner*                             FourOrMorePlayerCrewSpawnerTemplateOverride;       // 0x3c8(0x8)
	int                                                          PerCrewAISpawnCooldownTimeInSeconds;               // 0x3d0(0x4)
	int                                                          GlobalCooldownInSeconds;                           // 0x3d4(0x4)
	float                                                        SpawnRollChance;                                   // 0x3d8(0x4)
	char                                                         pad0x4_Z044X[0x4];                                 // 0x3dc(0x4)
	class Actor*                                                 ActorWithTargetAIRegion;                           // 0x3e0(0x8)
	float                                                        ResetSpawnerDelay;                                 // 0x3e8(0x4)
	char                                                         pad0xdc_980JE[0xdc];                               // 0x3ec(0xdc)
	class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x4c8(0x8)
	class AISpawnerMusicZoneComponent*                           MusicZoneComponent;                                // 0x4d0(0x8)
	char                                                         pad0x90_NR74A[0x90];                               // 0x4d8(0x90)
};


// Size 0x220 (Full Size[0x5c0] - InheritedSize[0x3a0]
class Sail: public Actor
{
public:
	char                                                         pad0x10_6QK6M[0x10];                               // 0x3a0(0x10)
	class SkeletalMeshComponent*                                 Mesh;                                              // 0x3b0(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x3b8(0x10)
	struct Vector                                                PositionForSailDynamicsRelativeToSailActor;        // 0x3c8(0xc)
	char                                                         pad0x4_X2FA4[0x4];                                 // 0x3d4(0x4)
	class BaseSailDynamicsDesc*                                  SailDynamicsDesc;                                  // 0x3d8(0x8)
	float                                                        MinRelativeWindSpdForFullVisibleInflation;         // 0x3e0(0x4)
	float                                                        BaseWindStrength;                                  // 0x3e4(0x4)
	class CurveFloat*                                            WindToSailAngleEfficiencyCurve;                    // 0x3e8(0x8)
	class CurveFloat*                                            AlternateWindToSailAngleEfficiencyCurve;           // 0x3f0(0x8)
	struct FeatureFlag                                           AlternateSailForceToggle;                          // 0x3f8(0xc)
	float                                                        NormalBillowLimit;                                 // 0x404(0x4)
	float                                                        PerfectBillowValue;                                // 0x408(0x4)
	float                                                        PerfectBillowThreshold;                            // 0x40c(0x4)
	float                                                        SailLoweredPerfectWindThreshold;                   // 0x410(0x4)
	float                                                        BlendSpeed;                                        // 0x414(0x4)
	struct FName                                                 FurlMaterialParameterName;                         // 0x418(0x8)
	struct FName                                                 SuperBillowParameterName;                          // 0x420(0x8)
	float                                                        AnimationSailHeightScalar;                         // 0x428(0x4)
	char                                                         pad0x118_UL4NI[0x118];                             // 0x42c(0x118)
	float                                                        DamageScalar;                                      // 0x544(0x4)
	char                                                         pad0x1_SHM3I[0x1];                                 // 0x548(0x1)
	bool                                                         HasMultipleExtraWindApplied;                       // 0x549(0x1)
	char                                                         pad0x76_JHND4[0x76];                               // 0x54a(0x76)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerActivityLifetimeRuleCatalogueDataAsset: public DataAsset
{
public:
	TArray<struct PlayerActivityLifetimeRule>                    PlayerActivityLifetimeRules;                       // 0x28(0x10)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class VoteAudioComponent: public ActorComponent
{
public:
	char                                                         pad0x8_3DOCX[0x8];                                 // 0xb8(0x8)
	class WwiseEvent*                                            VoteCastAudioEvent;                                // 0xc0(0x8)
	class WwiseEvent*                                            VoteRemovedAudioEvent;                             // 0xc8(0x8)
	class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0xd0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClassFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class ItemSpawnData: public Object
{
public:
	char                                                         pad0x60_X6EOL[0x60];                               // 0x28(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HoldToUseInputVisualModifier: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DeferralReasonPopUpNotificationDataAsset: public DataAsset
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
	TArray<struct DeferralReasonPopUpNotificationInfo>           DeferralReasonPopUpNotifications;                  // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShipsEncounterCloud: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x490 (Full Size[0x4b8] - InheritedSize[0x28]
class MigrationService: public Object
{
public:
	char                                                         pad0x20_7TH3U[0x20];                               // 0x28(0x20)
	float                                                        BeaconRange;                                       // 0x48(0x4)
	float                                                        TunnelOfTheDamnedBeaconRange;                      // 0x4c(0x4)
	float                                                        MigrationSetupRequestTimeoutInSeconds;             // 0x50(0x4)
	char                                                         pad0x4_C529T[0x4];                                 // 0x54(0x4)
	TArray<class Class*>                                         BeaconActorClasses;                                // 0x58(0x10)
	TArray<class Class*>                                         CollectedActorClasses;                             // 0x68(0x10)
	char                                                         pad0x440_6ZHIJ[0x440];                             // 0x78(0x440)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseMapTableActionStateId: public ActionStateId
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class TelemetrySubjectComponent: public ActorComponent
{
public:
	char                                                         pad0x8_Q44G5[0x8];                                 // 0xb8(0x8)
	struct FString                                               SubjectName;                                       // 0xc0(0x10)
	struct FString                                               SubjectID;                                         // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionEastNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateIdentityBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class CustomizableTriggerService: public Object
{
public:
	char                                                         pad0x58_C0DUK[0x58];                               // 0x28(0x58)
	class World*                                                 World;                                             // 0x80(0x8)
	char                                                         pad0x8_GY8ZL[0x8];                                 // 0x88(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NoiseMakerControllerParams: public DataAsset
{
public:
	float                                                        LookupRadiusAroundListener;                        // 0x28(0x4)
	int                                                          MaxAmountOfRemoteNoiseMakers;                      // 0x2c(0x4)
	TArray<class WwiseObjectPoolWrapper*>                        WwiseFoliagePoolWrappers;                          // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterTypeAvailabilityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileServiceHitRegInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AnimNotifyState_EnableHappyReact: public AnimNotifyState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockerBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AirGivingServiceInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class GetIslandLocationStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableName                                     IslandName;                                        // 0x80(0x30)
	struct QuestVariableVector                                   IslandLocation;                                    // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NameplateVisibilityInfluencerInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class ModifiedStorageSwitchesDataAsset: public DataAsset
{
public:
	struct SwitchFlag                                            ReducedStorageSwitch;                              // 0x28(0x10)
	struct SwitchFlag                                            ExpandedStorageSwitch;                             // 0x38(0x10)
	struct ModifiedStorageSwitch                                 SmallShipModifiedStorage;                          // 0x48(0x18)
	struct ModifiedStorageSwitch                                 MediumShipModifiedStorage;                         // 0x60(0x18)
	struct ModifiedStorageSwitch                                 LargeShipModifiedStorage;                          // 0x78(0x18)
	struct ModifiedStorageSwitch                                 ReapersTributeShipModifiedStorage;                 // 0x90(0x18)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PrebakedIslandAsset: public DataAsset
{
public:
	TArray<struct Island>                                        IslandEntries;                                     // 0x28(0x10)
	struct Vector2D                                              WorldMapMin;                                       // 0x38(0x8)
	struct Vector2D                                              WorldMapMax;                                       // 0x40(0x8)
};


// Size 0x78 (Full Size[0x130] - InheritedSize[0xb8]
class PlayerHeroStatsComponent: public ActorComponent
{
public:
	TArray<struct PlayerHeroStatUnit>                            HeroStats;                                         // 0xb8(0x10)
	TArray<Int64 ServerValues>                                   ServerValues;                                      // 0xc8(0x10)
	char                                                         pad0x58_YC0QB[0x58];                               // 0xd8(0x58)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MoveRightAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DeliverableRedirectionNonEmptyCollectorsChestContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleRemoveStormAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CustomScoreVariantBase: public Object
{
public:
	char                                                         pad0x18_8YMXA[0x18];                               // 0x28(0x18)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class GetVoyageDifficultyFromRankStepDesc: public TaleQuestStepDesc
{
public:
	char                                                         VoyageType;                                        // 0x80(0x1)
	char                                                         pad0x7_CKOWN[0x7];                                 // 0x81(0x7)
	struct QuestVariableInt                                      Difficulty;                                        // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCLoadedOnClientServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FaunaBreed: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipUtilitiesFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatusResponseHealthChangeOverTime: public StatusResponse
{
public:
	float                                                        HealthChangePerSecond;                             // 0x38(0x4)
	char                                                         HealthChangedReason;                               // 0x3c(0x1)
	char                                                         pad0x3_RTFUM[0x3];                                 // 0x3d(0x3)
	class UClass*                                                DamagerTypeForDamageModification;                  // 0x40(0x8)
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class VolumeTrapTrigger: public Actor
{
public:
	class BoxComponent*                                          TriggerVolume;                                     // 0x3a0(0x8)
	char                                                         pad0x18_GNPC1[0x18];                               // 0x3a8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCHideInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialManagerInputReceiverInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ApplicationSettings: public Object
{
public:
	int                                                          GameLanguage;                                      // 0x28(0x4)
	char                                                         pad0x4_53IA1[0x4];                                 // 0x2c(0x4)
	int                                                          SpatialAudioEnableEnhanced;                        // 0x30(0x4)
	int                                                          AudioOutputFormat;                                 // 0x34(0x4)
	int                                                          ImmerseHeadsetId;                                  // 0x38(0x4)
	char                                                         pad0x4_KEDSX[0x4];                                 // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class WorldMarkerBeaconActor: public Actor
{
public:
	char                                                         pad0x8_J4N3Z[0x8];                                 // 0x3a0(0x8)
	class BaseWorldMarker*                                       MarkerDataObject;                                  // 0x3a8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandWorldSettingsInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0xf8] - InheritedSize[0x70]
class BTService_DetermineSelectedAllyTarget: public BTService
{
public:
	struct BlackboardKeySelector                                 AllyTargetActorKey;                                // 0x70(0x28)
	struct AIDataProviderFloatValue                              ServiceActiveParam;                                // 0x98(0x30)
	char                                                         pad0x30_HAXG6[0x30];                               // 0xc8(0x30)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class OpenChatboxNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x108 (Full Size[0x1c0] - InheritedSize[0xb8]
class PointOfInterestTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7OIDU[0x8];                                 // 0xb8(0x8)
	float                                                        SecondsBetweenRevelations;                         // 0xc0(0x4)
	float                                                        SecondsAfterInertStateWhereNotificationsAreIgnored; // 0xc4(0x4)
	char                                                         pad0xf8_2D7HM[0xf8];                               // 0xc8(0xf8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestRandomRequiredItemsDataAsset: public DataAsset
{
public:
	TArray<struct MerchantQuestCategoryGroup>                    CategoryGroups;                                    // 0x28(0x10)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class AthenaAnimationData: public AnimationData
{
public:
	class AthenaAnimationDeathDataAsset*                         DeathDataAsset;                                    // 0x28(0x8)
	class AthenaAnimationUndoRepairDataAsset*                    UndoRepairAsset;                                   // 0x30(0x8)
	class AthenaAnimationSittingDataAsset*                       SittingAsset;                                      // 0x38(0x8)
	TArray<struct FallbackSittingDataAsset>                      FallBackSittingData;                               // 0x40(0x10)
	bool                                                         UseCorrectionSittingDataAsset;                     // 0x50(0x1)
	char                                                         pad0x7_3CQ7B[0x7];                                 // 0x51(0x7)
	class AthenaAnimationWaterSlideDataAsset*                    WaterSlideDataAsset;                               // 0x58(0x8)
	class AthenaAnimationZiplineDataAsset*                       ZiplineDataAsset;                                  // 0x60(0x8)
	class AthenaAnimationItemListingAsset*                       ItemListingAsset;                                  // 0x68(0x8)
	class BalanceableWalkwayAnimationDataAsset*                  WalkwayDataAsset;                                  // 0x70(0x8)
	class CrouchingAnimationDataAsset*                           CrouchingDataAsset;                                // 0x78(0x8)
	class PortableHarpoonGrappleAnimationDataAsset*              GrapplingDataAsset;                                // 0x80(0x8)
	char                                                         pad0x8_T4GS3[0x8];                                 // 0x88(0x8)
};


// Size 0x110 (Full Size[0x1c8] - InheritedSize[0xb8]
class DitherComponent: public ActorComponent
{
public:
	char                                                         pad0x8_IEQ6N[0x8];                                 // 0xb8(0x8)
	bool                                                         FindMeshOnOwner;                                   // 0xc0(0x1)
	char                                                         pad0x3_A883D[0x3];                                 // 0xc1(0x3)
	float                                                        FadeTime;                                          // 0xc4(0x4)
	char                                                         pad0x10_9EHD1[0x10];                               // 0xc8(0x10)
	bool                                                         PurgeOverrideMatsOnDynamicMatMeshLoaded;           // 0x1c4(0x1)
	bool                                                         FadeInOnStart;                                     // 0x1c5(0x1)
	char                                                         pad0x2_5SAAN[0x2];                                 // 0x1c6(0x2)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMouseYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x28 (Full Size[0x3d8] - InheritedSize[0x3b0]
class ShipVoyageProposalContainerInteraction: public ModalInteraction
{
public:
	char                                                         pad0x28_J3R6P[0x28];                               // 0x3b0(0x28)
};


// Size 0x3b8 (Full Size[0x758] - InheritedSize[0x3a0]
class Campfire: public Actor
{
public:
	char                                                         pad0x20_7Z67Z[0x20];                               // 0x3a0(0x20)
	class StaticMeshComponent*                                   UnbuiltMesh;                                       // 0x3c0(0x8)
	class StaticMeshComponent*                                   BuiltMesh;                                         // 0x3c8(0x8)
	class ParticleSystemComponent*                               FireParticleSystem;                                // 0x3d0(0x8)
	class PointLightComponent*                                   PointLight;                                        // 0x3d8(0x8)
	class OverlapTriggerComponent*                               OverlapTrigger;                                    // 0x3e0(0x8)
	class BoxComponent*                                          BoxCollider;                                       // 0x3e8(0x8)
	class LightWeightStatusEffectManagerComponent*               StatusEffectManagerComponent;                      // 0x3f0(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x3f8(0x8)
	class ActionRulesInteractableComponent*                      InteractableComponent;                             // 0x400(0x8)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x408(0x8)
	class ShelteredComponent*                                    ShelteredComponent;                                // 0x410(0x8)
	class WaterExposureComponent*                                WaterExposureComponent;                            // 0x418(0x8)
	class FlammableComponent*                                    FlammableComponent;                                // 0x420(0x8)
	class SoakableComponent*                                     SoakableComponent;                                 // 0x428(0x8)
	class ChildActorComponent*                                   CookerChildActorComponent;                         // 0x430(0x8)
	class Object*                                                ExtinguishedVFX;                                   // 0x438(0x8)
	bool                                                         HasSmoke;                                          // 0x440(0x1)
	char                                                         pad0x3_L8BPW[0x3];                                 // 0x441(0x3)
	struct Vector                                                SmokeOffset;                                       // 0x444(0xc)
	float                                                        BurnDownTimeSeconds;                               // 0x450(0x4)
	float                                                        BurnOutTimeSoakedSeconds;                          // 0x454(0x4)
	float                                                        AddWoodHoldTime;                                   // 0x458(0x4)
	struct FName                                                 WwiseEmitterName;                                  // 0x45c(0x8)
	char                                                         pad0x4_6P00E[0x4];                                 // 0x464(0x4)
	class WwiseEvent*                                            IgnitedWwiseEvent;                                 // 0x468(0x8)
	class WwiseEvent*                                            ExtinguishedWwiseEvent;                            // 0x470(0x8)
	class WwiseEvent*                                            BurnDownWwiseEvent;                                // 0x478(0x8)
	class WwiseEvent*                                            WoodAddedWwiseEvent;                               // 0x480(0x8)
	class WwiseEvent*                                            StokedWwiseEvent;                                  // 0x488(0x8)
	class WwiseEvent*                                            BurningLoopStart;                                  // 0x490(0x8)
	class WwiseEvent*                                            BurningLoopEnd;                                    // 0x498(0x8)
	class WwiseObjectPoolWrapper*                                CampfireWwisePool;                                 // 0x4a0(0x8)
	class CurveFloat*                                            WoodCharOverTime;                                  // 0x4a8(0x8)
	TArray<struct CampfireDamageLightingChance>                  ImpactLightChances;                                // 0x4b0(0x10)
	struct FText                                                 WieldableItemCannotLightCampfire;                  // 0x4c0(0x38)
	struct FText                                                 WieldableItemNotReadyToLightCampfire;              // 0x4f8(0x38)
	struct FText                                                 LightCampfire;                                     // 0x530(0x38)
	struct FText                                                 NeedWoodToBuildCampfire;                           // 0x568(0x38)
	struct FText                                                 BuildCampfire;                                     // 0x5a0(0x38)
	struct FText                                                 StokeCampfire;                                     // 0x5d8(0x38)
	bool                                                         Built;                                             // 0x610(0x1)
	char                                                         pad0x3_BNUBQ[0x3];                                 // 0x611(0x3)
	float                                                        BurnedProportion;                                  // 0x614(0x4)
	bool                                                         OnFire;                                            // 0x618(0x1)
	char                                                         pad0x7_UPM3Q[0x7];                                 // 0x619(0x7)
	struct Status                                                IgnitedStatus;                                     // 0x620(0x20)
	class UClass*                                                WoodCategory;                                      // 0x640(0x8)
	class MaterialInstanceDynamic*                               BuiltMeshCharrableMaterial;                        // 0x658(0x8)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x660(0x10)
	char                                                         pad0xe8_WVU68[0xe8];                               // 0x670(0xe8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoSharpModifierReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PiratePreviewInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class SlidingDoorAudioParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                SlidingDoorPool;                                   // 0x28(0x8)
	class WwiseEvent*                                            SlidingDoorOpeningLoopStart;                       // 0x30(0x8)
	class WwiseEvent*                                            SlidingDoorOpeningLoopStop;                        // 0x38(0x8)
	class WwiseEvent*                                            SlidingDoorOpeningAdditionalStopSound;             // 0x40(0x8)
	class WwiseEvent*                                            SlidingDoorClosingLoopStart;                       // 0x48(0x8)
	class WwiseEvent*                                            SlidingDoorClosingLoopStop;                        // 0x50(0x8)
	class WwiseEvent*                                            SlidingDoorClosingAdditionalStopSound;             // 0x58(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleQuestReactionStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    PlaceableReaction;                                 // 0x80(0x30)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InKrakenZone: public EnvQueryTest
{
public:
	float                                                        BufferRadius;                                      // 0x170(0x4)
	char                                                         pad0x4_GKENR[0x4];                                 // 0x174(0x4)
};


// Size 0x38 (Full Size[0x70] - InheritedSize[0x38]
class LocationMapSettings: public DeveloperSettings
{
public:
	class UClass*                                                LocationMapItemDescClass;                          // 0x38(0x8)
	struct StringAssetReference                                  DefaultParams;                                     // 0x40(0x10)
	char                                                         DefaultMapBlendMode;                               // 0x50(0x1)
	char                                                         DefaultBannerBlendMode;                            // 0x51(0x1)
	char                                                         DefaultVaultSymbolBlendMode;                       // 0x52(0x1)
	char                                                         pad0x5_CGASU[0x5];                                 // 0x53(0x5)
	struct StringAssetReference                                  DefaultChest;                                      // 0x58(0x10)
	char                                                         DefaultChestBlendMode;                             // 0x68(0x1)
	char                                                         pad0x7_XIX0X[0x7];                                 // 0x69(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SilenceStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShip_HellishMermaid: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShip_Brig: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChangeableMeshInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class StorageContainerContentModifier: public Object
{
public:
	struct FName                                                 ModifierName;                                      // 0x28(0x8)
	TArray<struct StorageContainerContentModifierExtraContentSpawnerEntry> ExtraContentSpawners;                              // 0x30(0x10)
	bool                                                         UseExtraContentSpawnersExclusively;                // 0x40(0x1)
	char                                                         pad0x7_ISKHW[0x7];                                 // 0x41(0x7)
	TArray<struct StorageContainerContentSpecialEntryModifier>   ExtraSpecialEntries;                               // 0x48(0x10)
	bool                                                         UseExtraSpecialEntriesExclusively;                 // 0x58(0x1)
	char                                                         pad0x7_0EFGY[0x7];                                 // 0x59(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSocketCollisionServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IdentifiedAsPlayerInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x238] - InheritedSize[0x140]
class PlinthInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x8_ZCSXJ[0x8];                                 // 0x140(0x8)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x148(0x8)
	char                                                         pad0x31_I5H58[0x31];                               // 0x150(0x31)
	bool                                                         IsPlayerActivatedFortActive;                       // 0x181(0x1)
	char                                                         pad0xb6_XJ9CC[0xb6];                               // 0x182(0xb6)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TaleQuestNumericSwitchStep: public TaleQuestStep
{
public:
	class TaleQuestNumericSwitchStepDesc*                        Desc;                                              // 0x98(0x8)
	char                                                         pad0x18_PCDPR[0x18];                               // 0xa0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapMarkProviderInterface: public Interface
{
public:
};


// Size 0x188 (Full Size[0x528] - InheritedSize[0x3a0]
class TunnelsOfTheDamnedService: public Actor
{
public:
	char                                                         pad0x8_HE0LS[0x8];                                 // 0x3a0(0x8)
	class TunnelsOfTheDamnedServiceParams*                       Params;                                            // 0x3a8(0x8)
	class World*                                                 World;                                             // 0x3b0(0x8)
	class TunnelWorldConfig*                                     TunnelWorldConfig;                                 // 0x3b8(0x8)
	TArray<struct TunnelOfTheDamnedInstance>                     TunnelInstances;                                   // 0x3c0(0x10)
	char                                                         pad0x158_L5K4Y[0x158];                             // 0x3d0(0x158)
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class GuildChroniclesService: public Object
{
public:
	char                                                         pad0xe0_NQIPS[0xe0];                               // 0x28(0xe0)
	class GameState*                                             GameState;                                         // 0x108(0x8)
	char                                                         pad0x20_TRTK4[0x20];                               // 0x110(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DitherableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SteamAchievementPopUpSettings: public Object
{
public:
	struct StringAssetReference                                  SteamAchievementPopUpAssetLocation;                // 0x28(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class HideoutService: public Object
{
public:
	char                                                         pad0x8_6T9GP[0x8];                                 // 0x28(0x8)
	TArray<class Hideout*>                                       Hideouts;                                          // 0x30(0x10)
	char                                                         pad0x18_SFK7E[0x18];                               // 0x40(0x18)
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class ItemLoaderComponent: public ActorComponent
{
public:
	char                                                         pad0x58_23KLH[0x58];                               // 0xb8(0x58)
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class HungeringDeep: public Actor
{
public:
	char                                                         pad0x8_QLT7H[0x8];                                 // 0x3a0(0x8)
	float                                                        TickDelay;                                         // 0x3a8(0x4)
	int                                                          RequiredShantyCount;                               // 0x3ac(0x4)
	class SphereComponent*                                       SpawnableVolume;                                   // 0x3b0(0x8)
	class UClass*                                                RequiredTattoo;                                    // 0x3b8(0x8)
	struct FName                                                 RequiredShanty;                                    // 0x3c0(0x8)
	char                                                         pad0x48_6W5VI[0x48];                               // 0x3c8(0x48)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class StorageContainerSpecialTypeSelectorEntries: public DataAsset
{
public:
	float                                                        PercentageChanceOfSpawning;                        // 0x28(0x4)
	char                                                         pad0x4_ZEJWV[0x4];                                 // 0x2c(0x4)
	class StorageContainerSpawnerCount*                          NumSpawners;                                       // 0x30(0x8)
	TArray<struct TypedStorageContainerContentTypeSelectorEntry> Entries;                                           // 0x38(0x10)
	struct FName                                                 FeatureToggle;                                     // 0x48(0x8)
	struct FeatureFlag                                           FeatureFlag;                                       // 0x50(0xc)
	char                                                         pad0x4_HXAOB[0x4];                                 // 0x5c(0x4)
};


// Size 0x10 (Full Size[0x4a8] - InheritedSize[0x498]
class FrontendGameMode: public GameMode
{
public:
	char                                                         pad0x10_HEZD8[0x10];                               // 0x498(0x10)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class PlayerStreamedLevelService: public Actor
{
public:
	char                                                         pad0x8_Z7O6J[0x8];                                 // 0x3a0(0x8)
	TArray<struct StreamedLevelData>                             StreamedLevelData;                                 // 0x3a8(0x10)
};


// Size 0xa0 (Full Size[0x328] - InheritedSize[0x288]
class InteractionInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	struct InteractionInputComponentTickFunction                 InteractionComponentTickFunction;                  // 0x288(0x50)
	char                                                         pad0x50_S4JHM[0x50];                               // 0x2d8(0x50)
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class SecurePlayerState: public Actor
{
public:
	struct UniqueNetIdRepl                                       UniqueId;                                          // 0x3a0(0x18)
	class PlayerState*                                           OwningPlayerState;                                 // 0x3b8(0x8)
	char                                                         pad0x8_RZOVX[0x8];                                 // 0x3c0(0x8)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class CapstanEventDispatcherMock: public Object
{
public:
	char                                                         pad0x8_BYXO4[0x8];                                 // 0x28(0x8)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x30(0xa0)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class ActorPhasingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_FETM8[0x8];                                 // 0xb8(0x8)
	class Actor*                                                 ActorToHide;                                       // 0xc0(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetSpawnProgressStep: public TaleQuestStep
{
public:
	class SetSpawnProgressStepDesc*                              StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VaultInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TalkToNPCActionStateId: public ActionStateId
{
public:
};


// Size 0x70 (Full Size[0x128] - InheritedSize[0xb8]
class StoneFaceGlowComponent: public ActorComponent
{
public:
	class CurveFloat*                                            FullToEmptyGlowCurve;                              // 0xb8(0x8)
	class CurveFloat*                                            EmptyToFullGlowCurve;                              // 0xc0(0x8)
	struct FName                                                 ScalarParamOverrideName;                           // 0xc8(0x8)
	TArray<class MaterialInstanceDynamic*>                       OverriddenMaterials;                               // 0xd0(0x10)
	char                                                         pad0x48_FAS9R[0x48];                               // 0xe0(0x48)
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class VotableBaseComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TaleQuestRootFrame: public Object
{
public:
	char                                                         pad0x8_MQB8Y[0x8];                                 // 0x28(0x8)
	class Object*                                                Definition;                                        // 0x30(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EventRoomParamsDataAsset: public DataAsset
{
public:
	float                                                        AftermathTimer;                                    // 0x28(0x4)
	bool                                                         SpawnPlayerOnShipInsteadOfExitLocation;            // 0x2c(0x1)
	char                                                         pad0x3_LNAQG[0x3];                                 // 0x2d(0x3)
	float                                                        FailTimer;                                         // 0x30(0x4)
	char                                                         pad0x4_DU7M0[0x4];                                 // 0x34(0x4)
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class MeshMemoryConstraintHandler: public Object
{
public:
	class Actor*                                                 MeshOwner;                                         // 0x28(0x8)
	class Object*                                                CachedMesh;                                        // 0x70(0x8)
	struct FName                                                 CachedMeshName;                                    // 0x78(0x8)
	char                                                         pad0xc0_NM5BF[0xc0];                               // 0x80(0xc0)
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class InteractableMockActor: public Actor
{
public:
	char                                                         pad0x18_7VIAG[0x18];                               // 0x3a0(0x18)
	class Actor*                                                 ActorThatInteracted;                               // 0x3b8(0x8)
	char                                                         pad0x8_IR0RA[0x8];                                 // 0x3c0(0x8)
	TArray<class Class*>                                         CanInteractNotifications;                          // 0x3c8(0x10)
	class CapsuleComponent*                                      PrimitiveComponent;                                // 0x3d8(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x3e0(0x8)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x3e8(0x8)
	char                                                         CurrentInteractionState;                           // 0x3f0(0x1)
	char                                                         pad0x7_ID9C5[0x7];                                 // 0x3f1(0x7)
	TArray<class InteractionPrerequisiteBase*>                   Prerequisites;                                     // 0x3f8(0x10)
	bool                                                         CanSetInteractionState;                            // 0x408(0x1)
	char                                                         pad0x17_V6M4S[0x17];                               // 0x409(0x17)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConditionalStatsServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x138] - InheritedSize[0x138]
class BoneAIFormComponent: public AthenaAIFormComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CrouchPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0x420] - InheritedSize[0x418]
class DeferredNameplateAttitudeTestActor: public Pawn
{
public:
	char                                                         pad0x8_ASNP9[0x8];                                 // 0x418(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerDeathInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class PlayNpcAnimationResource: public DataAsset
{
public:
	struct FName                                                 AnimationNameToPlay;                               // 0x28(0x8)
	class SceneDialogueData*                                     DialogueData;                                      // 0x30(0x8)
	class UClass*                                                LocalMusicZone;                                    // 0x38(0x8)
	TArray<struct Text>                                          SpeakingActorLocalisableNames;                     // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutSceneSubtitlesInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class WorldEndAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        WorldEndDurationMultiplier;                        // 0x40(0x4)
	bool                                                         UseSuperHeatedWaterInStage;                        // 0x44(0x1)
	char                                                         pad0x3_OQC1S[0x3];                                 // 0x45(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhasedMarkerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationFirstPersonAnimaticInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class WaitForMechanismActionCompletionStep: public TaleQuestStep
{
public:
	class WaitForMechanismActionCompletionStepDesc*              Desc;                                              // 0x98(0x8)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class StorageContainerSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  StorageContainerComponentDataAssetLocation;        // 0x38(0x10)
	float                                                        QuickTransferDefaultRate;                          // 0x48(0x4)
	float                                                        QuickTransferMyCrewShipRate;                       // 0x4c(0x4)
	float                                                        QuickTransferOtherCrewShipRate;                    // 0x50(0x4)
	char                                                         pad0x4_1ILF6[0x4];                                 // 0x54(0x4)
	TArray<struct CategoryTypeMapEntry>                          CategoryTypeMap;                                   // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FortPlinthInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset: public DataAsset
{
public:
	TArray<struct NPCOnSurfaceCannonManagerCrewSizeSettings>     CrewSizeSettings;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class RemoveNPCOnShipStep: public TaleQuestStep
{
public:
};


// Size 0x80 (Full Size[0x6c0] - InheritedSize[0x640]
class MergedStaticMeshMemoryConstraintComponent: public MergedStaticMeshComponent
{
public:
	char                                                         pad0x18_RPKPM[0x18];                               // 0x640(0x18)
	class MeshMemoryConstraintHandler*                           Handler;                                           // 0x658(0x8)
	TArray<struct StringAssetReference>                          FallbackOverrideMaterials;                         // 0x660(0x10)
	class UClass*                                                MeshFallbackCategory;                              // 0x670(0x8)
	struct StringAssetReference                                  MeshReference;                                     // 0x678(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x690(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x691(0x1)
	char                                                         pad0x6_9527G[0x6];                                 // 0x692(0x6)
	class UClass*                                                BudgetToCountMemoryAgainstIfNoFallback;            // 0x698(0x8)
	struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0x6a0(0xc)
	char                                                         pad0x4_1I5PA[0x4];                                 // 0x6ac(0x4)
	char                                                         pad0x10_C8N7N[0x10];                               // 0x6b0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnsembleContextControlInterface: public Interface
{
public:
};


// Size 0xb8 (Full Size[0xe0] - InheritedSize[0x28]
class PuzzleManagerPolicy: public Object
{
public:
	char                                                         pad0x10_67Q2S[0x10];                               // 0x28(0x10)
	class Actor*                                                 PuzzleManager;                                     // 0x38(0x8)
	char                                                         pad0xa0_TFGCX[0xa0];                               // 0x40(0xa0)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CoordinatedCutsceneTriggerStatsAsset: public DataAsset
{
public:
	TArray<struct CoordinatedCutsceneTriggerStat>                StatsToFire;                                       // 0x28(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class TaleRankRequirements: public DataAsset
{
public:
	TArray<struct CampaignRanks>                                 RankRequirements;                                  // 0x28(0x10)
	TArray<Class>                                                GlobalRequirements;                                // 0x38(0x10)
	TArray<struct Name>                                          TalesExcludedFromGlobalRequirements;               // 0x48(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class ExplosivesServiceTelemetryComponent: public ActorComponent
{
public:
	char                                                         pad0x18_WY28H[0x18];                               // 0xb8(0x18)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class SetMechanismActionCutsceneActorStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    CutSceneActor;                                     // 0x80(0x30)
	struct QuestVariableActor                                    MechanismActor;                                    // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionWestNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x2b0 (Full Size[0x650] - InheritedSize[0x3a0]
class TunnelOfTheDamnedBase: public Actor
{
public:
	char                                                         pad0x18_LZ5I2[0x18];                               // 0x3a0(0x18)
	class SceneComponent*                                        Root;                                              // 0x3b8(0x8)
	class StaticMeshComponent*                                   TunnelCollisions;                                  // 0x3c0(0x8)
	class BoxComponent*                                          TunnelOverlapZone;                                 // 0x3c8(0x8)
	struct TunnelOfTheDamnedShipPartParams                       ShipPartParams;                                    // 0x3d0(0x58)
	struct FString                                               TunnelType;                                        // 0x428(0x10)
	class TunnelPresenterObjectBase*                             TunnelPresentation;                                // 0x438(0x8)
	char                                                         pad0x8_CWF27[0x8];                                 // 0x440(0x8)
	class TunnelDesc*                                            Desc;                                              // 0x458(0x8)
	class Actor*                                                 ShipInTunnel;                                      // 0x460(0x8)
	int                                                          TunnelStreamingLevelId;                            // 0x468(0x4)
	int                                                          ReplicatedTunnelStreamingLevelId;                  // 0x46c(0x4)
	TArray<class Actor*>                                         CrewMembersInTunnel;                               // 0x470(0x10)
	TArray<class Interface*>                                     FailureActionStateFadeCompletedTargets;            // 0x4f8(0x10)
	char                                                         pad0x148_QMTUU[0x148];                             // 0x508(0x148)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortsServiceInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class Company: public Object
{
public:
	struct FText                                                 DisplayName;                                       // 0x28(0x38)
	struct FName                                                 UniqueTextIdentifier;                              // 0x60(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickerUpperInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class StatusResponsePostProcess: public StatusResponse
{
public:
	float                                                        BeginMaterialWeight;                               // 0x38(0x4)
	float                                                        EndMaterialWeight;                                 // 0x3c(0x4)
	class MaterialInterface*                                     MaterialInstance;                                  // 0x40(0x8)
	class UClass*                                                PostProcessComponentClass;                         // 0x48(0x8)
	class PostProcessComponent*                                  PostProcessComponent;                              // 0x50(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HangingActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetNextQuestInChainStep: public TaleQuestStep
{
public:
	class GetNextQuestInChainStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BTTask_WaitHuntingSpear: public BTTaskNode
{
public:
	char                                                         WaitCondition;                                     // 0x60(0x1)
	char                                                         pad0x7_JF5OC[0x7];                                 // 0x61(0x7)
	class UClass*                                                ItemCategory;                                      // 0x68(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HudIconAudioReaction: public AudioReportReaction
{
public:
	char                                                         pad0x10_BUYWX[0x10];                               // 0x30(0x10)
};


// Size 0x88 (Full Size[0x428] - InheritedSize[0x3a0]
class ConstellationsService: public Actor
{
public:
	char                                                         pad0x8_R5M9H[0x8];                                 // 0x3a0(0x8)
	float                                                        ViewBoundaryDegrees;                               // 0x3a8(0x4)
	char                                                         pad0x4c_9RZDV[0x4c];                               // 0x3ac(0x4c)
	struct StringAssetReference                                  ConstellationsBespokeAudioEventsAssetRef;          // 0x3f8(0x10)
	class MaterialParameterCollectionInstance*                   AtmosphericMaterialParamsInstance;                 // 0x408(0x8)
	class ConstellationAudioEventsDataAsset*                     ConstellationBespokeAudioEventsListInstance;       // 0x410(0x8)
	struct StringAssetReference                                  AtmosphericMaterialParamsAssetRef;                 // 0x418(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteConsumerInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x108] - InheritedSize[0x28]
class ShopDesc: public DataAsset
{
public:
	struct FText                                                 ShopName;                                          // 0x28(0x38)
	class CatalogDataAsset*                                      Catalog;                                           // 0x60(0x8)
	struct ShopCatalogDesc                                       CatalogData;                                       // 0x68(0x1)
	char                                                         pad0x7_Q4RXS[0x7];                                 // 0x69(0x7)
	TArray<struct CatalogDescTab>                                Catalogs;                                          // 0x70(0x10)
	class PremiumCatalogDataAsset*                               PremiumCatalog;                                    // 0x80(0x8)
	TArray<struct FeatureToggledPremiumCatalog>                  FeatureToggledPremiumCatalogs;                     // 0x88(0x10)
	struct FString                                               Storefront;                                        // 0x98(0x10)
	struct FString                                               OpenAudioCue;                                      // 0xa8(0x10)
	bool                                                         EnablePiratePreview;                               // 0xb8(0x1)
	bool                                                         IsPremiumShop;                                     // 0xb9(0x1)
	bool                                                         IsCompanyNPCShop;                                  // 0xba(0x1)
	char                                                         pad0x5_R9CMF[0x5];                                 // 0xbb(0x5)
	class ShopDialogue*                                          Dialogue;                                          // 0xc0(0x8)
	class UClass*                                                Company;                                           // 0xc8(0x8)
	TArray<class Class*>                                         Categories;                                        // 0xd0(0x10)
	struct StringAssetReference                                  AllTabIcon;                                        // 0xe0(0x10)
	char                                                         PiratePreviewSkeletonCurseMode;                    // 0xf0(0x1)
	char                                                         pad0x7_G39UC[0x7];                                 // 0xf1(0x7)
	TArray<struct MultiShopResponse>                             MultiShopResponse;                                 // 0xf8(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ScaldedStatus: public StatusBase
{
public:
};


// Size 0x1b8 (Full Size[0x270] - InheritedSize[0xb8]
class RevealableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_631WJ[0x8];                                 // 0xb8(0x8)
	float                                                        ActorHiddenDistance;                               // 0xc0(0x4)
	float                                                        MaterialVisibleDistance;                           // 0xc4(0x4)
	float                                                        CloseRevealDistance;                               // 0xc8(0x4)
	bool                                                         InverseRevealableLogic;                            // 0xcc(0x1)
	char                                                         pad0x3_Z2P17[0x3];                                 // 0xcd(0x3)
	class UClass*                                                SceneType;                                         // 0xd0(0x8)
	TArray<class RevealRequirement*>                             RevealRequirements;                                // 0xd8(0x10)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0xe8(0x10)
	class Object*                                                TargetGameStateObject;                             // 0x158(0x8)
	bool                                                         PermanentlyRevealed;                               // 0x160(0x1)
	char                                                         pad0x77_YR1P1[0x77];                               // 0x161(0x77)
	TArray<class RevealRequirement*>                             RequirementsPerRevealer;                           // 0x1d8(0x10)
	TArray<class RevealRequirement*>                             RequirementsPerRevealable;                         // 0x1e8(0x10)
	char                                                         pad0x78_LBQ9U[0x78];                               // 0x1f8(0x78)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookUpAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportActionStateId: public ActionStateId
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class SummonAIAbilityParams: public AthenaAIAbilityParams
{
public:
	class AIIncrementalWaveSpawner*                              SummonSpawner;                                     // 0xc8(0x8)
	struct AthenaAIAbilityPlayerBasedRanges                      NumToSpawn;                                        // 0xd0(0x10)
	int                                                          MaxTotalAIFromSummonAbility;                       // 0xe0(0x4)
	bool                                                         DespawnAllOnDeath;                                 // 0xe4(0x1)
	char                                                         pad0x3_YX331[0x3];                                 // 0xe5(0x3)
	class NamedAIDataAsset*                                      NamesAsset;                                        // 0xe8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestAddTemporaryEntitlementStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerActivityIconCatalogueDataAsset: public DataAsset
{
public:
	TArray<struct PlayerActivityIconSetInfo>                     PlayerActivityIconSets;                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VFXViewerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TreasureMapCollectionInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class SelectRewardStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableItemSpawnDataTypeArray                   ItemSpawnDatas;                                    // 0x80(0x30)
	struct QuestVariableItemSpawnDataType                        QuestItemSpawnData;                                // 0xb0(0x30)
	int                                                          NumberOfItemsToSpawn;                              // 0xe0(0x4)
	bool                                                         SelectChestsOnly;                                  // 0xe4(0x1)
	char                                                         pad0x3_TGAKE[0x3];                                 // 0xe5(0x3)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class StopAggressiveGhostShipEncounterStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x1a0 (Full Size[0x1c8] - InheritedSize[0x28]
class EmblemDefinitionDataAsset: public DataAsset
{
public:
	class UClass*                                                Company;                                           // 0x28(0x8)
	struct FName                                                 CampaignId;                                        // 0x30(0x8)
	struct FText                                                 CampaignTitle;                                     // 0x38(0x38)
	struct FText                                                 CampaignDescription;                               // 0x70(0x38)
	struct FText                                                 MoreInfoFirst;                                     // 0xa8(0x38)
	struct FText                                                 MoreInfoSecond;                                    // 0xe0(0x38)
	struct FText                                                 MoreInfoFirstLocked;                               // 0x118(0x38)
	struct FText                                                 MoreInfoSecondLocked;                              // 0x150(0x38)
	struct StringAssetReference                                  CampaignImagePath;                                 // 0x188(0x10)
	bool                                                         MarkAsNew;                                         // 0x198(0x1)
	char                                                         pad0x7_4I3CZ[0x7];                                 // 0x199(0x7)
	struct EmblemDefinitionActiveDuration                        ActiveDuration;                                    // 0x1a0(0x18)
	TArray<struct EmblemSetDefinition>                           EmblemSets;                                        // 0x1b8(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class MeleeAttackClientResponseComponent: public ActorComponent
{
public:
	char                                                         pad0x8_N3DCU[0x8];                                 // 0xb8(0x8)
	float                                                        AllowedTargetValidationDistance;                   // 0xc0(0x4)
	float                                                        AllowedAttackerDistanceFromTarget;                 // 0xc4(0x4)
	char                                                         pad0x8_8A1HV[0x8];                                 // 0xc8(0x8)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class ContestWaitForItemHandInStep: public TaleQuestStep
{
public:
	char                                                         pad0x18_SUG2S[0x18];                               // 0x98(0x18)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class DiggingConfigResolverDataAsset: public DataAsset
{
public:
	class DiggingAudioDataAsset*                                 AudioDataAsset;                                    // 0x28(0x8)
	class DiggingAnimationDataAsset*                             AnimationDataAsset;                                // 0x30(0x8)
	class DiggingEffectsDataAsset*                               EffectsDataAsset;                                  // 0x38(0x8)
	class DiggingBaseParamsDataAsset*                            BaseParamsDataAsset;                               // 0x40(0x8)
	class DiggingBuryParamsDataAsset*                            BuryingParamsDataAsset;                            // 0x48(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseApplyAlcohol: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildEntitlementDescriptionsProviderInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x590] - InheritedSize[0x508]
class ServerIslandPerfTestGameState: public ServiceProviderGameState
{
public:
	char                                                         pad0x58_CY0SP[0x58];                               // 0x508(0x58)
	struct GameServiceCoordinator                                ServiceCoordinator;                                // 0x560(0x20)
	class PerfTestIslandService*                                 IslandService;                                     // 0x580(0x8)
	class FFTWaterService*                                       WaterService;                                      // 0x588(0x8)
};


// Size 0x448 (Full Size[0x7e8] - InheritedSize[0x3a0]
class MapTable: public Actor
{
public:
	char                                                         pad0x10_G38N9[0x10];                               // 0x3a0(0x10)
	class StaticMeshComponent*                                   TableMeshComponent;                                // 0x3b0(0x8)
	float                                                        MousePanSpeed;                                     // 0x3b8(0x4)
	float                                                        MouseZoomSpeed;                                    // 0x3bc(0x4)
	float                                                        PanSpeedMinZoom;                                   // 0x3c0(0x4)
	float                                                        PanSpeedMaxZoom;                                   // 0x3c4(0x4)
	float                                                        ZoomSpeed;                                         // 0x3c8(0x4)
	float                                                        MinZoom;                                           // 0x3cc(0x4)
	float                                                        MaxZoom;                                           // 0x3d0(0x4)
	float                                                        InitialZoom;                                       // 0x3d4(0x4)
	float                                                        RemoteBlendTime;                                   // 0x3d8(0x4)
	float                                                        RemotePanSettleRange;                              // 0x3dc(0x4)
	float                                                        RemoteZoomSettleRange;                             // 0x3e0(0x4)
	float                                                        DrunknessStaggerScalarWhileUsing;                  // 0x3e4(0x4)
	int                                                          MaxPins;                                           // 0x3e8(0x4)
	float                                                        PinToggleDist;                                     // 0x3ec(0x4)
	int                                                          MaxTrail;                                          // 0x3f0(0x4)
	float                                                        MinDistPerTrailDrop;                               // 0x3f4(0x4)
	float                                                        TimePerTrailUpdate;                                // 0x3f8(0x4)
	char                                                         pad0x4_23EVX[0x4];                                 // 0x3fc(0x4)
	class WwiseObjectPoolWrapper*                                MapTablePool;                                      // 0x400(0x8)
	class WwiseEvent*                                            JoinTableSfx;                                      // 0x408(0x8)
	class WwiseEvent*                                            LeaveTableSfx;                                     // 0x410(0x8)
	class WwiseEvent*                                            PlayMoveMapSfx;                                    // 0x418(0x8)
	class WwiseEvent*                                            StopMoveMapSfx;                                    // 0x420(0x8)
	class WwiseEvent*                                            PlacePinSfx;                                       // 0x428(0x8)
	class WwiseEvent*                                            RemovePinSfx;                                      // 0x430(0x8)
	class WwiseEvent*                                            ClearAllPinsSfx;                                   // 0x438(0x8)
	class WwiseEvent*                                            ShowTaleSfx;                                       // 0x440(0x8)
	class WwiseEvent*                                            HideTaleSfx;                                       // 0x448(0x8)
	class WwiseEvent*                                            HighlightTaleMarkerSfx;                            // 0x450(0x8)
	float                                                        TrackedBootyItemsUpdateInterval;                   // 0x458(0x4)
	float                                                        TrackedShipsUpdateInterval;                        // 0x45c(0x4)
	float                                                        TrackedAIActorsUpdateInterval;                     // 0x460(0x4)
	float                                                        TrackedShipDistanceThreshold;                      // 0x464(0x4)
	float                                                        TrackedAIActorSquareDistanceThreshold;             // 0x468(0x4)
	char                                                         pad0x4_5J80P[0x4];                                 // 0x46c(0x4)
	class UClass*                                                ReapersMarkFlag;                                   // 0x470(0x8)
	bool                                                         DisplayFactionShips;                               // 0x478(0x1)
	bool                                                         DisplayTallTaleIcons;                              // 0x479(0x1)
	char                                                         pad0x6_GWVA8[0x6];                                 // 0x47a(0x6)
	class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0x480(0x8)
	class MaterialInterface*                                     ExpandedMapMaterial;                               // 0x488(0x8)
	class MaterialInterface*                                     BaseMapMaterial;                                   // 0x490(0x8)
	float                                                        TopMargin;                                         // 0x498(0x4)
	float                                                        RightMargin;                                       // 0x49c(0x4)
	float                                                        BottomMargin;                                      // 0x4a0(0x4)
	float                                                        LeftMargin;                                        // 0x4a4(0x4)
	struct Vector2D                                              ServerCentreLocation;                              // 0x4a8(0x8)
	float                                                        ServerZoomLevel;                                   // 0x4b0(0x4)
	char                                                         pad0x4_RPA90[0x4];                                 // 0x4b4(0x4)
	TArray<class Actor*>                                         ControllerQueue;                                   // 0x4b8(0x10)
	TArray<struct Vector2D>                                      MapPins;                                           // 0x4c8(0x10)
	TArray<struct WorldMapShipLocation>                          TrackedShips;                                      // 0x4d8(0x10)
	TArray<struct ReapersMarkTrackedBootyItemInfo>               TrackedBootyItemInfos;                             // 0x4e8(0x10)
	TArray<struct WorldMapAILocation>                            TrackedAIActors;                                   // 0x4f8(0x10)
	struct LinearColor                                           BoundaryData;                                      // 0x508(0x10)
	class Texture*                                               AllianceOverlayIcon;                               // 0x518(0x8)
	char                                                         pad0x2a0_LR2GS[0x2a0];                             // 0x520(0x2a0)
	char                                                         CachedPlaymode;                                    // 0x7c0(0x1)
	char                                                         pad0x17_2CJ6W[0x17];                               // 0x7c1(0x17)
	struct MapTableTutorialHandler                               MapTableTutorialHandler;                           // 0x7d8(0x10)
};


// Size 0x160 (Full Size[0x500] - InheritedSize[0x3a0]
class GameplayEventSignal: public Actor
{
public:
	char                                                         pad0x8_FN2P1[0x8];                                 // 0x3a0(0x8)
	class UClass*                                                ProxyClass;                                        // 0x3a8(0x8)
	struct FName                                                 NexProxyFeatureToggle;                             // 0x3b0(0x8)
	float                                                        TimeForSignalToActivateInSeconds;                  // 0x3b8(0x4)
	float                                                        TimeForSignalToDeactivateInSeconds;                // 0x3bc(0x4)
	float                                                        TimeForAtmosphericPressureZoneToActivateInSeconds; // 0x3c0(0x4)
	char                                                         pad0x4_L6UMR[0x4];                                 // 0x3c4(0x4)
	class AtmosphericPressureZoneComponent*                      AtmosphericPressureZoneComponent;                  // 0x3c8(0x8)
	class LightingZoneComponent*                                 LightingZoneComponent;                             // 0x3d0(0x8)
	class RotateMeshToActorComponent*                            RotateMeshToActorComponent;                        // 0x3d8(0x8)
	class MeshComponent*                                         SignalMesh;                                        // 0x3e0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3e8(0x8)
	class MaterialInstanceDynamic*                               SignalMaterial;                                    // 0x3f0(0x8)
	char                                                         EventType;                                         // 0x3f8(0x1)
	char                                                         pad0x67_8KEXK[0x67];                               // 0x3f9(0x67)
	char                                                         OwningNetworkRegion;                               // 0x460(0x1)
	char                                                         pad0x9f_4J3IX[0x9f];                               // 0x461(0x9f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x298] - InheritedSize[0x288]
class AmmoRadialActivationInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x10_XAO0M[0x10];                               // 0x288(0x10)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class BlinkStrafeComponent: public ActorComponent
{
public:
	class AthenaAICharacter*                                     Character;                                         // 0xb8(0x8)
	class AthenaAIControllerBase*                                OwnerAIController;                                 // 0xc0(0x8)
	char                                                         pad0x8_Z1Z8H[0x8];                                 // 0xc8(0x8)
	bool                                                         ShouldBlink;                                       // 0xd0(0x1)
	char                                                         pad0x7_K602L[0x7];                                 // 0xd1(0x7)
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class VFXSpawnerComponent: public ActorComponent
{
public:
	class ParticleSystemComponent*                               CachedParticleSystem;                              // 0xb8(0x8)
	class SceneComponent*                                        AttachedSceneComponent;                            // 0xc0(0x8)
	struct VFXHandlerComponentParams                             VFXParameters;                                     // 0xc8(0x40)
	bool                                                         State;                                             // 0x108(0x1)
	char                                                         pad0x17_5X44T[0x17];                               // 0x109(0x17)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LightningManagerDataAsset: public DataAsset
{
public:
	float                                                        LightningTargetHeightThreshold;                    // 0x28(0x4)
	float                                                        ShipNearMissMaxX;                                  // 0x2c(0x4)
	float                                                        ShipNearMissMaxY;                                  // 0x30(0x4)
	float                                                        NearPlayerMinRadius;                               // 0x34(0x4)
	float                                                        NearPlayerMaxRadius;                               // 0x38(0x4)
	float                                                        InactiveTimePerTest;                               // 0x3c(0x4)
	float                                                        NearbyGhostShipEncounterRadiusInMetres;            // 0x40(0x4)
	char                                                         pad0x4_1GKS4[0x4];                                 // 0x44(0x4)
	TArray<struct LightningStrikeFrequency>                      LightningStrikeFrequency;                          // 0x48(0x10)
	struct LightningTargetSelector                               TargetSelector;                                    // 0x58(0x10)
};


// Size 0x30 (Full Size[0x330] - InheritedSize[0x300]
class UnderwaterEffectsComponent: public WwiseEmitterComponent
{
public:
	class UnderwaterEffectsDataAsset*                            UnderwaterEffectsData;                             // 0x300(0x8)
	class ParticleSystemComponent*                               SpawnedVfx;                                        // 0x308(0x8)
	char                                                         pad0x20_8YE84[0x20];                               // 0x310(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllableObjectFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class SceneDialogueData: public Object
{
public:
	TArray<struct Name>                                          ActorNames;                                        // 0x28(0x10)
	char                                                         ChatType;                                          // 0x38(0x1)
	char                                                         pad0x7_CMP0E[0x7];                                 // 0x39(0x7)
	TArray<class SceneDialogueSection*>                          TextSections;                                      // 0x40(0x10)
	bool                                                         ChainedDialogue;                                   // 0x50(0x1)
	char                                                         pad0x7_FD0KM[0x7];                                 // 0x51(0x7)
	struct FString                                               SourceText;                                        // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StormInterface: public Interface
{
public:
};


// Size 0x1e8 (Full Size[0x588] - InheritedSize[0x3a0]
class SeaFortAlignmentFlagPole: public Actor
{
public:
	char                                                         pad0x10_IJ515[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        ActorRoot;                                         // 0x3b0(0x8)
	class StaticMeshComponent*                                   FlagPoleMesh;                                      // 0x3b8(0x8)
	class StaticMeshComponent*                                   FlagMesh;                                          // 0x3c0(0x8)
	class InteractableComponentWithActionRules*                  FlagPoleInteractableComponent;                     // 0x3c8(0x8)
	struct AlignmentFlagMeshParams                               AlignmentFlagMeshParams;                           // 0x3d0(0x40)
	struct AlignmentFlagActionRuleParams                         AlignmentFlagActionRuleParams;                     // 0x410(0x18)
	struct AlignmentWorldMarkerParams                            AlignmentWorldMarkerParams;                        // 0x428(0x20)
	struct SeaFortAlignmentFlagPoleAudioParams                   FlagPoleAudioParams;                               // 0x448(0x70)
	char                                                         pad0x18_U3OG0[0x18];                               // 0x4b8(0x18)
	char                                                         FlagAlignment;                                     // 0x4d0(0x1)
	bool                                                         AreAllFortEnemiesDefeated;                         // 0x4d1(0x1)
	char                                                         pad0xb6_HP038[0xb6];                               // 0x4d2(0xb6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestProgressServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GhostShipTimingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CombinationLockXInputId: public AnalogInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ErroneousEntitlementsDataAsset: public DataAsset
{
public:
	TArray<String>                                               KnownErroneousEntitlementIdsToConsume;             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkeletonCampEventRoomInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC1ReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class TestQuestProxy: public Actor
{
public:
	char                                                         pad0x18_MI8WZ[0x18];                               // 0x3a0(0x18)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class OpinionatedNameplateAttitudeTestActor: public Actor
{
public:
	char                                                         DesiredAttitude;                                   // 0x3a0(0x1)
	char                                                         pad0x7_NJHV2[0x7];                                 // 0x3a1(0x7)
};


// Size 0x50 (Full Size[0xd0] - InheritedSize[0x80]
class TaleQuestSpawnFishingFishStepDesc: public TaleQuestStepDesc
{
public:
	struct Vector                                                SpawnBoxExtent;                                    // 0x80(0xc)
	float                                                        SpawnerDistanceFromWaterSurface;                   // 0x8c(0x4)
	bool                                                         SpawnBoxHiddenInGame;                              // 0x90(0x1)
	char                                                         pad0x7_JJO6B[0x7];                                 // 0x91(0x7)
	class AvailableFishForSpawning*                              CustomFishToSpawnList;                             // 0x98(0x8)
	struct QuestVariableFishingFishSpawner                       FishingFishSpawner;                                // 0xa0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DeliverableLockedCollectorsChestRequirement: public DeliverableRequirementBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class BalanceableWalkwayBalanceInputId: public AnalogInputId
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class FlamesOfFateSettingsAsset: public DataAsset
{
public:
	TArray<struct FlamesOfFateFlameInfo>                         FlameInfo;                                         // 0x28(0x10)
	TArray<struct FlamesOfFateShipInfo>                          ShipInfo;                                          // 0x38(0x10)
	TArray<char>                                                 SailWithFlamesAboardFlameTypesToIgnore;            // 0x48(0x10)
	TArray<struct SailWithFlameOfFateColoursAboardStatData>      SailWithFlamesAboardStatDataArray;                 // 0x58(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SelectionOfSirenStatues: public Object
{
public:
	TArray<Class>                                                Statues;                                           // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GlobalVoyageOverrideAsset: public DataAsset
{
public:
	TArray<struct DirectorSettingEntry>                          GlobalVoyageOverrideEntries;                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShipsEncounter: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class AggressiveGhostShipAnchorDrop: public Actor
{
public:
	char                                                         pad0x30_QY604[0x30];                               // 0x3a0(0x30)
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class ChestOfRageDataAsset: public DataAsset
{
public:
	float                                                        DormantDuration;                                   // 0x28(0x4)
	float                                                        RageBuildingDuration;                              // 0x2c(0x4)
	float                                                        TimeInToRageBuildingToAbsorbWater;                 // 0x30(0x4)
	float                                                        SteamingDuration;                                  // 0x34(0x4)
	float                                                        TimeInToSteamingStateWhereHitWillCauseInstantExplosion; // 0x38(0x4)
	float                                                        OnFireDuration;                                    // 0x3c(0x4)
	float                                                        InWaterCoolingRate;                                // 0x40(0x4)
	float                                                        ForcedInWaterCoolingRate;                          // 0x44(0x4)
	float                                                        InRainCoolingRate;                                 // 0x48(0x4)
	float                                                        WaterHeightCheckOffset;                            // 0x4c(0x4)
	class CurveFloat*                                            TimeToRemovePerSplash;                             // 0x50(0x8)
	float                                                        HealthChangePerSecondWhilstCarryingASteamingChest; // 0x58(0x4)
	float                                                        PercentageToHeatHullWaterPerSecond;                // 0x5c(0x4)
	float                                                        ChestInSuperheatedWaterSteadyStatePercentage;      // 0x60(0x4)
	char                                                         pad0x4_TY8N0[0x4];                                 // 0x64(0x4)
	class CurveFloat*                                            RageLevelToMaterialParameterValue;                 // 0x68(0x8)
	class Object*                                                RageBuildingVfx;                                   // 0x70(0x8)
	float                                                        MinimumRageValueToTriggerRageBuildingVfx;          // 0x78(0x4)
	char                                                         pad0x4_VNM5F[0x4];                                 // 0x7c(0x4)
	class Object*                                                SteamingVfx;                                       // 0x80(0x8)
	class Object*                                                OnFireVfx;                                         // 0x88(0x8)
	class Object*                                                ExplosionVfx;                                      // 0x90(0x8)
	class Object*                                                CooledDownSteamBlast;                              // 0x98(0x8)
	class Object*                                                OnTakingDamageVfx;                                 // 0xa0(0x8)
	class WwiseEvent*                                            OnTakingDamageSfx;                                 // 0xa8(0x8)
	float                                                        WhistlingOneShotSfxDelay;                          // 0xb0(0x4)
	char                                                         pad0x4_G1SQL[0x4];                                 // 0xb4(0x4)
	class WwiseEvent*                                            StartWhistlingOneShotSfx;                          // 0xb8(0x8)
	class WwiseEvent*                                            StartWhistlingSfx;                                 // 0xc0(0x8)
	class WwiseEvent*                                            StopWhistlingSfx;                                  // 0xc8(0x8)
	class WwiseEvent*                                            StartRageBuildingSfx;                              // 0xd0(0x8)
	class WwiseEvent*                                            StopRageBuildingSfx;                               // 0xd8(0x8)
	class WwiseEvent*                                            ExplosionSfx;                                      // 0xe0(0x8)
	class WwiseEvent*                                            ExtinguishedSfx;                                   // 0xe8(0x8)
	class WwiseObjectPoolWrapper*                                AudioSFXPool;                                      // 0xf0(0x8)
	bool                                                         CanDamageChestOfRage;                              // 0xf8(0x1)
	char                                                         pad0x7_4QV27[0x7];                                 // 0xf9(0x7)
	TArray<struct ChestOfRageDamageTableEntry>                   DamageTable;                                       // 0x100(0x10)
	TArray<struct ChestOfRageShipSizeDamageTableOverride>        ShipSizeDamageTableOverride;                       // 0x110(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WheelInteractableFunctionLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x90 (Full Size[0xf0] - InheritedSize[0x60]
class ShoresOfGoldTaleService: public TaleQuestService
{
public:
	char                                                         pad0x90_Y5QNB[0x90];                               // 0x60(0x90)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DeliverableRedirectionCompanyContext: public DeliverableRedirectionContextBase
{
public:
	TArray<class Class*>                                         Companies;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class JumpNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CloudDomeServiceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x80] - InheritedSize[0x30]
class AnimNotifyStateWieldableBookRenderingModeRequest: public AnimNotifyState
{
public:
	char                                                         pad0x50_GQVBX[0x50];                               // 0x30(0x50)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DropLargeWieldedItemNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WorldEventsCommandSettings: public DataAsset
{
public:
	int                                                          NumOfAllowedMainEventsInCustomSeas;                // 0x28(0x4)
	char                                                         pad0x4_LEN7G[0x4];                                 // 0x2c(0x4)
	TArray<struct WorldEventsCommandEventData>                   WorldEventsData;                                   // 0x30(0x10)
	class EnvQuery*                                              BurningBladeEQS;                                   // 0x40(0x8)
};


// Size 0xa8 (Full Size[0x128] - InheritedSize[0x80]
class TaleQuestSetNPCDialogKeyStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    NPC;                                               // 0x80(0x30)
	struct FName                                                 Key;                                               // 0xb0(0x8)
	struct FString                                               Value;                                             // 0xb8(0x10)
	struct QuestVariableName                                     KeyPin;                                            // 0xc8(0x30)
	struct QuestVariableText                                     ValuePin;                                          // 0xf8(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnsembleContextViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class SpawnVaultTreasureStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class FishingMiniGameFishDataAsset: public DataAsset
{
public:
	float                                                        ChanceOfEscapePositionBeingLeft;                   // 0x28(0x4)
	float                                                        ChanceOfEscapePositionBeingAway;                   // 0x2c(0x4)
	float                                                        ChanceOfEscapePositionBeingRight;                  // 0x30(0x4)
	char                                                         pad0x4_GNQHD[0x4];                                 // 0x34(0x4)
	struct WeightedProbabilityRangeOfRanges                      HowLongBeforeUnfoughtFishEscapes;                  // 0x38(0x30)
	struct WeightedProbabilityRangeOfRanges                      TimeToTire;                                        // 0x68(0x30)
	struct WeightedProbabilityRangeOfRanges                      SwitchesBeforeRecovery;                            // 0x98(0x30)
	struct WeightedProbabilityRangeOfRanges                      TimeSpentRecovering;                               // 0xc8(0x30)
	float                                                        SpeedMovingBackToCentreWhenRecovering;             // 0xf8(0x4)
	float                                                        SpeedMovingBackToCentreWhenRecoveringWhenReeling;  // 0xfc(0x4)
	struct WeightedProbabilityRangeOfRanges                      NumFakeOuts;                                       // 0x100(0x30)
};


// Size 0x4f0 (Full Size[0x890] - InheritedSize[0x3a0]
class Capstan: public Actor
{
public:
	char                                                         pad0x48_HOQTH[0x48];                               // 0x3a0(0x48)
	struct CapstanParams                                         Parameters;                                        // 0x3e8(0x14)
	float                                                        MaxReleaseAngle;                                   // 0x3fc(0x4)
	float                                                        MaxReleaseHeight;                                  // 0x400(0x4)
	float                                                        MaxAngle;                                          // 0x404(0x4)
	bool                                                         StartRaised;                                       // 0x408(0x1)
	char                                                         pad0x7_ON091[0x7];                                 // 0x409(0x7)
	class ControllableIntentCombinerComponent*                   IntentCombinerComponent;                           // 0x410(0x8)
	class SceneComponent*                                        RootSceneComponent;                                // 0x418(0x8)
	class StaticMeshMemoryConstraintComponent*                   MeshComponent;                                     // 0x420(0x8)
	class ChildActorComponent*                                   CapstanReleaseComponent;                           // 0x428(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x430(0x8)
	class CircularItemDropRedirectorComponent*                   ItemDropRedirector;                                // 0x438(0x8)
	TArray<class CapstanArm*>                                    CapstanArms;                                       // 0x440(0x10)
	struct CapstanAudioParams                                    AudioParameters;                                   // 0x450(0x68)
	bool                                                         CanSpinInfinitely;                                 // 0x4b8(0x1)
	char                                                         pad0x17_HODGG[0x17];                               // 0x4b9(0x17)
	class ShipDamageableComponent*                               CapstanDamageComponent;                            // 0x4d0(0x8)
	float                                                        ChanceToDropTheAnchorOnDamage;                     // 0x4d8(0x4)
	struct Vector                                                ShipPartFireCellActorSpaceLocation;                // 0x4dc(0xc)
	char                                                         pad0x50_9VMLW[0x50];                               // 0x4e8(0x50)
	struct CapstanNetState                                       NetState;                                          // 0x538(0x8)
	struct WwiseEmitter                                          CapstanEmitter;                                    // 0x540(0x20)
	class DamageableShipPartAudioParams*                         CapstanDamageLevelAudio;                           // 0x560(0x8)
	class ParticleSystem*                                        CapstanDamageParticleSystem;                       // 0x568(0x8)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x570(0xa0)
	char                                                         pad0x230_KEJSP[0x230];                             // 0x610(0x230)
	class CapstanDescAsset*                                      DescToSetWhenSafe;                                 // 0x840(0x8)
	class CapstanDescAsset*                                      CurrentCapstanDesc;                                // 0x848(0x8)
	char                                                         pad0x2_0MMWX[0x2];                                 // 0x850(0x2)
	bool                                                         IsCursed;                                          // 0x852(0x1)
	char                                                         pad0x1_1RTIS[0x1];                                 // 0x853(0x1)
	float                                                        CursedIntent;                                      // 0x854(0x4)
	char                                                         pad0x28_G6XFK[0x28];                               // 0x858(0x28)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x880(0x8)
	char                                                         pad0x8_I58FB[0x8];                                 // 0x888(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_DarkCrystal: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class VerticalPulleyAnalogInputId: public AnalogInputId
{
public:
};


// Size 0xb0 (Full Size[0x168] - InheritedSize[0xb8]
class EntitlementInformationComponent: public ActorComponent
{
public:
	char                                                         pad0xb0_1W9BD[0xb0];                               // 0xb8(0xb0)
};


// Size 0x28 (Full Size[0xc0] - InheritedSize[0x98]
class BlockMigrationForCrewTaskStep: public TaleQuestStep
{
public:
	class BlockMigrationForCrewTaskStepDesc*                     Desc;                                              // 0x98(0x8)
	char                                                         pad0x20_2HX90[0x20];                               // 0xa0(0x20)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class CheckIsActorCriticalStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    ActorToCheck;                                      // 0x80(0x30)
	struct QuestVariableBool                                     IsCritical;                                        // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x288] - InheritedSize[0x288]
class IngestedByKrakenInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x50 (Full Size[0x88] - InheritedSize[0x38]
class TradeRouteMapSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  TradeRouteLandscapeMapItemDescClass;               // 0x38(0x10)
	struct StringAssetReference                                  TradeRoutePortraitMapItemDescClass;                // 0x48(0x10)
	char                                                         DefaultIslandBlendMode;                            // 0x58(0x1)
	char                                                         pad0x7_A9WOQ[0x7];                                 // 0x59(0x7)
	struct StringAssetReference                                  DefaultPathTexture;                                // 0x60(0x10)
	char                                                         DefaultPathBlendMode;                              // 0x70(0x1)
	char                                                         pad0x7_18F5K[0x7];                                 // 0x71(0x7)
	class UClass*                                                DefaultClueMarkId;                                 // 0x78(0x8)
	char                                                         DefaultClueBlendMode;                              // 0x80(0x1)
	char                                                         pad0x3_M6W1M[0x3];                                 // 0x81(0x3)
	float                                                        DefaultClueScale;                                  // 0x84(0x4)
};


// Size 0x1b8 (Full Size[0x2f8] - InheritedSize[0x140]
class ActionSequenceInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x8_4L3RL[0x8];                                 // 0x140(0x8)
	struct WwiseEmitter                                          Emitter;                                           // 0x148(0x20)
	class WwiseObjectPoolWrapper*                                EmitterPool;                                       // 0x168(0x8)
	struct ActionSequenceInteractableAudioParams                 InteractionAudioParams;                            // 0x170(0x30)
	struct ActionSequenceInteractableParams                      InteractionParams;                                 // 0x1a0(0x28)
	bool                                                         ShouldBeInteractable;                              // 0x218(0x1)
	char                                                         pad0x7_CNVZN[0x7];                                 // 0x219(0x7)
	struct ActionSequenceInteractableInteractionStateData        InteractionStateData;                              // 0x220(0x10)
	char                                                         pad0xc8_9E5RL[0xc8];                               // 0x230(0xc8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EncounterRegistryInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnTopTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CancelStatus: public StatusBase
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class GrenadeSetupDataAsset: public DataAsset
{
public:
	struct Vector                                                ServerThrowOffset;                                 // 0x28(0xc)
	struct Vector                                                FirstPersonThrowOffset;                            // 0x34(0xc)
	class CurveFloat*                                            PitchToProjectileSpeedCurve;                       // 0x40(0x8)
	class CurveFloat*                                            ProjectileSpeedToAngleVarianceCurve;               // 0x48(0x8)
	float                                                        ProjectileGravityScale;                            // 0x50(0x4)
	char                                                         pad0x4_J3471[0x4];                                 // 0x54(0x4)
	class CurveFloat*                                            ExtraPitchCurve;                                   // 0x58(0x8)
	float                                                        MinPitch;                                          // 0x60(0x4)
	float                                                        MaxPitch;                                          // 0x64(0x4)
	float                                                        PlayerSpeedModifier;                               // 0x68(0x4)
	float                                                        FirstPersonScaleModifier;                          // 0x6c(0x4)
	float                                                        TimeToPreventThrowingAfterLeavingConcealment;      // 0x70(0x4)
	float                                                        TimeToEquip;                                       // 0x74(0x4)
	float                                                        MinTimeBetweenOfferingAndThrowing;                 // 0x78(0x4)
	float                                                        TimeToConsumePostThrow;                            // 0x7c(0x4)
	bool                                                         UseVisualThrowOffset;                              // 0x80(0x1)
	char                                                         pad0x3_K9INA[0x3];                                 // 0x81(0x3)
	float                                                        AIThrowDelayTime;                                  // 0x84(0x4)
	float                                                        AIThrowProjectileSpeed;                            // 0x88(0x4)
	bool                                                         AIThrowPreferHigherAngles;                         // 0x8c(0x1)
	char                                                         pad0x3_QG644[0x3];                                 // 0x8d(0x3)
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class CarouselPirateGeneratorParamsAsset: public DataAsset
{
public:
	struct CarouselPirateGeneratorParams                         Params;                                            // 0x28(0xc8)
};


// Size 0x48 (Full Size[0x1b8] - InheritedSize[0x170]
class EnvQueryTest_TraceByProfile: public EnvQueryTest
{
public:
	struct FName                                                 CollisionProfileName;                              // 0x170(0x8)
	struct AIDataProviderFloatValue                              Radius;                                            // 0x178(0x30)
	class UClass*                                                Context;                                           // 0x1a8(0x8)
	float                                                        ContextZOffset;                                    // 0x1b0(0x4)
	bool                                                         OnlyUseContextZ;                                   // 0x1b4(0x1)
	bool                                                         OffsetContextInwardsByRadius;                      // 0x1b5(0x1)
	char                                                         pad0x2_97NQN[0x2];                                 // 0x1b6(0x2)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipDynamicsTargetInterface: public Interface
{
public:
};


// Size 0xc0 (Full Size[0x178] - InheritedSize[0xb8]
class IntentComponent: public ActorComponent
{
public:
	char                                                         pad0x10_63K1C[0x10];                               // 0xb8(0x10)
	char                                                         AckToken;                                          // 0xc8(0x1)
	bool                                                         RequiresHandshake;                                 // 0xc9(0x1)
	char                                                         pad0x2_NFQKY[0x2];                                 // 0xca(0x2)
	float                                                        ServerIntent;                                      // 0xcc(0x4)
	float                                                        LocalIntent;                                       // 0xd0(0x4)
	char                                                         pad0xa4_3QMC1[0xa4];                               // 0xd4(0xa4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ReapersTributeShipEventSpawnDataAsset: public DataAsset
{
public:
	class UClass*                                                ReapersTributeShipSizeClass;                       // 0x28(0x8)
	class EnvQuery*                                              ReapersTributeShipSpawnLocationEQSQuery;           // 0x30(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class CharacterMovementAINoiseEventComponentParams: public DataAsset
{
public:
	struct FName                                                 MovementTag;                                       // 0x28(0x8)
	class CurveFloat*                                            WalkingSpeedToNoiseRange;                          // 0x30(0x8)
	class CurveFloat*                                            CrouchingSpeedToNoiseRange;                        // 0x38(0x8)
	float                                                        MovingInWaterNoiseRange;                           // 0x40(0x4)
	float                                                        JumpNoiseRange;                                    // 0x44(0x4)
	float                                                        LandNoiseRange;                                    // 0x48(0x4)
	float                                                        MinSpeedToTriggerLandedEvent;                      // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialManipulationSettingsInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class HttpClientComponent: public ActorComponent
{
public:
	char                                                         pad0x80_067F0[0x80];                               // 0xb8(0x80)
};


// Size 0x30 (Full Size[0x448] - InheritedSize[0x418]
class MemoryTestPawn: public Pawn
{
public:
	float                                                        Speed;                                             // 0x418(0x4)
	char                                                         pad0x4_LHY9H[0x4];                                 // 0x41c(0x4)
	char                                                         pad0x28_WP37H[0x28];                               // 0x420(0x28)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class ShipStorageJettisonComponent: public ActorComponent
{
public:
	float                                                        MinContainerSpacing;                               // 0xb8(0x4)
	char                                                         pad0x1c_STM3K[0x1c];                               // 0xbc(0x1c)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetIsShipInSafeWatersStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_BBS0Y[0x8];                                 // 0x98(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatusResponseChangeCannonRotation: public StatusResponse
{
public:
	float                                                        TargetPitchAngle;                                  // 0x38(0x4)
	float                                                        TargetYawAngle;                                    // 0x3c(0x4)
	float                                                        RotationsBlendTime;                                // 0x40(0x4)
	char                                                         pad0x4_DXW8Z[0x4];                                 // 0x44(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LowFlyAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class CargoRunService: public Actor
{
public:
	char                                                         pad0x10_RR6R8[0x10];                               // 0x3a0(0x10)
	TArray<struct ClientCargoRunCrewDataUnit>                    ClientCrewData;                                    // 0x3b0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteVisualiserInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SignalMechanismInterface: public Interface
{
public:
};


// Size 0x100 (Full Size[0x4a0] - InheritedSize[0x3a0]
class Shipwreck: public Actor
{
public:
	char                                                         pad0x18_1M0ZS[0x18];                               // 0x3a0(0x18)
	class SceneComponent*                                        MeshParentComponent;                               // 0x3b8(0x8)
	class PrimitiveComponent*                                    RevealTriggerVolume;                               // 0x3c0(0x8)
	class CalmWaterComponent*                                    CalmZone;                                          // 0x3c8(0x8)
	struct FText                                                 LocalisedName;                                     // 0x3d0(0x38)
	char                                                         TrackedActorType;                                  // 0x408(0x1)
	char                                                         pad0x3_98MAH[0x3];                                 // 0x409(0x3)
	float                                                        DistanceThresholdToConsiderPlayerAsBeingNearShipwreckForTelemetry; // 0x40c(0x4)
	float                                                        GameEventExclusionRadius;                          // 0x410(0x4)
	float                                                        ServerMigrationPointOfInterestDistance;            // 0x414(0x4)
	class UClass*                                                ProxyClass;                                        // 0x418(0x8)
	bool                                                         ShouldOnlySpawnItemsWhenPlayersApproach;           // 0x420(0x1)
	bool                                                         ShouldDisableMigrationForSpawnItemsUntilPickedUp;  // 0x421(0x1)
	bool                                                         ShouldDisableOverlapEvent;                         // 0x422(0x1)
	char                                                         pad0x5_ZYO4P[0x5];                                 // 0x423(0x5)
	TArray<struct ActorComponentSelector>                        ItemSpawnComponentsToIgnorePlayerProximity;        // 0x428(0x10)
	char                                                         pad0x18_MUOL6[0x18];                               // 0x438(0x18)
	struct EncounterParams                                       SightingEncounterParams;                           // 0x450(0xc)
	struct EncounterParams                                       CloseEncounterParams;                              // 0x45c(0xc)
	float                                                        ClearItemsDelayInSeconds;                          // 0x468(0x4)
	char                                                         pad0x34_M1D64[0x34];                               // 0x46c(0x34)
};


// Size 0xb8 (Full Size[0x170] - InheritedSize[0xb8]
class BodyLightControllerComponent: public ActorComponent
{
public:
	class CurveFloat*                                            HourOfDayToIntensityMultiplierCurve;               // 0xb8(0x8)
	float                                                        BaseLightIntensity;                                // 0xc0(0x4)
	float                                                        IntensitySpringAccel;                              // 0xc4(0x4)
	char                                                         pad0xa8_G8T5H[0xa8];                               // 0xc8(0xa8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class AIProjectileWeaponFiringIntentionComponent: public ActorComponent
{
public:
	char                                                         pad0x8_JR010[0x8];                                 // 0xb8(0x8)
	class Pawn*                                                  PawnOwner;                                         // 0xc0(0x8)
	class AthenaAIControllerBase*                                AIController;                                      // 0xc8(0x8)
	char                                                         pad0x1c_SMSFI[0x1c];                               // 0xd0(0x1c)
	float                                                        DefaultHitChance;                                  // 0xec(0x4)
};


// Size 0x188 (Full Size[0x1b0] - InheritedSize[0x28]
class VoyageDescDataAsset: public DataAsset
{
public:
	TArray<struct ChapterQuests>                                 Chapters;                                          // 0x28(0x10)
	TArray<struct FeatureToggledChapters>                        FeatureToggledChapters;                            // 0x38(0x10)
	struct FText                                                 Title;                                             // 0x48(0x38)
	struct FText                                                 Description;                                       // 0x80(0x38)
	struct FText                                                 LockedDescription;                                 // 0xb8(0x38)
	struct StringAssetReference                                  KeyArtUrl;                                         // 0xf0(0x10)
	struct StringAssetReference                                  IconUrl;                                           // 0x100(0x10)
	class UClass*                                                Company;                                           // 0x110(0x8)
	bool                                                         IsEmergent;                                        // 0x118(0x1)
	bool                                                         IsTale;                                            // 0x119(0x1)
	bool                                                         IsStarlightTale;                                   // 0x11a(0x1)
	bool                                                         IsUtilityVoyage;                                   // 0x11b(0x1)
	bool                                                         IsAdventure;                                       // 0x11c(0x1)
	bool                                                         IsCrossWorld;                                      // 0x11d(0x1)
	bool                                                         IsAthenaVoyage2;                                   // 0x11e(0x1)
	bool                                                         IsConsumableQuestTableVoyage;                      // 0x11f(0x1)
	struct ViewVoyageBanners                                     ViewVoyageBanners;                                 // 0x120(0x3)
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x123(0x1)
	bool                                                         DoNotNotifyParticipantsOfQuestPages;               // 0x124(0x1)
	char                                                         pad0x3_6FLU7[0x3];                                 // 0x125(0x3)
	int                                                          Rank;                                              // 0x128(0x4)
	char                                                         pad0x4_5KH0B[0x4];                                 // 0x12c(0x4)
	TArray<struct PlayerStat>                                    VoyageProposedStats;                               // 0x130(0x10)
	TArray<struct PlayerStat>                                    VoyageBegunStats;                                  // 0x140(0x10)
	TArray<struct PlayerStat>                                    VoyageCompletionStats;                             // 0x150(0x10)
	TArray<struct PlayerStat>                                    DiveVoyageCompletionStats;                         // 0x160(0x10)
	TArray<struct PlayerStat>                                    ReapersMarkCompletionStats;                        // 0x170(0x10)
	TArray<struct VoyageCompletionReward>                        VoyageCompletionRewards;                           // 0x180(0x10)
	struct FName                                                 CampaignId;                                        // 0x190(0x8)
	struct StringAssetReference                                  TaleCancelVoteMesh;                                // 0x198(0x10)
	char                                                         EmergentSource;                                    // 0x1a8(0x1)
	char                                                         pad0x7_QRINJ[0x7];                                 // 0x1a9(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableTogglePinNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ModalInteractionActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimAssistTargetInterface: public Interface
{
public:
};


// Size 0x58 (Full Size[0x3f8] - InheritedSize[0x3a0]
class VolumeMechanismTrigger: public Actor
{
public:
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3a0(0x8)
	class BoxComponent*                                          TriggerVolume;                                     // 0x3a8(0x8)
	bool                                                         UsePerCrewOverlaps;                                // 0x3b0(0x1)
	char                                                         pad0x3_WOK6M[0x3];                                 // 0x3b1(0x3)
	int                                                          PerCrewOverlapCooldownTimeInSeconds;               // 0x3b4(0x4)
	char                                                         pad0x40_04PB9[0x40];                               // 0x3b8(0x40)
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class LegendOfTheSunkenKingdomVoyageOwnershipComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HT3E5[0x8];                                 // 0xb8(0x8)
	TArray<struct LegendOfTheSunkenKingdomPrerequisite>          Prerequisites;                                     // 0xc0(0x10)
	struct PirateIdentity                                        PirateIdentity;                                    // 0xd0(0x78)
	char                                                         pad0x8_9B8CL[0x8];                                 // 0x148(0x8)
	TArray<int>                                                  SatisfiedPrerequisites;                            // 0x150(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SicknessInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class TaleQuestLoopStepDesc: public TaleQuestStepDesc
{
public:
	class TaleQuestStepDesc*                                     LoopDesc;                                          // 0x80(0x8)
	struct QuestVariableBool                                     Condition;                                         // 0x88(0x30)
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class TaleQuestParallelForeachStep: public TaleQuestStep
{
public:
	class TaleQuestParallelForeachStepDesc*                      Desc;                                              // 0x98(0x8)
	int                                                          Count;                                             // 0xa0(0x4)
	char                                                         pad0x4_CJWMV[0x4];                                 // 0xa4(0x4)
	TArray<class Interface*>                                     Steps;                                             // 0xa8(0x10)
	TArray<class IteratorFrame*>                                 Frames;                                            // 0xb8(0x10)
	char                                                         pad0x8_60PGC[0x8];                                 // 0xc8(0x8)
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class ShipCompass: public Actor
{
public:
	class PoseableMeshComponent*                                 CompassMesh;                                       // 0x3a0(0x8)
	struct FName                                                 DialBoneName;                                      // 0x3a8(0x8)
	class CompassSpinComponent*                                  SpinComponent;                                     // 0x3b0(0x8)
	char                                                         pad0x58_Y2ULX[0x58];                               // 0x3b8(0x58)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class BuriedItemStep: public TaleQuestStep
{
public:
	class BuriedItemStepDesc*                                    StepDesc;                                          // 0x98(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class SovereignData: public DataAsset
{
public:
	struct StringAssetReference                                  StampIconAssetRef;                                 // 0x28(0x10)
	TArray<struct CompanyBootyStats>                             CompanyStats;                                      // 0x38(0x10)
	TArray<struct CompanyConditionalStatsTriggerType>            CompanyConditionalStatsTriggerTypes;               // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StunnedActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TelemetryDescriptorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SeaIdValidationDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         AllSeaIds;                                         // 0x28(0x10)
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class SirenActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	struct AISpawnActionStateParams                              AISpawnParams;                                     // 0x3a0(0x10)
	struct AISwimmingCreatureDeadActionStateParams               AIDeadParams;                                      // 0x3b0(0x20)
	struct UseItemActionStateParams                              UseItemParams;                                     // 0x3d0(0x1)
	struct HiddenActionStateParams                               HiddenStateParams;                                 // 0x3d1(0x5)
	char                                                         pad0x1a_19EPM[0x1a];                               // 0x3d6(0x1a)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeckonGestureID: public Object
{
public:
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class GarbageGenerator: public Actor
{
public:
	int                                                          GarbageGenerationRatePerFrame;                     // 0x3a0(0x4)
	int                                                          SizeOfPersistentSet;                               // 0x3a4(0x4)
	TArray<class Object*>                                        StronglyReferencedObjects;                         // 0x3a8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocomotionInitialStateCreatorDefinition: public ActionStateInitialStateCreatorDefinition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandEventDataInterface: public Interface
{
public:
};


// Size 0x6a0 (Full Size[0xc50] - InheritedSize[0x5b0]
class AthenaCharacter: public Character
{
public:
	char                                                         pad0x130_ZKX8C[0x130];                             // 0x5b0(0x130)
	class LookAtOffsetComponent*                                 LookAtOffsetComponent;                             // 0x6e0(0x8)
	class AnimationDataStoreAsset*                               AnimationDataStoreAsset;                           // 0x6e8(0x8)
	class AthenaAnimationSittingDataAsset*                       SittingAnimationDataAssets;                        // 0x6f0(0x8)
	class CrouchDataAsset*                                       CrouchDataAsset;                                   // 0x6f8(0x8)
	class WalkableEmoteDataAsset*                                WalkableEmoteDataAsset;                            // 0x700(0x8)
	class AthenaCharacterMovementComponent*                      AthenaCharacterMovementComponent;                  // 0x708(0x8)
	class CollidableCharacterComponent*                          CollidableCharacterComponent;                      // 0x710(0x8)
	char                                                         pad0x8_QKBD6[0x8];                                 // 0x718(0x8)
	struct Docker                                                Docker;                                            // 0x720(0x90)
	class ActionStateMachineComponent*                           ActionStateMachineComponent;                       // 0x7b0(0x8)
	class ActionStatePriorityTableData*                          ActionStatePriorityTableData;                      // 0x7b8(0x8)
	class UClass*                                                ActionStateCreatorDefinition;                      // 0x7c0(0x8)
	struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x7c8(0xa0)
	class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x868(0x8)
	class WieldedItemComponent*                                  WieldedItemComponent;                              // 0x870(0x8)
	class SceneComponent*                                        MeshAdjustmentComponent;                           // 0x878(0x8)
	class SceneComponent*                                        MeshSmoothingComponent;                            // 0x880(0x8)
	class InventoryManipulatorComponent*                         InventoryManipulatorComponent;                     // 0x888(0x8)
	class LoadoutComponent*                                      LoadoutComponent;                                  // 0x890(0x8)
	class ItemLoadoutComponent*                                  ItemLoadoutComponent;                              // 0x898(0x8)
	class HealthComponent*                                       HealthComponent;                                   // 0x8a0(0x8)
	class AthenaCharacterStateManagerComponent*                  StateManagerComponent;                             // 0x8a8(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x8b0(0x8)
	class ActorDamageableComponent*                              ActorDamageableComponent;                          // 0x8b8(0x8)
	class CharacterHitReactionComponent*                         CharacterHitReactionComponent;                     // 0x8c0(0x8)
	class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x8c8(0x8)
	class MeleeAttackProcessorComponent*                         MeleeAttackProcessor;                              // 0x8d0(0x8)
	class HitDetectionComponent*                                 HitDetectionComponent;                             // 0x8d8(0x8)
	class AthenaCharacterKnockbackComponent*                     KnockBackComponent;                                // 0x8e0(0x8)
	class AthenaCharacterDodgeComponent*                         DodgeComponent;                                    // 0x8e8(0x8)
	class CharacterAINoiseEventComponent*                        CharacterAINoiseEventComponent;                    // 0x8f0(0x8)
	class ActionRulesComponent*                                  PrivateActionRulesComponent;                       // 0x8f8(0x8)
	class ShipTrackerComponent*                                  ShipTrackerComponent;                              // 0x900(0x8)
	class WatercraftTrackerComponent*                            WatercraftTrackerComponent;                        // 0x908(0x8)
	class ItemLoaderComponent*                                   ItemLoaderComponent;                               // 0x910(0x8)
	class RetractableCharacterComponent*                         RetractableCharacterComponent;                     // 0x918(0x8)
	class ResourceProviderComponent*                             ResourceProviderComponent;                         // 0x920(0x8)
	class CharacterFlammableComponent*                           CharacterFlammableComponent;                       // 0x928(0x8)
	class SoakableComponent*                                     SoakableComponent;                                 // 0x930(0x8)
	class WaterExposureComponent*                                WaterExposureComponent;                            // 0x938(0x8)
	class ShelteredComponent*                                    ShelteredComponent;                                // 0x940(0x8)
	class BoxedRpcDispatcherComponent*                           BoxedRpcDispatcherComponent;                       // 0x948(0x8)
	class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x950(0x8)
	class InteractionPreventionComponent*                        InteractionPreventionComponent;                    // 0x958(0x8)
	class DeathCustomisationComponent*                           DeathCustomisation;                                // 0x960(0x8)
	class MovementInterferenceComponent*                         InterferenceComponent;                             // 0x988(0x8)
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x990(0x8)
	class UClass*                                                ThirdPersonAnimSetDataId;                          // 0x998(0x8)
	bool                                                         OverrideEncroachesBlockingGeometry;                // 0x9a0(0x1)
	char                                                         OverrideEncroachesBlockingGeometryChannel;         // 0x9a1(0x1)
	char                                                         pad0x2_AFMW8[0x2];                                 // 0x9a2(0x2)
	struct FName                                                 OverrideFloorSweepCollisionProfileName;            // 0x9a4(0x8)
	char                                                         pad0x20_OT6ZC[0x20];                               // 0x9ac(0x20)
	float                                                        MovementThresholdToRecordRewindTransform;          // 0x9cc(0x4)
	char                                                         pad0xc_3JRUI[0xc];                                 // 0x9d0(0xc)
	int                                                          SpawnAnimIndex;                                    // 0x9dc(0x4)
	char                                                         pad0x70_E3RSB[0x70];                               // 0x9e0(0x70)
	class AnimationDataStore*                                    AnimationDataStore;                                // 0xa50(0x8)
	char                                                         pad0x70_ZMN7U[0x70];                               // 0xa58(0x70)
	class PlayerState*                                           OldPlayerState;                                    // 0xac8(0x8)
	char                                                         pad0x3c_G2F8S[0x3c];                               // 0xad0(0x3c)
	float                                                        RelativeTargetYawOnMovingBase;                     // 0xb0c(0x4)
	char                                                         pad0x30_TQI1R[0x30];                               // 0xb10(0x30)
	float                                                        SmoothYawOnMovingBaseTime;                         // 0xb40(0x4)
	int                                                          RandomAnimationSeed;                               // 0xb44(0x4)
	char                                                         pad0x8_IF1V5[0x8];                                 // 0xb48(0x8)
	bool                                                         RandomBool;                                        // 0xb50(0x1)
	char                                                         pad0x27_ZZ10M[0x27];                               // 0xb51(0x27)
	class SkeletalMeshSocket*                                    CameraSocket;                                      // 0xb78(0x8)
	char                                                         pad0x30_22K46[0x30];                               // 0xb80(0x30)
	TArray<class InputComponent*>                                RegisteredInputComponents;                         // 0xbb0(0x10)
	char                                                         pad0x68_P758Q[0x68];                               // 0xbc0(0x68)
	TArray<class Actor*>                                         AttachedDarts;                                     // 0xc38(0x10)
	char                                                         pad0x8_XJGUW[0x8];                                 // 0xc48(0x8)
};


// Size 0xc0 (Full Size[0x200] - InheritedSize[0x140]
class TaleProgressStatueInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x8_7W2TH[0x8];                                 // 0x140(0x8)
	float                                                        HoldTime;                                          // 0x148(0x4)
	char                                                         pad0x4_GR9FK[0x4];                                 // 0x14c(0x4)
	class UClass*                                                ReturnToShipInteractionInputID;                    // 0x150(0x8)
	class UClass*                                                ReturnToShipInteractionReleasedInputID;            // 0x158(0x8)
	class UClass*                                                ResumeFromTaleProgressInteractionInputID;          // 0x160(0x8)
	class UClass*                                                ResumeFromTaleProgressInteractionReleasedInputID;  // 0x168(0x8)
	struct FText                                                 ResumeFromTaleProgressActionRuleDescription;       // 0x170(0x38)
	struct FText                                                 ResumeFromTaleProgressWithLargeItemActionRuleDescription; // 0x1a8(0x38)
	char                                                         pad0x10_U62LF[0x10];                               // 0x1e0(0x10)
	class TaleProgressStatue*                                    OwningStatue;                                      // 0x1f0(0x8)
	char                                                         StatueInteractionState;                            // 0x1f8(0x1)
	char                                                         pad0x7_UKSZN[0x7];                                 // 0x1f9(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSocketCollisionDelegate: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FiredFromActorActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OpenableItemInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuoyancyInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class TunnelDesc: public DataAsset
{
public:
	class TunnelTypesDataAsset*                                  TunnelTypes;                                       // 0x28(0x8)
	class UClass*                                                TunnelLevelId;                                     // 0x30(0x8)
	float                                                        TunnelYaw;                                         // 0x38(0x4)
	char                                                         pad0x4_YK2YV[0x4];                                 // 0x3c(0x4)
	class WwiseEvent*                                            AmbienceSfxEvent;                                  // 0x40(0x8)
	class WwiseEvent*                                            AmbienceSfxStop;                                   // 0x48(0x8)
	class WwiseObjectPoolWrapper*                                AmbienceSfxPool;                                   // 0x50(0x8)
	char                                                         TeleportAudioSettings;                             // 0x58(0x1)
	bool                                                         DropCapstanOnTunnelExit;                           // 0x59(0x1)
	char                                                         pad0x6_8KWKD[0x6];                                 // 0x5a(0x6)
	class TunnelPresenterObjectParamsBase*                       PresenterObjectParams;                             // 0x60(0x8)
	bool                                                         ForceRespawnPlayersOnShipInFailureScenarios;       // 0x68(0x1)
	bool                                                         SpawnShipOutsidePortalInFailureScenarios;          // 0x69(0x1)
	char                                                         pad0x6_R2WSW[0x6];                                 // 0x6a(0x6)
	class PopUpMessageDesc*                                      TunnelFailurePopUpDesc;                            // 0x70(0x8)
	char                                                         TunnelFailureShipSailState;                        // 0x78(0x1)
	bool                                                         ShouldTunnelCancelEmergentVoyages;                 // 0x79(0x1)
	bool                                                         ShouldTunnelCancelEmergentVoyagesExcludingEmissary; // 0x7a(0x1)
	bool                                                         ShouldTunnelCancelPrimaryVoyages;                  // 0x7b(0x1)
	struct FeatureFlag                                           ShouldTunnelCancelPrimaryVoyagesFeatureFlag;       // 0x7c(0xc)
	bool                                                         ShouldDeferPrimaryVoyageCancellation;              // 0x88(0x1)
	char                                                         pad0x7_2VEP4[0x7];                                 // 0x89(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ghost_ship_sails_grunt_01_AHuntersCry: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x170 (Full Size[0x510] - InheritedSize[0x3a0]
class TributeToolTipActor: public Actor
{
public:
	char                                                         pad0x8_AN9DB[0x8];                                 // 0x3a0(0x8)
	class InteractableComponentWithTooltipDetailedEventProvider* InteractableComponentWithTooltipDetailedEventProvider; // 0x3a8(0x8)
	class BladeOfSoulsUICardManagerComponent*                    BladeOfSoulsUICardManagerComponent;                // 0x3b0(0x8)
	struct FName                                                 WwiseEmitterName;                                  // 0x3b8(0x8)
	class WwiseObjectPoolWrapper*                                ToolTipWwisePool;                                  // 0x3c0(0x8)
	class WwiseEvent*                                            CardFlippedWwiseEvent;                             // 0x3c8(0x8)
	char                                                         pad0x140_MEYWF[0x140];                             // 0x3d0(0x140)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class ShipwreckSiteGeneratorRandom: public DataAsset
{
public:
	float                                                        MinSpawnDistanceFromEndOfWorldZone;                // 0x28(0x4)
	char                                                         pad0x4_H0F8P[0x4];                                 // 0x2c(0x4)
	class CurveFloat*                                            ShipwreckDepthDistribution;                        // 0x30(0x8)
	float                                                        ClearanceRadius;                                   // 0x38(0x4)
	float                                                        MinDistanceFromClosestShipwreck;                   // 0x3c(0x4)
	float                                                        MinDistanceFromClosestCrewShip;                    // 0x40(0x4)
	float                                                        MinDistanceFromClosestIsland;                      // 0x44(0x4)
	float                                                        MinDistanceFromClosestPlayer;                      // 0x48(0x4)
	float                                                        MinDistanceFromClosestRock;                        // 0x4c(0x4)
	float                                                        MinDistanceFromClosestActiveEncounter;             // 0x50(0x4)
	float                                                        SiteGenerationThrottle;                            // 0x54(0x4)
	int                                                          RequestBatchSize;                                  // 0x58(0x4)
	char                                                         pad0x4_S1ZMA[0x4];                                 // 0x5c(0x4)
	TArray<struct ShipwreckSiteRotation>                         Rotations;                                         // 0x60(0x10)
	float                                                        IslandConvexHullExpansionDistance;                 // 0x70(0x4)
	char                                                         pad0x4_R8107[0x4];                                 // 0x74(0x4)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class RadialContentRule: public Object
{
public:
	struct FText                                                 RadialTitle;                                       // 0x28(0x38)
	char                                                         pad0x8_6WWSK[0x8];                                 // 0x60(0x8)
	TArray<class Class*>                                         NotificationInputsToBlock;                         // 0x68(0x10)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class ProjectileLauncherMechanismSourceDataAsset: public DataAsset
{
public:
	float                                                        CannonRangeInMetres;                               // 0x28(0x4)
	float                                                        CannonAngle;                                       // 0x2c(0x4)
	TArray<struct ProjectileLauncherMechanismSourceShipParams>   ShipParams;                                        // 0x30(0x10)
	struct ProjectileLauncherMechanismSourceWatercraftParams     WatercraftParams;                                  // 0x40(0x38)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ConditionalStatsAsset: public DataAsset
{
public:
	TArray<struct ConditionalStat>                               ConditionalStats;                                  // 0x28(0x10)
};


// Size 0x120 (Full Size[0x1d8] - InheritedSize[0xb8]
class CompassSpinComponent: public ActorComponent
{
public:
	char                                                         pad0x8_Z3IWQ[0x8];                                 // 0xb8(0x8)
	bool                                                         EnableAcceleration;                                // 0xc0(0x1)
	char                                                         pad0x3_8I9SS[0x3];                                 // 0xc1(0x3)
	float                                                        MagnetForce;                                       // 0xc4(0x4)
	float                                                        DefaultDampingFactor;                              // 0xc8(0x4)
	struct FName                                                 BoneToRotate;                                      // 0xcc(0x8)
	bool                                                         EnableOneShotSpinning;                             // 0xd4(0x1)
	char                                                         pad0x3_6DHST[0x3];                                 // 0xd5(0x3)
	float                                                        OneShotSpinDuration;                               // 0xd8(0x4)
	float                                                        OneShotSpinDampingFactor;                          // 0xdc(0x4)
	float                                                        OneShotSpinSpeed;                                  // 0xe0(0x4)
	float                                                        OneShotSpinSeekSpeed;                              // 0xe4(0x4)
	float                                                        OneShotSpinAcceleration;                           // 0xe8(0x4)
	float                                                        OneShotSpinDecelerationPeriod;                     // 0xec(0x4)
	float                                                        OneShotSpinSeekSnapPeriod;                         // 0xf0(0x4)
	float                                                        OneShotSpinSeekSnapDegrees;                        // 0xf4(0x4)
	bool                                                         EnableSpinningInStorms;                            // 0xf8(0x1)
	char                                                         pad0x3_CXKQF[0x3];                                 // 0xf9(0x3)
	float                                                        StormSpinDampingFactor;                            // 0xfc(0x4)
	struct WeightedProbabilityRangeOfRanges                      StormSpinSpeeds;                                   // 0x100(0x30)
	struct WeightedProbabilityRangeOfRanges                      StormSpinAccelerations;                            // 0x130(0x30)
	TArray<float>                                                StormSpinChancesOfPointingNorth;                   // 0x160(0x10)
	struct WeightedProbabilityRangeOfRanges                      StormSpinPointingNorthDurations;                   // 0x170(0x30)
	struct FloatRange                                            StormSpinDirectionChangeInterval;                  // 0x1a0(0x10)
	char                                                         pad0x28_1U2MD[0x28];                               // 0x1b0(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPickupBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BlockGeysersTaleQuestService: public TaleQuestService
{
public:
	class BlockGeysersTaleQuestServiceDesc*                      Desc;                                              // 0x60(0x8)
	char                                                         pad0x8_H14ZJ[0x8];                                 // 0x68(0x8)
};


// Size 0x640 (Full Size[0x9e0] - InheritedSize[0x3a0]
class CrewSpawnLocations: public Actor
{
public:
	char                                                         pad0x170_SNL81[0x170];                             // 0x3a0(0x170)
	TArray<class ShipSpawnLocation*>                             AvailableSpawnLocations;                           // 0x510(0x10)
	TArray<class ProgressSpawnLocation*>                         AvailableNamedSpawnLocations;                      // 0x520(0x10)
	TArray<class ShipSpawnLocation*>                             PendingUnavailableSpawnLocations;                  // 0x530(0x10)
	char                                                         pad0x418_DEXVT[0x418];                             // 0x540(0x418)
	class CrewSpawnLocationVariablesListAsset*                   SpawnVariablesAsset;                               // 0x958(0x8)
	char                                                         pad0x80_KK6TF[0x80];                               // 0x960(0x80)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class VulnerabilityAIAbilityParams: public AthenaAIAbilityParams
{
public:
	struct AthenaAIAbilityPlayerBasedRanges                      VulnerabilityDuration;                             // 0xc8(0x10)
	struct AthenaAIAbilityPlayerBasedRanges                      MaxVulnerabilityPeriodDamageThreshold;             // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageContainerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LivingEntityInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x180] - InheritedSize[0x28]
class ContestMapLayout: public DataAsset
{
public:
	struct TreasureMapWidgetText                                 CompanyName;                                       // 0x28(0x3c)
	struct TreasureMapWidgetText                                 VoyageName;                                        // 0x64(0x3c)
	struct TreasureMapWidgetText                                 ScoreboardTitle;                                   // 0xa0(0x3c)
	struct TreasureMapWidgetText                                 ScoreId;                                           // 0xdc(0x3c)
	TArray<struct ContestMapLayoutCrew>                          Crews;                                             // 0x118(0x10)
	TArray<struct ContestMapLayoutScoreInfo>                     ScoreInfo;                                         // 0x128(0x10)
	bool                                                         AutogenerateScoreboard;                            // 0x138(0x1)
	char                                                         pad0x3_XU9IX[0x3];                                 // 0x139(0x3)
	float                                                        ScoreboardTopOffset;                               // 0x13c(0x4)
	float                                                        IconLeftOffset;                                    // 0x140(0x4)
	float                                                        IconWidth;                                         // 0x144(0x4)
	float                                                        NameLeftOffset;                                    // 0x148(0x4)
	float                                                        NameScale;                                         // 0x14c(0x4)
	float                                                        ScoreLeftOffset;                                   // 0x150(0x4)
	float                                                        ScoreScale;                                        // 0x154(0x4)
	float                                                        ScoreboardSpacing;                                 // 0x158(0x4)
	float                                                        UnderlineVerticalOffset;                           // 0x15c(0x4)
	float                                                        UnderlineScale;                                    // 0x160(0x4)
	float                                                        ScoreReasonScale;                                  // 0x164(0x4)
	float                                                        ScoreReasonTopOffset;                              // 0x168(0x4)
	float                                                        ScoreReasonLineStart;                              // 0x16c(0x4)
	float                                                        ScoreReasonLineEnd;                                // 0x170(0x4)
	float                                                        ScoreReasonTextRelativeTopOffset;                  // 0x174(0x4)
	float                                                        ScoreReasonTextScale;                              // 0x178(0x4)
	char                                                         pad0x4_1ATRB[0x4];                                 // 0x17c(0x4)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class AthenaStreamedLevelService: public Object
{
public:
	char                                                         pad0x20_XAVLB[0x20];                               // 0x28(0x20)
	TArray<struct AthenaStreamedLevelData>                       ManagedLevels;                                     // 0x48(0x10)
	class FeatureToggledLevelsDataAsset*                         FeatureToggledLevelsDA;                            // 0x58(0x8)
	char                                                         pad0x68_2LI9V[0x68];                               // 0x60(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseMountableSpotlightActionStateId: public ActionStateId
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class InitialisePuzzleVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
	struct QuestVariableDataAsset                                SolutionAsset;                                     // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableCutsceneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LadderBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class CheckIsActorCriticalStep: public TaleQuestStep
{
public:
	class CheckIsActorCriticalStepDesc*                          StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IntentInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseDrunkCurse: public StatusResponse
{
public:
	float                                                        DrunkennessStrength;                               // 0x38(0x4)
	char                                                         pad0x4_WPBB3[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpulseThrottlerInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmblemDefinitionAssetList: public DataAsset
{
public:
	TArray<class EmblemDefinitionDataAsset*>                     EmblemDefinitionAssets;                            // 0x28(0x10)
};


// Size 0x148 (Full Size[0x200] - InheritedSize[0xb8]
class ShipCustomizationLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x20_AE44H[0x20];                               // 0xb8(0x20)
	struct ShipCustomizationLoadout                              Loadout;                                           // 0xd8(0x38)
	bool                                                         SavedCustomizationsPreviouslyApplied;              // 0x110(0x1)
	char                                                         pad0x7_9XGRY[0x7];                                 // 0x111(0x7)
	class Actor*                                                 Ship;                                              // 0x118(0x8)
	class UClass*                                                ShipSize;                                          // 0x120(0x8)
	char                                                         pad0x48_ABPMO[0x48];                               // 0x128(0x48)
	struct ShipCustomizationLoadoutPartCustomizations            ActivePartCustomizations;                          // 0x170(0x10)
	char                                                         pad0x30_9LU2J[0x30];                               // 0x180(0x30)
	class ShipCustomizationSettings*                             ShipCustomizationSettings;                         // 0x1b0(0x8)
	char                                                         pad0x18_VQ9D3[0x18];                               // 0x1b8(0x18)
	TArray<class Class*>                                         OwnerRestrictedCustomizationsCurrentlyAllowed;     // 0x1d0(0x10)
	TArray<class Class*>                                         LockedCustomizationCategory;                       // 0x1e0(0x10)
	char                                                         pad0x10_NP2KE[0x10];                               // 0x1f0(0x10)
};


// Size 0x588 (Full Size[0x640] - InheritedSize[0xb8]
class ScreenSpaceVfxComponent: public ActorComponent
{
public:
	class ScreenSpaceVFXComponentParams*                         Params;                                            // 0xb8(0x8)
	char                                                         pad0x8_R364G[0x8];                                 // 0xc0(0x8)
	TArray<class ParticleSystemComponent*>                       ScreenSpaceParticleSystems;                        // 0xc8(0x10)
	char                                                         pad0x568_CNZZQ[0x568];                             // 0xd8(0x568)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleNPCOnSurfaceServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestNPCBeckonCrewStepDesc: public TaleQuestStepDesc
{
public:
	struct BeckonTag                                             BeckonTag;                                         // 0x80(0x10)
};


// Size 0x1a0 (Full Size[0x258] - InheritedSize[0xb8]
class CargoRunCrateComponent: public ActorComponent
{
public:
	char                                                         pad0x40_Q8666[0x40];                               // 0xb8(0x40)
	class CargoRunCrateData*                                     CargoRunCrateData;                                 // 0xf8(0x8)
	class CargoRunCrateCustomData*                               CargoRunCrateCustomData;                           // 0x100(0x8)
	struct FeatureToggledCargoRunCrateCustomData                 OverrideCargoRunCrateCustomData;                   // 0x108(0x18)
	struct CargoRunItemDropOffData                               DropOffData;                                       // 0x120(0x60)
	bool                                                         HasSpecifiedDeliveryLocation;                      // 0x188(0x1)
	char                                                         pad0x7_1TWOF[0x7];                                 // 0x189(0x7)
	TArray<class Class*>                                         DeliverableCompanies;                              // 0x190(0x10)
	char                                                         WieldedState;                                      // 0x1a0(0x1)
	char                                                         pad0xb7_GBC8Y[0xb7];                               // 0x1a1(0xb7)
};


// Size 0x78 (Full Size[0x418] - InheritedSize[0x3a0]
class StarChart: public Actor
{
public:
	char                                                         pad0x10_7U1PH[0x10];                               // 0x3a0(0x10)
	TArray<class Actor*>                                         StarClustersAndConstellations;                     // 0x3b0(0x10)
	char                                                         pad0x58_R17TJ[0x58];                               // 0x3c0(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipActivityInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class ShroudBreakerService: public Actor
{
public:
	char                                                         pad0x78_NWUIT[0x78];                               // 0x3a0(0x78)
	class World*                                                 World;                                             // 0x418(0x8)
};


// Size 0x88 (Full Size[0xf8] - InheritedSize[0x70]
class BTService_FindRecentlyUsedDigsite: public BTService
{
public:
	struct AIDataProviderFloatValue                              ServiceActiveParam;                                // 0x70(0x30)
	struct BlackboardKeySelector                                 DigsiteInteractorBBKey;                            // 0xa0(0x28)
	struct BlackboardKeySelector                                 FoundDigsiteObjectBBKey;                           // 0xc8(0x28)
	bool                                                         SearchEvenIfDigsiteObjectIsValid;                  // 0xf0(0x1)
	bool                                                         IgnoreEmptyHoles;                                  // 0xf1(0x1)
	char                                                         pad0x6_NTN3Y[0x6];                                 // 0xf2(0x6)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class PlayerAtmosphericsAudioComponentParams: public DataAsset
{
public:
	class WwiseEvent*                                            WindStartEvent;                                    // 0x28(0x8)
	class WwiseEvent*                                            WindStopEvent;                                     // 0x30(0x8)
	class WwiseEvent*                                            RainStartEvent;                                    // 0x38(0x8)
	class WwiseEvent*                                            RainStopEvent;                                     // 0x40(0x8)
	struct FName                                                 GlobalWindSpeedRtpc;                               // 0x48(0x8)
	struct FName                                                 PlayerWindAngleRtpc;                               // 0x50(0x8)
	struct FName                                                 PlayerVerticalSpeedRtpc;                           // 0x58(0x8)
	struct FName                                                 AtmosphericPressureFreqRtpc;                       // 0x60(0x8)
	struct FName                                                 AtmosphericPressureVolRtpc;                        // 0x68(0x8)
	float                                                        AtmosphericPressureFreqTimebase;                   // 0x70(0x4)
	float                                                        AtmosphericPressureVolTimebase;                    // 0x74(0x4)
	TArray<struct PoolDensityData>                               PoolDensityWrapperData;                            // 0x78(0x10)
};


// Size 0xb8 (Full Size[0xe0] - InheritedSize[0x28]
class QuestBookPagesInContainerDataAsset: public DataAsset
{
public:
	char                                                         pad0x8_SD12N[0x8];                                 // 0x28(0x8)
	struct Transform                                             Transform;                                         // 0x30(0x30)
	class StaticMesh*                                            PagesMesh;                                         // 0x60(0x8)
	struct FText                                                 ActionTooltipDisplayString;                        // 0x68(0x38)
	struct FText                                                 ActionTooltipDisplayStringSentence;                // 0xa0(0x38)
	char                                                         pad0x8_CQPSC[0x8];                                 // 0xd8(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class QuestTableDiscoverTabData: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          DiscoverTileTextures;                              // 0x28(0x10)
	struct StringAssetReference                                  DefaultBackgroundImage;                            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FireBreathAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x50 (Full Size[0xb8] - InheritedSize[0x68]
class BTDecorator_ActorWieldedItemCategory: public BTDecorator_BaseConditional
{
public:
	float                                                        Interval;                                          // 0x68(0x4)
	char                                                         pad0x4_Y48PC[0x4];                                 // 0x6c(0x4)
	struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x70(0x28)
	char                                                         pad0x20_FGYL9[0x20];                               // 0x98(0x20)
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class ReapersTributeShipComponent: public ActorComponent
{
public:
	char                                                         pad0x8_C995G[0x8];                                 // 0xb8(0x8)
	int                                                          IslandCycleBuffer;                                 // 0xc0(0x4)
	char                                                         pad0x4_X5T8T[0x4];                                 // 0xc4(0x4)
	TArray<struct Name>                                          TributeIslands;                                    // 0xc8(0x10)
	TArray<struct Name>                                          VisitedIslands;                                    // 0xd8(0x10)
	char                                                         pad0x18_F3HYI[0x18];                               // 0xe8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState: public Object
{
public:
};


// Size 0x1b8 (Full Size[0x1e0] - InheritedSize[0x28]
class FogBankDataAsset: public DataAsset
{
public:
	char                                                         FogBankType;                                       // 0x28(0x1)
	char                                                         pad0x7_15BR9[0x7];                                 // 0x29(0x7)
	struct WeightedProbabilityRangeOfRanges                      Density;                                           // 0x30(0x30)
	struct WeightedProbabilityRangeOfRanges                      RadiusXInKm;                                       // 0x60(0x30)
	struct WeightedProbabilityRangeOfRanges                      RadiusYInKm;                                       // 0x90(0x30)
	struct WeightedProbabilityRangeOfRanges                      HeightInKm;                                        // 0xc0(0x30)
	struct LinearColor                                           DefaultColour;                                     // 0xf0(0x10)
	TArray<struct FogColourForSea>                               FogColourForSea;                                   // 0x100(0x10)
	struct WeightedProbabilityRangeOfRanges                      FadeInDuration;                                    // 0x110(0x30)
	struct WeightedProbabilityRangeOfRanges                      ActiveDuration;                                    // 0x140(0x30)
	struct WeightedProbabilityRangeOfRanges                      FadeOutDuration;                                   // 0x170(0x30)
	struct WeightedProbabilityRangeOfRanges                      EmergencyFadeOutDuration;                          // 0x1a0(0x30)
	bool                                                         Persistent;                                        // 0x1d0(0x1)
	char                                                         pad0x3_J5X0Q[0x3];                                 // 0x1d1(0x3)
	float                                                        TimeBetweenLocalPlayerDensityModifierUpdate;       // 0x1d4(0x4)
	float                                                        NotCulledDistanceFromPlayerInKm;                   // 0x1d8(0x4)
	float                                                        FullyCulledDistanceFromPlayerInKm;                 // 0x1dc(0x4)
};


// Size 0x430 (Full Size[0x7d0] - InheritedSize[0x3a0]
class FishingFloat: public Actor
{
public:
	char                                                         pad0x18_FVVFI[0x18];                               // 0x3a0(0x18)
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x3b8(0x8)
	class BoxComponent*                                          CollisionComponent;                                // 0x3c0(0x8)
	class FishingFloatSetupDataAsset*                            FishingFloatSetupDataAsset;                        // 0x3c8(0x8)
	class SphereComponent*                                       FreeRoamFishCollider;                              // 0x3d0(0x8)
	class StaticMeshComponent*                                   FishingFloatMesh;                                  // 0x3d8(0x8)
	TArray<class MaterialInstanceDynamic*>                       FloatMaterials;                                    // 0x3e0(0x10)
	char                                                         pad0x3cc_9EK2A[0x3cc];                             // 0x3f0(0x3cc)
	char                                                         pad0x14_T1BCG[0x14];                               // 0x7bc(0x14)
};


// Size 0x220 (Full Size[0x5c0] - InheritedSize[0x3a0]
class ContestZone: public Actor
{
public:
	char                                                         pad0x10_CJYIF[0x10];                               // 0x3a0(0x10)
	TArray<struct ContestZoneVendorShipData>                     VendorShipsToSpawnInContest;                       // 0x3b0(0x10)
	class SphereComponent*                                       ContestZoneBoundaryComponent;                      // 0x3c0(0x8)
	struct FName                                                 ContestZoneName;                                   // 0x3c8(0x8)
	float                                                        ContestZoneRadius;                                 // 0x3d0(0x4)
	float                                                        RespawnSafeZoneRadius;                             // 0x3d4(0x4)
	float                                                        RespawnDistanceThreshold;                          // 0x3d8(0x4)
	bool                                                         IsFullyActivated;                                  // 0x3dc(0x1)
	char                                                         pad0x3_DTB03[0x3];                                 // 0x3dd(0x3)
	struct ObjectMessagingDispatcher                             ContestZoneObjectMessagingDispatcher;              // 0x3e0(0xa0)
	TArray<struct InitialShipSpawnLocations>                     InitialSpawnLocations;                             // 0x480(0x10)
	TArray<class IslandData*>                                    IslandsWithinContestZone;                          // 0x490(0x10)
	struct StringAssetReference                                  RespawnPointAsset;                                 // 0x4a0(0x10)
	class ContestSafeRegion*                                     ContestSafeRegion;                                 // 0x4b0(0x8)
	float                                                        ContestZoneRadiusSquared;                          // 0x4b8(0x4)
	float                                                        ContestZoneDiameter;                               // 0x4bc(0x4)
	float                                                        ContestZoneArea;                                   // 0x4c0(0x4)
	char                                                         pad0x4_XY05G[0x4];                                 // 0x4c4(0x4)
	TArray<class ArenaVendorShip*>                               VendorShips;                                       // 0x4c8(0x10)
	TArray<struct Transform>                                     RespawnLocations;                                  // 0x4d8(0x10)
	class ShipSpawnLocation*                                     PooledRespawnLocation;                             // 0x4e8(0x8)
	TArray<class ShipSpawnLocation*>                             ShipSpawnLocationsForContest;                      // 0x4f0(0x10)
	char                                                         pad0x88_H0A0C[0x88];                               // 0x500(0x88)
	int                                                          NumberOfSpawnPointsToGenerate;                     // 0x588(0x4)
	float                                                        MinimumDistanceFromBounds;                         // 0x58c(0x4)
	char                                                         ContestZoneRespawnLocationOrientation;             // 0x590(0x1)
	char                                                         pad0x3_FYGDC[0x3];                                 // 0x591(0x3)
	float                                                        RadiusForStaticObjectCheck;                        // 0x594(0x4)
	char                                                         pad0x18_60370[0x18];                               // 0x598(0x18)
	TArray<class CalmWaterComponent*>                            CalmWaters;                                        // 0x5b0(0x10)
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class AddNPCOnShipStepDesc: public TaleQuestStepDesc
{
public:
	class NPCOnShipDataAsset*                                    NPCOnShipDataAsset;                                // 0x80(0x8)
	struct QuestVariableGuid                                     NPCOnShipManager;                                  // 0x88(0x30)
	struct TaleQuestPhaseClusterRootActor                        PhaseClusterToSpawnFor;                            // 0xb8(0x30)
};


// Size 0x50 (Full Size[0xd0] - InheritedSize[0x80]
class TaleQuestVoyageCompleteBannerStepDesc: public TaleQuestStepDesc
{
public:
	struct FText                                                 VoyageTitle;                                       // 0x80(0x38)
	struct FString                                               AudioSwitchValue;                                  // 0xb8(0x10)
	struct FName                                                 CompanyId;                                         // 0xc8(0x8)
};


// Size 0x10 (Full Size[0x450] - InheritedSize[0x440]
class PollyProxyAnimInstance: public AnimInstance
{
public:
	bool                                                         IsInCave;                                          // 0x440(0x1)
	char                                                         pad0xf_MRQB3[0xf];                                 // 0x441(0xf)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialInventoryDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class DebugLandmarkLocation: public Actor
{
public:
	float                                                        Radius;                                            // 0x3a0(0x4)
	float                                                        Height;                                            // 0x3a4(0x4)
	struct Vector                                                Pos;                                               // 0x3a8(0xc)
	char                                                         pad0x4_LNXA5[0x4];                                 // 0x3b4(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMapInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class VoteConsumerInlineBase: public Object
{
public:
	char                                                         pad0x8_8KZEP[0x8];                                 // 0x28(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class BeckonDataAsset: public DataAsset
{
public:
	TArray<struct NPCBeckonGroupEntry>                           NPCBeckonGroups;                                   // 0x28(0x10)
	float                                                        BeckonIntervalInSeconds;                           // 0x38(0x4)
	float                                                        OnboardingBeckonDelayInSeconds;                    // 0x3c(0x4)
	TArray<struct FeatureToggledBeckonTag>                       InitialBeckonTags;                                 // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthStageHandlerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintListenerInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class MovingWorldMarkerComponent: public ActorComponent
{
public:
	char                                                         pad0x20_2TUR9[0x20];                               // 0xb8(0x20)
	bool                                                         DestroyMarkerWhenSpawnedFromItemSpawner;           // 0xd8(0x1)
	char                                                         pad0x7_RB1JY[0x7];                                 // 0xd9(0x7)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class ReapersMarkSettingsAsset: public DataAsset
{
public:
	float                                                        PollIntervalSeconds;                               // 0x28(0x4)
	char                                                         pad0x4_B9WJZ[0x4];                                 // 0x2c(0x4)
	class UClass*                                                ReapersMarkFlag;                                   // 0x30(0x8)
	TArray<struct ReapersMarkStatusStatInfo>                     ShipStatusStats;                                   // 0x38(0x10)
	TArray<struct ReapersMarkCurseStatInfo>                      SkeletonCurseStats;                                // 0x48(0x10)
	TArray<struct ReapersMarkLevelEntry>                         ReapersMarkLevelData;                              // 0x58(0x10)
	struct PlayerStat                                            StatToFireOnReapersMarkLevelIncrease;              // 0x68(0x4)
	char                                                         pad0x4_SX7XH[0x4];                                 // 0x6c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PetShopDataAsset: public DataAsset
{
public:
	TArray<struct PetShopPetSpecies>                             Species;                                           // 0x28(0x10)
};


// Size 0xf8 (Full Size[0x1b0] - InheritedSize[0xb8]
class FuseComponent: public ActorComponent
{
public:
	char                                                         pad0x18_XWX4K[0x18];                               // 0xb8(0x18)
	class UClass*                                                EnableInputNotification;                           // 0xd0(0x8)
	class UClass*                                                DisableInputNotification;                          // 0xd8(0x8)
	float                                                        DefaultFuseTime;                                   // 0xe0(0x4)
	char                                                         pad0x4_AOP5M[0x4];                                 // 0xe4(0x4)
	class WwiseObjectPoolWrapper*                                FuseSoundWisePool;                                 // 0xe8(0x8)
	class WwiseEvent*                                            FuseActivateSoundPlayEvent;                        // 0xf0(0x8)
	class WwiseEvent*                                            FuseSoundPlayEvent;                                // 0xf8(0x8)
	class WwiseEvent*                                            FuseSoundStopEvent;                                // 0x100(0x8)
	class Object*                                                FuseParticleSystem;                                // 0x108(0x8)
	struct FName                                                 FuseParticleSystemSocketName;                      // 0x110(0x8)
	struct FName                                                 FuseNoiseEventName;                                // 0x118(0x8)
	float                                                        FuseNoiseRadius;                                   // 0x120(0x4)
	float                                                        FuseNoiseEventRate;                                // 0x124(0x4)
	class Actor*                                                 FuseInstigator;                                    // 0x128(0x8)
	bool                                                         FuseEnabled;                                       // 0x130(0x1)
	char                                                         pad0x77_QQ1JT[0x77];                               // 0x131(0x77)
	class ParticleSystemComponent*                               FuseParticleSystemComponent;                       // 0x1a8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogOptionMultiShopResponseListDataAsset: public DataAsset
{
public:
	TArray<struct ShopTypeDataResponse>                          ShopTypeResponses;                                 // 0x28(0x10)
};


// Size 0xe8 (Full Size[0x488] - InheritedSize[0x3a0]
class TavernStepsTrigger: public Actor
{
public:
	TArray<struct LandmarkReactionKeyFrame>                      ReactionEventsOpen;                                // 0x3a0(0x10)
	TArray<struct LandmarkReactionKeyFrame>                      ReactionEventsCancel;                              // 0x3b0(0x10)
	float                                                        ShantyDelayBeforeStepsOpen;                        // 0x3c0(0x4)
	char                                                         pad0x4_2A6IH[0x4];                                 // 0x3c4(0x4)
	class SceneComponent*                                        CollisionRoot;                                     // 0x3c8(0x8)
	class SphereComponent*                                       StepsListenerTriggerComponent;                     // 0x3d0(0x8)
	class SphereComponent*                                       PlayersInTavernTriggerComponent;                   // 0x3d8(0x8)
	class WorldRegionComponent*                                  ShantyWorldRegionComponent;                        // 0x3e0(0x8)
	class WwiseEvent*                                            PlayMagicEvent;                                    // 0x3e8(0x8)
	class WwiseEvent*                                            StopMagicEvent;                                    // 0x3f0(0x8)
	struct WwiseEmitter                                          ShantyMagicEmitter;                                // 0x3f8(0x20)
	class LandmarkReactionPlayer*                                ReactionEventPlayerOpen;                           // 0x418(0x8)
	class AnimatedStepsComponent*                                AnimatedSteps;                                     // 0x420(0x8)
	char                                                         StepsState;                                        // 0x428(0x1)
	char                                                         pad0x7_DAAP5[0x7];                                 // 0x429(0x7)
	TArray<class Actor*>                                         ActorsPlayingInstruments;                          // 0x430(0x10)
	char                                                         pad0x48_LRYYA[0x48];                               // 0x440(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadableItemInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class CanvasLODService: public Object
{
public:
	char                                                         pad0x10_1S4OW[0x10];                               // 0x28(0x10)
	TArray<class Actor*>                                         ResourceManagedCanvases;                           // 0x38(0x10)
	char                                                         pad0x40_S6HQD[0x40];                               // 0x48(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SinkingTunnelAnimationId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismGroupInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatusResponsePlayAudioLoopOnAllClients: public StatusResponse
{
public:
	class WwiseEvent*                                            StartLoopEvent;                                    // 0x38(0x8)
	class WwiseEvent*                                            StopLoopEvent;                                     // 0x40(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestStartingBannerStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShoresOfGoldTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DoubleIntentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocationMapCollectionInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AIRowboatServiceSettingsAsset: public DataAsset
{
public:
	TArray<class AIRowboatEncounterDefinition*>                  EncounterDefinitions;                              // 0x28(0x10)
	float                                                        MinEngagedDistanceFromPlayers;                     // 0x38(0x4)
	char                                                         pad0x4_H8QPW[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestShipwreckServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x198 (Full Size[0x1c0] - InheritedSize[0x28]
class FishingRodSetupDataAsset: public DataAsset
{
public:
	class UClass*                                                FishActorInteractionDesc;                          // 0x28(0x8)
	float                                                        DelayBeforeAllowingACast;                          // 0x30(0x4)
	float                                                        DelayBeforeCreatingFishingFloat;                   // 0x34(0x4)
	float                                                        DelayBeforeDestroyingFishingFloat;                 // 0x38(0x4)
	char                                                         pad0x4_L97IE[0x4];                                 // 0x3c(0x4)
	class UClass*                                                FishingFloatType;                                  // 0x40(0x8)
	char                                                         HitTestTraceChannel;                               // 0x48(0x1)
	char                                                         pad0x3_TBQY3[0x3];                                 // 0x49(0x3)
	float                                                        PreCastingPlayerSpeedModifier;                     // 0x4c(0x4)
	float                                                        CastingTimeBeforeTurningOnHits;                    // 0x50(0x4)
	float                                                        TimeBetweenIsFloatLocationValidChecks;             // 0x54(0x4)
	float                                                        SingleFishAnimationLoopDuration;                   // 0x58(0x4)
	float                                                        DriftOffsetToStopFishJumping;                      // 0x5c(0x4)
	TArray<struct DebugFishSelectionBreed>                       FishBreeds;                                        // 0x60(0x10)
	TArray<struct DebugFishSelectionBreed>                       FishBreedsInAPond;                                 // 0x70(0x10)
	TArray<struct FishingRodForceFeedbackLevel>                  ForceFeedbackLevels;                               // 0x80(0x10)
	TArray<struct FishingComedyItemInfo>                         ComedyItems;                                       // 0x90(0x10)
	float                                                        ChanceOfComedyItems;                               // 0xa0(0x4)
	float                                                        DistanceFromPlayerToCatchComedyItem;               // 0xa4(0x4)
	TArray<class Class*>                                         DisallowedTunnelsOfTheDamnedFish;                  // 0xa8(0x10)
	TArray<class Class*>                                         DisallowedTunnelsOfTheDamnedComedyItems;           // 0xb8(0x10)
	TArray<struct FishBaitInfo>                                  FishBait;                                          // 0xc8(0x10)
	float                                                        RopeThickness;                                     // 0xd8(0x4)
	float                                                        RopeSlackAtMaxDistance;                            // 0xdc(0x4)
	float                                                        RopeSlackAtMinDistance;                            // 0xe0(0x4)
	float                                                        RopeOnRodSlack;                                    // 0xe4(0x4)
	float                                                        RopeOnRodMaxSway;                                  // 0xe8(0x4)
	float                                                        TimeToBlendAwaySway;                               // 0xec(0x4)
	float                                                        MaxTimeToWaitForAnimationStateToFinish;            // 0xf0(0x4)
	struct Vector                                                ServerEstimateRodEndPosition;                      // 0xf4(0xc)
	struct Vector                                                ServerEstimateRodBasePosition;                     // 0x100(0xc)
	struct Vector                                                RodBaseHitDetectionExtraOffset;                    // 0x10c(0xc)
	float                                                        MinimumShakeValue;                                 // 0x118(0x4)
	float                                                        ReelingCooldownMultiplier;                         // 0x11c(0x4)
	class WwiseEvent*                                            RodCastAudioDrawBack;                              // 0x120(0x8)
	class WwiseEvent*                                            RodCastAudioCast;                                  // 0x128(0x8)
	class WwiseEvent*                                            RodBendStart;                                      // 0x130(0x8)
	class WwiseEvent*                                            RodBendStop;                                       // 0x138(0x8)
	float                                                        RodBendFactorAmountToTriggerSound;                 // 0x140(0x4)
	float                                                        AmountOfWrongDirectionStrainToTriggerSound;        // 0x144(0x4)
	float                                                        RodBendCooldown;                                   // 0x148(0x4)
	struct FName                                                 RodBendFactorRtpc;                                 // 0x14c(0x8)
	char                                                         pad0x4_LKFVV[0x4];                                 // 0x154(0x4)
	class WwiseEvent*                                            RodCastReelLoopStart;                              // 0x158(0x8)
	class WwiseEvent*                                            RodCastReelLoopStop;                               // 0x160(0x8)
	struct FName                                                 RodCastReelSpeedRtpc;                              // 0x168(0x8)
	float                                                        RtpcSpeedFactorCasting;                            // 0x170(0x4)
	float                                                        RtpcSpeedFactorFishing;                            // 0x174(0x4)
	float                                                        RtpcSpeedFactorReeling;                            // 0x178(0x4)
	char                                                         pad0x4_3Z0ES[0x4];                                 // 0x17c(0x4)
	class WwiseEvent*                                            FishingBendWrongDirectionStart;                    // 0x180(0x8)
	class WwiseEvent*                                            FishingBendWrongDirectionStop;                     // 0x188(0x8)
	class WwiseEvent*                                            FishingLineSnap;                                   // 0x190(0x8)
	class WwiseEvent*                                            RodCastFishOutOfWaterWriggling;                    // 0x198(0x8)
	class WwiseObjectPoolWrapper*                                FishingRodPool;                                    // 0x1a0(0x8)
	struct FName                                                 RodStrainMagnitudeRtpc;                            // 0x1a8(0x8)
	class WwiseEvent*                                            FishTakenFromRod;                                  // 0x1b0(0x8)
	class WwiseEvent*                                            BaitAddedToHook;                                   // 0x1b8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class HealthCustomizationService: public Object
{
public:
	char                                                         pad0x8_LGSYT[0x8];                                 // 0x28(0x8)
	class World*                                                 World;                                             // 0x30(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InventoryItemDescToSlotRemappingPolicyAsset: public DataAsset
{
public:
	TArray<class Class*>                                         Slots;                                             // 0x28(0x10)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BlockVolcanoTaleQuestService: public TaleQuestService
{
public:
	class BlockVolcanoTaleQuestServiceDesc*                      Desc;                                              // 0x60(0x8)
	char                                                         pad0x8_WLUXG[0x8];                                 // 0x68(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0xc0 (Full Size[0x140] - InheritedSize[0x80]
class GetCurrentQuestInfoStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableInt                                      CurrentQuestIndex;                                 // 0x80(0x30)
	struct QuestVariableInt                                      CurrentModuleIndex;                                // 0xb0(0x30)
	struct QuestVariableInt                                      LastCompletedModuleIndex;                          // 0xe0(0x30)
	struct QuestVariableName                                     CurrentPageAuthorName;                             // 0x110(0x30)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class VfxStoryResponseDataAsset: public DataAsset
{
public:
	struct FeatureFlag                                           Feature;                                           // 0x28(0xc)
	char                                                         pad0x4_51UYB[0x4];                                 // 0x34(0x4)
	TArray<struct VfxStoryResponseSetting>                       StoryResponses;                                    // 0x38(0x10)
	TArray<class VfxStoryResponseDataAsset*>                     AssetsList;                                        // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FuseTargetInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class ShipStuckDetectionComponent: public ActorComponent
{
public:
	float                                                        MaxShipSpeedToConsiderStationary;                  // 0xb8(0x4)
	float                                                        StuckTimeUntilDeletion;                            // 0xbc(0x4)
	float                                                        MaxHullSubmersionToConsiderStuckable;              // 0xc0(0x4)
	float                                                        StuckTimeDecaySpeed;                               // 0xc4(0x4)
	bool                                                         PrintDebug;                                        // 0xc8(0x1)
	char                                                         pad0x7_L6CTH[0x7];                                 // 0xc9(0x7)
	class Ship*                                                  Ship;                                              // 0xd0(0x8)
	char                                                         pad0x8_H3IWD[0x8];                                 // 0xd8(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseSetAICharacterMoveSpeedModifier: public StatusResponse
{
public:
	char                                                         Reason;                                            // 0x38(0x1)
	char                                                         pad0x3_RAWGB[0x3];                                 // 0x39(0x3)
	float                                                        Multiplier;                                        // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemAnimationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShantyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NameplateServiceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class TrackedActorService: public Object
{
public:
	char                                                         pad0x8_TH0FR[0x8];                                 // 0x28(0x8)
	TArray<class Actor*>                                         ActorsAwaitingRegistration;                        // 0x30(0x10)
	char                                                         pad0x38_R6J6D[0x38];                               // 0x40(0x38)
};


// Size 0x15c0 (Full Size[0x1960] - InheritedSize[0x3a0]
class Ship: public Actor
{
public:
	char                                                         pad0x128_1PPS0[0x128];                             // 0x3a0(0x128)
	struct ShipPartConnections                                   PartConnections;                                   // 0x4c8(0x98)
	class StaticMeshComponent*                                   BoatCollision;                                     // 0x560(0x8)
	class BasisComponent*                                        BoatBasis;                                         // 0x568(0x8)
	class StaticMeshComponent*                                   OverlapHit;                                        // 0x570(0x8)
	class StaticMeshComponent*                                   BelowDeckVolume;                                   // 0x578(0x8)
	class StaticMeshComponent*                                   CabinVolume;                                       // 0x580(0x8)
	struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x588(0xa0)
	class TeleportLocationRetrievalComponent*                    TeleportLocationRetrievalComponent;                // 0x628(0x8)
	class ChildActorComponent*                                   ShipInternalWaterComponent;                        // 0x630(0x8)
	class ChildActorComponent*                                   ShipMovementProxyComponent;                        // 0x638(0x8)
	class ChildActorComponent*                                   ShipFireCellDataContainer;                         // 0x640(0x8)
	class SinkingComponent*                                      SinkingComponent;                                  // 0x648(0x8)
	class ShipHullCollisionComponent*                            HullCollisionComponent;                            // 0x650(0x8)
	class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x658(0x8)
	class ShipStuckDetectionComponent*                           StuckDetectionComponent;                           // 0x660(0x8)
	class StatusEffectManagerComponent*                          StatusEffectManagerComponent;                      // 0x668(0x8)
	class StatusEffectPersistenceComponent*                      StatusEffectPersistenceComponent;                  // 0x670(0x8)
	class ShipCurseComponent*                                    ShipCurseComponent;                                // 0x678(0x8)
	class AIOnShipManagerComponent*                              AIOnShipManagerComponent;                          // 0x680(0x8)
	class InstancedNavMeshComponent*                             InstancedNavMeshComponent;                         // 0x688(0x8)
	class DockableComponent*                                     DockableComponent;                                 // 0x690(0x8)
	class InvasionBattleBoundsComponent*                         InvasionBattleBoundsComponent;                     // 0x698(0x8)
	struct WaterBuoyancy                                         Buoyancy;                                          // 0x6a0(0x140)
	class CrewOwnershipComponent*                                CrewOwnershipComponent;                            // 0x7e0(0x8)
	class OnboardCharacterTrackerComponent*                      OnboardCharacterTrackerComponent;                  // 0x7e8(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x7f0(0x8)
	class ShipLiveryComponent*                                   LiveryComponent;                                   // 0x7f8(0x8)
	class ShipAnnouncementComponent*                             ShipAnnouncementComponent;                         // 0x800(0x8)
	class ReplicatedShipPartCustomizationComponent*              HullLiveryCustomizationComponent;                  // 0x808(0x8)
	class ReplicatedShipPartCustomizationComponent*              SailsLiveryCustomizationComponent;                 // 0x810(0x8)
	class ReplicatedShipPartCustomizationComponent*              CannonEnchantmentCustomizationComponent;           // 0x818(0x8)
	class ReplicatedShipPartCustomizationComponent*              ShipAnnouncementPartCustomizationComponent;        // 0x820(0x8)
	class ShipActivityComponent*                                 ShipActivityComponent;                             // 0x828(0x8)
	class UClass*                                                RammerType;                                        // 0x830(0x8)
	class GroupedInteractableAreaComponent*                      GroupedInteractableAreaComponent;                  // 0x838(0x8)
	class ActorActivationComponent*                              ActorActivationComponent;                          // 0x840(0x8)
	class HangingGroupComponent*                                 HangingGroupComponent;                             // 0x848(0x8)
	struct ShipConfigurationSettings                             ShipConfigurationSettings;                         // 0x850(0x18)
	float                                                        RainFillRate;                                      // 0x868(0x4)
	float                                                        RainTimePerDrop;                                   // 0x86c(0x4)
	float                                                        RainDropScale;                                     // 0x870(0x4)
	float                                                        RainDropRadius;                                    // 0x874(0x4)
	float                                                        RainStrengthMinimumToFillShip;                     // 0x878(0x4)
	char                                                         pad0x4_VP64H[0x4];                                 // 0x87c(0x4)
	TArray<struct Vector>                                        AITargetVisibilityPoints;                          // 0x880(0x10)
	struct AchievementSailThroughStormAtNightWithLightsOff       AchievementSailThroughStormAtNightWithLightsOff;   // 0x890(0x90)
	struct AchievementSailCloseToShipWithoutFiring               AchievementSailCloseToShipWithoutFiring;           // 0x920(0x18)
	struct AchievementSailFullyWithTheWind                       AchievementSailFullyIntoTheWind;                   // 0x938(0x8)
	struct AchievementSailWithFlameOfFateColoursAboard           AchievementSailWithFlameOfFateColoursAboard;       // 0x940(0x118)
	class ShipSunkTrackingComponent*                             ShipSunkTracker;                                   // 0xa58(0x8)
	class ImpulseThrottlerComponent*                             ImpulseThrottlerComponent;                         // 0xa60(0x8)
	class SphereComponent*                                       ReturnToShipVolume;                                // 0xa68(0x8)
	float                                                        ReturnToShipVolumeRadius;                          // 0xa70(0x4)
	char                                                         BowSplashReturnType;                               // 0xa74(0x1)
	char                                                         pad0x3_ZF1CQ[0x3];                                 // 0xa75(0x3)
	TArray<class Class*>                                         PlayerControlsInteractablesClasses;                // 0xa78(0x10)
	struct ShipDynamics                                          ShipDynamics;                                      // 0xa88(0xc0)
	struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0xb48(0x1c)
	char                                                         pad0x4_8AGG9[0x4];                                 // 0xb64(0x4)
	class ShipSinkingParametersDataAsset*                        AdventureSinkingData;                              // 0xb68(0x8)
	struct BuoyancySampleMovement                                BuoyancySampleMovement;                            // 0xb70(0x68)
	struct BuoyancySampleMovement                                SurfacingBuoyancySampleMovement;                   // 0xbd8(0x68)
	bool                                                         AttachPlayersToShipWhenSurfacing;                  // 0xc40(0x1)
	char                                                         pad0x3_IBW25[0x3];                                 // 0xc41(0x3)
	float                                                        SurfacingAttachDuration;                           // 0xc44(0x4)
	struct BuoyancySampleMovement                                DivingBuoyancySampleMovement;                      // 0xc48(0x68)
	bool                                                         AttachPlayersToShipWhenDiving;                     // 0xcb0(0x1)
	char                                                         pad0x3_1N5CU[0x3];                                 // 0xcb1(0x3)
	float                                                        DivingAttachDuration;                              // 0xcb4(0x4)
	class ShipNosediveBrake*                                     NosediveBrake;                                     // 0xcb8(0x8)
	class ShipRolloverCorrector*                                 RolloverCorrector;                                 // 0xcc0(0x8)
	class BowSplashContainer*                                    BowSplashContainer;                                // 0xcc8(0x8)
	class BowSplashContainer*                                    SurfacingBowSplashContainer;                       // 0xcd0(0x8)
	class BowSplashContainer*                                    DivingBowSplashContainer;                          // 0xcd8(0x8)
	class ShipResurfaceWetnessContainer*                         ShipResurfaceWetnessContainer;                     // 0xce0(0x8)
	bool                                                         DisableSailingBowSplashesWhenDiving;               // 0xce8(0x1)
	char                                                         pad0x7_N6QJR[0x7];                                 // 0xce9(0x7)
	class LocatorContainer*                                      ShipLocators;                                      // 0xcf0(0x8)
	struct Vector                                                LocalSailForceApplicationOffset;                   // 0xcf8(0xc)
	char                                                         pad0x4_DTBVM[0x4];                                 // 0xd04(0x4)
	class CurveFloat*                                            ShipSpeedToChoppinessScalarCurve;                  // 0xd08(0x8)
	class CurveFloat*                                            HullSubmergedValueRemapping;                       // 0xd10(0x8)
	float                                                        FakeBuoyancyZOffsetScalarSpringAccel;              // 0xd18(0x4)
	float                                                        ResurfacingFinishedSubmergedHullPercentageThreshold; // 0xd1c(0x4)
	float                                                        PositionSamplerTimeWindow;                         // 0xd20(0x4)
	struct FName                                                 ClientConvexHullCollisionProfile;                  // 0xd24(0x8)
	float                                                        EmpiricalMaxSpeedInMPS;                            // 0xd2c(0x4)
	struct Transform                                             BrigSpawnLocation;                                 // 0xd30(0x30)
	float                                                        WaterStrengthThresholdForStormDamage;              // 0xd60(0x4)
	char                                                         pad0x4_HN3UQ[0x4];                                 // 0xd64(0x4)
	class UClass*                                                FirePropagationBlueprint;                          // 0xd68(0x8)
	class ShipFirePropagationComponent*                          FirePropagationComponent;                          // 0xd70(0x8)
	class ScrambledIdentityProviderComponent*                    GuildIdentityProviderComponent;                    // 0xd78(0x8)
	struct ShipIdentity                                          ShipIdentity;                                      // 0xd80(0x28)
	float                                                        FishSpawnerDetectionBoatLength;                    // 0xda8(0x4)
	float                                                        FishSpawnerDetectionTriggerDistance;               // 0xdac(0x4)
	char                                                         pad0x120_1W9DQ[0x120];                             // 0xdb0(0x120)
	bool                                                         PlayerControlsEnabled;                             // 0xed0(0x1)
	char                                                         pad0x7_EHMD8[0x7];                                 // 0xed1(0x7)
	class GuildPlaque*                                           GuildPlaque;                                       // 0xed8(0x8)
	struct EncounterParams                                       SightingEncounterParams;                           // 0xee0(0xc)
	struct EncounterParams                                       CloseProximityEncounterParams;                     // 0xeec(0xc)
	char                                                         pad0x10_WDM6I[0x10];                               // 0xef8(0x10)
	class UClass*                                                ShipCategoryObject;                                // 0xf08(0x8)
	class UClass*                                                ShipSizeObject;                                    // 0xf10(0x8)
	class UClass*                                                ShipTypeObject;                                    // 0xf18(0x8)
	TArray<class Actor*>                                         DamageableChildActors;                             // 0xf20(0x10)
	class ShipPartsDamageTrackerComponent*                       ShipPartsDamageTrackerComponent;                   // 0xf30(0x8)
	class CrewShipManifest*                                      CrewShipManifest;                                  // 0xf38(0x8)
	bool                                                         IsInCaptainedCrew;                                 // 0xf40(0x1)
	char                                                         pad0x6f_GMUX2[0x6f];                               // 0xf41(0x6f)
	class Object*                                                HullDamage;                                        // 0xfb0(0x8)
	class VoyageProposalContainer*                               QuestTable;                                        // 0xfb8(0x8)
	class SurfaceWaterComponent*                                 DeckWater;                                         // 0xfc0(0x8)
	class WaterExposureComponent*                                WaterExposureComponent;                            // 0xfc8(0x8)
	class ShroudBreakerTrackerComponent*                         ShroudBreakerTrackerComponent;                     // 0xfd0(0x8)
	class FlotsamItemSpawnComponent*                             FlotsamComponent;                                  // 0xfd8(0x8)
	struct NetTimeStampCalculator                                MovementTimestamp;                                 // 0xfe0(0x70)
	char                                                         pad0xc8_F07MZ[0xc8];                               // 0x1050(0xc8)
	float                                                        StormStrainWeight;                                 // 0x1118(0x4)
	float                                                        WorldEdgeWeight;                                   // 0x111c(0x4)
	float                                                        TetherMassInertiaScaleWhenAnchored;                // 0x1120(0x4)
	char                                                         pad0x4_HU2Q6[0x4];                                 // 0x1124(0x4)
	struct StrainDamage                                          StormStrainDamage;                                 // 0x1128(0x28)
	struct StrainDamage                                          WorldEdgeDamage;                                   // 0x1150(0x28)
	struct StrainDamage                                          ScuttleDamage;                                     // 0x1178(0x28)
	struct Vector2D                                              WorldEdgeDamageRange;                              // 0x11a0(0x8)
	float                                                        ScuttleForceSinkTime;                              // 0x11a8(0x4)
	char                                                         pad0x4_8JATC[0x4];                                 // 0x11ac(0x4)
	class UClass*                                                ProxyClass;                                        // 0x11b0(0x8)
	class ShipEntitlementProcessingPolicyDataAsset*              ShipEntitlementProcessingPolicyDataAsset;          // 0x11b8(0x8)
	char                                                         pad0x1_KBZ0I[0x1];                                 // 0x11c0(0x1)
	bool                                                         HasEverStartedSailing;                             // 0x11c1(0x1)
	bool                                                         EmissaryFlagActive;                                // 0x11c2(0x1)
	bool                                                         InTunnelOfTheDamned;                               // 0x11c3(0x1)
	char                                                         SurfacingState;                                    // 0x11c4(0x1)
	char                                                         pad0x3_XHTGG[0x3];                                 // 0x11c5(0x3)
	double                                                       FinishedResurfacingTimeStamp;                      // 0x11c8(0x8)
	bool                                                         Scuttled;                                          // 0x11d0(0x1)
	char                                                         pad0x7_NLWBI[0x7];                                 // 0x11d1(0x7)
	TArray<class MobileInstancedStaticMeshComponent*>            InstancedMeshes;                                   // 0x11d8(0x10)
	class UClass*                                                ConstraintBudget;                                  // 0x11e8(0x8)
	char                                                         DefaultShipTeam;                                   // 0x11f0(0x1)
	struct GenericTeamId                                         ShipBaseTeam;                                      // 0x11f1(0x1)
	char                                                         pad0x6b6_03JPM[0x6b6];                             // 0x11f2(0x6b6)
	float                                                        ScuttleTime;                                       // 0x18a8(0x4)
	char                                                         pad0x84_219RM[0x84];                               // 0x18ac(0x84)
	bool                                                         ExpandedShipDamageEnabled;                         // 0x1941(0x1)
	char                                                         pad0x16_YT2FK[0x16];                               // 0x1942(0x16)
	class UClass*                                                AIShipEventType;                                   // 0x1958(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InventoryItemCategoryToSlotRemappingAsset: public DataAsset
{
public:
	TArray<struct CategorySpec>                                  Slots;                                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class OverrideProgressSpawnStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableTriggerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TurnOnTheSpotAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x40 (Full Size[0x310] - InheritedSize[0x2d0]
class BeachNPCSpawnFlowLocationComponent: public SceneComponent
{
public:
	char                                                         pad0x28_GATN6[0x28];                               // 0x2d0(0x28)
	struct Rotator                                               SpawnRotation;                                     // 0x2f8(0xc)
	char                                                         pad0xc_WBLK1[0xc];                                 // 0x304(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_Sloop: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x288] - InheritedSize[0x288]
class MeleeBlockingInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0xa8 (Full Size[0x150] - InheritedSize[0xa8]
class BTTask_AthenaRunEQSQuery: public BTTask_RunEQSQuery
{
public:
	struct BlackboardKeySelector                                 KeyToUseAsTargetActorForQuery;                     // 0xa8(0x28)
	struct BlackboardKeySelector                                 KeyToUseAsTargetPositionForQuery;                  // 0xd0(0x28)
	struct BlackboardKeySelector                                 KeyToSetToTrueIfNoValidLocationFound;              // 0xf8(0x28)
	struct BlackboardKeySelector                                 ReasonStringKeyIfNoValidLocationFound;             // 0x120(0x28)
	bool                                                         ThrottleQueryTimePerFrame;                         // 0x148(0x1)
	char                                                         pad0x3_EVPZ9[0x3];                                 // 0x149(0x3)
	float                                                        MaxSecondsToSpendOnQueryPerFrame;                  // 0x14c(0x4)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class StatusResponseStun: public StatusResponse
{
public:
	char                                                         AnimType;                                          // 0x38(0x1)
	char                                                         IsItemWieldingAllowed;                             // 0x39(0x1)
	char                                                         pad0x2_PQ33O[0x2];                                 // 0x3a(0x2)
	float                                                        Duration;                                          // 0x3c(0x4)
	bool                                                         PlayScreenVfx;                                     // 0x40(0x1)
	char                                                         pad0xf_52AOU[0xf];                                 // 0x41(0xf)
};


// Size 0x138 (Full Size[0x4d8] - InheritedSize[0x3a0]
class EventRoom: public Actor
{
public:
	char                                                         pad0x8_T1L5U[0x8];                                 // 0x3a0(0x8)
	bool                                                         ClearSpawnProgressOnRoomActivate;                  // 0x3a8(0x1)
	char                                                         pad0x7_FRY1Y[0x7];                                 // 0x3a9(0x7)
	TArray<class Actor*>                                         EntranceMechanisms;                                // 0x3b0(0x10)
	TArray<class Actor*>                                         ExitMechanisms;                                    // 0x3c0(0x10)
	class BoxComponent*                                          RoomAreaComponent;                                 // 0x3f0(0x8)
	char                                                         pad0xe0_X0KRM[0xe0];                               // 0x3f8(0xe0)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class RadialSettingsAsset: public DataAsset
{
public:
	TArray<struct BaseRadialEntry>                               BaseRadialCreationRules;                           // 0x28(0x10)
	TArray<class Class*>                                         BlockingAnalogInputs;                              // 0x38(0x10)
	float                                                        MinRadialSectorUnselectableFraction;               // 0x48(0x4)
	float                                                        MaxRadialSectorUnselectableFraction;               // 0x4c(0x4)
	float                                                        MinSelectionMagnitude;                             // 0x50(0x4)
	float                                                        SelectionTimeout;                                  // 0x54(0x4)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class TaleQuestSpawnFishingFishStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_M706U[0x8];                                 // 0x98(0x8)
	class TaleQuestSpawnFishingFishStepDesc*                     Desc;                                              // 0xa0(0x8)
	class FishingFishSpawner*                                    FishingFishSpawner;                                // 0xa8(0x8)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class VoyageGeneratorSim: public Actor
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HorizontalPulleyAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeliverableRedirectionNonEmptyCollectorsChestContext: public DeliverableRedirectionContextBase
{
public:
};


// Size 0xa0 (Full Size[0x158] - InheritedSize[0xb8]
class CollectorsChestShipOwnershipPropagationComponent: public ActorComponent
{
public:
	class Actor*                                                 OwningShip;                                        // 0xb8(0x8)
	char                                                         pad0x98_5CIO2[0x98];                               // 0xc0(0x98)
};


// Size 0x0 (Full Size[0x2d0] - InheritedSize[0x2d0]
class PlanarReflectionPlaneComponent: public SceneComponent
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class TrackedOwnerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_O2MG5[0x8];                                 // 0xb8(0x8)
	char                                                         TrackedOwnerType;                                  // 0xc0(0x1)
	char                                                         pad0x7_IPVXR[0x7];                                 // 0xc1(0x7)
};


// Size 0x0 (Full Size[0x5c0] - InheritedSize[0x5c0]
class IslandBoundsComponent: public SphereComponent
{
public:
};


// Size 0x8 (Full Size[0x80] - InheritedSize[0x78]
class FireChargedAttackAIAbility: public AthenaAIAbility
{
public:
	char                                                         pad0x8_DYYDX[0x8];                                 // 0x78(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DelayLoadServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DartLimitsDataAsset: public DataAsset
{
public:
	TArray<struct DartLimitsInfo>                                DartLimitsArray;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CatalogOfferDataAsset: public DataAsset
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleQuestSelectAISpawnerStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableAISpawnerArray                           SelectFromSpawnerArray;                            // 0x80(0x30)
	struct QuestVariableAISpawner                                SelectedSpawnerAsset;                              // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstancedLevelGetterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlWheelActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TunnelTypesDataAsset: public DataAsset
{
public:
	TArray<struct TunnelOfTheDamnedClass>                        TunnelClasses;                                     // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitRegSnapshotServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleQuestCheckpointServiceDesc: public TaleQuestServiceDesc
{
public:
	class PopUpMessageDesc*                                      Notification;                                      // 0x28(0x8)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class UsableItemObscuringComponent: public ActorComponent
{
public:
	char                                                         pad0x20_SH4A5[0x20];                               // 0xb8(0x20)
};


// Size 0xb8 (Full Size[0x170] - InheritedSize[0xb8]
class ShipEntitlementComponent: public ActorComponent
{
public:
	char                                                         pad0x10_F1I7M[0x10];                               // 0xb8(0x10)
	TArray<struct ShipVoyageModel>                               VoyageInventory;                                   // 0xc8(0x10)
	char                                                         pad0x98_NORB8[0x98];                               // 0xd8(0x98)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseSendBrokenLegEvent: public StatusResponse
{
public:
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class AssociateActorToCrewTaskStep: public TaleQuestStep
{
public:
	class AssociateActorToCrewTaskStepDesc*                      Desc;                                              // 0x98(0x8)
	char                                                         pad0x30_68RH9[0x30];                               // 0xa0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OneShotInteractableFilterDesc: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GuildPlaqueIconsDataAsset: public DataAsset
{
public:
	class Texture*                                               DefaultImage;                                      // 0x28(0x8)
	TArray<struct GuildIconTextureKeyValue>                      Icons;                                             // 0x30(0x10)
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class ExperienceEligibilityComponent: public ActorComponent
{
public:
	char                                                         pad0x18_ERFH9[0x18];                               // 0xb8(0x18)
	struct ExperienceEligibilityData                             EligibilityData;                                   // 0xd0(0x10)
	char                                                         pad0x30_3GV9E[0x30];                               // 0xe0(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ScorchStatus: public StatusBase
{
public:
};


// Size 0x100 (Full Size[0x4a0] - InheritedSize[0x3a0]
class AdjustableWaterLevelPuzzle: public Actor
{
public:
	char                                                         pad0x8_UQ61H[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        RootComp;                                          // 0x3a8(0x8)
	class ChildActorComponent*                                   WaterVolumeComponent;                              // 0x3b0(0x8)
	class VariableFillRateWaterVolume*                           WaterVolumeActor;                                  // 0x3b8(0x8)
	TArray<struct WaterPuzzleWaterLevel>                         WaterLevels;                                       // 0x3c0(0x10)
	int                                                          DefaultWaterLevelIndex;                            // 0x3d0(0x4)
	char                                                         pad0x4_R1X76[0x4];                                 // 0x3d4(0x4)
	class CurveFloat*                                            FillCurve;                                         // 0x3d8(0x8)
	class CurveFloat*                                            DrainCurve;                                        // 0x3e0(0x8)
	class CurveFloat*                                            ResetCurve;                                        // 0x3e8(0x8)
	float                                                        PuzzleResetTimeout;                                // 0x3f0(0x4)
	struct WaterPuzzleRepData                                    ReppedData;                                        // 0x3f4(0x8)
	char                                                         pad0xa4_M8TOO[0xa4];                               // 0x3fc(0xa4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InventoryManipulatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialPhrasesAdjusterInterface: public Interface
{
public:
};


// Size 0x360 (Full Size[0x388] - InheritedSize[0x28]
class AggressiveGhostShipAnimationDataAsset: public DataAsset
{
public:
	struct RuntimeVectorCurve                                    LocationCurve;                                     // 0x28(0x170)
	struct RuntimeVectorCurve                                    RotationCurve;                                     // 0x198(0x170)
	struct RuntimeFloatCurve                                     VelocityCurve;                                     // 0x308(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileLauncherMechanismSourceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetIsShipInGoodConditionStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_20M11[0x8];                                 // 0x98(0x8)
};


// Size 0x100 (Full Size[0x128] - InheritedSize[0x28]
class CrewVoyageParticipant: public Object
{
public:
	char                                                         pad0xe0_XEKE2[0xe0];                               // 0x28(0xe0)
	class PlayerState*                                           PlayerState;                                       // 0x108(0x8)
	char                                                         pad0x18_5TC94[0x18];                               // 0x110(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialogueCoordinatorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x610] - InheritedSize[0x600]
class ClusterStaticMeshComponent: public StaticMeshComponent
{
public:
	class ItemDescSpawnData*                                     ItemDescSpawnData;                                 // 0x600(0x8)
	char                                                         pad0x8_LD0IU[0x8];                                 // 0x608(0x8)
};


// Size 0x158 (Full Size[0x4f8] - InheritedSize[0x3a0]
class StarFieldPuzzle: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	class StaticMeshComponent*                                   ConstellationMesh;                                 // 0x3a8(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x3b0(0x10)
	char                                                         ReplicatedStarFieldPuzzleState;                    // 0x3c0(0x1)
	char                                                         pad0x3_6WFI6[0x3];                                 // 0x3c1(0x3)
	float                                                        CompletionDistance;                                // 0x3c4(0x4)
	float                                                        CompletionDegrees;                                 // 0x3c8(0x4)
	float                                                        StartFadeDuration;                                 // 0x3cc(0x4)
	float                                                        StartFadeBrightnessAmount;                         // 0x3d0(0x4)
	float                                                        DimmedFadeDuration;                                // 0x3d4(0x4)
	float                                                        DimmedFadeBrightnessAmount;                        // 0x3d8(0x4)
	float                                                        EndFadeDuration;                                   // 0x3dc(0x4)
	float                                                        EndFadeBrightnessAmount;                           // 0x3e0(0x4)
	float                                                        MinBrightnessRange;                                // 0x3e4(0x4)
	float                                                        MaxBrightnessRange;                                // 0x3e8(0x4)
	char                                                         pad0x4_G99I4[0x4];                                 // 0x3ec(0x4)
	class CurveFloat*                                            PositionCurve;                                     // 0x3f0(0x8)
	class CurveFloat*                                            PositionCurveLines;                                // 0x3f8(0x8)
	struct Vector                                                RelativePlayerLookAtTargetLocation;                // 0x400(0xc)
	char                                                         pad0x4_UCZOU[0x4];                                 // 0x40c(0x4)
	struct StarFieldPuzzleAudioParams                            StarFieldPuzzleAudioParams;                        // 0x450(0x60)
	char                                                         pad0x48_ILP84[0x48];                               // 0x4b0(0x48)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MechanismMaterialMap: public Object
{
public:
	TArray<struct MechanismMaterialMapEntry>                     MaterialClusters;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCMigrationDuplicationInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PortalTaleServiceDesc: public TaleQuestServiceDesc
{
public:
	class PortalDesc*                                            FallbackPortalDesc;                                // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestControlObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemEquipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FogPresenceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SeaFortAddOnSharedDataAssetClient: public DataAsset
{
public:
	class UClass*                                                GhostShipToSpawn;                                  // 0x28(0x8)
	TArray<struct Transform>                                     GhostShipSpawnRelativeTransforms;                  // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmissaryRewardMultiplierModelDataAsset: public DataAsset
{
public:
	TArray<struct EmissaryRewardMultiplierModel>                 EmissaryRewardMultiplierModels;                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GenerateDigLocationStep: public TaleQuestStep
{
public:
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TaleQuestParallelStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_6SDC3[0x8];                                 // 0x98(0x8)
	TArray<class Interface*>                                     Steps;                                             // 0xa0(0x10)
	class TaleQuestParallelStepDesc*                             Desc;                                              // 0xb0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimAssistServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class NPCDialogTreeData: public DataAsset
{
public:
	TArray<struct NPCDialogData>                                 Dialogs;                                           // 0x28(0x10)
	struct NPCConversationDialogDataConfig                       NPCConversationDialogDataConfig;                   // 0x38(0x18)
	struct FString                                               SourceText;                                        // 0x50(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_ReapersTributeShip: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xd0 (Full Size[0x188] - InheritedSize[0xb8]
class PuzzleStatueVFXComponent: public ActorComponent
{
public:
	char                                                         pad0x50_Q4AKJ[0x50];                               // 0xb8(0x50)
	class ParticleSystemComponent*                               LockPositionParticleSystem;                        // 0x108(0x8)
	class ParticleSystemComponent*                               OneShotLockPositionParticleSystem;                 // 0x110(0x8)
	class ParticleSystemComponent*                               BroadcasterShockwaveParticleSystem;                // 0x118(0x8)
	class ParticleSystemComponent*                               BroadcasterHornDustParticleSystem;                 // 0x120(0x8)
	class Object*                                                HornVFXTemplate;                                   // 0x128(0x8)
	class StaticMeshComponent*                                   BroadcasterArmStaticMesh;                          // 0x130(0x8)
	class CurveFloat*                                            PulseGlowCurve;                                    // 0x138(0x8)
	float                                                        StatueInactiveIntensityThreshold;                  // 0x140(0x4)
	float                                                        StatueActivatedIntensityThreshold;                 // 0x144(0x4)
	float                                                        ReactionSequenceIntensityThreshold;                // 0x148(0x4)
	float                                                        SingingIntensityThreshold;                         // 0x14c(0x4)
	float                                                        IntensityInterpolationSpeed;                       // 0x150(0x4)
	char                                                         pad0x4_41CO1[0x4];                                 // 0x154(0x4)
	TArray<struct Name>                                          ScalarParameterNamesToOverride;                    // 0x158(0x10)
	char                                                         pad0x20_YSIPY[0x20];                               // 0x168(0x20)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class NPCOnSurfaceLocationDataAsset: public DataAsset
{
public:
	TArray<struct NPCOnSurfaceShipSizeFloodedLevels>             ShipSizeFloodLevels;                               // 0x28(0x10)
	TArray<struct NPCOnSurfaceLocationGroup>                     Groups;                                            // 0x38(0x10)
	struct Vector                                                FireTestOffset;                                    // 0x48(0xc)
	char                                                         pad0x4_T6LPL[0x4];                                 // 0x54(0x4)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class CatalogDiscountDataAsset: public DataAsset
{
public:
	struct Guid                                                  DiscountId;                                        // 0x28(0x10)
	struct FText                                                 DisplayName;                                       // 0x38(0x38)
	char                                                         CurrencyType;                                      // 0x70(0x1)
	char                                                         pad0x3_K7GFF[0x3];                                 // 0x71(0x3)
	char                                                         pad0x4_MP3MP[0x4];                                 // 0x74(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipIdentityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonYawRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandKeyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UserPresenceHandlerProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractableGrammaticalGenderInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class BTService_SetCloakAIFormState: public BTService
{
public:
	char                                                         SetCloakedState;                                   // 0x70(0x1)
	char                                                         pad0x7_7XBUQ[0x7];                                 // 0x71(0x7)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class KrakenTentacleAIAudioComponentParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                TentacleEmitterPool;                               // 0x28(0x8)
	class WwiseObjectPoolWrapper*                                MouthEmitterPool;                                  // 0x30(0x8)
	class WwiseEvent*                                            PlayKrakenTentacleEmerge;                          // 0x38(0x8)
	class WwiseEvent*                                            PlayKrakenTentacleSubmerge;                        // 0x40(0x8)
	class WwiseEvent*                                            PlayKrakenTentacleSuckTell;                        // 0x48(0x8)
	class WwiseEvent*                                            StopKrakenTentacleSuckTell;                        // 0x50(0x8)
	class WwiseEvent*                                            PlayKrakenTentacleSuck;                            // 0x58(0x8)
	class WwiseEvent*                                            StopKrakenTentacleSuck;                            // 0x60(0x8)
	class WwiseEvent*                                            PlayKrakenTentacleMouthAmbience;                   // 0x68(0x8)
	class WwiseEvent*                                            StopKrakenTentacleMouthAmbience;                   // 0x70(0x8)
	class WwiseEvent*                                            PlayPlayerInAirWind;                               // 0x78(0x8)
	class WwiseEvent*                                            StopPlayerInAirWind;                               // 0x80(0x8)
	class WwiseEvent*                                            PlayKrakenCatchPlayer;                             // 0x88(0x8)
	class WwiseEvent*                                            PlayKrakenSpitPlayer;                              // 0x90(0x8)
	struct FName                                                 KrakenSuckFactorRtpc;                              // 0x98(0x8)
	class WwiseEvent*                                            PlayKrakenTentacleWrapTell;                        // 0xa0(0x8)
	class WwiseEvent*                                            StopKrakenTentacleWrapTell;                        // 0xa8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AnimNotifyState_DisableHappyReact: public AnimNotifyState
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class KrakenAICharacterAudioComponentParams: public DataAsset
{
public:
	class WwiseEvent*                                            PlayKrakenAmbience;                                // 0x28(0x8)
	class WwiseEvent*                                            StopKrakenAmbience;                                // 0x30(0x8)
	class WwiseEvent*                                            PlayKrakenTell;                                    // 0x38(0x8)
	float                                                        PlayKrakenTellCooldownMax;                         // 0x40(0x4)
	float                                                        PlayKrakenTellCooldownMin;                         // 0x44(0x4)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class PremiumCatalogDataAsset: public DataAsset
{
public:
	struct Guid                                                  CatalogId;                                         // 0x28(0x10)
	struct FText                                                 DisplayName;                                       // 0x38(0x38)
	TArray<struct PremiumCatalogLandingPageTab>                  Tabs;                                              // 0x70(0x10)
	bool                                                         Archive;                                           // 0x80(0x1)
	char                                                         pad0x7_NRWFJ[0x7];                                 // 0x81(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialAlternateRadialActivatedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class RequestHuntersCryTaleRemoteConfigDurationFunctionLibrary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseBallast: public StatusResponse
{
public:
	float                                                        WaterLevel;                                        // 0x38(0x4)
	char                                                         pad0x4_TIDN5[0x4];                                 // 0x3c(0x4)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class NarratedAccessibilityComponent: public ActorComponent
{
public:
	float                                                        ContinuousNarrationCooldown;                       // 0xb8(0x4)
	char                                                         pad0xc_DN123[0xc];                                 // 0xbc(0xc)
	char                                                         pad0x10_BKCOV[0x10];                               // 0xc8(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TestService: public Object
{
public:
	char                                                         pad0x8_FGCPY[0x8];                                 // 0x28(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DisengageNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GoldInContainerDataAsset: public DataAsset
{
public:
	TArray<struct GoldInContainerData>                           GoldData;                                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCharacterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LegendOfTheSunkenKingdomVoyageOwnershipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InGameCommandsServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MovedByActorFilterOverlapsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SessionManagementServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WanderAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x148 (Full Size[0x4e8] - InheritedSize[0x3a0]
class HandHatch: public Actor
{
public:
	char                                                         pad0x8_52S4P[0x8];                                 // 0x3a0(0x8)
	class StaticMeshComponent*                                   Mesh;                                              // 0x3a8(0x8)
	class StaticMeshComponent*                                   GlowMesh;                                          // 0x3b0(0x8)
	TArray<class AnimSequence*>                                  HandAnimations;                                    // 0x3b8(0x10)
	class PointLightComponent*                                   HatchLight;                                        // 0x3c8(0x8)
	char                                                         FlameOfFateType;                                   // 0x3d0(0x1)
	char                                                         pad0x7_MO0YN[0x7];                                 // 0x3d1(0x7)
	TArray<class ClientSkeletalMeshComponent*>                   HandsMeshes;                                       // 0x3d8(0x10)
	TArray<struct Vector>                                        HandsMeshesInvisibleRelativeLocations;             // 0x3e8(0x10)
	TArray<struct Vector>                                        HandsMeshesVisibleRelativeLocations;               // 0x3f8(0x10)
	struct Vector                                                HandsMoveDistance;                                 // 0x408(0xc)
	float                                                        HandsMoveTime;                                     // 0x414(0x4)
	bool                                                         HatchRespondsToSpawns;                             // 0x418(0x1)
	char                                                         pad0x3_DPKY4[0x3];                                 // 0x419(0x3)
	struct FName                                                 ActivationID;                                      // 0x41c(0x8)
	bool                                                         IsHatchActive;                                     // 0x424(0x1)
	char                                                         pad0x3_DRSEH[0x3];                                 // 0x425(0x3)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x428(0xa0)
	class MaterialInstanceDynamic*                               GlowDynamicMaterialInstance;                       // 0x4c8(0x8)
	char                                                         pad0x18_8Z15W[0x18];                               // 0x4d0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DartTypeId: public Object
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class MemoryConstrainedMeshInitializer: public Object
{
public:
	char                                                         pad0x8_B0Z3S[0x8];                                 // 0x28(0x8)
	class Object*                                                Mesh;                                              // 0x30(0x8)
	TArray<class MaterialInterface*>                             OverrideMaterials;                                 // 0x38(0x10)
	TArray<struct StringAssetReference>                          FallbackOverrideMaterials;                         // 0x48(0x10)
	struct StringAssetReference                                  MeshReference;                                     // 0x58(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x68(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x69(0x1)
	bool                                                         IsMMCPermittedByFeatureToggle;                     // 0x6a(0x1)
	char                                                         pad0x5_37QBQ[0x5];                                 // 0x6b(0x5)
	class UClass*                                                MeshFallbackCategory;                              // 0x78(0x8)
	class UClass*                                                BudgetToCountMemoryAgainstIfNoFallback;            // 0x80(0x8)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class IntentCombinerComponent: public ActorComponent
{
public:
	float                                                        CooperationMultiplier;                             // 0xb8(0x4)
	float                                                        StartMovingThreshold;                              // 0xbc(0x4)
	float                                                        StopMovingThreshold;                               // 0xc0(0x4)
	float                                                        ConflictedStartMovingThreshold;                    // 0xc4(0x4)
	float                                                        ConflictedStopMovingThreshold;                     // 0xc8(0x4)
	char                                                         pad0x4_GDA8Z[0x4];                                 // 0xcc(0x4)
	TArray<class Object*>                                        IntentProviders;                                   // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterTypeRetrievalInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class AIRowboatEncounterDefinition: public DataAsset
{
public:
	TArray<struct AIRowboatEncounterParamsSpawnerData>           Rowers;                                            // 0x28(0x10)
	TArray<struct AIRowboatEncounterParamsSpawnerData>           Passengers;                                        // 0x38(0x10)
	int                                                          CowardiceThreshold;                                // 0x48(0x4)
	char                                                         pad0x4_AY02L[0x4];                                 // 0x4c(0x4)
	TArray<struct Name>                                          WorldRegions;                                      // 0x50(0x10)
	TArray<char>                                                 IslandTypesToSpawnOn;                              // 0x60(0x10)
	bool                                                         SpawnOnShipwrecks;                                 // 0x70(0x1)
	char                                                         pad0x7_72531[0x7];                                 // 0x71(0x7)
	class RowboatLiveryPicker*                                   LiveryPicker;                                      // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomNetRelevancyPointInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewardHandInInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class UnclaimVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableGuid                                     Id;                                                // 0x80(0x30)
	struct QuestVariableBool                                     Success;                                           // 0xb0(0x30)
};


// Size 0x1e8 (Full Size[0x588] - InheritedSize[0x3a0]
class SeaFortsService: public Actor
{
public:
	char                                                         pad0x10_T688N[0x10];                               // 0x3a0(0x10)
	struct SeaFortDistantLightsAssetLoader                       DistantLightsAssetLoader;                          // 0x3b0(0x28)
	TArray<struct SeaFortDistantLightsSignal>                    ReplicatedDistantLightsSignals;                    // 0x3d8(0x10)
	class SeaFortsWorldDataAsset*                                SeaFortsData;                                      // 0x438(0x8)
	TArray<class Seafort*>                                       SeaForts;                                          // 0x440(0x10)
	char                                                         pad0x138_FOBNC[0x138];                             // 0x450(0x138)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomScoreServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ElevatorActionBase: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MovementSpeedInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class WaterSensitiveComponent: public ActorComponent
{
public:
	class WaterSensitiveComponentDataAsset*                      WaterSensitiveData;                                // 0xb8(0x8)
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class TunnelDependencies: public Object
{
public:
	char                                                         pad0xb0_C9TJZ[0xb0];                               // 0x28(0xb0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestZoneInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class AnimNotify_DitherActor: public AnimNotify
{
public:
	char                                                         FadeSetting;                                       // 0x38(0x1)
	char                                                         pad0x3_SE675[0x3];                                 // 0x39(0x3)
	float                                                        FadeTime;                                          // 0x3c(0x4)
	float                                                        FadeFromTransparencyValue;                         // 0x40(0x4)
	bool                                                         UseFadeFromTransparencyValue;                      // 0x44(0x1)
	char                                                         pad0x3_ZCIRT[0x3];                                 // 0x45(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShip_Sloop: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class GrantPagesStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ModifiedLoadoutSwitchesManagerInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetRecoveryMethod: public BTTaskNode
{
public:
	class UClass*                                                RecoveryMethod;                                    // 0x60(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class WieldableBookRendererSettings: public DataAsset
{
public:
	class Font*                                                  Font;                                              // 0x28(0x8)
	float                                                        FontScale;                                         // 0x30(0x4)
	float                                                        FontMaxScale;                                      // 0x34(0x4)
	float                                                        FontLineSpacingScale;                              // 0x38(0x4)
	char                                                         pad0x4_KP4A7[0x4];                                 // 0x3c(0x4)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class BlockEarthquakeTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	struct QuestVariableActor                                    ActorNearIsland;                                   // 0x28(0x30)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class MutateCollectorsChestStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    CollectorsChest;                                   // 0x80(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class AddIslandToVoyageHistoryStep: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class ShipAnnouncementComponent: public ActorComponent
{
public:
	struct StringAssetReference                                  Icon;                                              // 0xb8(0x10)
	struct StringAssetReference                                  Alignment;                                         // 0xc8(0x10)
	char                                                         AlignmentId;                                       // 0xd8(0x1)
	char                                                         pad0x7_QPGPH[0x7];                                 // 0xd9(0x7)
	struct FString                                               AudioCueKey;                                       // 0xe0(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FireCannonNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialVisibilityInterface: public Interface
{
public:
};


// Size 0xa80 (Full Size[0xaa8] - InheritedSize[0x28]
class AthenaGameSettings: public Object
{
public:
	int                                                          NumberOfDaysInEachMonth;                           // 0x28(0x4)
	char                                                         pad0x4_XGAYK[0x4];                                 // 0x2c(0x4)
	struct FString                                               EntryMap;                                          // 0x30(0x10)
	struct FString                                               FrontendMap;                                       // 0x40(0x10)
	struct FString                                               InGameMap;                                         // 0x50(0x10)
	struct FString                                               TutorialMap;                                       // 0x60(0x10)
	struct StringAssetReference                                  PlayModeLevels;                                    // 0x70(0x10)
	struct StringAssetReference                                  FeatureToggledLevels;                              // 0x80(0x10)
	struct FString                                               OverrideServerURL;                                 // 0x90(0x10)
	float                                                        LoadLevelTimeoutTime;                              // 0xa0(0x4)
	float                                                        ServiceBridgeConnectTimeout;                       // 0xa4(0x4)
	TArray<Class>                                                MaidenVoyageProgressionEntitlements;               // 0xa8(0x10)
	struct StringAssetReference                                  CinematicCameraControllerClass;                    // 0x118(0x10)
	struct StringAssetReference                                  CinematicCameraSpectatorPawnClass;                 // 0x128(0x10)
	struct StringAssetReference                                  MaterialTranslationTableFileLocation;              // 0x138(0x10)
	struct StringAssetReference                                  MaterialAudioTableFileLocation;                    // 0x148(0x10)
	struct StringAssetReference                                  MaterialVFXTableFileLocation;                      // 0x158(0x10)
	struct StringAssetReference                                  DebugMenuFileLocation;                             // 0x168(0x10)
	struct StringAssetReference                                  SpawnLocationKeywordPriorityListLocation;          // 0x178(0x10)
	struct StringAssetReference                                  CrewSpawnLocationVariablesListAsset;               // 0x188(0x10)
	struct StringAssetReference                                  SkellyFortDataFileLocation;                        // 0x198(0x10)
	struct StringAssetReference                                  SkellyFortListDataFileLocation;                    // 0x1a8(0x10)
	struct StringAssetReference                                  EnemyAIOnShipServiceDataAssetFileLocation;         // 0x1b8(0x10)
	struct StringAssetReference                                  ProjectileServiceDataFileLocation;                 // 0x1c8(0x10)
	struct StringAssetReference                                  ThrottledProjectileTickDataAssetLocation;          // 0x1d8(0x10)
	struct StringAssetReference                                  HoleDataFileLocation;                              // 0x1e8(0x10)
	struct StringAssetReference                                  PlayerBuriedItemServiceDataFileLocation;           // 0x1f8(0x10)
	struct StringAssetReference                                  ItemLifetimeIslandCapsDataFileLocation;            // 0x208(0x10)
	struct StringAssetReference                                  CursedCannonballDataAsset;                         // 0x218(0x10)
	struct StringAssetReference                                  Throwables;                                        // 0x228(0x10)
	struct StringClassReference                                  ThrowablesItemCategory;                            // 0x238(0x10)
	struct StringAssetReference                                  SpawnableItemsDataAssetLocation;                   // 0x248(0x10)
	struct StringAssetReference                                  FireworksDebugSpawnItemsDataAsset;                 // 0x258(0x10)
	struct StringAssetReference                                  UnlockableEntitlementsDataAssetLocation;           // 0x268(0x10)
	struct StringAssetReference                                  DebugWieldablesDataAsset;                          // 0x278(0x10)
	struct StringAssetReference                                  StrongholdKeyDataAsset;                            // 0x288(0x10)
	struct StringAssetReference                                  MigrationUIContentsFileLocation;                   // 0x298(0x10)
	struct StringAssetReference                                  InventoryRemappingAssetLocation;                   // 0x2a8(0x10)
	struct StringAssetReference                                  AllianceSettingsAssetLocation;                     // 0x2b8(0x10)
	struct StringAssetReference                                  ReapersMarkSettingsAssetLocation;                  // 0x2c8(0x10)
	struct StringAssetReference                                  EmissaryLevelSettingsAssetLocation;                // 0x2d8(0x10)
	struct StringAssetReference                                  EmissaryRewardSettingsAssetLocation;               // 0x2e8(0x10)
	struct StringAssetReference                                  FactionSettingsAssetLocation;                      // 0x2f8(0x10)
	struct StringAssetReference                                  FactionLootLevelRewardsAssetLocation;              // 0x308(0x10)
	struct StringAssetReference                                  FlamesOfFateSettingsAssetLocation;                 // 0x318(0x10)
	struct StringAssetReference                                  DiggingConfigResolverAssetLocation;                // 0x328(0x10)
	struct StringAssetReference                                  CrewNotificationToastSettings;                     // 0x338(0x10)
	struct StringAssetReference                                  FireSettingsDataAsset;                             // 0x348(0x10)
	struct FString                                               InventoryDefaultItemURL;                           // 0x358(0x10)
	float                                                        CheatFlyingSpeedSlow;                              // 0x368(0x4)
	float                                                        CheatFlyingSpeedDefault;                           // 0x36c(0x4)
	float                                                        CheatFlyingSpeedFast;                              // 0x370(0x4)
	float                                                        CheatFlyingAcceleration;                           // 0x374(0x4)
	struct EncounterServiceParams                                EncounterServiceParams;                            // 0x378(0x20)
	struct CrewServiceParams                                     CrewServiceParams;                                 // 0x398(0x70)
	struct SharedShovelParams                                    SharedShovelParams;                                // 0x408(0x60)
	struct MermaidServiceParams                                  MermaidServiceParams;                              // 0x468(0x8c)
	struct MermaidServiceParams                                  ContestSpecificMermaidServiceParamsToggleLocked;   // 0x4f4(0x8c)
	struct MermaidServiceParams                                  InvasionSpecificMermaidServiceParams;              // 0x580(0x8c)
	char                                                         pad0x4_1RTSC[0x4];                                 // 0x60c(0x4)
	struct MakeFriendsEmoteParams                                MakeFriendsEmoteParams;                            // 0x610(0x18)
	struct MermaidRespawnConfig                                  MermaidRespawnConfiguration;                       // 0x628(0x28)
	struct CharacterSocketCollisionServiceParams                 CharacterSocketCollisionServiceParams;             // 0x650(0x8)
	struct AthenaAICharacterParams                               AAthenaAICharacterParams;                          // 0x658(0x14)
	int                                                          AssumedMaxFPSOnServer;                             // 0x66c(0x4)
	struct FName                                                 WwiseObjectUnderwaterStateSwitchGroup;             // 0x670(0x8)
	struct FName                                                 WwiseObjectUnderwaterSwitchDefaultState;           // 0x678(0x8)
	struct FName                                                 WwiseObjectUnderwaterSwitchUnderwaterState;        // 0x680(0x8)
	float                                                        StormQuantisePrecision;                            // 0x688(0x4)
	char                                                         pad0x4_OL3V4[0x4];                                 // 0x68c(0x4)
	struct StringAssetReference                                  ShipLiveryCatalogueDataAssetLocation;              // 0x690(0x10)
	struct StringAssetReference                                  ShipPartsCatalogueDataAssetLocation;               // 0x6a0(0x10)
	struct StringAssetReference                                  RowboatSpawnParamsDataAssetLocation;               // 0x6b0(0x10)
	struct StringAssetReference                                  HarpoonLauncherItemExclusionDataAssetLocation;     // 0x6c0(0x10)
	struct StringAssetReference                                  BalanceableWalkwayDataAssetLocation;               // 0x6d0(0x10)
	struct StringAssetReference                                  BalanceableWalkwayFXDataAssetLocation;             // 0x6e0(0x10)
	struct StringAssetReference                                  KrakenTentacleClassLocation;                       // 0x6f0(0x10)
	struct StringAssetReference                                  KrakenShipTentacleClassLocation;                   // 0x700(0x10)
	struct StringAssetReference                                  KrakenServiceParamsDataAssetLocation;              // 0x710(0x10)
	struct StringAssetReference                                  AmbientTinySharkServiceParamsDataAssetLocation;    // 0x720(0x10)
	struct StringAssetReference                                  SunkenIslandSettings;                              // 0x730(0x10)
	struct StringAssetReference                                  CompanyDataListAssetLocation;                      // 0x740(0x10)
	struct StringAssetReference                                  CoherentUIGTAssetRootLocation;                     // 0x750(0x10)
	struct StringAssetReference                                  CoherentUIGTPersistentDataAssetLocation;           // 0x760(0x10)
	struct StringAssetReference                                  CoherentContentEngagementMessageLocation;          // 0x770(0x10)
	struct StringAssetReference                                  NestedWorldRootDataAssetLocation;                  // 0x780(0x10)
	struct StringAssetReference                                  AshenLordEncounterServiceParams;                   // 0x790(0x10)
	struct StringAssetReference                                  PortalServiceParams;                               // 0x7a0(0x10)
	struct StringAssetReference                                  AggressiveGhostShipsEncounterServiceParams;        // 0x7b0(0x10)
	TArray<Class>                                                RequiredLoadoutCategories;                         // 0x7c0(0x10)
	struct StringAssetReference                                  CarouselGenerationParams;                          // 0x7d0(0x10)
	float                                                        SinkingShipDestructionDistanceThreshold;           // 0x7e0(0x4)
	char                                                         pad0x4_36AC2[0x4];                                 // 0x7e4(0x4)
	struct StringAssetReference                                  DefaultItemsToBeDisplayedOnInventoryPanel;         // 0x7e8(0x10)
	struct StringClassReference                                  DefaultFogBank;                                    // 0x7f8(0x10)
	struct StringClassReference                                  DefaultFogBankManager;                             // 0x808(0x10)
	struct StringAssetReference                                  TunnelsOfTheDamnedServiceParamsDataAssetLocation;  // 0x818(0x10)
	struct PlayerModerationParams                                PlayerModerationParams;                            // 0x828(0xc)
	char                                                         pad0x4_FN74Q[0x4];                                 // 0x834(0x4)
	struct StringAssetReference                                  SpireServiceParamsDataAssetLocation;               // 0x838(0x10)
	struct StringClassReference                                  GhostCurseEntitlement;                             // 0x848(0x10)
	struct FName                                                 GhostCurseRewardId;                                // 0x858(0x8)
	struct StringClassReference                                  GoldGhostCurseEntitlement;                         // 0x860(0x10)
	struct FName                                                 GoldGhostCurseRewardId;                            // 0x870(0x8)
	struct StringClassReference                                  SkeletonCurseEntitlement;                          // 0x878(0x10)
	struct FName                                                 SkeletonCurseRewardId;                             // 0x888(0x8)
	struct FName                                                 SkeletonCurseWardrobeKey;                          // 0x890(0x8)
	TArray<Class>                                                SkeletonClothingCategories;                        // 0x898(0x10)
	struct StringAssetReference                                  SkeletonClothingEntitlementMapDataAsset;           // 0x8a8(0x10)
	TArray<char>                                                 KillNotificationHealthChangeReasons;               // 0x8b8(0x10)
	struct StringAssetReference                                  ShipStorageJettisonParamsDataAsset;                // 0x8c8(0x10)
	struct StringAssetReference                                  WorldEdgeItemParamsDataAsset;                      // 0x8d8(0x10)
	struct StringAssetReference                                  PlayerLootMarkerServiceParamsFileLocation;         // 0x8e8(0x10)
	struct StringAssetReference                                  DefaultEmblemPopUpBackgroundFileLocation;          // 0x8f8(0x10)
	struct StringAssetReference                                  AdventureOnDemandServiceParamsAssetFileLocation;   // 0x908(0x10)
	struct StringAssetReference                                  AdventureOnDemandVoyageSelectionDataAssetFileLocation; // 0x918(0x10)
	struct StringAssetReference                                  QuestTableAdventureOnDemandParamsFileLocation;     // 0x928(0x10)
	struct StringAssetReference                                  TradingCompanyPopUpBackgroundCollectionAssetFileLocation; // 0x938(0x10)
	struct SeaOfThievesOnDemandTreasurePopupConversionTable      SeaOfThievesOnDemandRewardPopupsConversionTable;   // 0x948(0x10)
	struct StringAssetReference                                  SkellyFortAvailabilityParamsAssetFileLocation;     // 0x958(0x10)
	struct StringAssetReference                                  KrakenAvailabilityParamsAssetFileLocation;         // 0x968(0x10)
	struct StringAssetReference                                  AshenLordAvailabilityParamsAssetFileLocation;      // 0x978(0x10)
	struct StringAssetReference                                  AggressiveGhostShipEncounterAvailabilityParamsAssetFileLocation; // 0x988(0x10)
	struct StringAssetReference                                  AIShipBattleAvailabilityParamsAssetFileLocation;   // 0x998(0x10)
	struct StringAssetReference                                  BoarWallowActorToSpawn;                            // 0x9a8(0x10)
	int                                                          NumberOfIslandsToSelectWhenRandomisingForBoarsAndWallows; // 0x9b8(0x4)
	bool                                                         ShouldOverrideNumberOfIslandInEditor;              // 0x9bc(0x1)
	char                                                         pad0x3_J349W[0x3];                                 // 0x9bd(0x3)
	int                                                          NumberOfIslandsToSelectWhenRandomisingForBoarsAndWallowsInEditor; // 0x9c0(0x4)
	char                                                         pad0x4_TAR1L[0x4];                                 // 0x9c4(0x4)
	struct StringAssetReference                                  HammerheadServiceParamsDataAsset;                  // 0x9c8(0x10)
	struct StringAssetReference                                  CompetitiveVoyagesServiceParamsDataAsset;          // 0x9d8(0x10)
	TArray<struct StringAssetReference>                          AdditionalCompetitiveVoyagesServiceParamsDataAsset; // 0x9e8(0x10)
	struct StringAssetReference                                  BoneCallerServiceParamsDataAsset;                  // 0x9f8(0x10)
	struct StringAssetReference                                  ReapersChestAISpawnerServiceParamsDataAsset;       // 0xa08(0x10)
	struct StringAssetReference                                  FaunaSpawnaServiceParamsDataAsset;                 // 0xa18(0x10)
	struct StringAssetReference                                  TrackedEncountersEventServiceParamsDataAsset;      // 0xa28(0x10)
	struct StringAssetReference                                  AncientTinySharkEventServiceParamsDataAsset;       // 0xa38(0x10)
	struct StringAssetReference                                  TinyKrakenEventServiceParamsDataAsset;             // 0xa48(0x10)
	struct StringAssetReference                                  MercenaryServiceParamsDataAsset;                   // 0xa58(0x10)
	struct StringAssetReference                                  GreenscreenDataAsset;                              // 0xa68(0x10)
	struct StringAssetReference                                  SessionManagementServiceSettingsParamsDataAsset;   // 0xa78(0x10)
	struct StringAssetReference                                  NavalBattleServiceParamsDataAsset;                 // 0xa88(0x10)
	TArray<struct RareGameServiceSpecification>                  GameContextServiceSpecifications;                  // 0xa98(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseBoogieCurse: public StatusResponse
{
public:
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class WaitForNPCDialogOptionEventStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 EventName;                                         // 0x80(0x8)
	struct QuestVariableActor                                    ActorVar;                                          // 0x88(0x30)
	struct QuestVariableActor                                    InteractingPlayer;                                 // 0xb8(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class OrbOfSoulsCountType: public CountType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestBuriableItemBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TempleRitualCountType: public CountType
{
public:
};


// Size 0xe0 (Full Size[0x198] - InheritedSize[0xb8]
class HoleSpawnerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_OS9DJ[0x8];                                 // 0xb8(0x8)
	class EnvQuery*                                              QueryTemplate;                                     // 0xc0(0x8)
	TArray<struct Vector>                                        GeneratedPoints;                                   // 0xc8(0x10)
	char                                                         pad0x18_MZXLV[0x18];                               // 0xd8(0x18)
	TArray<class Hole*>                                          HolesThatNeedToBeSpawned;                          // 0xf0(0x10)
	class Actor*                                                 SpawnedProxy;                                      // 0x100(0x8)
	TArray<struct ComponentReference>                            LocationsToSpawnHolesIn;                           // 0x108(0x10)
	class UClass*                                                HoleToSpawn;                                       // 0x118(0x8)
	char                                                         pad0x8_N1NPM[0x8];                                 // 0x120(0x8)
	bool                                                         OverrideSpawnItems;                                // 0x128(0x1)
	char                                                         pad0x7_B6YOQ[0x7];                                 // 0x129(0x7)
	TArray<struct LootHoleItemToSpawn>                           ListOfItemsToSpawn;                                // 0x130(0x10)
	TArray<class LootHole*>                                      SpawnedLootHoles;                                  // 0x140(0x10)
	bool                                                         DeleteSpawnedHolesDuringEndPlay;                   // 0x150(0x1)
	char                                                         pad0x3_JTO9M[0x3];                                 // 0x151(0x3)
	float                                                        MinLootHoleDistanceFromWallowSQ;                   // 0x154(0x4)
	float                                                        MaxLootHoleDistanceFromWallowSQ;                   // 0x158(0x4)
	bool                                                         ShouldSpawnHolesImmediately;                       // 0x15c(0x1)
	char                                                         pad0x3_8QMJR[0x3];                                 // 0x15d(0x3)
	struct Vector                                                VectorToAddToTheEQSPointsWhenCheckingForTerrain;   // 0x160(0xc)
	struct Vector                                                VectorToCheckDownwardsForCheckingHolePositions;    // 0x16c(0xc)
	char                                                         ShovelState;                                       // 0x178(0x1)
	char                                                         pad0x3_F30G5[0x3];                                 // 0x179(0x3)
	float                                                        SphereRadiusForCheckingDiggingSpots;               // 0x17c(0x4)
	char                                                         pad0x18_BG782[0x18];                               // 0x180(0x18)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableRedirectionNPCContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
	struct Guid                                                  SpecificNPCId;                                     // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenDebugFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogHeader: public Object
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class TaleQuestReleaseContendedResourceStep: public TaleQuestStep
{
public:
	class TaleQuestReleaseContendedResourceStepDesc*             StepDesc;                                          // 0x98(0x8)
	bool                                                         ResourceReleased;                                  // 0xa0(0x1)
	char                                                         pad0x7_KOCQP[0x7];                                 // 0xa1(0x7)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class EffectBlendControllerComponent: public ActorComponent
{
public:
	struct VisualFeedbackList                                    Effects;                                           // 0xb8(0x20)
	char                                                         pad0x8_8YC5A[0x8];                                 // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_Default: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x10 (Full Size[0x298] - InheritedSize[0x288]
class ProtoTavernPianoInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x10_LJV2F[0x10];                               // 0x288(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerMuteInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HullSubmersionInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class NamedPointsCollectionDataAsset: public DataAsset
{
public:
	TArray<struct NamedPointsCollectionGroup>                    Groups;                                            // 0x28(0x10)
	TArray<char>                                                 AssetTags;                                         // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_AllMermaidsInWorld: public EnvQueryContext
{
public:
};


// Size 0x220 (Full Size[0x2d8] - InheritedSize[0xb8]
class ExplosionComponent: public ActorComponent
{
public:
	char                                                         pad0x8_BEB2A[0x8];                                 // 0xb8(0x8)
	struct ExplosionInfo                                         ExplosionParams;                                   // 0xc0(0x198)
	bool                                                         UseLaunchLocation;                                 // 0x258(0x1)
	char                                                         pad0x3_F2I4P[0x3];                                 // 0x259(0x3)
	struct Vector                                                RelativeLaunchLocation;                            // 0x25c(0xc)
	float                                                        LaunchHeight;                                      // 0x268(0x4)
	char                                                         pad0x64_1RTIY[0x64];                               // 0x26c(0x64)
	class UClass*                                                ImpactProjectileId;                                // 0x2d0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class BalanceableWalkwayWalkInputId: public AnalogInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GameplayLODSettings: public Object
{
public:
	struct AnimationLODParameters                                AnimationLODSettings;                              // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraFieldOfViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewSpawnLocationsInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class EventBroadcastStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 EventName;                                         // 0x80(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapIslandTextureProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestZoneServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class MeleeChargeEndStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StackableLocomotionActionStateInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class NPCOnSurfaceManager: public Object
{
public:
	class NPCOnSurfaceDataAsset*                                 NPCOnSurfaceDataAsset;                             // 0x28(0x8)
	class NPCOnSurface*                                          NPC;                                               // 0x30(0x8)
	char                                                         pad0x18_DJM6L[0x18];                               // 0x38(0x18)
	class Actor*                                                 ParentActor;                                       // 0x50(0x8)
	TArray<class Cannon*>                                        CannonActors;                                      // 0x58(0x10)
	class NPCOnSurfaceVOManager*                                 VOManager;                                         // 0x68(0x8)
	class NPCOnSurfaceCannonManager*                             CannonManager;                                     // 0x70(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClamberActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetTaleProgressStep: public TaleQuestStep
{
public:
	class SetTaleProgressStepDesc*                               StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPersistenceComponentProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CannonRotationStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SquirtStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0x5d0] - InheritedSize[0x5c0]
class MechanismProximityResetComponent: public SphereComponent
{
public:
	float                                                        Delay;                                             // 0x5c0(0x4)
	char                                                         pad0xc_3JVFC[0xc];                                 // 0x5c4(0xc)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class TriggerCollisionHelper: public Object
{
public:
	int                                                          TriggerId;                                         // 0x28(0x4)
	char                                                         pad0x1c_WQP2Y[0x1c];                               // 0x2c(0x1c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedServiceParams: public DataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationWheelBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClothingLoadoutViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExperienceEligibilityInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class AnimNotify_CutSceneSubtitle: public AnimNotify
{
public:
	char                                                         pad0x8_SRBZV[0x8];                                 // 0x38(0x8)
};


// Size 0x110 (Full Size[0x6c0] - InheritedSize[0x5b0]
class ProjectileLauncherMechanismSourceComponent: public ArrowComponent
{
public:
	char                                                         pad0x8_R6I1I[0x8];                                 // 0x5b0(0x8)
	struct FloatRange                                            InitialLaunchDelay;                                // 0x5b8(0x10)
	struct FloatRange                                            RepeatedLaunchDelay;                               // 0x5c8(0x10)
	char                                                         Mode;                                              // 0x5d8(0x1)
	char                                                         pad0x7_8FNT4[0x7];                                 // 0x5d9(0x7)
	TArray<struct Vector>                                        TargetLocations;                                   // 0x5e0(0x10)
	class ProjectileLauncherMechanismSourceDataAsset*            Params;                                            // 0x5f0(0x8)
	class UClass*                                                ProjectileType;                                    // 0x5f8(0x8)
	float                                                        ProjectileSpeed;                                   // 0x600(0x4)
	float                                                        Gravity;                                           // 0x604(0x4)
	float                                                        GravityScalar;                                     // 0x608(0x4)
	bool                                                         PreferHigherAngles;                                // 0x60c(0x1)
	char                                                         pad0x3_VAQY0[0x3];                                 // 0x60d(0x3)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x610(0x8)
	class WwiseEvent*                                            LaunchSfx;                                         // 0x618(0x8)
	class Object*                                                LaunchVFX;                                         // 0x620(0x8)
	bool                                                         Enabled;                                           // 0x658(0x1)
	char                                                         pad0x67_RYNE2[0x67];                               // 0x659(0x67)
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class BTService_DetermineBoarGoesToWallow: public BTService
{
public:
	char                                                         pad0x4_E17HA[0x4];                                 // 0x70(0x4)
	int                                                          Min;                                               // 0x74(0x4)
	int                                                          Max;                                               // 0x78(0x4)
	char                                                         pad0x4_NDDVX[0x4];                                 // 0x7c(0x4)
	int                                                          ChanceOfGoingBackToHideout;                        // 0x80(0x4)
	char                                                         pad0x4_Z7CIP[0x4];                                 // 0x84(0x4)
};


// Size 0x100 (Full Size[0x1b8] - InheritedSize[0xb8]
class SunkenCurseArtefactVfxComponent: public ActorComponent
{
public:
	struct Color                                                 VFXTintColour;                                     // 0xb8(0x4)
	char                                                         pad0x4_CYJRR[0x4];                                 // 0xbc(0x4)
	class Object*                                                DamagedParticleSystem;                             // 0xc0(0x8)
	class Object*                                                DefeatedParticleSystem;                            // 0xc8(0x8)
	class Object*                                                UnderwaterDefeatedParticleSystem;                  // 0xd0(0x8)
	int                                                          GlowMaterialIndex;                                 // 0xd8(0x4)
	struct FName                                                 GlowMaterialPropertyName;                          // 0xdc(0x8)
	float                                                        GlowMaterialScale;                                 // 0xe4(0x4)
	float                                                        GlowMaterialBias;                                  // 0xe8(0x4)
	float                                                        GlowUpdateSpeed;                                   // 0xec(0x4)
	class StatueThreatBase*                                      Statue;                                            // 0xf0(0x8)
	class MaterialInstanceDynamic*                               GlowMaterial;                                      // 0xf8(0x8)
	char                                                         pad0xb8_7X2SC[0xb8];                               // 0x100(0xb8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipMilestoneDescriptions: public DataAsset
{
public:
	TArray<struct MilestoneAlignment>                            ShipMilestoneAlignments;                           // 0x28(0x10)
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class RevealableService: public Actor
{
public:
	char                                                         pad0x8_3SLQ2[0x8];                                 // 0x3a0(0x8)
	float                                                        FullCheckInterval;                                 // 0x3a8(0x4)
	char                                                         pad0x4_7ZDQQ[0x4];                                 // 0x3ac(0x4)
	class Object*                                                TargetGameStateObject;                             // 0x3b0(0x8)
	class RevealableServiceSettingsDataAsset*                    ServiceSettings;                                   // 0x3b8(0x8)
	char                                                         pad0x50_8HK3X[0x50];                               // 0x3c0(0x50)
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class MeleeChargeAIAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        MinAngleToTargetToActivate;                        // 0xc8(0x4)
	float                                                        MaxAngleToTargetToActivate;                        // 0xcc(0x4)
	float                                                        MinTimeBetweenCheck;                               // 0xd0(0x4)
	float                                                        MaxTimeBetweenCheck;                               // 0xd4(0x4)
	float                                                        ChanceOfActivation;                                // 0xd8(0x4)
	float                                                        ChargeTime;                                        // 0xdc(0x4)
};


// Size 0x300 (Full Size[0x880] - InheritedSize[0x580]
class AthenaCharacterMovementComponent: public CharacterMovementComponent
{
public:
	char                                                         pad0x10_UFMSC[0x10];                               // 0x580(0x10)
	struct AthenaCharacterSwimParams                             SwimParams;                                        // 0x590(0x9c)
	float                                                        SprintSpdAmp;                                      // 0x62c(0x4)
	float                                                        SprintAccelAmp;                                    // 0x630(0x4)
	float                                                        CrouchSpdAmp;                                      // 0x634(0x4)
	float                                                        CrouchAccelAmp;                                    // 0x638(0x4)
	float                                                        LookAtYawRate;                                     // 0x63c(0x4)
	float                                                        LookAtPitchRate;                                   // 0x640(0x4)
	char                                                         pad0x4_VU641[0x4];                                 // 0x644(0x4)
	float                                                        MaxSpeedRatioWhenWalkingInNonSwimWater;            // 0x648(0x4)
	float                                                        MaxAccelerationRatioWhenWalkingInNonSwimWater;     // 0x64c(0x4)
	bool                                                         bCharacterCollisionSweepsEnabled;                  // 0x650(0x1)
	char                                                         pad0x3_N7ARR[0x3];                                 // 0x651(0x3)
	float                                                        CharacterCollisionRadius;                          // 0x654(0x4)
	struct CollisionProfileName                                  CharacterCollisionProfile;                         // 0x658(0x8)
	struct CollisionProfileName                                  CollisionPanicFallbackProfileName;                 // 0x660(0x8)
	float                                                        CharacterCollisionWalkingFriction;                 // 0x668(0x4)
	float                                                        CharacterCollisionSwimmingFriction;                // 0x66c(0x4)
	float                                                        CharacterCollisionUnderwaterOffset;                // 0x670(0x4)
	float                                                        CharacterDepenetrationSmoothingMultiplier;         // 0x674(0x4)
	class AthenaCharacterMovementUnderwater*                     UnderwaterMovement;                                // 0x678(0x8)
	bool                                                         bCreateDisturbance;                                // 0x680(0x1)
	char                                                         pad0x3_U327O[0x3];                                 // 0x681(0x3)
	float                                                        DisturbanceSize;                                   // 0x684(0x4)
	float                                                        DisturbanceVelocityScale;                          // 0x688(0x4)
	bool                                                         UseAsRVOObstacleOnly;                              // 0x68c(0x1)
	char                                                         pad0x73_JA9EE[0x73];                               // 0x68d(0x73)
	float                                                        FanPushOutAngle;                                   // 0x700(0x4)
	int                                                          FanPushOutNumSteps;                                // 0x704(0x4)
	float                                                        MaxFanPushOutScalar;                               // 0x708(0x4)
	char                                                         pad0x4_5SOBW[0x4];                                 // 0x70c(0x4)
	class CurveFloat*                                            UnderwaterVelocityToAnglePitchProjectileHitVolume; // 0x710(0x8)
	class CurveFloat*                                            UnderwaterVelocityToAngleRollProjectileHitVolume;  // 0x718(0x8)
	class CurveFloat*                                            UnderwaterVelocityToZOffsetProjectileHitVolume;    // 0x720(0x8)
	class CurveFloat*                                            OnLandVelocityToAnglePitchProjectileHitVolume;     // 0x728(0x8)
	class CurveFloat*                                            OnLandVelocityToXOffsetProjectileHitVolume;        // 0x730(0x8)
	class CurveFloat*                                            OnLandVelocityToYOffsetProjectileHitVolume;        // 0x738(0x8)
	class CurveFloat*                                            OnLandVelocityToZOffsetProjectileHitVolume;        // 0x740(0x8)
	class CurveFloat*                                            FallingVelocityToAnglePitchProjectileHitVolume;    // 0x748(0x8)
	class CurveFloat*                                            FallingVelocityToXOffsetProjectileHitVolume;       // 0x750(0x8)
	class CurveFloat*                                            FallingVelocityToZOffsetProjectileHitVolume;       // 0x758(0x8)
	char                                                         pad0xe0_8FHTV[0xe0];                               // 0x760(0xe0)
	struct FName                                                 NonUnderwaterCollisionProfileName;                 // 0x840(0x8)
	struct FName                                                 UnderwaterCollisionProfileName;                    // 0x848(0x8)
	char                                                         pad0x30_DXIZJ[0x30];                               // 0x850(0x30)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class LootTeleportFilterDataAsset: public DataAsset
{
public:
	TArray<Class>                                                TargetProxyTypes;                                  // 0x28(0x10)
	TArray<struct ItemProxyWithToggle>                           IgnoredProxyTypes;                                 // 0x38(0x10)
	bool                                                         IgnoreStorageContainers;                           // 0x68(0x1)
	char                                                         pad0x7_86QS0[0x7];                                 // 0x69(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipRegionLocatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x5b0] - InheritedSize[0x5b0]
class WieldableItemSetMockCharacter: public Character
{
public:
	class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x5a8(0x8)
};


// Size 0x88 (Full Size[0x140] - InheritedSize[0xb8]
class TextureFeedbackComponent: public ActorComponent
{
public:
	class Texture*                                               InputTexture1;                                     // 0xb8(0x8)
	class Texture2D*                                             InputTexture2;                                     // 0xc0(0x8)
	int                                                          TextureSizeX;                                      // 0xc8(0x4)
	int                                                          TextureSizeY;                                      // 0xcc(0x4)
	struct Vector4                                               InputData;                                         // 0xd0(0x10)
	char                                                         pad0x48_SIO12[0x48];                               // 0xe0(0x48)
	class TextureRenderTarget2D*                                 FeedbackTexture;                                   // 0x128(0x8)
	class TextureRenderTarget2D*                                 FeedbackTexturePingPong;                           // 0x130(0x8)
	char                                                         pad0x8_T61GN[0x8];                                 // 0x138(0x8)
};


// Size 0x5e8 (Full Size[0x610] - InheritedSize[0x28]
class PlayerMusicControllerParams: public DataAsset
{
public:
	struct FName                                                 WorldRegionStateGroup;                             // 0x28(0x8)
	TArray<struct Name>                                          WorldRegionStateNames;                             // 0x30(0x10)
	class WwiseEvent*                                            PlayerOnIslandStart;                               // 0x40(0x8)
	class WwiseEvent*                                            PlayerOnIslandStop;                                // 0x48(0x8)
	class WwiseEvent*                                            PlayerAtSeaStart;                                  // 0x50(0x8)
	class WwiseEvent*                                            PlayerAtSeaStop;                                   // 0x58(0x8)
	class WwiseEvent*                                            PlayerInCaveStart;                                 // 0x60(0x8)
	class WwiseEvent*                                            PlayerInCaveStop;                                  // 0x68(0x8)
	class WwiseEvent*                                            PlayerUnderwaterStart;                             // 0x70(0x8)
	class WwiseEvent*                                            PlayerUnderwaterStop;                              // 0x78(0x8)
	float                                                        FactorForSwitchingAtSeaMoodMusicOn;                // 0x80(0x4)
	struct FName                                                 PlayerHeightRtpc;                                  // 0x84(0x8)
	char                                                         pad0x4_VNV6H[0x4];                                 // 0x8c(0x4)
	class WwiseEvent*                                            PlayerSittingStart;                                // 0x90(0x8)
	class WwiseEvent*                                            PlayerSittingStop;                                 // 0x98(0x8)
	TArray<struct ShipDiveMusicEvent>                            ShipDiveMusicEvents;                               // 0xa0(0x10)
	TArray<struct ShipDiveMusicEvent>                            ShipEmergeMusicEvents;                             // 0xb0(0x10)
	float                                                        StopPlayingEmergeMusicAfterSeconds;                // 0xc0(0x4)
	struct FName                                                 BoatSpeedRtpc;                                     // 0xc4(0x8)
	float                                                        BoatSpeedRtpcMin;                                  // 0xcc(0x4)
	float                                                        BoatSpeedRtpcMax;                                  // 0xd0(0x4)
	float                                                        AtSeaAtSpeedStingCooldownMax;                      // 0xd4(0x4)
	float                                                        AtSeaAtSpeedStingCooldownMin;                      // 0xd8(0x4)
	char                                                         pad0x4_RO1SS[0x4];                                 // 0xdc(0x4)
	class WwiseEvent*                                            AtSeaAtSpeedPlay;                                  // 0xe0(0x8)
	float                                                        SailBillowStingCooldown;                           // 0xe8(0x4)
	char                                                         pad0x4_SKGXM[0x4];                                 // 0xec(0x4)
	class WwiseEvent*                                            SailBillowOneshotPlay;                             // 0xf0(0x8)
	class WwiseEvent*                                            SailBillowOneshotPlayMediumShip;                   // 0xf8(0x8)
	class WwiseEvent*                                            SailBillowOneshotPlayReapersTributeShip;           // 0x100(0x8)
	class WwiseEvent*                                            AtSeaWildHarpaPlay;                                // 0x108(0x8)
	class WwiseEvent*                                            AtSeaWildHarpaStop;                                // 0x110(0x8)
	class WwiseEvent*                                            AtSeaReapersTributePlay;                           // 0x118(0x8)
	class WwiseEvent*                                            AtSeaReapersTributeStop;                           // 0x120(0x8)
	struct FName                                                 IslandRevealStateGroup;                            // 0x128(0x8)
	struct FName                                                 IslandRevealStateInitial;                          // 0x130(0x8)
	float                                                        SmallestCaveEnclosedRatio;                         // 0x138(0x4)
	float                                                        SmallestCaveSize;                                  // 0x13c(0x4)
	char                                                         PredominantCaveSurface;                            // 0x140(0x1)
	char                                                         pad0x3_35F2L[0x3];                                 // 0x141(0x3)
	float                                                        SkellyProximityDistance;                           // 0x144(0x4)
	int                                                          MinSkellies;                                       // 0x148(0x4)
	int                                                          MaxSkellies;                                       // 0x14c(0x4)
	class WwiseEvent*                                            SkeletonProximityMusicStart;                       // 0x150(0x8)
	class WwiseEvent*                                            SkeletonProximityMusicStop;                        // 0x158(0x8)
	class WwiseEvent*                                            SkeletonPursuitMusicStart;                         // 0x160(0x8)
	class WwiseEvent*                                            SkeletonPursuitMusicStop;                          // 0x168(0x8)
	class WwiseEvent*                                            OceanCrawlersPursuitMusicStart;                    // 0x170(0x8)
	class WwiseEvent*                                            OceanCrawlersPursuitMusicStop;                     // 0x178(0x8)
	class WwiseEvent*                                            PhantomsPursuitMusicStart;                         // 0x180(0x8)
	class WwiseEvent*                                            PhantomsPursuitMusicStop;                          // 0x188(0x8)
	struct FName                                                 ThreatAmountRtpc;                                  // 0x190(0x8)
	TArray<class Class*>                                         AIStrategyIds;                                     // 0x198(0x10)
	class WwiseEvent*                                            AncientSkellyMusicPlay;                            // 0x1a8(0x8)
	class WwiseEvent*                                            AncientSkellyMusicStop;                            // 0x1b0(0x8)
	class WwiseEvent*                                            AncientSkellyDespawned;                            // 0x1b8(0x8)
	class WwiseEvent*                                            AncientSkellyKilled;                               // 0x1c0(0x8)
	struct FName                                                 BountyQuestProgressFactor;                         // 0x1c8(0x8)
	float                                                        BountyQuestTickityTickThreshold;                   // 0x1d0(0x4)
	char                                                         pad0x4_1ZM84[0x4];                                 // 0x1d4(0x4)
	class WwiseEvent*                                            BountyQuestAnticipationStart;                      // 0x1d8(0x8)
	class WwiseEvent*                                            BountyQuestAnticipationStop;                       // 0x1e0(0x8)
	class WwiseEvent*                                            BountyQuestActionStart;                            // 0x1e8(0x8)
	class WwiseEvent*                                            BountyQuestActionStop;                             // 0x1f0(0x8)
	class WwiseEvent*                                            BountyLordQuestActionStart;                        // 0x1f8(0x8)
	class WwiseEvent*                                            BountyLordQuestActionStop;                         // 0x200(0x8)
	class WwiseEvent*                                            BountyQuestCompleteSting;                          // 0x208(0x8)
	float                                                        MinDistanceMaxVolumeCms;                           // 0x210(0x4)
	float                                                        MaxDistanceMinVolumeCms;                           // 0x214(0x4)
	struct FName                                                 BountyQuestDistanceRtpc;                           // 0x218(0x8)
	float                                                        FactorForChangingBountyToActionState;              // 0x220(0x4)
	float                                                        CooldownForAnticipationMusicRetrigger;             // 0x224(0x4)
	class WwiseEvent*                                            BountyFortAnticipationStart;                       // 0x228(0x8)
	class WwiseEvent*                                            BountyFortAnticipationStop;                        // 0x230(0x8)
	class WwiseEvent*                                            BountyFortAnticipationStopHighString;              // 0x238(0x8)
	class WwiseEvent*                                            BountyFortActionStart;                             // 0x240(0x8)
	class WwiseEvent*                                            BountyFortActionStop;                              // 0x248(0x8)
	class WwiseEvent*                                            BountyFortReaperActionStart;                       // 0x250(0x8)
	class WwiseEvent*                                            BountyFortReaperActionStop;                        // 0x258(0x8)
	float                                                        FactorForChangingFortToActionState;                // 0x260(0x4)
	struct FName                                                 BountyFortSkellyProximityRtpc;                     // 0x264(0x8)
	float                                                        BountyFortSkellyProximityMax;                      // 0x26c(0x4)
	class WwiseEvent*                                            BountyFortSkellyProximityClose;                    // 0x270(0x8)
	struct FName                                                 BountyFortGhostShipIntensityRtpc;                  // 0x278(0x8)
	class WwiseEvent*                                            SeaFortAnticipationStart;                          // 0x280(0x8)
	class WwiseEvent*                                            SeaFortAnticipationStop;                           // 0x288(0x8)
	class WwiseEvent*                                            SeaFortAnticipationStopHighString;                 // 0x290(0x8)
	class WwiseEvent*                                            SeaFortActionStart;                                // 0x298(0x8)
	class WwiseEvent*                                            SeaFortActionStop;                                 // 0x2a0(0x8)
	float                                                        FactorForChangingSeaFortToActionState;             // 0x2a8(0x4)
	char                                                         pad0x4_KGJBN[0x4];                                 // 0x2ac(0x4)
	class WwiseEvent*                                            SeaFortHostileForceProximityClose;                 // 0x2b0(0x8)
	struct FName                                                 GlobalMusicRtpc;                                   // 0x2b8(0x8)
	float                                                        GlobalMusicRtpcMax;                                // 0x2c0(0x4)
	float                                                        GlobalMusicRtpcMin;                                // 0x2c4(0x4)
	float                                                        ShipwreckProximityDistance;                        // 0x2c8(0x4)
	char                                                         pad0x4_44DHL[0x4];                                 // 0x2cc(0x4)
	class WwiseEvent*                                            PlayerNearShipwreckStart;                          // 0x2d0(0x8)
	class WwiseEvent*                                            PlayerNearShipwreckStop;                           // 0x2d8(0x8)
	class WwiseObjectPoolWrapper*                                SharkPoolForCollection;                            // 0x2e0(0x8)
	float                                                        SharkProximity;                                    // 0x2e8(0x4)
	char                                                         pad0x4_IJZZT[0x4];                                 // 0x2ec(0x4)
	class WwiseEvent*                                            PlaySharkProximity;                                // 0x2f0(0x8)
	class WwiseEvent*                                            StopSharkProximity;                                // 0x2f8(0x8)
	class WwiseEvent*                                            PlaySharkAttackOneShot;                            // 0x300(0x8)
	struct FName                                                 SharkAttackStateGroupName;                         // 0x308(0x8)
	struct FName                                                 SharkAttackStatePreAttack;                         // 0x310(0x8)
	struct FName                                                 SharkAttackStatePostAttack;                        // 0x318(0x8)
	float                                                        MaxSharkHeightDelta;                               // 0x320(0x4)
	char                                                         pad0x4_1F1PP[0x4];                                 // 0x324(0x4)
	class WwiseEvent*                                            ServerMigrationStart;                              // 0x328(0x8)
	class WwiseEvent*                                            ServerMigrationStop;                               // 0x330(0x8)
	struct FName                                                 PotentialThreatFactorRtpc;                         // 0x338(0x8)
	float                                                        PotentialThreatMinDistance;                        // 0x340(0x4)
	float                                                        PotentialThreatMaxDistance;                        // 0x344(0x4)
	class WwiseEvent*                                            PlayEdgeOfTheWorldMusic;                           // 0x348(0x8)
	class WwiseEvent*                                            StopEdgeOfTheWorldMusic;                           // 0x350(0x8)
	struct FName                                                 EdgeOfTheWorldProximityFactorRtpc;                 // 0x358(0x8)
	float                                                        MaxDistanceToPlayEdgeOfTheWorldMusic;              // 0x360(0x4)
	float                                                        MinDistanceToPlayEdgeOfTheWorldMusic;              // 0x364(0x4)
	struct FName                                                 CompanyRegionStateGroup;                           // 0x368(0x8)
	TArray<struct Name>                                          CompanyRegionNames;                                // 0x370(0x10)
	class WwiseEvent*                                            CompanyMoodStart;                                  // 0x380(0x8)
	class WwiseEvent*                                            CompanyMoodStop;                                   // 0x388(0x8)
	TArray<struct KrakenMusicEvent>                              KrakenMusicEvents;                                 // 0x390(0x10)
	TArray<class WwiseEvent*>                                    KrakenTentacleTakeHitEvents;                       // 0x3a0(0x10)
	TArray<class WwiseEvent*>                                    KrakenTentacleKilledEvents;                        // 0x3b0(0x10)
	class WwiseEvent*                                            KrakenHeadHitEvent;                                // 0x3c0(0x8)
	struct TinySharkMusicEvent                                   TinySharkExperienceMusic;                          // 0x3c8(0x10)
	TArray<class Class*>                                         TinySharkPursuitStrategies;                        // 0x3d8(0x10)
	class UClass*                                                TinySharkDespawnStrategy;                          // 0x3e8(0x8)
	struct FName                                                 TinySharkAttackStateGroup;                         // 0x3f0(0x8)
	struct FName                                                 TinySharkAttackState;                              // 0x3f8(0x8)
	struct FName                                                 TinySharkCircleState;                              // 0x400(0x8)
	struct FName                                                 TinySharkTypeGroup;                                // 0x408(0x8)
	struct FName                                                 TinySharkTypeOriginal;                             // 0x410(0x8)
	struct FName                                                 TinySharkTypeAshen;                                // 0x418(0x8)
	struct FName                                                 TinySharkTypeCoral;                                // 0x420(0x8)
	float                                                        TinySharkEmergeHeight;                             // 0x428(0x4)
	struct FName                                                 TinySharkSubmergedRtpc;                            // 0x42c(0x8)
	float                                                        SubmergeRtpcMin;                                   // 0x434(0x4)
	float                                                        SubmergeRtpcMax;                                   // 0x438(0x4)
	float                                                        TinySharkHealthChangeAmountForSting;               // 0x43c(0x4)
	float                                                        AncientTinySharkAshenHealthChangeAmountForSting;   // 0x440(0x4)
	float                                                        AncientTinySharkCoralHealthChangeAmountForSting;   // 0x444(0x4)
	float                                                        AncientTinySharkCoralWeakpointHealthChangeAmountForSting; // 0x448(0x4)
	float                                                        AncientTinySharkCoralArmourHealthChangeAmountForSting; // 0x44c(0x4)
	class WwiseEvent*                                            TinySharkHitSting;                                 // 0x450(0x8)
	class WwiseEvent*                                            AncientTinySharkAshenHitSting;                     // 0x458(0x8)
	class WwiseEvent*                                            AncientTinySharkCoralHitSting;                     // 0x460(0x8)
	class WwiseEvent*                                            AncientTinySharkCoralWeakpointHitSting;            // 0x468(0x8)
	class WwiseEvent*                                            AncientTinySharkCoralArmourHitSting;               // 0x470(0x8)
	class WwiseEvent*                                            TinySharkDeathSting;                               // 0x478(0x8)
	class WwiseEvent*                                            TinySharkSummonSting;                              // 0x480(0x8)
	float                                                        TinySharkMusicStartDelay;                          // 0x488(0x4)
	float                                                        TinySharkMusicProximity;                           // 0x48c(0x4)
	class WwiseEvent*                                            TinySharkAttackStingStart;                         // 0x490(0x8)
	class WwiseEvent*                                            TinySharkAttackStingStop;                          // 0x498(0x8)
	class WwiseEvent*                                            TinySharkCoralAttackStingStart;                    // 0x4a0(0x8)
	class WwiseEvent*                                            TinySharkCoralAttackStingStop;                     // 0x4a8(0x8)
	class WwiseEvent*                                            TinySharkAshenAttackStingStart;                    // 0x4b0(0x8)
	class WwiseEvent*                                            TinySharkAshenAttackStingStop;                     // 0x4b8(0x8)
	class WwiseEvent*                                            TinySharkAttackMusicSpecialStart;                  // 0x4c0(0x8)
	class WwiseEvent*                                            TinySharkAttackMusicSpecialStop;                   // 0x4c8(0x8)
	float                                                        EnemyAIOnShipEncounterProximity;                   // 0x4d0(0x4)
	char                                                         pad0x4_S3H65[0x4];                                 // 0x4d4(0x4)
	class WwiseEvent*                                            EnemyAIOnShipEncounterStingStart;                  // 0x4d8(0x8)
	class WwiseEvent*                                            EnemyAIOnShipEncounterStingStop;                   // 0x4e0(0x8)
	class WwiseEvent*                                            EnemyAIOnShipEncounterMusicStart;                  // 0x4e8(0x8)
	class WwiseEvent*                                            EnemyAIOnShipEncounterMusicStop;                   // 0x4f0(0x8)
	class WwiseEvent*                                            SkellyShipEncounterStarted;                        // 0x4f8(0x8)
	class WwiseEvent*                                            SkellyShipEmergentEncounterStarted;                // 0x500(0x8)
	class WwiseEvent*                                            SkellyShipEncounterFinished;                       // 0x508(0x8)
	class WwiseEvent*                                            SkellyShipEmergentEncounterFinished;               // 0x510(0x8)
	class WwiseEvent*                                            SkellyShipEncounterFinishedAfterFinalWave;         // 0x518(0x8)
	class WwiseEvent*                                            SkellyShipFinalWaveSunk;                           // 0x520(0x8)
	struct FName                                                 SkellyShipProgressFactorRtpc;                      // 0x528(0x8)
	class WwiseEvent*                                            SkellyShipSpawned;                                 // 0x530(0x8)
	class WwiseEvent*                                            FinalSkellyShipSpawned;                            // 0x538(0x8)
	class WwiseEvent*                                            SkellyShipSunk;                                    // 0x540(0x8)
	float                                                        SkellyShipMinProximity;                            // 0x548(0x4)
	float                                                        SkellyShipMaxProximity;                            // 0x54c(0x4)
	struct FName                                                 SkellyProximityRtpc;                               // 0x550(0x8)
	class WwiseEvent*                                            PlayerInPuzzleVaultPlay;                           // 0x558(0x8)
	class WwiseEvent*                                            PlayerInPuzzleVaultStop;                           // 0x560(0x8)
	class WwiseEvent*                                            PuzzleVaultCompleteMusic;                          // 0x568(0x8)
	class WwiseEvent*                                            PuzzleVaultIncorrectMusic;                         // 0x570(0x8)
	struct FName                                                 PuzzleVaultWaterFillRtpc;                          // 0x578(0x8)
	class WwiseEvent*                                            FishingMoodMusicPlay;                              // 0x580(0x8)
	class WwiseEvent*                                            FishingMoodMusicStop;                              // 0x588(0x8)
	class WwiseEvent*                                            FishingMoodMusicCaughtFish;                        // 0x590(0x8)
	struct FName                                                 FishOnLineStateGroup;                              // 0x598(0x8)
	struct FName                                                 FishNotOnLine;                                     // 0x5a0(0x8)
	struct FName                                                 FishOnLine;                                        // 0x5a8(0x8)
	float                                                        MaxDistanceOfSpyglassShipSting;                    // 0x5b0(0x4)
	float                                                        MinDistanceOfSpyglassShipSting;                    // 0x5b4(0x4)
	int                                                          SpottedStingCooldownTime;                          // 0x5b8(0x4)
	char                                                         pad0x4_DE01H[0x4];                                 // 0x5bc(0x4)
	class WwiseEvent*                                            SpyglassAIShipSting;                               // 0x5c0(0x8)
	class WwiseEvent*                                            SpyglassEmissaryShipSting;                         // 0x5c8(0x8)
	class WwiseEvent*                                            SpyglassCaptainShipSting;                          // 0x5d0(0x8)
	class WwiseEvent*                                            SpyglassCaptainEmissaryShipSting;                  // 0x5d8(0x8)
	float                                                        SpyglassShipAngleTolerance;                        // 0x5e0(0x4)
	float                                                        SpyglassInitialAnimationTime;                      // 0x5e4(0x4)
	float                                                        ExtraDistanceToAddToShipRay;                       // 0x5e8(0x4)
	char                                                         TraceChannel;                                      // 0x5ec(0x1)
	char                                                         pad0x3_90KF6[0x3];                                 // 0x5ed(0x3)
	class WwiseEvent*                                            ProximityCaptainShipSting;                         // 0x5f0(0x8)
	struct FName                                                 SirenMusicUnderwaterStateGroup;                    // 0x5f8(0x8)
	struct FName                                                 SirenMusicUnderwaterStateValue;                    // 0x600(0x8)
	struct FName                                                 SirenMusicAboveWaterStateValue;                    // 0x608(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class SkellyFortListDataAsset: public DataAsset
{
public:
	TArray<class SkellyFortDataAsset*>                           FortsList;                                         // 0x28(0x10)
	TArray<class Class*>                                         SaferSeasEventBlacklist;                           // 0x38(0x10)
	TArray<class Class*>                                         EventTypesToNotAddToScheduler;                     // 0x48(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LockWheelStatus: public StatusBase
{
public:
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class TrinketActor: public Actor
{
public:
	char                                                         pad0x10_3PV95[0x10];                               // 0x3a0(0x10)
	class MountableComponent*                                    MountableComponent;                                // 0x3b0(0x8)
	class SceneComponent*                                        RootSceneComponent;                                // 0x3b8(0x8)
	class MergedStaticMeshMemoryConstraintComponent*             MergedStaticMeshMemoryConstraintComponent;         // 0x3c0(0x8)
	class SceneComponent*                                        Pivot;                                             // 0x3c8(0x8)
	class NudgeInterpolationParamsDataAsset*                     NudgeDataAsset;                                    // 0x3d0(0x8)
	class TrinketSfxDataAsset*                                   SfxDataAsset;                                      // 0x3d8(0x8)
	TArray<struct TrinketIconMaterialParamOverride>              MaterialParamOverridesForIconCapture;              // 0x3e0(0x10)
};


// Size 0x108 (Full Size[0x188] - InheritedSize[0x80]
class TelemetryTaskStepDesc: public TaleQuestStepDesc
{
public:
	class TaleQuestStepDesc*                                     TaskDesc;                                          // 0x80(0x8)
	struct FString                                               Description;                                       // 0x88(0x10)
	struct TelemetryStepContext                                  TelemetryContext;                                  // 0x98(0xf0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapstanTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldRegionBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterHeightProviderInterface: public Interface
{
public:
};


// Size 0x58 (Full Size[0x90] - InheritedSize[0x38]
class BootyStorageSettings: public DeveloperSettings
{
public:
	float                                                        StoreHoldTime;                                     // 0x38(0x4)
	float                                                        RetrieveHoldTime;                                  // 0x3c(0x4)
	float                                                        PickupPointSpawnDepth;                             // 0x40(0x4)
	float                                                        PickupDismissDuration;                             // 0x44(0x4)
	float                                                        ReapersTributeShipPickupDismissDistanceCheck;      // 0x48(0x4)
	float                                                        LargeShipPickupDismissDistanceCheck;               // 0x4c(0x4)
	float                                                        MediumShipPickupDismissDistanceCheck;              // 0x50(0x4)
	float                                                        SmallShipPickupDismissDistanceCheck;               // 0x54(0x4)
	char                                                         MaxStoragePerLocation;                             // 0x58(0x1)
	char                                                         pad0x7_JPHEK[0x7];                                 // 0x59(0x7)
	struct StringAssetReference                                  BootyStorageSettingsAsset;                         // 0x60(0x10)
	TArray<class Class*>                                         BlacklistedCategories;                             // 0x70(0x10)
	TArray<Class>                                                WhitelistedItems;                                  // 0x80(0x10)
};


// Size 0x1e8 (Full Size[0x2d8] - InheritedSize[0xf0]
class PiratePreviewComponent: public CoherentUIGTRenderToTextureLiveView
{
public:
	char                                                         pad0x68_123OJ[0x68];                               // 0xf0(0x68)
	struct FName                                                 DefaultCamera;                                     // 0x158(0x8)
	TArray<struct PiratePreviewOverridingActorParams>            OverridingClassToSpawnParams;                      // 0x180(0x10)
	struct IntPoint                                              DefaultResolution;                                 // 0x190(0x8)
	struct PiratePreviewView                                     CurrentView;                                       // 0x198(0x20)
	TArray<class Class*>                                         CurrentlySuppressedCategories;                     // 0x1b8(0x10)
	char                                                         pad0x18_4TOFK[0x18];                               // 0x1c8(0x18)
	class RenderToTextureSceneDetails*                           Details;                                           // 0x1e0(0x8)
	struct ClothingLoadout                                       ClothingLoadout;                                   // 0x1e8(0x30)
	class Object*                                                PiratePreviewActor;                                // 0x218(0x8)
	char                                                         pad0xb8_PMRNY[0xb8];                               // 0x220(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSwimmingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ashen_dragon_flag_pen_01_a: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NPCConversationService: public Object
{
public:
	char                                                         pad0x18_EUFFX[0x18];                               // 0x28(0x18)
};


// Size 0x138 (Full Size[0x4d8] - InheritedSize[0x3a0]
class SeaFortAlignmentTable: public Actor
{
public:
	class SceneComponent*                                        ActorRoot;                                         // 0x3a0(0x8)
	class StaticMeshComponent*                                   TableMesh;                                         // 0x3a8(0x8)
	class SeaFortAlignmentTableModelComponent*                   Fort1Mesh;                                         // 0x3b0(0x8)
	class SeaFortAlignmentTableModelComponent*                   Fort2Mesh;                                         // 0x3b8(0x8)
	class SeaFortAlignmentTableModelComponent*                   Fort3Mesh;                                         // 0x3c0(0x8)
	class SeaFortAlignmentTableModelComponent*                   Fort4Mesh;                                         // 0x3c8(0x8)
	class SeaFortAlignmentTableModelComponent*                   Fort5Mesh;                                         // 0x3d0(0x8)
	class SeaFortAlignmentTableModelComponent*                   Fort6Mesh;                                         // 0x3d8(0x8)
	class ParticleSystemComponent*                               FlameParticleComponent;                            // 0x3e0(0x8)
	class Object*                                                SmallFlareParticleSystem;                          // 0x3e8(0x8)
	class Object*                                                MediumFlareParticleSystem;                         // 0x3f0(0x8)
	class Object*                                                LargeFlareParticleSystem;                          // 0x3f8(0x8)
	struct Vector                                                FlareVFXSpawnLocation;                             // 0x400(0xc)
	char                                                         pad0x4_AW3UL[0x4];                                 // 0x40c(0x4)
	class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x410(0x8)
	struct FName                                                 WwiseEmitterName;                                  // 0x418(0x8)
	class WwiseEvent*                                            PlayFlameAudioLoopEvent;                           // 0x420(0x8)
	class WwiseEvent*                                            StopFlameAudioLoopEvent;                           // 0x428(0x8)
	class WwiseEvent*                                            PlaySmallFlareAudioEvent;                          // 0x430(0x8)
	class WwiseEvent*                                            PlayMediumFlareAudioEvent;                         // 0x438(0x8)
	class WwiseEvent*                                            PlayLargeFlareAudioEvent;                          // 0x440(0x8)
	char                                                         pad0x20_4SSEO[0x20];                               // 0x448(0x20)
	char                                                         TableAlignment;                                    // 0x468(0x1)
	char                                                         pad0x7_LB16I[0x7];                                 // 0x469(0x7)
	struct SeaFortAlignmentTableModelCosmeticDefaults            ModelCosmeticDefaults;                             // 0x470(0x10)
	TArray<struct SeaFortAlignment>                              ReplicatedSeaFortAlignmentData;                    // 0x480(0x10)
	char                                                         ReplicatedAlignmentTableFlameSize;                 // 0x490(0x1)
	char                                                         pad0x3_UXPUO[0x3];                                 // 0x491(0x3)
	float                                                        SmallFlameParameterValue;                          // 0x494(0x4)
	float                                                        MediumFlameParameterValue;                         // 0x498(0x4)
	float                                                        LargeFlameParameterValue;                          // 0x49c(0x4)
	TArray<class SeaFortAlignmentTableModelComponent*>           FortMeshes;                                        // 0x4a0(0x10)
	char                                                         pad0x28_BKTG3[0x28];                               // 0x4b0(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaRockWorldSettingsInterface: public Interface
{
public:
};


// Size 0x1f0 (Full Size[0x4c0] - InheritedSize[0x2d0]
class VoiceChatComponent: public SceneComponent
{
public:
	char                                                         pad0x8_QAAKU[0x8];                                 // 0x2d0(0x8)
	struct WwiseEmitter                                          Emitter;                                           // 0x2d8(0x20)
	struct FName                                                 MouthSocketNameOnCharacterMesh;                    // 0x2f8(0x8)
	char                                                         pad0x1c0_4L539[0x1c0];                             // 0x300(0x1c0)
};


// Size 0x8 (Full Size[0xc8] - InheritedSize[0xc0]
class ProjectileWeaponAdaptiveTriggerComponent: public AdaptiveTriggerComponent
{
public:
	struct AdaptiveTriggerEffectMode_Weapon                      RightTrigger_Fire;                                 // 0xc0(0x4)
	char                                                         pad0x4_S2UD8[0x4];                                 // 0xc4(0x4)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class AimAssistService: public Actor
{
public:
	char                                                         pad0x8_WCVJM[0x8];                                 // 0x3a0(0x8)
	TArray<class Interface*>                                     Targets;                                           // 0x3a8(0x10)
	char                                                         pad0x18_EJJ9E[0x18];                               // 0x3b8(0x18)
};


// Size 0x100 (Full Size[0x1b8] - InheritedSize[0xb8]
class DrowningComponent: public ActorComponent
{
public:
	char                                                         pad0x8_ZSCDR[0x8];                                 // 0xb8(0x8)
	class DrowningComponentParams*                               Params;                                            // 0xc0(0x8)
	struct BlendableDrowningParams                               DrowningParams;                                    // 0xc8(0x28)
	class ParticleSystemComponent*                               BubbleVFXComponent;                                // 0xf0(0x8)
	class ParticleSystemComponent*                               ExtraBubblesFirstPersonVFXComponent;               // 0xf8(0x8)
	float                                                        OxygenLevel;                                       // 0x100(0x4)
	char                                                         pad0x54_UDWTV[0x54];                               // 0x104(0x54)
	char                                                         ServerDrowningState;                               // 0x158(0x1)
	char                                                         pad0x7_TTWWU[0x7];                                 // 0x159(0x7)
	class Actor*                                                 OwnerCharacter;                                    // 0x160(0x8)
	class HealthComponent*                                       OwnerHealthComponent;                              // 0x168(0x8)
	char                                                         pad0x10_H7HM3[0x10];                               // 0x170(0x10)
	bool                                                         IsDrowningDisabled;                                // 0x180(0x1)
	char                                                         pad0x37_BKNRS[0x37];                               // 0x181(0x37)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class RewardDefinitionAssetList: public DataAsset
{
public:
	TArray<class RewardDefinitionAsset*>                         RewardDefinitionAssets;                            // 0x28(0x10)
	class WeightedRewardTableAsset*                              WeightRewardTable;                                 // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ForceFeedbackCondition_LocalPlayerUsingWieldable: public ForceFeedbackCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuzzServiceInterface: public Interface
{
public:
};


// Size 0x118 (Full Size[0x4b8] - InheritedSize[0x3a0]
class ShipPreviewActor: public Actor
{
public:
	char                                                         pad0x8_45U0N[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3a8(0x8)
	class ShipPreviewCustomizationLoadoutComponent*              ShipCustomizationLoadoutComponent;                 // 0x3b0(0x8)
	class ChildActorComponent*                                   LargeShip;                                         // 0x3b8(0x8)
	class ChildActorComponent*                                   MediumShip;                                        // 0x3c0(0x8)
	class ChildActorComponent*                                   SmallShip;                                         // 0x3c8(0x8)
	class UClass*                                                BeginPlayShipVisibility;                           // 0x3e0(0x8)
	TArray<class Class*>                                         DefaultShipLiveryEntitlements;                     // 0x3e8(0x10)
	char                                                         pad0xc0_XZIG3[0xc0];                               // 0x3f8(0xc0)
};


// Size 0x418 (Full Size[0x440] - InheritedSize[0x28]
class GameEventSchedulerService: public Object
{
public:
	char                                                         pad0x10_8EF8G[0x10];                               // 0x28(0x10)
	class GameEventSchedulerSettingsAsset*                       Settings;                                          // 0x38(0x8)
	char                                                         pad0xc8_DBRFX[0xc8];                               // 0x40(0xc8)
	TArray<struct GameEventSchedulerMainConfig>                  NextConfigs;                                       // 0x108(0x10)
	class World*                                                 World;                                             // 0x118(0x8)
	char                                                         pad0x50_3L1R4[0x50];                               // 0x120(0x50)
	TArray<struct GameEventCount>                                AvailableEventsForNextConfig;                      // 0x170(0x10)
	char                                                         pad0x10_YB8U5[0x10];                               // 0x180(0x10)
	TArray<struct GameEventExclusionZone>                        EventExclusionZones;                               // 0x190(0x10)
	char                                                         pad0x2a0_C3TA6[0x2a0];                             // 0x1a0(0x2a0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CollectableQuestObjectInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestRequiredItemsDataAsset: public DataAsset
{
public:
	TArray<struct MerchantQuestRequiredItemsRankEntry>           RankEntries;                                       // 0x28(0x10)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class AddMechanismTriggerStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	struct QuestVariableActor                                    Trigger;                                           // 0xb0(0x30)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GlintComponentDataAsset: public DataAsset
{
public:
	TArray<char>                                                 ToggleConditions;                                  // 0x28(0x10)
	bool                                                         VisibleByDefault;                                  // 0x38(0x1)
	char                                                         pad0x7_TZZHR[0x7];                                 // 0x39(0x7)
};


// Size 0x10 (Full Size[0x178] - InheritedSize[0x168]
class HuntingSpearProjectileMovementComponent: public ProjectileMovementComponent
{
public:
	int                                                          MaxBounces;                                        // 0x168(0x4)
	float                                                        EmbedOnFirstImpactAngle;                           // 0x16c(0x4)
	char                                                         pad0x8_90CQC[0x8];                                 // 0x170(0x8)
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TransientActorTaleService: public TaleQuestService
{
public:
	char                                                         pad0x20_FKF0X[0x20];                               // 0x60(0x20)
	TArray<class Actor*>                                         TrackedActors;                                     // 0x80(0x10)
	TArray<struct TransientActorEntry>                           MigrationEntries;                                  // 0x90(0x10)
	char                                                         pad0x10_TQ6D7[0x10];                               // 0xa0(0x10)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class CaptainsLogbookAccoladeLocalisedTextDefinitionAsset: public DataAsset
{
public:
	struct CaptainsLogbookAccoladeLocalisedTextDefinition        DefaultDefinition;                                 // 0x28(0x48)
	TArray<struct CaptainsLogbookAccoladeLocalisedTextDefinition> Definitions;                                       // 0x70(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimmingCreatureMovementInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VaultTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SpawnableItemsDataAsset: public DataAsset
{
public:
	TArray<class SpawnableItemsDataAsset*>                       AdditionalSpawnableItems;                          // 0x28(0x10)
	TArray<struct SpawnableItemCategory>                         Categories;                                        // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogCinematicCameraInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x150] - InheritedSize[0x140]
class RadialManagerInputComponent: public InputComponent
{
public:
	char                                                         pad0x10_643N7[0x10];                               // 0x140(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldEventZoneServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SceneDialoguePointWithConditional: public Object
{
public:
	class SceneDialoguePoint*                                    Point;                                             // 0x28(0x8)
	class NPCDialogConditional*                                  Conditional;                                       // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryWorldSettingsInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class IslandServiceIslandTextureProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_MWDI0[0x8];                                 // 0xb8(0x8)
	char                                                         IslandTextureSourceType;                           // 0xc0(0x1)
	char                                                         pad0x1f_8KXNL[0x1f];                               // 0xc1(0x1f)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InTemporaryStaticObstacle: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_2XB9C[0x4];                                 // 0x174(0x4)
};


// Size 0x90 (Full Size[0x690] - InheritedSize[0x600]
class DynamicFlowComponent: public StaticMeshComponent
{
public:
	class Texture2D*                                             FlowTexture;                                       // 0x600(0x8)
	int                                                          TextureSizeX;                                      // 0x608(0x4)
	int                                                          TextureSizeY;                                      // 0x60c(0x4)
	float                                                        UpdateCullDistance;                                // 0x610(0x4)
	struct Vector2D                                              FlowUVScrollSpeed;                                 // 0x614(0x8)
	char                                                         pad0x4_VSK6W[0x4];                                 // 0x61c(0x4)
	struct Vector4                                               WaterDepthDistances;                               // 0x620(0x10)
	float                                                        NearFadeStart;                                     // 0x630(0x4)
	float                                                        NearFadeRange;                                     // 0x634(0x4)
	struct Vector2D                                              FlowScale;                                         // 0x638(0x8)
	struct Vector2D                                              FlowBias;                                          // 0x640(0x8)
	char                                                         pad0x8_21YZT[0x8];                                 // 0x648(0x8)
	struct Vector4                                               BlurCentreWeights;                                 // 0x650(0x10)
	struct Vector4                                               BlurEdgeWeights;                                   // 0x660(0x10)
	struct Vector4                                               FadeWeights;                                       // 0x670(0x10)
	class TextureRenderTarget2D*                                 RenderTargetTexture;                               // 0x680(0x8)
	class TextureRenderTarget2D*                                 RenderTargetTexturePingPong;                       // 0x688(0x8)
};


// Size 0x720 (Full Size[0x748] - InheritedSize[0x28]
class FaunaAnimationData: public DataAsset
{
public:
	struct FaunaAnimationStructure                               FaunaAnimations;                                   // 0x28(0x720)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class FishingMiniGameSetupDataAsset: public DataAsset
{
public:
	float                                                        EscapeRadiusAtMaxDistance;                         // 0x28(0x4)
	float                                                        EscapeRadiusAtMinDistance;                         // 0x2c(0x4)
	float                                                        PercentageOfEscapeRadiusToKeepFishFacingOutwards;  // 0x30(0x4)
	float                                                        AwayEscapeSectorAngleAtMaxDistance;                // 0x34(0x4)
	float                                                        AwayEscapeSectorAngleAtMinDistance;                // 0x38(0x4)
	float                                                        LeftRightEscapeSectorAngleAtMaxDistance;           // 0x3c(0x4)
	float                                                        LeftRightEscapeSectorAngleAtMinDistance;           // 0x40(0x4)
	char                                                         pad0x4_7NIV4[0x4];                                 // 0x44(0x4)
	struct WeightedProbabilityRangeOfRanges                      TimeToNextAngleChangeWithinSector;                 // 0x48(0x30)
	struct WeightedProbabilityRangeOfRanges                      FakeOutDistancePercentage;                         // 0x78(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerActivityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AdjustableWaterLevelPuzzleInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class StormParams: public DataAsset
{
public:
	struct FixedStepInterpCurveVector2D                          PositionCurve;                                     // 0x28(0x18)
	TArray<char>                                                 StormType;                                         // 0x40(0x10)
	class UClass*                                                StormClass;                                        // 0x50(0x8)
	TArray<struct StormStrengthType>                             StormTypeSettings;                                 // 0x58(0x10)
	float                                                        StormTypeStepTime;                                 // 0x68(0x4)
	float                                                        StormTypeBlendTime;                                // 0x6c(0x4)
	float                                                        CycleTime;                                         // 0x70(0x4)
	char                                                         pad0x4_K2Q9G[0x4];                                 // 0x74(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LiquidLauncherChargeInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class ShipRowboatPersistenceComponent: public ActorComponent
{
public:
	char                                                         pad0x8_VVKZ2[0x8];                                 // 0xb8(0x8)
	struct Transform                                             RelativeOffsetFromMountpointToSpawnRowboatUnobstructed; // 0xc0(0x30)
	TArray<class Class*>                                         CachedRowboatTypeEntitlements;                     // 0xf0(0x10)
	char                                                         pad0x50_F3NL9[0x50];                               // 0x100(0x50)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class WaitForVaultCompletionStep: public TaleQuestStep
{
public:
	class WaitForVaultCompletionStepDesc*                        Desc;                                              // 0x98(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToFoodNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ShadowAIFormProximityPlayerTracker: public AIPlayerTracker
{
public:
	char                                                         pad0x28_R7740[0x28];                               // 0x28(0x28)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class VoyageModuleSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  QuestsConfigAsset;                                 // 0x38(0x10)
	TArray<struct EmergentVoyageSourceIconInfo>                  EmergentVoyageIconInfos;                           // 0x48(0x10)
	int                                                          NumVoyagesInAntiRepetitionHistory;                 // 0x58(0x4)
	char                                                         pad0x4_E34R0[0x4];                                 // 0x5c(0x4)
};


// Size 0x180 (Full Size[0x5c0] - InheritedSize[0x440]
class SwimmingCreatureAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x18_GHLOL[0x18];                               // 0x440(0x18)
	float                                                        Speed;                                             // 0x458(0x4)
	float                                                        PlayRate;                                          // 0x45c(0x4)
	float                                                        Direction;                                         // 0x460(0x4)
	char                                                         pad0x4_XAF62[0x4];                                 // 0x464(0x4)
	class AnimMontage*                                           DeathMontage;                                      // 0x468(0x8)
	class AnimMontage*                                           SinkingMontage;                                    // 0x470(0x8)
	class AnimSequenceBase*                                      DefaultImpactAnim;                                 // 0x478(0x8)
	TArray<struct SwimmingCreatureImpactAnimData>                ImpactAnims;                                       // 0x480(0x10)
	float                                                        MaxAccelerationForSpeed;                           // 0x490(0x4)
	float                                                        MaxPitchForSpeed;                                  // 0x494(0x4)
	float                                                        MaxYawForDirection;                                // 0x498(0x4)
	float                                                        SpeedSmoothingFactor;                              // 0x49c(0x4)
	float                                                        DirectionSmoothingFactor;                          // 0x4a0(0x4)
	float                                                        AccelerationSmoothingFactor;                       // 0x4a4(0x4)
	float                                                        YawSmoothingFactor;                                // 0x4a8(0x4)
	float                                                        NetworkAnimationBlendTime;                         // 0x4ac(0x4)
	TArray<class Object*>                                        RPCPlayableMontages;                               // 0x4b0(0x10)
	TArray<class AnimSequenceBase*>                              NetworkPlayableAnimations;                         // 0x4c0(0x10)
	TArray<struct AIStrategySpeedOverride>                       StrategySpeedOverrides;                            // 0x4d0(0x10)
	TArray<class Class*>                                         HitReactBlockingAIStrategies;                      // 0x4e0(0x10)
	class AnimMontage*                                           CurrentlyPlayingNetworkMontage;                    // 0x4f0(0x8)
	char                                                         pad0xa0_Z2BMW[0xa0];                               // 0x4f8(0xa0)
	class SwimmingCreatureMovementComponent*                     MovementComponent;                                 // 0x598(0x8)
	char                                                         pad0x18_K3871[0x18];                               // 0x5a0(0x18)
	class NetworkSyncedAnimationComponent*                       NetworkSyncedAnimationComponent;                   // 0x5b8(0x8)
};


// Size 0x48 (Full Size[0x3e8] - InheritedSize[0x3a0]
class SharkActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	struct AISpawnActionStateParams                              AISpawnParams;                                     // 0x3a0(0x10)
	struct AISwimmingCreatureDeadActionStateParams               AIDeadParams;                                      // 0x3b0(0x20)
	char                                                         pad0x18_9QR80[0x18];                               // 0x3d0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipSpawnerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocalDisturbanceFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterOrientationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerBuriedItemServiceInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class ShantySelectionComponent: public ActorComponent
{
public:
	char                                                         pad0x58_62Z44[0x58];                               // 0xb8(0x58)
	class ShantyItemDesc*                                        SelectedShanty;                                    // 0x110(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PacingInterface: public Interface
{
public:
};


// Size 0x198 (Full Size[0x260] - InheritedSize[0xc8]
class KnockbackAIAbilityParams: public AthenaAIAbilityParams
{
public:
	struct ExplosionInfo                                         ExplosionInfo;                                     // 0xc8(0x198)
};


// Size 0x330 (Full Size[0x358] - InheritedSize[0x28]
class CharacterAudioComponentParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                CharacterAudioPool;                                // 0x28(0x8)
	class WwiseEvent*                                            CausedDamageAudioEvent;                            // 0x30(0x8)
	class WwiseEvent*                                            CausedDamageAudioEventNonMusic;                    // 0x38(0x8)
	class WwiseEvent*                                            CausedAIShipDamageAudioEvent;                      // 0x40(0x8)
	class WwiseEvent*                                            CausedAggressiveGhostShipDamageAudioEvent;         // 0x48(0x8)
	class WwiseEvent*                                            ReapersTributeShipCausedCannonDamageAudioEvent;    // 0x50(0x8)
	class WwiseEvent*                                            CharacterDeadAudioEvent;                           // 0x58(0x8)
	class WwiseEvent*                                            KilledCharacterAudioEvent;                         // 0x60(0x8)
	class WwiseEvent*                                            KilledCharacterSfxEvent;                           // 0x68(0x8)
	class WwiseEvent*                                            KilledCharacterAudioAssistSfxEvent;                // 0x70(0x8)
	class WwiseEvent*                                            LocalPlayerFireStart;                              // 0x78(0x8)
	class WwiseEvent*                                            LocalPlayerFireStop;                               // 0x80(0x8)
	class WwiseEvent*                                            RemotePlayerFireStart;                             // 0x88(0x8)
	class WwiseEvent*                                            RemotePlayerFireStop;                              // 0x90(0x8)
	class WwiseEvent*                                            LocalPlayerStunStart;                              // 0x98(0x8)
	class WwiseEvent*                                            LocalPlayerStunStop;                               // 0xa0(0x8)
	class WwiseEvent*                                            RemotePlayerStunStart;                             // 0xa8(0x8)
	class WwiseEvent*                                            RemotePlayerStunStop;                              // 0xb0(0x8)
	class WwiseEvent*                                            LocalPlayerExtinguished;                           // 0xb8(0x8)
	class WwiseEvent*                                            RemotePlayerExtinguished;                          // 0xc0(0x8)
	struct StateCategoryGroup                                    CharacterState;                                    // 0xc8(0x20)
	class WwiseEvent*                                            PlayCharacterRespawn;                              // 0xe8(0x8)
	struct FName                                                 CharacterStateDead;                                // 0xf0(0x8)
	struct FName                                                 CharacterStateFall;                                // 0xf8(0x8)
	struct FName                                                 CharacterStateStun;                                // 0x100(0x8)
	struct FName                                                 CharacterStateFire;                                // 0x108(0x8)
	struct FName                                                 CharacterStateDefault;                             // 0x110(0x8)
	struct FName                                                 CharacterStateTeleporting;                         // 0x118(0x8)
	struct FName                                                 CharacterStateSleeping;                            // 0x120(0x8)
	class WwiseEvent*                                            PlayPlayerVengeance;                               // 0x128(0x8)
	class WwiseEvent*                                            StopPlayerVengeance;                               // 0x130(0x8)
	class WwiseEvent*                                            PlayPlayerVengeanceFinished;                       // 0x138(0x8)
	struct FName                                                 PlayerVengeanceRTPC;                               // 0x140(0x8)
	float                                                        PlayerVengeanceMaxRtpc;                            // 0x148(0x4)
	char                                                         pad0x4_8GYE3[0x4];                                 // 0x14c(0x4)
	TArray<struct DamageTypeToAudio>                             ExplosionSoundEvents;                              // 0x150(0x10)
	class WwiseEvent*                                            PlayPlayerSlidingDownLadder;                       // 0x160(0x8)
	class WwiseEvent*                                            StopPlayerSlidingDownLadder;                       // 0x168(0x8)
	struct FName                                                 LadderSlideSpeedRtpc;                              // 0x170(0x8)
	class WwiseEvent*                                            LadderUse;                                         // 0x178(0x8)
	class WwiseEvent*                                            CannonUse;                                         // 0x180(0x8)
	class WwiseEvent*                                            WheelUse;                                          // 0x188(0x8)
	class WwiseEvent*                                            SailManipulatorUse;                                // 0x190(0x8)
	class WwiseEvent*                                            CharacterTorsoEnteredWater;                        // 0x198(0x8)
	class WwiseEvent*                                            CharacterTorsoExitedWater;                         // 0x1a0(0x8)
	class WwiseEvent*                                            CharacterLeftWaterToBoatLadder;                    // 0x1a8(0x8)
	struct FName                                                 PlayerSpeedRtpc;                                   // 0x1b0(0x8)
	float                                                        PlayerSpeedRtpcMin;                                // 0x1b8(0x4)
	float                                                        PlayerSpeedRtpcMax;                                // 0x1bc(0x4)
	struct FName                                                 PlayerLadderWaterExitSpeedRtpc;                    // 0x1c0(0x8)
	float                                                        PlayerLadderWaterExitSpeedMin;                     // 0x1c8(0x4)
	float                                                        PlayerLadderWaterExitSpeedMax;                     // 0x1cc(0x4)
	struct FName                                                 BoatSpeedForSeaRocksAmplificationRtpc;             // 0x1d0(0x8)
	float                                                        BoatSpeedForSeaRocksMax;                           // 0x1d8(0x4)
	struct FName                                                 BrokeLegSwitchGroupName;                           // 0x1dc(0x8)
	struct FName                                                 BrokeLegSwitch;                                    // 0x1e4(0x8)
	struct FName                                                 HealedLegSwitch;                                   // 0x1ec(0x8)
	struct FName                                                 FallDamageRTPC;                                    // 0x1f4(0x8)
	char                                                         pad0x4_UCTC2[0x4];                                 // 0x1fc(0x4)
	TArray<struct HealthChangeAudio>                             HealthChangeSfx;                                   // 0x200(0x10)
	class WwiseEvent*                                            LocalPlayerTeleportPlay;                           // 0x210(0x8)
	class WwiseEvent*                                            LocalPlayerTeleportStop;                           // 0x218(0x8)
	class AudioSpaceDataAsset*                                   LargeShipMapDeck;                                  // 0x220(0x8)
	class AudioSpaceDataAsset*                                   LargeShipBrigDeck;                                 // 0x228(0x8)
	class AudioSpaceDataAsset*                                   LargeShipCaptainsCabin;                            // 0x230(0x8)
	class AudioSpaceDataAsset*                                   IslandTavern;                                      // 0x238(0x8)
	class AudioSpaceDataAsset*                                   IslandCave;                                        // 0x240(0x8)
	float                                                        SmallestEnclosedRatioToTriggerCave;                // 0x248(0x4)
	char                                                         PredominantCaveSurface;                            // 0x24c(0x1)
	char                                                         pad0x3_KI4JS[0x3];                                 // 0x24d(0x3)
	float                                                        LargestCaveSizeMetersSquared;                      // 0x250(0x4)
	float                                                        SmallestCaveSizeMetersSquared;                     // 0x254(0x4)
	struct FName                                                 CaveSizeRtpcName;                                  // 0x258(0x8)
	float                                                        SmallestEnclosedRatioToTriggerCaveMusicNode;       // 0x260(0x4)
	float                                                        LandingEventCooldownTime;                          // 0x264(0x4)
	class WwiseEvent*                                            PortableHarpoonGrappleStarted;                     // 0x268(0x8)
	class WwiseEvent*                                            PortableHarpoonGrappleEnded;                       // 0x270(0x8)
	float                                                        FogPenetrationAudioThresholdMin;                   // 0x278(0x4)
	float                                                        FogPenetrationAudioThresholdMax;                   // 0x27c(0x4)
	struct FName                                                 FogDensityRTPC;                                    // 0x280(0x8)
	TArray<struct FogTypeToAudio>                                FogTypeSfx;                                        // 0x288(0x10)
	class WwiseEvent*                                            TrapTriggeredEvent;                                // 0x298(0x8)
	class WwiseEvent*                                            EmoteCameraStart;                                  // 0x2a0(0x8)
	class WwiseEvent*                                            EmoteCameraStop;                                   // 0x2a8(0x8)
	class WwiseEvent*                                            ReviveSuccessful;                                  // 0x2b0(0x8)
	class WwiseEvent*                                            OtherPlayers_BodyEvaporates;                       // 0x2b8(0x8)
	class WwiseEvent*                                            StartSleepingEvent;                                // 0x2c0(0x8)
	class WwiseEvent*                                            StopSleepingEvent;                                 // 0x2c8(0x8)
	class WwiseEvent*                                            StartSleepingWithoutFartingEvent;                  // 0x2d0(0x8)
	class WwiseEvent*                                            StopSleepingWithoutFartingEvent;                   // 0x2d8(0x8)
	struct FName                                                 GenderSwitchGroupName;                             // 0x2e0(0x8)
	struct FName                                                 GenderSwitchFemale;                                // 0x2e8(0x8)
	struct FName                                                 GenderSwitchMale;                                  // 0x2f0(0x8)
	class WwiseEvent*                                            AimAssistDirectlyOverTargetStart;                  // 0x2f8(0x8)
	class WwiseEvent*                                            AimAssistDirectlyOverTargetStop;                   // 0x300(0x8)
	class WwiseEvent*                                            AimAssistNearTargetStart;                          // 0x308(0x8)
	class WwiseEvent*                                            AimAssistNearTargetStop;                           // 0x310(0x8)
	struct FName                                                 AimAssistPercentageAwayFromTargetRTPC;             // 0x318(0x8)
	struct FName                                                 AimAssistPercentageXOffsetRTPC;                    // 0x320(0x8)
	struct FName                                                 AimAssistPercentageYOffsetRTPC;                    // 0x328(0x8)
	class WwiseEvent*                                            PlayLensZoom;                                      // 0x330(0x8)
	class WwiseEvent*                                            StopLensZoom;                                      // 0x338(0x8)
	class WwiseEvent*                                            PlayLensRetract;                                   // 0x340(0x8)
	class WwiseEvent*                                            PlayZoomLoop;                                      // 0x348(0x8)
	class WwiseEvent*                                            StopZoomLoop;                                      // 0x350(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapTableTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x80] - InheritedSize[0x70]
class BTService_TryToShootFireballCannon: public BTService
{
public:
	float                                                        MaximumDistanceFromTargetToShoot;                  // 0x70(0x4)
	float                                                        MinimumDistanceFromTargetToShoot;                  // 0x74(0x4)
	float                                                        TargetDetectionFrontalConeHalfAngleDegrees;        // 0x78(0x4)
	char                                                         pad0x4_JQFOU[0x4];                                 // 0x7c(0x4)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class PlayerStreamedLevelEntrance: public Actor
{
public:
	class BoxComponent*                                          TriggerZoneComponent;                              // 0x3a0(0x8)
	TArray<class SpawnLocation*>                                 StreamedLevelExitSpawnPoints;                      // 0x3a8(0x10)
	char                                                         StreamedLevelIdentity;                             // 0x3b8(0x1)
	char                                                         TeleportItemMode;                                  // 0x3b9(0x1)
	char                                                         pad0x1e_0Y8V8[0x1e];                               // 0x3ba(0x1e)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class PerformancePetSpawnerActor: public Actor
{
public:
	class PerformancePetSpawnDefinitionsDataAsset*               PerformancePetSpawnDefinitionsDataAsset;           // 0x3a0(0x8)
	class Actor*                                                 ShipActor;                                         // 0x3a8(0x8)
	TArray<struct SpawnedPetData>                                SpawnedPets;                                       // 0x3b0(0x10)
	class AIPetsOnDemandSpawner*                                 Spawner;                                           // 0x3c0(0x8)
	class Actor*                                                 OverridePetOwner;                                  // 0x3c8(0x8)
	char                                                         pad0x8_XOCKY[0x8];                                 // 0x3d0(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class DebugCreateAndPlayNpcAnimationStepDesc: public TaleQuestStepDesc
{
public:
	class UClass*                                                NpcToSpawn;                                        // 0x80(0x8)
	struct StringAssetReference                                  SpawnLocation;                                     // 0x88(0x10)
	struct StringAssetReference                                  PlaceableReaction;                                 // 0x98(0x10)
	class PlayNpcAnimationResource*                              AnimationParameters;                               // 0xa8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemAnimationStoreId: public AnimationDataStoreId
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class TunnelPresenterObjectBase: public Object
{
public:
	class UClass*                                                ShipSize;                                          // 0x28(0x8)
	char                                                         pad0x20_C2SGD[0x20];                               // 0x30(0x20)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VaultMaterialSetDataAsset: public DataAsset
{
public:
	TArray<struct BlockDecalMaterials>                           BlockConfigurations;                               // 0x28(0x10)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class StorageContainerContentTypeSelector: public DataAsset
{
public:
	struct WeightedProbabilityRange                              NumSpawners;                                       // 0x28(0x20)
	int                                                          MinDifferentSpawners;                              // 0x48(0x4)
	int                                                          MaxDifferentSpawners;                              // 0x4c(0x4)
	class StorageContainerSpawnerCount*                          NumSpawnerRef;                                     // 0x50(0x8)
	TArray<struct StorageContainerContentTypeSelectorEntry>      ContentSpawners;                                   // 0x58(0x10)
	class StorageContainerContentSpawner*                        DebugSpawner;                                      // 0x68(0x8)
	class StorageContainerContentTypeSelectorEntries*            SelectorEntries;                                   // 0x70(0x8)
	TArray<class StorageContainerSpecialTypeSelectorEntries*>    SpecialEntries;                                    // 0x78(0x10)
	struct SpawnerTypeMappings                                   SpawnerTypeMappings;                               // 0x88(0x10)
	char                                                         pad0x8_6FP1S[0x8];                                 // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PrimitiveComponentTestFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xb0 (Full Size[0x450] - InheritedSize[0x3a0]
class Cluster: public Actor
{
public:
	TArray<class ClusterStaticMeshComponent*>                    ClusterStaticMeshes;                               // 0x3a0(0x10)
	TArray<class StaticMeshComponent*>                           AllComponents;                                     // 0x3b0(0x10)
	bool                                                         DoesContainDecorator;                              // 0x3c0(0x1)
	char                                                         pad0x3_OX0SG[0x3];                                 // 0x3c1(0x3)
	struct PlayerStat                                            OnPickedUpStat;                                    // 0x3c4(0x4)
	char                                                         pad0x88_UMCSA[0x88];                               // 0x3c8(0x88)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class IslandFaunaSettings: public DataAsset
{
public:
	int                                                          IslandPopulatedChance;                             // 0x28(0x4)
	char                                                         pad0x4_KXGOP[0x4];                                 // 0x2c(0x4)
	TArray<struct IslandFaunaPopulatedChance>                    IslandPopulatedChanceOverride;                     // 0x30(0x10)
	struct WeightedProbabilityRange                              NumberOfFaunaTypes;                                // 0x40(0x20)
	TArray<struct FaunaTypeSettings>                             FaunaTypeSettings;                                 // 0x60(0x10)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponsePlayAudioOneShotOnLocalClient: public StatusResponse
{
public:
	class WwiseEvent*                                            OneShotAudioEvent;                                 // 0x38(0x8)
};


// Size 0xb0 (Full Size[0x450] - InheritedSize[0x3a0]
class TestLadderActor: public Actor
{
public:
	char                                                         pad0x48_NMPZ3[0x48];                               // 0x3a0(0x48)
	class SplineComponent*                                       OnTopSplineComponent;                              // 0x3e8(0x8)
	class SplineComponent*                                       OffTopSplineComponent;                             // 0x3f0(0x8)
	class PhysicalMaterial*                                      LadderPhysicsMaterial;                             // 0x3f8(0x8)
	char                                                         pad0x50_HWWAC[0x50];                               // 0x400(0x50)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class ExperienceRefreshComponent: public ActorComponent
{
public:
	char                                                         pad0x20_CPJW2[0x20];                               // 0xb8(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerInputInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class CosmeticVfxComponent: public ActorComponent
{
public:
	char                                                         pad0x8_KE6AK[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class UniversalDescriptorNavigateDownInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatusResponseAIShipSetMaxSpeedMultiplier: public StatusResponse
{
public:
	float                                                        MaxSpeedMultiplier;                                // 0x38(0x4)
	char                                                         pad0xc_8E02O[0xc];                                 // 0x3c(0xc)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotify_DockableCutscene: public AnimNotify
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerAnimationSpawnDataProviderInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipHullDamageDataAsset: public DataAsset
{
public:
	struct ShipHullDamageParams                                  DamageParams;                                      // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EntitlementsAsset: public DataAsset
{
public:
	TArray<struct StringClassReference>                          Entitlements;                                      // 0x28(0x10)
};


// Size 0xa0 (Full Size[0x940] - InheritedSize[0x8a0]
class ShipPointParticleComponent: public ParticleSystemComponent
{
public:
	TArray<char>                                                 ValidShipRegions;                                  // 0x898(0x10)
	TArray<struct Vector>                                        SpawnPts;                                          // 0x8a8(0x10)
	struct FName                                                 SpawnRateParam;                                    // 0x8b8(0x8)
	struct Vector2D                                              ParamValueRange;                                   // 0x8c0(0x8)
	struct Vector2D                                              TimePerEmitMin;                                    // 0x8c8(0x8)
	struct Vector2D                                              TimePerEmitMax;                                    // 0x8d0(0x8)
	char                                                         ParamType;                                         // 0x8d8(0x1)
	char                                                         pad0x67_SJA8Q[0x67];                               // 0x8d9(0x67)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class NPCConversationParticipantComponent: public ActorComponent
{
public:
	char                                                         pad0x8_PZ5B1[0x8];                                 // 0xb8(0x8)
	TArray<class Class*>                                         SupportedConversationTypes;                        // 0xc0(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyFReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterCollisionRadiusProviderInterface: public Interface
{
public:
};


// Size 0x1c8 (Full Size[0x280] - InheritedSize[0xb8]
class DrunkennessComponent: public ActorComponent
{
public:
	char                                                         pad0x8_WO3Z6[0x8];                                 // 0xb8(0x8)
	class DrunkennessComponentPublicData*                        PublicData;                                        // 0xc0(0x8)
	char                                                         pad0x170_VEZMH[0x170];                             // 0xc8(0x170)
	float                                                        TargetDrunkenness;                                 // 0x238(0x4)
	char                                                         pad0x4_T83O5[0x4];                                 // 0x23c(0x4)
	float                                                        CurrentDrunkenness;                                // 0x240(0x4)
	char                                                         pad0x4_LM5A7[0x4];                                 // 0x244(0x4)
	float                                                        RemainingAmountToSoberUpDueToWaterSplash;          // 0x248(0x4)
	char                                                         pad0xc_G0WMO[0xc];                                 // 0x24c(0xc)
	struct Status                                                AlcoholDrunkennessStatus;                          // 0x258(0x20)
	struct FName                                                 VomitVFXType;                                      // 0x278(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageProposalAssetSelector: public DataAsset
{
public:
	TArray<struct VoyageProposalCompanyAssetData>                Companies;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NonCrewVoiceMuteStateToggleNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatusResponseAINamedControllerParamHealthChange: public StatusResponse
{
public:
	char                                                         HealthChangedReason;                               // 0x38(0x1)
	char                                                         pad0x3_9C7D0[0x3];                                 // 0x39(0x3)
	struct FName                                                 AINamedControllerParam;                            // 0x3c(0x8)
	char                                                         pad0x4_GD5E3[0x4];                                 // 0x44(0x4)
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class ContestSpawnLocationsComponent: public ActorComponent
{
public:
	char                                                         pad0x50_EXHB3[0x50];                               // 0xb8(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimAttackableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CoherentUIGTAssetContainer: public DataAsset
{
public:
	TArray<class Texture2D*>                                     TextureAssets;                                     // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyANotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_FlushQueuedEngageEnemyMethod: public BTTaskNode
{
public:
};


// Size 0x198 (Full Size[0x1d8] - InheritedSize[0x40]
class KnockbackAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	struct ExplosionInfo                                         ExplosionInfo;                                     // 0x40(0x198)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SeaRockDataAsset: public DataAsset
{
public:
	TArray<struct SeaRock>                                       SeaRocks;                                          // 0x28(0x10)
	TArray<struct SeaRock>                                       UnderseaRocks;                                     // 0x38(0x10)
};


// Size 0x30 (Full Size[0x650] - InheritedSize[0x620]
class SplineWithEmitterComponent: public SplineComponent
{
public:
	class WwiseObjectPoolWrapper*                                SplineAudioPool;                                   // 0x618(0x8)
	class WwiseEvent*                                            LoopingSoundPlayEvent;                             // 0x620(0x8)
	class WwiseEvent*                                            LoopingSoundStopEvent;                             // 0x628(0x8)
	class WwiseEmitterComponent*                                 WwiseEmitterComponent;                             // 0x630(0x8)
	char                                                         pad0x18_8YDX9[0x18];                               // 0x638(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaPlayerCharacterTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ChainLightningDeveloperSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  ChainLightningVisualActorSettingsAsset;            // 0x38(0x10)
};


// Size 0x1b0 (Full Size[0x440] - InheritedSize[0x290]
class WalkableEmoteInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
	char                                                         pad0x1b0_PZIIY[0x1b0];                             // 0x290(0x1b0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ashen_dragon_adr_figurehead_01_a: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class HitRegSnapshotActor: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_HellishMermaid: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StarChartStarClusterInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RammableExplosiveDataAsset: public DataAsset
{
public:
	TArray<struct RammableExplosiveEntry>                        ExplosiveSpeedParams;                              // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCConversationServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaGameEngineSettingsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentKeyPressNotificationReleasedInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StreamingTelemetryProviderInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class GlobalVoyageTriggerActor: public Actor
{
public:
	class VoyageDescDataAsset*                                   VoyageDesc;                                        // 0x3a0(0x8)
	char                                                         pad0x48_4FISK[0x48];                               // 0x3a8(0x48)
};


// Size 0x58 (Full Size[0xf0] - InheritedSize[0x98]
class WaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStep: public TaleQuestStep
{
public:
	char                                                         pad0x58_XGEES[0x58];                               // 0x98(0x58)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogTreeDataOptions: public DataAsset
{
public:
	TArray<struct NPCDialogDataForCondition>                     OverrideDataForCondition;                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestAddTemporaryEntitlementStepDesc: public TaleQuestStepDesc
{
public:
	TArray<Class>                                                Entitlements;                                      // 0x80(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateGeneratorServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaDebugSettings: public Object
{
public:
	struct StringAssetReference                                  Dioramas;                                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialInventoryActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialogueCustomEmitterProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WatercraftTrackerInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RewardDefinitionAsset: public DataAsset
{
public:
	TArray<struct RewardDefinition>                              RewardDefinitions;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandmarkReactionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_NamedActor: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitDetectionInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WieldableBookPageBundle: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          Pages;                                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseSuperSoaked: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldResourceRegistryTestLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x398 (Full Size[0x450] - InheritedSize[0xb8]
class FrontendPirateLogComponent: public ActorComponent
{
public:
	char                                                         pad0xd8_7XRBD[0xd8];                               // 0xb8(0xd8)
	struct PirateIdentity                                        PirateIdentity;                                    // 0x190(0x78)
	struct PlayerCompanyProgressCache                            CompanyProgressCache;                              // 0x208(0x68)
	struct PlayerCompanyProgressCache                            GuildProgressCache;                                // 0x270(0x68)
	struct PlayerEntitlements                                    Entitlements;                                      // 0x2d8(0x120)
	char                                                         pad0x58_287JD[0x58];                               // 0x3f8(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileServiceInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class MeleeWeaponDataAsset: public DataAsset
{
public:
	float                                                        PlayerAttackSelectionTime;                         // 0x28(0x4)
	char                                                         pad0x4_81DKG[0x4];                                 // 0x2c(0x4)
	class MeleeWeaponMovementSpeedConfig*                        MovementSpeedConfig;                               // 0x30(0x8)
	TArray<class MeleeAttackDataAsset*>                          ComboAttacks;                                      // 0x38(0x10)
	class MeleeAttackDataAsset*                                  HeavyAttack;                                       // 0x48(0x8)
	float                                                        HeavyAttackChargeDuration;                         // 0x50(0x4)
	char                                                         pad0x4_Z5MW7[0x4];                                 // 0x54(0x4)
	TArray<struct MeleeWeaponSpecialAttackData>                  SpecialAttacks;                                    // 0x58(0x10)
	struct ItemBlockingParameters                                BlockingParameters;                                // 0x68(0x4)
	char                                                         pad0x4_WT9RB[0x4];                                 // 0x6c(0x4)
	class PhysicalMaterial*                                      BlockingPhysicalMaterial;                          // 0x70(0x8)
	char                                                         BlockingMovementSpeed;                             // 0x78(0x1)
	char                                                         pad0x3_RWC12[0x3];                                 // 0x79(0x3)
	float                                                        HitBlockingMovementDisableTime;                    // 0x7c(0x4)
	class ParticleSystem*                                        TrailParticleSystem_FP;                            // 0x80(0x8)
	class ParticleSystem*                                        TrailParticleSystem_TP;                            // 0x88(0x8)
	struct FName                                                 TrailStartSocketName;                              // 0x90(0x8)
	struct FName                                                 TrailEndSocketName;                                // 0x98(0x8)
	char                                                         TrailWidthMode;                                    // 0xa0(0x1)
	char                                                         pad0x3_ZPVIU[0x3];                                 // 0xa1(0x3)
	float                                                        TrailWidth;                                        // 0xa4(0x4)
	float                                                        PerceptionHearingRange;                            // 0xa8(0x4)
	char                                                         pad0x4_70OP5[0x4];                                 // 0xac(0x4)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class HideoutExit: public Actor
{
public:
	class BoxComponent*                                          TriggerZoneComponent;                              // 0x3a0(0x8)
	char                                                         pad0x30_GT91G[0x30];                               // 0x3a8(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCConversationParticipantType: public Object
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseToggleWheelLock: public StatusResponse
{
public:
	char                                                         CurseTag;                                          // 0x38(0x1)
	char                                                         pad0x3_K6MWC[0x3];                                 // 0x39(0x3)
	float                                                        AngleThreshold;                                    // 0x3c(0x4)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class TaleQuestSetCanRevivableAIEnterRevivableStateOnDeathDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    InRevivableAI;                                     // 0x80(0x30)
	bool                                                         InCanAIBeRevived;                                  // 0xb0(0x1)
	char                                                         pad0x7_PX8AR[0x7];                                 // 0xb1(0x7)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class NamedNPCComponent: public ActorComponent
{
public:
	char                                                         pad0x8_4CPCB[0x8];                                 // 0xb8(0x8)
	struct FName                                                 NPCName;                                           // 0xc0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LiquidLauncherControllerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismResetInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class LoadoutCostService: public Actor
{
public:
	char                                                         pad0x20_CT24B[0x20];                               // 0x3a0(0x20)
	struct SaveToLoadoutCosts                                    SaveToLoadoutCosts;                                // 0x3c0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCustomizationLoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableStormServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageRewardDataAsset: public DataAsset
{
public:
	TArray<struct PerChapterRankRewardEntry>                     RankEntries;                                       // 0x28(0x10)
};


// Size 0x80 (Full Size[0xe0] - InheritedSize[0x60]
class TunnelOfTheDamnedTaleService: public TaleQuestService
{
public:
	char                                                         pad0x80_XIUGI[0x80];                               // 0x60(0x80)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AthenaAnimationUndoRepairDataAsset: public DataAsset
{
public:
	struct StringAssetReference                                  UndoRepairInto;                                    // 0x28(0x10)
	struct StringAssetReference                                  UndoRepairLoop;                                    // 0x38(0x10)
	class UClass*                                                UndoRepairStateId;                                 // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory: public Object
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleItemNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AirPocketStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsUsingCannonInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class WatermarkComponent: public ActorComponent
{
public:
	char                                                         pad0x80_5R06U[0x80];                               // 0xb8(0x80)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class TradeRoute: public Actor
{
public:
	struct StringAssetReference                                  TradeRouteAssetReference;                          // 0x3a0(0x10)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class StatusResponseScreenSpaceParticles: public StatusResponse
{
public:
	class Object*                                                ParticleSystem;                                    // 0x38(0x8)
	bool                                                         DoesVFXTimeOut;                                    // 0x40(0x1)
	bool                                                         AdjustVFXDependingOnFOV;                           // 0x41(0x1)
	char                                                         pad0x6_8YIZ8[0x6];                                 // 0x42(0x6)
	class CurveFloat*                                            FOVAdjustScalarMultiplierCurve;                    // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimmingMovementInterface: public Interface
{
public:
};


// Size 0xe8 (Full Size[0x130] - InheritedSize[0x48]
class AIShipPlayerTracker: public AISpawnerPlayerTracker
{
public:
	char                                                         pad0xe8_J36Y8[0xe8];                               // 0x48(0xe8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseSailDynamicsDesc: public DataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AtmosphericPressureServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x2b8] - InheritedSize[0x288]
class BaitRadialActivationInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x30_DTVL3[0x30];                               // 0x288(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AttackAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class OnItemWieldedComponent: public ActorComponent
{
public:
	char                                                         pad0x80_I6WJJ[0x80];                               // 0xb8(0x80)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ChainLightningSettingsAsset: public DataAsset
{
public:
	struct ChainLightningParameters                              ChainLightningParameters;                          // 0x28(0x20)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class NetProxy: public Actor
{
public:
	char                                                         pad0x10_Z1OTI[0x10];                               // 0x3a0(0x10)
	class Actor*                                                 OwningActor;                                       // 0x3b0(0x8)
	class StaticMeshComponent*                                   Mesh;                                              // 0x3b8(0x8)
	float                                                        MinimumNetRelevancyDistanceFraction;               // 0x3c0(0x4)
	float                                                        DepthCutOffForNonReplication;                      // 0x3c4(0x4)
	char                                                         pad0x8_91E87[0x8];                                 // 0x3c8(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ShipEntitlementProcessingPolicy: public Object
{
public:
	char                                                         pad0x8_I62N9[0x8];                                 // 0x28(0x8)
	TArray<class Class*>                                         AcceptedEntitlements;                              // 0x30(0x10)
	TArray<class Class*>                                         AcceptedCategories;                                // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ghost_ship_sails_captain_01_AHuntersCry: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x138 (Full Size[0x160] - InheritedSize[0x28]
class PlayerBuriedItemServiceDataAsset: public DataAsset
{
public:
	class PopUpMessageDesc*                                      TreasureDiscoveredMessage;                         // 0x28(0x8)
	class PopUpMessageDesc*                                      TreasureDiscoveredByYouMessage;                    // 0x30(0x8)
	class PopUpMessageDesc*                                      TreasureRetrievedMessage;                          // 0x38(0x8)
	class PopUpMessageDesc*                                      TreasureRetrievedByYouMessage;                     // 0x40(0x8)
	class PopUpMessageDesc*                                      TreasureBuriedMapAddedMessage;                     // 0x48(0x8)
	float                                                        TreasureBuriedByYouMessageDelay;                   // 0x50(0x4)
	char                                                         pad0x4_FMTSH[0x4];                                 // 0x54(0x4)
	class PopUpMessageDesc*                                      TreasureBuriedByYouMapAddedMessage;                // 0x58(0x8)
	class PopUpMessageDesc*                                      TreasureBuriedMapUpdatedMessage;                   // 0x60(0x8)
	class PopUpMessageDesc*                                      TreasureBuriedByYouMapUpdatedMessage;              // 0x68(0x8)
	class PopUpMessageDesc*                                      TreasureBuriedXNotCreatedMessage;                  // 0x70(0x8)
	class PopUpMessageDesc*                                      TreasureBuriedByYouXNotCreatedMessage;             // 0x78(0x8)
	class PopUpMessageDesc*                                      MapGiftedMessage;                                  // 0x80(0x8)
	class PopUpMessageDesc*                                      MapGiftedByYouMessage;                             // 0x88(0x8)
	class PopUpMessageDesc*                                      MapGiftedToYourCrewMessage;                        // 0x90(0x8)
	class PopUpMessageDesc*                                      MapBundleStolenVictimMessage;                      // 0x98(0x8)
	class PopUpMessageDesc*                                      MapBundleStolenVictimWasYouMessage;                // 0xa0(0x8)
	class PopUpMessageDesc*                                      MapBundleStolenPerpetratorMessage;                 // 0xa8(0x8)
	class PopUpMessageDesc*                                      MapBundleStolenPerpetratorWasYouMessage;           // 0xb0(0x8)
	class PopUpMessageDesc*                                      MapBundlePlacedOnTableMessage;                     // 0xb8(0x8)
	class PopUpMessageDesc*                                      MapBundleRetrievedMessage;                         // 0xc0(0x8)
	class PopUpMessageDesc*                                      MapBundleWasSpawnedInSunkenShip;                   // 0xc8(0x8)
	class PopUpMessageDesc*                                      MapWasAddedToTavernBoard;                          // 0xd0(0x8)
	class PopUpMessageDesc*                                      MapWasTakenFromTavernBoard;                        // 0xd8(0x8)
	TArray<char>                                                 PrioritiseUseRewardIdAsPopup;                      // 0xe0(0x10)
	class UClass*                                                PlayerBuriedItemMapItemDesc;                       // 0xf0(0x8)
	class UClass*                                                PlayerBuriedItemMapBundleItemDesc;                 // 0xf8(0x8)
	float                                                        ItemDigUpRadius;                                   // 0x100(0x4)
	char                                                         pad0x4_A1OMT[0x4];                                 // 0x104(0x4)
	TArray<struct PlayerBuriedItemServiceItemDigUpRadiusSurfaceOverride> ItemDigUpRadiusSurfaceOverride;                    // 0x108(0x10)
	float                                                        IsUndergroundLineTraceLength;                      // 0x118(0x4)
	char                                                         IsUndergroundLineTraceChannel;                     // 0x11c(0x1)
	char                                                         pad0x3_KVHME[0x3];                                 // 0x11d(0x3)
	TArray<char>                                                 IgnoreSurfaceTypes;                                // 0x120(0x10)
	int                                                          NumXsDonationCommendationThreshold;                // 0x130(0x4)
	int                                                          DailyMapLimit;                                     // 0x134(0x4)
	class PlayerBuriedItemServiceMapStorePopulatorDataAsset*     MapStorePopulatorDataAsset;                        // 0x138(0x8)
	class PlayerBuriedItemServiceHaulSizeDataAsset*              HaulSizeDataAsset;                                 // 0x140(0x8)
	float                                                        ServerShutdownCompensationRewardScalar;            // 0x148(0x4)
	float                                                        MapBundleLostByAnotherCrewCompensationRewardScalar; // 0x14c(0x4)
	float                                                        SendRewardCompensationForItemsSecondsBeforeShutdown; // 0x150(0x4)
	int                                                          NumItemsRequiredOnMapForHoardStat;                 // 0x154(0x4)
	float                                                        LineTraceHalfLength;                               // 0x158(0x4)
	char                                                         HitTestTraceChannel;                               // 0x15c(0x1)
	char                                                         pad0x3_8Q30D[0x3];                                 // 0x15d(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerActivityIconSetId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShovelDigActionStateId: public ActionStateId
{
public:
};


// Size 0x158 (Full Size[0x4f8] - InheritedSize[0x3a0]
class AllianceService: public Actor
{
public:
	char                                                         pad0x8_WWQE1[0x8];                                 // 0x3a0(0x8)
	class AllianceSettingsAsset*                                 Settings;                                          // 0x3a8(0x8)
	TArray<struct Alliance>                                      Alliances;                                         // 0x3b0(0x10)
	class AllianceServiceTelemetryComponent*                     TelemetryComponent;                                // 0x3c0(0x8)
	TArray<struct CrewAllianceJoinStatus>                        CrewAllianceJoinStatuses;                          // 0x3c8(0x10)
	char                                                         pad0x38_TBQ4Y[0x38];                               // 0x3d8(0x38)
	char                                                         pad0xe8_OYFDH[0xe8];                               // 0x410(0xe8)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class InventoryListenerMock: public Object
{
public:
	char                                                         pad0xa8_4MWBZ[0xa8];                               // 0x28(0xa8)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class BurrowEruptArea: public BurrowEruptBase
{
public:
	char                                                         BurrowState;                                       // 0x3a0(0x1)
	char                                                         pad0x7_VB20C[0x7];                                 // 0x3a1(0x7)
	class ExplosionComponent*                                    ExplosionComponent;                                // 0x3a8(0x8)
};


// Size 0x80 (Full Size[0x8c0] - InheritedSize[0x840]
class AthenaCameraComponent: public CameraComponent
{
public:
	float                                                        OffsetBlendSpeed;                                  // 0x840(0x4)
	float                                                        AboveWaterOffset;                                  // 0x844(0x4)
	float                                                        UnderWaterOffset;                                  // 0x848(0x4)
	float                                                        SubmersionDistanceBeforeSurfacing;                 // 0x84c(0x4)
	float                                                        SubmersionDistanceBeforeUnderwater;                // 0x850(0x4)
	float                                                        SubmersionDistanceBeforeUnderwaterOnShip;          // 0x854(0x4)
	bool                                                         IsInsideShipHull;                                  // 0x878(0x1)
	char                                                         pad0x3_99TIE[0x3];                                 // 0x879(0x3)
	float                                                        CurrentCameraOffset;                               // 0x87c(0x4)
	char                                                         pad0x40_Y1JRI[0x40];                               // 0x880(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConfigurableBuryableItemInterface: public Interface
{
public:
};


// Size 0x168 (Full Size[0x508] - InheritedSize[0x3a0]
class ItemInfo: public Actor
{
public:
	char                                                         pad0x20_C7ZNH[0x20];                               // 0x3a0(0x20)
	bool                                                         CanBeStoredInInventory;                            // 0x3c0(0x1)
	char                                                         pad0x7_0WIW1[0x7];                                 // 0x3c1(0x7)
	class UClass*                                                WieldableType;                                     // 0x418(0x8)
	class UClass*                                                ProxyType;                                         // 0x420(0x8)
	class WieldableItemPersistentCooldownComponent*              WieldableItemPersistenceCooldownComponent;         // 0x428(0x8)
	bool                                                         ExcludeFromMigration;                              // 0x430(0x1)
	bool                                                         IsBuriable;                                        // 0x431(0x1)
	char                                                         pad0x6_ZFK4P[0x6];                                 // 0x432(0x6)
	class ItemDesc*                                              Desc;                                              // 0x438(0x8)
	char                                                         CurrentRepresentation;                             // 0x440(0x1)
	char                                                         pad0x7_EJSG1[0x7];                                 // 0x441(0x7)
	class Actor*                                                 CurrentRepresentationInstance;                     // 0x448(0x8)
	class Actor*                                                 CurrentOwner;                                      // 0x450(0x8)
	class Actor*                                                 TutorialOwner;                                     // 0x458(0x8)
	char                                                         pad0xa1_M7E7F[0xa1];                               // 0x460(0xa1)
	bool                                                         DoNotConsiderForMigrationGather;                   // 0x501(0x1)
	char                                                         pad0x1_H7LAJ[0x1];                                 // 0x502(0x1)
	bool                                                         DestroyPostMigration;                              // 0x503(0x1)
	char                                                         pad0x4_S5L12[0x4];                                 // 0x504(0x4)
};


// Size 0x28 (Full Size[0x90] - InheritedSize[0x68]
class BTDecorator_CanRemoveSpear: public BTDecorator_BaseConditional
{
public:
	struct BlackboardKeySelector                                 RemoveSpearActor;                                  // 0x68(0x28)
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class CutsceneTargetRetrievalComponent: public ActorComponent
{
public:
	char                                                         pad0x8_GG2LP[0x8];                                 // 0xb8(0x8)
	class Actor*                                                 CutsceneTarget;                                    // 0xc0(0x8)
	char                                                         pad0x80_3RDDY[0x80];                               // 0xc8(0x80)
};


// Size 0x120 (Full Size[0x1d8] - InheritedSize[0xb8]
class AshenGarrisonAddOnComponent: public ActorComponent
{
public:
	class AshenGarrisonAISpawnDataAsset*                         SeaFortActivatedAISpawnDataAsset;                  // 0xb8(0x8)
	class AshenGarrisonAISpawnDataAsset*                         SeaGateOpenedAISpawnDataAsset;                     // 0xc0(0x8)
	class AshenGarrisonAISpawnDataAsset*                         CustodianDoorOpenedAISpawnDataAsset;               // 0xc8(0x8)
	TArray<struct AIBountySpawnerWaveLocation>                   SeaFortActivatedWaveSpawnerLocations;              // 0xd0(0x10)
	TArray<struct AIBountySpawnerWaveLocation>                   SeaGateOpenedWaveSpawnerLocations;                 // 0xe0(0x10)
	TArray<struct AIBountySpawnerWaveLocation>                   CustodianDoorOpenedWaveSpawnerLocations;           // 0xf0(0x10)
	class AIBountySpawner*                                       SeaFortActivatedSpawner;                           // 0x100(0x8)
	class AIBountySpawner*                                       SeaGateOpenedSpawner;                              // 0x108(0x8)
	class AIBountySpawner*                                       CustodianDoorOpenedSpawner;                        // 0x110(0x8)
	char                                                         pad0x90_ML132[0x90];                               // 0x118(0x90)
	class AnimatedMechanismAction*                               SeaGate;                                           // 0x1a8(0x8)
	class AnimatedMechanismAction*                               CustodianDoor;                                     // 0x1b0(0x8)
	TArray<class SwitchMechanismTrigger*>                        SeaGateLevers;                                     // 0x1b8(0x10)
	class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x1c8(0x8)
	char                                                         pad0x8_OHRQ2[0x8];                                 // 0x1d0(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class CustomScoreSettings: public DeveloperSettings
{
public:
	int                                                          PrivateSandboxGoldSilverConversionRate;            // 0x38(0x4)
	int                                                          PrivateSandboxDoubloonSilverConversionRate;        // 0x3c(0x4)
	struct StringAssetReference                                  PrivateSandboxCustomScoreValues;                   // 0x40(0x10)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class AthenaSpringArmComponentParams: public DataAsset
{
public:
	float                                                        CameraDistanceFromPlayer;                          // 0x28(0x4)
	float                                                        CameraVerticalOffset;                              // 0x2c(0x4)
	float                                                        CameraCollisionProbeSize;                          // 0x30(0x4)
	char                                                         CameraCollisionProbeCollisionChannel;              // 0x34(0x1)
	char                                                         pad0x3_5MIPK[0x3];                                 // 0x35(0x3)
	TArray<struct CameraSpringArmPlayModeParameters>             PlayModeSettings;                                  // 0x38(0x10)
	float                                                        CameraMinPitch;                                    // 0x48(0x4)
	float                                                        CameraMaxPitch;                                    // 0x4c(0x4)
	float                                                        CameraDefaultPitch;                                // 0x50(0x4)
	float                                                        CameraDefaultYaw;                                  // 0x54(0x4)
	float                                                        CameraPitchSpeed;                                  // 0x58(0x4)
	float                                                        CameraYawSpeed;                                    // 0x5c(0x4)
	float                                                        CameraConstantYawSpeed;                            // 0x60(0x4)
	bool                                                         EnableRotationLag;                                 // 0x64(0x1)
	char                                                         pad0x3_XDRGI[0x3];                                 // 0x65(0x3)
	float                                                        RotationLagSpeed;                                  // 0x68(0x4)
	bool                                                         ZoomEnabled;                                       // 0x6c(0x1)
	char                                                         pad0x3_AB7QY[0x3];                                 // 0x6d(0x3)
	float                                                        ZoomSpeedGamepad;                                  // 0x70(0x4)
	float                                                        ZoomSpeedMouse;                                    // 0x74(0x4)
	float                                                        ZoomTimeout;                                       // 0x78(0x4)
	float                                                        ZoomMinArmLengthFactor;                            // 0x7c(0x4)
	float                                                        ZoomBlend;                                         // 0x80(0x4)
	bool                                                         AllowSmoothZoomedInOffsetBlend;                    // 0x84(0x1)
	char                                                         pad0x3_RBA3B[0x3];                                 // 0x85(0x3)
	float                                                        SmoothZoomedInInterpolaionValue;                   // 0x88(0x4)
	char                                                         pad0x4_2G1GI[0x4];                                 // 0x8c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismActionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseBalanceableWalkwayActionStateId: public ActionStateId
{
public:
};


// Size 0xb8 (Full Size[0xe0] - InheritedSize[0x28]
class DeliverableRedirectionNPCContext: public DeliverableRedirectionContextBase
{
public:
	struct NPCData                                               NPCData;                                           // 0x28(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeatCollectionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportLungeAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TrapDataAsset: public DataAsset
{
public:
	TArray<struct TrapStatInfo>                                  TrapStats;                                         // 0x28(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class NPCAnimationInstanceOverrideComponent: public ActorComponent
{
public:
	char                                                         pad0x8_2RGO0[0x8];                                 // 0xb8(0x8)
	class UClass*                                                OriginalAnimInstance;                              // 0xc0(0x8)
	char                                                         pad0x8_5L254[0x8];                                 // 0xc8(0x8)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class AIOnShipManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_5J1HN[0x8];                                 // 0xb8(0x8)
	class AIProximityPlayerTracker*                              AIProximityPlayerTracker;                          // 0xc0(0x8)
	TArray<class AIFixedWavesSpawner*>                           AIOnShipAIFixedWavesSpawners;                      // 0xc8(0x10)
};


// Size 0x68 (Full Size[0x418] - InheritedSize[0x3b0]
class PossessionsChestInteraction: public ModalInteraction
{
public:
	char                                                         PossessionsChestType;                              // 0x3b0(0x1)
	char                                                         pad0x67_UCD5J[0x67];                               // 0x3b1(0x67)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameRetrievalInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ContestSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  ContestModuleSettingsDataAsset;                    // 0x38(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestVoyageCompleteBannerStep: public TaleQuestStep
{
public:
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class ProjectileCooldownServiceSettings: public DeveloperSettings
{
public:
	float                                                        ProjectileCooldownTime;                            // 0x38(0x4)
	char                                                         pad0x4_0ML6N[0x4];                                 // 0x3c(0x4)
	TArray<class Class*>                                         ClassesRequiringValidation;                        // 0x40(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc: public TaleQuestStepDesc
{
public:
	char                                                         ExpectedSourcePlayMode;                            // 0x80(0x1)
	char                                                         pad0x7_VLT3O[0x7];                                 // 0x81(0x7)
	struct FString                                               ExpectedSourceSubMode;                             // 0x88(0x10)
	char                                                         ExpectedDestinationPlayMode;                       // 0x98(0x1)
	char                                                         pad0x7_CZIP7[0x7];                                 // 0x99(0x7)
	struct FString                                               ExpectedDestinationSubMode;                        // 0xa0(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnLocationKeywordPriorityListAsset: public DataAsset
{
public:
	TArray<String>                                               PriorityKeywords;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SovereignInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class TestActionControlStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	struct TeleportActionStateParams                             TeleportParams;                                    // 0x3a0(0x30)
	struct MigrationActionStateParams                            MigrationParams;                                   // 0x3d0(0x4)
	char                                                         pad0x1c_4JFMU[0x1c];                               // 0x3d4(0x1c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CollidableCharacterInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipFactory: public Object
{
public:
	char                                                         pad0x8_8P86J[0x8];                                 // 0x28(0x8)
	TArray<class ShipBuilder*>                                   Builders;                                          // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LogbookDataCacheInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class FaunaRammableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CV8WM[0x8];                                 // 0xb8(0x8)
	float                                                        OffsetBehindActorToTarget;                         // 0xc0(0x4)
	char                                                         pad0x4_QVS27[0x4];                                 // 0xc4(0x4)
};


// Size 0xd8 (Full Size[0x190] - InheritedSize[0xb8]
class WaterSplashComponent: public ActorComponent
{
public:
	char                                                         pad0x38_642AN[0x38];                               // 0xb8(0x38)
	class Object*                                                EnterWaterParticleSystem;                          // 0xf0(0x8)
	class WwiseEvent*                                            EnterWaterSfx;                                     // 0xf8(0x8)
	class WwiseObjectPoolWrapper*                                EnterWaterSfxWisePoolToUse;                        // 0x100(0x8)
	class Object*                                                ExitWaterParticleSystem;                           // 0x108(0x8)
	class WwiseEvent*                                            ExitWaterSfx;                                      // 0x110(0x8)
	class WwiseObjectPoolWrapper*                                ExitWaterSfxWisePoolToUse;                         // 0x118(0x8)
	char                                                         ParticleSystemAttachLocation;                      // 0x120(0x1)
	bool                                                         UseComplexWaterHeightDetection;                    // 0x121(0x1)
	bool                                                         SpawnParticleSystemsAttached;                      // 0x122(0x1)
	bool                                                         SpawnParticleSystemsAlignedVertically;             // 0x123(0x1)
	bool                                                         TriggerOnEntry;                                    // 0x124(0x1)
	bool                                                         TriggerOnExit;                                     // 0x125(0x1)
	bool                                                         AllowRepeatedEntryTriggers;                        // 0x126(0x1)
	bool                                                         AllowRepeatedExitTriggers;                         // 0x127(0x1)
	float                                                        DeepWaterThreshold;                                // 0x128(0x4)
	float                                                        OceanFloorThreshold;                               // 0x12c(0x4)
	float                                                        MinimumFallDistance;                               // 0x130(0x4)
	char                                                         pad0x5c_KFVGF[0x5c];                               // 0x134(0x5c)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class CollectableQuestObjectProvider: public Actor
{
public:
	char                                                         pad0x8_0XO00[0x8];                                 // 0x3a0(0x8)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class PanicTeleportVolume: public Actor
{
public:
	class BoxComponent*                                          AreaComponent;                                     // 0x3a0(0x8)
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3a8(0x10)
	char                                                         TeleportActionStateLargeItemMode;                  // 0x3b8(0x1)
	char                                                         pad0x7_5KKLD[0x7];                                 // 0x3b9(0x7)
	TArray<uintptr_t>                                            PlayersInVolume;                                   // 0x3c0(0x10)
	char                                                         pad0x8_H730T[0x8];                                 // 0x3d0(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipEntitlementProcessingPolicyDataAsset: public DataAsset
{
public:
	TArray<class ShipEntitlementProcessingPolicy*>               ShipEntitlementProcessingPolicies;                 // 0x28(0x10)
	class PopUpMessageDesc*                                      ShipEntitlementsGrantedMessage;                    // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClothingLoadoutControlInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class ResolveActorStringReferenceStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    ActorVariable;                                     // 0x80(0x30)
	struct StringAssetReference                                  ActorReference;                                    // 0xb0(0x10)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DeliverableToNPCRequirement: public DeliverableRequirementBase
{
public:
	class UClass*                                                TargetNPCClass;                                    // 0x30(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CategoryDefaults: public DataAsset
{
public:
	TArray<struct CategoryDefaultsUnit>                          CategoryDefaults;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GlobalEmitterServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeckonServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OneShotInteractableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackRetrievalInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class ShipActivityComponent: public ActorComponent
{
public:
	char                                                         pad0x8_61R34[0x8];                                 // 0xb8(0x8)
	bool                                                         ShipInPvEEncounter;                                // 0xc0(0x1)
	char                                                         pad0x7_AN92Y[0x7];                                 // 0xc1(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ImpactSettings: public Object
{
public:
	struct StringAssetReference                                  ImpactListAssetRef;                                // 0x28(0x10)
};


// Size 0xc0 (Full Size[0x178] - InheritedSize[0xb8]
class AthenaCharacterStateManagerComponent: public ActorComponent
{
public:
	char                                                         pad0xc0_F6TWF[0xc0];                               // 0xb8(0xc0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshAvailabilityInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x448] - InheritedSize[0x3a0]
class ShipStorageJettisonService: public Actor
{
public:
	char                                                         pad0x8_3LWJ4[0x8];                                 // 0x3a0(0x8)
	TArray<struct ShipStorageJettisonRequest>                    PendingSpawns;                                     // 0x3a8(0x10)
	TArray<struct JettisonedStorageContainerHandle>              ContainerHandles;                                  // 0x3b8(0x10)
	class ShipStorageJettisonServiceParams*                      Params;                                            // 0x3c8(0x8)
	char                                                         pad0x78_Q09SH[0x78];                               // 0x3d0(0x78)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RuntimeMaterialVariantsDataAsset: public DataAsset
{
public:
	TArray<struct MaterialSet>                                   MaterialSetArray;                                  // 0x28(0x10)
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class FireworksDebugSpawnItemsDataAsset: public DataAsset
{
public:
	struct ClassicFireworkDebugList                              ClassicFireworks;                                  // 0x28(0x70)
	struct FireworkDebugListByFireworkType                       ThemedFireworks;                                   // 0x98(0x20)
	TArray<class ItemDescSpawnData*>                             Flares;                                            // 0xb8(0x10)
	TArray<class ItemDescSpawnData*>                             AllFireworks;                                      // 0xc8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildMemberInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class ShipDescAsset: public Object
{
public:
	struct ShipDesc                                              Desc;                                              // 0x28(0x48)
};


// Size 0x20 (Full Size[0x2b0] - InheritedSize[0x290]
class MapTableInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
	char                                                         pad0x10_K0SXL[0x10];                               // 0x290(0x10)
	class MapTable*                                              MapTable;                                          // 0x2a0(0x8)
	class MapTableControlPoint*                                  MapTableControlPoint;                              // 0x2a8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnDigStrategy: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProgressSpawnLocationProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ReapersTributeCountType: public CountType
{
public:
};


// Size 0x418 (Full Size[0x4d0] - InheritedSize[0xb8]
class PlayerCompanyComponent: public ActorComponent
{
public:
	char                                                         pad0x300_VE3VO[0x300];                             // 0xb8(0x300)
	struct PlayerCompanyProgressCache                            CompanyProgressCache;                              // 0x3b8(0x68)
	struct PlayerCompanyProgressCache                            GuildProgressCache;                                // 0x420(0x68)
	struct Guid                                                  PlayerSailedGuild;                                 // 0x488(0x10)
	class GuildSettings*                                         GuildSettings;                                     // 0x498(0x8)
	char                                                         pad0x30_315GP[0x30];                               // 0x4a0(0x30)
};


// Size 0xc8 (Full Size[0x468] - InheritedSize[0x3a0]
class StormService: public Actor
{
public:
	char                                                         pad0x50_XDS0I[0x50];                               // 0x3a0(0x50)
	TArray<class Actor*>                                         StormList;                                         // 0x3f0(0x10)
	char                                                         pad0x68_PFBYF[0x68];                               // 0x400(0x68)
};


// Size 0x1140 (Full Size[0x14e0] - InheritedSize[0x3a0]
class CharacterSocketCollisionService: public Actor
{
public:
	char                                                         pad0x1140_2O5SW[0x1140];                           // 0x3a0(0x1140)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NervousAIStrategyId: public AIStrategyId
{
public:
};


// Size 0xf0 (Full Size[0x490] - InheritedSize[0x3a0]
class OneShotToggleCollisionAction: public Actor
{
public:
	class SceneComponent*                                        CollisionActionRoot;                               // 0x3a0(0x8)
	class PrimitiveComponent*                                    BlockingPrimitive;                                 // 0x3a8(0x8)
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3b0(0x8)
	class ArrowComponent*                                        KnockbackArrowComponent;                           // 0x3b8(0x8)
	bool                                                         UseInactiveCollisionProfileByDefault;              // 0x3c0(0x1)
	char                                                         pad0x3_VVM2X[0x3];                                 // 0x3c1(0x3)
	struct KnockBackInfo                                         KnockBackInfo;                                     // 0x3c4(0x54)
	float                                                        KnockbackGracePeriod;                              // 0x418(0x4)
	struct CollisionProfileName                                  InactiveCollisionProfileName;                      // 0x41c(0x8)
	struct CollisionProfileName                                  ActiveCollisionProfileName;                        // 0x424(0x8)
	char                                                         pad0x4_YCJKD[0x4];                                 // 0x42c(0x4)
	struct OneShotToggleCollisionAudioParams                     AudioParams;                                       // 0x430(0x38)
	char                                                         pad0x28_YTKSE[0x28];                               // 0x468(0x28)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class FishSpawnParamsDataAsset: public DataAsset
{
public:
	char                                                         TimeOfDay;                                         // 0x28(0x1)
	bool                                                         InPool;                                            // 0x29(0x1)
	bool                                                         CloseToActiveFortOrSkellyShip;                     // 0x2a(0x1)
	bool                                                         InStorm;                                           // 0x2b(0x1)
	bool                                                         CloseToShipwreck;                                  // 0x2c(0x1)
	char                                                         pad0x3_YDT33[0x3];                                 // 0x2d(0x3)
	class UClass*                                                Sea;                                               // 0x30(0x8)
	class VoyageLocationOnlyNamedIslandListDataAsset*            Islands;                                           // 0x38(0x8)
	char                                                         BaitType;                                          // 0x40(0x1)
	char                                                         pad0x3_QOZSW[0x3];                                 // 0x41(0x3)
	float                                                        CatchWeight;                                       // 0x44(0x4)
	struct FName                                                 FishName;                                          // 0x48(0x8)
	TArray<struct FishSizeAndType>                               FishTypes;                                         // 0x50(0x10)
	class FishSizeWeightsDataAsset*                              SizeWeights;                                       // 0x60(0x8)
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestNumericSwitchStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableInt                                      Condition;                                         // 0x80(0x30)
	TArray<class TaleQuestStepDesc*>                             Descs;                                             // 0xb0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SinkingTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x148 (Full Size[0x288] - InheritedSize[0x140]
class FlamesOfFateInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x18_A8BEV[0x18];                               // 0x140(0x18)
	struct FText                                                 DisplayName;                                       // 0x158(0x38)
	struct FText                                                 TakeFlameTooltipText;                              // 0x190(0x38)
	struct FText                                                 LanternNotRaisedToolTipText;                       // 0x1c8(0x38)
	struct FText                                                 NotWieldingFlameTooltipText;                       // 0x200(0x38)
	struct FText                                                 CannotSetFlameTooltipText;                         // 0x238(0x38)
	char                                                         FlameColour;                                       // 0x270(0x1)
	char                                                         pad0x17_GUTYV[0x17];                               // 0x271(0x17)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwallowedByKrakenActionStateId: public ActionStateId
{
public:
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class NPCDialogOption: public Object
{
public:
	bool                                                         IsEnabled;                                         // 0x28(0x1)
	char                                                         pad0x7_LI48S[0x7];                                 // 0x29(0x7)
	struct FString                                               TelemetryKey;                                      // 0x30(0x10)
	TArray<struct PlayerStatOption>                              StatsToFire;                                       // 0x40(0x10)
	TArray<class Class*>                                         ConditionalStatsToFire;                            // 0x50(0x10)
	TArray<class NPCDialogConditional*>                          Conditions;                                        // 0x60(0x10)
	TArray<class Class*>                                         ClientRunnables;                                   // 0x70(0x10)
	struct StringAssetReference                                  OptionIcon;                                        // 0x80(0x10)
	struct FText                                                 OptionIconNarrationText;                           // 0x90(0x38)
	class WwiseEvent*                                            DialogEvent;                                       // 0xc8(0x8)
	bool                                                         ShouldIgnoreGoodbyeDialogue;                       // 0xd0(0x1)
	bool                                                         ShouldFireNonVerbal;                               // 0xd1(0x1)
	char                                                         pad0x6_0V3NY[0x6];                                 // 0xd2(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExternallyControllableMovementInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0xc0] - InheritedSize[0x28]
class NPCOnSurfaceDataAsset: public DataAsset
{
public:
	class NPCOnSurfaceLocationDataAsset*                         LocationDataAsset;                                 // 0x28(0x8)
	class NPCOnSurfaceStatesDataAsset*                           StatesDataAsset;                                   // 0x30(0x8)
	class NPCOnSurfaceCannonManagerDataAsset*                    CannonManagerDataAsset;                            // 0x38(0x8)
	class NPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset*    CannonManagerCrewSizeSettingsDataAsset;            // 0x40(0x8)
	char                                                         NPCDisappearMethod;                                // 0x68(0x1)
	bool                                                         PhaseNPCToCrew;                                    // 0x69(0x1)
	char                                                         pad0x2_X0W9N[0x2];                                 // 0x6a(0x2)
	float                                                        TimeBetweenSpawnChecks;                            // 0x6c(0x4)
	float                                                        HighFrequencyTimeBetweenSpawnChecks;               // 0x70(0x4)
	float                                                        TimeBetweenDespawnChecks;                          // 0x74(0x4)
	struct WeightedProbabilityRangeOfRanges                      DespawnCooldown;                                   // 0x78(0x30)
	float                                                        DelayBeforeDestroyingNPC;                          // 0xa8(0x4)
	float                                                        NPCInteractionDistanceXY;                          // 0xac(0x4)
	float                                                        NPCInteractionDistanceZ;                           // 0xb0(0x4)
	float                                                        TimeBetweenIsPlayerNearNPCChecks;                  // 0xb4(0x4)
	bool                                                         StaticallyNamedNPC;                                // 0xb8(0x1)
	char                                                         pad0x7_AK4NM[0x7];                                 // 0xb9(0x7)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class ShelteredComponent: public ActorComponent
{
public:
	char                                                         pad0x8_1BOFE[0x8];                                 // 0xb8(0x8)
	struct FName                                                 FeatureFlag;                                       // 0xc0(0x8)
	char                                                         ShelterUpdateOption;                               // 0xc8(0x1)
	char                                                         pad0x3_R5ZGY[0x3];                                 // 0xc9(0x3)
	float                                                        RaycastSpreadInCentimetres;                        // 0xcc(0x4)
	float                                                        RaycastHeightOffsetHeightInCentimetres;            // 0xd0(0x4)
	char                                                         RaycastHitTestTraceChannel;                        // 0xd4(0x1)
	char                                                         pad0x3_EAKMB[0x3];                                 // 0xd5(0x3)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class GhostShipTickManager: public Actor
{
public:
	TArray<class Actor*>                                         GhostShipActors;                                   // 0x3a0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableBaseActionStateId: public ActionStateId
{
public:
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class InGameCommandAISpawnManager: public Object
{
public:
	class SpawnCommandsAITypeList*                               AITypeList;                                        // 0x28(0x8)
	class SpawnCommandsAISkillsetList*                           Skillsets;                                         // 0x30(0x8)
	class SpawnCommandsAILoadoutList*                            LoadoutDataAsset;                                  // 0x38(0x8)
	class SpawnCommandsAIFormList*                               Forms;                                             // 0x40(0x8)
	class SpawnCommandsAIAmmoList*                               AIAmmoTypes;                                       // 0x48(0x8)
	class SpawnCommandsAIItemDropList*                           AIItemDropSpawners;                                // 0x50(0x8)
	class SpawnCommandsAIClassIDsList*                           ClassIds;                                          // 0x58(0x8)
	class SpawnCommandsAIEncounterTypeList*                      AIEncounterTypeList;                               // 0x60(0x8)
	class InGameCommandAISpawner*                                AISpawner;                                         // 0x68(0x8)
	char                                                         pad0x18_90J0B[0x18];                               // 0x70(0x18)
	TArray<struct AISpawnSettings>                               AISpawnSettings;                                   // 0x88(0x10)
	class EnvQuery*                                              AISpawnLocationEQSQuery;                           // 0xa0(0x8)
	class EnvQuery*                                              WaterBasedAISpawnLocationEQSQuery;                 // 0xa8(0x8)
};


// Size 0xc0 (Full Size[0x1f8] - InheritedSize[0x138]
class MetalAIFormComponent: public AthenaAIFormComponent
{
public:
	char                                                         pad0x28_WVZFS[0x28];                               // 0x138(0x28)
	class ParticleSystem*                                        RustyParticlesTemplate;                            // 0x160(0x8)
	class SkeletonAudioFootfallControllerParams*                 DefaultFootfallParams;                             // 0x168(0x8)
	class SkeletonAudioFootfallControllerParams*                 RustyFootfallParams;                               // 0x170(0x8)
	struct FName                                                 RustShaderParamName;                               // 0x198(0x8)
	float                                                        NotRustyShaderParamValue;                          // 0x1a0(0x4)
	float                                                        RustyShaderParamValue;                             // 0x1a4(0x4)
	float                                                        ShaderParamBlendSpeed;                             // 0x1a8(0x4)
	struct FName                                                 SeedShaderParamName;                               // 0x1ac(0x8)
	int                                                          MaxSeedShaderValue;                                // 0x1b4(0x4)
	bool                                                         IsWet;                                             // 0x1b8(0x1)
	char                                                         pad0x7_0YPFL[0x7];                                 // 0x1b9(0x7)
	class ParticleSystemComponent*                               RustyParticleSystemComponent;                      // 0x1c0(0x8)
	char                                                         pad0x8_GU89B[0x8];                                 // 0x1c8(0x8)
	class DamageableVulnerabilityLayer*                          DefaultVulnerabilityLayer;                         // 0x1d0(0x8)
	class DamageableVulnerabilityLayer*                          RustyVulnerabilityLayer;                           // 0x1d8(0x8)
	class CharacterHitReactionDamagerTypeToAnimTypeLayer*        RustyHitReactionsLayer;                            // 0x1e0(0x8)
	class MaterialInstanceDynamic*                               MetalDynamicMaterialInstance;                      // 0x1e8(0x8)
	char                                                         pad0x8_A4UKR[0x8];                                 // 0x1f0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StatFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetMechanismActionCutsceneNameStep: public TaleQuestStep
{
public:
	class SetMechanismActionCutsceneNameStepDesc*                Desc;                                              // 0x98(0x8)
};


// Size 0x748 (Full Size[0xae8] - InheritedSize[0x3a0]
class PirateGeneratorService: public Actor
{
public:
	char                                                         pad0x8_ZCBMZ[0x8];                                 // 0x3a0(0x8)
	int                                                          MaxConcurrent;                                     // 0x3a8(0x4)
	char                                                         pad0x4_732HO[0x4];                                 // 0x3ac(0x4)
	struct StringAssetReference                                  RandomOutfitDataAssetPath;                         // 0x3b0(0x10)
	int                                                          MaxCachedMeshes;                                   // 0x3c0(0x4)
	char                                                         pad0x684_54J5X[0x684];                             // 0x3c4(0x684)
	class WardrobeOutfitDataAsset*                               RandomOutfitDataAsset;                             // 0xa48(0x8)
	char                                                         pad0x98_GT1RI[0x98];                               // 0xa50(0x98)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex4SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x110 (Full Size[0x138] - InheritedSize[0x28]
class VoyageGeneratorSimResult: public Object
{
public:
	char                                                         pad0x100_N2HUT[0x100];                             // 0x28(0x100)
	struct Vector                                                StartingLocation;                                  // 0x128(0xc)
	char                                                         pad0x4_MF945[0x4];                                 // 0x134(0x4)
};


// Size 0x1a0 (Full Size[0x258] - InheritedSize[0xb8]
class PlayerGuildComponent: public ActorComponent
{
public:
	char                                                         pad0x8_4360A[0x8];                                 // 0xb8(0x8)
	bool                                                         SailingForGuild;                                   // 0xc0(0x1)
	char                                                         pad0x7_CS2NB[0x7];                                 // 0xc1(0x7)
	TArray<char>                                                 CannotInviteReasons;                               // 0xc8(0x10)
	struct Guid                                                  GuildId;                                           // 0xd8(0x10)
	int                                                          GuildLevel;                                        // 0xe8(0x4)
	int                                                          DistinctionLevel;                                  // 0xec(0x4)
	int                                                          LedgerPosition;                                    // 0xf0(0x4)
	char                                                         pad0x4_1MYXC[0x4];                                 // 0xf4(0x4)
	struct GuildBranding                                         GuildBranding;                                     // 0xf8(0x50)
	int                                                          NumberOfMembers;                                   // 0x148(0x4)
	int                                                          NumberOfShips;                                     // 0x14c(0x4)
	TArray<struct PlayerGuildAffiliation>                        PlayerGuildAffiliations;                           // 0x150(0x10)
	char                                                         pad0xa8_5AGA5[0xa8];                               // 0x160(0xa8)
	class GuildBrandingTexturesAsset*                            GuildBrandingTextureAsset;                         // 0x208(0x8)
	struct GuildSignUpToken                                      ActiveGuildSignUpToken;                            // 0x210(0x20)
	char                                                         pad0x28_O57CX[0x28];                               // 0x230(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleBookInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCOnSurfaceVODataAsset: public DataAsset
{
public:
	TArray<struct NPCOnSurfaceVOGroup>                           VOGroups;                                          // 0x28(0x10)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class ShipResurfaceWetnessContainer: public DataAsset
{
public:
	TArray<struct ShipResurfaceWetnessHandle>                    ShipWetnessInstanceHandles;                        // 0x28(0x10)
	class UClass*                                                LoadedShipResurfaceVFXClass;                       // 0x58(0x8)
	char                                                         pad0x18_PB7F8[0x18];                               // 0x60(0x18)
	struct Vector                                                SurfaceWaterLocation;                              // 0x78(0xc)
	float                                                        SurfaceWaterRadius;                                // 0x84(0x4)
	float                                                        SurfaceWaterStrength;                              // 0x88(0x4)
	char                                                         pad0x1c_RS5MB[0x1c];                               // 0x8c(0x1c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class PersistenceIdentifierSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  PersistenceIdentifierSettingsAsset;                // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GlobalVoyageDirectorServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryInteractNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class CrewOnlyWwwiseAudioComponent: public ActorComponent
{
public:
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0xb8(0x8)
	char                                                         pad0x58_XZWGH[0x58];                               // 0xc0(0x58)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class StatusResponseCameraShake: public StatusResponse
{
public:
	class UClass*                                                CameraShake;                                       // 0x38(0x8)
	float                                                        InnerRadius;                                       // 0x40(0x4)
	float                                                        OuterRadius;                                       // 0x44(0x4)
	float                                                        Falloff;                                           // 0x48(0x4)
	bool                                                         OrientShakeTowardsEpicenter;                       // 0x4c(0x1)
	bool                                                         ShouldBlendOut;                                    // 0x4d(0x1)
	char                                                         pad0x2_V8Q51[0x2];                                 // 0x4e(0x2)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class UnifiedDelegateTestUnifiedDelegate: public Object
{
public:
	char                                                         pad0x18_WI30P[0x18];                               // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OneShotUsable: public Interface
{
public:
};


// Size 0x250 (Full Size[0x5f0] - InheritedSize[0x3a0]
class CaptainedSessionService: public Actor
{
public:
	char                                                         pad0x20_X55E1[0x20];                               // 0x3a0(0x20)
	TArray<struct CaptainedCrew>                                 CaptainedCrews;                                    // 0x3c0(0x10)
	char                                                         pad0x218_V69OH[0x218];                             // 0x3d0(0x218)
	class ScrambledNamesDataAsset*                               ScrambledShipNamesDataAsset;                       // 0x5e8(0x8)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class InteractableBase: public Actor
{
public:
	char                                                         pad0x10_1BYQT[0x10];                               // 0x3a0(0x10)
	TArray<class InteractionPrerequisiteBase*>                   InteractionPrerequisites;                          // 0x3b0(0x10)
	char                                                         CurrentInteractionState;                           // 0x3c0(0x1)
	char                                                         InteractableIdentifier;                            // 0x3c1(0x1)
	char                                                         pad0x2_H77UN[0x2];                                 // 0x3c2(0x2)
	bool                                                         RequiresFacingFront;                               // 0x3c4(0x1)
	bool                                                         RequiresNotBeingAirborne;                          // 0x3c4(0x1)
	bool                                                         RequiresNotSwimming;                               // 0x3c4(0x1)
	bool                                                         RequiresCrouching;                                 // 0x3c4(0x1)
	bool                                                         InteractionsCanBeDisabled;                         // 0x3c4(0x1)
	bool                                                         CanSetInteractionState;                            // 0x3c4(0x1)
	char                                                         pad0x3_UC8J5[0x3];                                 // 0x3c5(0x3)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x3c8(0x8)
};


// Size 0x1e0 (Full Size[0x320] - InheritedSize[0x140]
class SeatComponentBase: public InteractableComponent
{
public:
	char                                                         pad0x48_PLK8T[0x48];                               // 0x140(0x48)
	struct FText                                                 InteractionVerb;                                   // 0x188(0x38)
	struct FText                                                 InteractionDisplayName;                            // 0x1c0(0x38)
	class UClass*                                                InteractionInput;                                  // 0x1f8(0x8)
	bool                                                         HoldToInteract;                                    // 0x200(0x1)
	char                                                         pad0x7_B0WW8[0x7];                                 // 0x201(0x7)
	class UClass*                                                HoldInteractionInput;                              // 0x208(0x8)
	float                                                        HoldDuration;                                      // 0x210(0x4)
	float                                                        IdleDisconnectThreshold;                           // 0x214(0x4)
	bool                                                         DisableCanBeControlled;                            // 0x218(0x1)
	char                                                         pad0x7_GJMJ8[0x7];                                 // 0x219(0x7)
	class PhrasesRadialDataAsset*                                RadialPhrases;                                     // 0x220(0x8)
	bool                                                         CustomInteractionPoint;                            // 0x228(0x1)
	char                                                         pad0x3_OYVEU[0x3];                                 // 0x229(0x3)
	struct Vector                                                CustomInteractionPointLocation;                    // 0x22c(0xc)
	TArray<class SeatStat*>                                      ConditionalSeatStats;                              // 0x238(0x10)
	bool                                                         CanBeUnderwater;                                   // 0x248(0x1)
	char                                                         pad0x7_XMU4P[0x7];                                 // 0x249(0x7)
	char                                                         pad0xd0_QCVTS[0xd0];                               // 0x250(0xd0)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class IncrementCountOnReapersTributeShipEventServiceCountPolicy: public CountPolicy
{
public:
	class UClass*                                                CountType;                                         // 0x28(0x8)
	int                                                          AmountToAdd;                                       // 0x30(0x4)
	char                                                         pad0x1c_EZQTP[0x1c];                               // 0x34(0x1c)
};


// Size 0x160 (Full Size[0x5a0] - InheritedSize[0x440]
class KrakenAnimatedTentacleAnimationInstance: public AnimInstance
{
public:
	float                                                        AnimationStopBlendOutTime;                         // 0x440(0x4)
	float                                                        MidAnimationBranchBlendTime;                       // 0x444(0x4)
	TArray<struct KrakenAnimatedTentacleHitReactAnimation>       HitReactAnimations;                                // 0x448(0x10)
	class KrakenAnimatedTentacleStateAnimationsDataAsset*        StateAnimationsAsset;                              // 0x458(0x8)
	class AnimMontage*                                           PlayingMontage;                                    // 0x460(0x8)
	char                                                         pad0x20_OKISD[0x20];                               // 0x468(0x20)
	class KrakenAnimatedTentacle*                                OwningKrakenAnimatedTentacle;                      // 0x488(0x8)
	char                                                         pad0x110_HPPIS[0x110];                             // 0x490(0x110)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomVaultServiceInterface: public Interface
{
public:
};


// Size 0x100 (Full Size[0x4a0] - InheritedSize[0x3a0]
class ModifyPlayerMovementOverlapActor: public Actor
{
public:
	char                                                         pad0x8_IY2MH[0x8];                                 // 0x3a0(0x8)
	class StaticMeshComponent*                                   MeshOverlapVolume;                                 // 0x3a8(0x8)
	class BoxComponent*                                          BoxOverlapVolume;                                  // 0x3b0(0x8)
	char                                                         OverlapToUse;                                      // 0x3b8(0x1)
	char                                                         pad0x3_C76ME[0x3];                                 // 0x3b9(0x3)
	float                                                        MaxSpeedScalar;                                    // 0x3bc(0x4)
	bool                                                         DisableSprint;                                     // 0x3c0(0x1)
	bool                                                         DisableJump;                                       // 0x3c1(0x1)
	bool                                                         DisableSwimming;                                   // 0x3c2(0x1)
	bool                                                         IsEnabled;                                         // 0x3c3(0x1)
	char                                                         pad0x4_44ZY6[0x4];                                 // 0x3c4(0x4)
	TArray<uintptr_t>                                            OverlappingPlayers;                                // 0x3c8(0x10)
	class SceneComponent*                                        Root;                                              // 0x3d8(0x8)
	class PrimitiveComponent*                                    OverlapVolume;                                     // 0x3e0(0x8)
	char                                                         pad0xb8_8Q5B4[0xb8];                               // 0x3e8(0xb8)
};


// Size 0x28 (Full Size[0x160] - InheritedSize[0x138]
class AncientAIFormComponent: public AthenaAIFormComponent
{
public:
	char                                                         pad0x28_8IQHN[0x28];                               // 0x138(0x28)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class AddFogBankAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
	struct QuestVariableFloat                                    Radius;                                            // 0xb0(0x30)
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class IndividualReplicationChannelComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemFactoryFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class TaleQuestBlueprintStep: public TaleQuestStep
{
public:
	class BlueprintStepBase*                                     Step;                                              // 0x98(0x8)
	char                                                         pad0x8_CKCTC[0x8];                                 // 0xa0(0x8)
};


// Size 0xa8 (Full Size[0x448] - InheritedSize[0x3a0]
class GhostShipDoor: public Actor
{
public:
	char                                                         pad0x18_YBRPA[0x18];                               // 0x3a0(0x18)
	TArray<struct OpenForListEntry>                              OpenForList;                                       // 0x3b8(0x10)
	float                                                        DoorFullyOpenTimer;                                // 0x3c8(0x4)
	char                                                         pad0x4_SKGUA[0x4];                                 // 0x3cc(0x4)
	class ClientSkeletalMeshComponent*                           DoorMesh;                                          // 0x3d0(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterialInstances;                          // 0x3d8(0x10)
	class AnimSequence*                                          DoorOpeningAnimation;                              // 0x3e8(0x8)
	class WwiseEvent*                                            DoorOpeningSfx;                                    // 0x3f0(0x8)
	struct Box                                                   DoorBoundingVolume;                                // 0x3f8(0x1c)
	struct Vector                                                MaxBoundingVolume;                                 // 0x414(0xc)
	float                                                        DoorDeformationWhenFullyOpen;                      // 0x420(0x4)
	bool                                                         BlockPlayerLeftGhostshipDelegate;                  // 0x424(0x1)
	char                                                         pad0x23_TAYL8[0x23];                               // 0x425(0x23)
};


// Size 0x1a0 (Full Size[0x540] - InheritedSize[0x3a0]
class ShipwreckService: public Actor
{
public:
	char                                                         pad0x8_FUIQW[0x8];                                 // 0x3a0(0x8)
	TArray<class Interface*>                                     ToMoveList;                                        // 0x3a8(0x10)
	struct WeightedProbabilityRange                              WreckProbRange;                                    // 0x3b8(0x20)
	class UClass*                                                WreckClass;                                        // 0x3d8(0x8)
	bool                                                         PickRandomShipwreckType;                           // 0x3e0(0x1)
	char                                                         pad0x7_80FWZ[0x7];                                 // 0x3e1(0x7)
	TArray<struct WeightedShipwreckType>                         ShipwreckTypes;                                    // 0x3e8(0x10)
	class ShipwreckSiteGeneratorComponent*                       SiteGenerator;                                     // 0x3f8(0x8)
	class ShipwreckNameGeneratorAbstract*                        NameGenerator;                                     // 0x400(0x8)
	float                                                        ShipwreckLifetime;                                 // 0x408(0x4)
	float                                                        PlayerDistanceMoveThreshold;                       // 0x40c(0x4)
	float                                                        ShipDistanceMoveThreshold;                         // 0x410(0x4)
	char                                                         pad0x4_PHOM9[0x4];                                 // 0x414(0x4)
	TArray<class Class*>                                         GameEventExclusionExceptions;                      // 0x418(0x10)
	TArray<struct WeightedShipwreckType>                         MixedShipwreckTypes;                               // 0x428(0x10)
	char                                                         pad0x60_F7EKM[0x60];                               // 0x438(0x60)
	struct WreckSpawnQueryPriorityData                           SpawnQueryData;                                    // 0x498(0x10)
	TArray<class Interface*>                                     WreckList;                                         // 0x4a8(0x10)
	char                                                         pad0x10_K4OYK[0x10];                               // 0x4b8(0x10)
	TArray<struct CustomWreckEntry>                              ActiveCustomWreckList;                             // 0x4c8(0x10)
	char                                                         pad0x68_63BLP[0x68];                               // 0x4d8(0x68)
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class IslandEventTrackerComponent: public ActorComponent
{
public:
	TArray<struct IslandEventData>                               EventData;                                         // 0xb8(0x10)
	char                                                         pad0x80_ZAHU0[0x80];                               // 0xc8(0x80)
};


// Size 0xe8 (Full Size[0x488] - InheritedSize[0x3a0]
class BuzzService: public Actor
{
public:
	char                                                         pad0xe8_GA9AG[0xe8];                               // 0x3a0(0xe8)
};


// Size 0xd0 (Full Size[0x470] - InheritedSize[0x3a0]
class CoordinatedKraken: public Actor
{
public:
	char                                                         pad0x18_TTY02[0x18];                               // 0x3a0(0x18)
	class UClass*                                                TentacleType;                                      // 0x3b8(0x8)
	class UClass*                                                HeadType;                                          // 0x3c0(0x8)
	class SceneComponent*                                        KrakenRoot;                                        // 0x3c8(0x8)
	class KrakenActionCoordinatorComponent*                      KrakenActionCoordinator;                           // 0x3d0(0x8)
	TArray<struct CoordinatedKrakenPhaseAssetEntry>              PhaseAssets;                                       // 0x3d8(0x10)
	char                                                         pad0x28_UJQGZ[0x28];                               // 0x3e8(0x28)
	struct Transform                                             HeadSpawnTransform;                                // 0x410(0x30)
	class KrakenHead*                                            SpawnedHead;                                       // 0x440(0x8)
	class NetworkClusterEventRoom*                               NetworkClusterEventRoom;                           // 0x448(0x8)
	class Actor*                                                 TargetActor;                                       // 0x450(0x8)
	TArray<struct CoordinatedKrakenTentacleSpawnInfo>            TentacleSpawnInfo;                                 // 0x458(0x10)
	char                                                         ReplicatedTargetActorOverride;                     // 0x468(0x1)
	char                                                         pad0x7_S3EY5[0x7];                                 // 0x469(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeAttackFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class SharkAICharacterAudioComponentParams: public DataAsset
{
public:
	class WwiseEvent*                                            PlaySharkAttackTellLoop;                           // 0x28(0x8)
	class WwiseEvent*                                            StopSharkAttackTellLoop;                           // 0x30(0x8)
	class WwiseEvent*                                            PlaySharkDeath;                                    // 0x38(0x8)
	class WwiseEvent*                                            PlaySharkHit;                                      // 0x40(0x8)
	class WwiseEvent*                                            PlaySharkFinLoop;                                  // 0x48(0x8)
	class WwiseEvent*                                            StopSharkFinLoop;                                  // 0x50(0x8)
	struct FName                                                 SharkFinUnderwaterSwitchGroup;                     // 0x58(0x8)
	struct FName                                                 SharkFinUnderwaterSwitchAboveWater;                // 0x60(0x8)
	struct FName                                                 SharkFinUnderwaterSwitchUnderwater;                // 0x68(0x8)
	struct FName                                                 SharkSpeedFactorRtpc;                              // 0x70(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonPitchRateRightStickAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x90 (Full Size[0x3f0] - InheritedSize[0x360]
class AthenaSpringArmComponent: public SpringArmComponent
{
public:
	char                                                         pad0x90_AC6FL[0x90];                               // 0x360(0x90)
};


// Size 0xf0 (Full Size[0x188] - InheritedSize[0x98]
class WaitForCrewMemberToApproachNamedPointGroupStep: public TaleQuestStep
{
public:
	char                                                         pad0x20_7VLQQ[0x20];                               // 0x98(0x20)
	TArray<struct OrientedPoint>                                 NamedPointGroup;                                   // 0xb8(0x10)
	char                                                         pad0xc0_WEQSH[0xc0];                               // 0xc8(0xc0)
};


// Size 0x110 (Full Size[0x1c8] - InheritedSize[0xb8]
class ShipLightComponent: public ActorComponent
{
public:
	char                                                         pad0x8_5Y9FT[0x8];                                 // 0xb8(0x8)
	TArray<char>                                                 DormantShipRegions;                                // 0xc0(0x10)
	bool                                                         ExposeToNetProxy;                                  // 0xd0(0x1)
	char                                                         pad0x3_B9SP7[0x3];                                 // 0xd1(0x3)
	int                                                          NetProxyBitIndex;                                  // 0xd4(0x4)
	class InteractableLightParameters*                           LightParameters;                                   // 0xd8(0x8)
	char                                                         pad0x1_CWDX0[0x1];                                 // 0xe0(0x1)
	bool                                                         LightIsOn_Server;                                  // 0xe1(0x1)
	char                                                         pad0x16_E123J[0x16];                               // 0xe2(0x16)
	TArray<class PointLightComponent*>                           Lights;                                            // 0xf8(0x10)
	char                                                         pad0xc0_J1AJ6[0xc0];                               // 0x108(0xc0)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PremiumCatalogListDataAsset: public DataAsset
{
public:
	TArray<class PremiumCatalogDataAsset*>                       Catalogs;                                          // 0x28(0x10)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InWorldEventZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_7RGTL[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameStateFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xa0 (Full Size[0x120] - InheritedSize[0x80]
class GetDistantLocationsFromListTaleStepDesc: public TaleQuestStepDesc
{
public:
	int                                                          InNumberOfLocationsToReturn;                       // 0x80(0x4)
	char                                                         pad0x4_PVQD9[0x4];                                 // 0x84(0x4)
	struct QuestVariableVectorArray                              InLocationArray;                                   // 0x88(0x30)
	struct QuestVariableVectorArray                              InLocationsToAvoid;                                // 0xb8(0x30)
	struct QuestVariableVectorArray                              OutFoundLocations;                                 // 0xe8(0x30)
	float                                                        InMaximumDistanceToAvoidPoint;                     // 0x118(0x4)
	bool                                                         ReturnInvalidLocationsIfTheresNotEnoughValidLocations; // 0x11c(0x1)
	char                                                         pad0x3_N53XF[0x3];                                 // 0x11d(0x3)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TemporaryEntitlementsTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	TArray<Class>                                                Entitlements;                                      // 0x28(0x10)
	bool                                                         GrantTemporaryEntitlementOnStart;                  // 0x38(0x1)
	char                                                         pad0x7_G3QX6[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SnapshotOwnerInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class SceneDialogueSection: public Object
{
public:
	struct FString                                               Name;                                              // 0x28(0x10)
	bool                                                         IsPool;                                            // 0x38(0x1)
	char                                                         pad0x3_SIL5F[0x3];                                 // 0x39(0x3)
	float                                                        TimeDelayBetweenText;                              // 0x40(0x4)
	char                                                         pad0x4_9XZWY[0x4];                                 // 0x44(0x4)
	TArray<class SceneDialoguePointWithConditional*>             Points;                                            // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitRegSnapshotImpactedActorRedirectionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipGetterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseRain: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpawnOceanCrawlerAIOnShipStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AudioEmitterPoolSourceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RevealableSceneMappingsDataAsset: public DataAsset
{
public:
	TArray<struct RevealableSceneMapping>                        Mappings;                                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatusResponseAIShipClampMaxTurnAngle: public StatusResponse
{
public:
	float                                                        ClampedMaxTurnAngle;                               // 0x38(0x4)
	char                                                         pad0xc_B407R[0xc];                                 // 0x3c(0xc)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAnimationServerData: public AnimationServerData
{
public:
	TArray<struct AthenaAnimationServerAnimAISpawnData>          AISpawnData;                                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMoveForwardInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class ShipResurfaceWetnessActor: public Actor
{
public:
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class BlockMigrationForCrewTaskStepDesc: public TaleQuestStepDesc
{
public:
	class TaleQuestStepDesc*                                     TaskDesc;                                          // 0x80(0x8)
	struct FName                                                 RemoteConfigKeyBlockServerMigration;               // 0x88(0x8)
	struct FString                                               Reason;                                            // 0x90(0x10)
};


// Size 0x28 (Full Size[0x70] - InheritedSize[0x48]
class CameraYawModifier: public CameraModifier
{
public:
	char                                                         pad0x28_PIQCQ[0x28];                               // 0x48(0x28)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RegionMapSetAsset: public DataAsset
{
public:
	TArray<class RegionMapDataAsset*>                            MapRegions;                                        // 0x28(0x10)
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class PhrasesRadialComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NK0R8[0x8];                                 // 0xb8(0x8)
	TArray<struct PlayModePhrases>                               DefaultPhrasesByPlayMode;                          // 0xc0(0x10)
	class PhrasesRadialDataAsset*                                DefaultPhrasesRadialDataAsset;                     // 0xd0(0x8)
	class PhrasesRadialDataAsset*                                DockablePhrasesRadialDataAsset;                    // 0xd8(0x8)
	class PhrasesRadialDataAsset*                                WieldedItemPhrasesRadialDataAsset;                 // 0xe0(0x8)
	char                                                         pad0x38_WZI5W[0x38];                               // 0xe8(0x38)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AdventureSettings: public DeveloperSettings
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class MeleeSpinAIAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        MinAngleToTargetToActivate;                        // 0xc8(0x4)
	float                                                        MaxAngleToTargetToActivate;                        // 0xcc(0x4)
	float                                                        MinTimeBetweenCheck;                               // 0xd0(0x4)
	float                                                        MaxTimeBetweenCheck;                               // 0xd4(0x4)
	float                                                        ChanceOfActivation;                                // 0xd8(0x4)
	float                                                        SpinWaitTime;                                      // 0xdc(0x4)
	float                                                        TurnSpeed;                                         // 0xe0(0x4)
	char                                                         pad0x4_DNXMM[0x4];                                 // 0xe4(0x4)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class FilterLocationsBasedOfZDistanceTaleStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerStreamedLevelServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GetIntoAttackPositionAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileWeaponStateInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FleeAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x38 (Full Size[0x98] - InheritedSize[0x60]
class BuryingTaleQuestService: public TaleQuestService
{
public:
	char                                                         pad0x38_GVP0F[0x38];                               // 0x60(0x38)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AthenaAnimationItemListingMappingsAsset: public DataAsset
{
public:
	struct AthenaAnimationItemListingMappingType                 MaleListings;                                      // 0x28(0x20)
	struct AthenaAnimationItemListingMappingType                 FemaleListings;                                    // 0x48(0x20)
};


// Size 0x0 (Full Size[0x290] - InheritedSize[0x290]
class EmoteInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetMechanismActivationModeStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	char                                                         ActivationMode;                                    // 0xb0(0x1)
	char                                                         pad0x7_0MTKP[0x7];                                 // 0xb1(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LiquidLauncherStatus: public StatusBase
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class WieldableItemSetComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7HZR9[0x8];                                 // 0xb8(0x8)
	TArray<struct WieldedItemData>                               WieldableItems;                                    // 0xc0(0x10)
	TArray<class Class*>                                         LockedCategories;                                  // 0xd0(0x10)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class TreasureMapDataAsset: public DataAsset
{
public:
	char                                                         pad0x40_DHHPI[0x40];                               // 0x28(0x40)
	struct TreasureMapDataCaptureParams                          CaptureParams;                                     // 0x68(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhasedActorInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x190] - InheritedSize[0xb8]
class UsableWieldableComponent: public ActorComponent
{
public:
	char                                                         pad0x10_SGW6G[0x10];                               // 0xb8(0x10)
	TArray<struct OneShotInput>                                  OneShotInputNotifications;                         // 0xc8(0x10)
	TArray<struct HoldToUseInput>                                ContinuousUseNotification;                         // 0xd8(0x10)
	bool                                                         PreventOverlappingContinuousUses;                  // 0xe8(0x1)
	bool                                                         ForceFOVOnlyIfHigher;                              // 0xe9(0x1)
	bool                                                         ForceFOVOverrideEnabled;                           // 0xea(0x1)
	char                                                         pad0x1_ARP06[0x1];                                 // 0xeb(0x1)
	float                                                        ForcedFieldOfView;                                 // 0xec(0x4)
	float                                                        MinimumFieldOfView;                                // 0xf0(0x4)
	char                                                         FieldOfViewClampingPreset;                         // 0xf4(0x1)
	char                                                         pad0x3_NS60V[0x3];                                 // 0xf5(0x3)
	float                                                        ForcedFieldOfViewBlendSpeed;                       // 0xf8(0x4)
	float                                                        ForcedFieldOfViewDelay;                            // 0xfc(0x4)
	class CurveFloat*                                            ForcedFieldOfViewScalarMultiplierCurve;            // 0x100(0x8)
	char                                                         pad0x8_FU2SN[0x8];                                 // 0x108(0x8)
	TArray<class Class*>                                         NotificationIdsToIgnore;                           // 0x110(0x10)
	TArray<class Class*>                                         CurrentlyActiveNotifications;                      // 0x120(0x10)
	char                                                         pad0x60_633CB[0x60];                               // 0x130(0x60)
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class ShantyZone: public Actor
{
public:
	class OverlapTriggerComponent*                               AudioZone;                                         // 0x3a0(0x8)
	class UClass*                                                BaseInstrument;                                    // 0x3a8(0x8)
	char                                                         pad0x10_XRLTV[0x10];                               // 0x3b0(0x10)
	class PrimitiveComponent*                                    Root;                                              // 0x3c0(0x8)
	TArray<class Actor*>                                         PlayersInZone;                                     // 0x3c8(0x10)
	class MusicalInstrument*                                     Instrument;                                        // 0x3d8(0x8)
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class PlayerStreamedLevelExit: public Actor
{
public:
	class BoxComponent*                                          TriggerZoneComponent;                              // 0x3a0(0x8)
	char                                                         TeleportItemMode;                                  // 0x3a8(0x1)
	char                                                         pad0x1f_5KNIX[0x1f];                               // 0x3a9(0x1f)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipMineFormationsDataAsset: public DataAsset
{
public:
	TArray<struct AggressiveGhostShipMineFormationOptions>       MineFormationOptions;                              // 0x28(0x10)
};


// Size 0xc0 (Full Size[0x460] - InheritedSize[0x3a0]
class MockHitReactionActor: public Actor
{
public:
	char                                                         pad0x10_7NAEI[0x10];                               // 0x3a0(0x10)
	class MockHitReactionComponent*                              MockHitReactionComponent;                          // 0x3b0(0x8)
	char                                                         pad0xa8_XZUK7[0xa8];                               // 0x3b8(0xa8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetMechanismActionCutsceneActorStep: public TaleQuestStep
{
public:
	class SetMechanismActionCutsceneActorStepDesc*               Desc;                                              // 0x98(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CustomVaultService: public Object
{
public:
	char                                                         pad0x8_2TC4Y[0x8];                                 // 0x28(0x8)
	class World*                                                 World;                                             // 0x30(0x8)
	struct Guid                                                  CustomVaultServiceId;                              // 0x38(0x10)
};


// Size 0x8 (Full Size[0x290] - InheritedSize[0x288]
class RivalVotingInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x8_XX029[0x8];                                 // 0x288(0x8)
};


// Size 0x150 (Full Size[0x290] - InheritedSize[0x140]
class StoreBootyHandInComponent: public InteractableComponent
{
public:
	class UClass*                                                NotificationStartInputID;                          // 0x140(0x8)
	class UClass*                                                NotificationReleaseInputID;                        // 0x148(0x8)
	char                                                         DisplayPriority;                                   // 0x150(0x1)
	bool                                                         TorchVFXOffIfStorageEmpty;                         // 0x151(0x1)
	bool                                                         EyesVFXOffIfStorageEmpty;                          // 0x152(0x1)
	char                                                         pad0x1_CRR0M[0x1];                                 // 0x153(0x1)
	struct FName                                                 ScalarVectorNameToOverride;                        // 0x154(0x8)
	float                                                        CanStoreGlowValue;                                 // 0x15c(0x4)
	float                                                        HasSomethingStoredGlowValue;                       // 0x160(0x4)
	float                                                        CannotStoreGlowValue;                              // 0x164(0x4)
	float                                                        PulseGlowValue;                                    // 0x168(0x4)
	float                                                        ChangeDuration;                                    // 0x16c(0x4)
	float                                                        VFXEmptyGlow;                                      // 0x170(0x4)
	float                                                        VFXPartialGlow;                                    // 0x174(0x4)
	float                                                        VFXFullGlow;                                       // 0x178(0x4)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterialMap;                                // 0x198(0x10)
	class Controller*                                            LocalController;                                   // 0x1a8(0x8)
	class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x1b0(0x8)
	char                                                         pad0xb0_RUXOR[0xb0];                               // 0x1b8(0xb0)
	class ActionRulesComponent*                                  OwnerActionRulesComponent;                         // 0x268(0x8)
	class WwiseEvent*                                            OnStoredSFX;                                       // 0x270(0x8)
	class ParticleSystemComponent*                               TorchVfx;                                          // 0x278(0x8)
	class ParticleSystemComponent*                               EyesVFX;                                           // 0x280(0x8)
	class ParticleSystemComponent*                               ChestVFX;                                          // 0x288(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TitleLoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialogueAudioInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmblemSettings: public Object
{
public:
	struct StringAssetReference                                  EmblemDefinitionAssetListLocation;                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationLocomotionComponentFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class GenericMarkerService: public Actor
{
public:
	char                                                         pad0x28_H53MN[0x28];                               // 0x3a0(0x28)
	TArray<struct CanvasWorldMapGeneric>                         GenericMarkers;                                    // 0x3c8(0x10)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class MerchantQuestDescSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  MerchantQuestDescDataLocation;                     // 0x38(0x10)
	struct StringAssetReference                                  MerchantQuestDescDebugDataLocation;                // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class QuestTableServiceInterface: public Interface
{
public:
};


// Size 0x2d0 (Full Size[0x5a0] - InheritedSize[0x2d0]
class TrinketMountpointManagerComponent: public SceneComponent
{
public:
	char                                                         pad0x18_WYYQW[0x18];                               // 0x2d0(0x18)
	class MountpointParamsDataAsset*                             MountpointParamsDataAsset;                         // 0x2e8(0x8)
	TArray<struct ReplicatedMountpointData>                      ReplicatedMountpointData;                          // 0x2f0(0x10)
	TArray<bool>                                                 IsNudged;                                          // 0x300(0x10)
	int                                                          MountedItemCount;                                  // 0x330(0x4)
	char                                                         pad0x4_PH9C7[0x4];                                 // 0x334(0x4)
	class WwiseObjectPoolWrapper*                                TrinketSfxPool;                                    // 0x338(0x8)
	bool                                                         TrinketsEnabled;                                   // 0x340(0x1)
	bool                                                         TrinketsShouldBeDisplayed;                         // 0x341(0x1)
	char                                                         pad0x2_4H9U4[0x2];                                 // 0x342(0x2)
	struct FName                                                 Feature;                                           // 0x344(0x8)
	char                                                         pad0x4_DDYCC[0x4];                                 // 0x34c(0x4)
	struct MountTrinketActionRuleParams                          MountTrinketActionRuleParams;                      // 0x350(0x88)
	struct StraightenNudgedTrinketActionRuleParams               StraightenNudgedTrinketActionRuleParams;           // 0x3d8(0x40)
	TArray<class Class*>                                         TrinketCategoriesToDisplayInUI;                    // 0x418(0x10)
	TArray<class Class*>                                         ComponentsAllowedForTrinketVisuals;                // 0x428(0x10)
	TArray<class NudgePolicy*>                                   NudgePolicies;                                     // 0x438(0x10)
	class TrinketLoadoutFinderPolicyBase*                        TrinketLoadoutFinderPolicy;                        // 0x448(0x8)
	TArray<bool>                                                 CachedCanTrinketEverBeNudged;                      // 0x450(0x10)
	TArray<struct MountpointClientState>                         MountpointClientStates;                            // 0x460(0x10)
	float                                                        TickRelevancySquared;                              // 0x470(0x4)
	char                                                         pad0x4_1LR3I[0x4];                                 // 0x474(0x4)
	TArray<struct TrinketNudgeProgress>                          NudgingTrinketProgress;                            // 0x478(0x10)
	char                                                         pad0x100_B6TOY[0x100];                             // 0x488(0x100)
	TArray<class StaticMeshComponent*>                           TrinketReplacementMeshes;                          // 0x588(0x10)
	char                                                         pad0x8_9B3YV[0x8];                                 // 0x598(0x8)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InIslandSafeZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_4STEJ[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_NamedPoints: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneTargetInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class InviteReceivedPopUpSettings: public Object
{
public:
	struct StringAssetReference                                  SteamSingleInvitePopUpAssetLocation;               // 0x28(0x10)
	struct StringAssetReference                                  SteamMultipleInvitesPopUpAssetLocation;            // 0x38(0x10)
};


// Size 0xc8 (Full Size[0x180] - InheritedSize[0xb8]
class OnboardCharacterTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0xb8_XP4M9[0xb8];                               // 0xb8(0xb8)
	TArray<uintptr_t>                                            OnboardCharacters;                                 // 0x170(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipCustomizationInfo: public DataAsset
{
public:
	class UClass*                                                Category;                                          // 0x28(0x8)
	TArray<struct ShipSizePartCustomizationInfo>                 ShipSizeCustomizations;                            // 0x30(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class VoteValidatorInlineBase: public Object
{
public:
	char                                                         pad0x8_T2RJZ[0x8];                                 // 0x28(0x8)
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class BurpComponent: public ActorComponent
{
public:
	float                                                        MinGasToTriggerBurp;                               // 0xb8(0x4)
	float                                                        MinRandomBurpDelay;                                // 0xbc(0x4)
	float                                                        MaxRandomBurpDelay;                                // 0xc0(0x4)
	float                                                        GasDecayPerSecond;                                 // 0xc4(0x4)
	class WwiseEvent*                                            BurpSfx;                                           // 0xc8(0x8)
	struct FName                                                 BurpStrengthRTPCName;                              // 0xd0(0x8)
	char                                                         pad0x18_1MVYW[0x18];                               // 0xd8(0x18)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ClearSpawnProgressStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UserSettingsServiceInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class ContestTeamAssignmentComponent: public ActorComponent
{
public:
	char                                                         pad0x30_Z7R3R[0x30];                               // 0xb8(0x30)
	class ContestShipCatalogueDataAsset*                         ArenaShipCatalogue;                                // 0xe8(0x8)
	char                                                         pad0x8_1GUV6[0x8];                                 // 0xf0(0x8)
	TArray<struct ShipLiveryTeamSet>                             CachedTeamSets;                                    // 0xf8(0x10)
	TArray<struct ShipLiveryTeamSet>                             CachedUniqueTeamSets;                              // 0x108(0x10)
	TArray<struct ContestShipLiverySet>                          LiverySets;                                        // 0x118(0x10)
	TArray<struct ContestShipLiverySet>                          CurrentlyAvaliableLiverySets;                      // 0x128(0x10)
	char                                                         pad0x18_XZCQ9[0x18];                               // 0x138(0x18)
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class RammableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_H2BDJ[0x8];                                 // 0xb8(0x8)
	class RammableDamageDataAsset*                               DamageSettings;                                    // 0xc0(0x8)
	float                                                        MinIntervalBetweenRamDamage;                       // 0xc8(0x4)
	char                                                         pad0x4_TJANB[0x4];                                 // 0xcc(0x4)
	char                                                         pad0x20_4M0ID[0x20];                               // 0xd0(0x20)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CrewNameplatesToggleInputId: public NotificationInputId
{
public:
};


// Size 0x170 (Full Size[0x510] - InheritedSize[0x3a0]
class SeatCollection: public Actor
{
public:
	char                                                         pad0x10_3OVA8[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        Root;                                              // 0x3b0(0x8)
	char                                                         pad0x158_UZKWR[0x158];                             // 0x3b8(0x158)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WielderAnimationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class TutorialTaleQuestService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SatiatedStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0x408] - InheritedSize[0x3f8]
class Seagulls: public ShortRangeMarker
{
public:
	char                                                         pad0x8_JO3M7[0x8];                                 // 0x3f8(0x8)
	bool                                                         ShouldMigrate;                                     // 0x400(0x1)
	char                                                         pad0x7_ESB0Q[0x7];                                 // 0x401(0x7)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class AICharacterPartsDesc: public MeshMemoryConstraintsAIPartsDesc
{
public:
	struct StringAssetReference                                  KilledVfxTemplate;                                 // 0x80(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BaseWorldMarker: public Object
{
public:
	struct Vector_NetQuantize                                    MarkerPosition;                                    // 0x28(0xc)
	char                                                         pad0x4_Y9T2G[0x4];                                 // 0x34(0x4)
	class UClass*                                                Variant;                                           // 0x38(0x8)
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestIsFeatureEnabledStepDesc: public TaleQuestStepDesc
{
public:
	struct FeatureFlag                                           Feature;                                           // 0x80(0xc)
	char                                                         pad0x4_PFGFE[0x4];                                 // 0x8c(0x4)
	struct QuestVariableBool                                     Enabled;                                           // 0x90(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ContestAddItemToHandInListStep: public TaleQuestStep
{
public:
};


// Size 0xb8 (Full Size[0x170] - InheritedSize[0xb8]
class HitDetectionComponent: public ActorComponent
{
public:
	char                                                         pad0x8_M5ONX[0x8];                                 // 0xb8(0x8)
	float                                                        MaxTimedSweepWaitTime;                             // 0xc0(0x4)
	char                                                         pad0xac_7H1LL[0xac];                               // 0xc4(0xac)
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class GenericWorldMapMarker: public ActorComponent
{
public:
	char                                                         pad0x8_R2OHJ[0x8];                                 // 0xb8(0x8)
	struct CanvasWorldMapGeneric                                 Marker;                                            // 0xc0(0x20)
	bool                                                         RegisterOnSpawn;                                   // 0xe0(0x1)
	char                                                         pad0x27_WEY9A[0x27];                               // 0xe1(0x27)
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class BuriedTreasureLocation: public Actor
{
public:
	class SphereComponent*                                       BaseComponent;                                     // 0x3a0(0x8)
	TArray<class PhysicalMaterial*>                              DiggableSurfaceTypes;                              // 0x3a8(0x10)
	bool                                                         StopVerification;                                  // 0x3b8(0x1)
	char                                                         pad0xf_GBFB7[0xf];                                 // 0x3b9(0xf)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_CursedSkellyFortEventSignal: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandEventTooltipProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StreamingLocationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ScrambleGamertagsToggleInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TotallyPointlessClass: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerNPCNotificationsServiceInterface: public Interface
{
public:
};


// Size 0xc0 (Full Size[0x178] - InheritedSize[0xb8]
class FrontendCameraComponent: public ActorComponent
{
public:
	char                                                         pad0xc0_S5BF3[0xc0];                               // 0xb8(0xc0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MimicInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EatingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x78 (Full Size[0x418] - InheritedSize[0x3a0]
class HotTub: public Actor
{
public:
	char                                                         pad0x8_3YAL5[0x8];                                 // 0x3a0(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x3a8(0x8)
	float                                                        LiquidCollectionAmount;                            // 0x3b0(0x4)
	char                                                         pad0x4_PPB5A[0x4];                                 // 0x3b4(0x4)
	class SceneComponent*                                        Root;                                              // 0x3b8(0x8)
	class ShapeComponent*                                        CollisionComponent;                                // 0x3c0(0x8)
	char                                                         pad0x30_1BHSZ[0x30];                               // 0x3c8(0x30)
	TArray<class AthenaPlayerState*>                             PlayersInHotTub;                                   // 0x3f8(0x10)
	char                                                         pad0x10_HXED0[0x10];                               // 0x408(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildPlaqueAccessorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PortalBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AutoMoveNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildServiceFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xb0 (Full Size[0x380] - InheritedSize[0x2d0]
class LeakerComponent: public SceneComponent
{
public:
	char                                                         pad0x8_VAHRD[0x8];                                 // 0x2d0(0x8)
	class ParticleSystem*                                        ParticleSystem_WaterLeakAboveWater;                // 0x2d8(0x8)
	class ParticleSystem*                                        ParticleSystem_WaterLeakBelowWater;                // 0x2e0(0x8)
	class ParticleSystem*                                        ParticleSystem_RepairLeakAboveWater;               // 0x2e8(0x8)
	class ParticleSystem*                                        ParticleSystem_RepairLeakBelowWater;               // 0x2f0(0x8)
	class WwiseEvent*                                            WaterLeakSfx_Play;                                 // 0x2f8(0x8)
	class WwiseEvent*                                            WaterLeakSfx_Stop;                                 // 0x300(0x8)
	class WwiseEvent*                                            WaterLeakRepairSfx_Play;                           // 0x308(0x8)
	class WwiseEvent*                                            WaterLeakRepairSfx_Stop;                           // 0x310(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchGroup;                    // 0x318(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchDefaultAboveWater;        // 0x320(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchUnderwater;               // 0x328(0x8)
	float                                                        WaterLeakFadeTime;                                 // 0x330(0x4)
	struct FName                                                 WaterLeakEmitterName;                              // 0x334(0x8)
	char                                                         pad0x4_FQCB7[0x4];                                 // 0x33c(0x4)
	class WwiseObjectPoolWrapper*                                WaterLeakWisePool;                                 // 0x340(0x8)
	TArray<struct Leak>                                          Leaks;                                             // 0x348(0x10)
	char                                                         pad0x28_HIRNN[0x28];                               // 0x358(0x28)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseTriggerDrunkenness: public StatusResponse
{
public:
	float                                                        TargetDrunkenness;                                 // 0x38(0x4)
	char                                                         SourceOfDrunkenness;                               // 0x3c(0x1)
	char                                                         pad0x3_K2QZ7[0x3];                                 // 0x3d(0x3)
};


// Size 0x858 (Full Size[0x880] - InheritedSize[0x28]
class AthenaAITeamsService: public Object
{
public:
	char                                                         pad0x858_LF7FU[0x858];                             // 0x28(0x858)
};


// Size 0x1a8 (Full Size[0x1e0] - InheritedSize[0x38]
class EntitlementSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  EntitlementMap;                                    // 0x38(0x10)
	struct StringAssetReference                                  EntitlementRedirectors;                            // 0x48(0x10)
	struct StringAssetReference                                  DefaultEntitlementsAsset;                          // 0x58(0x10)
	struct StringAssetReference                                  ErroneousEntitlementsAsset;                        // 0x68(0x10)
	TArray<struct FeaturedEntitlements>                          EntitlementsAssetOverrides;                        // 0x78(0x10)
	struct StringAssetReference                                  EntitlementAllowanceDataAsset;                     // 0x88(0x10)
	struct StringAssetReference                                  MissingIcon;                                       // 0x98(0x10)
	struct StringAssetReference                                  EntitlementBundleMapper;                           // 0xa8(0x10)
	TArray<struct StringAssetReference>                          CosmeticEntitlements;                              // 0xb8(0x10)
	char                                                         pad0x118_4IA2R[0x118];                             // 0xc8(0x118)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerPrivilegeInterface: public Interface
{
public:
};


// Size 0x258 (Full Size[0x280] - InheritedSize[0x28]
class MeleeAttackDataAsset: public DataAsset
{
public:
	struct FName                                                 AttackName;                                        // 0x28(0x8)
	float                                                        WarmUpDuration;                                    // 0x30(0x4)
	float                                                        StrikeDuration;                                    // 0x34(0x4)
	float                                                        RecoverMissDuration;                               // 0x38(0x4)
	float                                                        RecoverHitDuration;                                // 0x3c(0x4)
	float                                                        LungeMoveStartTime;                                // 0x40(0x4)
	float                                                        LungeMoveDuration;                                 // 0x44(0x4)
	float                                                        LungeMoveMaxSpeed;                                 // 0x48(0x4)
	char                                                         AttackMoveSpeed;                                   // 0x4c(0x1)
	char                                                         pad0x3_4HU2K[0x3];                                 // 0x4d(0x3)
	float                                                        AttackMoveSpeedDeactivationAllowedWindow;          // 0x50(0x4)
	float                                                        ComboTime;                                         // 0x54(0x4)
	bool                                                         DefenderKnockbackEnabled;                          // 0x58(0x1)
	char                                                         pad0x3_PMMNC[0x3];                                 // 0x59(0x3)
	struct KnockBackInfo                                         DefenderKnockback;                                 // 0x5c(0x54)
	bool                                                         DefenderKnockbackWhenBlockingEnabled;              // 0xb0(0x1)
	char                                                         pad0x3_ZSORG[0x3];                                 // 0xb1(0x3)
	struct KnockBackInfo                                         DefenderKnockbackWhenBlocking;                     // 0xb4(0x54)
	bool                                                         AttackerKnockbackEnabled;                          // 0x108(0x1)
	char                                                         pad0x3_JPBDY[0x3];                                 // 0x109(0x3)
	struct KnockBackInfo                                         AttackerKnockback;                                 // 0x10c(0x54)
	bool                                                         AttackerKnockbackWhenBlockingEnabled;              // 0x160(0x1)
	char                                                         pad0x3_Y0OM6[0x3];                                 // 0x161(0x3)
	struct KnockBackInfo                                         AttackerKnockbackWhenBlocking;                     // 0x164(0x54)
	bool                                                         LockOnEnabled;                                     // 0x1b8(0x1)
	char                                                         pad0x3_KXE7T[0x3];                                 // 0x1b9(0x3)
	struct AttackTimingWindow                                    UninterruptableWindow;                             // 0x1bc(0x8)
	float                                                        HitStartRange;                                     // 0x1c4(0x4)
	float                                                        HitEndRange;                                       // 0x1c8(0x4)
	float                                                        HitStartAngle;                                     // 0x1cc(0x4)
	float                                                        HitAngleDelta;                                     // 0x1d0(0x4)
	float                                                        HitSphereRadius;                                   // 0x1d4(0x4)
	float                                                        HitTimeOffset;                                     // 0x1d8(0x4)
	float                                                        HitDuration;                                       // 0x1dc(0x4)
	TArray<struct HitDetectionParamsOverride>                    HitDetectionParamsOverrides;                       // 0x1e0(0x10)
	float                                                        AttackDamage;                                      // 0x1f0(0x4)
	char                                                         pad0x4_2SIMX[0x4];                                 // 0x1f4(0x4)
	class UClass*                                                DamagerType;                                       // 0x1f8(0x8)
	char                                                         HealthChangeReason;                                // 0x200(0x1)
	bool                                                         IsUnblockable;                                     // 0x201(0x1)
	bool                                                         StunOnMiss;                                        // 0x202(0x1)
	char                                                         pad0x5_H3MNZ[0x5];                                 // 0x203(0x5)
	TArray<struct StunAttackerOnHitSurfacePair>                  StunAttackerOnHitSurfaces;                         // 0x208(0x10)
	bool                                                         StunOnHit;                                         // 0x218(0x1)
	char                                                         pad0x3_AHHWE[0x3];                                 // 0x219(0x3)
	float                                                        StunOnHitDurationPlayer;                           // 0x21c(0x4)
	float                                                        StunOnHitDurationCharacter;                        // 0x220(0x4)
	char                                                         AnimationLookupType;                               // 0x224(0x1)
	char                                                         pad0x3_6HYIJ[0x3];                                 // 0x225(0x3)
	char                                                         AnimationType;                                     // 0x22c(0x1)
	char                                                         pad0x3_ZNH3J[0x3];                                 // 0x22d(0x3)
	class UClass*                                                ImpactId;                                          // 0x230(0x8)
	class UClass*                                                AttackerHitLandedCameraShake;                      // 0x238(0x8)
	class ForceFeedbackEffect*                                   AttackerHitLandedForceFeedbackEffect;              // 0x240(0x8)
	class UClass*                                                DefenderHitReceivedCameraShake;                    // 0x248(0x8)
	class ForceFeedbackEffect*                                   DefenderHitReceivedForceFeedbackEffect;            // 0x250(0x8)
	float                                                        ClampYawRange;                                     // 0x258(0x4)
	float                                                        ClampYawRate;                                      // 0x25c(0x4)
	struct Status                                                AppliedStatusOnHit;                                // 0x260(0x20)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ContestModuleSettingsDataAsset: public DataAsset
{
public:
	class UClass*                                                ArenaRowboatClass;                                 // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FirstPersonAnimaticActionStateId: public ActionStateId
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class SwingDoorAudioParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                SwingDoorPool;                                     // 0x28(0x8)
	class WwiseEvent*                                            SwingDoorOpeningLoopStart;                         // 0x30(0x8)
	class WwiseEvent*                                            SwingDoorOpeningLoopStop;                          // 0x38(0x8)
	class WwiseEvent*                                            SwingDoorOpeningAdditionalStopSound;               // 0x40(0x8)
	class WwiseEvent*                                            SwingDoorClosingLoopStart;                         // 0x48(0x8)
	class WwiseEvent*                                            SwingDoorClosingLoopStop;                          // 0x50(0x8)
	class WwiseEvent*                                            SwingDoorClosingAdditionalStopSound;               // 0x58(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AppearComponentInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x400] - InheritedSize[0x3a0]
class SeaFortCannonsMechanismTrigger: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3a8(0x8)
	float                                                        InnerRadius;                                       // 0x3b0(0x4)
	float                                                        OuterRadius;                                       // 0x3b4(0x4)
	bool                                                         EnableReactivationTimeLimit;                       // 0x3b8(0x1)
	char                                                         pad0x3_GQH8W[0x3];                                 // 0x3b9(0x3)
	float                                                        ReactivationTimeLimitMinutes;                      // 0x3bc(0x4)
	bool                                                         IgnoreSeaFortDormantState;                         // 0x3c0(0x1)
	char                                                         pad0x3f_1FPUA[0x3f];                               // 0x3c1(0x3f)
};


// Size 0x28 (Full Size[0x88] - InheritedSize[0x60]
class TaleStormService: public TaleQuestService
{
public:
	char                                                         pad0x28_MD4DP[0x28];                               // 0x60(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShipsEncounterCloud: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x50 (Full Size[0x108] - InheritedSize[0xb8]
class StaticMeshVoteVisualiserComponent: public ActorComponent
{
public:
	char                                                         pad0x20_0U66L[0x20];                               // 0xb8(0x20)
	TArray<struct StaticMeshVoteIndicator>                       VoteIndicators;                                    // 0xd8(0x10)
	float                                                        VoteAnimationTime;                                 // 0xe8(0x4)
	char                                                         pad0x4_LCBQT[0x4];                                 // 0xec(0x4)
	class UClass*                                                CurrentCompany;                                    // 0xf0(0x8)
	TArray<class Class*>                                         VoteCompanies;                                     // 0xf8(0x10)
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class AimSensitivityComponent: public ActorComponent
{
public:
	char                                                         pad0x40_J37KB[0x40];                               // 0xb8(0x40)
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class GetDigSpotProgressTaleQuestStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    BuriedActorReference;                              // 0x80(0x30)
	struct QuestVariableGuid                                     BuriedActorId;                                     // 0xb0(0x30)
	struct QuestVariableInt                                      OutNumberOfDigsRemaining;                          // 0xe0(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpawnSkeletonAIOnShipStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PersistenceIdentifierSettingsAsset: public DataAsset
{
public:
	TArray<class PersistenceIdentifierMap*>                      PersistenceMapData;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaLocalPlayerRetrievalInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class FlamethrowerChargeVisuals: public Object
{
public:
	char                                                         pad0x20_RTDOU[0x20];                               // 0x28(0x20)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x48(0x10)
	char                                                         pad0x10_2D0Z4[0x10];                               // 0x58(0x10)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class InvasionDepartureTunnelTaleService: public TaleQuestService
{
public:
	char                                                         pad0x10_PO27L[0x10];                               // 0x60(0x10)
};


// Size 0xc8 (Full Size[0x128] - InheritedSize[0x60]
class TaleQuestShipCustomizationService: public TaleQuestService
{
public:
	char                                                         pad0x98_XSL7C[0x98];                               // 0x60(0x98)
	class UClass*                                                CustomisationDescToEquip;                          // 0xf8(0x8)
	class UClass*                                                PreviousCustomisationDesc;                         // 0x100(0x8)
	class UClass*                                                CustomizationCategoryToLock;                       // 0x108(0x8)
	char                                                         pad0x18_NOVFJ[0x18];                               // 0x110(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EntitlementBundleMapperDataAsset: public DataAsset
{
public:
	TArray<struct EntitlementBundle>                             Bundles;                                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DiggingSfxProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeSpinAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x10 (Full Size[0x310] - InheritedSize[0x300]
class AnimNotifyAdditionalEventsWwiseEmitterComponent: public AnimNotifyWwiseEmitterComponent
{
public:
	TArray<struct AnimNotifyWwiseObserver>                       AnimNotifyObservers;                               // 0x300(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class BlowpipeDartDataAsset: public DataAsset
{
public:
	class StaticMesh*                                            DartMesh;                                          // 0x28(0x8)
	class UClass*                                                DartItemDesc;                                      // 0x30(0x8)
	int                                                          MaxDartCapacity;                                   // 0x38(0x4)
	bool                                                         CreateImpactProxy;                                 // 0x3c(0x1)
	char                                                         DartAmmoType;                                      // 0x3d(0x1)
	char                                                         pad0x2_EG500[0x2];                                 // 0x3e(0x2)
	struct FName                                                 FeatureName;                                       // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugShipFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldVelocityTrackerInterface: public Interface
{
public:
};


// Size 0x138 (Full Size[0x1f0] - InheritedSize[0xb8]
class ChestOfRageComponent: public ActorComponent
{
public:
	char                                                         pad0x8_BGRZ2[0x8];                                 // 0xb8(0x8)
	class ChestOfRageDataAsset*                                  ChestOfRageDataAsset;                              // 0xc0(0x8)
	struct ChestOfRageReplicatedData                             ReplicatedData;                                    // 0xc8(0xc)
	char                                                         pad0x8c_96EN1[0x8c];                               // 0xd4(0x8c)
	class ParticleSystemComponent*                               RageBuildingVfxEmitter;                            // 0x160(0x8)
	class ParticleSystemComponent*                               SteamingVfxEmitter;                                // 0x168(0x8)
	class ParticleSystemComponent*                               OnFireVfxEmitter;                                  // 0x170(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x178(0x10)
	TArray<class Actor*>                                         RageContributors;                                  // 0x188(0x10)
	char                                                         pad0x58_GUK9Z[0x58];                               // 0x198(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AdditionalNetRelevancyPointsInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemSpawnTransformWithRandomQuantityDataAssset: public DataAsset
{
public:
	TArray<struct ItemSpawnTransformWithRandomQuantity>          ItemSpawnData;                                     // 0x28(0x10)
};


// Size 0xe0 (Full Size[0x198] - InheritedSize[0xb8]
class ReplenishableComponent: public ActorComponent
{
public:
	char                                                         pad0x10_KPM2W[0x10];                               // 0xb8(0x10)
	class StorageContainerContentTypeSelector*                   ContentTypeSelector;                               // 0xc8(0x8)
	bool                                                         ShouldRefresh;                                     // 0xd0(0x1)
	char                                                         ReplenishableType;                                 // 0xd1(0x1)
	bool                                                         ExemptFromBarrelLootModifiers;                     // 0xd2(0x1)
	char                                                         pad0x5_XHRP4[0x5];                                 // 0xd3(0x5)
	TArray<class StorageContainerContentModifier*>               ContentModifiers;                                  // 0xd8(0x10)
	TArray<struct StorageContainerNode>                          DefaultStockLevels;                                // 0xe8(0x10)
	char                                                         pad0x8_DSYAD[0x8];                                 // 0xf8(0x8)
	class Object*                                                Aggregator;                                        // 0x100(0x8)
	char                                                         pad0x58_TLWZI[0x58];                               // 0x108(0x58)
	struct ModifiedStorageContainerRefreshedTelemetryEvent       PendingModifiedStorageContainerRefreshedTelemetryEvent; // 0x160(0x30)
	char                                                         pad0x8_J4T68[0x8];                                 // 0x190(0x8)
};


// Size 0x18 (Full Size[0x98] - InheritedSize[0x80]
class WaitForItemDroppedOnShipStepDesc: public TaleQuestStepDesc
{
public:
	class UClass*                                                DroppedItemCategory;                               // 0x80(0x8)
	TArray<struct Name>                                          PermittedRarities;                                 // 0x88(0x10)
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class MaterialManipulationComponent: public ActorComponent
{
public:
	TArray<struct ScalarParameterValue>                          ScalarParameterValues;                             // 0xb8(0x10)
	TArray<struct TextureParameterValue>                         TextureParameterValues;                            // 0xc8(0x10)
	TArray<struct VectorParameterValue>                          VectorParameterValues;                             // 0xd8(0x10)
	char                                                         pad0x8_6SCB5[0x8];                                 // 0xe8(0x8)
	TArray<struct DynamicMaterialListContainer>                  DynamicMaterials;                                  // 0xf0(0x10)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class ProposalContainerManifestOverrideComponent: public ActorComponent
{
public:
	char                                                         pad0x18_8M665[0x18];                               // 0xb8(0x18)
	struct Guid                                                  AssociatedCrewID;                                  // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ResetVaultStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SteamImpactStatus: public StatusBase
{
public:
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InShipwreckZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_61KUM[0x4];                                 // 0x174(0x4)
};


// Size 0x160 (Full Size[0x188] - InheritedSize[0x28]
class FishDataAsset: public DataAsset
{
public:
	float                                                        CruisingDepthBeneathWaterHeight;                   // 0x28(0x4)
	float                                                        RisingFromTheDepthsSpeed;                          // 0x2c(0x4)
	float                                                        EscapingToTheDepthsSpeed;                          // 0x30(0x4)
	char                                                         pad0x4_K2XXY[0x4];                                 // 0x34(0x4)
	struct WeightedProbabilityRangeOfRanges                      TimeReelingWhenBattlingToSnapLine;                 // 0x38(0x30)
	float                                                        ReelingCooldownMultiplier;                         // 0x68(0x4)
	char                                                         pad0x4_06CU9[0x4];                                 // 0x6c(0x4)
	struct WeightedProbabilityRange                              NumberOfLoopsBeforeBiting;                         // 0x70(0x20)
	struct WeightedProbabilityRangeOfRanges                      MinimumDistanceFromPlayer;                         // 0x90(0x30)
	float                                                        DistanceFromPlayerToCatchFish;                     // 0xc0(0x4)
	struct FloatRange                                            SecondsToRemainBeforeDespawning;                   // 0xc4(0x10)
	float                                                        FloatBobDepthOnBeingHooked;                        // 0xd4(0x4)
	float                                                        RodBendAmountWhenBiting;                           // 0xd8(0x4)
	float                                                        RodBendAmountWhenBattling;                         // 0xdc(0x4)
	float                                                        RodBendAmountWhenRecovering;                       // 0xe0(0x4)
	char                                                         pad0x4_6CU8C[0x4];                                 // 0xe4(0x4)
	class Object*                                                SplashVFXWhenBeingTired;                           // 0xe8(0x8)
	class Object*                                                SplashVFXWhenBattling;                             // 0xf0(0x8)
	class Object*                                                SplashVFXWhenJumpingOutOfWater;                    // 0xf8(0x8)
	class Object*                                                SplashVFXWhenLandingInToWater;                     // 0x100(0x8)
	float                                                        SplashZOffset;                                     // 0x108(0x4)
	float                                                        FloatReelingMoveSpeedWhenMovingToMinimumDistanceFromPlayer; // 0x10c(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenMovingToMinimumDistanceFromPlayer; // 0x110(0x4)
	float                                                        FloatReelingMoveSpeedWhenBattling;                 // 0x114(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenBattling;              // 0x118(0x4)
	float                                                        FloatReelingMoveSpeedWhenNotBattling;              // 0x11c(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenNotBattling;           // 0x120(0x4)
	float                                                        TimeBetweenIsBlockedHitChecksOnServer;             // 0x124(0x4)
	float                                                        TimeBeforeTurningOnHits;                           // 0x128(0x4)
	char                                                         HitTestTraceChannel;                               // 0x12c(0x1)
	char                                                         pad0x3_OH00Y[0x3];                                 // 0x12d(0x3)
	float                                                        HitDetectionHalfExtentXY;                          // 0x130(0x4)
	float                                                        HitDetectionHalfExtentZ;                           // 0x134(0x4)
	float                                                        HitDetectionZOffset;                               // 0x138(0x4)
	char                                                         pad0x4_VU3R6[0x4];                                 // 0x13c(0x4)
	class WwiseObjectPoolWrapper*                                FishingFishPool;                                   // 0x140(0x8)
	struct FName                                                 FishTiredSwitchGroup;                              // 0x148(0x8)
	struct FName                                                 FishTiredSwitchDefault;                            // 0x150(0x8)
	struct FName                                                 FishTiredSwitchTired;                              // 0x158(0x8)
	class WwiseEvent*                                            FishBiteAndStruggleStart;                          // 0x160(0x8)
	class WwiseEvent*                                            FishBiteAndStruggleStop;                           // 0x168(0x8)
	class WwiseEvent*                                            FishJumpOutOfWater;                                // 0x170(0x8)
	class WwiseEvent*                                            FishJumpIntoWater;                                 // 0x178(0x8)
	class ForceFeedbackEffect*                                   FishBitingForceFeedback;                           // 0x180(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageInstigatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyDNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLoadoutViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class CancelTaleStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class GhostAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	class StaticMesh*                                            GhostShroudStaticMesh;                             // 0x98(0x8)
	struct FName                                                 GhostShroudAttachSocketName;                       // 0xa0(0x8)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class BlueprintStepBase: public Object
{
public:
	char                                                         BeginMode;                                         // 0x28(0x1)
	char                                                         pad0x7_73XJ6[0x7];                                 // 0x29(0x7)
	class TaleQuestBlueprintStepDesc*                            Desc;                                              // 0x30(0x8)
	char                                                         pad0x58_K0LXL[0x58];                               // 0x38(0x58)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class TinVoyageSettings: public DeveloperSettings
{
public:
	int                                                          ShipVoyageOverallInventoryCapacity;                // 0x38(0x4)
	int                                                          ShipVoyageCompanyIndicatorCount;                   // 0x3c(0x4)
	TArray<struct TinVoyageDebugEntry>                           DebugVoyageEntries;                                // 0x40(0x10)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class HitRegSnapshotRedirectImpactToReplicatedMovementAttachParentComponent: public ActorComponent
{
public:
	char                                                         pad0x8_1OVKG[0x8];                                 // 0xb8(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class CutscenePoolType: public DataAsset
{
public:
	bool                                                         DialogueSelectedRandomly;                          // 0x28(0x1)
	char                                                         pad0x7_G1SRG[0x7];                                 // 0x29(0x7)
	TArray<int>                                                  AvailableIndices;                                  // 0x30(0x10)
	char                                                         pad0x8_S2BXY[0x8];                                 // 0x40(0x8)
	TArray<int>                                                  OriginalIndices;                                   // 0x48(0x10)
};


// Size 0x58 (Full Size[0xb8] - InheritedSize[0x60]
class BTTask_PickLocationWithinDigsite: public BTTaskNode
{
public:
	struct BlackboardKeySelector                                 DigsiteBlackboardKey;                              // 0x60(0x28)
	struct BlackboardKeySelector                                 ChosenLocationBlackboardKey;                       // 0x88(0x28)
	bool                                                         ReserveChosenDigspot;                              // 0xb0(0x1)
	char                                                         pad0x3_LBY0U[0x3];                                 // 0xb1(0x3)
	float                                                        ReservationAreaRadius;                             // 0xb4(0x4)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SpawnActorBaseStep: public TaleQuestStep
{
public:
	class SpawnActorStepDescBase*                                BaseDesc;                                          // 0x98(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class LandmarkFrameworkSettings: public DeveloperSettings
{
public:
	float                                                        LandmarkAudioZoneRadius;                           // 0x38(0x4)
	float                                                        LandmarkAudioZoneHeight;                           // 0x3c(0x4)
};


// Size 0x160 (Full Size[0x500] - InheritedSize[0x3a0]
class ReapersMarkService: public Actor
{
public:
	char                                                         pad0x8_PA1TU[0x8];                                 // 0x3a0(0x8)
	class ReapersMarkSettingsAsset*                              Settings;                                          // 0x3a8(0x8)
	char                                                         pad0x100_PKTZO[0x100];                             // 0x3b0(0x100)
	char                                                         pad0x50_9INMY[0x50];                               // 0x4b0(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IdentifiedAsGhostPlayerInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class EmergentWatercraftSwitchesDataAsset: public DataAsset
{
public:
	struct EmergentWatercraftSwitches                            EmergentWatercraftSwitches;                        // 0x28(0x20)
};


// Size 0x108 (Full Size[0x4a8] - InheritedSize[0x3a0]
class PetActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	struct PetSpawnActionStateParams                             SpawnParams;                                       // 0x3a0(0x40)
	struct PetDespawnActionStateParams                           DespawnParams;                                     // 0x3e0(0x40)
	struct HideInObjectActionStateParams                         HideInObjectParams;                                // 0x420(0x48)
	struct FiredFromActorActionStateParams                       FiredFromActorParams;                              // 0x468(0x28)
	char                                                         pad0x18_4DLY9[0x18];                               // 0x490(0x18)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseHealthChange: public StatusResponse
{
public:
	float                                                        HealthChangeAmount;                                // 0x38(0x4)
	char                                                         HealthChangedReason;                               // 0x3c(0x1)
	char                                                         pad0x3_BLDK0[0x3];                                 // 0x3d(0x3)
};


// Size 0x30 (Full Size[0x90] - InheritedSize[0x60]
class TaleQuestResetShipBuoyancyService: public TaleQuestService
{
public:
	class TaleQuestResetShipBuoyancyServiceDesc*                 ServiceDesc;                                       // 0x60(0x8)
	char                                                         pad0x28_QLOVW[0x28];                               // 0x68(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanActorBeFiredFromInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandAirPocketComponentInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SoulCollectorConfig: public DataAsset
{
public:
	int                                                          MaxSouls;                                          // 0x28(0x4)
	float                                                        DetectionRange;                                    // 0x2c(0x4)
	bool                                                         CountPlayerKills;                                  // 0x30(0x1)
	char                                                         pad0x3_G1W3K[0x3];                                 // 0x31(0x3)
	int                                                          SoulsPerPlayerKill;                                // 0x34(0x4)
	bool                                                         AllowSameCrewDeaths;                               // 0x38(0x1)
	bool                                                         CountAIKills;                                      // 0x39(0x1)
	char                                                         pad0x2_JBZPU[0x2];                                 // 0x3a(0x2)
	int                                                          SoulsPerAIKill;                                    // 0x3c(0x4)
};


// Size 0x40 (Full Size[0x3f0] - InheritedSize[0x3b0]
class VoyageProposalContainerInteraction: public ModalInteraction
{
public:
	char                                                         pad0x40_L7PBQ[0x40];                               // 0x3b0(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UserGameSettingsRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwitchMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintBudget: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunServicePickUpInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x198] - InheritedSize[0xb8]
class CrewOwnershipComponent: public ActorComponent
{
public:
	char                                                         pad0x8_JIN7K[0x8];                                 // 0xb8(0x8)
	char                                                         State;                                             // 0xc0(0x1)
	char                                                         pad0x3_DISIR[0x3];                                 // 0xc1(0x3)
	struct Guid                                                  CachedCrewId;                                      // 0xc4(0x10)
	struct Guid                                                  LastKnownCrewId;                                   // 0xd4(0x10)
	char                                                         pad0xb4_GDWD5[0xb4];                               // 0xe4(0xb4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutControlInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class IslandFrameworkSettings: public DeveloperSettings
{
public:
	struct FName                                                 IslandTypeStateGroup;                              // 0x38(0x8)
	struct StringAssetReference                                  IslandDataFileLocation;                            // 0x40(0x10)
	float                                                        SurfaceUpperBound;                                 // 0x50(0x4)
	float                                                        SurfaceLowerBound;                                 // 0x54(0x4)
	float                                                        TreasuryAwarenessProximity;                        // 0x58(0x4)
	char                                                         pad0x4_ZQMZ1[0x4];                                 // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExperienceRefreshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponsePreventDrowning: public StatusResponse
{
public:
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class ScoreRewardDataAsset: public DataAsset
{
public:
	struct ScoreRewardData                                       ScoreRewardData;                                   // 0x28(0xe0)
	TArray<struct ScoreReasonIcons>                              ScoreReasonIcons;                                  // 0x108(0x10)
};


// Size 0xf8 (Full Size[0x130] - InheritedSize[0x38]
class InGameCommandsSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  AITypeListDataAsset;                               // 0x38(0x10)
	struct StringAssetReference                                  AISkillsetsDataAsset;                              // 0x48(0x10)
	struct StringAssetReference                                  AILoadoutsDataAsset;                               // 0x58(0x10)
	struct StringAssetReference                                  AIFormsDataAsset;                                  // 0x68(0x10)
	struct StringAssetReference                                  AIItemDropSpawnersDataAsset;                       // 0x78(0x10)
	struct StringAssetReference                                  AIClassIdsDataAsset;                               // 0x88(0x10)
	struct StringAssetReference                                  AIAmmoTypeDataAsset;                               // 0x98(0x10)
	struct StringAssetReference                                  AIEncounterTypeList;                               // 0xa8(0x10)
	struct StringAssetReference                                  AISpawnLocationEQSQuery;                           // 0xb8(0x10)
	struct StringAssetReference                                  WaterBasedAISpawnLocationEQSQuery;                 // 0xc8(0x10)
	struct StringAssetReference                                  SpawnableItemList;                                 // 0xd8(0x10)
	struct StringAssetReference                                  WorldEventsCommandSettings;                        // 0xe8(0x10)
	struct StringAssetReference                                  TeleportCommandSettings;                           // 0xf8(0x10)
	struct StringAssetReference                                  ShipCommandSettings;                               // 0x108(0x10)
	float                                                        KIllAllAIRadius;                                   // 0x118(0x4)
	int                                                          MaxNumOfCheckAttempts;                             // 0x11c(0x4)
	float                                                        FlyingSpeedDefault;                                // 0x120(0x4)
	float                                                        FlyingSpeedSlow;                                   // 0x124(0x4)
	float                                                        FlyingSpeedFast;                                   // 0x128(0x4)
	char                                                         pad0x4_GMCRF[0x4];                                 // 0x12c(0x4)
};


// Size 0x8 (Full Size[0xc8] - InheritedSize[0xc0]
class AshenWindsSkullAdaptiveTriggerComponent: public AdaptiveTriggerComponent
{
public:
	char                                                         Position;                                          // 0xc0(0x1)
	char                                                         MinFrequency;                                      // 0xc1(0x1)
	char                                                         MaxFrequency;                                      // 0xc2(0x1)
	char                                                         MinAmplitude;                                      // 0xc3(0x1)
	char                                                         MaxAmplitude;                                      // 0xc4(0x1)
	char                                                         pad0x3_E53EO[0x3];                                 // 0xc5(0x3)
};


// Size 0x70 (Full Size[0x420] - InheritedSize[0x3b0]
class CaptaincyShipCustomizationChestInteraction: public ModalInteraction
{
public:
	TArray<struct FeaturedShipCustomizationCategory>             ShipLiveryCategories;                              // 0x3b0(0x10)
	TArray<struct FeaturedShipCustomizationCategory>             ShipDecorationCategories;                          // 0x3c0(0x10)
	bool                                                         AllTab;                                            // 0x3d0(0x1)
	bool                                                         SwapAllToSavedLoadout;                             // 0x3d1(0x1)
	char                                                         pad0x3e_VQQ0E[0x3e];                               // 0x3d2(0x3e)
	TArray<class Class*>                                         PreviousLoadout;                                   // 0x410(0x10)
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class AggressiveGhostShipPoolResource: public Actor
{
public:
	float                                                        DestroyDelay;                                      // 0x3a0(0x4)
	int                                                          PortalPoolSize;                                    // 0x3a4(0x4)
	class UClass*                                                PortalClass;                                       // 0x3a8(0x8)
	char                                                         pad0x70_7ED8M[0x70];                               // 0x3b0(0x70)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwitchesServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeatInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MechanismAnimation: public DataAsset
{
public:
	TArray<class MechanismOneShotEvent*>                         AnimationStartedEvents;                            // 0x28(0x10)
	TArray<class MechanismAnimationEvent*>                       Events;                                            // 0x38(0x10)
	TArray<class MechanismOneShotEvent*>                         AnimationStoppedEvents;                            // 0x48(0x10)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class ItemReplenisherComponent: public ActorComponent
{
public:
	class ItemReplenisher*                                       ItemReplenisher;                                   // 0xb8(0x8)
};


// Size 0x128 (Full Size[0x150] - InheritedSize[0x28]
class PopUpMessageDesc: public DataAsset
{
public:
	struct StringAssetReference                                  ToastBackgroundImage;                              // 0x28(0x10)
	struct StringAssetReference                                  BackgroundImage;                                   // 0x38(0x10)
	struct StringAssetReference                                  ForegroundImage;                                   // 0x48(0x10)
	struct FText                                                 Text;                                              // 0x58(0x38)
	struct FText                                                 BodyText;                                          // 0x90(0x38)
	struct FString                                               AudioSfxEventName;                                 // 0xc8(0x10)
	struct FString                                               AudioEventName;                                    // 0xd8(0x10)
	struct FString                                               AudioSwitchName;                                   // 0xe8(0x10)
	struct FString                                               AudioSwitchValue;                                  // 0xf8(0x10)
	struct FString                                               StyleModifier;                                     // 0x108(0x10)
	TArray<char>                                                 StyleModifiers;                                    // 0x118(0x10)
	struct StringAssetReference                                  AllianceIcon;                                      // 0x128(0x10)
	struct StringAssetReference                                  StampIcon;                                         // 0x138(0x10)
	float                                                        HoldDuration;                                      // 0x148(0x4)
	char                                                         pad0x4_E7CGI[0x4];                                 // 0x14c(0x4)
};


// Size 0x168 (Full Size[0x190] - InheritedSize[0x28]
class AthenaLocalPlayerReengage: public Object
{
public:
	char                                                         pad0x168_3CIFN[0x168];                             // 0x28(0x168)
};


// Size 0x8 (Full Size[0x290] - InheritedSize[0x288]
class DockToObjectDisengageInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x8_X8FXP[0x8];                                 // 0x288(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RemoveSpearActionStateId: public ActionStateId
{
public:
};


// Size 0x230 (Full Size[0x670] - InheritedSize[0x440]
class WieldableItemAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x10_YDUKA[0x10];                               // 0x440(0x10)
	struct ObjectMessagingDispatcher                             MessagingDispatcher;                               // 0x450(0xa0)
	TArray<struct InputSequencePair>                             OneShotAnimationSequence;                          // 0x4f0(0x10)
	TArray<struct InputSequencePair>                             OneShotAnimationAlternateSequence;                 // 0x500(0x10)
	TArray<struct InputMontagePair>                              ContinuousUseAnimationSequence;                    // 0x510(0x10)
	TArray<struct InputMontagePair>                              ContinuousUseAnimationAlternateSequence;           // 0x520(0x10)
	class AnimSequenceBase*                                      EquipItemAnimationSequence;                        // 0x530(0x8)
	class AnimSequenceBase*                                      UnequipItemAnimationSequence;                      // 0x538(0x8)
	bool                                                         OneShotIsAlternate;                                // 0x540(0x1)
	bool                                                         ContinuousIsAlternate;                             // 0x541(0x1)
	bool                                                         DisableBlending;                                   // 0x542(0x1)
	bool                                                         Idling;                                            // 0x543(0x1)
	char                                                         pad0x10c_QTHQR[0x10c];                             // 0x544(0x10c)
	class AnimMontage*                                           CurrentMontage;                                    // 0x650(0x8)
	char                                                         pad0x8_8CHMF[0x8];                                 // 0x658(0x8)
	bool                                                         UseAnimVariant;                                    // 0x660(0x1)
	char                                                         Variant;                                           // 0x661(0x1)
	bool                                                         KeepOnIdle;                                        // 0x662(0x1)
	char                                                         pad0xd_NOSOF[0xd];                                 // 0x663(0xd)
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class TaleQuestNotificationUsingVariableStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableNotificationDesc                         NotificationDesc;                                  // 0x80(0x30)
	struct QuestVariablePlayerActor                              PreventNotificationForPlayer;                      // 0xb0(0x30)
	struct QuestVariablePlayerActor                              Player;                                            // 0xe0(0x30)
};


// Size 0x28 (Full Size[0x98] - InheritedSize[0x70]
class BTService_UnreserveDigsiteOnCeaseRelevant: public BTService
{
public:
	struct BlackboardKeySelector                                 DigsiteObjectBBKey;                                // 0x70(0x28)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmotesRadialDataAsset: public DataAsset
{
public:
	TArray<struct EmoteData>                                     Emotes;                                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageManagementInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemDescList: public DataAsset
{
public:
	TArray<class Class*>                                         Items;                                             // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BootyStorageSettingsAsset: public DataAsset
{
public:
	class EnvQuery*                                              SpawnBootyCheatEQSQuery;                           // 0x28(0x8)
	class UClass*                                                RetrievalActor;                                    // 0x30(0x8)
	class EnvQuery*                                              SpawnRetrievalActorEQSQuery;                       // 0x38(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InvasionTunnelSceneryCreatureDioramaGroup: public DataAsset
{
public:
	struct WeightedTunnelCreatureDioramaCollection               CreatureDioramas;                                  // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersMarkServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SinkingTunnelOfTheDamnedInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetMechanismActionCutsceneNameStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 CutsceneName;                                      // 0x80(0x8)
	struct QuestVariableActor                                    MechanismActor;                                    // 0x88(0x30)
};


// Size 0xa0 (Full Size[0x440] - InheritedSize[0x3a0]
class Chandelier: public Actor
{
public:
	char                                                         pad0x8_XM6O4[0x8];                                 // 0x3a0(0x8)
	class StaticMeshMemoryConstraintComponent*                   ChandelierMeshComponent;                           // 0x3a8(0x8)
	class StaticMeshMemoryConstraintComponent*                   FlamesMeshComponent;                               // 0x3b0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3b8(0x8)
	class ChandelierPartDescAsset*                               DescToSetWhenSafe;                                 // 0x3c0(0x8)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x3c8(0x8)
	char                                                         pad0x70_ZUC8P[0x70];                               // 0x3d0(0x70)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPlacedOnActorReceiverInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StormServiceAsset: public DataAsset
{
public:
	TArray<class StormParams*>                                   StormParams;                                       // 0x28(0x10)
	float                                                        StormCheckRadius;                                  // 0x38(0x4)
	float                                                        ChanceOfForwardTimeStep;                           // 0x3c(0x4)
	struct FloatRange                                            StaticTimeOffsetBounds;                            // 0x40(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class EmotesRadialActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SailHeightStatus: public StatusBase
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GuildLogbookIconsAsset: public DataAsset
{
public:
	class Texture*                                               DefaultImage;                                      // 0x28(0x8)
	TArray<struct GuildIconTextureKeyValue>                      Icons;                                             // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingRodInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class StopAggressiveGhostShipEncounterStep: public TaleQuestStep
{
public:
	class StopAggressiveGhostShipEncounterStepDesc*              StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteValidatorInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class ShipwreckSiteGeneratorSimulator: public Actor
{
public:
	class ShipwreckSiteGeneratorRandomEditorComponent*           SiteGenerator;                                     // 0x3a0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MoveableObjectInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class AllianceServiceTelemetryComponent: public ActorComponent
{
public:
	char                                                         pad0x40_LNGSV[0x40];                               // 0xb8(0x40)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CustomScoreEventValuesDataAsset: public DataAsset
{
public:
	struct FString                                               Category;                                          // 0x28(0x10)
	TArray<struct CustomScoreEventValue>                         EventValues;                                       // 0x38(0x10)
};


// Size 0x18 (Full Size[0x2a0] - InheritedSize[0x288]
class DebugSuperSailorInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x18_2HY6D[0x18];                               // 0x288(0x18)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AICombatDialogue: public Object
{
public:
	class SceneDialogueCoordinator*                              DialogueCoordinator;                               // 0x28(0x8)
	class SceneDialogueData*                                     DialogueData;                                      // 0x30(0x8)
	int                                                          NumAISlots;                                        // 0x38(0x4)
	float                                                        ChatMaxDistance;                                   // 0x3c(0x4)
	float                                                        RemoveAIDelay;                                     // 0x40(0x4)
	float                                                        EndDelay;                                          // 0x44(0x4)
	class SimpleDialogueStateProvider*                           StateProvider;                                     // 0x48(0x8)
	char                                                         pad0x28_09SCS[0x28];                               // 0x50(0x28)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DrunkStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToThrowablesNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class VaultTaleService: public TaleQuestService
{
public:
	char                                                         pad0x10_W72OG[0x10];                               // 0x60(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class LandmarkReactionEvent: public Object
{
public:
	char                                                         pad0x20_X2PXJ[0x20];                               // 0x28(0x20)
	bool                                                         UseDefaultTarget;                                  // 0x48(0x1)
	char                                                         pad0x7_X2L2P[0x7];                                 // 0x49(0x7)
	class Actor*                                                 ResolvedTarget;                                    // 0x50(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex5SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_SkellyFortEventSignal: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CutsceneDataAsset: public DataAsset
{
public:
	TArray<struct CutsceneGroup>                                 CutsceneGroups;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ghost_ship_sails_grunt_01_a: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InteractionSettings: public Object
{
public:
	float                                                        MaximumInteractionAngleClient;                     // 0x28(0x4)
	float                                                        MaximumInteractionAngleServer;                     // 0x2c(0x4)
	float                                                        MaximumInteractionDistance;                        // 0x30(0x4)
	float                                                        MaxInteractorsPlayerDistanceDelta;                 // 0x34(0x4)
	float                                                        MaxInteractorsCenterDistanceDelta;                 // 0x38(0x4)
	char                                                         pad0x4_JQ145[0x4];                                 // 0x3c(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class LightingZoneService: public Object
{
public:
	char                                                         pad0x8_TVZFI[0x8];                                 // 0x28(0x8)
	TArray<class Interface*>                                     RegisteredLightingZones;                           // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SelectRewardStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class SpawnShipwreckTaleStep: public TaleQuestStep
{
public:
	class SpawnShipwreckTaleStepDesc*                            StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x8_IUXLL[0x8];                                 // 0xa0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitDetectionVisualisationInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class Bed: public Actor
{
public:
	class StaticMeshComponent*                                   BedMeshComponent;                                  // 0x3a0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3a8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmoteLoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialInformationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickupableTooltipCustomizerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BoogieStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x290] - InheritedSize[0x290]
class SittingThirdPersonCameraInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToTankardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class WaitForNPCOnSurfaceToSpawnStep: public TaleQuestStep
{
public:
	class WaitForNPCOnSurfaceToSpawnStepDesc*                    StepDesc;                                          // 0x98(0x8)
	class NPCOnSurfaceManager*                                   SelectedManager;                                   // 0xa0(0x8)
	char                                                         pad0x8_KJZXW[0x8];                                 // 0xa8(0x8)
};


// Size 0x200 (Full Size[0x5a0] - InheritedSize[0x3a0]
class IslandSalvageSpawnerManager: public Actor
{
public:
	char                                                         pad0x10_1A02A[0x10];                               // 0x3a0(0x10)
	struct ObjectMessagingDispatcher                             ObjectMessagingDispatcher;                         // 0x3b0(0xa0)
	TArray<class SalvageItemSpawnComponent*>                     SalvageSpawnComponentsAwaitingRequests;            // 0x450(0x10)
	class IslandData*                                            IslandData;                                        // 0x4b0(0x8)
	char                                                         pad0x10_MWRON[0x10];                               // 0x4b8(0x10)
	TArray<class SalvageItemSpawnComponent*>                     IslandSalvageItemSpawnComponents;                  // 0x4c8(0x10)
	TArray<struct TypedIslandItemSpawnLocationData>              IslandSalvageLocationData;                         // 0x4d8(0x10)
	char                                                         pad0xb8_RDFLV[0xb8];                               // 0x4e8(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageContainerSpawnerItemListBase: public DataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServiceStatusNotificationsServiceInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class MastAudioParams: public DataAsset
{
public:
	class WwiseEvent*                                            PlaySailLength;                                    // 0x28(0x8)
	class WwiseEvent*                                            StopSailLength;                                    // 0x30(0x8)
	class WwiseEvent*                                            PlaySailLengthStopTop;                             // 0x38(0x8)
	class WwiseEvent*                                            PlaySailLengthStopBottom;                          // 0x40(0x8)
	struct FName                                                 RtpcSailCompletion;                                // 0x48(0x8)
	float                                                        MinCompletionValue;                                // 0x50(0x4)
	float                                                        MaxCompletionValue;                                // 0x54(0x4)
	class WwiseEvent*                                            PlaySailAngle;                                     // 0x58(0x8)
	class WwiseEvent*                                            StopSailAngle;                                     // 0x60(0x8)
	class WwiseEvent*                                            PlaySailAngleStopLimit;                            // 0x68(0x8)
	class WwiseEvent*                                            PlaySailAngleCentred;                              // 0x70(0x8)
	struct FName                                                 RtpcSailAngle;                                     // 0x78(0x8)
	float                                                        MinAngleValue;                                     // 0x80(0x4)
	float                                                        MaxAngleValue;                                     // 0x84(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CompanyLevelDataList: public DataAsset
{
public:
	TArray<class CompanyLevelData*>                              CompanyLevelData;                                  // 0x28(0x10)
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class ActionRulesComponent: public ActorComponent
{
public:
	char                                                         pad0x8_ALBKF[0x8];                                 // 0xb8(0x8)
	double                                                       InteractionTimeThreshold;                          // 0xc0(0x8)
	char                                                         pad0x28_LQIHG[0x28];                               // 0xc8(0x28)
};


// Size 0x1a8 (Full Size[0x260] - InheritedSize[0xb8]
class SeaFortAddOnComponent: public ActorComponent
{
public:
	class SeaFortAddOnAISpawnDataAsset*                          AISpawnDataAsset;                                  // 0xb8(0x8)
	class AIBountySpawner*                                       AIBountySpawner;                                   // 0xc0(0x8)
	struct StringAssetReference                                  SeaFortAddOnDataStringAssetReference;              // 0xc8(0x10)
	class Actor*                                                 SpawnedItem;                                       // 0xd8(0x8)
	class OneShotAnimatedMechanismAction*                        PrisonerCellDoor;                                  // 0xe0(0x8)
	class Actor*                                                 RitualCandle;                                      // 0xe8(0x8)
	char                                                         pad0x160_8N4OY[0x160];                             // 0xf0(0x160)
	class LockComponent*                                         PrisonerLockComponent;                             // 0x250(0x8)
	bool                                                         IsCandleVfxActive;                                 // 0x258(0x1)
	char                                                         pad0x7_QN3EA[0x7];                                 // 0x259(0x7)
};


// Size 0xc20 (Full Size[0xfc0] - InheritedSize[0x3a0]
class HumanoidActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	struct DebugSuperSailorActionStateParams                     DebugSuperSailorParams;                            // 0x3a0(0x10)
	struct ControlWheelActionStateParams                         ControlWheelParams;                                // 0x3b0(0x58)
	struct ControlCapstanArmActionStateParams                    ControlCapstanArmParams;                           // 0x408(0x58)
	struct ControlPulleyActionStateParams                        ControlPulleyParams;                               // 0x460(0x58)
	struct UseLadderActionStateParams                            UseLadderParams;                                   // 0x4b8(0x70)
	struct ClamberActionStateParams                              ClamberParams;                                     // 0x528(0x50)
	struct UseCannonActionStateParams                            UseCannonParams;                                   // 0x578(0x80)
	struct UseMountedWeaponActionStateParams                     UseHarpoonLauncherParams;                          // 0x5f8(0x78)
	struct UseMountableSpotlightActionStateParams                UseMountableSpotlightParams;                       // 0x670(0x98)
	struct UseMapTableActionStateParams                          UseMapTableParams;                                 // 0x708(0x40)
	struct LinearTransitionLadderActionStateParams               OffBottomTransitionLadderParams;                   // 0x748(0x38)
	struct LinearTransitionLadderActionStateParams               OnBottomTransitionLadderParams;                    // 0x780(0x38)
	struct SplineTransitionLadderActionStateParams               OffTopTransitionLadderParams;                      // 0x7b8(0x30)
	struct SplineTransitionLadderActionStateParams               OnTopTransitionLadderParams;                       // 0x7e8(0x30)
	struct TeleportActionStateParams                             TeleportParams;                                    // 0x818(0x30)
	struct WaitingToSpawnActionStateParams                       WaitingToSpawnParams;                              // 0x848(0x14)
	struct RepairObjectActionStateParams                         RepairObjectParams;                                // 0x85c(0x8)
	struct UndoRepairActionStateParams                           UndoRepairParams;                                  // 0x864(0x4)
	struct RemoveSpearActionStateParams                          RemoveSpearParams;                                 // 0x868(0x1)
	struct UseItemActionStateParams                              UseItemParams;                                     // 0x869(0x1)
	char                                                         pad0x6_C7PBG[0x6];                                 // 0x86a(0x6)
	struct DeadActionStateParams                                 DeadParams;                                        // 0x870(0x58)
	struct RevivedActionStateParams                              PostReviveParameters;                              // 0x8c8(0x10)
	struct HideInObjectActionStateParams                         HideInObjectParams;                                // 0x8d8(0x48)
	struct LeaveGhostShipActionStateParams                       LeaveGhostShipParams;                              // 0x920(0x24)
	char                                                         pad0x4_K8B3W[0x4];                                 // 0x944(0x4)
	struct ShovelDigActionStateParams                            ShovelDigParams;                                   // 0x948(0x10)
	struct MigrationActionStateParams                            MigrationParams;                                   // 0x958(0x4)
	struct FiredFromActorActionStateParams                       FiredFromCannonParams;                             // 0x95c(0x28)
	struct FiredFromActorActionStateParams                       LaunchedFromKrakenParams;                          // 0x984(0x28)
	struct FiredFromActorActionStateParams                       LaunchedFromGeyserParams;                          // 0x9ac(0x28)
	struct TalkToNPCActionStateParams                            TalkToNPCParams;                                   // 0x9d4(0x10)
	char                                                         pad0x4_GY6FG[0x4];                                 // 0x9e4(0x4)
	struct WaterBarrelActionStateParams                          WaterBarrelParams;                                 // 0x9e8(0x58)
	struct DockableCutsceneActionStateParams                     DockableCutsceneParams;                            // 0xa40(0x58)
	struct DockableBaseActionStateParams                         DockableBaseParams;                                // 0xa98(0x58)
	struct PlayDockableKeyedInstrumentActionStateParams          DockableMusicalInstrumentParams;                   // 0xaf0(0x40)
	struct CombinationLockMechanismTriggerActionStateParams      CombinationLockMechanismTriggerParams;             // 0xb30(0x40)
	struct ControlObjectActionStateParams                        TavernPianoParams;                                 // 0xb70(0x38)
	struct CapturedByKrakenActionStateParams                     CapturedByKrakenParams;                            // 0xba8(0x40)
	struct IngestedByKrakenActionStateParams                     IngestedByKrakenParams;                            // 0xbe8(0x4)
	struct SwallowedByKrakenActionStateParams                    SwallowedByKrakenParams;                           // 0xbec(0x8)
	char                                                         pad0x4_OFG1J[0x4];                                 // 0xbf4(0x4)
	struct RideTransitionActionStateParams                       RideTransitionParams;                              // 0xbf8(0x38)
	struct WaterSlideActionStateParams                           WaterSlideParams;                                  // 0xc30(0x30)
	struct ZipLineActionStateParams                              ZipLineParams;                                     // 0xc60(0x28)
	struct EnterTunnelOfTheDamnedActionStateParams               EnterTunnelOfTheDamnedParams;                      // 0xc88(0x1c)
	struct EjectFromTunnelOfTheDamnedActionStateParams           EjectFromTunnelOfTheDamnedParams;                  // 0xca4(0x20)
	struct ExitTunnelOfTheDamnedActionStateParams                ExitTunnelOfTheDamnedParams;                       // 0xcc4(0x14)
	struct ArrivalTunnelOfTheDamnedActionStateParams             ArrivalTunnelOfTheDamnedParams;                    // 0xcd8(0x24)
	struct SinkingTunnelOfTheDamnedActionStateParams             SinkingTunnelOfTheDamnedParams;                    // 0xcfc(0x3c)
	struct CaptainsLogInteractableActionStateParams              CaptainsLogParams;                                 // 0xd38(0x48)
	struct AttachedToObjectActionStateParams                     AttachedToObjectParams;                            // 0xd80(0x50)
	struct CompanyShopActionStateParams                          CompanyShopParams;                                 // 0xdd0(0x14)
	char                                                         pad0x4_WLJFE[0x4];                                 // 0xde4(0x4)
	struct StandingSpyglassActionStateParams                     StandingSpyglassParams;                            // 0xde8(0x38)
	struct UseBalanceableWalkwayActionStateParams                BalanceableWalkwayActionStateParams;               // 0xe20(0x100)
	struct MovedByPortableHarpoonGrappleActionStateParams        MovedByPortableHarpoonGrappleParams;               // 0xf20(0x60)
	struct MovedByPortableHarpoonRetractionActionStateParams     MovedByPortableHarpoonRetractionParams;            // 0xf80(0x1c)
	char                                                         pad0x24_8OSV7[0x24];                               // 0xf9c(0x24)
};


// Size 0x58 (Full Size[0x3f8] - InheritedSize[0x3a0]
class ConditionalStatTriggerArea: public Actor
{
public:
	class BoxComponent*                                          AreaBoxComponent;                                  // 0x3a0(0x8)
	struct PlayerStat                                            StatToAward;                                       // 0x3a8(0x4)
	int                                                          NumberOfPlayersRequired;                           // 0x3ac(0x4)
	TArray<class Class*>                                         EntitlementsToCheckFor;                            // 0x3b0(0x10)
	TArray<class Class*>                                         WieldableItemsToCheckFor;                          // 0x3c0(0x10)
	class UClass*                                                RequiredInputId;                                   // 0x3d0(0x8)
	char                                                         pad0x10_RVYK0[0x10];                               // 0x3d8(0x10)
	TArray<class Controller*>                                    PlayersMeetingCriteria;                            // 0x3e8(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AdventuresBundleListingAsset: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          Pages;                                             // 0x28(0x10)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class InteractionPrerequisiteBase: public Object
{
public:
	bool                                                         Invert;                                            // 0x28(0x1)
	char                                                         pad0x7_03IPZ[0x7];                                 // 0x29(0x7)
	struct FText                                                 CantInteractTooltip;                               // 0x30(0x38)
	struct FeatureFlag                                           FeatureFlag;                                       // 0x68(0xc)
	char                                                         pad0x1c_3EGD3[0x1c];                               // 0x74(0x1c)
};


// Size 0x78 (Full Size[0x130] - InheritedSize[0xb8]
class LeaderboardComponent: public ActorComponent
{
public:
	char                                                         pad0x78_DUBB9[0x78];                               // 0xb8(0x78)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EntitlementRedirectorDataAsset: public DataAsset
{
public:
	TArray<struct EntitlementRedirectorEntry>                    Redirectors;                                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCAnimationInteractionInterface: public Interface
{
public:
};


// Size 0x180 (Full Size[0x238] - InheritedSize[0xb8]
class ItemLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x10_AF63C[0x10];                               // 0xb8(0x10)
	int                                                          MaxWeaponSlots;                                    // 0xc8(0x4)
	char                                                         pad0x4_JS3J7[0x4];                                 // 0xcc(0x4)
	struct ItemLoadout                                           ItemLoadout;                                       // 0xd0(0x20)
	struct ItemLoadoutComponentSlots                             LoadoutSlots;                                      // 0xf0(0x20)
	TArray<class Class*>                                         WeaponSlots_ClientPredicted;                       // 0x110(0x10)
	char                                                         pad0x108_0M48N[0x108];                             // 0x120(0x108)
	TArray<class Class*>                                         SwitchWeaponOverrides;                             // 0x228(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ClimbLadderAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnloadItemActionStateId: public ActionStateId
{
public:
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class ReapersTributeShipHandInComponent: public ActorComponent
{
public:
	float                                                        HandInInteractionHoldTime;                         // 0xb8(0x4)
	float                                                        CrewMaxDistance;                                   // 0xbc(0x4)
	char                                                         pad0x10_G5Z1Z[0x10];                               // 0xc0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnBuryStrategy: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapRenderResource: public Object
{
public:
};


// Size 0x60 (Full Size[0x400] - InheritedSize[0x3a0]
class FlyingCreaturePlayerProximitySpawner: public Actor
{
public:
	class SceneComponent*                                        SpawnerRoot;                                       // 0x3a0(0x8)
	class UClass*                                                FlyingCreatureClass;                               // 0x3a8(0x8)
	struct Transform                                             SpawnTransform;                                    // 0x3b0(0x30)
	float                                                        ProximityRange;                                    // 0x3e0(0x4)
	float                                                        SpawnedActorLifespan;                              // 0x3e4(0x4)
	class Actor*                                                 SpawnedFlyingCreature;                             // 0x3e8(0x8)
	char                                                         pad0x10_BSL6Q[0x10];                               // 0x3f0(0x10)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class FlamesOfFateSettingsService: public Actor
{
public:
	char                                                         pad0x8_BLHJ9[0x8];                                 // 0x3a0(0x8)
	class FlamesOfFateSettingsAsset*                             Settings;                                          // 0x3a8(0x8)
};


// Size 0x90 (Full Size[0x860] - InheritedSize[0x7d0]
class AthenaGameplayDebuggingComponent: public GameplayDebuggingComponent
{
public:
	TArray<String>                                               CurrentServerActionStates;                         // 0x7c8(0x10)
	class UClass*                                                CurrentAIStrategyId;                               // 0x7d8(0x8)
	TArray<struct DebugReplicatedAbilityData>                    CachedAIAbilities;                                 // 0x7e0(0x10)
	TArray<struct AthenaAIControllerTargetPickingData>           CachedAITargetPickingData;                         // 0x7f0(0x10)
	class UClass*                                                NextAbility;                                       // 0x800(0x8)
	class UClass*                                                QueuedAbility;                                     // 0x808(0x8)
	TArray<class Class*>                                         ReadiedAbilities;                                  // 0x810(0x10)
	class AthenaAIAbilityHandlerComponent*                       AIAbilityComponent;                                // 0x820(0x8)
	bool                                                         FollowUpAbilitySet;                                // 0x828(0x1)
	char                                                         pad0x3_7VLBX[0x3];                                 // 0x829(0x3)
	int                                                          CurrentAbilityStageIndex;                          // 0x82c(0x4)
	TArray<class Class*>                                         AbilitiesActiveInCurrentStage;                     // 0x830(0x10)
	char                                                         pad0x20_SPOM7[0x20];                               // 0x840(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestSpawnOnShipServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SmugglersRunVoyagePickupAndDeliveryIslandLocationsDataAsset: public DataAsset
{
public:
	TArray<struct SmugglersRunIslandEntry>                       SmugglersRunIslandsList;                           // 0x28(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForMechanismActivationStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventSchedulerDebugFunctions: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DioramaDebugMenuEntries: public DataAsset
{
public:
	TArray<struct DioramaDebugMenuEntry>                         Dioramas;                                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RewardPopUpNotificationCollectionDataAsset: public DataAsset
{
public:
	TArray<class RewardPopUpNotificationDataAsset*>              RewardPopUpNotifications;                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class TeleportLungeAIAbilityParams: public AthenaAIAbilityParams
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanvasLODServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerRelevancyServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class QuestBookPageLayout: public DataAsset
{
public:
	TArray<struct TreasureMapWidgetTexture>                      Images;                                            // 0x28(0x10)
	TArray<struct TreasureMapWidgetLocalisedTextWithFontOverride> GeneralText;                                       // 0x38(0x10)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class FakedBuoyancyComponent: public ActorComponent
{
public:
	struct FakedBuoyancyParams                                   FakedBuoyancyParams;                               // 0xb8(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SweepLeftAshenLordUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class LightFadingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_FYZE4[0x8];                                 // 0xb8(0x8)
	bool                                                         FindLightOnOwner;                                  // 0xc0(0x1)
	char                                                         pad0x3_8KY32[0x3];                                 // 0xc1(0x3)
	float                                                        FadeTime;                                          // 0xc4(0x4)
	char                                                         pad0x8_HQFW7[0x8];                                 // 0xc8(0x8)
	class LightComponent*                                        LightComponent;                                    // 0xd0(0x8)
	char                                                         pad0x8_0FMCU[0x8];                                 // 0xd8(0x8)
	bool                                                         FadeInOnStart;                                     // 0xe0(0x1)
	char                                                         pad0x7_DV46J[0x7];                                 // 0xe1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterBarrelInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x3b0] - InheritedSize[0x3b0]
class ShipwrightInteractionProxy: public ModalInteraction
{
public:
};


// Size 0x360 (Full Size[0x388] - InheritedSize[0x28]
class AthenaInputSettings: public Object
{
public:
	TArray<struct Name>                                          AllowedInvertedYAxis;                              // 0x28(0x10)
	TArray<struct Name>                                          AllowedInvertedXAxis;                              // 0x38(0x10)
	TArray<struct Name>                                          AllowedInvertedCombinedAxis;                       // 0x48(0x10)
	float                                                        RadialSelectionTimeout;                            // 0x58(0x4)
	float                                                        RadialSelectionMagnitudeThreshold;                 // 0x5c(0x4)
	float                                                        TimeToBlockInputsAfterRadialDeactivation;          // 0x60(0x4)
	float                                                        MinDeflectionToBlockInputsAfterRadialDeactivation; // 0x64(0x4)
	float                                                        MinRadialSectorUnselectableFraction;               // 0x68(0x4)
	float                                                        MaxRadialSectorUnselectableFraction;               // 0x6c(0x4)
	float                                                        RadialActivationThreshold;                         // 0x70(0x4)
	float                                                        RadialFastItemSwitchGracePeriod;                   // 0x74(0x4)
	TArray<struct ActionMappingKeyLookupFallback>                ActionMappingKeyLookupFallbacks;                   // 0x78(0x10)
	TArray<struct VirtualActionBindingDefinition>                VirtualActionBindingDefinitions;                   // 0x88(0x10)
	TArray<struct VirtualAxisBindingDefinition>                  VirtualAxisBindingDefinitions;                     // 0x98(0x10)
	float                                                        MouseSensitivityMin;                               // 0xa8(0x4)
	float                                                        MouseSensitivityMax;                               // 0xac(0x4)
	float                                                        ControllerSensitivityMin;                          // 0xb0(0x4)
	float                                                        ControllerSensitivityMax;                          // 0xb4(0x4)
	float                                                        ControllerDeadzoneMin;                             // 0xb8(0x4)
	float                                                        ControllerDeadzoneMax;                             // 0xbc(0x4)
	float                                                        ControllerNonLinearityMin;                         // 0xc0(0x4)
	float                                                        ControllerNonLinearityMax;                         // 0xc4(0x4)
	struct SingleStickMapping                                    SingleStickOffMappings;                            // 0xc8(0x50)
	struct SingleStickMapping                                    SingleStickSwapMappings;                           // 0x118(0x50)
	struct SingleStickSettings                                   SingleStickOffSettings;                            // 0x168(0x20)
	struct SingleStickMapping                                    SingleStickLeftLookMappings;                       // 0x188(0x50)
	struct SingleStickMapping                                    SingleStickRightLookMappings;                      // 0x1d8(0x50)
	struct SingleStickMapping                                    SingleStickLeftMoveMappings;                       // 0x228(0x50)
	struct SingleStickMapping                                    SingleStickRightMoveMappings;                      // 0x278(0x50)
	struct SingleStickMapping                                    SingleStickLeftHybridMappings;                     // 0x2c8(0x50)
	struct SingleStickMapping                                    SingleStickRightHybridMappings;                    // 0x318(0x50)
	struct SingleStickSettings                                   SingleStickOnSettings;                             // 0x368(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationMountedWeaponBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToBaitNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class RewardPopUpNotificationDataAsset: public DataAsset
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
	TArray<struct RewardPopUpNotificationInfo>                   RewardPopUpNotifications;                          // 0x30(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveNPCOnShipStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableGuid                                     NPCOnShipManager;                                  // 0x80(0x30)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BlockEarthquakeTaleQuestService: public TaleQuestService
{
public:
	class BlockEarthquakeTaleQuestServiceDesc*                   Desc;                                              // 0x60(0x8)
	char                                                         pad0x8_D26W4[0x8];                                 // 0x68(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RiddleTextPhraseDataAsset: public DataAsset
{
public:
	TArray<struct Text>                                          Variants;                                          // 0x28(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForVaultOuterDoorClosedStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
};


// Size 0x110 (Full Size[0x4b0] - InheritedSize[0x3a0]
class ContestZoneService: public Actor
{
public:
	char                                                         pad0x38_A67UA[0x38];                               // 0x3a0(0x38)
	TArray<struct Name>                                          ContestZoneNames;                                  // 0x3d8(0x10)
	char                                                         pad0x10_61L1F[0x10];                               // 0x3e8(0x10)
	bool                                                         HasLoadedContestZones;                             // 0x3f8(0x1)
	char                                                         pad0xb7_SNLJ8[0xb7];                               // 0x3f9(0xb7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLoaderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerRoutingInterface: public Interface
{
public:
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class RespawnAndTaleProgressComponent: public ActorComponent
{
public:
	char                                                         pad0x38_93DBV[0x38];                               // 0xb8(0x38)
	TArray<class ProgressSpawnLocation*>                         LinkedSpawnLocations;                              // 0xf0(0x10)
	int                                                          ProgressLevel;                                     // 0x100(0x4)
	bool                                                         ClearProgress;                                     // 0x104(0x1)
	bool                                                         SetRespawnProgress;                                // 0x105(0x1)
	bool                                                         SetRespawnProgressForWholeCrew;                    // 0x106(0x1)
	bool                                                         SetTaleProgress;                                   // 0x107(0x1)
	bool                                                         SetTaleProgressForWholeCrew;                       // 0x108(0x1)
	char                                                         pad0x7_0JXFX[0x7];                                 // 0x109(0x7)
};


// Size 0xb0 (Full Size[0x168] - InheritedSize[0xb8]
class MechanismActionComponent: public ActorComponent
{
public:
	char                                                         pad0x18_6SCQH[0x18];                               // 0xb8(0x18)
	char                                                         ActionType;                                        // 0xd0(0x1)
	char                                                         ActivationMode;                                    // 0xd1(0x1)
	char                                                         pad0x6_ALNGD[0x6];                                 // 0xd2(0x6)
	TArray<class Actor*>                                         TriggerActors;                                     // 0xd8(0x10)
	char                                                         ActionState;                                       // 0x148(0x1)
	char                                                         pad0x1f_OTY5H[0x1f];                               // 0x149(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCCommerceEventInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AggressiveGhostShipVisualsDataAsset: public DataAsset
{
public:
	TArray<struct AggressiveGhostShipVisualsMaterialOverride>    MaterialOverrides;                                 // 0x28(0x10)
	TArray<struct AggressiveGhostShipVisualsExtraMesh>           ExtraMeshes;                                       // 0x38(0x10)
	class AggressiveGhostShipAnimationDataAsset*                 AppearAnimation;                                   // 0x48(0x8)
	class AggressiveGhostShipAnimationDataAsset*                 DisappearAnimation;                                // 0x50(0x8)
	class AggressiveGhostShipAnimationDataAsset*                 SinkingAnimation;                                  // 0x58(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InactivityTrackerInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class ShipwreckHullAudio: public Actor
{
public:
	class SceneComponent*                                        ShipwreckAudioRootComponent;                       // 0x3a0(0x8)
	TArray<struct ShipwreckHullAudioData>                        ShipwreckAudioDataArray;                           // 0x3a8(0x10)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class RewindPhysicsService: public Object
{
public:
	char                                                         pad0x8_3MVV6[0x8];                                 // 0x28(0x8)
	class World*                                                 World;                                             // 0x30(0x8)
	char                                                         pad0x8_YQJOJ[0x8];                                 // 0x38(0x8)
	TArray<struct RewindPhysicsServiceEntry>                     Entries;                                           // 0x40(0x10)
	char                                                         pad0x28_34QGO[0x28];                               // 0x50(0x28)
};


// Size 0xd0 (Full Size[0x470] - InheritedSize[0x3a0]
class SwitchesService: public Actor
{
public:
	char                                                         pad0xd0_48VAV[0xd0];                               // 0x3a0(0xd0)
};


// Size 0x60 (Full Size[0x400] - InheritedSize[0x3a0]
class InvasionDepartureTunnelRandomisedSceneryTile: public Actor
{
public:
	TArray<Class>                                                RandomActors;                                      // 0x3a0(0x10)
	char                                                         pad0x20_Z9OFO[0x20];                               // 0x3b0(0x20)
	struct InvasionTunnelLoadedSceneryTileAssetEntryWrapper      LoadedRandomActors;                                // 0x3d0(0x10)
	class ChildActorComponent*                                   ChildActor;                                        // 0x3e0(0x8)
	class SceneComponent*                                        RootComp;                                          // 0x3e8(0x8)
	char                                                         pad0x10_YE3FU[0x10];                               // 0x3f0(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class RevealableSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  RevealableServiceSettingsDataAsset;                // 0x38(0x10)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class EntitlementDesc: public DataAsset
{
public:
	struct FText                                                 Title;                                             // 0x28(0x38)
	struct FText                                                 Description;                                       // 0x60(0x38)
	struct StringAssetReference                                  IconInvPath;                                       // 0x98(0x10)
	struct StringAssetReference                                  IconPrvPath;                                       // 0xa8(0x10)
	class UClass*                                                Category;                                          // 0xb8(0x8)
	class UClass*                                                Company;                                           // 0xc0(0x8)
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class FortDataAsset: public DataAsset
{
public:
	float                                                        MinActivationDistanceFromPlayers;                  // 0x28(0x4)
	float                                                        MinEngagedDistanceFromPlayers;                     // 0x2c(0x4)
	struct FString                                               MinEngagedDistanceFromPlayersRemoteConfigKey;      // 0x30(0x10)
	TArray<class AIBountySpawner*>                               BountySpawners;                                    // 0x40(0x10)
	TArray<class AggressiveGhostShipsEncounterParams*>           AggressiveGhostShipsEncounterParams;               // 0x50(0x10)
	bool                                                         GhostShipsAttackFort;                              // 0x60(0x1)
	char                                                         pad0x7_QLY18[0x7];                                 // 0x61(0x7)
	class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x68(0x8)
	struct FName                                                 NavMeshOverride;                                   // 0x70(0x8)
	class AISpawner*                                             AISpawnerWhenFortInactive;                         // 0x78(0x8)
	class AISpawner*                                             CannonsAISpawnerWhenFortInactive;                  // 0x80(0x8)
	class AISpawner*                                             AISpawnerWhenFortActive;                           // 0x88(0x8)
	class AISpawner*                                             CannonsAISpawnerWhenFortActive;                    // 0x90(0x8)
	class WwiseEvent*                                            WaveSpawnSoundEffect;                              // 0x98(0x8)
	class WwiseEvent*                                            FinalWaveSpawnSoundEffect;                         // 0xa0(0x8)
	class WwiseEvent*                                            FortCompleteSoundEffect;                           // 0xa8(0x8)
	float                                                        WaveSpawnSoundEffectDelay;                         // 0xb0(0x4)
	float                                                        AnticipationAudioZoneRadiusMetres;                 // 0xb4(0x4)
	float                                                        ActionAudioZoneRadiusMetres;                       // 0xb8(0x4)
	char                                                         pad0x4_RM0AG[0x4];                                 // 0xbc(0x4)
	class UClass*                                                KeyItemToUnlockDoor;                               // 0xc0(0x8)
	class ItemDescSpawnData*                                     KeySpawnData;                                      // 0xc8(0x8)
	char                                                         EncounterSightingType;                             // 0xd0(0x1)
	char                                                         EncounterCloseType;                                // 0xd1(0x1)
	char                                                         pad0x6_4U0QB[0x6];                                 // 0xd2(0x6)
};


// Size 0x408 (Full Size[0x430] - InheritedSize[0x28]
class QuestsConfig: public DataAsset
{
public:
	TArray<struct CanvasLOD>                                     CanvasLODs;                                        // 0x28(0x10)
	class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x38(0x8)
	class UClass*                                                XMarksTheSpotMapItemInfoDescClass;                 // 0x40(0x8)
	float                                                        DefaultDigRadius;                                  // 0x48(0x4)
	float                                                        MinDistanceBetweenTreasureLocations;               // 0x4c(0x4)
	class UClass*                                                ZoomMapItemInfoDescClass;                          // 0x50(0x8)
	float                                                        DefaultRiddleDigRadius;                            // 0x58(0x4)
	char                                                         pad0x4_HZ3HI[0x4];                                 // 0x5c(0x4)
	class UClass*                                                RiddleMapItemInfoDescClass;                        // 0x60(0x8)
	class RiddleTextPhrasebookDataAsset*                         RiddlePhrasebookDataAsset;                         // 0x68(0x8)
	class RiddleQuestData*                                       RiddleQuestDataAsset;                              // 0x70(0x8)
	class RiddleQuestDescGeneratorData*                          RiddleQuestDescGeneratorData;                      // 0x78(0x8)
	class RiddleQuestValidLocationGeneratorData*                 RiddleQuestValidLocationGeneratorData;             // 0x80(0x8)
	class UClass*                                                BountyMapItemInfoDescClass;                        // 0x88(0x8)
	class BountyQuestData*                                       BountyQuestData;                                   // 0x90(0x8)
	class BountyQuestDescData*                                   BountyQuestDescData;                               // 0x98(0x8)
	class MerchantQuestData*                                     MerchantQuestData;                                 // 0xa0(0x8)
	class UClass*                                                MerchantMapItemInfoDescClass;                      // 0xa8(0x8)
	class CargoRunQuestData*                                     CargoRunQuestData;                                 // 0xb0(0x8)
	class UClass*                                                CargoRunMapItemInfoDescClass;                      // 0xb8(0x8)
	class UClass*                                                HuntersCallCompany;                                // 0xc0(0x8)
	class VoyageProposalAssetSelector*                           VoyageProposalAssetData;                           // 0xc8(0x8)
	class WwiseEvent*                                            VoyageSelectionVoteCompletedSound;                 // 0xd0(0x8)
	struct BuriedTreasureChestParams                             BuriedTreasureChestParams;                         // 0xd8(0x48)
	TArray<struct VoyageProposalOverride>                        VoyageProposalOverrides;                           // 0x120(0x10)
	class UClass*                                                VoyageProposal;                                    // 0x130(0x8)
	class UClass*                                                VoyageProposal2;                                   // 0x138(0x8)
	class UClass*                                                VoyageProposal3;                                   // 0x140(0x8)
	class UClass*                                                VoyageProposal4;                                   // 0x148(0x8)
	struct StringAssetReference                                  VotingTableVoyageProposalDiveShipMesh;             // 0x150(0x10)
	struct Vector                                                VotingTableVoyageProposalDiveShipOffset;           // 0x160(0xc)
	char                                                         pad0x4_2KV4T[0x4];                                 // 0x16c(0x4)
	TArray<struct QuestTableShipOffset>                          VotingTableVoyageProposalDiveShipOffsetPerCompany; // 0x170(0x10)
	struct Vector                                                VotingTableVoyageProposalDiveShipTallTaleOffset;   // 0x180(0xc)
	float                                                        VotingTableVoyageProposalDiveShipYaw;              // 0x18c(0x4)
	float                                                        VotingTableVoyageProposalDiveShipScale;            // 0x190(0x4)
	char                                                         pad0x4_IZ50L[0x4];                                 // 0x194(0x4)
	TArray<class Class*>                                         AllTreasureArtifactsItemInfoDescs;                 // 0x198(0x10)
	TArray<class Class*>                                         AllMessageInBottles;                               // 0x1a8(0x10)
	TArray<class Class*>                                         AllSkeletonOrders;                                 // 0x1b8(0x10)
	TArray<class Class*>                                         AllCollectorsChests;                               // 0x1c8(0x10)
	class GoldInContainerDataAsset*                              GoldInContainerDataAsset;                          // 0x1d8(0x8)
	TArray<class Class*>                                         AllGoldMounds;                                     // 0x1e0(0x10)
	TArray<class Class*>                                         DefaultSeas;                                       // 0x1f0(0x10)
	struct StringAssetReference                                  MessageInABottleMapsDiscoveredBackgroundImage;     // 0x200(0x10)
	TArray<struct StringAssetReference>                          MessageInABottleMapsDiscoveredImages;              // 0x210(0x10)
	struct StringAssetReference                                  SkeletonOrderMapsDiscoveredBackgroundImage;        // 0x220(0x10)
	TArray<struct StringAssetReference>                          SkeletonOrderMapsDiscoveredImages;                 // 0x230(0x10)
	struct StringAssetReference                                  CoralMessageInABottleMapsDiscoveredBackgroundImage; // 0x240(0x10)
	TArray<struct StringAssetReference>                          CoralMessageInABottleMapsDiscoveredImages;         // 0x250(0x10)
	struct StringAssetReference                                  AthenaMessageInABottleMapsDiscoveredBackgroundImage; // 0x260(0x10)
	TArray<struct StringAssetReference>                          AthenaMessageInABottleMapsDiscoveredImages;        // 0x270(0x10)
	struct StringAssetReference                                  AshenMessageInABottleMapsDiscoveredBackgroundImage; // 0x280(0x10)
	TArray<struct StringAssetReference>                          AshenMessageInABottleMapsDiscoveredImages;         // 0x290(0x10)
	struct StringAssetReference                                  GoldMessageInABottleMapsDiscoveredBackgroundImage; // 0x2a0(0x10)
	TArray<struct StringAssetReference>                          GoldMessageInABottleMapsDiscoveredImages;          // 0x2b0(0x10)
	struct StringAssetReference                                  SmugglersMessageInABottleMapsDiscoveredBackgroundImage; // 0x2c0(0x10)
	TArray<struct StringAssetReference>                          SmugglersMessageInABottleMapsDiscoveredImages;     // 0x2d0(0x10)
	class WwiseEvent*                                            TutorialStepStartSfx;                              // 0x2e0(0x8)
	struct Rotator                                               TutorialCutsceneSpawnpointRotation;                // 0x2e8(0xc)
	struct Vector                                                TutorialCutsceneFirstPersonMeshOffset;             // 0x2f4(0xc)
	float                                                        TutorialCutsceneCharacterModelReplacedEventTimeout; // 0x300(0x4)
	float                                                        TutorialCutsceneTimeBeforeFadeIn;                  // 0x304(0x4)
	float                                                        TutorialCutsceneFadeInDuration;                    // 0x308(0x4)
	char                                                         pad0x4_O7D5Z[0x4];                                 // 0x30c(0x4)
	class UClass*                                                FoodToAddToInventoryInEatingTutorial;              // 0x310(0x8)
	float                                                        TutorialStartingHealth;                            // 0x318(0x4)
	char                                                         pad0x4_PE5G7[0x4];                                 // 0x31c(0x4)
	class PopUpMessageDesc*                                      TutorialEatBananaOpenRadial;                       // 0x320(0x8)
	class PopUpMessageDesc*                                      TutorialSelectBananaPopupDesc;                     // 0x328(0x8)
	class PopUpMessageDesc*                                      TutorialEatBananaPopupDesc;                        // 0x330(0x8)
	class PopUpMessageDesc*                                      TutorialCycleWeaponPopupDesc;                      // 0x338(0x8)
	class PopUpMessageDesc*                                      TutorialUseMapOpenRadial;                          // 0x340(0x8)
	class PopUpMessageDesc*                                      TutorialSelectMap;                                 // 0x348(0x8)
	class PopUpMessageDesc*                                      TutorialUseMapPopupDesc;                           // 0x350(0x8)
	class PopUpMessageDesc*                                      TutorialShowMapPopupDesc;                          // 0x358(0x8)
	class UClass*                                                MapToAddToInventoryInTutorial;                     // 0x360(0x8)
	class PopUpMessageDesc*                                      TutorialBuyVoyagePopupDesc;                        // 0x368(0x8)
	class PopUpMessageDesc*                                      TutorialBuyVoyageNextOptionsDesc;                  // 0x370(0x8)
	class PopUpMessageDesc*                                      PlaceVoyageOnCaptainTablePopupDesc;                // 0x378(0x8)
	class PopUpMessageDesc*                                      ReturnBootyToTraderPopupDesc;                      // 0x380(0x8)
	class PopUpMessageDesc*                                      TutorialBuyClothesPopupDesc;                       // 0x388(0x8)
	class PopUpMessageDesc*                                      TutorialEquipItemPopupDesc;                        // 0x390(0x8)
	class FootstepIDAsset*                                       GoldHoarderToClothesShopFootstepID;                // 0x398(0x8)
	class FootstepIDAsset*                                       ClothesShopToVanityChestFootstepID;                // 0x3a0(0x8)
	class PopUpMessageDesc*                                      MermaidTutorialPopupDesc;                          // 0x3a8(0x8)
	struct RewardId                                              OnTutorialEndedRewardId;                           // 0x3b0(0x8)
	struct FName                                                 OnTutorialEndedRewardCompanyName;                  // 0x3b8(0x8)
	class UClass*                                                ChestInventoryInSellTreasureStep;                  // 0x3c0(0x8)
	TArray<struct Name>                                          IslandNamesWithFemaleStranger;                     // 0x3c8(0x10)
	class PopUpMessageDesc*                                      TutorialTalkToStrangerPopupDesc;                   // 0x3d8(0x8)
	class PopUpMessageDesc*                                      TutorialTalkToFemaleStrangerPopupDesc;             // 0x3e0(0x8)
	class PopUpMessageDesc*                                      TutorialSellTreasurePopupDesc;                     // 0x3e8(0x8)
	class PopUpMessageDesc*                                      TutorialPickUpChestPopupDesc;                      // 0x3f0(0x8)
	class FootstepIDAsset*                                       StrangerToGoldHoarderFootstepID;                   // 0x3f8(0x8)
	class PopUpMessageDesc*                                      ReturnToStrangerPopupDesc;                         // 0x400(0x8)
	class PopUpMessageDesc*                                      ReturnToStrangerFemalePopupDesc;                   // 0x408(0x8)
	class PopUpMessageDesc*                                      GoItAlonePopupDesc;                                // 0x410(0x8)
	class PopUpMessageDesc*                                      BeginTallTalePopupDesc;                            // 0x418(0x8)
	TArray<struct EmissaryCompanyQuestIcons>                     EmissaryCompanyIcons;                              // 0x420(0x10)
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class DestroyableMechanismTrigger: public Actor
{
public:
	class HealthComponent*                                       HealthComponent;                                   // 0x3a0(0x8)
	class OptInDamageableComponent*                              DamageableComponent;                               // 0x3a8(0x8)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3b0(0x8)
	float                                                        TriggerMechanismAtOrBelowHealthValue;              // 0x3b8(0x4)
	char                                                         pad0x4_51NYG[0x4];                                 // 0x3bc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OfferingNPCInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class WaitOnCollectableQuestObjectStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_JJAVF[0x8];                                 // 0x98(0x8)
	class WaitOnCollectableQuestObjectStepDesc*                  StepDesc;                                          // 0xa0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitReactionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MerchantCrateProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContendedResourcesProvider: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class EntitlementMapDataAsset: public DataAsset
{
public:
	TArray<struct EntitlementMapEntry>                           Entitlements;                                      // 0x28(0x10)
	TArray<class EntitlementMapDataAsset*>                       EntitlementAssets;                                 // 0x38(0x10)
	TArray<String>                                               KnownErroniusEntitlementIdsToConsume;              // 0x48(0x10)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class AshCloudAIAbilityParams: public AthenaAIAbilityParams
{
public:
	class UClass*                                                AshCloudClass;                                     // 0xc8(0x8)
};


// Size 0x68 (Full Size[0x408] - InheritedSize[0x3a0]
class HoleService: public Actor
{
public:
	char                                                         pad0x8_NBX8Q[0x8];                                 // 0x3a0(0x8)
	TArray<uintptr_t>                                            Holes;                                             // 0x3a8(0x10)
	TArray<struct HoleContainer>                                 HoleContainers;                                    // 0x3b8(0x10)
	class HoleDataAsset*                                         HoleDataAsset;                                     // 0x3c8(0x8)
	char                                                         pad0x10_5YDGB[0x10];                               // 0x3d0(0x10)
	TArray<class DigsiteObject*>                                 Digsites;                                          // 0x3e0(0x10)
	char                                                         pad0x18_2NABI[0x18];                               // 0x3f0(0x18)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseActivateAudioState: public StatusResponse
{
public:
	struct FName                                                 StateName;                                         // 0x38(0x8)
};


// Size 0x28 (Full Size[0x410] - InheritedSize[0x3e8]
class RespawnAndTaleProgressTriggerVolume: public PhysicsVolume
{
public:
	class RespawnAndTaleProgressComponent*                       Progress;                                          // 0x3e8(0x8)
	bool                                                         ClearProgress;                                     // 0x3f0(0x1)
	char                                                         pad0x3_EIQ9U[0x3];                                 // 0x3f1(0x3)
	int                                                          ProgressLevel;                                     // 0x3f4(0x4)
	TArray<class ProgressSpawnLocation*>                         LinkedSpawnLocation;                               // 0x3f8(0x10)
	bool                                                         SetRespawnProgress;                                // 0x408(0x1)
	bool                                                         SetRespawnProgressForWholeCrew;                    // 0x409(0x1)
	bool                                                         SetTaleProgress;                                   // 0x40a(0x1)
	bool                                                         SetTaleProgressForWholeCrew;                       // 0x40b(0x1)
	char                                                         pad0x4_R9AW8[0x4];                                 // 0x40c(0x4)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class AIRowboatServiceSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  AIRowboatServiceSettingsAsset;                     // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxCustomisationType: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class FishingFreeLookConstrainsDataAsset: public DataAsset
{
public:
	float                                                        YawDegrees;                                        // 0x28(0x4)
	float                                                        PitchMinDegrees;                                   // 0x2c(0x4)
	float                                                        PitchMaxDegrees;                                   // 0x30(0x4)
	float                                                        LookAroundRightStickInputToAngleModifier;          // 0x34(0x4)
	float                                                        LookAroundMouseInputToAngleModifier;               // 0x38(0x4)
	float                                                        LookAroundMouseInputAsMovementInputModifier;       // 0x3c(0x4)
};


// Size 0x1e0 (Full Size[0x580] - InheritedSize[0x3a0]
class FishingFishSpawner: public Actor
{
public:
	char                                                         pad0x8_WV2ZZ[0x8];                                 // 0x3a0(0x8)
	float                                                        SpawnerDistanceFromWaterSurface;                   // 0x3a8(0x4)
	char                                                         pad0x4_TITPT[0x4];                                 // 0x3ac(0x4)
	TArray<Class>                                                FishToSpawnList;                                   // 0x3b0(0x10)
	float                                                        PlayerProximityActivationRange;                    // 0x3c0(0x4)
	float                                                        NearbyShipRange;                                   // 0x3c4(0x4)
	float                                                        FishSpawnRate;                                     // 0x3c8(0x4)
	float                                                        FishRespawnRate;                                   // 0x3cc(0x4)
	char                                                         NumFishToSpawn;                                    // 0x3d0(0x1)
	char                                                         pad0x7_LMTIB[0x7];                                 // 0x3d1(0x7)
	class SceneComponent*                                        RootComp;                                          // 0x3d8(0x8)
	class BoxComponent*                                          FishSpawningZoneCollider;                          // 0x3e0(0x8)
	char                                                         TotalFishCaughtOrDespawned;                        // 0x3e8(0x1)
	char                                                         pad0x3_5V0BS[0x3];                                 // 0x3e9(0x3)
	float                                                        TimeForVFXToHide;                                  // 0x3ec(0x4)
	char                                                         pad0x8_8OD7Z[0x8];                                 // 0x3f0(0x8)
	TArray<class FishingFish*>                                   AllSpawnedFishingFish;                             // 0x3f8(0x10)
	TArray<struct Guid>                                          AllSpawnedFishingFishGUIDs;                        // 0x408(0x10)
	char                                                         pad0x8_VTUTE[0x8];                                 // 0x418(0x8)
	char                                                         NumOfFishSpawned;                                  // 0x420(0x1)
	char                                                         pad0x3_75ZDX[0x3];                                 // 0x421(0x3)
	struct Vector                                                FishSpawningZoneColliderExtent;                    // 0x424(0xc)
	bool                                                         FishSpawningZoneColliderHiddenInGame;              // 0x430(0x1)
	char                                                         pad0x2f_SD6DA[0x2f];                               // 0x431(0x2f)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x460(0xa0)
	char                                                         pad0x8_F9TLU[0x8];                                 // 0x500(0x8)
	TArray<struct SpawnedFishData>                               AllSpawnedFishData;                                // 0x508(0x10)
	char                                                         OriginalNumOfFishToSpawnInTale;                    // 0x518(0x1)
	char                                                         NumOfFishCaught;                                   // 0x519(0x1)
	bool                                                         AllFishCaught;                                     // 0x51a(0x1)
	char                                                         pad0x1_X73XH[0x1];                                 // 0x51b(0x1)
	struct Guid                                                  FishSpawnerID;                                     // 0x51c(0x10)
	struct Guid                                                  VoyageID;                                          // 0x52c(0x10)
	char                                                         pad0x44_MEJX8[0x44];                               // 0x53c(0x44)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class CoherentUIGTRootDataAsset: public DataAsset
{
public:
	TArray<class CoherentUIGTAssetContainer*>                    SharedContainers;                                  // 0x28(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    HUDContainers;                                     // 0x38(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    MenuContainers;                                    // 0x48(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    ShopContainers;                                    // 0x58(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    CompanyContainers;                                 // 0x68(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    FrontendContainers;                                // 0x78(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    InGameContainers;                                  // 0x88(0x10)
};


// Size 0x0 (Full Size[0x3a0] - InheritedSize[0x3a0]
class EnchantedSpyglassItemInfo: public Actor
{
public:
};


// Size 0x168 (Full Size[0x190] - InheritedSize[0x28]
class DynamicAnimationAllocationTelemtry: public Object
{
public:
	char                                                         pad0x168_5FPVO[0x168];                             // 0x28(0x168)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildServiceInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0x130] - InheritedSize[0xb8]
class WaterHeightProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x78_7N8QP[0x78];                               // 0xb8(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RainExposureInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class GenericPart: public Actor
{
public:
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3a0(0x8)
	char                                                         pad0x18_P635F[0x18];                               // 0x3a8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlPulleyActionStateId: public ActionStateId
{
public:
};


// Size 0x120 (Full Size[0x1d8] - InheritedSize[0xb8]
class MaterialAnimatorComponent: public ActorComponent
{
public:
	char                                                         pad0x80_NYNWE[0x80];                               // 0xb8(0x80)
	TArray<struct MaterialAnimatorGroup>                         AnimationGroups;                                   // 0x138(0x10)
	TArray<struct MaterialAnimatorGroupInstance>                 AnimationGroupInstances;                           // 0x148(0x10)
	char                                                         pad0x80_BN94S[0x80];                               // 0x158(0x80)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class OpenableItemReactionComponent: public ActorComponent
{
public:
	char                                                         pad0x10_6K32V[0x10];                               // 0xb8(0x10)
};


// Size 0x70 (Full Size[0x410] - InheritedSize[0x3a0]
class MechanismGroup: public Actor
{
public:
	char                                                         pad0x10_VZ5XD[0x10];                               // 0x3a0(0x10)
	TArray<class Mechanism*>                                     Mechanisms;                                        // 0x3b0(0x10)
	struct WeightedProbabilityRangeOfRanges                      MechanismsToSelect;                                // 0x3c0(0x30)
	TArray<class Mechanism*>                                     SelectedMechanisms;                                // 0x400(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class VisualHealthResponseDataAsset: public DataAsset
{
public:
	TArray<class Object*>                                        GatedByHealthVfxAscendingOrder;                    // 0x28(0x10)
	struct FName                                                 GatedByHealthVfxSocketName;                        // 0x38(0x8)
	bool                                                         GatedByHealthVfxValidUnderwater;                   // 0x40(0x1)
	char                                                         pad0x3_UAHM6[0x3];                                 // 0x41(0x3)
	struct FName                                                 HealthPropertyName;                                // 0x44(0x8)
	float                                                        SignificantHealthChangeNormalised;                 // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class SinkingComponent: public ActorComponent
{
public:
	char                                                         pad0x10_E4ICV[0x10];                               // 0xb8(0x10)
	class ShipSinkingHandler*                                    DefaultShipSinkingHandler;                         // 0xc8(0x8)
	struct SinkingShipParams                                     SinkingParams;                                     // 0xd0(0x38)
	class Actor*                                                 Ship;                                              // 0x108(0x8)
	char                                                         ShipState;                                         // 0x110(0x1)
	char                                                         pad0x7_1OQQK[0x7];                                 // 0x111(0x7)
	class ShipSinkingHandler*                                    ShipSinkingHandler;                                // 0x118(0x8)
	char                                                         pad0x28_8V3F1[0x28];                               // 0x120(0x28)
};


// Size 0x150 (Full Size[0x4f0] - InheritedSize[0x3a0]
class LandmarkReactionPlayer: public Actor
{
public:
	char                                                         pad0x8_KVZHU[0x8];                                 // 0x3a0(0x8)
	TArray<struct LandmarkReactionKeyFrame>                      OrderedReactions;                                  // 0x3a8(0x10)
	char                                                         pad0x58_B3V6T[0x58];                               // 0x3b8(0x58)
	TArray<class ParticleSystemComponent*>                       ActiveParticleSystems;                             // 0x410(0x10)
	char                                                         pad0xd0_YT66D[0xd0];                               // 0x420(0xd0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerEntitlementControlInterface: public Interface
{
public:
};


// Size 0x450 (Full Size[0x7f0] - InheritedSize[0x3a0]
class PiratePreviewActor: public Actor
{
public:
	char                                                         pad0x18_OIQ6E[0x18];                               // 0x3a0(0x18)
	class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x3b8(0x8)
	class CosmeticVfxComponent*                                  CosmeticVfxComponent;                              // 0x3c0(0x8)
	class DisguiseHandlerComponent*                              DisguiseHandlerComponent;                          // 0x3c8(0x8)
	char                                                         pad0x258_JTP6P[0x258];                             // 0x3d0(0x258)
	struct PiratePreviewView                                     DelayedGenerationView;                             // 0x628(0x20)
	char                                                         pad0x88_V6PG5[0x88];                               // 0x648(0x88)
	TArray<class SceneComponent*>                                CameraLocations;                                   // 0x6d0(0x10)
	class AnimationAsset*                                        PendingAnim;                                       // 0x6e0(0x8)
	class DataAsset*                                             EmotePropData;                                     // 0x6e8(0x8)
	char                                                         pad0x18_AL37X[0x18];                               // 0x6f0(0x18)
	TArray<class ParticleSystemComponent*>                       ParticleComponents;                                // 0x708(0x10)
	class AnimationAsset*                                        DefaultAnimation;                                  // 0x718(0x8)
	struct ObjectMessagingHandle                                 PreviewReadyEventHandle;                           // 0x730(0x58)
	struct ObjectMessagingHandle                                 PreviewBusyEventHandle;                            // 0x788(0x58)
	float                                                        SpinPirateRate;                                    // 0x7e0(0x4)
	char                                                         pad0x4_HS0R0[0x4];                                 // 0x7e4(0x4)
	class SkeletalMeshSocket*                                    LookAtSocket;                                      // 0x7e8(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class PerformancePetSpawnDefinitionsDataAsset: public DataAsset
{
public:
	TArray<struct PetSpawnDefinition>                            PetSpawnDefinitions;                               // 0x28(0x10)
	class EnvQuery*                                              SpawnQuery;                                        // 0x38(0x8)
	class EnvQuery*                                              ShipSpawnQuery;                                    // 0x40(0x8)
	int                                                          PetCount;                                          // 0x48(0x4)
	bool                                                         SpawnPetsOnStart;                                  // 0x4c(0x1)
	char                                                         pad0x3_U7ES0[0x3];                                 // 0x4d(0x3)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class SeaFortAddOnSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  SeaFortAddOnSharedDataAsset;                       // 0x38(0x10)
	struct StringAssetReference                                  SeaFortAddOnSharedDataAssetClient;                 // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PointOfInterestTrackerInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetMechanismActionStateStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    MechanismAction;                                   // 0x80(0x30)
	char                                                         NewState;                                          // 0xb0(0x1)
	char                                                         pad0x7_BSH8T[0x7];                                 // 0xb1(0x7)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class ExitOnAllCrewsDestroyedStep: public TaleQuestStep
{
public:
	class ExitOnAllCrewsDestroyedStepDesc*                       Desc;                                              // 0x98(0x8)
	char                                                         pad0x8_FN9VG[0x8];                                 // 0xa0(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ContestShipCatalogueDataAsset: public DataAsset
{
public:
	TArray<struct ShipLiveryTeamSet>                             ArenaShipTeamSets;                                 // 0x28(0x10)
	TArray<struct ShipLiveryTeamSet>                             UniqueLiverySets;                                  // 0x38(0x10)
	float                                                        ChanceOfUniqueShipSwap;                            // 0x48(0x4)
	char                                                         pad0x4_H2MMZ[0x4];                                 // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BoilingStatus: public StatusBase
{
public:
};


// Size 0xc8 (Full Size[0x180] - InheritedSize[0xb8]
class CoordinatedCutsceneTriggerComponent: public ActorComponent
{
public:
	class Actor*                                                 CutSceneActor;                                     // 0xb8(0x8)
	struct FName                                                 CutsceneName;                                      // 0xc0(0x8)
	bool                                                         ActivationInitiallyEnabled;                        // 0xc8(0x1)
	char                                                         StateAfterFinishedPlaying;                         // 0xc9(0x1)
	bool                                                         AllowInfiniteNumberOfActivations;                  // 0xca(0x1)
	char                                                         pad0x1_D51SJ[0x1];                                 // 0xcb(0x1)
	int                                                          SpecificNumberOfActivationsAllowed;                // 0xcc(0x4)
	bool                                                         ReattemptActivationAfterConflictingCutsceneFinishes; // 0xd0(0x1)
	char                                                         pad0x3_C2T6X[0x3];                                 // 0xd1(0x3)
	struct FloatInterval                                         DelayWhenReattemptingActivation;                   // 0xd4(0x8)
	char                                                         pad0x4_W9CFG[0x4];                                 // 0xdc(0x4)
	TArray<struct StateChangeCoordination>                       StateChangeCoordination;                           // 0xe0(0x10)
	char                                                         StateChangeAfterMechanismActionIsTriggered;        // 0xf0(0x1)
	char                                                         pad0x3_QCO5B[0x3];                                 // 0xf1(0x3)
	struct FloatInterval                                         DelayAfterMechanismActionIsTriggered;              // 0xf4(0x8)
	bool                                                         TriggerMechanismOnStateChange;                     // 0xfc(0x1)
	char                                                         StateToActivateMechanismTrigger;                   // 0xfd(0x1)
	char                                                         pad0x2_HTEEP[0x2];                                 // 0xfe(0x2)
	struct FloatInterval                                         DelayToActivateMechanismTrigger;                   // 0x100(0x8)
	class ConditionRootAsset*                                    AdditionalCondition;                               // 0x108(0x8)
	class CoordinatedCutsceneTriggerStatsAsset*                  StatsToFireAsset;                                  // 0x110(0x8)
	class Actor*                                                 LastInstigator;                                    // 0x150(0x8)
	char                                                         pad0x28_IDS0A[0x28];                               // 0x158(0x28)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class CollidableCharacterComponent: public ActorComponent
{
public:
	char                                                         pad0x8_N59HJ[0x8];                                 // 0xb8(0x8)
	bool                                                         ShouldAlwaysBeConsideredForCharacterCollision;     // 0xc0(0x1)
	char                                                         pad0x7_BWM8S[0x7];                                 // 0xc1(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotifyWieldableBookForcePageRedraw: public AnimNotify
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestData: public DataAsset
{
public:
	class PopUpMessageDesc*                                      ContractCompletePopupDesc;                         // 0x28(0x8)
	class PopUpMessageDesc*                                      ContractExpiredPopupDesc;                          // 0x30(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAnimationEmoteListingAsset: public DataAsset
{
public:
	TArray<class AthenaAnimationEmoteGroupingAsset*>             EmoteGroupings;                                    // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAnimationItemListingAsset: public DataAsset
{
public:
	TArray<class AthenaAnimationsGroupingAssetBase*>             AnimationGroupings;                                // 0x28(0x10)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class NPCOnShipDataAsset: public DataAsset
{
public:
	class NPCOnSurfaceDataAsset*                                 NPCOnSurfaceDataAsset;                             // 0x28(0x8)
	TArray<struct Name>                                          RestrictedIslands;                                 // 0x30(0x10)
	struct WeightedProbabilityRangeOfRanges                      PlayersLeftShipRespawnCooldown;                    // 0x40(0x30)
	float                                                        TimeBetweenShipStateChecks;                        // 0x70(0x4)
	float                                                        TimeBetweenNPCUnderwaterChecks;                    // 0x74(0x4)
	bool                                                         ShouldAvoidFire;                                   // 0x78(0x1)
	char                                                         pad0x3_IUQQW[0x3];                                 // 0x79(0x3)
	float                                                        TimeBetweenNPCOnFireChecks;                        // 0x7c(0x4)
	float                                                        EnemyShipNearbyDistanceXYInMetres;                 // 0x80(0x4)
	float                                                        TimeBetweenRadialStateChecks;                      // 0x84(0x4)
	float                                                        TimeBetweenHideWhenInDangerChecks;                 // 0x88(0x4)
	char                                                         pad0x4_JIRPP[0x4];                                 // 0x8c(0x4)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class PetRoamingAnimationStateDefinitionDataAsset: public DataAsset
{
public:
	struct PetRoamingAnimationStateDefinition                    AnimationDefinitionData;                           // 0x28(0x38)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class StorageContainerComponentData: public DataAsset
{
public:
	TArray<char>                                                 CloseInteractionExemptHealthChangeReasons;         // 0x28(0x10)
	class WwiseEvent*                                            BeginQuickGiveSFX;                                 // 0x38(0x8)
	class WwiseEvent*                                            EndQuickGiveSFX;                                   // 0x40(0x8)
	class WwiseEvent*                                            BeginQuickTakeSFX;                                 // 0x48(0x8)
	class WwiseEvent*                                            EndQuickTakeSFX;                                   // 0x50(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MoveForwardAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x168 (Full Size[0x508] - InheritedSize[0x3a0]
class PlayerManagerService: public Actor
{
public:
	char                                                         pad0x18_6PS2K[0x18];                               // 0x3a0(0x18)
	TArray<struct WeakActorHandle>                               AllPlayerControllers;                              // 0x3b8(0x10)
	char                                                         pad0x140_TG8QW[0x140];                             // 0x3c8(0x140)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainTauntAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0x0 (Full Size[0x290] - InheritedSize[0x290]
class LookAtOffsetInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
};


// Size 0x260 (Full Size[0x600] - InheritedSize[0x3a0]
class Storm: public Actor
{
public:
	char                                                         pad0x20_3U9Z7[0x20];                               // 0x3a0(0x20)
	float                                                        PercentageOfStormWhereLightningCanStrike;          // 0x3c0(0x4)
	char                                                         pad0x4_GQ3F7[0x4];                                 // 0x3c4(0x4)
	struct StormScalingParameters                                ScalingParams;                                     // 0x3c8(0xd0)
	class ExplosionComponent*                                    ExplosionComponent;                                // 0x498(0x8)
	class WindZoneComponent*                                     WindZoneComponent;                                 // 0x4a0(0x8)
	class RainZoneComponent*                                     RainZoneComponent;                                 // 0x4a8(0x8)
	class LightningComponent*                                    LightningComponent;                                // 0x4b0(0x8)
	class LightningManagerComponent*                             LightningManagerComponent;                         // 0x4b8(0x8)
	class AtmosphericPressureZoneComponent*                      PressureZoneComponent;                             // 0x4c0(0x8)
	class CalmWaterComponent*                                    AngryWaterZoneComponent;                           // 0x4c8(0x8)
	struct FString                                               SubjectName;                                       // 0x4d0(0x10)
	float                                                        StormScale;                                        // 0x4e0(0x4)
	float                                                        Radius;                                            // 0x4e4(0x4)
	float                                                        ServerMigrationRadiusMultiplier;                   // 0x4e8(0x4)
	char                                                         pad0x4_V1UXG[0x4];                                 // 0x4ec(0x4)
	class StaticMeshComponent*                                   BaseCloudMeshComponent;                            // 0x4f0(0x8)
	class StaticMeshComponent*                                   RainSheetOuterMeshComponent;                       // 0x4f8(0x8)
	class StaticMeshComponent*                                   RainSheetInnerMeshComponent;                       // 0x500(0x8)
	class StaticMeshComponent*                                   RingCloudMeshComponent;                            // 0x508(0x8)
	class StaticMeshComponent*                                   TopCloudMeshComponent;                             // 0x510(0x8)
	struct EncounterParams                                       EncounterParams;                                   // 0x518(0xc)
	char                                                         pad0xc_URBP6[0xc];                                 // 0x524(0xc)
	class StormParams*                                           Params;                                            // 0x530(0x8)
	TArray<struct StormAvoidanceArea>                            AvoidAreaList;                                     // 0x538(0x10)
	char                                                         pad0x14_OGIL9[0x14];                               // 0x548(0x14)
	struct Vector2D                                              CustomCentre;                                      // 0x55c(0x8)
	float                                                        CustomStrength;                                    // 0x564(0x4)
	bool                                                         UsingCustomSettings;                               // 0x568(0x1)
	char                                                         pad0x97_3PCNE[0x97];                               // 0x569(0x97)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AssetListDataAsset: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          AssetList;                                         // 0x28(0x10)
};


// Size 0x160 (Full Size[0x500] - InheritedSize[0x3a0]
class WieldableReplica: public Actor
{
public:
	char                                                         pad0x8_5TPZR[0x8];                                 // 0x3a0(0x8)
	class PrimitiveComponent*                                    MeshComponent;                                     // 0x3a8(0x8)
	class CosmeticItemAnimationSetDataAsset*                     CachedAnimationSet;                                // 0x3b0(0x8)
	class UClass*                                                ReplicaCategory;                                   // 0x3b8(0x8)
	class UClass*                                                AlternateReplicaCategory;                          // 0x3c0(0x8)
	char                                                         pad0x138_T773K[0x138];                             // 0x3c8(0x138)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ShipSinkingHandler: public Object
{
public:
	char                                                         pad0x8_64PJH[0x8];                                 // 0x28(0x8)
	class Actor*                                                 Ship;                                              // 0x30(0x8)
	char                                                         pad0x28_5JC8K[0x28];                               // 0x38(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailAngleInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class CancelTaleStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToSpeakingTrumpetNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AmmoStoreInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickSwitchWeaponNotificationInputId: public NotificationInputId
{
public:
};


// Size 0xb0 (Full Size[0x148] - InheritedSize[0x98]
class WaitForTunnelOfTheDamnedMatchmakingTaleStep: public TaleQuestStep
{
public:
	char                                                         pad0xb0_2R4AH[0xb0];                               // 0x98(0xb0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismTriggerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeckSurfaceWaterProviderInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class TavernStrangersBarrel: public Actor
{
public:
	class StaticMeshComponent*                                   BarrelMeshComponent;                               // 0x3a0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex0SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AudioUtilities: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewShipManifestProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CombinationLockMechanismTriggerActionStateId: public ActionStateId
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class BountyQuestData: public DataAsset
{
public:
	class WwiseEvent*                                            DefaultTargetKilledAudioCue;                       // 0x28(0x8)
	float                                                        BountyLandmarkSpawnZoneRadiusInMetres;             // 0x30(0x4)
	float                                                        BountyLandmarkSpawnZoneHalfHeightInMetres;         // 0x34(0x4)
	class QuestBootyItemPopUpAsset*                              BountyQuestTargetKilledPopUpDescAsset;             // 0x38(0x8)
	class EnvQuery*                                              FindSpawnPosQuery;                                 // 0x40(0x8)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class ExplosiveTriggerRammableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_1K9WC[0x8];                                 // 0xb8(0x8)
	class RammableExplosiveDataAsset*                            ExplosiveSettings;                                 // 0xc0(0x8)
	char                                                         pad0x10_XW8VG[0x10];                               // 0xc8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogComponentInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class WaterPuzzleAlterationMechanismAudioParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                AlterationMechanismPool;                           // 0x28(0x8)
	class WwiseEvent*                                            AlterationMechanismActivateEvent;                  // 0x30(0x8)
	TArray<class WwiseEvent*>                                    AlterationMechanismDeactivateEvents;               // 0x38(0x10)
	struct FName                                                 MechanismSubmergedSwitchGroup;                     // 0x48(0x8)
	struct FName                                                 MechanismSubmergedSwitchSubmerged;                 // 0x50(0x8)
	struct FName                                                 MechanismSubmergedSwitchNotSubmerged;              // 0x58(0x8)
	class WwiseObjectPoolWrapper*                                WaterLevelPuzzlePool;                              // 0x60(0x8)
	class WwiseEvent*                                            PuzzleWaterRiseStartEvent;                         // 0x68(0x8)
	class WwiseEvent*                                            PuzzleWaterRiseEndEvent;                           // 0x70(0x8)
	class WwiseEvent*                                            PuzzleWaterFallStartEvent;                         // 0x78(0x8)
	class WwiseEvent*                                            PuzzleWaterFallEndEvent;                           // 0x80(0x8)
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class BalanceableWalkwayActor: public Actor
{
public:
	class DynamicCordRenderComponent*                            CordRenderComponent;                               // 0x3a0(0x8)
	class BalanceableWalkwayComponent*                           BalanceableWalkwayComponent;                       // 0x3a8(0x8)
	class SceneComponent*                                        StartPoint;                                        // 0x3b0(0x8)
	class SceneComponent*                                        EndPoint;                                          // 0x3b8(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class CharacterAudioEventControllerParams: public DataAsset
{
public:
	class WwiseEvent*                                            WieldEvent;                                        // 0x28(0x8)
	class WwiseEvent*                                            StowEvent;                                         // 0x30(0x8)
	class WwiseEvent*                                            EnemyHitNotifyEvent;                               // 0x38(0x8)
	class WwiseEvent*                                            EnemyHitWithAimAssistAudioOnNotifyEvent;           // 0x40(0x8)
	class WwiseObjectPoolWrapper*                                EnemyHitNotifyPool;                                // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipLiveryCatalogueServiceInterface: public Interface
{
public:
};


// Size 0xe8 (Full Size[0x220] - InheritedSize[0x138]
class CloakAIFormComponent: public AthenaAIFormComponent
{
public:
	class ParticleSystem*                                        UncloakStateConstantParticlesTemplate;             // 0x138(0x8)
	class ParticleSystem*                                        CloakStateConstantParticlesTemplate;               // 0x140(0x8)
	class ParticleSystem*                                        ToUncloakTransitionParticlesTemplate;              // 0x148(0x8)
	class ParticleSystem*                                        ToCloakTransitionParticlesTemplate;                // 0x150(0x8)
	class PhysicalMaterial*                                      ClientUncloakStatePhysMaterialOverride;            // 0x158(0x8)
	class PhysicalMaterial*                                      ClientCloakStatePhysMaterialOverride;              // 0x160(0x8)
	class WwiseEvent*                                            StartCloakStateAudioLoopEvent;                     // 0x168(0x8)
	class WwiseEvent*                                            StopCloakStateAudioLoopEvent;                      // 0x170(0x8)
	TArray<Class>                                                CloakBaseMaterials;                                // 0x178(0x10)
	struct FName                                                 CloakShaderParamName;                              // 0x188(0x8)
	float                                                        UncloakStateShaderParamValue;                      // 0x190(0x4)
	float                                                        CloakStateShaderParamValue;                        // 0x194(0x4)
	float                                                        ShaderParamBlendSpeed;                             // 0x198(0x4)
	struct FName                                                 SeedShaderParamName;                               // 0x19c(0x8)
	int                                                          MaxSeedShaderValue;                                // 0x1a4(0x4)
	char                                                         CurrentState;                                      // 0x1a8(0x1)
	char                                                         pad0x7_OJ0KI[0x7];                                 // 0x1a9(0x7)
	class ParticleSystemComponent*                               UncloakStateConstantParticleSystemComponent;       // 0x1b0(0x8)
	class ParticleSystemComponent*                               CloakStateConstantParticleSystemComponent;         // 0x1b8(0x8)
	TArray<class MaterialInstanceDynamic*>                       CloakDynamicMaterialInstances;                     // 0x1c0(0x10)
	char                                                         pad0x48_FSXFL[0x48];                               // 0x1d0(0x48)
	bool                                                         IsInitializedWithFormData;                         // 0x218(0x1)
	char                                                         pad0x7_TAKQF[0x7];                                 // 0x219(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SpotlightFocusBeamReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadingPointInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CarouselPirateGenerator: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class PacingComponentPublicData: public DataAsset
{
public:
	class CurveFloat*                                            PacingCameraCurve;                                 // 0x28(0x8)
	float                                                        PacingMovementSpeedModifier;                       // 0x30(0x4)
	float                                                        CameraCurveTToPlayRumble;                          // 0x34(0x4)
	float                                                        CameraCurveTToPlayFootstepSFX;                     // 0x38(0x4)
	float                                                        MinStickDeflectionToMove;                          // 0x3c(0x4)
	float                                                        CameraSpringAccel;                                 // 0x40(0x4)
	float                                                        CamPitchScalar;                                    // 0x44(0x4)
	class ForceFeedbackEffect*                                   TakingAStepRumble;                                 // 0x48(0x8)
	class WwiseEvent*                                            TakingAStepAudioStateEvent;                        // 0x50(0x8)
	char                                                         HitTestTraceChannel;                               // 0x58(0x1)
	char                                                         pad0x7_5BUD1[0x7];                                 // 0x59(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PersistenceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReplenishableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AIShipEncounterSpawnerTemplateDataAsset: public DataAsset
{
public:
	TArray<struct AIShipCrewSizeSpecificSpawnerEntry>            CrewSizeSpecificSpawnerTemplates;                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneResponsePlayerInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAnimationSittingDataAsset: public DataAsset
{
public:
	TArray<struct SeatAnimationDefinition>                       Animations;                                        // 0x28(0x10)
	class UClass*                                                SittingStateId;                                    // 0x38(0x8)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class ConfigurableBuryableItemComponent: public ActorComponent
{
public:
	char                                                         pad0x8_ZIYA7[0x8];                                 // 0xb8(0x8)
	bool                                                         NotBuryable;                                       // 0xc0(0x1)
	bool                                                         HalfBuryable;                                      // 0xc1(0x1)
	bool                                                         DoNotMakeXMarkWhenBuried;                          // 0xc2(0x1)
	bool                                                         DoNotNotifyAndMigrateWithCrew;                     // 0xc3(0x1)
	char                                                         pad0x4_L4P25[0x4];                                 // 0xc4(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PetRoamingAnimationStateDefinitionsDataAsset: public DataAsset
{
public:
	TArray<struct PetRoamingAnimationStateDefinitionWrapper>     DefinitionWrappers;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_ShouldCheatPauseBehavior: public BTDecorator_BaseConditional
{
public:
};


// Size 0x40 (Full Size[0x340] - InheritedSize[0x300]
class NoiseMakerComponent: public WwiseEmitterComponent
{
public:
	class NoiseMakerComponentParams*                             NoiseMakerComponentParams;                         // 0x300(0x8)
	char                                                         pad0x38_XU7AU[0x38];                               // 0x308(0x38)
};


// Size 0xa8 (Full Size[0x160] - InheritedSize[0xb8]
class DockerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_YY2LZ[0x8];                                 // 0xb8(0x8)
	class UClass*                                                DockingPolicyDefinition;                           // 0xc0(0x8)
	char                                                         pad0x98_OVPUW[0x98];                               // 0xc8(0x98)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToSpyglassNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Runnable: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_AllPlayerCharacters: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableZoomInAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x508 (Full Size[0x8a8] - InheritedSize[0x3a0]
class SkellyFort: public Actor
{
public:
	char                                                         pad0x40_4QIW6[0x40];                               // 0x3a0(0x40)
	TArray<class Class*>                                         AllowedGameEventTypes;                             // 0x3e0(0x10)
	TArray<struct SkellyFortGameEventOverrides>                  GameEventTypesOverrides;                           // 0x3f0(0x10)
	TArray<struct SkellyFortPlayerStat>                          StatsToFireOnFortComplete;                         // 0x400(0x10)
	struct FName                                                 IslandName;                                        // 0x410(0x8)
	class SkeletonFortDoor*                                      FortDoor;                                          // 0x418(0x8)
	class PanicTeleportVolume*                                   FortVaultTeleportVolume;                           // 0x420(0x8)
	class InteractableBase*                                      WeaponCacheLock;                                   // 0x428(0x8)
	struct FName                                                 WeaponCacheExplosiveActivationKey;                 // 0x430(0x8)
	TArray<class Class*>                                         WeaponCacheGameEventTypes;                         // 0x438(0x10)
	class AIEncounterGenerationRecipeRankOrderList*              AIEncounterGenerationRecipeRankOrderListOverride;  // 0x448(0x8)
	char                                                         pad0x150_3ZKQP[0x150];                             // 0x450(0x150)
	struct WwiseEmitter                                          SkellyFortEmitter;                                 // 0x5a0(0x20)
	float                                                        ServerMigrationExclusionRadius;                    // 0x5c0(0x4)
	struct Vector                                                SkullCloudLoc;                                     // 0x5c4(0xc)
	float                                                        SkullCloudCloseProximityRotation;                  // 0x5d0(0x4)
	char                                                         pad0x4_3X6TI[0x4];                                 // 0x5d4(0x4)
	class AIBountySpawner*                                       Spawner;                                           // 0x5d8(0x8)
	class AggressiveGhostShipsEncounter*                         GhostShipsEncounter;                               // 0x5e0(0x8)
	char                                                         pad0x50_S80JB[0x50];                               // 0x5e8(0x50)
	class GameplayEventSignal*                                   SkullCloud;                                        // 0x648(0x8)
	TArray<class FortItemSpawnComponent*>                        Rewards;                                           // 0x650(0x10)
	class GameEventBannerDataAsset*                              CompletionBannerData;                              // 0x660(0x8)
	TArray<struct AIBountySpawnerWaveLocation>                   WaveSpawnerLocations;                              // 0x668(0x10)
	float                                                        SkullCloudMaxPitch;                                // 0x678(0x4)
	struct EncounterParams                                       SightingEncounterParams;                           // 0x67c(0xc)
	struct EncounterParams                                       CloseEncounterParams;                              // 0x688(0xc)
	char                                                         pad0x4_J8CG3[0x4];                                 // 0x694(0x4)
	struct FString                                               SubjectName;                                       // 0x698(0x10)
	struct FString                                               FortUniqueId;                                      // 0x6a8(0x10)
	class WwiseEvent*                                            WaveGroupSpawnedEvent;                             // 0x6b8(0x8)
	class WwiseEvent*                                            FinalWaveGroupSpawnedEvent;                        // 0x6c0(0x8)
	class WwiseEvent*                                            FortCompleteEvent;                                 // 0x6c8(0x8)
	char                                                         pad0x8_R587I[0x8];                                 // 0x6d0(0x8)
	class OverlapTriggerComponent*                               ActionAudioZoneComponent;                          // 0x6d8(0x8)
	class OverlapTriggerComponent*                               AnticipationAudioZoneComponent;                    // 0x6e0(0x8)
	class SeaFortCannonsMechanismTrigger*                        CannonsMechanismTrigger;                           // 0x6e8(0x8)
	class Actor*                                                 CannonsMechanismAction;                            // 0x6f0(0x8)
	class UClass*                                                ActiveFortType;                                    // 0x6f8(0x8)
	TArray<struct AdditionalCaptainTarget>                       SpawnedAdditionalCaptainsData;                     // 0x700(0x10)
	char                                                         pad0x10_DPO5M[0x10];                               // 0x710(0x10)
	struct SkellyFortUsedCaptainNameData                         UsedCaptainNames;                                  // 0x728(0xa0)
	class GameEventOnDemandAvailabilityHandler*                  GameEventOnDemandAvailabilityHandler;              // 0x7c8(0x8)
	char                                                         pad0x80_PLFP9[0x80];                               // 0x7d0(0x80)
	class ItemDescSpawnData*                                     KeySpawnData;                                      // 0x850(0x8)
	char                                                         pad0x50_ORL00[0x50];                               // 0x858(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CheerAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyENotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_MembersOfNamedCrewOnIsland: public EnvQueryContext
{
public:
};


// Size 0x10 (Full Size[0x2a0] - InheritedSize[0x290]
class MountedWeaponAimAndFireInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
	char                                                         pad0x10_UBFIN[0x10];                               // 0x290(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AdventuresActorBundleAsset: public DataAsset
{
public:
	TArray<struct AdventuresActorBundleInfo>                     Contents;                                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class LocatorContainer: public DataAsset
{
public:
	TArray<struct Locator>                                       Locators;                                          // 0x28(0x10)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class NPCBusyTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_0LYYZ[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyBNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x218 (Full Size[0x240] - InheritedSize[0x28]
class EmblemService: public Object
{
public:
	char                                                         pad0x10_95H6U[0x10];                               // 0x28(0x10)
	TArray<class PopUpMessageDesc*>                              GarbageCollectorVisiblePopups;                     // 0x38(0x10)
	TArray<class PopUpAudioDesc*>                                GarbageCollectorPopupAudioOverrides;               // 0x48(0x10)
	class TradingCompanyPopUpBackgroundCollectionDataAsset*      CompanyPopUpBackgrounds;                           // 0x58(0x8)
	char                                                         pad0x1e0_P7ASS[0x1e0];                             // 0x60(0x1e0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerEntitlementViewInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class StreamingLocationComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HZXLV[0x8];                                 // 0xb8(0x8)
	struct StreamingLocation                                     StreamingLocationOverride;                         // 0xc0(0x10)
	bool                                                         StreamingLocationActive;                           // 0xd0(0x1)
	char                                                         pad0x7_SJ7LC[0x7];                                 // 0xd1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KnockbackAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x60 (Full Size[0x400] - InheritedSize[0x3a0]
class DestroyItemWhenPlacedOnActor: public Actor
{
public:
	char                                                         pad0x8_C3W8P[0x8];                                 // 0x3a0(0x8)
	float                                                        TimeUntilItemDestroyed;                            // 0x3a8(0x4)
	char                                                         pad0x54_CXK2Z[0x54];                               // 0x3ac(0x54)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class TaleQuestNPCBeckonCrewStep: public TaleQuestStep
{
public:
	struct BeckonTag                                             BeckonTag;                                         // 0x98(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EjectFromTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterTeleportInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class EncounterListenerComponent: public ActorComponent
{
public:
	char                                                         EncounterListenerType;                             // 0xb8(0x1)
	char                                                         pad0x1f_VM6BY[0x1f];                               // 0xb9(0x1f)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageLocationExclusionFromFeatureToggleDataAsset: public DataAsset
{
public:
	TArray<struct FeatureToggledIsland>                          FeatureToggledIslandsList;                         // 0x28(0x10)
};


// Size 0x3d0 (Full Size[0x488] - InheritedSize[0xb8]
class MimicHandlerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_1SQ1H[0x8];                                 // 0xb8(0x8)
	class MimicConfig*                                           Config;                                            // 0xc0(0x8)
	struct EmoteId                                               EmoteIdForPointCommendationStat;                   // 0xc8(0x8)
	float                                                        MaxDistanceForPointCommendationStat;               // 0xd0(0x4)
	float                                                        MaxAngleForPointCommendationStat;                  // 0xd4(0x4)
	class ParticleSystemComponent*                               TransformationParticleSystemComponent;             // 0xd8(0x8)
	class ParticleSystemComponent*                               FPTransformationParticleSystemComponent;           // 0xe0(0x8)
	char                                                         pad0x8_UW20A[0x8];                                 // 0xe8(0x8)
	bool                                                         IsMimicActive;                                     // 0xf0(0x1)
	char                                                         pad0x7_077WM[0x7];                                 // 0xf1(0x7)
	struct MimicInfo                                             MimicInfo;                                         // 0xf8(0x180)
	struct MimicInfo                                             PrevMimicInfo;                                     // 0x278(0x180)
	class SkeletalMesh*                                          OwnerMesh;                                         // 0x3f8(0x8)
	bool                                                         IsMigrating;                                       // 0x400(0x1)
	char                                                         pad0x3f_XDU4X[0x3f];                               // 0x401(0x3f)
	struct BlowpipeMimicBeginTelemetryEvent                      TelemetryBeginEvent;                               // 0x440(0x38)
	struct BlowpipeMimicEndTelemetryEvent                        TelemetryEndEvent;                                 // 0x478(0x8)
	char                                                         pad0x8_HZZ8F[0x8];                                 // 0x480(0x8)
};


// Size 0x70 (Full Size[0x128] - InheritedSize[0xb8]
class ShipLiveryComponent: public ActorComponent
{
public:
	class ShipLiveryDescAsset*                                   DefaultLivery;                                     // 0xb8(0x8)
	TArray<struct ShipLivery>                                    LiveryDescs;                                       // 0xc0(0x10)
	char                                                         pad0x58_7LD27[0x58];                               // 0xd0(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightingControllerInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class MechanismsService: public Actor
{
public:
	char                                                         pad0x18_IZ81E[0x18];                               // 0x3a0(0x18)
	TArray<struct InteractableMechanismIslandData>               RegisteredMechanisms;                              // 0x3b8(0x10)
	TArray<struct ActorsOverlappingMechanismData>                OverlappingActors;                                 // 0x3c8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameplateLocationOverrideInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAIFormList: public DataAsset
{
public:
	TArray<struct SpawnCommandsAIForm>                           FormList;                                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class TunnelsOfTheDamnedSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  TunnelsOfTheDamnedPersistentAssetsLocation;        // 0x38(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableVoyageRequirement: public DeliverableRequirementBase
{
public:
	TArray<Class>                                                AllowedVoyages;                                    // 0x30(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class SetSpawnProgressStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    TriggerVolume;                                     // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstrumentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ClearSpawnProgressStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableCompanyRequirement: public DeliverableRequirementBase
{
public:
	TArray<class Class*>                                         AcceptedCompanies;                                 // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_LegendarySkellyFortEventSignal: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LighthouseBeamDamageInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class StormEffectsExclusionTriggerVolume: public Actor
{
public:
	class CapsuleComponent*                                      TriggerVolume;                                     // 0x3a0(0x8)
	char                                                         pad0x18_ATVUX[0x18];                               // 0x3a8(0x18)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class ItemActionComponentAudioParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                ItemActionAudioPool;                               // 0x28(0x8)
	class WwiseEvent*                                            ActionStartEvent;                                  // 0x30(0x8)
	class WwiseEvent*                                            ActionStopEvent;                                   // 0x38(0x8)
	bool                                                         ActionStartEventIsLoop;                            // 0x40(0x1)
	char                                                         pad0x3_01L7Y[0x3];                                 // 0x41(0x3)
	float                                                        ActionStartEventFadeTime;                          // 0x44(0x4)
	char                                                         pad0x20_DWKHY[0x20];                               // 0x48(0x20)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ActivitiesService: public Object
{
public:
	char                                                         pad0x20_5OZ7Q[0x20];                               // 0x28(0x20)
	class PlayerActivityIconCatalogueDataAsset*                  ActivityIconDataAsset;                             // 0x48(0x8)
	char                                                         pad0x8_X6DQB[0x8];                                 // 0x50(0x8)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class ContestSelectIslandForItemStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_0XRV7[0x8];                                 // 0x98(0x8)
	TArray<struct Name>                                          SelectedIslands;                                   // 0xa0(0x10)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class SoakableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_VNP64[0x8];                                 // 0xb8(0x8)
	float                                                        LingeringSoakedDuration;                           // 0xc0(0x4)
	char                                                         pad0x4_IZLYS[0x4];                                 // 0xc4(0x4)
	struct Status                                                SoakedStatus;                                      // 0xc8(0x20)
};


// Size 0x10 (Full Size[0x2e0] - InheritedSize[0x2d0]
class AirBubbleComponent: public SceneComponent
{
public:
	float                                                        Radius;                                            // 0x2d0(0x4)
	char                                                         pad0xc_7JJ8D[0xc];                                 // 0x2d4(0xc)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class IslandReservationService: public Object
{
public:
	char                                                         pad0x28_XTBTM[0x28];                               // 0x28(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShipServiceDebugFunctions: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CloudDomeInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ShipCommandSettings: public DataAsset
{
public:
	TArray<struct ShipCommandSpawnRowboatType>                   RowboatTypes;                                      // 0x28(0x10)
	class EnvQuery*                                              RowboatSpawnLocationEQSQuery;                      // 0x38(0x8)
	bool                                                         ShouldRowboatSpawnLocationZOverride;               // 0x40(0x1)
	char                                                         pad0x3_RFH62[0x3];                                 // 0x41(0x3)
	float                                                        RowboatSpawnLocationZOverride;                     // 0x44(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipLiveryCatalogueService: public Object
{
public:
	char                                                         pad0x8_RB2UK[0x8];                                 // 0x28(0x8)
	TArray<struct ShipLiveryCatalogueEntry>                      CatalogEntries;                                    // 0x30(0x10)
};


// Size 0x20 (Full Size[0x3c0] - InheritedSize[0x3a0]
class GlobalEmitterService: public Actor
{
public:
	char                                                         pad0x18_GECUA[0x18];                               // 0x3a0(0x18)
	class ImpactListDataAsset*                                   ImpactListDataAsset;                               // 0x3b8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InactivityDetectionServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_TargetRotation: public EnvQueryContext
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PuzzleStatueBaseAudioParamsDataAsset: public DataAsset
{
public:
	class WwiseEvent*                                            StatueActivated;                                   // 0x28(0x8)
	class WwiseObjectPoolWrapper*                                PuzzleStatueAudioPool;                             // 0x30(0x8)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ClearProgressSpawnStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x300 (Full Size[0x3b8] - InheritedSize[0xb8]
class PlayerMuteComponent: public ActorComponent
{
public:
	char                                                         pad0x8_4EO36[0x8];                                 // 0xb8(0x8)
	TArray<class PlayerState*>                                   PlayerStatesPendingCrewMuting;                     // 0xc0(0x10)
	char                                                         pad0x2e8_HVZRB[0x2e8];                             // 0xd0(0x2e8)
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class VenomComponent: public ActorComponent
{
public:
	char                                                         pad0x8_TMLGO[0x8];                                 // 0xb8(0x8)
	struct Status                                                VenomStatusUsed;                                   // 0xc0(0x20)
	char                                                         CollisionChannel;                                  // 0xe0(0x1)
	char                                                         pad0x3_CVMJ4[0x3];                                 // 0xe1(0x3)
	float                                                        RangeDistance;                                     // 0xe4(0x4)
	float                                                        RangeAngle;                                        // 0xe8(0x4)
	float                                                        EffectDuration;                                    // 0xec(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExperienceServiceInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x2d0] - InheritedSize[0x288]
class FishingInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x48_RDPYU[0x48];                               // 0x288(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CinematicQuestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleDoorMigrationAction: public TaleMigrationAction
{
public:
	class SlidingDoor*                                           Door;                                              // 0x28(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BallastStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeadActionStateId: public ActionStateId
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class ItemDiggingBaseConfig: public Object
{
public:
	char                                                         pad0x8_7YSAE[0x8];                                 // 0x28(0x8)
	struct Transform                                             RelativeTransform;                                 // 0x30(0x30)
	int                                                          MaxSmallCrewSizeForNumDigsSelection;               // 0x60(0x4)
	char                                                         pad0x4_OBRWP[0x4];                                 // 0x64(0x4)
	struct WeightedProbabilityRange                              NumDigsRequiredForSmallCrewSize;                   // 0x68(0x20)
	struct WeightedProbabilityRange                              NumDigsRequiredForBiggerCrewSize;                  // 0x88(0x20)
	int                                                          DefaultNumDigsIfNotInCrew;                         // 0xa8(0x4)
	float                                                        MaxDigRadiusToFurtherExhume;                       // 0xac(0x4)
	bool                                                         RemoveSandDecal;                                   // 0xb0(0x1)
	char                                                         pad0x7_ZUSRH[0x7];                                 // 0xb1(0x7)
	class OnDigStrategy*                                         OnDigTrigger;                                      // 0xb8(0x8)
	class OnBuryStrategy*                                        OnBuryTrigger;                                     // 0xc0(0x8)
	char                                                         pad0x8_EN898[0x8];                                 // 0xc8(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class SpawnRequirement: public Object
{
public:
	char                                                         pad0x18_9QGV6[0x18];                               // 0x28(0x18)
	TArray<class SpawnRequirement*>                              OR_Requirements;                                   // 0x40(0x10)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class ExplosivesService: public Actor
{
public:
	char                                                         pad0x8_NCI1S[0x8];                                 // 0x3a0(0x8)
	class ExplosivesServiceTelemetryComponent*                   TelemetryComponent;                                // 0x3a8(0x8)
	TArray<float>                                                TrackedExplosionTimers;                            // 0x3b0(0x10)
	TArray<uintptr_t>                                            VFXBlockedExplosions;                              // 0x3c0(0x10)
	char                                                         pad0x8_0RDJQ[0x8];                                 // 0x3d0(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ItemCapGroup: public Object
{
public:
	TArray<Class>                                                Items;                                             // 0x28(0x10)
	int                                                          Cap;                                               // 0x38(0x4)
	char                                                         pad0x4_2SGCF[0x4];                                 // 0x3c(0x4)
};


// Size 0xe8 (Full Size[0x488] - InheritedSize[0x3a0]
class Ensemble: public Actor
{
public:
	char                                                         pad0x30_531PT[0x30];                               // 0x3a0(0x30)
	class ShantyItemDesc*                                        ShantyDesc;                                        // 0x3d0(0x8)
	TArray<class Actor*>                                         Instruments;                                       // 0x3d8(0x10)
	TArray<struct InstrumentHandlePairedWithActor>               OldInstruments;                                    // 0x3e8(0x10)
	TArray<struct InstrumentHandlePairedWithActor>               NewInstruments;                                    // 0x3f8(0x10)
	struct Vector                                                OverrideLeadPosition;                              // 0x408(0xc)
	bool                                                         UseOverrideLeadPosition;                           // 0x414(0x1)
	char                                                         pad0x1b_7J2C8[0x1b];                               // 0x415(0x1b)
	struct ShantyData                                            ShantyData;                                        // 0x430(0x30)
	char                                                         pad0x28_8FH8T[0x28];                               // 0x460(0x28)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MapMarkMappingDataAsset: public DataAsset
{
public:
	TArray<struct UserSettingsMapMarkDefinition>                 MarkDefinitions;                                   // 0x28(0x10)
};


// Size 0x220 (Full Size[0x2d8] - InheritedSize[0xb8]
class RadialManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x180_3S2ZE[0x180];                             // 0xb8(0x180)
	TArray<struct RadialRuleInstanceMapping>                     RadialMappings;                                    // 0x238(0x10)
	class RadialSettingsAsset*                                   RadialSettings;                                    // 0x248(0x8)
	class UClass*                                                CurrentClosingId;                                  // 0x250(0x8)
	class Object*                                                DockedObject;                                      // 0x258(0x8)
	class AthenaInputSettings*                                   CachedInputSettings;                               // 0x260(0x8)
	char                                                         pad0x68_KX85P[0x68];                               // 0x268(0x68)
	class UClass*                                                LastInputId;                                       // 0x2d0(0x8)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class GuildService: public Actor
{
public:
	char                                                         pad0x30_E7F8M[0x30];                               // 0x3a0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckTrackerServiceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class DebugSkipToStep: public TaleQuestStep
{
public:
	class DebugSkipToStepDesc*                                   Desc;                                              // 0x98(0x8)
	char                                                         pad0x10_FZ42P[0x10];                               // 0xa0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExitTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x70 (Full Size[0x128] - InheritedSize[0xb8]
class WaterExposureComponent: public ActorComponent
{
public:
	float                                                        RainZoneThreshold;                                 // 0xb8(0x4)
	struct Vector                                                FullySubmergedOffset;                              // 0xbc(0xc)
	struct Vector                                                PartiallySubmergedOffset;                          // 0xc8(0xc)
	bool                                                         AllowSurfaceSwimming;                              // 0xd4(0x1)
	char                                                         pad0x3_NPNJK[0x3];                                 // 0xd5(0x3)
	struct Status                                                SubmergedStatus;                                   // 0xd8(0x20)
	struct Status                                                RainStatus;                                        // 0xf8(0x20)
	struct FName                                                 FeatureFlag;                                       // 0x118(0x8)
	bool                                                         InRain;                                            // 0x120(0x1)
	char                                                         SubmergedState;                                    // 0x121(0x1)
	char                                                         pad0x6_IJ6ZX[0x6];                                 // 0x122(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClawPummelAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x190 (Full Size[0x1b8] - InheritedSize[0x28]
class ItemLifetimeManagerService: public Object
{
public:
	char                                                         pad0x58_SOO1G[0x58];                               // 0x28(0x58)
	class ItemLifetimeManagerServiceDataAsset*                   LifetimeDataAsset;                                 // 0x80(0x8)
	char                                                         pad0x28_U5S8B[0x28];                               // 0x88(0x28)
	class World*                                                 World;                                             // 0xb0(0x8)
	char                                                         pad0x100_EUUS8[0x100];                             // 0xb8(0x100)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelLevelId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShipsEncounter: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TransientActorTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class AthenaAnimationWeaponDataAsset: public DataAsset
{
public:
	struct AthenaAnimationWeaponData                             WeaponData;                                        // 0x28(0x48)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class InteractableMock: public Object
{
public:
	char                                                         pad0x10_P4S3W[0x10];                               // 0x28(0x10)
	class Actor*                                                 ActorThatInteracted;                               // 0x38(0x8)
	char                                                         pad0x8_7BX5E[0x8];                                 // 0x40(0x8)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class GuildSettings: public DeveloperSettings
{
public:
	int                                                          MinGuildLevelForEmissary;                          // 0x38(0x4)
	struct FName                                                 GuildCompanyTextIdentifier;                        // 0x3c(0x8)
	struct FName                                                 GuildCompanyId;                                    // 0x44(0x8)
	char                                                         pad0x4_AVWFF[0x4];                                 // 0x4c(0x4)
	struct StringAssetReference                                  GuildBrandingTexturesAssetReference;               // 0x50(0x10)
	char                                                         MaxNumberOfEnrolledGuilds;                         // 0x60(0x1)
	char                                                         pad0x7_3TZ92[0x7];                                 // 0x61(0x7)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CloudDomeService: public Object
{
public:
	char                                                         pad0x8_2BAT8[0x8];                                 // 0x28(0x8)
	TArray<class Object*>                                        RegisteredCloudDomes;                              // 0x30(0x10)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class AmmoTransferComponent: public ActorComponent
{
public:
	int                                                          AmmoCount;                                         // 0xb8(0x4)
	char                                                         pad0x4_SBNH2[0x4];                                 // 0xbc(0x4)
	class Actor*                                                 ActorOwner;                                        // 0xc0(0x8)
	char                                                         pad0x10_H0K4A[0x10];                               // 0xc8(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EntitlementSwitchesDataAsset: public DataAsset
{
public:
	TArray<struct EntitlementSwitch>                             EntitlementSwitches;                               // 0x28(0x10)
};


// Size 0xe0 (Full Size[0x160] - InheritedSize[0x80]
class SpawnItemStepDesc: public TaleQuestStepDesc
{
public:
	class UClass*                                                Item;                                              // 0x80(0x8)
	bool                                                         TrackItem;                                         // 0x88(0x1)
	bool                                                         TrackedProxy;                                      // 0x89(0x1)
	bool                                                         MarkItemAsCritical;                                // 0x8a(0x1)
	bool                                                         SpawnPhased;                                       // 0x8b(0x1)
	bool                                                         FireOnSpawnTelemetry;                              // 0x8c(0x1)
	char                                                         pad0x3_4CIO7[0x3];                                 // 0x8d(0x3)
	struct FText                                                 CriticalActorLostMessage;                          // 0x90(0x38)
	struct FName                                                 SocketName;                                        // 0xc8(0x8)
	struct QuestVariableActor                                    LocatorVar;                                        // 0xd0(0x30)
	struct QuestVariableOrientedPoint                            SpawnPoint;                                        // 0x100(0x30)
	struct QuestVariableActor                                    ActorVar;                                          // 0x130(0x30)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class MapSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  PrebakedIslandData;                                // 0x38(0x10)
};


// Size 0x1d8 (Full Size[0x578] - InheritedSize[0x3a0]
class TrinketMountpointMechanismTrigger: public Actor
{
public:
	char                                                         pad0x10_ONC8J[0x10];                               // 0x3a0(0x10)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3b0(0x8)
	class MechanismTriggerTrinketMountpointManagerComponent*     TrinketMountpointManager;                          // 0x3b8(0x8)
	struct FName                                                 MechanismIslandName;                               // 0x3c0(0x8)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x3c8(0x8)
	class WwiseEvent*                                            PuzzleCompletedAudioEvent;                         // 0x3d0(0x8)
	bool                                                         IsPuzzleCompleted;                                 // 0x3d8(0x1)
	char                                                         pad0x19f_Z6TQ2[0x19f];                             // 0x3d9(0x19f)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestReleaseVaultStep: public TaleQuestStep
{
public:
	bool                                                         VaultReleased;                                     // 0x98(0x1)
	char                                                         pad0x7_06WF2[0x7];                                 // 0x99(0x7)
};


// Size 0x100 (Full Size[0x128] - InheritedSize[0x28]
class QuestTableService: public Object
{
public:
	char                                                         pad0x8_UF8VI[0x8];                                 // 0x28(0x8)
	class World*                                                 World;                                             // 0x30(0x8)
	char                                                         pad0xf0_PMNJQ[0xf0];                               // 0x38(0xf0)
};


// Size 0x98 (Full Size[0xc0] - InheritedSize[0x28]
class FishingFloatSetupDataAsset: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                FishingFloatPool;                                  // 0x28(0x8)
	class WwiseEvent*                                            RodCastFloatLandInWater;                           // 0x30(0x8)
	float                                                        DelayBeforeDetachingFloat;                         // 0x38(0x4)
	float                                                        FloatBobDepthWhenMovedAndNotHooked;                // 0x3c(0x4)
	float                                                        RetractingDuration;                                // 0x40(0x4)
	float                                                        ViolentlyRetractingDuration;                       // 0x44(0x4)
	class CurveFloat*                                            CastingFloatMovementXY;                            // 0x48(0x8)
	class CurveFloat*                                            CastingFloatMovementZAtMinDistance;                // 0x50(0x8)
	class CurveFloat*                                            CastingFloatMovementZAtMaxDistance;                // 0x58(0x8)
	class CurveFloat*                                            ReelingInFloatMovementXY;                          // 0x60(0x8)
	class CurveFloat*                                            ReelingInFloatMovementZ;                           // 0x68(0x8)
	class Object*                                                SplashVFXWhenFloatLandsOnWater;                    // 0x70(0x8)
	float                                                        MaxAboveDistance;                                  // 0x78(0x4)
	float                                                        MaxBelowDistance;                                  // 0x7c(0x4)
	float                                                        ExtraOffsetWhenFishNotAttached;                    // 0x80(0x4)
	float                                                        MaxDriftCompensationOffset;                        // 0x84(0x4)
	float                                                        FloatBobDepthOnComedyItemBeingHooked;              // 0x88(0x4)
	float                                                        BringingInCatchDuration;                           // 0x8c(0x4)
	float                                                        FloatZOffset;                                      // 0x90(0x4)
	float                                                        WobbleSpeed;                                       // 0x94(0x4)
	float                                                        MinWobbleAngle;                                    // 0x98(0x4)
	float                                                        MaxWobbleAngle;                                    // 0x9c(0x4)
	float                                                        TimeToBlendAwaySway;                               // 0xa0(0x4)
	float                                                        WobbleYawAngleOffset;                              // 0xa4(0x4)
	float                                                        FlavourYawMinTimeToNextChange;                     // 0xa8(0x4)
	float                                                        FlavourYawMaxTimeToNextChange;                     // 0xac(0x4)
	float                                                        FlavourYawMinSpeed;                                // 0xb0(0x4)
	float                                                        FlavourYawMaxSpeed;                                // 0xb4(0x4)
	float                                                        FlavourYawAcceleration;                            // 0xb8(0x4)
	char                                                         pad0x4_2U3L9[0x4];                                 // 0xbc(0x4)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class CoherentContentEngagementMessage: public FeatureToggledStringAssetReference
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CampaignServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableCaptainsLogbookInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConsumableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MovedByActorActionStateId: public ActionStateId
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class RiddleQuestValidLocationGeneratorData: public DataAsset
{
public:
	float                                                        PacesToCentimetres;                                // 0x28(0x4)
	float                                                        IsBlockedTestHeight;                               // 0x3c(0x4)
	float                                                        CastDownOffset;                                    // 0x40(0x4)
	float                                                        CastDownLength;                                    // 0x44(0x4)
	float                                                        MaxAngleChangeBetweenPaces;                        // 0x48(0x4)
	float                                                        CollisionTestCapsuleHalfHeight;                    // 0x4c(0x4)
	float                                                        CollisionTestCapsuleRadius;                        // 0x50(0x4)
	float                                                        CollisionTestYOffset;                              // 0x54(0x4)
	char                                                         HitTestTraceChannel;                               // 0x58(0x1)
	char                                                         pad0x3_P7I5T[0x3];                                 // 0x59(0x3)
	float                                                        CardinalDirectionTolerance;                        // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventEntranceProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewMembershipFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapturedByKrakenActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedItemDescSpawnDataAsset: public DataAsset
{
public:
	TArray<struct WeightedItemDescSpawnData>                     WeightedItemSpawnDatas;                            // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class PlayerBuriedItemServiceMapStorePopulatorDataAsset: public DataAsset
{
public:
	int                                                          MinNumberMapsPerSeaRegion;                         // 0x28(0x4)
	float                                                        MinSeparationBetweenXs;                            // 0x2c(0x4)
	TArray<struct PlayerBuriedItemServiceDataAssetMapStorePopulationSeaRegion> SeaRegions;                                        // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayDockableKeyedInstrumentActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_CanBlock: public BTDecorator_BaseConditional
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_OccupiedPositionsOnIsland: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthCustomizationServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class DeactivateAllSpawnersVaultStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismInteractionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestFishingServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AtmosphericPressureZoneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CalmAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DebugWieldablesData: public DataAsset
{
public:
	TArray<class Class*>                                         AllDebugWieldables;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyBReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortAlignmentFeatureInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CrouchNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NonVerbalRadialDataAsset: public DataAsset
{
public:
	TArray<struct NonVerbalPageData>                             Pages;                                             // 0x28(0x10)
};


// Size 0x18 (Full Size[0x4b0] - InheritedSize[0x498]
class CoherentBaseHUD: public HUD
{
public:
	char                                                         pad0x18_4YVRO[0x18];                               // 0x498(0x18)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class MigrationUIContentsDataAsset: public DataAsset
{
public:
	class Font*                                                  Font;                                              // 0x28(0x8)
	bool                                                         ShowBanner;                                        // 0x30(0x1)
	char                                                         pad0x7_2ACTP[0x7];                                 // 0x31(0x7)
	struct FText                                                 BannerText;                                        // 0x38(0x38)
	float                                                        BannerTextFontScale;                               // 0x70(0x4)
	int                                                          BannerTextPostSpacing;                             // 0x74(0x4)
	float                                                        PoemTextFontScale;                                 // 0x78(0x4)
	int                                                          PoemTextSpacing;                                   // 0x7c(0x4)
	struct Vector2D                                              MaskBorderSize;                                    // 0x80(0x8)
	TArray<struct MigrationUIContentsDataAssetEntry>             Poems;                                             // 0x88(0x10)
	float                                                        RevealDuration;                                    // 0x98(0x4)
	float                                                        FadeOutDuration;                                   // 0x9c(0x4)
	struct StringAssetReference                                  MigrationUIMaterialFileLocation;                   // 0xa0(0x10)
};


// Size 0x378 (Full Size[0x718] - InheritedSize[0x3a0]
class RetrieveBootyActor: public Actor
{
public:
	char                                                         pad0x10_8HK6Q[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        Root;                                              // 0x3b0(0x8)
	class RetrieveBootyHandInComponent*                          RetrievalComponent;                                // 0x3b8(0x8)
	class SkeletalMeshComponent*                                 Mesh;                                              // 0x3c0(0x8)
	class ActorActivationComponent*                              ActorActivationComponent;                          // 0x3c8(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x3d0(0x8)
	class ParticleSystemComponent*                               BeaconComponent;                                   // 0x3d8(0x8)
	class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0x3e0(0x8)
	class AIPartsCategory*                                       AIParts;                                           // 0x3e8(0x8)
	TArray<struct MermaidAnimMapping>                            AnimMap;                                           // 0x3f0(0x10)
	float                                                        SurfaceTolerance;                                  // 0x400(0x4)
	float                                                        LocationBlendSpeed;                                // 0x404(0x4)
	float                                                        SurfaceStickSpeed;                                 // 0x408(0x4)
	char                                                         pad0x4_5HWMQ[0x4];                                 // 0x40c(0x4)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x410(0x8)
	class WwiseEvent*                                            PlaySongEvent;                                     // 0x418(0x8)
	class WwiseEvent*                                            StopSongEvent;                                     // 0x420(0x8)
	class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x428(0x8)
	char                                                         pad0x1e0_8I46E[0x1e0];                             // 0x430(0x1e0)
	struct FName                                                 LocalIsland;                                       // 0x610(0x8)
	char                                                         pad0xf8_PFFFR[0xf8];                               // 0x618(0xf8)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x710(0x8)
};


// Size 0x58 (Full Size[0x3f8] - InheritedSize[0x3a0]
class ShantyPlayer: public Actor
{
public:
	char                                                         pad0x8_UT7QD[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        Root;                                              // 0x3a8(0x8)
	char                                                         pad0x18_S3NKG[0x18];                               // 0x3b0(0x18)
	struct WwiseEmitter                                          SoundEmitter;                                      // 0x3c8(0x20)
	class UClass*                                                ShantyToPlay;                                      // 0x3e8(0x8)
	char                                                         InstrumentType;                                    // 0x3f0(0x1)
	bool                                                         CanBeLeadInstrument;                               // 0x3f1(0x1)
	char                                                         pad0x6_GVNTS[0x6];                                 // 0x3f2(0x6)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class CargoRunQuestData: public DataAsset
{
public:
	TArray<class Class*>                                         Crates;                                            // 0x28(0x10)
	class CargoRunCrateData*                                     DefaultCargoRunCrateData;                          // 0x38(0x8)
	class CargoRunMapData*                                       DefaultCargoRunMapData;                            // 0x40(0x8)
	class CargoRunMapData*                                       CargoRunQuestV2CargoRunMapData;                    // 0x48(0x8)
	class CargoRunMapData*                                       SmugglersRunQuestCargoRunMapData;                  // 0x50(0x8)
	TArray<struct Text>                                          CargoItemsDeliveryNotePluralisation;               // 0x58(0x10)
	TArray<struct Text>                                          BeachDirection;                                    // 0x68(0x10)
	struct FText                                                 SeapostLocation;                                   // 0x78(0x38)
	struct FText                                                 SeapostShopkeeperLocation;                         // 0xb0(0x38)
	TArray<struct CargoRunQuestDescDataCompanyLocationHintEntry> CompanyLocationHints;                              // 0xe8(0x10)
	TArray<struct CargoRunQuestDescDataNPCNameLocationHintEntry> NPCNameLocationHints;                              // 0xf8(0x10)
	TArray<struct CargoRunQuestDescCollectCargoText>             CollectCargoText;                                  // 0x108(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsItemList: public DataAsset
{
public:
	TArray<class SpawnCommandsItemCategory*>                     ItemCategories;                                    // 0x28(0x10)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class GetIsShipAloneStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        DetectionRadiusInMetres;                           // 0x80(0x4)
	bool                                                         ConsiderShipAloneWhenOnlyAlliedShipsAreNearby;     // 0x84(0x1)
	char                                                         pad0x3_TTJ8P[0x3];                                 // 0x85(0x3)
	struct QuestVariableBool                                     Result;                                            // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StatCondition: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaLocalPlayerInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x468] - InheritedSize[0x3a0]
class BuriedDecalClientService: public Actor
{
public:
	char                                                         pad0x8_DH0CD[0x8];                                 // 0x3a0(0x8)
	class DiggingSettings*                                       Settings;                                          // 0x3a8(0x8)
	char                                                         pad0xb8_D8914[0xb8];                               // 0x3b0(0xb8)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class TaleQuestFishingService: public TaleQuestService
{
public:
	class FishingFishSpawnerManager*                             FishingFishSpawnerManager;                         // 0x60(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ConstellationAudioEventsDataAsset: public DataAsset
{
public:
	TArray<struct ConstellationAudioPair>                        ConstellationAudioEventsMap;                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingRodActionStateInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class AIFormWithVFXDataAsset: public AthenaAIFormDataAsset
{
public:
	class ParticleSystem*                                        ParticlesTemplate;                                 // 0x98(0x8)
	float                                                        ParticleActivationDelay;                           // 0xa0(0x4)
	char                                                         pad0x4_2XS0B[0x4];                                 // 0xa4(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SkellyFortOnDemandProxy: public Object
{
public:
	char                                                         pad0x8_90QKR[0x8];                                 // 0x28(0x8)
	class GameEventOnDemandAvailabilityHandler*                  AvailabilityHandler;                               // 0x30(0x8)
	class UClass*                                                EventType;                                         // 0x38(0x8)
	char                                                         pad0x8_FSWUA[0x8];                                 // 0x40(0x8)
};


// Size 0x20 (Full Size[0x98] - InheritedSize[0x78]
class MeleeSpinAIAbility: public AthenaAIAbility
{
public:
	struct MeleeAIAbilityAngleChecker                            AngleChecker;                                      // 0x78(0x18)
	char                                                         pad0x8_JZCQ1[0x8];                                 // 0x90(0x8)
};


// Size 0x50 (Full Size[0x88] - InheritedSize[0x38]
class StatusResponseShipAddAnchor: public StatusResponse
{
public:
	struct StandardAnchorDynamicsParameters                      Params;                                            // 0x38(0x28)
	struct Vector                                                AnchorOffsetFromShip;                              // 0x60(0xc)
	char                                                         pad0x1c_XDOBI[0x1c];                               // 0x6c(0x1c)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SummonAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionSouthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class TaleBlockedByPlayModeVariantDataAsset: public DataAsset
{
public:
	TArray<struct Name>                                          NormalSandboxBlockedCampaignIds;                   // 0x28(0x10)
	TArray<struct Name>                                          CreatorSandboxBlockedCampaignIds;                  // 0x38(0x10)
	TArray<struct Name>                                          SaferSeasSandboxBlockedCampaignIds;                // 0x48(0x10)
	TArray<struct Name>                                          PrivateSandboxBlockedCampaignIds;                  // 0x58(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ItemLifetimeManagerServiceDataAsset: public DataAsset
{
public:
	TArray<class ItemCapGroup*>                                  ItemCapGroup;                                      // 0x28(0x10)
	float                                                        UnvisitedCleanupTimer;                             // 0x38(0x4)
	char                                                         pad0x4_7G67O[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClientSmoothedLocationInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AthenaServerIdentityManager: public Object
{
public:
	char                                                         pad0x30_RPPJQ[0x30];                               // 0x28(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AgitatedAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractableQuestObjectInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDroppedInDeepWaterOverrideInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ChainLightningVisualActorSettingsAsset: public DataAsset
{
public:
	class StaticMesh*                                            MeshAsset;                                         // 0x28(0x8)
	class MaterialInterface*                                     MaterialAsset;                                     // 0x30(0x8)
	class WwiseEvent*                                            ChainLightningCreatedOneShot;                      // 0x38(0x8)
	class WwiseObjectPoolWrapper*                                ChainLightningVisualActorPool;                     // 0x40(0x8)
	class Object*                                                PropogationVfx;                                    // 0x48(0x8)
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class FortFlag: public Actor
{
public:
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3a0(0x8)
};


// Size 0x128 (Full Size[0x4c8] - InheritedSize[0x3a0]
class TreasureRoom: public Actor
{
public:
	char                                                         pad0x30_JXTL4[0x30];                               // 0x3a0(0x30)
	class BoxComponent*                                          RoomAreaComponent;                                 // 0x3d0(0x8)
	class AISpawner*                                             GoldHoarderSpawner;                                // 0x3d8(0x8)
	class Actor*                                                 SourceLocationActor;                               // 0x3e0(0x8)
	class AIDioramaDesc*                                         AIDioramaDesc;                                     // 0x3e8(0x8)
	float                                                        TriggerRadius;                                     // 0x3f0(0x4)
	char                                                         pad0x4_9474M[0x4];                                 // 0x3f4(0x4)
	class AISpawnerMusicZoneComponent*                           MusicZoneComponent;                                // 0x3f8(0x8)
	class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x400(0x8)
	class AISpawner*                                             ActiveSpawner;                                     // 0x408(0x8)
	class AIDioramaController*                                   AIDioramaController;                               // 0x410(0x8)
	char                                                         pad0x90_1UMVI[0x90];                               // 0x418(0x90)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x4a8(0x10)
	char                                                         pad0x10_V7JY4[0x10];                               // 0x4b8(0x10)
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class CharacterPossessedEventTestComponent: public ActorComponent
{
public:
	char                                                         pad0x60_JLJYV[0x60];                               // 0xb8(0x60)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MoveUpAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickupAndStoreInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IgnitionSourceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestStreamingTeleport: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeepSeaRegionInterface: public Interface
{
public:
};


// Size 0x120 (Full Size[0x1d8] - InheritedSize[0xb8]
class ChainLightningSourceComponent: public ActorComponent
{
public:
	char                                                         pad0x8_T2N0W[0x8];                                 // 0xb8(0x8)
	struct Status                                                StatusToApply;                                     // 0xc0(0x20)
	struct StringAssetReference                                  ChainLightningSettingsAsset;                       // 0xe0(0x10)
	char                                                         pad0x20_88ZT2[0x20];                               // 0xf0(0x20)
	TArray<struct ChainData>                                     AuthorityChains;                                   // 0x110(0x10)
	TArray<struct ChainData>                                     ClientChains;                                      // 0x120(0x10)
	int                                                          FramesSinceLastRep;                                // 0x130(0x4)
	int                                                          MaxFramesBeforeRep;                                // 0x134(0x4)
	int                                                          ChainsSinceLastRep;                                // 0x138(0x4)
	char                                                         pad0x4_GQ10M[0x4];                                 // 0x13c(0x4)
	class ChainLightningSettingsAsset*                           CachedChainLightningSettingsAsset;                 // 0x140(0x8)
	char                                                         pad0x90_RXMIT[0x90];                               // 0x148(0x90)
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class FlashbangEffectComponent: public ActorComponent
{
public:
	char                                                         pad0x8_4B3D5[0x8];                                 // 0xb8(0x8)
	float                                                        FlashTimer;                                        // 0xc0(0x4)
	float                                                        FadeOutTimer;                                      // 0xc4(0x4)
	float                                                        FlashbangCooldown;                                 // 0xc8(0x4)
	char                                                         pad0x4_JEF09[0x4];                                 // 0xcc(0x4)
	class WwiseEvent*                                            StartSfxEvent;                                     // 0xd0(0x8)
	class WwiseEvent*                                            StopSfxEvent;                                      // 0xd8(0x8)
	char                                                         pad0x20_H046N[0x20];                               // 0xe0(0x20)
};


// Size 0x20 (Full Size[0x98] - InheritedSize[0x78]
class MeleeChargeAIAbility: public AthenaAIAbility
{
public:
	struct MeleeAIAbilityAngleChecker                            AngleChecker;                                      // 0x78(0x18)
	char                                                         pad0x8_KHYM7[0x8];                                 // 0x90(0x8)
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class SummonAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        NumToSpawnMultiplier;                              // 0x40(0x4)
	char                                                         pad0x4_D884P[0x4];                                 // 0x44(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class UniversalDescriptorNavigateUpInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCameraComponentInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAIClassIDsList: public DataAsset
{
public:
	TArray<struct SpawnCommandsAIClassIDs>                       AIClassIDList;                                     // 0x28(0x10)
};


// Size 0x30 (Full Size[0x7c8] - InheritedSize[0x798]
class CinematicCameraController: public DebugCameraController
{
public:
	class AthenaPlayerController*                                AthenaPlayerController;                            // 0x798(0x8)
	TArray<struct Name>                                          BindingsToRemove;                                  // 0x7a0(0x10)
	char                                                         pad0x18_Q35UW[0x18];                               // 0x7b0(0x18)
};


// Size 0x458 (Full Size[0x878] - InheritedSize[0x420]
class AthenaPlayerState: public PlayerState
{
public:
	char                                                         pad0x40_Q8AVB[0x40];                               // 0x420(0x40)
	class VoiceChatComponent*                                    VoiceChatComponent;                                // 0x460(0x8)
	class PlayerActivityComponent*                               PlayerActivityComponent;                           // 0x468(0x8)
	char                                                         pad0x60_6BGHF[0x60];                               // 0x470(0x60)
	struct FString                                               Sandbox;                                           // 0x4d0(0x10)
	struct FString                                               ClientPlatform;                                    // 0x4e0(0x10)
	struct FString                                               ClientRegion;                                      // 0x4f0(0x10)
	char                                                         ClientPlatformTelemetryId;                         // 0x500(0x1)
	char                                                         pad0x7_C3C5V[0x7];                                 // 0x501(0x7)
	struct FString                                               DeviceID;                                          // 0x508(0x10)
	struct NativeUniqueNetIdRepl                                 NativeUniqueNetId;                                 // 0x518(0x30)
	struct PirateIdentity                                        PirateIdentity;                                    // 0x548(0x78)
	struct FString                                               PlayfabId;                                         // 0x5c0(0x10)
	struct MermaidSuppressionTimeData                            MermaidSuppressionData;                            // 0x5d0(0xc)
	char                                                         pad0x4_FQ2W8[0x4];                                 // 0x5dc(0x4)
	class SecurePlayerState*                                     SecurePlayerStateData;                             // 0x5e0(0x8)
	char                                                         pad0xa0_UJA06[0xa0];                               // 0x5e8(0xa0)
	struct Guid                                                  PlayerGameId;                                      // 0x688(0x10)
	struct PirateDescription                                     PirateDesc;                                        // 0x698(0x80)
	int                                                          PlayerIndexOnServer;                               // 0x718(0x4)
	char                                                         pad0x3c_PFQQA[0x3c];                               // 0x71c(0x3c)
	struct FString                                               PlayerNameDebug;                                   // 0x758(0x10)
	char                                                         pad0x110_UECVR[0x110];                             // 0x768(0x110)
};


// Size 0xb8 (Full Size[0x170] - InheritedSize[0xb8]
class TrinketLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x18_DZXAV[0x18];                               // 0xb8(0x18)
	struct TrinketLoadout                                        Loadout;                                           // 0xd0(0x48)
	struct Guid                                                  CrewId;                                            // 0x120(0x10)
	char                                                         pad0x40_C2SF7[0x40];                               // 0x130(0x40)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CoherentUIGTPersistentDataAsset: public DataAsset
{
public:
	TArray<class Texture2D*>                                     AlwaysLoadedTextures;                              // 0x28(0x10)
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class MegalodonSoulActor: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	float                                                        TargetSoulHeight;                                  // 0x3a8(0x4)
	float                                                        RiseVelocity;                                      // 0x3ac(0x4)
};


// Size 0x200 (Full Size[0x2b8] - InheritedSize[0xb8]
class ShipTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x1b0_8RHB4[0x1b0];                             // 0xb8(0x1b0)
	bool                                                         bPlayerIsAbandoned;                                // 0x268(0x1)
	char                                                         PlayerAbandonedReason;                             // 0x269(0x1)
	char                                                         pad0x4e_TAD5D[0x4e];                               // 0x26a(0x4e)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MemoryConstrainedMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapstanInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageWorldSettingsInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x398] - InheritedSize[0x300]
class CoherentUIGTInstancedComponent: public CoherentUIGTBaseComponent
{
public:
	struct FString                                               URL;                                               // 0x300(0x10)
	char                                                         pad0x8_EIG2D[0x8];                                 // 0x310(0x8)
	class MaterialInstanceDynamic*                               HUDMaterialInstance;                               // 0x318(0x8)
	class PlayerController*                                      PlayerController;                                  // 0x320(0x8)
	char                                                         pad0x18_USUAL[0x18];                               // 0x328(0x18)
	class CoherentToWwiseEventComponent*                         AudioComponent;                                    // 0x340(0x8)
	char                                                         pad0x50_R0BYD[0x50];                               // 0x348(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemScoreProviderInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class GetNearestPortalLocationTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
	struct QuestVariableVector                                   NearestPortalLocation;                             // 0xb0(0x30)
	struct QuestVariableVector                                   DirectionToApproachPortal;                         // 0xe0(0x30)
};


// Size 0x8 (Full Size[0x148] - InheritedSize[0x140]
class ActionRulesInteractableComponent: public InteractableComponent
{
public:
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x140(0x8)
};


// Size 0x240 (Full Size[0x5e0] - InheritedSize[0x3a0]
class BuoyantActor: public Actor
{
public:
	char                                                         pad0xc8_Q02XJ[0xc8];                               // 0x3a0(0xc8)
	class StaticMeshComponent*                                   Mesh;                                              // 0x468(0x8)
	class ShapeComponent*                                        BaseComponent;                                     // 0x470(0x8)
	struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x478(0x1c)
	char                                                         pad0x4_RBXKV[0x4];                                 // 0x494(0x4)
	class BuoyancyComponent*                                     BuoyancyComponent;                                 // 0x498(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x4a0(0x8)
	char                                                         pad0x8_G56U4[0x8];                                 // 0x4a8(0x8)
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x4b0(0x8)
	char                                                         pad0x68_OXII2[0x68];                               // 0x4b8(0x68)
	struct NetTimeStampCalculator                                MovementTimestamp;                                 // 0x520(0x70)
	struct ReplicatedPhysicsState                                ReplicatedPhysicsState;                            // 0x590(0x50)
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class UIInputForwardComponent: public ActorComponent
{
public:
	class CoherentUIGTBaseComponent*                             TargetView;                                        // 0xb8(0x8)
	char                                                         pad0x60_333EP[0x60];                               // 0xc0(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedPointsBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class EventCatchStepDesc: public TaleQuestStepDesc
{
public:
	bool                                                         AllowOutOfOrder;                                   // 0x80(0x1)
	char                                                         pad0x3_Y0MPL[0x3];                                 // 0x81(0x3)
	struct FName                                                 EventName;                                         // 0x84(0x8)
	char                                                         pad0x4_XMK7Y[0x4];                                 // 0x8c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExhumableInterface: public Interface
{
public:
};


// Size 0x298 (Full Size[0x638] - InheritedSize[0x3a0]
class TunnelOfTheDamnedPortal: public Actor
{
public:
	char                                                         pad0x10_RRGN1[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        Root;                                              // 0x3b0(0x8)
	class BoxComponent*                                          TriggerVolume;                                     // 0x3b8(0x8)
	class SphereComponent*                                       ProximityTriggerVolume;                            // 0x3c0(0x8)
	bool                                                         AlwaysRelevantToOwningCrew;                        // 0x3c8(0x1)
	bool                                                         EnableAllowedTriggerActorTypeFiltering;            // 0x3c9(0x1)
	char                                                         pad0x6_0A4N0[0x6];                                 // 0x3ca(0x6)
	TArray<class Class*>                                         AllowedTriggerActorTypes;                          // 0x3d0(0x10)
	bool                                                         ActivateSignalOnSpawn;                             // 0x3e0(0x1)
	char                                                         pad0x3_RQUMG[0x3];                                 // 0x3e1(0x3)
	float                                                        MigrationBlockingRadius;                           // 0x3e4(0x4)
	class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x3e8(0x8)
	class WwiseEvent*                                            StartPortalAmbianceEvent;                          // 0x3f0(0x8)
	class WwiseEvent*                                            StopPortalAmbianceEvent;                           // 0x3f8(0x8)
	class WwiseEvent*                                            PortalEntryEvent;                                  // 0x400(0x8)
	class PortalDesc*                                            Desc;                                              // 0x408(0x8)
	class PortalSignalCutSceneActor*                             PortalSignalCutSceneActor;                         // 0x410(0x8)
	class Actor*                                                 PortalSignalCutSceneAnchorActor;                   // 0x418(0x8)
	char                                                         pad0x218_Z2U9T[0x218];                             // 0x420(0x218)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AuxiliarySlotsInventoryEnablerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ArrivalTunnelOfTheDamnedInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingRightStickXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class MockPlayerWalletComponent: public ActorComponent
{
public:
	char                                                         pad0x20_FL6B6[0x20];                               // 0xb8(0x20)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CutsceneAnimationDataAsset: public DataAsset
{
public:
	char                                                         pad0x8_LP03C[0x8];                                 // 0x28(0x8)
	TArray<struct CutsceneAnimationElement>                      CutsceneElements;                                  // 0x30(0x10)
};


// Size 0x3b8 (Full Size[0x3e0] - InheritedSize[0x28]
class AthenaLocalPlayerManager: public Object
{
public:
	char                                                         pad0x3b8_RBSQG[0x3b8];                             // 0x28(0x3b8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DelayedMeshCharacterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCInteractionBlockerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocomotionActionStateId: public ActionStateId
{
public:
};


// Size 0x68 (Full Size[0x408] - InheritedSize[0x3a0]
class BuriedDecalServerService: public Actor
{
public:
	char                                                         pad0x8_VBY0W[0x8];                                 // 0x3a0(0x8)
	class DiggingSettings*                                       Settings;                                          // 0x3a8(0x8)
	char                                                         pad0x58_INME1[0x58];                               // 0x3b0(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShroudBreakerProtectionInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class OwnedByShipComponent: public ActorComponent
{
public:
	char                                                         pad0x20_9XU99[0x20];                               // 0xb8(0x20)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class CutsceneResponseComponent: public ActorComponent
{
public:
	TArray<class CutsceneResponseSheet*>                         Sheets;                                            // 0xb8(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CatalogListDataAsset: public DataAsset
{
public:
	TArray<class CatalogDataAsset*>                              Catalogs;                                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCPriorityTickInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestNotificationStep: public TaleQuestStep
{
public:
};


// Size 0xc0 (Full Size[0x178] - InheritedSize[0xb8]
class PioneerComponent: public ActorComponent
{
public:
	float                                                        PioneerPeriodicUpdateInterval;                     // 0xb8(0x4)
	char                                                         pad0x4_AL62H[0x4];                                 // 0xbc(0x4)
	char                                                         pad0xb8_J8TY3[0xb8];                               // 0xc0(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmoteLoadoutViewInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class CrewLobbyChatMember: public Object
{
public:
	char                                                         pad0x30_52OFI[0x30];                               // 0x28(0x30)
	class VoiceChatComponent*                                    VoiceChatComponent;                                // 0x58(0x8)
	char                                                         pad0x8_CDLAL[0x8];                                 // 0x60(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorRelevancyTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClientNotificationsServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToBucketNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipBuoyancyMovementInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class BeckonSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  BeckonDataAsset;                                   // 0x38(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseSleepCurse: public StatusResponse
{
public:
};


// Size 0x108 (Full Size[0x4a8] - InheritedSize[0x3a0]
class TestDockableObject: public Actor
{
public:
	char                                                         pad0x30_ANKZK[0x30];                               // 0x3a0(0x30)
	class SceneComponent*                                        SceneComponent;                                    // 0x3d0(0x8)
	char                                                         pad0xb9_6J8NE[0xb9];                               // 0x3d8(0xb9)
	char                                                         CurrentInteractionState;                           // 0x491(0x1)
	bool                                                         CanSetInteractionState;                            // 0x492(0x1)
	char                                                         pad0x15_8M8Q6[0x15];                               // 0x493(0x15)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToPocketWatchNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ExitOnAllCrewsDestroyedStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AthenaUserSettingsDefaults: public Object
{
public:
	TArray<int>                                                  MaxFPSOptions;                                     // 0x28(0x10)
	struct AimSensitivitySettingsDefaults                        AimSensitivitySettings;                            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorActivationInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WalkableEmotesRadialDataAsset: public DataAsset
{
public:
	TArray<class WalkableEmoteInfo*>                             WalkableEmoteInfo;                                 // 0x28(0x10)
};


// Size 0x10 (Full Size[0x298] - InheritedSize[0x288]
class HideInObjectInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x10_VXVCR[0x10];                               // 0x288(0x10)
};


// Size 0x70 (Full Size[0x4b0] - InheritedSize[0x440]
class AnimatedCosmeticItemAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x8_RMZ9O[0x8];                                 // 0x440(0x8)
	TArray<struct NPCOneShotAnimationElement>                    OneShotSequences;                                  // 0x448(0x10)
	TArray<struct NPCContinuousAnimationElement>                 ContinuousSequences;                               // 0x458(0x10)
	class AnimInstance*                                          ParentCharacterAnimationInstance;                  // 0x468(0x8)
	class AnimMontage*                                           CurrentPlayingMontage;                             // 0x470(0x8)
	class AnimSequenceBase*                                      OneShot;                                           // 0x478(0x8)
	class AnimSequenceBase*                                      ContinuousIn;                                      // 0x480(0x8)
	class AnimSequenceBase*                                      ContinuousLoopA;                                   // 0x488(0x8)
	class AnimSequenceBase*                                      ContinuousLoopB;                                   // 0x490(0x8)
	class AnimSequenceBase*                                      ContinuousOut;                                     // 0x498(0x8)
	char                                                         pad0x10_2963U[0x10];                               // 0x4a0(0x10)
};


// Size 0x140 (Full Size[0x168] - InheritedSize[0x28]
class SeagullManagerComponentDataAsset: public DataAsset
{
public:
	float                                                        TurnBlendInOutPercentage;                          // 0x28(0x4)
	int                                                          NumPseudoRandomValues;                             // 0x2c(0x4)
	int                                                          FixedSeed;                                         // 0x30(0x4)
	struct Vector                                                SeagullEmitterOffset;                              // 0x34(0xc)
	class WwiseEvent*                                            StartSeagullSounds;                                // 0x40(0x8)
	class WwiseEvent*                                            StopSeagullSounds;                                 // 0x48(0x8)
	class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x50(0x8)
	int                                                          MaxNumShipsToDisplaySeagullsOn;                    // 0x58(0x4)
	char                                                         pad0x4_X3306[0x4];                                 // 0x5c(0x4)
	struct WeightedProbabilityRangeOfRanges                      SeagullScale;                                      // 0x60(0x30)
	struct WeightedProbabilityRangeOfRanges                      SeagullSpawnFrequency;                             // 0x90(0x30)
	struct WeightedProbabilityRangeOfRanges                      SeagullSpeed;                                      // 0xc0(0x30)
	TArray<struct SeagullManagerLocationBank>                    Banks;                                             // 0xf0(0x10)
	struct WeightedProbabilityRange                              NumInFormation;                                    // 0x100(0x20)
	TArray<struct SeagullManagerFormation>                       Formations;                                        // 0x120(0x10)
	double                                                       Modulo;                                            // 0x130(0x8)
	TArray<struct SeagullManagerPseudoRandomEntry>               Intervals;                                         // 0x138(0x10)
	float                                                        MinSpeedToAttractSeagulls;                         // 0x148(0x4)
	float                                                        MinSpeedToRetainSeagulls;                          // 0x14c(0x4)
	float                                                        MinSeagullSpeedAfterDecoupling;                    // 0x150(0x4)
	float                                                        ZOffsetTargetForEarlyDepartingSeagulls;            // 0x154(0x4)
	float                                                        ZOffsetRatePerSecondForEarlyDepartingSeagulls;     // 0x158(0x4)
	float                                                        TimeUntilDepartedSeagullsCanReturn;                // 0x15c(0x4)
	float                                                        TooStormyThreshold;                                // 0x160(0x4)
	float                                                        DoubleCheckSpeed;                                  // 0x164(0x4)
};


// Size 0x20 (Full Size[0x5b8] - InheritedSize[0x598]
class AISignalTargetWaveSpawner: public AIWaveSpawner
{
public:
	TArray<struct StringAssetReference>                          SignalMechanismAssetRefs;                          // 0x598(0x10)
	char                                                         pad0x10_DY6CT[0x10];                               // 0x5a8(0x10)
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class NPCOnSurfaceCannonManagerDataAsset: public DataAsset
{
public:
	struct FName                                                 CannonLocationsGroupName;                          // 0x28(0x8)
	bool                                                         GoStraightToCannonIfPossible;                      // 0x30(0x1)
	bool                                                         StayOnCannonEvenWhenThereAreNoTargets;             // 0x31(0x1)
	char                                                         pad0x6_A2E9W[0x6];                                 // 0x32(0x6)
	struct WeightedProbabilityRangeOfRanges                      MinTimeInFallbackLocation;                         // 0x38(0x30)
	float                                                        TimeOnCannonBeforeStartAiming;                     // 0x68(0x4)
	float                                                        TimeBetweenCannonChangeLocationCheck;              // 0x6c(0x4)
	struct WeightedProbabilityRangeOfRanges                      MinTimeOnCannon;                                   // 0x70(0x30)
	float                                                        TimeBetweenCannonBeingUsedChecks;                  // 0xa0(0x4)
	float                                                        TimeBetweenTargetUpdates;                          // 0xa4(0x4)
	float                                                        TimeBetweenCannonMoveUpdates;                      // 0xa8(0x4)
	float                                                        TimeToWaitForCannonToAimBeforeTryingToFireAgain;   // 0xac(0x4)
	float                                                        CannonPitchYawAimTolerenceHalfAngle;               // 0xb0(0x4)
	char                                                         pad0x4_H4KPG[0x4];                                 // 0xb4(0x4)
	struct WeightedProbabilityRangeOfRanges                      NearMissDistanceInMetres;                          // 0xb8(0x30)
	class UClass*                                                DefaultCannonballItemDesc;                         // 0xe8(0x8)
	float                                                        NearbyEncountersDistanceInMetres;                  // 0x110(0x4)
	struct CustomAnimationMontageId                              FireCannonMontageId;                               // 0x114(0x8)
	char                                                         pad0x4_3ONVV[0x4];                                 // 0x11c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismElementProxyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorPhasingComponentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableToggleTooltipNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageableInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class PetLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x10_PJODO[0x10];                               // 0xb8(0x10)
	struct PetLoadoutContainer                                   LoadoutContainer;                                  // 0xc8(0x20)
	class Actor*                                                 OwningPlayer;                                      // 0xe8(0x8)
	char                                                         pad0x60_GCQCK[0x60];                               // 0xf0(0x60)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StorageContainerSpawnerCount: public DataAsset
{
public:
	struct WeightedProbabilityRange                              NumSpawners;                                       // 0x28(0x20)
	int                                                          MinDifferentSpawners;                              // 0x48(0x4)
	int                                                          MaxDifferentSpawners;                              // 0x4c(0x4)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class WorldEventZoneService: public Actor
{
public:
	char                                                         pad0x18_PJTSH[0x18];                               // 0x3a0(0x18)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class TransientActorService: public Object
{
public:
	char                                                         pad0x8_J8YO8[0x8];                                 // 0x28(0x8)
	class World*                                                 World;                                             // 0x30(0x8)
	char                                                         pad0x18_86NPJ[0x18];                               // 0x38(0x18)
	TArray<uintptr_t>                                            TransientActorDestroyedCallbacks;                  // 0x50(0x10)
	char                                                         pad0x18_T98B9[0x18];                               // 0x60(0x18)
	TArray<struct TransientActorEntry>                           Entries;                                           // 0x78(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageGeneratorSimBlackboardFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetPuzzleVaultResetOnLeaveStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
	bool                                                         CanVaultResetOnceAllPlayersLeave;                  // 0xb0(0x1)
	char                                                         pad0x7_SINN6[0x7];                                 // 0xb1(0x7)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NavigationSettings: public DeveloperSettings
{
public:
	struct Vector                                                DirectionNorth;                                    // 0x38(0xc)
	char                                                         pad0x4_LYD54[0x4];                                 // 0x44(0x4)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class GameEventBannerDataAsset: public DataAsset
{
public:
	struct FText                                                 Header;                                            // 0x28(0x38)
	struct FText                                                 Footer;                                            // 0x60(0x38)
	struct FName                                                 Tag;                                               // 0x98(0x8)
	bool                                                         DisableMusic;                                      // 0xa0(0x1)
	char                                                         pad0x7_KD5A1[0x7];                                 // 0xa1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipFactoryInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class RiddleQuestData: public DataAsset
{
public:
	class WwiseEvent*                                            DefaultGateCompletedAudioCue;                      // 0x28(0x8)
	class WwiseEvent*                                            DefaultGateCompletedMusicCue;                      // 0x30(0x8)
	TArray<class Class*>                                         AllTreasureChests;                                 // 0x38(0x10)
};


// Size 0x208 (Full Size[0x2c0] - InheritedSize[0xb8]
class FlamesOfFateContainerComponent: public ActorComponent
{
public:
	char                                                         pad0x18_62CX1[0x18];                               // 0xb8(0x18)
	struct TakeFlameOfFateParams                                 TakeFlameOfFateParams;                             // 0xd0(0xf8)
	struct CycleFlameOfFateParams                                CycleFlameOfFateParams;                            // 0x1c8(0x78)
	struct FlameOfFateAudioParams                                FlameOfFateAudioParams;                            // 0x240(0x10)
	char                                                         DefaultFlameType;                                  // 0x250(0x1)
	bool                                                         CanAcceptFlameFromOtherObjects;                    // 0x251(0x1)
	struct FlameData                                             CurrentFlameData;                                  // 0x252(0x2)
	struct FlameOfFateEffectParams                               FlameOfFateEffectParams;                           // 0x254(0xc)
	class ForceFeedbackEffect*                                   CycleFlameForceFeedback;                           // 0x260(0x8)
	char                                                         pad0x58_W8EKE[0x58];                               // 0x268(0x58)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseLimping: public StatusResponse
{
public:
};


// Size 0x20 (Full Size[0x160] - InheritedSize[0x140]
class InteractableComponentWithActionRules: public InteractableComponent
{
public:
	char                                                         pad0x8_GBNWW[0x8];                                 // 0x140(0x8)
	bool                                                         ComponentAlwaysDescribable;                        // 0x148(0x1)
	char                                                         pad0x17_REHRU[0x17];                               // 0x149(0x17)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmoteItemCategoriesListingAsset: public DataAsset
{
public:
	TArray<class Class*>                                         EmoteItemCategories;                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDropFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightingZoneServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintTelemetryInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RivalVoteButtonNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RammableDamageDataAsset: public DataAsset
{
public:
	TArray<struct RammableDamageSpeedEntry>                      DamageSpeedParams;                                 // 0x28(0x10)
};


// Size 0xc8 (Full Size[0x100] - InheritedSize[0x38]
class ReapersTributeShipEventSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  ReapersTributeShipEventSpawnDataAsset;             // 0x38(0x10)
	struct StringAssetReference                                  AIControlledShipParamsDataAsset;                   // 0x48(0x10)
	struct StringAssetReference                                  PlayerControlledShipParamsDataAsset;               // 0x58(0x10)
	struct ReapersTributeBandRewardSet                           TributeBandRewardSet;                              // 0x68(0x10)
	struct StringAssetReference                                  ReapersTributeShipDefeatedStateDataAsset;          // 0x98(0x10)
	struct StringClassReference                                  HandInCompany;                                     // 0xa8(0x10)
	struct StringAssetReference                                  ReapersTributeCutsceneDataAsset;                   // 0xb8(0x10)
	struct StringAssetReference                                  GameEventAvailabilityParamsDataAsset;              // 0xc8(0x10)
	int                                                          HighAmountOfTributeForCrewStat;                    // 0xd8(0x4)
	char                                                         pad0x4_D4SB2[0x4];                                 // 0xdc(0x4)
	struct StringAssetReference                                  ReapersTributeShipEventBannersDataAsset;           // 0xe0(0x10)
	struct StringAssetReference                                  ReapersTributeShipEventPopupsDataAsset;            // 0xf0(0x10)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class AthenaItemsSettings: public DeveloperSettings
{
public:
	char                                                         ProjectileCollisionChannel;                        // 0x38(0x1)
	char                                                         pad0x7_1RSE2[0x7];                                 // 0x39(0x7)
	TArray<struct AthenaItemsSettingsProjectileCollisionChannelOverride> ProjectileCollisionChannelOverrides;               // 0x40(0x10)
	char                                                         ThrowableCollisionChannel;                         // 0x50(0x1)
	char                                                         pad0x7_OBZTF[0x7];                                 // 0x51(0x7)
};


// Size 0x568 (Full Size[0x980] - InheritedSize[0x418]
class SwimmingCreaturePawn: public Pawn
{
public:
	char                                                         pad0x58_QYR9N[0x58];                               // 0x418(0x58)
	class ActionStateMachineComponent*                           ActionStateMachineComponent;                       // 0x470(0x8)
	class ActionStatePriorityTableData*                          ActionStatePriorityTableData;                      // 0x478(0x8)
	class UClass*                                                ActionStateCreatorDefinition;                      // 0x480(0x8)
	class AthenaAIControllerParamsDataAsset*                     AIControllerParams;                                // 0x488(0x8)
	class ShapeComponent*                                        CollisionComponent;                                // 0x490(0x8)
	class SkeletalMeshMemoryConstraintComponent*                 Mesh;                                              // 0x498(0x8)
	class SwimmingCreatureMovementComponent*                     FloatingMovementComponent;                         // 0x4a0(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x4a8(0x8)
	class PrimitiveComponent*                                    ProjectileTraceHitVolume;                          // 0x4b0(0x8)
	class HealthComponent*                                       HealthComponent;                                   // 0x4b8(0x8)
	class ActorDamageableComponent*                              DamageableComponent;                               // 0x4c0(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x4c8(0x8)
	class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0x4d0(0x8)
	class NetworkSyncedAnimationComponent*                       NetworkSyncedAnimationComponent;                   // 0x4d8(0x8)
	class NetworkTriggeredVFXComponent*                          NetworkTriggeredVFXComponent;                      // 0x4e0(0x8)
	class WaterHeightProviderComponent*                          WaterHeightProviderComponent;                      // 0x4e8(0x8)
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x4f0(0x8)
	float                                                        FadeOutTime;                                       // 0x4f8(0x4)
	char                                                         SwimmingCreatureType;                              // 0x4fc(0x1)
	char                                                         pad0x3_F0TZS[0x3];                                 // 0x4fd(0x3)
	struct Vector                                                CollisionShapeScaleOnDeath;                        // 0x500(0xc)
	char                                                         pad0xf4_Q82WF[0xf4];                               // 0x50c(0xf4)
	struct AIEncounterSpecification                              PawnEncounterSpec;                                 // 0x600(0xd0)
	char                                                         pad0x208_0KOBL[0x208];                             // 0x6d0(0x208)
	TArray<struct SwimmingCreatureLoadedMaterial>                CurrentlyLoadedMaterials;                          // 0x8d8(0x10)
	class UClass*                                                CurrentAIStrategy;                                 // 0x8e8(0x8)
	char                                                         pad0x90_GJ6P4[0x90];                               // 0x8f0(0x90)
};


// Size 0xc8 (Full Size[0x110] - InheritedSize[0x48]
class AimAssistCameraModifier: public CameraModifier
{
public:
	class AimAssistDataAsset*                                    AimAssistDataAsset;                                // 0x48(0x8)
	char                                                         pad0xc0_VA360[0xc0];                               // 0x50(0xc0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MemoryConstrainedMeshManipulationInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SpawnCollectableQuestObjectStepDesc: public TaleQuestStepDesc
{
public:
	class UClass*                                                CollectableQuestBookPageToSpawn;                   // 0x80(0x8)
	struct QuestVariablePlayerActor                              CollectingPlayerActor;                             // 0x88(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ClearProgressSpawnStep: public TaleQuestStep
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class ResourceProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_0ADXQ[0x8];                                 // 0xb8(0x8)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class DamageTrackerComponent: public ActorComponent
{
public:
	float                                                        SecondsToWaitBeforeClearingDamageDone;             // 0xb8(0x4)
	char                                                         pad0x4_9BMV4[0x4];                                 // 0xbc(0x4)
	class DamageableComponent*                                   DamageableComponent;                               // 0xc0(0x8)
	char                                                         pad0x8_L0DEF[0x8];                                 // 0xc8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BootyStorageBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RainStatus: public StatusBase
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ProjectileWeaponValidationFunctionLibrary: public BlueprintFunctionLibrary
{
public:
	float                                                        AimPositionValidationTolerance;                    // 0x28(0x4)
	char                                                         pad0x4_V6AR6[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ClawPummelStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class WaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DuringAbilityAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x1f0 (Full Size[0x4c0] - InheritedSize[0x2d0]
class ItemSpawnComponent: public SceneComponent
{
public:
	bool                                                         SpawnOnStart;                                      // 0x2d0(0x1)
	bool                                                         SpawnOnStartAfterMigration;                        // 0x2d1(0x1)
	char                                                         pad0x6_IE5P1[0x6];                                 // 0x2d2(0x6)
	struct ItemSpawnParams                                       SpawnParams;                                       // 0x2d8(0x48)
	TArray<struct ItemSpawnParams>                               SpawnParamOverrides;                               // 0x320(0x10)
	class WeightedItemDescSpawnDataAsset*                        ReferencedSpawnDistributionAsset;                  // 0x330(0x8)
	TArray<struct ItemSpawnDistributionAssets>                   ReferencedSpawnDistributionAssetOverrides;         // 0x338(0x10)
	TArray<struct ItemSpawnTransform>                            SpawnTransforms;                                   // 0x348(0x10)
	TArray<struct ItemSpawnTransformWithRandomQuantity>          SpawnTransformsWithRandomQuantities;               // 0x358(0x10)
	struct FName                                                 FeatureToggle;                                     // 0x368(0x8)
	bool                                                         InvertFeatureToggle;                               // 0x370(0x1)
	char                                                         SpawnSource;                                       // 0x371(0x1)
	char                                                         pad0x2_CBSDI[0x2];                                 // 0x372(0x2)
	float                                                        SpawnRate;                                         // 0x374(0x4)
	bool                                                         DestroyProxiesOnEndPlay;                           // 0x378(0x1)
	bool                                                         SpawnWithPhysicsEnabled;                           // 0x379(0x1)
	bool                                                         DoNotAttachToOwnerWhenSpawned;                     // 0x37a(0x1)
	bool                                                         DropItemsOnSpawn;                                  // 0x37b(0x1)
	bool                                                         DropItemsUsingPriorityAIDropParams;                // 0x37c(0x1)
	bool                                                         ShouldClusterItemsBeSpreadOut;                     // 0x37d(0x1)
	char                                                         pad0x2_6W1WF[0x2];                                 // 0x37e(0x2)
	float                                                        ClusterItemMinimumZOffSet;                         // 0x380(0x4)
	float                                                        ClusterItemMaximumZOffset;                         // 0x384(0x4)
	float                                                        ClusterItemMinimumRoll;                            // 0x388(0x4)
	float                                                        ClusterItemMaximumRoll;                            // 0x38c(0x4)
	float                                                        ClusterItemMinimumPitch;                           // 0x390(0x4)
	float                                                        ClusterItemMaximumPitch;                           // 0x394(0x4)
	char                                                         pad0x8_F36YD[0x8];                                 // 0x398(0x8)
	TArray<struct SpawnInstance>                                 SpawnList;                                         // 0x3a0(0x10)
	TArray<struct ClusterInfo>                                   ClusterInfo;                                       // 0x3b0(0x10)
	TArray<struct SpawnInstance>                                 SingleItemInstances;                               // 0x3c0(0x10)
	TArray<struct SpawnedItem>                                   SpawnedItems;                                      // 0x3d0(0x10)
	char                                                         pad0x50_W89O5[0x50];                               // 0x3e0(0x50)
	char                                                         ClusterSpawnerType;                                // 0x430(0x1)
	char                                                         pad0x7_JRRVJ[0x7];                                 // 0x431(0x7)
	TArray<char>                                                 UninteractedClusterItemImmunities;                 // 0x438(0x10)
	char                                                         pad0x78_Q8QC2[0x78];                               // 0x448(0x78)
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class CharacterMovementModeReporterComponent: public ActorComponent
{
public:
};


// Size 0x120 (Full Size[0x4c0] - InheritedSize[0x3a0]
class MusicalTrigger: public Actor
{
public:
	class SceneComponent*                                        Root;                                              // 0x3a0(0x8)
	class SphereComponent*                                       InnerRadiusTriggerComponent;                       // 0x3a8(0x8)
	class SphereComponent*                                       OuterRadiusTriggerComponent;                       // 0x3b0(0x8)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3b8(0x8)
	TArray<struct LandmarkReactionKeyFrame>                      ReactionEventsPreparingToTriggerMechanism;         // 0x3c0(0x10)
	TArray<struct LandmarkReactionKeyFrame>                      ReactionEventsCancel;                              // 0x3d0(0x10)
	class WorldRegionComponent*                                  ShantyWorldRegionComponent;                        // 0x3e0(0x8)
	class WwiseEvent*                                            PlayMagicEvent;                                    // 0x3e8(0x8)
	class WwiseEvent*                                            StopMagicEvent;                                    // 0x3f0(0x8)
	bool                                                         PlayEmitterOnMechanism;                            // 0x3f8(0x1)
	char                                                         pad0x7_800EY[0x7];                                 // 0x3f9(0x7)
	struct WwiseEmitter                                          ShantyMagicEmitter;                                // 0x400(0x20)
	float                                                        DelayBeforeMechanismTrigger;                       // 0x420(0x4)
	char                                                         pad0x4_QWQUR[0x4];                                 // 0x424(0x4)
	TArray<class SwitchMechanismTrigger*>                        SwitchesToSyncTo;                                  // 0x428(0x10)
	class LandmarkReactionPlayer*                                ReactionEventPlayer;                               // 0x438(0x8)
	TArray<class Actor*>                                         ActorsPlayingInstruments;                          // 0x440(0x10)
	TArray<class Interface*>                                     AssociatedMechanismActions;                        // 0x450(0x10)
	char                                                         pad0x48_Z30IK[0x48];                               // 0x460(0x48)
	char                                                         MusicalTriggerState;                               // 0x4a8(0x1)
	char                                                         pad0x7_O5DCJ[0x7];                                 // 0x4a9(0x7)
	TArray<class Actor*>                                         AssociatedMechanismActionActors;                   // 0x4b0(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class BlockGeysersTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	struct QuestVariableActor                                    ActorNearIsland;                                   // 0x28(0x30)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class QuestBookPageBundle: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          Pages;                                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionNorthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ClueSiteTypeToMapMarkIdDataAsset: public DataAsset
{
public:
	TArray<struct ClueSiteTypeToMarkId>                          ClueSiteTypeToMarkIdMap;                           // 0x28(0x10)
};


// Size 0x40 (Full Size[0x310] - InheritedSize[0x2d0]
class GameEventItemSpawnSelectorComponent: public SceneComponent
{
public:
	class UClass*                                                EventType;                                         // 0x2d0(0x8)
	TArray<struct GameEventItemSpawnCollection>                  ItemSpawnCollections;                              // 0x2d8(0x10)
	char                                                         pad0x28_HATIK[0x28];                               // 0x2e8(0x28)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class WeaponInterruptedStatusType: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoOctaveDownNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapItemInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipAnnouncementServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd0] - InheritedSize[0xc0]
class HarpoonAdaptiveTriggerComponent: public AdaptiveTriggerComponent
{
public:
	struct AdaptiveTriggerEffectMode_Feedback                    LeftTrigger_ReelIn;                                // 0xc0(0x3)
	struct AdaptiveTriggerEffectMode_Weapon                      RightTrigger_Fire;                                 // 0xc3(0x4)
	struct AdaptiveTriggerEffectMode_Weapon                      RightTrigger_Release;                              // 0xc7(0x4)
	char                                                         pad0x5_O4QLK[0x5];                                 // 0xcb(0x5)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipMilestoneDescriptionsProviderInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class WeightedAwardableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_W5KVP[0x8];                                 // 0xb8(0x8)
	struct WeightedRewardDistribution                            RewardDistribution;                                // 0xc0(0x18)
	char                                                         RewardDestination;                                 // 0xd8(0x1)
	char                                                         pad0x6f_WURP2[0x6f];                               // 0xd9(0x6f)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class AthenaAnimationPulleyDataAsset: public DataAsset
{
public:
	class AnimSequence*                                          Entry;                                             // 0x28(0x8)
	struct AthenaAnimationPulleyDataAssetEntry                   Left;                                              // 0x30(0x20)
	struct AthenaAnimationPulleyDataAssetEntry                   Right;                                             // 0x50(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WalkableEmoteActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class DeepSeaRegionVisualiserComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class WaitForTunnelOfTheDamnedMatchmakingTaleStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x398 (Full Size[0x450] - InheritedSize[0xb8]
class VoyageParticipantComponent: public ActorComponent
{
public:
	char                                                         pad0xa8_SKURB[0xa8];                               // 0xb8(0xa8)
	TArray<struct QuestTypeTutorialOverride>                     QuestTypeTutorialOverrides;                        // 0x160(0x10)
	class Actor*                                                 OwningPlayer;                                      // 0x170(0x8)
	struct VoyageParticipantViewContainer                        ViewContainer;                                     // 0x178(0x128)
	struct VoyageParticipantViewContainer                        PreviousViewContainer;                             // 0x2a0(0x128)
	char                                                         pad0x88_TCU85[0x88];                               // 0x3c8(0x88)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class GameEventParams: public DataAsset
{
public:
	float                                                        KeepAliveRadius;                                   // 0x28(0x4)
	char                                                         pad0x4_661WG[0x4];                                 // 0x2c(0x4)
	struct FString                                               KeepAliveRadiusRemoteConfigKey;                    // 0x30(0x10)
	float                                                        InnerEncounterRadius;                              // 0x40(0x4)
	float                                                        OuterEncounterRadius;                              // 0x44(0x4)
};


// Size 0x90 (Full Size[0x430] - InheritedSize[0x3a0]
class ShroudBreakerOnShip: public Actor
{
public:
	class AthenaWorldSettings*                                   AthenaWorldSettings;                               // 0x3a0(0x8)
	float                                                        DistanceToSafeZoneInRange;                         // 0x3a8(0x4)
	char                                                         ShroudBreakerActivationState;                      // 0x3ac(0x1)
	bool                                                         IsShroudBreakerDeactivating;                       // 0x3ad(0x1)
	char                                                         TargetSafeZone;                                    // 0x3ae(0x1)
	char                                                         pad0x81_05257[0x81];                               // 0x3af(0x81)
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class VulnerabilityLayerStateManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x30_19F73[0x30];                               // 0xb8(0x30)
	TArray<struct ManagedVulnerabilityLayer>                     ManagedVulnerabilityLayers;                        // 0xe8(0x10)
	char                                                         pad0x8_RPMAP[0x8];                                 // 0xf8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialManagerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageDescInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleStormServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x40 (Full Size[0x3e0] - InheritedSize[0x3a0]
class InvasionDepartureTunnelSceneryTileInstance: public Actor
{
public:
	TArray<struct TunnelCreatureDiorama>                         CreatureDioromas;                                  // 0x3a0(0x10)
	int                                                          MaxCreatureDioromas;                               // 0x3b0(0x4)
	char                                                         pad0x4_AWTKU[0x4];                                 // 0x3b4(0x4)
	TArray<class Actor*>                                         SpawnedCreatureDioramas;                           // 0x3b8(0x10)
	char                                                         pad0x8_8AIH9[0x8];                                 // 0x3c8(0x8)
	class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	char                                                         pad0x8_EPOKS[0x8];                                 // 0x3d8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Reward: public Object
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class SeaFortAddOnSharedDataAsset: public DataAsset
{
public:
	TArray<struct PrisonerToPositionMapping>                     SpawnablePrisonerToPositionMappings;               // 0x28(0x10)
	class UClass*                                                ItemToSpawn;                                       // 0x38(0x8)
	struct Vector                                                ItemSpawnRelativeLocation;                         // 0x40(0xc)
	char                                                         pad0x4_S4IHT[0x4];                                 // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileLauncherMechanismInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class NPCOnSurfaceVOCutsceneComponent: public ActorComponent
{
public:
	char                                                         pad0x18_OMCMW[0x18];                               // 0xb8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneAnimationDataAssetInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class GlobalVoyageDirectorService: public Object
{
public:
	char                                                         pad0x10_K039E[0x10];                               // 0x28(0x10)
	class World*                                                 World;                                             // 0x38(0x8)
	TArray<class CrewVoyageParticipant*>                         Participants;                                      // 0x40(0x10)
	class GlobalVoyageDirectorServiceSettings*                   Settings;                                          // 0x50(0x8)
	class AthenaWorldSettings*                                   WorldSettings;                                     // 0x58(0x8)
	TArray<struct VoyageToRegister>                              VoyagesToRegister;                                 // 0x60(0x10)
	char                                                         pad0xb0_M1XZG[0xb0];                               // 0x70(0xb0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogAudioActivityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialInventorySelectionYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x108 (Full Size[0x4a8] - InheritedSize[0x3a0]
class Crest: public Actor
{
public:
	char                                                         pad0x8_8EP72[0x8];                                 // 0x3a0(0x8)
	class StaticMeshMemoryConstraintComponent*                   FrontCrestMeshComponent;                           // 0x3a8(0x8)
	class StaticMeshMemoryConstraintComponent*                   BackCrestMeshComponent;                            // 0x3b0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3b8(0x8)
	char                                                         pad0x10_L6B3Y[0x10];                               // 0x3c0(0x10)
	class MemoryConstrainedMeshInitializer*                      FrontCrestMMCMeshInitializer;                      // 0x3d0(0x8)
	class MemoryConstrainedMeshInitializer*                      BackCrestMMCMeshInitializer;                       // 0x3d8(0x8)
	class CrestPartDescAsset*                                    DescToSetWhenSafe;                                 // 0x3e0(0x8)
	class CrestPartDescAsset*                                    CurrentCrestDesc;                                  // 0x3e8(0x8)
	bool                                                         IsTextHidden;                                      // 0x3f0(0x1)
	char                                                         pad0x9f_MHULO[0x9f];                               // 0x3f1(0x9f)
	struct FString                                               ShipNameToRender;                                  // 0x490(0x10)
	char                                                         pad0x8_09P8Y[0x8];                                 // 0x4a0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlCapstanArmActionStateId: public ActionStateId
{
public:
};


// Size 0x58 (Full Size[0x3f8] - InheritedSize[0x3a0]
class ObstacleCourse: public Actor
{
public:
	char                                                         pad0x18_GXWXG[0x18];                               // 0x3a0(0x18)
	TArray<struct Checkpoint>                                    CheckpointsAndCollisions;                          // 0x3b8(0x10)
	bool                                                         ShouldWaitForTaleStepToBegin;                      // 0x3c8(0x1)
	char                                                         pad0x3_MSL4H[0x3];                                 // 0x3c9(0x3)
	float                                                        MaxTimeInSeconds;                                  // 0x3cc(0x4)
	float                                                        PlayerFinalTime;                                   // 0x3d0(0x4)
	float                                                        TimeToBeatForStat;                                 // 0x3d4(0x4)
	struct PlayerStat                                            BeatTimeStat;                                      // 0x3d8(0x4)
	char                                                         pad0x4_5B9KJ[0x4];                                 // 0x3dc(0x4)
	class Actor*                                                 CurrentPlayer;                                     // 0x3e0(0x8)
	class Actor*                                                 LastPlayerToCompleteCourse;                        // 0x3e8(0x8)
	struct TimerHandle                                           ObstacleCourseTimeHandler;                         // 0x3f0(0x4)
	char                                                         pad0x4_MI7RJ[0x4];                                 // 0x3f4(0x4)
};


// Size 0x1f0 (Full Size[0x2a8] - InheritedSize[0xb8]
class PlayerTelemetryComponent: public ActorComponent
{
public:
	char                                                         pad0x6c_47WD1[0x6c];                               // 0xb8(0x6c)
	float                                                        HeartbeatInterval;                                 // 0x124(0x4)
	char                                                         pad0x150_PQE1S[0x150];                             // 0x128(0x150)
	struct DateTime                                              SpawnTimestamp;                                    // 0x278(0x8)
	char                                                         pad0x28_SS2VN[0x28];                               // 0x280(0x28)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestSetCanRevivableAIEnterRevivableStateOnDeath: public TaleQuestStep
{
public:
};


// Size 0x68 (Full Size[0x408] - InheritedSize[0x3a0]
class WallClock: public Actor
{
public:
	class PoseableMeshComponent*                                 ClockMesh;                                         // 0x3a0(0x8)
	struct FName                                                 MinuteHandBoneName;                                // 0x3a8(0x8)
	struct FName                                                 HourHandBoneName;                                  // 0x3b0(0x8)
	float                                                        ClockTimeUpdateRateInSeconds;                      // 0x3b8(0x4)
	float                                                        MeshRotationCorrection;                            // 0x3bc(0x4)
	char                                                         pad0x38_C5SNT[0x38];                               // 0x3c0(0x38)
	class MaterialInstanceDynamic*                               ClockMeshDynamicMaterialInstance;                  // 0x3f8(0x8)
	char                                                         pad0x8_UYIO8[0x8];                                 // 0x400(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuriedDecalServerServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameSessionIdProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BattleElevatorEventRoomBasePolicy: public Object
{
public:
};


// Size 0x90 (Full Size[0x430] - InheritedSize[0x3a0]
class PlayerBuriedItemService: public Actor
{
public:
	char                                                         pad0x10_UZ88K[0x10];                               // 0x3a0(0x10)
	TArray<class TavernBoard*>                                   RegisteredTavernBoards;                            // 0x3b0(0x10)
	TArray<struct PlayerBuriedItemServiceNumMapsTakenFromStoreThisDayPerCrew> NumMapsTakenFromStoreThisDayPerCrew;               // 0x3c0(0x10)
	class PlayerBuriedItemServiceDataAsset*                      DataAsset;                                         // 0x3d0(0x8)
	class PlayerBuriedItemServiceMapStorePopulator*              MapStorePopulator;                                 // 0x3d8(0x8)
	char                                                         pad0x50_TGN7J[0x50];                               // 0x3e0(0x50)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class GetIsShipInGoodConditionStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableBool                                     Result;                                            // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemActionEffect: public Object
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AthenaStreamedLevelDataAsset: public DataAsset
{
public:
	TArray<struct StringAssetReference>                          LevelsToLoad;                                      // 0x28(0x10)
	struct FString                                               PackagePath;                                       // 0x38(0x10)
	struct FName                                                 StreamingLevelFeature;                             // 0x48(0x8)
	TArray<char>                                                 RequiredPlayModes;                                 // 0x50(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VaultKeyMappingDataAsset: public DataAsset
{
public:
	TArray<struct VaultKeyMapping>                               KeyMappings;                                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnCommandsAIAmmoList: public DataAsset
{
public:
	TArray<struct SpawnCommandsAIAmmo>                           AmmoList;                                          // 0x28(0x10)
};


// Size 0x4d8 (Full Size[0x590] - InheritedSize[0xb8]
class KrakenActionCoordinatorComponent: public ActorComponent
{
public:
	char                                                         pad0x18_UXBD0[0x18];                               // 0xb8(0x18)
	struct CoordinatedKrakenPhaseAssetEntry                      CurrentPhaseEntry;                                 // 0xd0(0x40)
	struct ProcessableActions                                    CurrentAction;                                     // 0x110(0x18)
	struct ProcessableActions                                    NextAction;                                        // 0x128(0x18)
	struct ProcessableActions                                    CurrentActionReplicated;                           // 0x140(0x18)
	struct ProcessableActions                                    NextActionReplicated;                              // 0x158(0x18)
	struct CoordinatedKrakenAction                               CurrentlyRunningAction;                            // 0x170(0x330)
	char                                                         pad0x34_DQ112[0x34];                               // 0x4a0(0x34)
	bool                                                         HasCurrentlyActiveAsset;                           // 0x4d4(0x1)
	char                                                         pad0xbb_RS6M8[0xbb];                               // 0x4d5(0xbb)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class UnderwaterEffectsDataAsset: public DataAsset
{
public:
	class WwiseEvent*                                            StartUnderwaterSfx;                                // 0x28(0x8)
	class WwiseEvent*                                            StopUnderwaterSfx;                                 // 0x30(0x8)
	class Object*                                                UnderwaterVfx;                                     // 0x38(0x8)
	struct FName                                                 UnderwaterVfxSocketName;                           // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TankardInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TooltipDetailedEventProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipFishSpawnerDetectionInterface: public Interface
{
public:
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class BountyQuestDescData: public DataAsset
{
public:
	TArray<class Class*>                                         AllBountyRewards;                                  // 0x28(0x10)
	class RiddleTextPhraseDataAsset*                             LocationPhrase;                                    // 0x38(0x8)
	class RiddleTextPhraseDataAsset*                             LocationUndergroundPhrase;                         // 0x40(0x8)
	class RiddleTextPhraseDataAsset*                             LocationPhraseWithExtraContext;                    // 0x48(0x8)
	class RiddleTextPhraseDataAsset*                             LocationUndergroundPhraseWithExtraContext;         // 0x50(0x8)
	TArray<struct BountyQuestMugShotSet>                         BountyMapMugShotSets;                              // 0x58(0x10)
	TArray<struct BountyQuestLayoutOption>                       BountyMapLayoutOptions;                            // 0x68(0x10)
	TArray<struct Text>                                          DefaultBountyMapDescriptions;                      // 0x78(0x10)
	TArray<struct LoadoutSubstitution>                           TargetLoadoutSubstitutions;                        // 0xa8(0x10)
	TArray<struct CompanySkillsetProgressions>                   Skillsets;                                         // 0xb8(0x10)
	float                                                        AIExclusionZoneHeight;                             // 0xc8(0x4)
	float                                                        QuestEndDelay;                                     // 0xcc(0x4)
	float                                                        AIExclusionZoneRemovalEndDelay;                    // 0xd0(0x4)
	char                                                         pad0x4_T343O[0x4];                                 // 0xd4(0x4)
};


// Size 0x610 (Full Size[0x9b0] - InheritedSize[0x3a0]
class WarMapProposalContainer: public Actor
{
public:
	char                                                         pad0x20_LQ9G6[0x20];                               // 0x3a0(0x20)
	class SceneComponent*                                        RootSceneComponent;                                // 0x3c0(0x8)
	TArray<class WarMapInteractionVoteComponent*>                VoteComponents;                                    // 0x3c8(0x10)
	class WarMapInteractionComponent*                            InteractionComponent;                              // 0x3d8(0x8)
	class StaticMeshComponent*                                   WarMapMesh;                                        // 0x3e0(0x8)
	class StaticMeshComponent*                                   WarMapMeshHardMode;                                // 0x3e8(0x8)
	class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0x3f0(0x8)
	struct FName                                                 OpenScrollMaterialAnimationName;                   // 0x3f8(0x8)
	struct FName                                                 CloseScrollMaterialAnimationName;                  // 0x400(0x8)
	struct FText                                                 CloseMapInteractionText;                           // 0x408(0x38)
	class UClass*                                                CloseMapInteractionInput;                          // 0x440(0x8)
	class UClass*                                                CloseMapHoldInteractionInput;                      // 0x448(0x8)
	float                                                        CloseMapHoldDuration;                              // 0x450(0x4)
	char                                                         pad0x4_S5QQG[0x4];                                 // 0x454(0x4)
	class WwiseEvent*                                            OpenMapSfx;                                        // 0x458(0x8)
	class WwiseEvent*                                            CloseMapSfx;                                       // 0x460(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x468(0x8)
	bool                                                         IsWarMapOpen;                                      // 0x470(0x1)
	bool                                                         ShowHardModeVoting;                                // 0x471(0x1)
	bool                                                         ShipCrewHasJoinedFaction;                          // 0x472(0x1)
	char                                                         pad0x5_QBDUA[0x5];                                 // 0x473(0x5)
	class Ship*                                                  ParentShip;                                        // 0x478(0x8)
	struct Guid                                                  ParentShipCrewId;                                  // 0x480(0x10)
	struct FText                                                 CrewFactionDisplayName;                            // 0x490(0x38)
	char                                                         pad0x4e8_2XIW0[0x4e8];                             // 0x4c8(0x4e8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterAnimaticSettingsInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x3b0] - InheritedSize[0x3a0]
class Drapes: public Actor
{
public:
	class StaticMeshComponent*                                   DrapesMeshComponent;                               // 0x3a0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3a8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RegenerationStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DartStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RightTriggerAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class MechanismTriggerComponent: public ActorComponent
{
public:
	char                                                         pad0x18_XM5SY[0x18];                               // 0xb8(0x18)
	char                                                         TriggerType;                                       // 0xd0(0x1)
	char                                                         pad0x7_QNTHG[0x7];                                 // 0xd1(0x7)
	char                                                         TriggerState;                                      // 0x138(0x1)
	char                                                         pad0xf_ROGHJ[0xf];                                 // 0x139(0xf)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class AddIslandToVoyageHistoryStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableName                                     IslandName;                                        // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableKeyedInstrumentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EventTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ScrambledNamesDataAsset: public DataAsset
{
public:
	TArray<struct Text>                                          ScrambledNames;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotClockwiseNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTrackerInterface: public Interface
{
public:
};


// Size 0x590 (Full Size[0xa80] - InheritedSize[0x4f0]
class KrakenAnimatedTentacle: public KrakenTentacle
{
public:
	char                                                         pad0x28_LUI9P[0x28];                               // 0x4f0(0x28)
	class SceneComponent*                                        RootSceneComponent;                                // 0x518(0x8)
	class CapsuleComponent*                                      BaseShipCollision;                                 // 0x520(0x8)
	class SceneComponent*                                        MeshOffsetComponent;                               // 0x528(0x8)
	class SkeletalMeshComponent*                                 TentacleMeshComponent;                             // 0x530(0x8)
	class KrakenTentacleAIAudioComponent*                        KrakenTentacleAudioComponent;                      // 0x538(0x8)
	struct FName                                                 AttachSocketNameFirstPerson;                       // 0x540(0x8)
	struct FName                                                 AttachSocketNameThirdPerson;                       // 0x548(0x8)
	struct CollisionProfileName                                  TentacleCollisionProfile;                          // 0x550(0x8)
	TArray<struct KrakenAnimatedTentacleCollisionSegment>        CollisionSegments;                                 // 0x558(0x10)
	bool                                                         EnabledShipCollision;                              // 0x568(0x1)
	bool                                                         DisableHeadCollisionsDuringHoldingState;           // 0x569(0x1)
	char                                                         pad0x2_8HT9L[0x2];                                 // 0x56a(0x2)
	int                                                          CollisionBoneToUseForShipCollision;                // 0x56c(0x4)
	char                                                         SegmentsCollisionEnableType;                       // 0x570(0x1)
	char                                                         BaseShipCollisionEnableType;                       // 0x571(0x1)
	char                                                         pad0x6_XVZKP[0x6];                                 // 0x572(0x6)
	class KrakenAnimatedTentacleAnimationSpecDataAsset*          AnimationSpec;                                     // 0x578(0x8)
	class KrakenAnimatedTentacleAnimationMappingDataAsset*       AnimationMapping;                                  // 0x580(0x8)
	class KrakenAnimatedTentacleStateAnimationsDataAsset*        StateAnimationMapping;                             // 0x588(0x8)
	float                                                        AnimationPlayRate;                                 // 0x590(0x4)
	float                                                        RequestedAnimationPlayRateBlendTime;               // 0x594(0x4)
	float                                                        PlayRateAdjustMaxTimeDelta;                        // 0x598(0x4)
	float                                                        PlayRateAdjustMaxPercentageToSpeedUpPlayRate;      // 0x59c(0x4)
	float                                                        PlayRateAdjustMaxPercentageToSlowDownPlayRate;     // 0x5a0(0x4)
	float                                                        ServerAnimationTimeOffsetLatencyMultiplierForSynchronisation; // 0x5a4(0x4)
	float                                                        DebugDrawBoneLocationRadius;                       // 0x5a8(0x4)
	float                                                        DebugDrawTargetRadius;                             // 0x5ac(0x4)
	float                                                        DebugDrawBoneRotationEndPointRadius;               // 0x5b0(0x4)
	float                                                        DebugDrawBoneRotationLength;                       // 0x5b4(0x4)
	float                                                        DebugDrawSuckingTargetRadius;                      // 0x5b8(0x4)
	float                                                        MinAnimationPlayedTimeToSetPendingStateChange;     // 0x5bc(0x4)
	float                                                        MinAnimationLeftTimeToSetPendingStateChange;       // 0x5c0(0x4)
	float                                                        AnimationOffsetTimeLeftForOptimalPendingStateChange; // 0x5c4(0x4)
	float                                                        SmoothNetUpdateLocationTime;                       // 0x5c8(0x4)
	float                                                        SmoothNetUpdateRotationTime;                       // 0x5cc(0x4)
	float                                                        MinDotToTargetToTryAndRotate;                      // 0x5d0(0x4)
	float                                                        MaxDotToTargetToTryAndRotate;                      // 0x5d4(0x4)
	float                                                        MinYawTurnRate;                                    // 0x5d8(0x4)
	float                                                        MaxYawTurnRate;                                    // 0x5dc(0x4)
	float                                                        MinInvisibleTime;                                  // 0x5e0(0x4)
	float                                                        MinSuckingTellTime;                                // 0x5e4(0x4)
	float                                                        MaxSuckingTellTime;                                // 0x5e8(0x4)
	float                                                        MaxSuckingPlayerDistance;                          // 0x5ec(0x4)
	float                                                        MinHealthLossRequiredToAvoidAbortSuck;             // 0x5f0(0x4)
	char                                                         pad0x4_21TFK[0x4];                                 // 0x5f4(0x4)
	class Object*                                                TentacleSuckingTellVFX;                            // 0x5f8(0x8)
	struct FName                                                 TargetVFXAttachSocketName;                         // 0x600(0x8)
	class Object*                                                TargetFirstPersonSuckingTellVFX;                   // 0x608(0x8)
	class Object*                                                TargetThirdPersonSuckingTellVFX;                   // 0x610(0x8)
	float                                                        MaxHealthLossRequiredToAvoidAbortSuck;             // 0x618(0x4)
	float                                                        SuckingVelocity;                                   // 0x61c(0x4)
	float                                                        SuckingPlayerAttachDistance;                       // 0x620(0x4)
	float                                                        MinHealthLossRequiredToDropPlayer;                 // 0x624(0x4)
	float                                                        MaxHealthLossRequiredToDropPlayer;                 // 0x628(0x4)
	float                                                        MinDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x62c(0x4)
	float                                                        MaxDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x630(0x4)
	float                                                        MinHoldingTime;                                    // 0x634(0x4)
	float                                                        MaxHoldingTime;                                    // 0x638(0x4)
	float                                                        MinWaterDunkTime;                                  // 0x63c(0x4)
	float                                                        MaxWaterDunkTime;                                  // 0x640(0x4)
	float                                                        PowerSlamDamageTime;                               // 0x644(0x4)
	float                                                        PowerSlamDamage;                                   // 0x648(0x4)
	struct FName                                                 IngestTargetSocketName;                            // 0x64c(0x8)
	int                                                          IngestTargetBoneIndexOffset;                       // 0x654(0x4)
	float                                                        MinIngestingTime;                                  // 0x658(0x4)
	float                                                        MaxIngestingTime;                                  // 0x65c(0x4)
	float                                                        IngestingDamageAmountPerSecond;                    // 0x660(0x4)
	float                                                        RegurgitatingSpeed;                                // 0x664(0x4)
	float                                                        RegurgitatingLaunchTime;                           // 0x668(0x4)
	float                                                        ThrowTargetLaunchTime;                             // 0x66c(0x4)
	float                                                        ThrowTargetVisibleTime;                            // 0x670(0x4)
	float                                                        ThrowingSpeed;                                     // 0x674(0x4)
	class Object*                                                TentacleFirstPersonThrowingVFX;                    // 0x678(0x8)
	class Object*                                                TentacleThirdPersonThrowingVFX;                    // 0x680(0x8)
	float                                                        MinTargetVomitingDelay;                            // 0x688(0x4)
	float                                                        MaxTargetVomitingDelay;                            // 0x68c(0x4)
	float                                                        MinTargetVomitingDuration;                         // 0x690(0x4)
	float                                                        MaxTargetVomitingDuration;                         // 0x694(0x4)
	TArray<struct KrakenAnimatedTentacleHeldTargetVomittingChance> TargetVomitingChances;                             // 0x698(0x10)
	struct FName                                                 VomitVFXType;                                      // 0x6a8(0x8)
	TArray<struct KrakenAnimatedTentacleWaterTriggerableFX>      WaterTriggerableFX;                                // 0x6b0(0x10)
	int                                                          WaterQueryBoneIndex;                               // 0x6c0(0x4)
	char                                                         pad0x4_N9FH2[0x4];                                 // 0x6c4(0x4)
	class PhysicalMaterial*                                      TentaclePhysicalMaterial;                          // 0x6c8(0x8)
	float                                                        VisualLoggerUpdateTime;                            // 0x6d0(0x4)
	float                                                        ServerTimeToStartPlayingIdle;                      // 0x6d4(0x4)
	TArray<struct Vector>                                        AITargetVisibilityPoints;                          // 0x6d8(0x10)
	struct Vector                                                TargetBoxOffset;                                   // 0x6e8(0xc)
	struct Vector                                                TargetBoxScale;                                    // 0x6f4(0xc)
	char                                                         pad0x14_K3PRK[0x14];                               // 0x700(0x14)
	float                                                        ReplicatedAnimationProgression;                    // 0x714(0x4)
	bool                                                         IsHitReactionsEnabled;                             // 0x718(0x1)
	char                                                         pad0x27_W78KW[0x27];                               // 0x719(0x27)
	class UClass*                                                PendingState;                                      // 0x740(0x8)
	char                                                         pad0x8_PY3EW[0x8];                                 // 0x748(0x8)
	class UClass*                                                ReplicatedCurrentState;                            // 0x750(0x8)
	char                                                         pad0x8_1YMKX[0x8];                                 // 0x758(0x8)
	class UClass*                                                PreviousState;                                     // 0x760(0x8)
	char                                                         pad0x30_NOZQA[0x30];                               // 0x768(0x30)
	float                                                        IngestingProgress;                                 // 0x798(0x4)
	char                                                         pad0x4_1BHIY[0x4];                                 // 0x79c(0x4)
	class KrakenAnimatedTentacleAnimationDataAsset*              AuthoritativeAnimation;                            // 0x7a0(0x8)
	float                                                        TentacleYaw;                                       // 0x7a8(0x4)
	struct Vector                                                TentacleWorldLocation;                             // 0x7ac(0xc)
	class AthenaCharacter*                                       CurrentTarget;                                     // 0x7b8(0x8)
	bool                                                         HasPlayedIntroAnim;                                // 0x7c0(0x1)
	char                                                         pad0x16f_7VAOL[0x16f];                             // 0x7c1(0x16f)
	class SceneComponent*                                        DockedToSceneComponent;                            // 0x930(0x8)
	struct Vector                                                DockedLocalSpaceOffset;                            // 0x938(0xc)
	char                                                         pad0xc_4JZX1[0xc];                                 // 0x944(0xc)
	struct Quat                                                  DockedLocalSpaceRotation;                          // 0x950(0x10)
	TArray<class CapsuleComponent*>                              CollisionCapsules;                                 // 0x960(0x10)
	char                                                         pad0x48_88RPR[0x48];                               // 0x970(0x48)
	class ParticleSystemComponent*                               TentacleSuckingTellParticleSystem;                 // 0x9b8(0x8)
	class ParticleSystemComponent*                               TargetFirstPersonSuckingTellParticleSystem;        // 0x9c0(0x8)
	class ParticleSystemComponent*                               TargetThirdPersonSuckingTellParticleSystem;        // 0x9c8(0x8)
	char                                                         pad0xb0_ST149[0xb0];                               // 0x9d0(0xb0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClamberableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PartDescCustomizationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemSpawningBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AthenaGameEngineSettings: public Object
{
public:
	char                                                         pad0x28_TOFW0[0x28];                               // 0x28(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AmmoInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class MerchantQuestDescData: public DataAsset
{
public:
	TArray<class MerchantMapLayout*>                             MerchantMapLayouts;                                // 0x28(0x10)
	class MerchantMapLayout*                                     MerchantMapLayoutV2;                               // 0x38(0x8)
	struct FText                                                 DeliverByTimeTextFormat;                           // 0x40(0x38)
	TArray<struct Text>                                          DeliverByTimeHourFormat;                           // 0x78(0x10)
	TArray<struct Text>                                          DeliverByTimeDayFormat;                            // 0x88(0x10)
	TArray<struct Text>                                          BeachDirection;                                    // 0x98(0x10)
	class PopUpMessageDesc*                                      CollectCratesFromTraderPopupDesc;                  // 0xa8(0x8)
	class UClass*                                                MerchantCompany;                                   // 0xb0(0x8)
	float                                                        CrateSpawnDropOffset;                              // 0xb8(0x4)
	float                                                        CrateSpawnOffsetMin;                               // 0xbc(0x4)
	float                                                        CrateSpawnCellSize;                                // 0xc0(0x4)
	float                                                        CrateSpawnCellSizeRelaxationAddition;              // 0xc4(0x4)
	float                                                        AIExclusionZoneHeight;                             // 0xc8(0x4)
	char                                                         pad0x4_EE6DG[0x4];                                 // 0xcc(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WaterSensitiveComponentDataAsset: public DataAsset
{
public:
	struct WaterSensitiveHealthChange                            HealthChangeInRainPerSecond;                       // 0x28(0x8)
	struct WaterSensitiveHealthChange                            HealthChangeSubmergedPerSecond;                    // 0x30(0x8)
	struct WaterSensitiveHealthChange                            HealthChangeWhenDryPerSecond;                      // 0x38(0x8)
	struct WaterSensitiveHealthChange                            HealthChangeOnLiquidProjectileImpact;              // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerVariant: public Object
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AISpawnContextTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	struct FName                                                 AISpawnContextName;                                // 0x28(0x8)
	bool                                                         SpecificToIsland;                                  // 0x30(0x1)
	char                                                         pad0x7_EDRQ2[0x7];                                 // 0x31(0x7)
	struct QuestVariableAsset                                    ActorLocatedOnIsland;                              // 0x38(0x30)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class UserSettingsService: public Actor
{
public:
	char                                                         pad0x8_X1HNK[0x8];                                 // 0x3a0(0x8)
	TArray<struct PlayerUserSettings>                            PlayerUserSettings;                                // 0x3a8(0x10)
	char                                                         pad0x18_CRXAB[0x18];                               // 0x3b8(0x18)
};


// Size 0x8 (Full Size[0x3e0] - InheritedSize[0x3d8]
class WorldSafeRegion: public BlockingVolume
{
public:
	char                                                         pad0x1_KSUKG[0x1];                                 // 0x3d8(0x1)
	bool                                                         RequiresShroudBreaker;                             // 0x3d9(0x1)
	bool                                                         IsMainWorldSafeZone;                               // 0x3da(0x1)
	char                                                         pad0x5_PJWTJ[0x5];                                 // 0x3db(0x5)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DrunkennessInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ashen_dragon_flag_main_01_a: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlockedInputActionStateId: public ActionStateId
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class IslandDataDefaultAssetEntry: public DataAsset
{
public:
	char                                                         IslandType;                                        // 0x28(0x1)
	char                                                         pad0x7_4D904[0x7];                                 // 0x29(0x7)
	class AISpawner*                                             AISpawner;                                         // 0x30(0x8)
	TArray<struct ToggledSpawnerOverride>                        AISpawnerOverrides;                                // 0x38(0x10)
	class AISpawner*                                             CannonsAISpawner;                                  // 0x48(0x8)
	TArray<struct ToggledSpawnerOverride>                        CannonsAISpawnerOverrides;                         // 0x50(0x10)
	class AISpawner*                                             EmergentCaptainSpawner;                            // 0x60(0x8)
	TArray<struct ToggledSpawnerOverride>                        EmergentCaptainSpawnerOverrides;                   // 0x68(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetMechanismActivationModeStep: public TaleQuestStep
{
public:
	class SetMechanismActivationModeStepDesc*                    Desc;                                              // 0x98(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class MechanismsSettings: public Object
{
public:
	class UClass*                                                MaterialMap;                                       // 0x28(0x8)
	TArray<struct FlamethrowerStatusOverride>                    GlobalFlamethrowerStatusOverrides;                 // 0x30(0x10)
};


// Size 0x40 (Full Size[0x310] - InheritedSize[0x2d0]
class OnboardingIntroLocationComponent: public SceneComponent
{
public:
	char                                                         pad0x28_MY94K[0x28];                               // 0x2d0(0x28)
	struct Rotator                                               SpawnRotation;                                     // 0x2f8(0xc)
	char                                                         pad0xc_UQIOD[0xc];                                 // 0x304(0xc)
};


// Size 0x10 (Full Size[0x5d0] - InheritedSize[0x5c0]
class AIEmergentCaptainSpawner: public AIPerCrewSpawner
{
public:
	char                                                         pad0x8_2IRL8[0x8];                                 // 0x5c0(0x8)
	class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x5c8(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class RegionMapDataAsset: public DataAsset
{
public:
	struct RegionMapData                                         RegionData;                                        // 0x28(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipSize: public Object
{
public:
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class SpawnPhasedActorStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 SocketName;                                        // 0x80(0x8)
	struct QuestVariableActor                                    LocationVar;                                       // 0xa8(0x30)
	struct QuestVariableActor                                    ActorVar;                                          // 0xd8(0x30)
	bool                                                         bAttachToSocket;                                   // 0x108(0x1)
	char                                                         pad0x7_LI38T[0x7];                                 // 0x109(0x7)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class WaitForVaultOuterDoorClosedStep: public TaleQuestStep
{
public:
	class PuzzleVault*                                           Vault;                                             // 0x98(0x8)
	char                                                         pad0x8_AEKQR[0x8];                                 // 0xa0(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class CircleMapSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  CircleMapItemDescClass;                            // 0x38(0x10)
};


// Size 0x80 (Full Size[0x138] - InheritedSize[0xb8]
class EventFortTelemetryComponent: public ActorComponent
{
public:
	char                                                         pad0x80_ME0J9[0x80];                               // 0xb8(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpectacleMechanismInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class StatusResponseApplyStatusShipCurse: public StatusResponse
{
public:
	char                                                         ShipCurseTag;                                      // 0x38(0x1)
	char                                                         pad0x7_JLQJW[0x7];                                 // 0x39(0x7)
	struct Status                                                Status;                                            // 0x40(0x20)
};


// Size 0xc8 (Full Size[0x180] - InheritedSize[0xb8]
class TeleportLocationRetrievalComponent: public ActorComponent
{
public:
	TArray<struct TeleportLocation>                              TeleportLocations;                                 // 0xb8(0x10)
	char                                                         pad0xb8_V1O7I[0xb8];                               // 0xc8(0xb8)
};


// Size 0x120 (Full Size[0x1d8] - InheritedSize[0xb8]
class MigrationUIComponent: public ActorComponent
{
public:
	char                                                         pad0x10_XA65Q[0x10];                               // 0xb8(0x10)
	class MigrationUIContentsDataAsset*                          UIContentsDataAsset;                               // 0xc8(0x8)
	class CanvasRenderTarget2D*                                  TextRenderTarget;                                  // 0xd0(0x8)
	class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0xd8(0x8)
	char                                                         pad0xf8_2MFLI[0xf8];                               // 0xe0(0xf8)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class PlantAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	float                                                        WetCooldown;                                       // 0x98(0x4)
	float                                                        WetHealPerSecond;                                  // 0x9c(0x4)
	float                                                        RelativeWaterLevelToGetWet;                        // 0xa0(0x4)
	float                                                        RainStrengthToGetWet;                              // 0xa4(0x4)
	float                                                        WeakMovementSpeedMultiplier;                       // 0xa8(0x4)
	char                                                         pad0x4_83ZS2[0x4];                                 // 0xac(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NonVerbalRadialInventoryDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MaterialInformationService: public Object
{
public:
	char                                                         pad0x8_LDT42[0x8];                                 // 0x28(0x8)
	class DataTable*                                             MaterialTranslationTable;                          // 0x30(0x8)
	class DataTable*                                             MaterialAudioTable;                                // 0x38(0x8)
	class DataTable*                                             MaterialVFXTable;                                  // 0x40(0x8)
	char                                                         pad0x10_2QLWX[0x10];                               // 0x48(0x10)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_WaitForWieldBase: public BTTaskNode
{
public:
	bool                                                         WaitForUnstashed;                                  // 0x60(0x1)
	char                                                         pad0x7_PMIP4[0x7];                                 // 0x61(0x7)
};


// Size 0xf8 (Full Size[0x178] - InheritedSize[0x80]
class TaleQuestAssignContendedResourceStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableAssetArray                               RelevantResources;                                 // 0x80(0x30)
	struct QuestVariableVector                                   SelectionOriginPointVar;                           // 0xb0(0x30)
	struct QuestVariableTaleResourceHandle                       AllocatedResourceHandle;                           // 0xe0(0x30)
	struct QuestVariableAsset                                    AllocatedResource;                                 // 0x110(0x30)
	struct QuestVariableInt                                      AllocatedResourceIndex;                            // 0x140(0x30)
	char                                                         ResourceSelectionPolicy;                           // 0x170(0x1)
	char                                                         pad0x7_UKAVX[0x7];                                 // 0x171(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LookAtLocationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerNotificationsServiceInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class AthenaPlayModeLevelsDataAsset: public DataAsset
{
public:
	struct PlayModeLevelArray                                    PlayModeSpecificLevels;                            // 0x28(0x20)
	char                                                         pad0x60_ZUE4H[0x60];                               // 0x48(0x60)
	TArray<struct StringAssetReference>                          CommonLevels;                                      // 0xa8(0x10)
};


// Size 0xa0 (Full Size[0x1d8] - InheritedSize[0x138]
class PlantAIFormComponent: public AthenaAIFormComponent
{
public:
	char                                                         pad0x28_ENO2H[0x28];                               // 0x138(0x28)
	class ParticleSystem*                                        HealingParticlesTemplate;                          // 0x160(0x8)
	class WwiseEvent*                                            StartHealingAudioLoopEvent;                        // 0x168(0x8)
	class WwiseEvent*                                            StopHealingAudioLoopEvent;                         // 0x170(0x8)
	class ParticleSystem*                                        WeakParticlesTemplate;                             // 0x178(0x8)
	struct FName                                                 HealingShaderParamName;                            // 0x1a0(0x8)
	float                                                        IsNotHealingShaderParamValue;                      // 0x1a8(0x4)
	float                                                        IsHealingShaderParamValue;                         // 0x1ac(0x4)
	float                                                        ShaderParamBlendSpeed;                             // 0x1b0(0x4)
	bool                                                         IsWet;                                             // 0x1b4(0x1)
	bool                                                         IsWeak;                                            // 0x1b5(0x1)
	char                                                         pad0x2_XQ93I[0x2];                                 // 0x1b6(0x2)
	class ParticleSystemComponent*                               HealingParticleSystemComponent;                    // 0x1b8(0x8)
	class ParticleSystemComponent*                               WeakParticleSystemComponent;                       // 0x1c0(0x8)
	class MaterialInstanceDynamic*                               PlantDynamicMaterialInstance;                      // 0x1c8(0x8)
	char                                                         pad0x8_KZGHB[0x8];                                 // 0x1d0(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class BlockVolcanoTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	struct QuestVariableActor                                    ActorNearIsland;                                   // 0x28(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldedItemInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x408] - InheritedSize[0x3a0]
class CustomisationPreviewShip: public Actor
{
public:
	class ShipCustomizationInfo*                                 ShipCustomizationInfo;                             // 0x3a0(0x8)
	struct FName                                                 Category;                                          // 0x3a8(0x8)
	class ShipLiveryComponent*                                   LiveryComponent;                                   // 0x3b0(0x8)
	class ReplicatedShipPartCustomizationComponent*              HullLiveryCustomizationComponent;                  // 0x3b8(0x8)
	class ReplicatedShipPartCustomizationComponent*              SailsLiveryCustomizationComponent;                 // 0x3c0(0x8)
	class ReplicatedShipPartCustomizationComponent*              CannonEnchantmentCustomizationComponent;           // 0x3c8(0x8)
	class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	class ChildActorComponent*                                   MastChildActorComponent;                           // 0x3d8(0x8)
	class ChildActorComponent*                                   WheelChildActorComponent;                          // 0x3e0(0x8)
	class ChildActorComponent*                                   CapstanChildActorComponent;                        // 0x3e8(0x8)
	class ChildActorComponent*                                   CannonChildActorComponent;                         // 0x3f0(0x8)
	bool                                                         ShowParticles;                                     // 0x3f8(0x1)
	char                                                         pad0x3_MI5WB[0x3];                                 // 0x3f9(0x3)
	float                                                        ParticleWarmUpTime;                                // 0x3fc(0x4)
	char                                                         pad0x8_MCO1D[0x8];                                 // 0x400(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HidingInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xc8] - InheritedSize[0x98]
class TaleQuestSetVoyageBoarIslandStep: public TaleQuestStep
{
public:
	char                                                         pad0x18_6N3I3[0x18];                               // 0x98(0x18)
	class TaleQuestSetVoyageBoarIslandStepDesc*                  BoarIslandStepDesc;                                // 0xb0(0x8)
	char                                                         pad0x10_W4FHJ[0x10];                               // 0xb8(0x10)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class MastHinge: public Object
{
public:
	char                                                         pad0x48_65AKT[0x48];                               // 0x28(0x48)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class DamageableShipPartAudioParams: public DataAsset
{
public:
	class WwiseEvent*                                            DamageLevelEvent;                                  // 0x28(0x8)
	class WwiseObjectPoolWrapper*                                DamageLevelAudioPool;                              // 0x30(0x8)
	struct FName                                                 DamageLevelAudioSwitchName;                        // 0x38(0x8)
	TArray<struct Name>                                          DamageLevelAudioSwitchValues;                      // 0x40(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageTypeTutorialPrioritisedPromptsDataAsset: public DataAsset
{
public:
	TArray<struct VoyageTypePrioritisedPromptEntry>              PromptsPerVoyageType;                              // 0x28(0x10)
};


// Size 0x28 (Full Size[0x70] - InheritedSize[0x48]
class CameraPitchModifier: public CameraModifier
{
public:
	char                                                         pad0x28_J4MLA[0x28];                               // 0x48(0x28)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCIdAsset: public DataAsset
{
public:
	TArray<struct Name>                                          NPCIds;                                            // 0x28(0x10)
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class IslandEventComponent: public ActorComponent
{
public:
	class UClass*                                                EventType;                                         // 0xb8(0x8)
	struct Guid                                                  Id;                                                // 0xc0(0x10)
	char                                                         pad0x28_E5BPA[0x28];                               // 0xd0(0x28)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class GetNextQuestInChainStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVarTaleQuest                                     OutQuest;                                          // 0x80(0x30)
	struct QuestVariableBool                                     QuestChainFinished;                                // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_TargetPosition: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LeakableInterface: public Interface
{
public:
};


// Size 0xe8 (Full Size[0x110] - InheritedSize[0x28]
class PremiumCatalogLandingPageItemDataAsset: public DataAsset
{
public:
	struct Guid                                                  Id;                                                // 0x28(0x10)
	TArray<struct StringAssetReference>                          Images;                                            // 0x38(0x10)
	struct FText                                                 Title;                                             // 0x48(0x38)
	struct FText                                                 Description;                                       // 0x80(0x38)
	bool                                                         TimeLimited;                                       // 0xb8(0x1)
	bool                                                         TimeLimitedPrice;                                  // 0xb9(0x1)
	char                                                         pad0x2_RMGO1[0x2];                                 // 0xba(0x2)
	struct FName                                                 FeatureToggle;                                     // 0xc0(0x8)
	struct FName                                                 InverseFeatureToggle;                              // 0xc8(0x8)
	struct StringAssetReference                                  AccentImage;                                       // 0xd0(0x10)
	struct StringAssetReference                                  TopBannerImage;                                    // 0xe0(0x10)
	struct StringAssetReference                                  BottomBannerImage;                                 // 0xf0(0x10)
	struct FName                                                 IncludeForPromotion;                               // 0x100(0x8)
	struct FName                                                 ExcludeFromPromotion;                              // 0x108(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIInteractableOperatorInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x100] - InheritedSize[0x80]
class SetHiddenOnKeyTakenStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    CutsceneLockNPC;                                   // 0x80(0x30)
	struct QuestVariableActor                                    SequencerCutSceneActor;                            // 0xb0(0x30)
	class LevelSequence*                                         LevelSequence;                                     // 0xe0(0x8)
	struct FString                                               ActorName;                                         // 0xe8(0x10)
	bool                                                         Visible;                                           // 0xf8(0x1)
	char                                                         pad0x7_QWY9R[0x7];                                 // 0xf9(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnchantedLanternInterface: public Interface
{
public:
};


// Size 0x1a0 (Full Size[0x220] - InheritedSize[0x80]
class BuriedItemStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableClass                                    ItemType;                                          // 0x80(0x30)
	struct QuestVariableItemSpawnDataType                        ItemSpawnData;                                     // 0xb0(0x30)
	struct QuestVariableGuid                                     ItemId;                                            // 0xe0(0x30)
	float                                                        DigRadius;                                         // 0x110(0x4)
	char                                                         pad0x4_Y7C5Q[0x4];                                 // 0x114(0x4)
	struct QuestVariableActor                                    SpawnedItemInfo;                                   // 0x118(0x30)
	struct QuestVariablePlayerActor                              DiscoveringCharacter;                              // 0x148(0x30)
	bool                                                         NotifyParticipantsOfItemDiscovery;                 // 0x178(0x1)
	bool                                                         TrackBuriedItem;                                   // 0x179(0x1)
	bool                                                         MarkBuriedItemAsCritical;                          // 0x17a(0x1)
	bool                                                         MarkActorAsPhased;                                 // 0x17b(0x1)
	char                                                         pad0x4_BQYYX[0x4];                                 // 0x17c(0x4)
	struct FText                                                 CriticalActorLostMessage;                          // 0x180(0x38)
	struct QuestVariableClass                                    MarkerClass;                                       // 0x1b8(0x30)
	bool                                                         OverrideNumberOfDigs;                              // 0x1e8(0x1)
	char                                                         pad0x3_K4DUA[0x3];                                 // 0x1e9(0x3)
	int                                                          OverridenNumberOfDigs;                             // 0x1ec(0x4)
	struct QuestVariableInt                                      DigsiteID;                                         // 0x1f0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FaunaSpecies: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NamedPointsCollectionListDataAsset: public DataAsset
{
public:
	TArray<class NamedPointsCollectionDataAsset*>                SubAssets;                                         // 0x28(0x10)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SpawnPortalTaleStepDesc: public TaleQuestStepDesc
{
public:
	class PortalDesc*                                            PortalDesc;                                        // 0x80(0x8)
	struct QuestVariableActor                                    SpawnedPortal;                                     // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AICharacterRecoverMethod: public Object
{
public:
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InGameEventExclusionZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_T35ED[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PortalServiceParams: public DataAsset
{
public:
	float                                                        MinimumSpawnRangeInMeters;                         // 0x28(0x4)
	float                                                        MaximumSpawnRangeInMeters;                         // 0x2c(0x4)
	float                                                        PortalBoundsThreshold;                             // 0x30(0x4)
	char                                                         pad0x4_Y4UGE[0x4];                                 // 0x34(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShovelSurfaceHoleDataAsset: public DataAsset
{
public:
	TArray<struct SurfaceDigHole>                                SurfaceDigHoleClass;                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CombinationLockMechanismTriggerInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x468] - InheritedSize[0x3a0]
class PhasedGenericMarkerService: public Actor
{
public:
	char                                                         pad0x28_ZPYAT[0x28];                               // 0x3a0(0x28)
	TArray<struct CanvasWorldMapGeneric>                         GenericMarkers;                                    // 0x3c8(0x10)
	TArray<struct Guid>                                          RelevantCrewIds;                                   // 0x3d8(0x10)
	char                                                         pad0x80_2JCP6[0x80];                               // 0x3e8(0x80)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class AnimatedStepsComponent: public ActorComponent
{
public:
	class PoseableSkeletalMeshComponent*                         Mesh;                                              // 0xb8(0x8)
	TArray<class BoxComponent*>                                  Boxes;                                             // 0xc0(0x10)
	TArray<struct Vector>                                        BoxOrigins;                                        // 0xd0(0x10)
};


// Size 0xd0 (Full Size[0x188] - InheritedSize[0xb8]
class AthenaCharacterKnockbackComponent: public ActorComponent
{
public:
	char                                                         pad0x8_WOE7F[0x8];                                 // 0xb8(0x8)
	bool                                                         Disabled;                                          // 0xc0(0x1)
	char                                                         pad0x7_A48DJ[0x7];                                 // 0xc1(0x7)
	class AthenaCharacter*                                       Character;                                         // 0xc8(0x8)
	char                                                         pad0xb8_MVDV2[0xb8];                               // 0xd0(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageGeneratorSimFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class WaitOnCollectableQuestObjectStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    CollectableActor;                                  // 0x80(0x30)
	struct QuestVariablePlayerActor                              CollectingPlayerActor;                             // 0xb0(0x30)
};


// Size 0x2b8 (Full Size[0x2e0] - InheritedSize[0x28]
class AggressiveGhostShipDataAsset: public DataAsset
{
public:
	int                                                          NumSpawnLocationAngleAttempts;                     // 0x28(0x4)
	float                                                        HeightOffset;                                      // 0x2c(0x4)
	float                                                        MaxSplineRadiusInMetres;                           // 0x30(0x4)
	float                                                        DelayBeforeShootingAfterAppearing;                 // 0x34(0x4)
	float                                                        TimeToFadeOutBeforeDestroyingWhenKilled;           // 0x38(0x4)
	float                                                        TimeToFadeOutBeforeDestroyingWhenKilledWithSinkingAnimation; // 0x3c(0x4)
	float                                                        OnDeathPushBackExplosionDelay;                     // 0x40(0x4)
	float                                                        PitchSpeed;                                        // 0x44(0x4)
	float                                                        MaxPitch;                                          // 0x48(0x4)
	float                                                        RollSpeed;                                         // 0x4c(0x4)
	float                                                        MaxRoll;                                           // 0x50(0x4)
	float                                                        ForwardOffsetInMetresToAngleOffset;                // 0x54(0x4)
	float                                                        LowAccuracyTargetDistanceInMetres;                 // 0x58(0x4)
	float                                                        HighAccuracyTargetDistanceInMetres;                // 0x5c(0x4)
	float                                                        MinFormationSpawnDistanceFromPointsToAvoidInMetres; // 0x60(0x4)
	float                                                        MinFormationSpawnDistanceFromPlayersInMetres;      // 0x64(0x4)
	float                                                        SpawnOnTopOfPlayerDistanceAwayInMetres;            // 0x68(0x4)
	float                                                        MaxTargetAngle;                                    // 0x6c(0x4)
	float                                                        CannonTargetConeSideOffsetInMetres;                // 0x70(0x4)
	float                                                        ExtraDeadZoneInMetres;                             // 0x74(0x4)
	float                                                        ProjectileSpeed;                                   // 0x78(0x4)
	float                                                        ProjectileGravityScale;                            // 0x7c(0x4)
	float                                                        DistanceForShipToTravelToGetThroughPortalInMetres; // 0x80(0x4)
	char                                                         pad0x4_VZVA6[0x4];                                 // 0x84(0x4)
	class WwiseEvent*                                            CannonFireSfx;                                     // 0x88(0x8)
	class WwiseEvent*                                            SpawnSFX;                                          // 0x90(0x8)
	class WwiseEvent*                                            DespawnSFX;                                        // 0x98(0x8)
	class WwiseEvent*                                            DeathSfx;                                          // 0xa0(0x8)
	class WwiseEvent*                                            StartAmbientSfx;                                   // 0xa8(0x8)
	class WwiseEvent*                                            StopAmbientSfx;                                    // 0xb0(0x8)
	class WwiseEvent*                                            BeginOverlapOneShotSfx;                            // 0xb8(0x8)
	class WwiseEvent*                                            EndOverlapOneShotSfx;                              // 0xc0(0x8)
	class WwiseEvent*                                            OnMinesSpawnedSfx;                                 // 0xc8(0x8)
	class WwiseEvent*                                            OnBreakingSurfaceSfx;                              // 0xd0(0x8)
	class WwiseEvent*                                            OnDisappearingBelowSurfaceSfx;                     // 0xd8(0x8)
	class WwiseEvent*                                            OnSinkingSfx;                                      // 0xe0(0x8)
	class WwiseEvent*                                            CapstanDropLoopStart;                              // 0xe8(0x8)
	class WwiseEvent*                                            CapstanDropLoopStop;                               // 0xf0(0x8)
	class WwiseEvent*                                            CapstanHitWater;                                   // 0xf8(0x8)
	class WwiseObjectPoolWrapper*                                AmbientSfxPool;                                    // 0x100(0x8)
	class WwiseObjectPoolWrapper*                                CannonSfxPool;                                     // 0x108(0x8)
	class WwiseObjectPoolWrapper*                                CapstanSfxPool;                                    // 0x110(0x8)
	class Object*                                                CannonFireEffect;                                  // 0x118(0x8)
	class Object*                                                HealthIndicatorEffect;                             // 0x120(0x8)
	class Object*                                                DeathEffect;                                       // 0x128(0x8)
	struct Vector                                                DeathEffectOffset;                                 // 0x130(0xc)
	struct Rotator                                               DeathEffectRotation;                               // 0x13c(0xc)
	float                                                        DeathEffectFadeDelay;                              // 0x148(0x4)
	char                                                         pad0x4_QY16Q[0x4];                                 // 0x14c(0x4)
	struct WeightedProbabilityRangeOfRanges                      NearMissPlayerOffsetInMetres;                      // 0x150(0x30)
	struct WeightedProbabilityRangeOfRanges                      NearMissShipOffsetInMetres;                        // 0x180(0x30)
	struct WeightedProbabilityRangeOfRanges                      NearMissCannonRowboatOffsetInMetres;               // 0x1b0(0x30)
	struct WeightedProbabilityRangeOfRanges                      NearMissMermaidStatueOffsetInMetres;               // 0x1e0(0x30)
	struct WeightedProbabilityRangeOfRanges                      NearMissGenericExtraTargetOffsetInMetres;          // 0x210(0x30)
	float                                                        RandomShipPositionScale;                           // 0x240(0x4)
	char                                                         pad0x4_TGAH0[0x4];                                 // 0x244(0x4)
	struct WeightedProbabilityRangeOfRanges                      TimeBetweenShipDamage;                             // 0x248(0x30)
	struct WeightedProbabilityRangeOfRanges                      FormationForwardOffsetVarianceSpeed;               // 0x278(0x30)
	struct WeightedProbabilityRangeOfRanges                      FormationSidewaysOffsetVarianceSpeed;              // 0x2a8(0x30)
	class UClass*                                                WraithballProjectileType;                          // 0x2d8(0x8)
};


// Size 0x100 (Full Size[0x1b8] - InheritedSize[0xb8]
class CollectorsChestSlotEventDispatcherComponent: public ActorComponent
{
public:
	char                                                         pad0x100_I14QM[0x100];                             // 0xb8(0x100)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageLocationOnlyNamedIslandListDataAsset: public DataAsset
{
public:
	TArray<struct Name>                                          OnlyNamedIslandsList;                              // 0x28(0x10)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class StarChartVisualsDataAsset: public DataAsset
{
public:
	float                                                        DefaultStarPointEmissive;                          // 0x28(0x4)
	float                                                        GlowingStarPointEmissive;                          // 0x2c(0x4)
	struct LinearColor                                           DefaultStarPointColour;                            // 0x30(0x10)
	struct LinearColor                                           HighlightedStarPointColour;                        // 0x40(0x10)
	struct LinearColor                                           SelectedStarPointColour;                           // 0x50(0x10)
	struct LinearColor                                           ActivatedStarPointColour;                          // 0x60(0x10)
	struct LinearColor                                           DeselectedStarPointColour;                         // 0x70(0x10)
	struct LinearColor                                           ConnectorColour;                                   // 0x80(0x10)
	float                                                        EndOfHighlightDuration;                            // 0x90(0x4)
	float                                                        ErrorDuration;                                     // 0x94(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TaleBlockedByFactionDataAsset: public DataAsset
{
public:
	TArray<struct Name>                                          BlockedCampaignId;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpotlightMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ModifyTrackedActorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventSchedulerServiceInterface: public Interface
{
public:
};


// Size 0x1e0 (Full Size[0x580] - InheritedSize[0x3a0]
class ItemPreviewActor: public Actor
{
public:
	char                                                         pad0x10_UD6L1[0x10];                               // 0x3a0(0x10)
	struct ItemPreviewView                                       CurrentView;                                       // 0x3b0(0x18)
	char                                                         pad0xa0_7BDMG[0xa0];                               // 0x3c8(0xa0)
	TArray<class SceneComponent*>                                CameraLocations;                                   // 0x468(0x10)
	class AnimationAsset*                                        PendingAnim;                                       // 0x478(0x8)
	char                                                         pad0x20_L40DM[0x20];                               // 0x480(0x20)
	class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x4a0(0x8)
	class AnimationAsset*                                        DefaultAnimation;                                  // 0x4a8(0x8)
	struct ObjectMessagingHandle                                 PreviewReadyEventHandle;                           // 0x4c8(0x58)
	struct ObjectMessagingHandle                                 PreviewBusyEventHandle;                            // 0x520(0x58)
	float                                                        SpinItemRate;                                      // 0x578(0x4)
	char                                                         pad0x4_O5HQ4[0x4];                                 // 0x57c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelWorldConfigInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BountyQuestSkeletonLordInfoData: public DataAsset
{
public:
	TArray<struct SkeletonLordInfo>                              SkeletonLordInfos;                                 // 0x28(0x10)
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class PuzzleStatueBase: public Actor
{
public:
	char                                                         pad0x10_QX7NT[0x10];                               // 0x3a0(0x10)
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3b0(0x8)
	class PuzzleStatueInteractableComponent*                     InteractableComponent;                             // 0x3b8(0x8)
	class LockComponent*                                         LockComponent;                                     // 0x3c0(0x8)
	bool                                                         IsStatueDisabled;                                  // 0x3c8(0x1)
	bool                                                         IsStatueActive;                                    // 0x3c9(0x1)
	char                                                         pad0x2_KNDS4[0x2];                                 // 0x3ca(0x2)
	float                                                        MinDamageToTriggerStatue;                          // 0x3cc(0x4)
	char                                                         pad0x8_J5JKZ[0x8];                                 // 0x3d0(0x8)
	class PuzzleStatueBaseAudioParamsDataAsset*                  PuzzleStatueBaseAudioParams;                       // 0x3d8(0x8)
	class PuzzleStatueVFXComponent*                              PuzzleStatueVFXComponent;                          // 0x3e0(0x8)
	class ParticleSystemComponent*                               LockPositionParticleSystem;                        // 0x3e8(0x8)
	class ParticleSystemComponent*                               OneShotLockPositionParticleSystem;                 // 0x3f0(0x8)
	char                                                         pad0x28_9OYXO[0x28];                               // 0x3f8(0x28)
};


// Size 0x28 (Full Size[0xb0] - InheritedSize[0x88]
class BTTask_ClearReapersTributeIslandTarget: public BTTask_BlackboardBase
{
public:
	struct BlackboardKeySelector                                 IslandTargetKey;                                   // 0x88(0x28)
};


// Size 0x110 (Full Size[0x4b0] - InheritedSize[0x3a0]
class PreviewShip: public Actor
{
public:
	char                                                         pad0x10_EECTL[0x10];                               // 0x3a0(0x10)
	class SceneComponent*                                        Root;                                              // 0x3b0(0x8)
	class ShipLiveryComponent*                                   LiveryComponent;                                   // 0x3b8(0x8)
	class ReplicatedShipPartCustomizationComponent*              HullLiveryCustomizationComponent;                  // 0x3c0(0x8)
	class ReplicatedShipPartCustomizationComponent*              SailsLiveryCustomizationComponent;                 // 0x3c8(0x8)
	class ChildActorComponent*                                   ShipFireCellDataContainer;                         // 0x3d0(0x8)
	class UClass*                                                FirePropagationBlueprint;                          // 0x3d8(0x8)
	struct StringAssetReference                                  ShipPersistenceIdentifier;                         // 0x3e0(0x10)
	class ShipFirePropagationComponent*                          FirePropagationComponent;                          // 0x3f0(0x8)
	char                                                         pad0xb8_G9PH9[0xb8];                               // 0x3f8(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemReactionItemProxyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AudioVisualiserHudComponentInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class BTService_DetermineEngageTarget: public BTService
{
public:
	struct BlackboardKeySelector                                 BlockChangeEngageOptionKey;                        // 0x70(0x28)
	char                                                         pad0x10_OSPX9[0x10];                               // 0x98(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class HarpoonItemLocationComponent: public ActorComponent
{
public:
	char                                                         Id;                                                // 0xb8(0x1)
	char                                                         pad0x7_R1JLL[0x7];                                 // 0xb9(0x7)
	TArray<struct Vector>                                        ItemLocationsForHarpoon;                           // 0xc0(0x10)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BTTask_CharacterRotateToFaceBBEntry: public BTTask_RotateToFaceBBEntry
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedGoldRewardsDataAsset: public DataAsset
{
public:
	TArray<struct WeightedGoldReward>                            GoldRewards;                                       // 0x28(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class NetworkTriggeredVFXComponent: public ActorComponent
{
public:
	TArray<class Object*>                                        NetworkTriggerableVFX;                             // 0xb8(0x10)
	class ParticleSystemComponent*                               CurrentlyPlayingParticleSystem;                    // 0xc8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileWeaponFiringIntentionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadItemActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionEastNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamethrowerControllerInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class ImpactDataAsset: public DataAsset
{
public:
	class MaterialInterface*                                     DecalMaterial;                                     // 0x28(0x8)
	TArray<class Class*>                                         DecalParamModifiers;                               // 0x30(0x10)
	struct Vector                                                DecalSize;                                         // 0x40(0xc)
	float                                                        FadeScreenSize;                                    // 0x4c(0x4)
	float                                                        DecalLifetime;                                     // 0x50(0x4)
	char                                                         pad0x4_X30NS[0x4];                                 // 0x54(0x4)
	class Object*                                                Particles;                                         // 0x58(0x8)
	class Object*                                                TriggeredForClientParticles;                       // 0x60(0x8)
	float                                                        FirstParticleEffectCustomParameter;                // 0x68(0x4)
	struct Color                                                 FirstParticleEffectColorTint;                      // 0x6c(0x4)
	class Object*                                                SplashParticles;                                   // 0x70(0x8)
	float                                                        MaxDepthForSplash;                                 // 0x78(0x4)
	char                                                         ParticlesVfxRegion;                                // 0x7c(0x1)
	char                                                         pad0x3_WO278[0x3];                                 // 0x7d(0x3)
	class WwiseEvent*                                            WwiseEvent;                                        // 0x80(0x8)
	class WwiseEvent*                                            WwiseEventLayer;                                   // 0x88(0x8)
	class WwiseObjectPoolWrapper*                                WwiseObjectPool;                                   // 0x90(0x8)
	struct Vector                                                EmitterOffset;                                     // 0x98(0xc)
	bool                                                         ParticleSystemIsPerPoint;                          // 0xa4(0x1)
	bool                                                         AttachToPlayer;                                    // 0xa5(0x1)
	bool                                                         EnableUnderWaterImpact;                            // 0xa6(0x1)
	char                                                         pad0x1_Z3ZWU[0x1];                                 // 0xa7(0x1)
	TArray<struct ImpactDataParticleParams>                      AdditionalParticleImpactData;                      // 0xa8(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SkullOfSirenSongStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLoadoutControlInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ProjectileServiceDataAsset: public DataAsset
{
public:
	char                                                         MaxTrails;                                         // 0x28(0x1)
	char                                                         pad0x3_XVWHT[0x3];                                 // 0x29(0x3)
	float                                                        DefaultTrailDistance;                              // 0x2c(0x4)
	float                                                        DefaultTrailFalloff;                               // 0x30(0x4)
	char                                                         pad0x4_WXJ8Z[0x4];                                 // 0x34(0x4)
	class StaticMesh*                                            TrailsMesh;                                        // 0x38(0x8)
	class MaterialInterface*                                     Material;                                          // 0x40(0x8)
	TArray<struct ProjectileHitScanPerWeaponMeshPairings>        HitScanPerWeaponMeshPairings;                      // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIWaveBeaconInterface: public Interface
{
public:
};


// Size 0x160 (Full Size[0x500] - InheritedSize[0x3a0]
class AnimatedMechanismAction: public Actor
{
public:
	char                                                         pad0x20_5L3HR[0x20];                               // 0x3a0(0x20)
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3c0(0x8)
	float                                                        Delay;                                             // 0x3c8(0x4)
	float                                                        NetDelay;                                          // 0x3cc(0x4)
	bool                                                         AnimateOnServer;                                   // 0x3d0(0x1)
	bool                                                         OnlyAnimateOnServerWhenActorsOverlapInteractionZone; // 0x3d1(0x1)
	char                                                         pad0x6_HNVBK[0x6];                                 // 0x3d2(0x6)
	class UClass*                                                MaterialGroup;                                     // 0x3d8(0x8)
	struct AnimatedMechanismActionState                          State;                                             // 0x408(0x18)
	struct WwiseEmitter                                          Emitter;                                           // 0x420(0x20)
	char                                                         pad0xc0_KI9GH[0xc0];                               // 0x440(0xc0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPreviewDataInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookingAtWieldableCycleBackwardsNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyDReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ForceFeedbackCondition_LastPlayerToFeedPet: public ForceFeedbackCondition
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class BlowdartCreationComponent: public ActorComponent
{
public:
	class UClass*                                                ItemToSpawn;                                       // 0xb8(0x8)
	class ItemInfo*                                              SpawnedItemInfo;                                   // 0xc0(0x8)
	float                                                        ImpactOffsetScale;                                 // 0xc8(0x4)
	float                                                        RandomAngleRange;                                  // 0xcc(0x4)
	float                                                        ProxyZOffset;                                      // 0xd0(0x4)
	char                                                         pad0x1c_MN202[0x1c];                               // 0xd4(0x1c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObjectUtilities: public BlueprintFunctionLibrary
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class TeleportCommandSettings: public DataAsset
{
public:
	TArray<struct Name>                                          TeleportPlayerExcludedIslands;                     // 0x28(0x10)
	TArray<struct Name>                                          TeleportShipExcludedIslands;                       // 0x38(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class MermaidSuppressionStatus: public StatusBase
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class CaptainsVoyageRecipesDebugMenuGenerator: public DebugMenuEntryGenerator
{
public:
	bool                                                         Regenerate;                                        // 0x28(0x1)
	char                                                         pad0x7_TD164[0x7];                                 // 0x29(0x7)
	TArray<struct StringClassReference>                          Proposals;                                         // 0x30(0x10)
	TArray<String>                                               AssetNames;                                        // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TornMapCollectionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonAnimInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GrantPagesStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterFootImpactInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyNPCInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseRudderDynamicsDesc: public DataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateIdentityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WalletComponentInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestAssignContendedResourceStep: public TaleQuestStep
{
public:
	class TaleQuestAssignContendedResourceStepDesc*              StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerRepresentationInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class HitRegSnapshotService: public Actor
{
public:
	char                                                         pad0x10_XVOBH[0x10];                               // 0x3a0(0x10)
	bool                                                         SnapshotsEnabled;                                  // 0x3b0(0x1)
	char                                                         pad0x7_XXDQG[0x7];                                 // 0x3b1(0x7)
	TArray<class HitRegSnapshotComponent*>                       ActiveSnapshotComponents;                          // 0x3b8(0x10)
	bool                                                         PlayerHitScanEnabled;                              // 0x3c8(0x1)
	char                                                         pad0xf_6KL80[0xf];                                 // 0x3c9(0xf)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class CompanyService: public Object
{
public:
	char                                                         pad0x10_7QRCW[0x10];                               // 0x28(0x10)
	TArray<class CompanyData*>                                   CompanyData;                                       // 0x38(0x10)
	char                                                         pad0x50_3P4IA[0x50];                               // 0x48(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationWieldedItemFunctions: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ReapersTributeCutsceneDataAsset: public DataAsset
{
public:
	class UClass*                                                SequencerCutSceneActor;                            // 0x28(0x8)
	float                                                        CutsceneDelayInSeconds;                            // 0x30(0x4)
	char                                                         pad0x4_NZ94Q[0x4];                                 // 0x34(0x4)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class ShipSinkingParametersDataAsset: public DataAsset
{
public:
	struct SinkingShipParams                                     SinkingParameters;                                 // 0x28(0x38)
	struct BuoyancySampleMovement                                SinkingBuoyancySettings;                           // 0x60(0x68)
};


// Size 0xa8 (Full Size[0x3e0] - InheritedSize[0x338]
class ActorCoherentViewComponent: public CoherentUIGTComponent
{
public:
	char                                                         pad0xa0_QRY1H[0xa0];                               // 0x338(0xa0)
	struct FName                                                 TargetPrimitiveName;                               // 0x3d8(0x8)
};


// Size 0x28 (Full Size[0x88] - InheritedSize[0x60]
class AnimNotifyState_AthenaTimedParticleEffect: public AnimNotifyState_TimedParticleEffect
{
public:
	struct Vector                                                RelativeScale;                                     // 0x60(0xc)
	struct LinearColor                                           ColorTint;                                         // 0x6c(0x10)
	float                                                        CustomParameter;                                   // 0x7c(0x4)
	bool                                                         Attached;                                          // 0x80(0x1)
	bool                                                         KeepWorldScale;                                    // 0x80(0x1)
	char                                                         pad0x3_B7OIY[0x3];                                 // 0x81(0x3)
	char                                                         UnderwaterMode;                                    // 0x84(0x1)
	char                                                         CustomLocalSpaceMode;                              // 0x85(0x1)
	char                                                         pad0x2_J5UEM[0x2];                                 // 0x86(0x2)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class TaleQuestStructGenServiceDesc: public TaleQuestServiceDesc
{
public:
	struct TQStructGenParams                                     Params;                                            // 0x28(0x78)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class WieldableMock: public Object
{
public:
	char                                                         pad0x38_UDXSO[0x38];                               // 0x28(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StormServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class StatusResponseShipCurseFX: public StatusResponse
{
public:
	struct ShipCurseFXData                                       CurseFXData;                                       // 0x38(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FireChargedAttackAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class IslandEventType: public Object
{
public:
	struct IslandEventIcons                                      IslandIcons;                                       // 0x28(0x10)
	struct IslandEventIcons                                      HeaderIcons;                                       // 0x38(0x10)
};


// Size 0x78 (Full Size[0x130] - InheritedSize[0xb8]
class CannonRecoilComponent: public ActorComponent
{
public:
	float                                                        RecoilForce;                                       // 0xb8(0x4)
	char                                                         pad0x4_0DLSK[0x4];                                 // 0xbc(0x4)
	class CurveFloat*                                            YawToRecoilForceModifierCurve;                     // 0xc0(0x8)
	bool                                                         IgnoreRecoilIfAttachedToParent;                    // 0xc8(0x1)
	char                                                         pad0x67_VGWI9[0x67];                               // 0xc9(0x67)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaitingToSpawnActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCMeshRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedNPCInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InvasionDepartureTunnelTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0xe0 (Full Size[0x198] - InheritedSize[0xb8]
class WorldMarkerManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_I2D7R[0x8];                                 // 0xb8(0x8)
	TArray<struct MarkerVariantDesc>                             MarkerVariants;                                    // 0xc0(0x10)
	TArray<struct FeatureToggledMarkerVariants>                  FeatureToggledMarkerVariants;                      // 0xd0(0x10)
	TArray<class BaseWorldMarker*>                               MarkerDataObjects;                                 // 0xe0(0x10)
	TArray<struct ClientMarkerRepresentation>                    ClientMarkerRepresentations;                       // 0xf0(0x10)
	char                                                         pad0x98_9BSLA[0x98];                               // 0x100(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_MojoClaude: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class UniversalDescriptorService: public Object
{
public:
	char                                                         pad0x38_D1VIA[0x38];                               // 0x28(0x38)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelInPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState: public Object
{
public:
};


// Size 0x28 (Full Size[0xa0] - InheritedSize[0x78]
class FireBreathAIAbility: public AthenaAIAbility
{
public:
	class Pawn*                                                  Owner;                                             // 0x78(0x8)
	class FireBreathAIAbilityParams*                             SetupAbilityParams;                                // 0x80(0x8)
	class StatusEffectOverlapZone*                               FireBreathEmitter;                                 // 0x88(0x8)
	class VFXSpawnerComponent*                                   FireVFX;                                           // 0x90(0x8)
	char                                                         pad0x8_G3HUI[0x8];                                 // 0x98(0x8)
};


// Size 0x48 (Full Size[0x3e8] - InheritedSize[0x3a0]
class AggressiveGhostShipPortal: public Actor
{
public:
	char                                                         pad0x38_WZ2TA[0x38];                               // 0x3a0(0x38)
	float                                                        OpenDuration;                                      // 0x3d8(0x4)
	float                                                        ClosingDuration;                                   // 0x3dc(0x4)
	char                                                         pad0x8_WCORC[0x8];                                 // 0x3e0(0x8)
};


// Size 0x90 (Full Size[0x128] - InheritedSize[0x98]
class WaitForNPCDialogOptionEventStep: public TaleQuestStep
{
public:
	class WaitForNPCDialogOptionEventStepDesc*                   Desc;                                              // 0x98(0x8)
	class Actor*                                                 ActorVar;                                          // 0xa0(0x8)
	char                                                         pad0x80_N03JN[0x80];                               // 0xa8(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeAttackProcessorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmblemServiceInterface: public Interface
{
public:
};


// Size 0xf0 (Full Size[0x1a8] - InheritedSize[0xb8]
class PlayerNonVerbalComponent: public ActorComponent
{
public:
	char                                                         pad0xf0_FFHST[0xf0];                               // 0xb8(0xf0)
};


// Size 0xb8 (Full Size[0x170] - InheritedSize[0xb8]
class GamertagProviderHudComponent: public ActorComponent
{
public:
	char                                                         pad0xb8_IKPN1[0xb8];                               // 0xb8(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockingPolicyDefinition: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleQuestToolServiceDesc: public TaleQuestServiceDesc
{
public:
	bool                                                         GiveToolsOnStart;                                  // 0x28(0x1)
	char                                                         pad0x7_VE4OQ[0x7];                                 // 0x29(0x7)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class MetalAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	float                                                        WetCooldown;                                       // 0x98(0x4)
	float                                                        WetMovementSpeedMultiplier;                        // 0x9c(0x4)
	float                                                        RelativeWaterLevelToGetWet;                        // 0xa0(0x4)
	float                                                        RainStrengthToGetWet;                              // 0xa4(0x4)
	TArray<struct MetalAIFormRustyDamageResponse>                RustyDamageResponses;                              // 0xa8(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class GuildEmoteLoadoutDataAsset: public DataAsset
{
public:
	TArray<struct EmoteData>                                     GuildEmoteData;                                    // 0x28(0x10)
	TArray<class Class*>                                         GuildEmoteDesc;                                    // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCConversationParticipantInterface: public Interface
{
public:
};


// Size 0x128 (Full Size[0x1e0] - InheritedSize[0xb8]
class ProjectileWeaponQSDebugComponent: public ActorComponent
{
public:
	char                                                         pad0x18_IN507[0x18];                               // 0xb8(0x18)
	TArray<struct QuickSwitchDebugWeaponData>                    DebugData;                                         // 0xd0(0x10)
	char                                                         pad0x100_QVAV0[0x100];                             // 0xe0(0x100)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraFunctionLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class AlwaysRelevantLightweightActor: public Actor
{
public:
	class Actor*                                                 OwningActor;                                       // 0x3a0(0x8)
};


// Size 0x60 (Full Size[0x4a0] - InheritedSize[0x440]
class OpenableItemAnimationInstance: public AnimInstance
{
public:
	class AnimSequence*                                          ClosedTransitionAnim;                              // 0x440(0x8)
	class AnimSequence*                                          ClosedLoopAnim;                                    // 0x448(0x8)
	class AnimSequence*                                          OpenTransitionAnim;                                // 0x450(0x8)
	class AnimSequence*                                          FirstOpenTransitionAnim;                           // 0x458(0x8)
	class AnimSequence*                                          OpenLoopAnim;                                      // 0x460(0x8)
	float                                                        BlendInTime;                                       // 0x468(0x4)
	float                                                        BlendOutTime;                                      // 0x46c(0x4)
	class AnimMontage*                                           CurrentMontage;                                    // 0x470(0x8)
	class AnimSequence*                                          NextAnim;                                          // 0x478(0x8)
	char                                                         CurrentAnimOpenState;                              // 0x480(0x1)
	char                                                         pad0x1f_BE7SA[0x1f];                               // 0x481(0x1f)
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class UsableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_6HZEK[0x8];                                 // 0xb8(0x8)
	struct WieldableItemActionVisuals                            ActionVisuals;                                     // 0xc0(0x18)
	TArray<struct ActionVisualsOverride>                         ActionVisualOverrides;                             // 0xd8(0x10)
	char                                                         pad0x8_63WAC[0x8];                                 // 0xe8(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class StatusResponseToggleInteractionPoint: public StatusResponse
{
public:
	TArray<class Class*>                                         InteractionPointClasses;                           // 0x38(0x10)
	char                                                         ShipCurseTag;                                      // 0x48(0x1)
	char                                                         CurseTag;                                          // 0x49(0x1)
	char                                                         pad0x6_HQE95[0x6];                                 // 0x4a(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_AllPlayerCharactersOnIsland: public EnvQueryContext
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseForceFeedback: public StatusResponse
{
public:
	class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x38(0x8)
};


// Size 0x70 (Full Size[0x128] - InheritedSize[0xb8]
class AudioVisualiserHudComponent: public ActorComponent
{
public:
	char                                                         pad0x10_9C5ZH[0x10];                               // 0xb8(0x10)
	TArray<struct HoopData>                                      Hoops;                                             // 0xc8(0x10)
	char                                                         pad0x50_O4H27[0x50];                               // 0xd8(0x50)
};


// Size 0x288 (Full Size[0x340] - InheritedSize[0xb8]
class BuoyancyComponent: public ActorComponent
{
public:
	char                                                         pad0x8_BAGUS[0x8];                                 // 0xb8(0x8)
	struct WaterBuoyancy                                         BuoyancyParams;                                    // 0xc0(0x140)
	struct BuoyancyComponentSinkingParams                        SinkingParams;                                     // 0x200(0x34)
	struct BuoyancyComponentLockToSurfaceParams                  LockToSurfaceParams;                               // 0x234(0x1c)
	struct BuoyancyComponentExclusionParams                      ExclusionParams;                                   // 0x250(0x8)
	bool                                                         DoClientSideSim;                                   // 0x258(0x1)
	char                                                         pad0x97_AFYD9[0x97];                               // 0x259(0x97)
	class PrimitiveComponent*                                    VisibleMesh;                                       // 0x2f0(0x8)
	char                                                         pad0x20_MYDWL[0x20];                               // 0x2f8(0x20)
	float                                                        ChoppinessScalar;                                  // 0x318(0x4)
	char                                                         pad0x1c_XKF27[0x1c];                               // 0x31c(0x1c)
	char                                                         State;                                             // 0x338(0x1)
	char                                                         pad0x7_5P3NJ[0x7];                                 // 0x339(0x7)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class BeckonGestureDataAsset: public DataAsset
{
public:
	class AnimSequence*                                          BeckonAnimation;                                   // 0x28(0x8)
};


// Size 0x138 (Full Size[0x4d8] - InheritedSize[0x3a0]
class HauntedFortTarget: public Actor
{
public:
	char                                                         pad0x30_Z39G2[0x30];                               // 0x3a0(0x30)
	class SceneComponent*                                        RootSceneComponent;                                // 0x3d0(0x8)
	class MaterialManipulationComponent*                         MaterialManipulationComponent;                     // 0x3d8(0x8)
	class StaticMeshComponent*                                   BaseMesh;                                          // 0x3e0(0x8)
	class OptInDamageableComponent*                              DamageableComp;                                    // 0x3e8(0x8)
	float                                                        Health;                                            // 0x3f0(0x4)
	float                                                        MaxHealth;                                         // 0x3f4(0x4)
	float                                                        HealthEachShotRemoves;                             // 0x3f8(0x4)
	bool                                                         Interactable;                                      // 0x3fc(0x1)
	bool                                                         Destroyed;                                         // 0x3fd(0x1)
	char                                                         pad0x2_EL015[0x2];                                 // 0x3fe(0x2)
	TArray<struct Name>                                          DamagePositionParameterNames;                      // 0x400(0x10)
	float                                                        MinHoleSize;                                       // 0x410(0x4)
	float                                                        MaxHoleSize;                                       // 0x414(0x4)
	float                                                        MinMultiHoleSize;                                  // 0x418(0x4)
	float                                                        MaxMultiHoleSize;                                  // 0x41c(0x4)
	float                                                        NearEnoughToBeConsideredTheSameLocationDistance;   // 0x420(0x4)
	char                                                         pad0x4_7DLY9[0x4];                                 // 0x424(0x4)
	TArray<struct ImpactLocationData>                            ImpactLocations;                                   // 0x428(0x10)
	char                                                         pad0xa0_WD7OI[0xa0];                               // 0x438(0xa0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismVirtualSceneComponentTransformInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventServiceParams: public DataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PortalInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class RammerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_LZKRO[0x8];                                 // 0xb8(0x8)
	class UClass*                                                DamagerType;                                       // 0xc0(0x8)
	class UClass*                                                RammerType;                                        // 0xc8(0x8)
	char                                                         pad0x10_XU4YQ[0x10];                               // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterBarrelActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlashbangEffectInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingEffectsDataAsset: public DataAsset
{
public:
	TArray<struct ItemDiggingEffectsOverride>                    EffectsOverrides;                                  // 0x28(0x10)
	class ItemDiggingEffectsConfig*                              Default;                                           // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HideoutServiceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class WorldMapIslandDataAsset: public DataAsset
{
public:
	class Texture*                                               Texture;                                           // 0x28(0x8)
	struct WorldMapIslandDataCaptureParams                       CaptureParams;                                     // 0x30(0x40)
	float                                                        LabelOffset;                                       // 0x70(0x4)
	char                                                         pad0x4_0BW44[0x4];                                 // 0x74(0x4)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class BountyMapLayout: public DataAsset
{
public:
	struct TreasureMapWidgetText                                 Location;                                          // 0x28(0x3c)
	char                                                         pad0x4_EIH5U[0x4];                                 // 0x64(0x4)
	TArray<struct TreasureMapWidgetText>                         Descriptions;                                      // 0x68(0x10)
	TArray<struct BountyMapLayoutTarget>                         Targets;                                           // 0x78(0x10)
	TArray<struct TreasureMapWidgetTexture>                      Images;                                            // 0x88(0x10)
	TArray<struct TreasureMapWidgetLocalisedText>                GeneralText;                                       // 0x98(0x10)
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class ActorActivationComponent: public ActorComponent
{
public:
	char                                                         pad0x8_A36PF[0x8];                                 // 0xb8(0x8)
	float                                                        ActivationDuration;                                // 0xc0(0x4)
	float                                                        DeactivationDuration;                              // 0xc4(0x4)
	bool                                                         AutoDestroyOnDeactivation;                         // 0xc8(0x1)
	char                                                         pad0x7_WGY4G[0x7];                                 // 0xc9(0x7)
	char                                                         pad0x48_9BPAR[0x48];                               // 0xd0(0x48)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class GhostShipLighthouseBeamDamageComponent: public ActorComponent
{
public:
	char                                                         pad0x8_9KQNK[0x8];                                 // 0xb8(0x8)
	float                                                        TakingDamageIntervalInSeconds;                     // 0xc0(0x4)
	float                                                        SphereRadius;                                      // 0xc4(0x4)
	class ParticleSystem*                                        HitParticleEffectSystem;                           // 0xc8(0x8)
	char                                                         pad0x18_G562V[0x18];                               // 0xd0(0x18)
};


// Size 0x100 (Full Size[0x6c0] - InheritedSize[0x5c0]
class MechanismInteractionComponent: public ShapeComponent
{
public:
	bool                                                         UseSimpleAsComplex;                                // 0x5c0(0x1)
	char                                                         ShapeType;                                         // 0x5c1(0x1)
	char                                                         pad0x2_9W3T6[0x2];                                 // 0x5c2(0x2)
	float                                                        SphereRadius;                                      // 0x5c4(0x4)
	struct Vector                                                BoxExtent;                                         // 0x5c8(0xc)
	char                                                         pad0x4_H9YN3[0x4];                                 // 0x5d4(0x4)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x5d8(0x10)
	TArray<Class>                                                PawnTypeExclusionList;                             // 0x5e8(0x10)
	TArray<class PrimitiveComponent*>                            ComplexCollisionShapes;                            // 0x668(0x10)
	char                                                         pad0x48_NLS8G[0x48];                               // 0x678(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportLocationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NameplateVisibilityOverrideInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x88] - InheritedSize[0x60]
class PortalTaleService: public TaleQuestService
{
public:
	class PortalTaleServiceDesc*                                 Desc;                                              // 0x60(0x8)
	char                                                         pad0x20_O3S0A[0x20];                               // 0x68(0x20)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShovelSurfaceFxDataAsset: public DataAsset
{
public:
	TArray<struct DigSurfaceTypeParams>                          SurfaceParams;                                     // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObstacleCourseInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CosmeticVfxInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class PirateLegendSectionBundle: public DataAsset
{
public:
	struct FName                                                 FeatureName;                                       // 0x28(0x8)
	TArray<struct PLSectionBundleEntry>                          Entries;                                           // 0x30(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryInteractReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class ItemPreviewDataObject: public Object
{
public:
	char                                                         pad0x8_51J25[0x8];                                 // 0x28(0x8)
	struct StringAssetReference                                  RequestedAssetReference;                           // 0x30(0x10)
	struct StringAssetReference                                  CurrentPreviewAssetReference;                      // 0x48(0x10)
	char                                                         pad0x78_GJURK[0x78];                               // 0x58(0x78)
};


// Size 0x8 (Full Size[0x78] - InheritedSize[0x70]
class AthenaPhysicalMaterial: public PhysicalMaterial
{
public:
	bool                                                         BlockPortableHarpoonGrapple;                       // 0x70(0x1)
	char                                                         pad0x7_P79AH[0x7];                                 // 0x71(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PursuitCircleAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x68 (Full Size[0x408] - InheritedSize[0x3a0]
class SharedObjectReplicationService: public Actor
{
public:
	char                                                         pad0x58_GIQW4[0x58];                               // 0x3a0(0x58)
	TArray<class Object*>                                        RepArray;                                          // 0x3f8(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleAddStormAvoidanceAreaStep: public TaleQuestStep
{
public:
};


// Size 0x1cf8 (Full Size[0x1d20] - InheritedSize[0x28]
class AthenaAnimationsGroupingAssetBase: public DataAsset
{
public:
	class UClass*                                                ItemId;                                            // 0x28(0x8)
	struct AthenaAnimationAsyncLoadedFishingAnimations           FishingAnimations;                                 // 0x30(0x1e0)
	struct AthenaAnimationAsyncLoadedBaseItemAnimations          ItemAnimations;                                    // 0x210(0x1218)
	struct AthenaAnimationAsyncLoadedLocomotionAnimations        LocomotionAnimations;                              // 0x1428(0x100)
	struct AthenaAnimationAsyncLoadedObjectJumpingAnimations     JumpingAnimations;                                 // 0x1528(0x80)
	struct AthenaAnimationAsyncLoadedObjectIdleAnimations        IdleAnimations;                                    // 0x15a8(0x60)
	struct AthenaAnimationPersistentItemAnimations               PersistentLoadedAnimations;                        // 0x1628(0x690)
	char                                                         pad0x8_GLUZ3[0x8];                                 // 0x1cb8(0x8)
	struct WieldAnimationParams                                  Params;                                            // 0x1cc0(0x40)
	bool                                                         RangedWeapon;                                      // 0x1d00(0x1)
	bool                                                         UseAlternateAsTransition;                          // 0x1d01(0x1)
	char                                                         pad0x2_BBGZ1[0x2];                                 // 0x1d02(0x2)
	float                                                        MinimumFOV;                                        // 0x1d04(0x4)
	struct FeatureFlag                                           FeatureToggle;                                     // 0x1d08(0xc)
	char                                                         pad0xc_BFAZM[0xc];                                 // 0x1d14(0xc)
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class LockOnCameraModifier: public CameraModifier
{
public:
	class LockOnCameraModifierSettings*                          Settings;                                          // 0x48(0x8)
	bool                                                         IsYawLocked;                                       // 0x50(0x1)
	bool                                                         OwnerInputsIgnored;                                // 0x51(0x1)
	char                                                         pad0x6_YE4X7[0x6];                                 // 0x52(0x6)
	class Actor*                                                 TargetActor;                                       // 0x58(0x8)
	char                                                         pad0x18_JNAK1[0x18];                               // 0x60(0x18)
};


// Size 0x218 (Full Size[0x240] - InheritedSize[0x28]
class AggressiveGhostShipDifficultyDataAsset: public DataAsset
{
public:
	struct WeightedProbabilityRange                              NumShotsToDestroyShip;                             // 0x28(0x20)
	float                                                        PersistentDamageScale;                             // 0x48(0x4)
	char                                                         pad0x4_1PZ01[0x4];                                 // 0x4c(0x4)
	TArray<struct AggressiveGhostHealthToVfxLevel>               HealthToVFxLevel;                                  // 0x50(0x10)
	struct WeightedProbabilityRangeOfRanges                      Speed;                                             // 0x60(0x30)
	struct WeightedProbabilityRangeOfRanges                      TimeBetweenShots;                                  // 0x90(0x30)
	struct WeightedProbabilityRangeOfRanges                      WraithballCooldownTime;                            // 0xc0(0x30)
	struct WeightedProbabilityRangeOfRanges                      TimeBetweenCheckingIfAShipIsBehindYou;             // 0xf0(0x30)
	float                                                        MaxDistanceBehindShipToBeMineTargetInMetres;       // 0x120(0x4)
	float                                                        MaxMineTargetAngle;                                // 0x124(0x4)
	float                                                        ChanceOfDroppingMines;                             // 0x128(0x4)
	char                                                         pad0x4_SZSC1[0x4];                                 // 0x12c(0x4)
	struct WeightedProbabilityRange                              NumMinesToDrop;                                    // 0x130(0x20)
	struct WeightedProbabilityRangeOfRanges                      MinTimeBetweenDroppingMoreMines;                   // 0x150(0x30)
	bool                                                         CanAnchorDrop;                                     // 0x180(0x1)
	char                                                         pad0x7_Z5KMV[0x7];                                 // 0x181(0x7)
	struct WeightedProbabilityRangeOfRanges                      TimeBetweenAnchorDrops;                            // 0x188(0x30)
	struct WeightedProbabilityRangeOfRanges                      AnchorDropWarningTime;                             // 0x1b8(0x30)
	float                                                        TimeBetweenPortalJumpChecks;                       // 0x1e8(0x4)
	float                                                        MinDistanceFromAnyShipsToConsiderAPortalJumpInMetres; // 0x1ec(0x4)
	float                                                        TimeToBeAwayFromAnyShipsToConsiderPortalJumping;   // 0x1f0(0x4)
	float                                                        ChanceOfPortalJumping;                             // 0x1f4(0x4)
	struct WeightedProbabilityRangeOfRanges                      PortalJumpDuration;                                // 0x1f8(0x30)
	float                                                        PortalJumpCooldown;                                // 0x228(0x4)
	char                                                         pad0x4_UZS5H[0x4];                                 // 0x22c(0x4)
	TArray<struct AggressiveGhostShipImpactDamage>               ProjectileDamageData;                              // 0x230(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_SkellyFortEventSignal: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TaleNPCOnSurfaceService: public TaleQuestService
{
public:
	char                                                         pad0x50_I898W[0x50];                               // 0x60(0x50)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MerchantQuestDescDebugData: public DataAsset
{
public:
	TArray<class Class*>                                         AllMerchantCrates;                                 // 0x28(0x10)
	TArray<class Class*>                                         AllMerchantCargo;                                  // 0x38(0x10)
	TArray<Class>                                                AllFauna;                                          // 0x48(0x10)
};


// Size 0x58 (Full Size[0x90] - InheritedSize[0x38]
class TeamCityBuildSettings: public DeveloperSettings
{
public:
	int                                                          Id;                                                // 0x38(0x4)
	char                                                         pad0x4_7QFS9[0x4];                                 // 0x3c(0x4)
	struct FString                                               BuildChainCorrelationId;                           // 0x40(0x10)
	int                                                          Changelist;                                        // 0x50(0x4)
	char                                                         pad0x4_OLK5F[0x4];                                 // 0x54(0x4)
	struct FString                                               BuildTypeId;                                       // 0x58(0x10)
	struct FString                                               StartedBy;                                         // 0x68(0x10)
	bool                                                         Personal;                                          // 0x78(0x1)
	char                                                         pad0x7_0VGU9[0x7];                                 // 0x79(0x7)
	struct FString                                               StreamName;                                        // 0x80(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotify_WieldableAnimationInterruptPoint: public AnimNotify
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class SeaId: public Object
{
public:
	struct FName                                                 SeaName;                                           // 0x28(0x8)
};


// Size 0x38 (Full Size[0x70] - InheritedSize[0x38]
class AthenaEditorRuntimeSettings: public DeveloperSettings
{
public:
	int                                                          PIECrewSize;                                       // 0x38(0x4)
	bool                                                         PIEWithBootflow;                                   // 0x3c(0x1)
	char                                                         pad0x3_GHQU3[0x3];                                 // 0x3d(0x3)
	class UClass*                                                PIEShipSize;                                       // 0x40(0x8)
	bool                                                         PIEIsInitialTutorial;                              // 0x48(0x1)
	bool                                                         PIEIsArenaGame;                                    // 0x49(0x1)
	bool                                                         PIEIsCaptain;                                      // 0x4a(0x1)
	bool                                                         PIEIsGuildedSession;                               // 0x4b(0x1)
	int                                                          PIEGuildMembersOnCrew;                             // 0x4c(0x4)
	bool                                                         PIEIsCustomServer;                                 // 0x50(0x1)
	bool                                                         PIEIsSaferSeasServer;                              // 0x51(0x1)
	bool                                                         PIEIsSoloSeasServer;                               // 0x52(0x1)
	bool                                                         PIEIsPrivateSandboxServer;                         // 0x53(0x1)
	char                                                         SessionStyle;                                      // 0x54(0x1)
	char                                                         pad0x3_LDB6L[0x3];                                 // 0x55(0x3)
	TArray<struct AthenaAnimationOverrideEntry>                  AnimationOverrideEntries;                          // 0x58(0x10)
	class AthenaEditorRuntimeSettings*                           PreviousSettings;                                  // 0x68(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimatableMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ArrivalTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ShipSpawnSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  ShipAssetClassDatabaseFileLocation;                // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TallTaleServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex1SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstrumentKeyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIQuickDeathInterface: public Interface
{
public:
};


// Size 0x100 (Full Size[0x1b8] - InheritedSize[0xb8]
class SunkenCurseArtefactAudioComponent: public ActorComponent
{
public:
	bool                                                         UseParentEmitter;                                  // 0xb8(0x1)
	char                                                         pad0x7_VWUDB[0x7];                                 // 0xb9(0x7)
	class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0xc0(0x8)
	class WwiseEvent*                                            PlaySongEvent;                                     // 0xc8(0x8)
	class WwiseEvent*                                            StopSongEvent;                                     // 0xd0(0x8)
	class WwiseEvent*                                            PlayDamagedEvent;                                  // 0xd8(0x8)
	class WwiseEvent*                                            PlayDefeatedEvent;                                 // 0xe0(0x8)
	char                                                         pad0xd0_FRFKJ[0xd0];                               // 0xe8(0xd0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EventFortInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x100] - InheritedSize[0xb8]
class MeshRotatorComponent: public ActorComponent
{
public:
	struct Rotator                                               RotationRate;                                      // 0xb8(0xc)
	char                                                         pad0x4_4K26S[0x4];                                 // 0xc4(0x4)
	TArray<class MeshComponent*>                                 Meshes;                                            // 0xc8(0x10)
	char                                                         pad0x28_YEUUW[0x28];                               // 0xd8(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameplateComponentInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AdjustableWaterLevelPuzzleAudioParams: public DataAsset
{
public:
	class WwiseObjectPoolWrapper*                                WaterLevelPuzzlePool;                              // 0x28(0x8)
	class WwiseEvent*                                            PuzzleWaterRiseStartEvent;                         // 0x30(0x8)
	class WwiseEvent*                                            PuzzleWaterRiseEndEvent;                           // 0x38(0x8)
	class WwiseEvent*                                            PuzzleWaterFallStartEvent;                         // 0x40(0x8)
	class WwiseEvent*                                            PuzzleWaterFallEndEvent;                           // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LevelTransformProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class InteractOrDisengageNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GetDigSpotProgressTaleQuestStep: public TaleQuestStep
{
public:
};


// Size 0x80 (Full Size[0x100] - InheritedSize[0x80]
class TaleQuestGenericBannerStepDesc: public TaleQuestStepDesc
{
public:
	struct FText                                                 Message;                                           // 0x80(0x38)
	struct FText                                                 Header;                                            // 0xb8(0x38)
	struct FName                                                 Tag;                                               // 0xf0(0x8)
	bool                                                         DisableMusic;                                      // 0xf8(0x1)
	char                                                         pad0x7_878UJ[0x7];                                 // 0xf9(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OwnedByShipInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0xc0] - InheritedSize[0x28]
class ReapersTributeShipHandoverHandler: public Object
{
public:
	char                                                         pad0x98_L76LF[0x98];                               // 0x28(0x98)
};


// Size 0x10 (Full Size[0x50] - InheritedSize[0x40]
class TeleportAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        MinTeleportDistanceMultiplier;                     // 0x40(0x4)
	float                                                        MaxTeleportDistanceMultiplier;                     // 0x44(0x4)
	float                                                        ResurfaceDelayMultiplier;                          // 0x48(0x4)
	char                                                         pad0x4_MWCAW[0x4];                                 // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshCloudAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0xf0 (Full Size[0x1a8] - InheritedSize[0xb8]
class ShipCurseComponent: public ActorComponent
{
public:
	TArray<class Actor*>                                         CachedShipAttachedActors;                          // 0xb8(0x10)
	TArray<class Mast*>                                          FoundMasts;                                        // 0xc8(0x10)
	class Capstan*                                               ShipCapstan;                                       // 0xd8(0x8)
	TArray<class Cannon*>                                        ShipCannons;                                       // 0xe0(0x10)
	class Wheel*                                                 ShipWheel;                                         // 0xf0(0x8)
	TArray<class FixedIntentComponent*>                          SailFixedIntentComponents;                         // 0xf8(0x10)
	char                                                         pad0x6c_SXFI2[0x6c];                               // 0x108(0x6c)
	float                                                        ShipCapstanTargetRatio;                            // 0x174(0x4)
	TArray<struct ShipActiveCurseFXData>                         ActiveCurseFX;                                     // 0x178(0x10)
	TArray<class Actor*>                                         ActorsAffectedByToggleInteractionsCurse;           // 0x188(0x10)
	TArray<struct ShipCurseSpawnedFXForCurse>                    SpawnedFXForCurses;                                // 0x198(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CampfireInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GenericMarkerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MermaidServiceInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x210] - InheritedSize[0xb8]
class SunkenCurseArtefactDynamicMaterialComponent: public ActorComponent
{
public:
	char                                                         pad0x4_WIRLY[0x4];                                 // 0xb8(0x4)
	struct FName                                                 MagicColourPropertyName;                           // 0xbc(0x8)
	struct FName                                                 DamageLevelPropertyName;                           // 0xc4(0x8)
	struct FName                                                 TimeBasedPropertyName;                             // 0xcc(0x8)
	struct FName                                                 HitPositionPropertyName;                           // 0xd4(0x8)
	struct FName                                                 CollapseStartTimePropertyName;                     // 0xdc(0x8)
	char                                                         pad0x4_46RWR[0x4];                                 // 0xe4(0x4)
	class PrimitiveComponent*                                    TargetMesh;                                        // 0xe8(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0xf0(0x10)
	class StatueThreatBase*                                      Statue;                                            // 0x100(0x8)
	char                                                         pad0x108_58GUO[0x108];                             // 0x108(0x108)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveFlameOfFateTypeStep: public TaleQuestStep
{
public:
	class RemoveFlameOfFateTypeStepDesc*                         Desc;                                              // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugCrewServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x2a8] - InheritedSize[0x288]
class AIWieldableUseInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x20_8536C[0x20];                               // 0x288(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshSocketsFinderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialAccessibilityInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x130] - InheritedSize[0x38]
class ItemSettings: public DeveloperSettings
{
public:
	struct DropItemParams                                        DropItemParams;                                    // 0x38(0x48)
	struct DropItemParams                                        AIPriorityDropItemParams;                          // 0x80(0x48)
	struct DropItemParams                                        DeployableDropItemParams;                          // 0xc8(0x48)
	char                                                         AutoAimCollisionChannel;                           // 0x110(0x1)
	char                                                         pad0x7_DNDAH[0x7];                                 // 0x111(0x7)
	TArray<class Class*>                                         ItemClassesToBeNamedByCategory;                    // 0x118(0x10)
	float                                                        InitialSurfaceDetectionHeightOffsetForBuriedItems; // 0x128(0x4)
	char                                                         pad0x4_249KN[0x4];                                 // 0x12c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipStockServiceInterface: public Interface
{
public:
};


// Size 0xd0 (Full Size[0x188] - InheritedSize[0xb8]
class BladeOfSoulsUICardManagerComponent: public ActorComponent
{
public:
	float                                                        TributeCardFadeDuration;                           // 0xb8(0x4)
	char                                                         pad0xcc_1VU57[0xcc];                               // 0xbc(0xcc)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class DebugTreasureLocation: public Actor
{
public:
	float                                                        DigRadius;                                         // 0x3a0(0x4)
	struct Vector                                                Pos;                                               // 0x3a4(0xc)
	char                                                         pad0x8_QQQUI[0x8];                                 // 0x3b0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugFlyingActionStateId: public ActionStateId
{
public:
};


// Size 0x12f8 (Full Size[0x1a40] - InheritedSize[0x748]
class AthenaPlayerController: public PlayerController
{
public:
	char                                                         pad0x88_AN9KZ[0x88];                               // 0x748(0x88)
	class PioneerComponent*                                      PioneerComponent;                                  // 0x7d0(0x8)
	class PlayerPermissionsComponent*                            PlayerPermissionsComponent;                        // 0x7d8(0x8)
	class PlayerTelemetryComponent*                              PlayerTelemetryComponent;                          // 0x7e0(0x8)
	class PlayerStatsComponent*                                  PlayerStatsComponent;                              // 0x7e8(0x8)
	class PlayerSeasonProgressionComponent*                      PlayerSeasonProgressionComponent;                  // 0x7f0(0x8)
	class PlayerHeroStatsComponent*                              PlayerHeroStatsComponent;                          // 0x7f8(0x8)
	class PlayerWalletComponent*                                 PlayerWalletComponent;                             // 0x800(0x8)
	class BoxedRpcDispatcherComponent*                           BoxedRpcDispatcherComponent;                       // 0x808(0x8)
	class PlayerEntitlementComponent*                            PlayerEntitlementComponent;                        // 0x810(0x8)
	class PlayerMigratableStatusComponent*                       PlayerMigratableStatusComponent;                   // 0x818(0x8)
	class EmblemComponent*                                       EmblemComponent;                                   // 0x820(0x8)
	class PlayerCompanyComponent*                                PlayerCompanyComponent;                            // 0x828(0x8)
	class LeaderboardComponent*                                  LeaderboardComponent;                              // 0x830(0x8)
	class RewardComponent*                                       RewardComponent;                                   // 0x838(0x8)
	class PlayerNonVerbalComponent*                              PlayerNonVerbalComponent;                          // 0x840(0x8)
	class PlayerCrewComponent*                                   PlayerCrewComponent;                               // 0x848(0x8)
	class PlayerMuteComponent*                                   PlayerMuteComponent;                               // 0x850(0x8)
	class UIResponceComponent*                                   PlayerUIReturnedResponceComponent;                 // 0x858(0x8)
	class PopUpNotificationComponent*                            PopUpNotificationComponent;                        // 0x860(0x8)
	class EncounterListenerComponent*                            EncounterListenerComponent;                        // 0x868(0x8)
	class CharacterAnimaticSettingsComponent*                    CharacterAnimaticSettingsComponent;                // 0x870(0x8)
	class AthenaTutorialComponent*                               TutorialComponent;                                 // 0x878(0x8)
	class ContextualTutorialComponent*                           ContextualTutorialComponent;                       // 0x880(0x8)
	class ImmerseCosmeticUnlockerComponent*                      ImmerseCosmeticUnlockerComponent;                  // 0x888(0x8)
	class ShantySelectionComponent*                              ShantySelectionComponent;                          // 0x890(0x8)
	class TutorialManager*                                       TutorialManagerComponent;                          // 0x898(0x8)
	class EmissaryActionRewardBoostComponent*                    EmissaryActionRewardBoostComponent;                // 0x8a0(0x8)
	class PlayerMysteriousNoteComponent*                         PlayerMysteriousNoteComponent;                     // 0x8a8(0x8)
	class EmissaryParticipantComponent*                          EmissaryParticipantComponent;                      // 0x8b0(0x8)
	class CommodityPurchaseTrackingComponent*                    CommodityPurchaseTrackingComponent;                // 0x8b8(0x8)
	class IslandEventTrackerComponent*                           IslandEventTrackerComponent;                       // 0x8c0(0x8)
	class CampaignComponent*                                     CampaignComponent;                                 // 0x8c8(0x8)
	class TaleQuestQueryableStatesAccessComponent*               TaleQuestQueryableStatesAccessComponent;           // 0x8d0(0x8)
	class AudioReportingComponent*                               AudioReportingComponent;                           // 0x8d8(0x8)
	class GuildInviteeComponent*                                 GuildInviteeComponent;                             // 0x8e0(0x8)
	class ExperienceRefreshComponent*                            ExperienceRefreshComponent;                        // 0x8e8(0x8)
	class ExperienceEligibilityComponent*                        ExperienceEligibilityComponent;                    // 0x8f0(0x8)
	struct Vengeance                                             Vengeance;                                         // 0x8f8(0x200)
	class CrewShipStockRedemptionComponent*                      CrewShipStockRedemptionComponent;                  // 0xaf8(0x8)
	class HitchDebugComponent*                                   HitchDebugComponent;                               // 0xb00(0x8)
	float                                                        InputRawYawScale;                                  // 0xb08(0x4)
	float                                                        InputRawPitchScale;                                // 0xb0c(0x4)
	struct InventoryMemory                                       InventoryMemory;                                   // 0xb10(0x50)
	char                                                         pad0x8_DBIN9[0x8];                                 // 0xb60(0x8)
	class CinematicCameraController*                             CinematicCameraController;                         // 0xb68(0x8)
	char                                                         pad0xf0_2MRD7[0xf0];                               // 0xb70(0xf0)
	float                                                        VengeanceDuration;                                 // 0xc60(0x4)
	char                                                         pad0xacc_XVIHP[0xacc];                             // 0xc64(0xacc)
	struct Guid                                                  ClientSessionId;                                   // 0x1730(0x10)
	char                                                         pad0x10_QF58Z[0x10];                               // 0x1740(0x10)
	class PromptsLocalService*                                   PromptsLocalService;                               // 0x17b8(0x8)
	class CurveFloat*                                            AutoCentreCurve;                                   // 0x17c0(0x8)
	char                                                         pad0x40_MBKGQ[0x40];                               // 0x17c8(0x40)
	struct Vector                                                CinematicCameraControllerLocation;                 // 0x1808(0xc)
	struct Rotator                                               CinematicCameraControllerRotation;                 // 0x1814(0xc)
	struct PirateIdentity                                        PirateIdentity;                                    // 0x1820(0x78)
	char                                                         DeathFlameOfFateType;                              // 0x1898(0x1)
	char                                                         FlameOfFateType;                                   // 0x1899(0x1)
	char                                                         PlayerDeathType;                                   // 0x189a(0x1)
	char                                                         pad0x5_HKUQV[0x5];                                 // 0x189b(0x5)
	class IndividualReplicationChannel*                          IndividualReplicationChannel;                      // 0x18a0(0x8)
	char                                                         pad0x18_N6A9M[0x18];                               // 0x18a8(0x18)
	struct FString                                               DebugServerMigrationEndpoint;                      // 0x18c0(0x10)
	char                                                         pad0x170_215GJ[0x170];                             // 0x18d0(0x170)
};


// Size 0x360 (Full Size[0x700] - InheritedSize[0x3a0]
class MermaidService: public Actor
{
public:
	char                                                         pad0x8_RMXOK[0x8];                                 // 0x3a0(0x8)
	class UClass*                                                MermaidBP;                                         // 0x3a8(0x8)
	class AIPartsCategory*                                       MermaidPartsCategory;                              // 0x3b0(0x8)
	char                                                         pad0x320_DGLNI[0x320];                             // 0x3b8(0x320)
	TArray<struct PlayerMermaidSuppressionData>                  PlayerMermaidSuppressionData;                      // 0x6d8(0x10)
	char                                                         pad0x18_ESI8I[0x18];                               // 0x6e8(0x18)
};


// Size 0xb8 (Full Size[0x138] - InheritedSize[0x80]
class BasePlayNpcAnimationStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableActor                                    PlaceableReaction;                                 // 0x80(0x30)
	struct QuestVariableActor                                    CutSceneActor;                                     // 0xb0(0x30)
	struct FName                                                 AnimationNameToPlay;                               // 0xe0(0x8)
	float                                                        SubtitleMaxDistance;                               // 0xe8(0x4)
	bool                                                         UseServerDrivenDialogue;                           // 0xec(0x1)
	char                                                         pad0x3_19D6T[0x3];                                 // 0xed(0x3)
	class SceneDialogueData*                                     DialogueData;                                      // 0xf0(0x8)
	class UClass*                                                LocalMusicZone;                                    // 0xf8(0x8)
	bool                                                         PreventServerMigration;                            // 0x100(0x1)
	char                                                         pad0x7_8FWFY[0x7];                                 // 0x101(0x7)
	struct TaleQuestPhaseClusterRootActor                        PhaseClusterToSpawnFor;                            // 0x108(0x30)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipRolloverCorrector: public DataAsset
{
public:
	class CurveFloat*                                            TimeRolledOverVSCorrectiveTorque;                  // 0x28(0x8)
	float                                                        RollThresholdToConsiderRolledOver;                 // 0x30(0x4)
	float                                                        HullSubmersedThreshold;                            // 0x34(0x4)
	char                                                         pad0x8_Z642G[0x8];                                 // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorInWaterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SpawnPortalTaleStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class FishSizeWeightsDataAsset: public DataAsset
{
public:
	TArray<struct FishSizeAndWeight>                             Data;                                              // 0x28(0x10)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class ItemDiggingBuryConfig: public Object
{
public:
	int                                                          MaxSmallCrewSizeForNumDigsSelection;               // 0x28(0x4)
	char                                                         pad0x4_H1H8I[0x4];                                 // 0x2c(0x4)
	struct WeightedProbabilityRange                              NumDigsRequiredForSmallCrewSize;                   // 0x30(0x20)
	struct WeightedProbabilityRange                              NumDigsRequiredForBiggerCrewSize;                  // 0x50(0x20)
	int                                                          DefaultNumDigsIfNotInCrew;                         // 0x70(0x4)
	char                                                         pad0x4_RJJ2M[0x4];                                 // 0x74(0x4)
};


// Size 0xd0 (Full Size[0x188] - InheritedSize[0xb8]
class AimAssistDebugComponent: public ActorComponent
{
public:
	class AimAssistDataAsset*                                    AimAssistDataAsset;                                // 0xb8(0x8)
	char                                                         pad0xc8_Z5TA0[0xc8];                               // 0xc0(0xc8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuriedDecalClientServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class QuickInventoryClientInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class PlayerActivityComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NHTQ8[0x8];                                 // 0xb8(0x8)
	char                                                         TopPriorityActivity;                               // 0xc0(0x1)
	char                                                         pad0x7_8S2R8[0x7];                                 // 0xc1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountpointInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PlayerRelevancyService: public Object
{
public:
	char                                                         pad0x10_030PD[0x10];                               // 0x28(0x10)
	TArray<struct PlayerRelevancyRequest>                        PendingRequests;                                   // 0x38(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestGenericBannerStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class ShipPartCustomizationComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountedWeaponInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TradeRouteMapCollectionInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MechanismEvent: public Object
{
public:
	class Actor*                                                 Owner;                                             // 0x28(0x8)
	char                                                         pad0x8_KMWC1[0x8];                                 // 0x30(0x8)
};


// Size 0x130 (Full Size[0x220] - InheritedSize[0xf0]
class ShipPreviewComponent: public CoherentUIGTRenderToTextureLiveView
{
public:
	char                                                         pad0x20_YSPSU[0x20];                               // 0xf0(0x20)
	struct IntPoint                                              DefaultResolution;                                 // 0x110(0x8)
	class RenderToTextureSceneDetails*                           Details;                                           // 0x118(0x8)
	char                                                         pad0x100_XSG0W[0x100];                             // 0x120(0x100)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class MaterialAccessibilityService: public Object
{
public:
	char                                                         pad0x58_N6TLD[0x58];                               // 0x28(0x58)
	class MaterialParameterCollection*                           MaterialAccessibilityParamCollection;              // 0x80(0x8)
	struct StringAssetReference                                  MaterialAccessibilityAssetRef;                     // 0x88(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CollectorsChestItemSlotDefinitionDataAsset: public DataAsset
{
public:
	TArray<struct CollectorsChestItemSlotDefinition>             AllowedObjects;                                    // 0x28(0x10)
	bool                                                         AllowAll;                                          // 0x38(0x1)
	char                                                         pad0x7_6TJP1[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpawnPhantomAIOnShipStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SirenStatuesSelector: public Object
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToCompassNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x118 (Full Size[0x538] - InheritedSize[0x420]
class SequencerCutSceneActor: public LevelSequenceActor
{
public:
	char                                                         pad0x8_KHRRG[0x8];                                 // 0x420(0x8)
	struct CutScenePlayData                                      CutScenePlayData;                                  // 0x428(0x38)
	TArray<struct CutSceneLoadData>                              CutSceneDataSet;                                   // 0x460(0x10)
	class CutSceneSubtitlesComponent*                            CutsceneSubtitleComponent;                         // 0x470(0x8)
	class Pawn*                                                  InteractingPlayerPawn;                             // 0x478(0x8)
	bool                                                         IsLooping;                                         // 0x480(0x1)
	char                                                         pad0x7_NMNBI[0x7];                                 // 0x481(0x7)
	TArray<struct Guid>                                          CutSceneCrewIds;                                   // 0x488(0x10)
	class LevelSequence*                                         LevelSequenceToPlay;                               // 0x498(0x8)
	TArray<class LevelSequence*>                                 LevelSequencesToPlay;                              // 0x4a0(0x10)
	char                                                         pad0x80_FTWID[0x80];                               // 0x4b0(0x80)
	bool                                                         SequenceIsLoading;                                 // 0x530(0x1)
	char                                                         pad0x7_62IID[0x7];                                 // 0x531(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OffBottomTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x40 (Full Size[0x600] - InheritedSize[0x5c0]
class OverlapTriggerComponent: public CapsuleComponent
{
public:
	char                                                         pad0x40_TBFN7[0x40];                               // 0x5c0(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractionPoliciesTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class TaleSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  TaleRankRequirementsAssetRef;                      // 0x38(0x10)
	struct StringAssetReference                                  TaleBlockedByFactionDataAssetRef;                  // 0x48(0x10)
	struct StringAssetReference                                  TaleBlockedByPlayModeVariantDataAssetRef;          // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InventoryItemInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestBranchStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableBool                                     Condition;                                         // 0x80(0x30)
	class TaleQuestStepDesc*                                     IfCondition;                                       // 0xb0(0x8)
	class TaleQuestStepDesc*                                     ElseCondition;                                     // 0xb8(0x8)
};


// Size 0x30 (Full Size[0x90] - InheritedSize[0x60]
class AISpawnContextTaleQuestService: public TaleQuestService
{
public:
	class AISpawnContextTaleQuestServiceDesc*                    Desc;                                              // 0x60(0x8)
	char                                                         pad0x28_0NDWN[0x28];                               // 0x68(0x28)
};


// Size 0xf0 (Full Size[0x920] - InheritedSize[0x830]
class BlendedPostProcessingZoneComponentBase: public PostProcessComponent
{
public:
	char                                                         pad0x10_RIUC0[0x10];                               // 0x830(0x10)
	class CurveFloat*                                            FadeCurveNormalised;                               // 0x840(0x8)
	float                                                        BlendDistance;                                     // 0x848(0x4)
	char                                                         pad0xd4_QG0TM[0xd4];                               // 0x84c(0xd4)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestAddTemporarySessionEntitlementStepDesc: public TaleQuestStepDesc
{
public:
	TArray<Class>                                                Entitlements;                                      // 0x80(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class AnimNotifyTriggerPlaceableReaction: public AnimNotify
{
public:
	struct StringAssetReference                                  PlaceableReactionToTrigger;                        // 0x38(0x10)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class CreateDigsiteTaleStep: public TaleQuestStep
{
public:
	char                                                         pad0x20_O38JM[0x20];                               // 0x98(0x20)
};


// Size 0x98 (Full Size[0x150] - InheritedSize[0xb8]
class ShroudBreakerTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_2X4R4[0x8];                                 // 0xb8(0x8)
	struct StringAssetReference                                  ShroudbreakerActor;                                // 0xc0(0x10)
	struct Transform                                             SpawnTransform;                                    // 0xd0(0x30)
	struct FName                                                 SpawnShroudbreakerFeature;                         // 0x100(0x8)
	char                                                         pad0x18_BVHU0[0x18];                               // 0x108(0x18)
	bool                                                         ShroudBreakerActive;                               // 0x120(0x1)
	char                                                         pad0x7_Z4O01[0x7];                                 // 0x121(0x7)
	class Actor*                                                 SpawnedShroudbreaker;                              // 0x128(0x8)
	char                                                         pad0x20_WZ9LI[0x20];                               // 0x130(0x20)
};


// Size 0x28 (Full Size[0x3c8] - InheritedSize[0x3a0]
class PlaceableReaction: public Actor
{
public:
	TArray<struct LandmarkReactionKeyFrame>                      ReactionEvents;                                    // 0x3a0(0x10)
	float                                                        TriggerRadiusInMetres;                             // 0x3b0(0x4)
	char                                                         pad0x4_YF80T[0x4];                                 // 0x3b4(0x4)
	class SceneComponent*                                        SceneComponent;                                    // 0x3b8(0x8)
	class LandmarkReactionPlayer*                                ReactionEventPlayer;                               // 0x3c0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentMoveYInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoSharpModifierNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class VomitStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WalkActivationNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0x290] - InheritedSize[0x288]
class CaptainsLogInteractableInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x8_HTL56[0x8];                                 // 0x288(0x8)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class GoalDrivenCollidableCharacterComponent: public ActorComponent
{
public:
	char                                                         pad0x8_QXQR1[0x8];                                 // 0xb8(0x8)
	float                                                        CharacterCollisionRadius;                          // 0xc0(0x4)
	bool                                                         ShouldCollideWhileMoving;                          // 0xc4(0x1)
	bool                                                         ShouldCollideWithOtherCharacters;                  // 0xc5(0x1)
	char                                                         pad0x2_H59GY[0x2];                                 // 0xc6(0x2)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WielderWwiseEmitterInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class ClaimVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableGuid                                     Id;                                                // 0x80(0x30)
	struct QuestVariableBool                                     Success;                                           // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeChargeAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AttachedToObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class ObjectProximityResetComponent: public ActorComponent
{
public:
	TArray<class Actor*>                                         ResetTargets;                                      // 0xb8(0x10)
	float                                                        ObjectResetTimeout;                                // 0xe8(0x4)
	char                                                         pad0x4_43Z1B[0x4];                                 // 0xec(0x4)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestDisableSeaFortCompleteBannerStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnterTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class InGameCommand: public Object
{
public:
	char                                                         pad0x28_443HB[0x28];                               // 0x28(0x28)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NotificationMessagesDataAsset: public DataAsset
{
public:
	TArray<struct Text>                                          NotificationMessages;                              // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuriedTreasureLocationValidator: public Object
{
public:
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class AnimNotify_RumbleController: public AnimNotify
{
public:
	class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x38(0x8)
	struct FName                                                 ForceFeedbackTag;                                  // 0x40(0x8)
	class ForceFeedbackCondition*                                ForceFeedbackCondition;                            // 0x48(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerContentModifierDataAsset: public DataAsset
{
public:
	TArray<struct StorageContainerContentModifierEntry>          ModifierEntries;                                   // 0x28(0x10)
};


// Size 0x188 (Full Size[0x528] - InheritedSize[0x3a0]
class FishingFishSpawnerManager: public Actor
{
public:
	char                                                         pad0x8_80ORE[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        RootComp;                                          // 0x3a8(0x8)
	class UClass*                                                FishingFishSpawnerClass;                           // 0x3b0(0x8)
	struct TierFishToSpawnAcrossFishSpawners                     TierOneFishData;                                   // 0x3b8(0x10)
	struct TierFishToSpawnAcrossFishSpawners                     TierTwoFishData;                                   // 0x3c8(0x10)
	struct TierFishToSpawnAcrossFishSpawners                     TierThreeFishData;                                 // 0x3d8(0x10)
	TArray<class FishingFishSpawner*>                            FishingFishSpawners;                               // 0x3e8(0x10)
	char                                                         pad0x128_1PF3Z[0x128];                             // 0x3f8(0x128)
	bool                                                         AllFishCaught;                                     // 0x522(0x1)
	char                                                         pad0x5_PKWPV[0x5];                                 // 0x523(0x5)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class IslandSalvageSpawnerCollection: public DataAsset
{
public:
	TArray<class Class*>                                         SalvageSpawners;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeepSeaHelpers: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AirGivingService: public Object
{
public:
	char                                                         pad0x8_PY6G0[0x8];                                 // 0x28(0x8)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class FishingSetupDataAsset: public DataAsset
{
public:
	float                                                        CastDistanceMin;                                   // 0x28(0x4)
	float                                                        CastDistanceMax;                                   // 0x2c(0x4)
	float                                                        PreCastTimeForMaxCastDistance;                     // 0x30(0x4)
	float                                                        DistanceRequiredToReelInToCatchTheFish;            // 0x34(0x4)
	float                                                        MinFloatDistanceFromPlayer;                        // 0x38(0x4)
	float                                                        MaxFishSpawnDepth;                                 // 0x3c(0x4)
	float                                                        CastingThrowDurationAtMinDistance;                 // 0x40(0x4)
	float                                                        CastingThrowDurationAtMaxDistance;                 // 0x44(0x4)
	float                                                        FishSpawnHitDetectionHalfExtentXY;                 // 0x48(0x4)
	float                                                        FishSpawnHitDetectionHalfExtentZ;                  // 0x4c(0x4)
	struct WeightedProbabilityRangeOfRanges                      TimeBeforeAppearing;                               // 0x50(0x30)
	float                                                        DelayBeforeTrackingFloat;                          // 0x80(0x4)
	float                                                        MaxDistanceFromFloatBeforeFishGivesUp;             // 0x84(0x4)
	struct WeightedProbabilityRangeOfRanges                      TimeSpentBiting;                                   // 0x88(0x30)
	float                                                        FloatReelingMoveSpeedWhenNoFishOnLine;             // 0xb8(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenNoFishOnLine;          // 0xbc(0x4)
	float                                                        ReelingAnimationSpeedChangePerSec;                 // 0xc0(0x4)
	float                                                        ReelingAnimationStoppingSpeedChangePerSec;         // 0xc4(0x4)
	float                                                        MaxReelingWhenFailedTime;                          // 0xc8(0x4)
	float                                                        FishingMiniGameLeftRightInputAngle;                // 0xcc(0x4)
	float                                                        FishingMiniGameBattlingAngle;                      // 0xd0(0x4)
	float                                                        FishingMiniGameInputThreshold;                     // 0xd4(0x4)
	float                                                        TimeBeforeTurningOnFishHits;                       // 0xd8(0x4)
	float                                                        FOVChangeWhenBattling;                             // 0xdc(0x4)
	float                                                        FOVBlendSpeedWhenBattling;                         // 0xe0(0x4)
	float                                                        TimeBeforeDestroyingFishAndAwardingPlayer;         // 0xe4(0x4)
	float                                                        CameraYawFishMaxOffset;                            // 0xe8(0x4)
	float                                                        CameraMaxYaw;                                      // 0xec(0x4)
	float                                                        CameraYawSpringAcc;                                // 0xf0(0x4)
	float                                                        CameraYawSpringAccWhenResetting;                   // 0xf4(0x4)
	float                                                        CameraExtraPitchWhenPullingBack;                   // 0xf8(0x4)
	float                                                        CameraExtraPitchSpringAcc;                         // 0xfc(0x4)
	float                                                        CameraExtraPitchSpringAccWhenResetting;            // 0x100(0x4)
	float                                                        BlendBackFromDisabledCameraDuration;               // 0x104(0x4)
	float                                                        RodDirectionBendMaxAngleOfFishFromFromRod;         // 0x108(0x4)
	float                                                        RodDirectionMaxBendLeft;                           // 0x10c(0x4)
	float                                                        RodDirectionMaxBendRight;                          // 0x110(0x4)
	float                                                        ReturnFromFreeLookSpringAcc;                       // 0x114(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelLockReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x260] - InheritedSize[0x250]
class AthenaGameViewportClient: public GameViewportClient
{
public:
	char                                                         pad0x10_4KB2A[0x10];                               // 0x250(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationCapstanBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class NamedPointsComponent: public ActorComponent
{
public:
	char                                                         pad0x20_H9NY3[0x20];                               // 0xb8(0x20)
	class NamedPointsCollectionListDataAsset*                    NamedPointsAsset;                                  // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_FlushQueuedAIAbility: public BTTaskNode
{
public:
};


// Size 0x88 (Full Size[0x428] - InheritedSize[0x3a0]
class CampaignService: public Actor
{
public:
	char                                                         pad0x30_NN585[0x30];                               // 0x3a0(0x30)
	TArray<struct ActiveCampaignInfo>                            ActiveCampaigns;                                   // 0x3d0(0x10)
	char                                                         pad0x48_2VZYN[0x48];                               // 0x3e0(0x48)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class GunpowderDartStatus: public StatusBase
{
public:
};


// Size 0x38 (Full Size[0xf0] - InheritedSize[0xb8]
class HealthStageHandlerComponent: public ActorComponent
{
public:
	char                                                         pad0x38_7MWYG[0x38];                               // 0xb8(0x38)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class WaterHeightInterestService: public Object
{
public:
	char                                                         pad0x38_7XEVZ[0x38];                               // 0x28(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleVaultServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class PopUpAudioDesc: public DataAsset
{
public:
	struct FString                                               SfxEventName;                                      // 0x28(0x10)
	struct FString                                               EventName;                                         // 0x38(0x10)
	struct FString                                               SwitchName;                                        // 0x48(0x10)
	struct FString                                               SwitchValue;                                       // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetLoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AttitudeSource: public Interface
{
public:
};


// Size 0x128 (Full Size[0x1a8] - InheritedSize[0x80]
class CreateDigsiteTaleStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableVector                                   InDigsiteLocation;                                 // 0x80(0x30)
	struct QuestVariableFloat                                    InDigsiteRadius;                                   // 0xb0(0x30)
	struct QuestVariableGuid                                     InAssociatedCrewId;                                // 0xe0(0x30)
	struct QuestVariableInt                                      OutDigsiteID;                                      // 0x110(0x30)
	struct QuestVariableUObject                                  OutDigsiteObject;                                  // 0x140(0x30)
	struct QuestVariableBool                                     OutDigsiteHasBeenCompleted;                        // 0x170(0x30)
	bool                                                         AutoRemoveEmptyHoles;                              // 0x1a0(0x1)
	char                                                         pad0x7_CW84Z[0x7];                                 // 0x1a1(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class BeginBullRushUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x68 (Full Size[0x120] - InheritedSize[0xb8]
class CrewShipStockRedemptionComponent: public ActorComponent
{
public:
	TArray<class Class*>                                         PendingBundles;                                    // 0xb8(0x10)
	char                                                         pad0x58_DSEU4[0x58];                               // 0xc8(0x58)
};


// Size 0xc0 (Full Size[0x140] - InheritedSize[0x80]
class SpawnActorStepDescBase: public TaleQuestStepDesc
{
public:
	char                                                         pad0x20_ZSMCT[0x20];                               // 0x80(0x20)
	struct QuestVariableActorAssetType                           ActorType;                                         // 0xa0(0x30)
	bool                                                         TrackActor;                                        // 0xd0(0x1)
	bool                                                         AutomaticallyGatherForMigration;                   // 0xd1(0x1)
	bool                                                         MarkAsCritical;                                    // 0xd2(0x1)
	char                                                         pad0x5_DB72W[0x5];                                 // 0xd3(0x5)
	struct FText                                                 CriticalActorLostMessage;                          // 0xd8(0x38)
	struct QuestVariableActor                                    ActorVar;                                          // 0x110(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpitStatus: public StatusBase
{
public:
};


// Size 0x58 (Full Size[0xb8] - InheritedSize[0x60]
class TemporaryEntitlementsTaleQuestService: public TaleQuestService
{
public:
	class TemporaryEntitlementsTaleQuestServiceDesc*             ServiceDesc;                                       // 0x60(0x8)
	char                                                         pad0x8_LLD40[0x8];                                 // 0x68(0x8)
	TArray<struct LoadoutCacheEntry>                             CachedLoadouts;                                    // 0x70(0x10)
	char                                                         pad0x28_JBPZ1[0x28];                               // 0x80(0x28)
	TArray<class PlayerEntitlementComponent*>                    OverriddenComponents;                              // 0xa8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateDescInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex3SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class AbsorbsLiquidComponent: public ActorComponent
{
public:
	char                                                         pad0x10_MAXJA[0x10];                               // 0xb8(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PLQuestLocationDataBundle: public DataAsset
{
public:
	TArray<class PLQuestLocationDataAsset*>                      ActiveLocations;                                   // 0x28(0x10)
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class SkeletonThrone: public Actor
{
public:
	char                                                         pad0x8_6I7VZ[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        RootSceneComponent;                                // 0x3a8(0x8)
	class StaticMeshComponent*                                   MeshComponent;                                     // 0x3b0(0x8)
	class ShapeComponent*                                        EmoteCollisionComponent;                           // 0x3b8(0x8)
	TArray<struct Name>                                          EmoteNames;                                        // 0x3c0(0x10)
	struct PlayerStat                                            ThroneStat;                                        // 0x3d0(0x4)
	char                                                         pad0x4_XAEHZ[0x4];                                 // 0x3d4(0x4)
	TArray<struct LandmarkReactionKeyFrame>                      SatOnStatFiredReactions;                           // 0x3d8(0x10)
	class LandmarkReactionPlayer*                                ReactionPlayer;                                    // 0x3e8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CheerAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ContestAwardScoreForItemDugUpStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainedSessionServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PremiumShopSettings: public Object
{
public:
	struct StringAssetReference                                  PetShopDataAsset;                                  // 0x28(0x10)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class Anchor: public Actor
{
public:
	char                                                         pad0x8_XT1TU[0x8];                                 // 0x3a0(0x8)
	struct Vector                                                PositionForAnchorDynamicsRelativeToAnchorActor;    // 0x3a8(0xc)
	char                                                         pad0x4_0DLSY[0x4];                                 // 0x3b4(0x4)
	class BaseAnchorDynamicsDesc*                                AnchorDynamicsDesc;                                // 0x3b8(0x8)
	char                                                         pad0x18_MF9HS[0x18];                               // 0x3c0(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AvailableFishForSpawning: public DataAsset
{
public:
	TArray<class FishSpawnParamsDataAsset*>                      AvailableFishToSelectForSpawning;                  // 0x28(0x10)
};


// Size 0x1c0 (Full Size[0x560] - InheritedSize[0x3a0]
class SessionManagementService: public Actor
{
public:
	char                                                         pad0x8_4DT2R[0x8];                                 // 0x3a0(0x8)
	class SessionManagementServiceSettingsDataAsset*             SettingsParams;                                    // 0x3a8(0x8)
	TArray<struct SessionManagementPlayerData>                   TrackedPlayers;                                    // 0x3b0(0x10)
	TArray<struct SessionManagementGracePeriodNotificationParams> GracePeriodNotificationEntries;                    // 0x3c0(0x10)
	TArray<struct SessionManagementRolePermissionData>           RolePermissions;                                   // 0x3d0(0x10)
	char                                                         pad0x180_Y3FRZ[0x180];                             // 0x3e0(0x180)
};


// Size 0x18 (Full Size[0x3b8] - InheritedSize[0x3a0]
class SkeletonCampService: public Actor
{
public:
	char                                                         pad0x18_7H2ZX[0x18];                               // 0x3a0(0x18)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class StatusResponseToggleCapstan: public StatusResponse
{
public:
	float                                                        DurationToToggleCapstan;                           // 0x38(0x4)
	char                                                         pad0x4_OITF1[0x4];                                 // 0x3c(0x4)
};


// Size 0x530 (Full Size[0x558] - InheritedSize[0x28]
class CompanyData: public DataAsset
{
public:
	class UClass*                                                Company;                                           // 0x28(0x8)
	bool                                                         ShouldHaveLevels;                                  // 0x30(0x1)
	bool                                                         ShouldHaveEmblems;                                 // 0x31(0x1)
	bool                                                         ShouldHaveVoyages;                                 // 0x32(0x1)
	bool                                                         ShouldBeOnCompanySummaryScreen;                    // 0x33(0x1)
	bool                                                         LockedInSaferSeas;                                 // 0x34(0x1)
	char                                                         pad0x3_Q21RZ[0x3];                                 // 0x35(0x3)
	class UClass*                                                SaferSeasMaxRank;                                  // 0x40(0x8)
	struct FeatureFlag                                           CompanySummaryScreenFeatureFlag;                   // 0x48(0xc)
	bool                                                         ShouldBeHiddenWhenNothingUnlocked;                 // 0x54(0x1)
	char                                                         pad0x3_7K2TB[0x3];                                 // 0x55(0x3)
	struct FName                                                 ShouldBeHiddenWhenNothingUnlockedWhenToggleEnabled; // 0x58(0x8)
	struct FName                                                 IsRetired;                                         // 0x60(0x8)
	struct CompanySkin                                           Skin;                                              // 0x68(0xd8)
	struct CompanyShopSkin                                       ShopSkin;                                          // 0x140(0x20)
	struct FeatureFlag                                           OverrideShopSkinFeature;                           // 0x160(0xc)
	char                                                         pad0x4_SGR3W[0x4];                                 // 0x16c(0x4)
	struct CompanyShopSkin                                       OverrideShopSkin;                                  // 0x170(0x20)
	struct CompanyShopInfo                                       ShopInfo;                                          // 0x190(0x60)
	struct QuestTableCompanyData                                 QuestTableData;                                    // 0x1f0(0x1d0)
	struct CompanyProgressIcons                                  ProgressIcons;                                     // 0x3c0(0x28)
	TArray<struct CompanyProgressIconsOverride>                  ProgressIconsOverrides;                            // 0x3e8(0x10)
	struct FName                                                 DistinctionBannerTag;                              // 0x3f8(0x8)
	struct CompanyRankData                                       RankData;                                          // 0x400(0x10)
	TArray<struct CompanyRankDataOverride>                       RankDataOverrides;                                 // 0x410(0x10)
	struct FText                                                 Motto;                                             // 0x420(0x38)
	struct FText                                                 CompanyFlavourText1;                               // 0x458(0x38)
	struct FText                                                 CompanyFlavourText2;                               // 0x490(0x38)
	struct StringAssetReference                                  MapsDiscoveredBackgroundImage;                     // 0x4d8(0x10)
	struct StringAssetReference                                  SeaOfThievesOnDemandMapsDiscoveredBackgroundImage; // 0x4e8(0x10)
	TArray<struct StringAssetReference>                          MapsDiscoveredImages;                              // 0x4f8(0x10)
	struct FString                                               VoyageAudioSwitchName;                             // 0x508(0x10)
	struct FString                                               VoyageAudioSwitchValue;                            // 0x518(0x10)
	TArray<char>                                                 BootyBought;                                       // 0x528(0x10)
	char                                                         pad0x20_7LKAA[0x20];                               // 0x538(0x20)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class GameEventSchedulerSettingsAsset: public DataAsset
{
public:
	TArray<struct GameEventSettings>                             EventSettings;                                     // 0x28(0x10)
	TArray<struct GameEventSchedulerMainConfig>                  Configs;                                           // 0x38(0x10)
	TArray<struct GameEventCount>                                GlobalEvents;                                      // 0x48(0x10)
	float                                                        InitialStartupTime;                                // 0x58(0x4)
	float                                                        BlockingVerificationFrequency;                     // 0x5c(0x4)
	float                                                        InvalidEventDeactivationQueryFrequency;            // 0x60(0x4)
	float                                                        InvalidEventDeactivationThreshold;                 // 0x64(0x4)
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class CustomAnimationHandlerComponent: public ActorComponent
{
public:
	char                                                         pad0x10_S9M4P[0x10];                               // 0xb8(0x10)
	TArray<struct StringAssetReference>                          CurrentCustomAnimationDataAssetReferences;         // 0xc8(0x10)
	struct RequestedLoopAnims                                    RequestedLoopingAnim;                              // 0xd8(0x10)
	class AthenaAnimationCustomSkeletonAnimationData*            MergedCustomAnimationData;                         // 0xe8(0x8)
	char                                                         pad0x28_BN67T[0x28];                               // 0xf0(0x28)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RegistrablePartTestObjectWithInterface: public Object
{
public:
	char                                                         pad0x8_Q9ODO[0x8];                                 // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CollectableQuestObjectStepInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AthenaAnimationCustomSkeletonAnimationData: public DataAsset
{
public:
	struct SkeletonCustomAnimationDataStructure                  SkeletonCustomAnimData;                            // 0x28(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyShopActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipType: public Object
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC1NotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapstanArmInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ReapersChestAISpawnerSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  ReapersChestAISpawnerServiceParams;                // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableReplicaAdditionalMeshesInterface: public Interface
{
public:
};


// Size 0x2a0 (Full Size[0x358] - InheritedSize[0xb8]
class ClothingLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x50_M8J1W[0x50];                               // 0xb8(0x50)
	struct ClothingLoadoutContainer                              LoadoutContainer;                                  // 0x108(0x38)
	class Actor*                                                 OwningPlayer;                                      // 0x140(0x8)
	class EmoteSettings*                                         EmoteSettings;                                     // 0x148(0x8)
	char                                                         pad0x78_QDYUM[0x78];                               // 0x150(0x78)
	TArray<struct EmoteData>                                     CustomEmotes;                                      // 0x1c8(0x10)
	TArray<struct EmoteData>                                     CustomCostumeEmotes;                               // 0x1d8(0x10)
	TArray<struct EmoteData>                                     CustomCurseEmotes;                                 // 0x1e8(0x10)
	class GuildEmoteLoadoutDataAsset*                            CustomGuildEmotes;                                 // 0x1f8(0x8)
	TArray<struct EmoteData>                                     CustomWalkableEmotes;                              // 0x200(0x10)
	char                                                         pad0x148_TUOPR[0x148];                             // 0x210(0x148)
};


// Size 0x0 (Full Size[0x3d0] - InheritedSize[0x3d0]
class GhostShipPlayerSpawnLocation: public PlayerStart
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class CrewSpawnLocationVariablesListAsset: public DataAsset
{
public:
	float                                                        MinimumSafeShipDistance;                           // 0x28(0x4)
	float                                                        MaximumSafeShipDistance;                           // 0x2c(0x4)
	float                                                        SafeShipDistanceScore;                             // 0x30(0x4)
	float                                                        SpawnIsNotOccupiedPenalty;                         // 0x34(0x4)
	int                                                          PenaltyResourceIsland;                             // 0x38(0x4)
	int                                                          PenaltyOutpostIsland;                              // 0x3c(0x4)
	int                                                          PenaltySmallIsland;                                // 0x40(0x4)
	int                                                          PenaltyMediumIsland;                               // 0x44(0x4)
	int                                                          PenaltyLargeIsland;                                // 0x48(0x4)
	int                                                          PenaltyFort;                                       // 0x4c(0x4)
	int                                                          PenaltySeaPost;                                    // 0x50(0x4)
	int                                                          PenaltyFortOfTheDamned;                            // 0x54(0x4)
	int                                                          PenaltyOccupiedByAdventureOnDemand;                // 0x58(0x4)
	char                                                         pad0x4_33YC6[0x4];                                 // 0x5c(0x4)
	TArray<struct Name>                                          IslandsToAddAdditionalPenaltiesTo;                 // 0x60(0x10)
	struct FName                                                 ProfilingOverrideIslandName;                       // 0x70(0x8)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ReapersTributeShipEventBannersDataAsset: public DataAsset
{
public:
	class GameEventBannerDataAsset*                              ApproachedAIControlledReapersTributeShipBanner;    // 0x28(0x8)
	class GameEventBannerDataAsset*                              DefeatedReapersTributeShipBanner;                  // 0x30(0x8)
	class GameEventBannerDataAsset*                              PledgedToReapersTributeShipBanner;                 // 0x38(0x8)
	class GameEventBannerDataAsset*                              ApproachedPlayerControlledReapersTributeShipBanner; // 0x40(0x8)
	class GameEventBannerDataAsset*                              DefeatedWhileControllingReapersTributeShipBanner;  // 0x48(0x8)
	class GameEventBannerDataAsset*                              HandedInReapersTributeShipBanner;                  // 0x50(0x8)
	float                                                        ReapersTributeShipHandInBannersDelay;              // 0x58(0x4)
	char                                                         pad0x4_7UZA6[0x4];                                 // 0x5c(0x4)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TaleQuestBranchStep: public TaleQuestStep
{
public:
	class TaleQuestBranchStepDesc*                               Desc;                                              // 0x98(0x8)
	char                                                         pad0x18_SVFL7[0x18];                               // 0xa0(0x18)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC2NotificationInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class ActivateSpawnerVaultStepDesc: public TaleQuestStepDesc
{
public:
	struct QuestVariableName                                     SpawnerName;                                       // 0x80(0x30)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class DrunkennessComponentPublicData: public DataAsset
{
public:
	TArray<struct DrunkennessSetupData>                          DrunkennessSetupData;                              // 0x28(0x10)
	float                                                        VomitingThresholdWhenGettingDrunker;               // 0x38(0x4)
	float                                                        VomitingThresholdWhenSobering;                     // 0x3c(0x4)
	float                                                        MinTimeBetweenVomitSpews;                          // 0x40(0x4)
	float                                                        MaxTimeBetweenVomitSpews;                          // 0x44(0x4)
	float                                                        MinVomitSpewDuration;                              // 0x48(0x4)
	float                                                        MaxVomitSpewDuration;                              // 0x4c(0x4)
	float                                                        WaterSplashSoberingAmount;                         // 0x50(0x4)
	float                                                        WaterSplashSoberingRate;                           // 0x54(0x4)
	class CurveFloat*                                            DrunkennessRemappingCurveForScreenVfx;             // 0x58(0x8)
	class CurveFloat*                                            DrunkennessRemappingCurveForStaggering;            // 0x60(0x8)
	float                                                        CameraRollAmp;                                     // 0x68(0x4)
	float                                                        CameraRollAccel;                                   // 0x6c(0x4)
	class WwiseObjectPoolWrapper*                                DrunkennessComponentPool;                          // 0x70(0x8)
	class WwiseEvent*                                            StartDrunkennessSfx;                               // 0x78(0x8)
	class WwiseEvent*                                            StopDrunkennessSfx;                                // 0x80(0x8)
	class WwiseEvent*                                            StartDrunkennessSfxRemotePlayer;                   // 0x88(0x8)
	class WwiseEvent*                                            StopDrunkennessSfxRemotePlayer;                    // 0x90(0x8)
	struct FName                                                 PlayerDrunkennessAmountRtpc;                       // 0x98(0x8)
	struct FName                                                 RemotePlayerDrunkennessAmountRtpc;                 // 0xa0(0x8)
	float                                                        MinDrunkennessToToggleLocomotionAnimType;          // 0xa8(0x4)
	char                                                         pad0x4_U3JOQ[0x4];                                 // 0xac(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemSpawnDistributionAsset: public DataAsset
{
public:
	struct ItemSpawnDistribution                                 SpawnDistribution;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPartDescAsset: public DataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_Common: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x1e0 (Full Size[0x298] - InheritedSize[0xb8]
class MeleeAttackLockOnComponent: public ActorComponent
{
public:
	class MeleeAttackLockOnComponentSettings*                    ComponentSettings;                                 // 0xb8(0x8)
	char                                                         pad0x1b8_JORTK[0x1b8];                             // 0xc0(0x1b8)
	class LockOnCameraModifier*                                  LockOnCameraModifier;                              // 0x278(0x8)
	TArray<uintptr_t>                                            PotentialTargets;                                  // 0x288(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIInteractableType: public Object
{
public:
};


// Size 0x70 (Full Size[0xf0] - InheritedSize[0x80]
class TaleQuestParallelForeachStepDesc: public TaleQuestStepDesc
{
public:
	char                                                         pad0x4_SLWVX[0x4];                                 // 0x80(0x4)
	bool                                                         CanEditCount;                                      // 0x84(0x1)
	char                                                         pad0x3_EV1RB[0x3];                                 // 0x85(0x3)
	class TaleQuestStepDesc*                                     BodyDesc;                                          // 0xd8(0x8)
	class UClass*                                                Generator;                                         // 0xe0(0x8)
	class ScriptStruct*                                          Variables;                                         // 0xe8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCServiceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x150] - InheritedSize[0x138]
class AIFormWithVFXComponent: public AthenaAIFormComponent
{
public:
	class ParticleSystem*                                        ParticlesTemplate;                                 // 0x138(0x8)
	class ParticleSystemComponent*                               ParticleSystemComponent;                           // 0x140(0x8)
	float                                                        ParticleActivationDelay;                           // 0x148(0x4)
	struct TimerHandle                                           ActivationTimerHandle;                             // 0x14c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SunkenIslandSettingsDataAsset: public DataAsset
{
public:
	TArray<struct GameplayEventExclusionInfo>                    ExclusionInfo;                                     // 0x28(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class DiscardTransientActorStep: public TaleQuestStep
{
public:
	class DiscardTransientActorStepDesc*                         Desc;                                              // 0x98(0x8)
};


// Size 0x1b8 (Full Size[0x568] - InheritedSize[0x3b0]
class FogBank: public FogVolume
{
public:
	char                                                         pad0x18_EMUQO[0x18];                               // 0x3b0(0x18)
	TArray<struct FeatureToggledFogBankAsset>                    FeatureToggledFogBankAssetsArray;                  // 0x3c8(0x10)
	class FogBankDataAsset*                                      DefaultFogBankDataAsset;                           // 0x3d8(0x8)
	class FogBankDataAsset*                                      ActiveFogBankDataAsset;                            // 0x3e0(0x8)
	class StoryDrivenFogBankDataAsset*                           StoryDrivenFogBankAssetsCollection;                // 0x3e8(0x8)
	struct FogBankSettings                                       Settings;                                          // 0x3f0(0x4c)
	char                                                         pad0x12c_V3QHA[0x12c];                             // 0x43c(0x12c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VotableVoyageProposalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsUsingHarpoonLauncherInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedUniqueGuidContainerRetrieverInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ShantySettings: public DeveloperSettings
{
public:
	float                                                        MaxJoinInDistance;                                 // 0x38(0x4)
	int                                                          MaxAudibleShantyInstruments;                       // 0x3c(0x4)
	int                                                          MaxCachedShantyEvents;                             // 0x40(0x4)
	float                                                        InstrumentStopFadeOutDuration;                     // 0x44(0x4)
};


// Size 0x88 (Full Size[0x428] - InheritedSize[0x3a0]
class CutSceneActor: public Actor
{
public:
	char                                                         pad0x8_8U7MI[0x8];                                 // 0x3a0(0x8)
	class SceneComponent*                                        DefaultSceneRoot;                                  // 0x3a8(0x8)
	class CutSceneSubtitlesComponent*                            CutSceneSubtitlesComponent;                        // 0x3b0(0x8)
	double                                                       StartTimeInSeconds;                                // 0x3b8(0x8)
	bool                                                         CutsceneActivated;                                 // 0x3c0(0x1)
	char                                                         pad0x7_K0U2O[0x7];                                 // 0x3c1(0x7)
	TArray<class Actor*>                                         TargetActors;                                      // 0x3c8(0x10)
	struct FName                                                 AnimationNameToPlay;                               // 0x3d8(0x8)
	class UClass*                                                LocalMusicZone;                                    // 0x3e0(0x8)
	class PlaceableReaction*                                     PlaceableReaction;                                 // 0x3e8(0x8)
	class SceneDialogueData*                                     DialogueData;                                      // 0x3f0(0x8)
	TArray<struct Text>                                          LocalisableNames;                                  // 0x3f8(0x10)
	char                                                         pad0x20_KEP3V[0x20];                               // 0x408(0x20)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ItemDiggingAudioConfig: public Object
{
public:
	class WwiseEvent*                                            ShovelEnterSurfaceSfx;                             // 0x28(0x8)
	class WwiseEvent*                                            ExhumeStepSfx;                                     // 0x30(0x8)
	class WwiseEvent*                                            FullyDugUpSfx;                                     // 0x38(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleQuestShipCustomizationServiceDesc: public TaleQuestServiceDesc
{
public:
	class UClass*                                                CustomizationDescToApply;                          // 0x28(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableZoomMouseInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RegistrablePartTestInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x2e0] - InheritedSize[0x2d0]
class NonVagueNonUniqueLandmarkComponent: public SceneComponent
{
public:
	struct FName                                                 DescriptionPhraseId;                               // 0x2d0(0x8)
	float                                                        ExtraRadius;                                       // 0x2d8(0x4)
	char                                                         pad0x4_DWMC2[0x4];                                 // 0x2dc(0x4)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class LoadingPointComponent: public ActorComponent
{
public:
	char                                                         pad0x8_YZNKR[0x8];                                 // 0xb8(0x8)
	TArray<struct CanLoadItemCategoryEntry>                      CanLoadItemCategories;                             // 0xc0(0x10)
	TArray<struct CanLoadItemCategoryEntry>                      CanUnloadItemCategories;                           // 0xd0(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerContentTypeSelectorEntries: public DataAsset
{
public:
	TArray<struct TypedStorageContainerContentTypeSelectorEntry> ContentSpawners;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShipEventServiceBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AchievementDefinitionDataAsset: public DataAsset
{
public:
	TArray<struct AchievementDefinition>                         AchievementDefintions;                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestLockCaptainCabinDoorStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HandlesFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ContainerAllowedItemsDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         Items;                                             // 0x28(0x10)
	TArray<class Class*>                                         Categories;                                        // 0x38(0x10)
	TArray<struct StorageContainerLimit>                         CategoryLimits;                                    // 0x48(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ConditionalStatsTriggerType: public Object
{
public:
	struct FName                                                 UniqueTextIdentifier;                              // 0x28(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class ShipPartCustomization: public Object
{
public:
	char                                                         pad0x48_9ENHS[0x48];                               // 0x28(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FogBankTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x60 (Full Size[0x118] - InheritedSize[0xb8]
class ContestUIComponent: public ActorComponent
{
public:
	char                                                         pad0x58_O63W2[0x58];                               // 0xb8(0x58)
	class AthenaPlayerController*                                ClientPlayerController;                            // 0x110(0x8)
};


// Size 0x59e0 (Full Size[0x6040] - InheritedSize[0x660]
class AthenaAnimationInstance: public CharacterAnimationInstance
{
public:
	char                                                         pad0x38_7B5GW[0x38];                               // 0x660(0x38)
	char                                                         ControllableObjectType;                            // 0x698(0x1)
	char                                                         pad0x7_60Q23[0x7];                                 // 0x699(0x7)
	TArray<struct AthenaAnimationLoadObjectsWrapper>             AllLoadedItemData;                                 // 0x6a0(0x10)
	struct AthenaAnimationHandHeldItemParams                     HandHeldItemParams;                                // 0x6b0(0x20)
	struct AthenaAnimationIdleVariantChange                      IdleVariantParams;                                 // 0x6d0(0x10)
	struct AthenaAnimationWheel                                  WheelAnimationParams;                              // 0x6e0(0x1f0)
	struct AthenaAnimationCapstan                                CapstanAnimationParams;                            // 0x8d0(0x178)
	struct AthenaAnimationFacialAnimData                         FacialParams;                                      // 0xa48(0x90)
	struct AthenaAnimationFire                                   Fire;                                              // 0xad8(0x20)
	char                                                         MeleeSpecialState;                                 // 0xaf8(0x1)
	char                                                         pad0x3_EVVG1[0x3];                                 // 0xaf9(0x3)
	float                                                        DodgeDirection;                                    // 0xafc(0x4)
	struct AthenaAnimationRowboatParams                          RowboatParams;                                     // 0xb00(0xc8)
	struct AthenaAnimationRowing                                 Rowing;                                            // 0xbc8(0xe0)
	struct AthenaAnimationWaterPumpAnimData                      WaterPumpAnimations;                               // 0xca8(0x28)
	struct AthenaAnimationWaterPumpParams                        WaterPumpAnimationParams;                          // 0xcd0(0xc)
	struct AthenaAnimationFishingParams                          FishingParams;                                     // 0xcdc(0x34)
	struct AthenaAnimationFishing                                Fishing;                                           // 0xd10(0x3f0)
	struct AthenaAnimationWaterSlideControlAnimData              WaterSlideControlAnimData;                         // 0x1100(0xe0)
	struct AthenaAnimationZiplineControlAnimData                 ZiplineControlAnimData;                            // 0x11e0(0x68)
	struct BalanceableWalkwayAnimationParams                     BalanceableWalkwayParams;                          // 0x1248(0x170)
	struct BalanceableWalkwayAnimation                           BalanceableWalkwayAnimation;                       // 0x13b8(0xc0)
	struct AthenaAnimationCrouchingAnimData                      CrouchingParams;                                   // 0x1478(0x1d0)
	struct AthenaAnimationCrouching                              CrouchingAnimation;                                // 0x1648(0xc0)
	struct AthenaAnimationPortableHarpoonGrappleAnimData         PortableHarpoonGrappleParams;                      // 0x1708(0xa0)
	class AthenaCharacter*                                       AthenaCharacter;                                   // 0x17a8(0x8)
	struct AthenaAnimationJumping                                JumpingAnimationParams;                            // 0x17b0(0xf0)
	float                                                        SpineBlendAlpha;                                   // 0x18a0(0x4)
	float                                                        DockingTransitionAlpha;                            // 0x18a4(0x4)
	struct AthenaAnimationWaterPump                              AthenaAnimationWaterPump;                          // 0x18a8(0x30)
	struct AthenaAnimationLODSettings                            AnimationLODSettings;                              // 0x18d8(0x3)
	char                                                         pad0x5_ITVTB[0x5];                                 // 0x18db(0x5)
	struct AthenaAnimationLocomotion                             Locomotion;                                        // 0x18e0(0x68)
	struct AthenaAnimationWieldedItemStateMachine                WieldedItemStateMachine;                           // 0x1948(0x5f0)
	char                                                         pad0x8_UD7HY[0x8];                                 // 0x1f38(0x8)
	struct AthenaAnimationLoadObjectByID                         ItemLoading;                                       // 0x1f40(0x940)
	class UClass*                                                CurrentWieldedItemALK;                             // 0x2880(0x8)
	struct AthenaAnimationObjectActionContinuousStruct           ItemPrimaryContinousUseAnims;                      // 0x2888(0xa8)
	struct AthenaAnimationObjectActionContinuousStruct           ItemSecondaryContinousUseAnims;                    // 0x2930(0xa8)
	struct AthenaAnimationObjectActionContinuousStruct           ItemPrimaryContinousUseAlternateAnims;             // 0x29d8(0xa8)
	struct AthenaAnimationObjectActionContinuousStruct           ItemSecondaryContinousUseAlternateAnims;           // 0x2a80(0xa8)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAnims;              // 0x2b28(0x20)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAnims;            // 0x2b48(0x20)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAlternateAnims;     // 0x2b68(0x20)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAlternateAnims;   // 0x2b88(0x20)
	struct AthenaAnimationObjectJumpingAnimations                ItemPrimaryContinousUseJumpingAnims;               // 0x2ba8(0x20)
	struct AthenaAnimationObjectJumpingAnimations                ItemSecondaryContinousUseJumpingAnims;             // 0x2bc8(0x20)
	struct AthenaAnimationObjectJumpingAnimations                ItemPrimaryContinousUseJumpingAlternateAnims;      // 0x2be8(0x20)
	struct AthenaAnimationObjectJumpingAnimations                ItemSecondaryContinousUseJumpingAlternateAnims;    // 0x2c08(0x20)
	struct AthenaAnimationActiveOneShotAnimationStruct           ActiveOneShotAnimations;                           // 0x2c28(0x20)
	struct AthenaAnimationActiveOneShotAnimationStruct           DuplicateActiveOneShotAnimations;                  // 0x2c48(0x20)
	struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemPrimaryOneShotAnims;                           // 0x2c68(0x30)
	struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemSecondaryOneShotAnims;                         // 0x2c98(0x30)
	struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemPrimaryOneShotAlternateAnims;                  // 0x2cc8(0x30)
	struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemSecondaryOneShotAlternateAnims;                // 0x2cf8(0x30)
	struct AthenaAnimationActiveItemComplexAnimData              CurrentComplexOneShotData;                         // 0x2d28(0x38)
	struct AthenaAnimationObjectComplexOneShotPlaySpeeds         CurrentMeleeAttackSequencePlaySpeeds;              // 0x2d60(0x14)
	char                                                         pad0x4_Y9OK2[0x4];                                 // 0x2d74(0x4)
	struct AthenaAnimationObjectMeleeBlocking                    ItemCombatBlockingAnims;                           // 0x2d78(0x60)
	class UClass*                                                FishingRodAnimStoreID;                             // 0x2dd8(0x8)
	class UClass*                                                QuestBookAnimStoreID;                              // 0x2de0(0x8)
	class UClass*                                                WoodenPlankAnimStoreID;                            // 0x2de8(0x8)
	float                                                        UnequipPlayRate;                                   // 0x2df0(0x4)
	char                                                         pad0xc_18O2Y[0xc];                                 // 0x2df4(0xc)
	struct AthenaAnimationLoadOnDemandItemsAnimgraphStructure    LoadOnDemandItemParams;                            // 0x2e00(0x2d40)
	char                                                         ControllableSocketGroup;                           // 0x5b40(0x1)
	char                                                         ControllableSocketGroupCharacterSize;              // 0x5b41(0x1)
	char                                                         LocomotionState;                                   // 0x5b42(0x1)
	struct AthenaAnimationDebugTrackingParams                    DebugTrackingParams;                               // 0x5b43(0x4)
	char                                                         pad0x1_NZ39F[0x1];                                 // 0x5b47(0x1)
	struct AthenaAnimationDeath                                  Death;                                             // 0x5b48(0x100)
	struct AthenaAnimationUndoRepair                             UndoRepair;                                        // 0x5c48(0x70)
	struct AthenaAnimationSitting                                Sitting;                                           // 0x5cb8(0x70)
	char                                                         PropWieldLocation;                                 // 0x5d28(0x1)
	char                                                         pad0x3_S4F87[0x3];                                 // 0x5d29(0x3)
	struct Vector                                                PropOffsetLocation;                                // 0x5d2c(0xc)
	struct Rotator                                               PropOffsetRotation;                                // 0x5d38(0xc)
	struct Vector                                                PropOffsetScale;                                   // 0x5d44(0xc)
	bool                                                         FaunaAddedToCrate;                                 // 0x5d50(0x1)
	bool                                                         InDockingTransition;                               // 0x5d50(0x1)
	bool                                                         WieldedItemIsMeleeWeapon;                          // 0x5d50(0x1)
	bool                                                         MeleeV2IgnoresHandAdditive;                        // 0x5d50(0x1)
	bool                                                         InMeleeCombat;                                     // 0x5d50(0x1)
	bool                                                         IsBlockingLeft;                                    // 0x5d50(0x1)
	bool                                                         IsFishingWithWieldedRod;                           // 0x5d50(0x1)
	bool                                                         UsePropOffset;                                     // 0x5d50(0x1)
	bool                                                         IsOnLadder;                                        // 0x5d51(0x1)
	bool                                                         IsUsingAdditiveHandOverlayPose;                    // 0x5d51(0x1)
	bool                                                         IgnoreIdleBlendTransition;                         // 0x5d51(0x1)
	bool                                                         UseDuplicateOneShotState;                          // 0x5d51(0x1)
	char                                                         pad0x2ee_VK7MO[0x2ee];                             // 0x5d52(0x2ee)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimatedMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelOfTheDamnedTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMaterialLoadListenerInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class GhostDataAsset: public DataAsset
{
public:
	class UClass*                                                RevivedAnimationStateId;                           // 0x28(0x8)
	float                                                        InitialSpawnTime;                                  // 0x30(0x4)
	float                                                        HeightOffsetFromCeilingCollision;                  // 0x34(0x4)
	TArray<struct GhostPlayModeParameters>                       PlayModeParameters;                                // 0x38(0x10)
	char                                                         GhostCollisionChannel;                             // 0x48(0x1)
	char                                                         pad0x3_BLNCK[0x3];                                 // 0x49(0x3)
	float                                                        GhostShader_Start_InitialAmount;                   // 0x4c(0x4)
	float                                                        GhostShader_Start_TargetAmount;                    // 0x50(0x4)
	float                                                        GhostShader_Start_Delay;                           // 0x54(0x4)
	float                                                        GhostShader_Start_Duration;                        // 0x58(0x4)
	float                                                        GhostShader_End_InitialAmount;                     // 0x5c(0x4)
	float                                                        GhostShader_End_TargetAmount;                      // 0x60(0x4)
	float                                                        GhostShader_End_Delay;                             // 0x64(0x4)
	float                                                        GhostShader_End_Duration;                          // 0x68(0x4)
	char                                                         pad0x4_K07IV[0x4];                                 // 0x6c(0x4)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class MerchantCrateProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x20_D11CJ[0x20];                               // 0xb8(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamethrowerChargeInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DebugMoveUpAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x1e0 (Full Size[0x738] - InheritedSize[0x558]
class AthenaWorldSettings: public WorldSettings
{
public:
	char                                                         pad0x70_BTKE4[0x70];                               // 0x558(0x70)
	struct Vector2D                                              WorldMax;                                          // 0x5c8(0x8)
	struct Vector2D                                              WorldMapMin;                                       // 0x5d0(0x8)
	struct Vector2D                                              WorldMapMax;                                       // 0x5d8(0x8)
	char                                                         pad0x4_KWQPF[0x4];                                 // 0x5e0(0x4)
	float                                                        AdventureDistanceFromWorldSafeRegionEdgeToKillZone; // 0x5e4(0x4)
	float                                                        ArenaDistanceFromWorldSafeRegionEdgeToKillZone;    // 0x5e8(0x4)
	float                                                        EndOfWorldWarningOffset;                           // 0x5ec(0x4)
	char                                                         pad0x4_C4D2L[0x4];                                 // 0x5f0(0x4)
	float                                                        AdventureDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting; // 0x5f4(0x4)
	float                                                        ArenaDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting; // 0x5f8(0x4)
	int                                                          EndOfWorldWarningLightingIndex;                    // 0x5fc(0x4)
	class BuoyantObjectSpawnParamsDataAsset*                     BuoyantObjectSpawnParams;                          // 0x600(0x8)
	class SeaFortsWorldDataAsset*                                SeaFortsData;                                      // 0x608(0x8)
	class SeaRockDataAsset*                                      SeaRockLocations;                                  // 0x610(0x8)
	struct StringAssetReference                                  TradeRoutes;                                       // 0x618(0x10)
	TArray<struct AthenaStreamedLevelItem>                       ManuallyStreamedLevels;                            // 0x628(0x10)
	class TunnelWorldConfig*                                     TunnelWorldConfig;                                 // 0x638(0x8)
	class SpireStreamedLevelDataAsset*                           SpireLevels;                                       // 0x640(0x8)
	struct KrakenWorldSettingsParams                             KrakenParams;                                      // 0x648(0x1)
	struct TinySharkWorldSettingsParams                          TinySharkParams;                                   // 0x649(0x1)
	char                                                         pad0x6_VG95S[0x6];                                 // 0x64a(0x6)
	struct AIShipWorldSettings                                   AIShipParams;                                      // 0x650(0x18)
	class InvasionLocationsDataAsset*                            InvasionLocationsDataAsset;                        // 0x668(0x8)
	class IslandDataAsset*                                       IslandDataAsset;                                   // 0x670(0x8)
	class PrebakedIslandAsset*                                   PrebakedIslandData;                                // 0x678(0x8)
	class MapTableCanvasDataAsset*                               MapTableCanvasData;                                // 0x680(0x8)
	class VoyageDescDataAsset*                                   TutorialTale;                                      // 0x688(0x8)
	class VoyageDescDataAsset*                                   ScuttleShipVoyageDescAsset;                        // 0x690(0x8)
	float                                                        DevilsShroudPlayerDamageMaxDamage;                 // 0x698(0x4)
	bool                                                         AllowCompanyOnboardingTutorial;                    // 0x69c(0x1)
	bool                                                         AllowContextualTutorial;                           // 0x69d(0x1)
	bool                                                         ShowMapTable;                                      // 0x69e(0x1)
	bool                                                         UseDevDefinition;                                  // 0x69f(0x1)
	bool                                                         EnableGlobalVoyages;                               // 0x6a0(0x1)
	char                                                         pad0x7_S4R4K[0x7];                                 // 0x6a1(0x7)
	class GlobalVoyageOverrideAsset*                             GlobalVoyageOverrideAsset;                         // 0x6a8(0x8)
	TArray<class Class*>                                         NPCOnBeachVoyageCheckpoints;                       // 0x6b0(0x10)
	float                                                        ServerChatMessageStickyTime;                       // 0x6c0(0x4)
	float                                                        SaferSeasServerChatMessageStickyTime;              // 0x6c4(0x4)
	bool                                                         UseGameEventSchedulerRemoteServices;               // 0x6c8(0x1)
	char                                                         pad0x7_G4XUM[0x7];                                 // 0x6c9(0x7)
	class GameEventSchedulerSettingsAsset*                       DefaultGameEventSchedulerSettings;                 // 0x6d0(0x8)
	TArray<struct AthenaWorldSettingsGameEventSchedulerSettingsConfiguration> GameEventSchedulerSettingsConfigurations;          // 0x6d8(0x10)
	class StormServiceAsset*                                     StormServiceSettings;                              // 0x6e8(0x8)
	TArray<struct WorldSafeZone>                                 SafeZonesIncludingRequiresShroudBreaker;           // 0x6f0(0x10)
	TArray<struct WorldSafeZone>                                 SafeZonesExcludingRequiresShroudBreaker;           // 0x700(0x10)
	TArray<struct WorldSafeZone>                                 MainWorldSafeZones;                                // 0x710(0x10)
	TArray<struct WorldSafeZone>                                 OverridingSafeZones;                               // 0x720(0x10)
	char                                                         pad0x8_1MODN[0x8];                                 // 0x730(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_SkellyFort: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x20 (Full Size[0x2b0] - InheritedSize[0x290]
class LookingAtTreasureMapInputComponent: public LookingAtWieldableInputComponent
{
public:
	char                                                         pad0x20_4N10N[0x20];                               // 0x290(0x20)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CrewManifestTrinketLoadoutFinderPolicy: public TrinketLoadoutFinderPolicyBase
{
public:
	char                                                         pad0x10_TU725[0x10];                               // 0x28(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class CircularItemDropRedirectorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7IYB9[0x8];                                 // 0xb8(0x8)
	struct Vector                                                CenterPoint;                                       // 0xc0(0xc)
	float                                                        Radius;                                            // 0xcc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PortalServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealableSceneType: public Object
{
public:
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TaleQuestSpawnOnShipService: public TaleQuestService
{
public:
	class TaleQuestSpawnOnShipServiceDesc*                       ServiceDesc;                                       // 0x60(0x8)
	char                                                         pad0x48_JC8BG[0x48];                               // 0x68(0x48)
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class EnchantedLanternTaleQuestFunctionLibary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SittingActionStateId: public ActionStateId
{
public:
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class InactivityDetectionService: public Object
{
public:
	char                                                         pad0x108_UAX5B[0x108];                             // 0x28(0x108)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestGetCrewShipManifestStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TavernCeremonyInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class WaitForMechanismActivationStep: public TaleQuestStep
{
public:
	class WaitForMechanismActivationStepDesc*                    Desc;                                              // 0x98(0x8)
};


// Size 0x30 (Full Size[0x3d0] - InheritedSize[0x3a0]
class Mechanism: public Actor
{
public:
	char                                                         pad0x10_MU6TH[0x10];                               // 0x3a0(0x10)
	TArray<struct MechanismBinding>                              Bindings;                                          // 0x3b0(0x10)
	char                                                         pad0x10_0IMSI[0x10];                               // 0x3c0(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class MeshMemoryConstraintSettings: public DeveloperSettings
{
public:
	struct StringAssetReference                                  MeshMemoryConstraintFallbackSettings;              // 0x38(0x10)
};


// Size 0x1a8 (Full Size[0x548] - InheritedSize[0x3a0]
class TutorialEventControlledObject: public Actor
{
public:
	char                                                         pad0x8_1QL3V[0x8];                                 // 0x3a0(0x8)
	struct ObjectMessagingHandle                                 ActivateEventHandle;                               // 0x3a8(0x58)
	struct ObjectMessagingHandle                                 DeactivateEventHandle;                             // 0x400(0x58)
	class WwiseEvent*                                            ActivationSfx;                                     // 0x458(0x8)
	class WwiseEvent*                                            FullyActivatedSfx;                                 // 0x460(0x8)
	class WwiseEvent*                                            DeactivationSfx;                                   // 0x468(0x8)
	class WwiseEvent*                                            FullyDeactivatedSfx;                               // 0x470(0x8)
	bool                                                         IsActivated;                                       // 0x478(0x1)
	char                                                         pad0x7_3L109[0x7];                                 // 0x479(0x7)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x480(0xa0)
	class AthenaPlayerController*                                RegisteredController;                              // 0x520(0x8)
	char                                                         pad0x20_MNCPJ[0x20];                               // 0x528(0x20)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class FogBankManagerDataAsset: public DataAsset
{
public:
	TArray<struct FogBankManagerFogBankTemplate>                 FogBankTemplates;                                  // 0x28(0x10)
	struct WeightedProbabilityRangeOfRanges                      TimeBetweenFogBanks;                               // 0x38(0x30)
	float                                                        CheckForNearbyStormsInterval;                      // 0x68(0x4)
	float                                                        FailureRetryTime;                                  // 0x6c(0x4)
	float                                                        MinIslandDistanceFromStormToSpawnInKm;             // 0x70(0x4)
	float                                                        DistanceFromStormToEmergencyFadeOutInKm;           // 0x74(0x4)
	TArray<char>                                                 InvalidIslandTypes;                                // 0x78(0x10)
	TArray<struct Name>                                          InvalidIslandNames;                                // 0x88(0x10)
	TArray<struct FogBankManagerIslandTypesToKeepAwayFrom>       IslandTypesToKeepAwayFrom;                         // 0x98(0x10)
	TArray<struct FogBankManagerIslandNamesToKeepAwayFrom>       IslandNamesToKeepAwayFrom;                         // 0xa8(0x10)
	TArray<char>                                                 IslandTypesThatCannotSupportStormsAndFog;          // 0xb8(0x10)
};


// Size 0x250 (Full Size[0x278] - InheritedSize[0x28]
class PetsAnimationData: public DataAsset
{
public:
	struct PetAnimationDataStructure                             PetAnimations;                                     // 0x28(0x218)
	struct FloatRange                                            LookAtPitchRange;                                  // 0x240(0x10)
	float                                                        LookAtClamp;                                       // 0x250(0x4)
	float                                                        LookAtTimeToComplete;                              // 0x254(0x4)
	float                                                        TransitionFromTurningMovementSpeed;                // 0x258(0x4)
	struct FloatRange                                            PositiveMoodAnimationRange;                        // 0x25c(0x10)
	float                                                        PositiveMoodBlendTime;                             // 0x26c(0x4)
	bool                                                         DefaultAllowHappyReact;                            // 0x270(0x1)
	char                                                         pad0x7_JCGCB[0x7];                                 // 0x271(0x7)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class FixedWaterHeightShipComponent: public ActorComponent
{
public:
	char                                                         pad0x8_K59LK[0x8];                                 // 0xb8(0x8)
	float                                                        RequiredWaterHeight;                               // 0xc0(0x4)
	bool                                                         OffsetFromDefaultWaterHeight;                      // 0xc4(0x1)
	char                                                         pad0xb_669RQ[0xb];                                 // 0xc5(0xb)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class SirenStatuesSelectorConfiguration: public DataAsset
{
public:
	class SirenStatuesSelector*                                  Selector;                                          // 0x28(0x8)
};


// Size 0xa8 (Full Size[0x130] - InheritedSize[0x88]
class AthenaGameInstance: public GameInstance
{
public:
	char                                                         pad0x8_Z9SL8[0x8];                                 // 0x88(0x8)
	class AthenaPlayModeLevelsDataAsset*                         AdditionalPlayModeLevels;                          // 0x90(0x8)
	class AthenaGameContext*                                     GameContext;                                       // 0xa0(0x8)
	char                                                         pad0x88_H67BU[0x88];                               // 0xa8(0x88)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SweepRightAshenLordUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlyingActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class BalanceableWalkwaySprintPressedInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC2ReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class RemoveNPCOnSurfaceStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipFixedSplinesDataAsset: public DataAsset
{
public:
	TArray<struct AggressiveGhostShipFixedSpline>                Splines;                                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EncounterStateInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ShipSpeedBand: public Object
{
public:
	float                                                        MinimumSpeed;                                      // 0x28(0x4)
	char                                                         pad0x4_CZ9PO[0x4];                                 // 0x2c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TunnelsOfTheDamnedPersistentAssets: public DataAsset
{
public:
	TArray<class PersistentAssetCollectionDataAsset*>            AssetCollectionAssets;                             // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ModifiedLoadoutSwitchesDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         WeaponDescs;                                       // 0x28(0x10)
	TArray<Class>                                                WeaponChestClasses;                                // 0x38(0x10)
};


// Size 0x60 (Full Size[0x4a0] - InheritedSize[0x440]
class SailAnimInstance: public AnimInstance
{
public:
	char                                                         pad0x8_X3N1E[0x8];                                 // 0x440(0x8)
	float                                                        Turning;                                           // 0x448(0x4)
	float                                                        Billow;                                            // 0x44c(0x4)
	float                                                        WindStrength;                                      // 0x450(0x4)
	float                                                        Height;                                            // 0x454(0x4)
	float                                                        Falling;                                           // 0x458(0x4)
	float                                                        BillowedWindStrength;                              // 0x45c(0x4)
	float                                                        BillowedSailHalfwayPoint;                          // 0x460(0x4)
	float                                                        HeightTimesThree;                                  // 0x464(0x4)
	float                                                        MinOneMinusHeightAndOne;                           // 0x468(0x4)
	float                                                        MaximumMainSailDrop;                               // 0x46c(0x4)
	float                                                        LaxAnimationFoldUpwardsExplicitTime;               // 0x470(0x4)
	float                                                        LaxAnimationFoldUpwardsAlpha;                      // 0x474(0x4)
	float                                                        LaxAnimationWithWindAlpha;                         // 0x478(0x4)
	float                                                        LaxAnimationWithWindAlphaUnfurledA;                // 0x47c(0x4)
	float                                                        LaxAnimationWithWindAlphaUnfurledB;                // 0x480(0x4)
	float                                                        BillowedFoldAnimationWithWindModulationBillowedAlphaUnfurled; // 0x484(0x4)
	float                                                        BillowedFoldAnimationWithWindModulationLaxAlphaUnfurled; // 0x488(0x4)
	float                                                        BetweenZeroAndHalfBillowedFoldAnimationWithFullWindBlendAlpha; // 0x48c(0x4)
	float                                                        BetweenZeroAndHalfBillowedFoldAnimationWithFullWindAdditiveAlpha; // 0x490(0x4)
	float                                                        BetweenHalfAndOneBillowedFoldAnimationBlendAlpha;  // 0x494(0x4)
	float                                                        TurningMapRangeUnclamped;                          // 0x498(0x4)
	float                                                        PlayRateMultiplier;                                // 0x49c(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CatalogDataAsset: public DataAsset
{
public:
	struct Guid                                                  CatalogId;                                         // 0x28(0x10)
	bool                                                         ExportAsRewardIds;                                 // 0x38(0x1)
	char                                                         pad0x7_ZJ93X[0x7];                                 // 0x39(0x7)
};


// Size 0x30 (Full Size[0x408] - InheritedSize[0x3d8]
class CutsceneTriggerVolume: public Volume
{
public:
	struct FName                                                 CutsceneName;                                      // 0x3d8(0x8)
	bool                                                         SingleUse;                                         // 0x3e0(0x1)
	char                                                         pad0x27_P8CCX[0x27];                               // 0x3e1(0x27)
};


// Size 0x20 (Full Size[0x2a8] - InheritedSize[0x288]
class CombinationLockMechanismTriggerInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x20_AYYPV[0x20];                               // 0x288(0x20)
};


// Size 0x58 (Full Size[0x3f8] - InheritedSize[0x3a0]
class ProjectileLauncherMechanismAction: public Actor
{
public:
	char                                                         pad0x10_YC9O1[0x10];                               // 0x3a0(0x10)
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3b0(0x8)
	char                                                         Mode;                                              // 0x3b8(0x1)
	char                                                         pad0x7_V957S[0x7];                                 // 0x3b9(0x7)
	struct PoolableCollectionMapConfiguration                    ProjectilePoolConfiguration;                       // 0x3c0(0x18)
	TArray<class Actor*>                                         IndependentProjectileLaunchers;                    // 0x3d8(0x10)
	char                                                         pad0x10_9M1I2[0x10];                               // 0x3e8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MemoryReservationInformationBase: public Object
{
public:
};


// Size 0x3b8 (Full Size[0x470] - InheritedSize[0xb8]
class ShipTelemetryComponent: public ActorComponent
{
public:
	char                                                         pad0x3b8_TBX2G[0x3b8];                             // 0xb8(0x3b8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleRemoveStormAvoidanceAreaStep: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class VfxStoryResponseManager: public Actor
{
public:
	class VfxStoryResponseDataAsset*                             VfxStoryResponseDataAsset;                         // 0x3a0(0x8)
	TArray<class Actor*>                                         Emitters;                                          // 0x3a8(0x10)
	float                                                        EmitterValue;                                      // 0x3b8(0x4)
	char                                                         pad0x1c_4Y45W[0x1c];                               // 0x3bc(0x1c)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class HoleDataAsset: public DataAsset
{
public:
	TArray<struct MaxHolePerIslandDataAsset>                     MaxHolePerIslandData;                              // 0x28(0x10)
	int                                                          DefaultMaxHoles;                                   // 0x38(0x4)
	int                                                          MaxNumOverlappingHolesAllowed;                     // 0x3c(0x4)
	bool                                                         AllowHoleOverlapping;                              // 0x40(0x1)
	char                                                         pad0x7_HPKQ3[0x7];                                 // 0x41(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestReactionStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LockableItemStatsRetrievalInterfaceInterface: public Interface
{
public:
};


// Size 0x1c8 (Full Size[0x280] - InheritedSize[0xb8]
class CargoRunParticipantComponent: public ActorComponent
{
public:
	char                                                         pad0x8_8SFYM[0x8];                                 // 0xb8(0x8)
	class UClass*                                                ConditionalStatForBootyHandIn;                     // 0xc0(0x8)
	class UClass*                                                Company;                                           // 0xc8(0x8)
	struct FText                                                 LocationHintText;                                  // 0xd0(0x38)
	bool                                                         UseApproachDirectionOverride;                      // 0x108(0x1)
	char                                                         ApproachDirectionOverride;                         // 0x109(0x1)
	char                                                         pad0x2e_JT193[0x2e];                               // 0x10a(0x2e)
	bool                                                         IsSmugglersRunParticipant;                         // 0x138(0x1)
	char                                                         pad0x3_LYU4V[0x3];                                 // 0x139(0x3)
	float                                                        CrewMaxProximityToCollectFromSmuggler;             // 0x13c(0x4)
	struct FText                                                 CrewNotInProximityTooltipText;                     // 0x140(0x38)
	char                                                         pad0x108_VEHDZ[0x108];                             // 0x178(0x108)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationLODInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InInvasionZone: public EnvQueryTest
{
public:
	float                                                        BufferRadius;                                      // 0x170(0x4)
	char                                                         pad0x4_U0VI6[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_ShouldCurrentActionStatePauseBehavior: public BTDecorator_BaseConditional
{
public:
};


// Size 0x88 (Full Size[0x140] - InheritedSize[0xb8]
class WorldVelocityTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_VAZQP[0x8];                                 // 0xb8(0x8)
	float                                                        SamplingTime;                                      // 0xc0(0x4)
	char                                                         pad0x7c_DA3C1[0x7c];                               // 0xc4(0x7c)
};


// Size 0xf8 (Full Size[0x1b0] - InheritedSize[0xb8]
class MeshAnimatorComponent: public ActorComponent
{
public:
	bool                                                         SyncWithServer;                                    // 0xb8(0x1)
	char                                                         pad0x7_7MOC2[0x7];                                 // 0xb9(0x7)
	TArray<struct MeshAnimatorAnimationEntry>                    Animations;                                        // 0xc0(0x10)
	struct MeshAnimatorSyncData                                  ServerSyncData;                                    // 0xd0(0x10)
	char                                                         pad0x18_FRMNT[0x18];                               // 0xe0(0x18)
	struct MeshAnimatorInstance                                  AnimationInstance;                                 // 0x110(0x70)
	char                                                         pad0x30_W6ZVZ[0x30];                               // 0x180(0x30)
};


// Size 0x1a8 (Full Size[0x548] - InheritedSize[0x3a0]
class StatueThreatBase: public Actor
{
public:
	char                                                         pad0x28_R4GJ3[0x28];                               // 0x3a0(0x28)
	float                                                        HealingPerSecond;                                  // 0x3c8(0x4)
	float                                                        DespawnDelay;                                      // 0x3cc(0x4)
	bool                                                         EnableRadialDamageOnBeginPlay;                     // 0x3d0(0x1)
	char                                                         pad0x7_4RXPR[0x7];                                 // 0x3d1(0x7)
	class SceneComponent*                                        Root;                                              // 0x3f8(0x8)
	class HealthComponent*                                       HealthComponent;                                   // 0x400(0x8)
	class RadialDamagerComponent*                                RadialDamageComponent;                             // 0x408(0x8)
	class SunkenCurseArtefactAudioComponent*                     AudioComponent;                                    // 0x410(0x8)
	class SunkenCurseArtefactVfxComponent*                       VFXComponent;                                      // 0x418(0x8)
	class SunkenCurseArtefactDynamicMaterialComponent*           DamageMaterialComponent;                           // 0x420(0x8)
	class ActorDamageableComponent*                              DamageableComponent;                               // 0x428(0x8)
	char                                                         pad0x118_A6EOA[0x118];                             // 0x430(0x118)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BriggableInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x3a8] - InheritedSize[0x3a0]
class ServerPerformanceReplicator: public Actor
{
public:
	float                                                        ServerAverageFPS;                                  // 0x3a0(0x4)
	float                                                        ServerAverageMS;                                   // 0x3a4(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class OpenQuickMenuNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x230 (Full Size[0x258] - InheritedSize[0x28]
class HangingParamsDataAsset: public DataAsset
{
public:
	struct HangingActionStateParams                              HangingStateParams;                                // 0x28(0x230)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ReapersChestAISpawnerServiceParams: public DataAsset
{
public:
	class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x28(0x8)
	TArray<struct ReapersChestAISpawnerServiceData>              ReapersChestAISpawnerServiceData;                  // 0x30(0x10)
	class EnvQuery*                                              FindSpawnPosQuery_Land;                            // 0x40(0x8)
	class EnvQuery*                                              FindSpawnPosQuery_Ship;                            // 0x48(0x8)
	int                                                          ReapersChestAIRegionCleanupDelay;                  // 0x50(0x4)
	char                                                         pad0x4_UE70V[0x4];                                 // 0x54(0x4)
};


// Size 0x38 (Full Size[0x3d8] - InheritedSize[0x3a0]
class AthenaContestTavern: public Actor
{
public:
	TArray<class SpawnLocation*>                                 TavernSpawnPoints;                                 // 0x3a0(0x10)
	TArray<class Actor*>                                         TavernLevelActorsToPrepare;                        // 0x3b0(0x10)
	char                                                         pad0x18_GKCR2[0x18];                               // 0x3c0(0x18)
};


// Size 0x518 (Full Size[0x5d0] - InheritedSize[0xb8]
class CanvasWorldMapComponent: public ActorComponent
{
public:
	int                                                          CanvasWidth;                                       // 0xb8(0x4)
	int                                                          CanvasHeight;                                      // 0xbc(0x4)
	class UClass*                                                MapClass;                                          // 0xc0(0x8)
	int                                                          NumGridSquares;                                    // 0xc8(0x4)
	int                                                          MaxUpdateDist;                                     // 0xcc(0x4)
	float                                                        SquareTrackedAIActorUpdateDist;                    // 0xd0(0x4)
	float                                                        SquareShipUpdateDist;                              // 0xd4(0x4)
	float                                                        ShipUpdateRot;                                     // 0xd8(0x4)
	char                                                         pad0x4_BRJ3T[0x4];                                 // 0xdc(0x4)
	TArray<struct CanvasWorldMapShipIcons>                       ShipIcons;                                         // 0xe0(0x10)
	class Texture*                                               OffscreenArrowTexture;                             // 0xf0(0x8)
	class Texture*                                               CompassTexture;                                    // 0xf8(0x8)
	struct Vector2D                                              CompassPosition;                                   // 0x100(0x8)
	class Font*                                                  Font;                                              // 0x108(0x8)
	struct Vector2D                                              GridLabelScreenMin;                                // 0x110(0x8)
	struct Vector2D                                              GridLabelEdgeOffset;                               // 0x118(0x8)
	float                                                        GridLabelSize;                                     // 0x120(0x4)
	float                                                        IslandLabelSize;                                   // 0x124(0x4)
	float                                                        IslandLabelFadeoutZoom;                            // 0x128(0x4)
	struct CanvasLerpData                                        IslandLabelFadeData;                               // 0x12c(0x10)
	struct CanvasLerpData                                        OffscreenIndicatorFadeData;                        // 0x13c(0x10)
	struct Box2D                                                 OffscreenIndicatorSafe;                            // 0x14c(0x14)
	struct Box2D                                                 OffscreenIndicatorBounds;                          // 0x160(0x14)
	float                                                        OffscreenArrowOffset;                              // 0x174(0x4)
	struct LinearColor                                           BackgroundColour;                                  // 0x178(0x10)
	TArray<struct CanvasWorldMapReaperTrackedBootItemIcon>       ReapersMarkBootyItemIcons;                         // 0x188(0x10)
	struct Vector2D                                              ReapersMarkBootyItemOffset;                        // 0x198(0x8)
	class Texture*                                               CrosshairTexture;                                  // 0x1a0(0x8)
	class Texture*                                               CrosshairEmptyTexture;                             // 0x1a8(0x8)
	class Texture*                                               PinTexture;                                        // 0x1b0(0x8)
	class Texture*                                               PinTextureHighlight;                               // 0x1b8(0x8)
	class Texture*                                               PathDropTexture;                                   // 0x1c0(0x8)
	float                                                        LineTextureWidth;                                  // 0x1c8(0x4)
	float                                                        LineTextureLength;                                 // 0x1cc(0x4)
	TArray<struct CanvasWorldMapShipIcons>                       TrackedShipIcons;                                  // 0x1d0(0x10)
	class Texture*                                               AllianceFlagIcon;                                  // 0x1e0(0x8)
	TArray<class Texture*>                                       ReapersMarkFlagIcons;                              // 0x1e8(0x10)
	TArray<class Texture*>                                       ReapersBonesIcons;                                 // 0x1f8(0x10)
	class Texture*                                               ReapersMarkShipIcon;                               // 0x208(0x8)
	class Texture*                                               MaxGuildGradeIcon;                                 // 0x210(0x8)
	TArray<struct CanvasWorldMapAIActorIcons>                    TrackedAIActorIcons;                               // 0x218(0x10)
	struct Vector2D                                              ShipFlagOverlayOffset;                             // 0x228(0x8)
	struct Vector2D                                              SecondaryShipFlagOverlayOffset;                    // 0x230(0x8)
	float                                                        ShipFlagOverlayScale;                              // 0x238(0x4)
	struct Vector2D                                              MarkerFlagOverlayOffset;                           // 0x23c(0x8)
	float                                                        MarkerFlagOverlayScale;                            // 0x244(0x4)
	struct Vector2D                                              IconOverlayOffset;                                 // 0x248(0x8)
	struct Vector2D                                              SecondaryFactionIconOverlayOffset;                 // 0x250(0x8)
	struct Vector2D                                              SecondaryGuildIconOverlayOffset;                   // 0x258(0x8)
	struct Vector2D                                              TertiaryGuildIconOverlayOffset;                    // 0x260(0x8)
	class IslandEventHUDData*                                    IslandEventHUDData;                                // 0x268(0x8)
	TArray<struct FactionStreakIcon>                             MaxStreakFactionsIconInfo;                         // 0x270(0x10)
	TArray<struct FactionStreakIcon>                             FactionsIconInfo;                                  // 0x280(0x10)
	struct CanvasWorldMapTextBanner                              RitualsCompletedBanner;                            // 0x290(0x48)
	TArray<struct CanvasWorldMapShipLocation>                    TrackedShips;                                      // 0x2d8(0x10)
	TArray<struct ReapersMarkTrackedBootyItemInfo>               TrackedBootyItemInfos;                             // 0x2e8(0x10)
	TArray<struct WorldMapAILocation>                            TrackedAIActors;                                   // 0x2f8(0x10)
	class IterativeCanvasRenderTarget2D*                         RenderTarget;                                      // 0x308(0x8)
	char                                                         pad0x98_2CNTY[0x98];                               // 0x310(0x98)
	class MapTableCanvasDataAsset*                               CanvasDataAsset;                                   // 0x3a8(0x8)
	char                                                         pad0x220_TTQMO[0x220];                             // 0x3b0(0x220)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class RevealerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_1FTOY[0x8];                                 // 0xb8(0x8)
	bool                                                         IsMultiplierActive;                                // 0xc0(0x1)
	char                                                         pad0x3_2YPYP[0x3];                                 // 0xc1(0x3)
	float                                                        VisibilityDistanceAddition;                        // 0xc4(0x4)
	float                                                        AnimationDistanceAddition;                         // 0xc8(0x4)
	float                                                        VisibilityAdditionChangeSpeed;                     // 0xcc(0x4)
	float                                                        RevealStartTime;                                   // 0xd0(0x4)
	char                                                         pad0x4_OX0LD[0x4];                                 // 0xd4(0x4)
	class UClass*                                                SceneType;                                         // 0xd8(0x8)
	class Object*                                                TargetGameStateObject;                             // 0xe0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldSettingsViewInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0x130] - InheritedSize[0xb8]
class CharacterAnimaticSettingsComponent: public ActorComponent
{
public:
	char                                                         pad0x70_0PMOZ[0x70];                               // 0xb8(0x70)
	bool                                                         HasPlayedWakeUpAnimation;                          // 0x128(0x1)
	char                                                         pad0x7_7UZT1[0x7];                                 // 0x129(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HiddenActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SetPuzzleVaultResetOnLeaveStep: public TaleQuestStep
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class StoryDrivenFogBankDataAsset: public DataAsset
{
public:
	struct FeatureFlag                                           Feature;                                           // 0x28(0xc)
	char                                                         pad0x4_ANBHE[0x4];                                 // 0x34(0x4)
	TArray<struct FogBankStoryRelatedSettings>                   StoryResponses;                                    // 0x38(0x10)
	TArray<class StoryDrivenFogBankDataAsset*>                   AssetsList;                                        // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewVoyageProviderInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TaleNPCOnShipService: public TaleQuestService
{
public:
	char                                                         pad0x50_VJKRF[0x50];                               // 0x60(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerBuriedItemsMapBundleInteractionComponentInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class LandmarkTreasureLocationsDataAsset: public DataAsset
{
public:
	TArray<struct LandmarkTreasureLocationEntry>                 Landmarks;                                         // 0x28(0x10)
};


// Size 0x208 (Full Size[0x2c0] - InheritedSize[0xb8]
class CompanyNPCComponent: public ActorComponent
{
public:
	char                                                         pad0x38_8YIVU[0x38];                               // 0xb8(0x38)
	class UClass*                                                Company;                                           // 0xf0(0x8)
	bool                                                         OverrideCompanyForRewards;                         // 0xf8(0x1)
	bool                                                         CanSellToInSaferSeas;                              // 0xf9(0x1)
	bool                                                         PrioritizeCompanyShopOverEmissaryMaxRankQuest;     // 0xfa(0x1)
	char                                                         pad0x5_48ENH[0x5];                                 // 0xfb(0x5)
	class UClass*                                                OverrideRewardCompany;                             // 0x100(0x8)
	struct FText                                                 SellSpecificItemText;                              // 0x108(0x38)
	struct FText                                                 OpenCompanyShopText;                               // 0x140(0x38)
	struct FName                                                 NPCName;                                           // 0x178(0x8)
	class ShopDesc*                                              ShopDesc;                                          // 0x180(0x8)
	TArray<struct ShopDescOverride>                              ShopDescOverrides;                                 // 0x188(0x10)
	float                                                        HoldToHandInBootyDuration;                         // 0x198(0x4)
	char                                                         pad0x4_8YPTY[0x4];                                 // 0x19c(0x4)
	class UClass*                                                ConditionalStatForBootyHandIn;                     // 0x1a0(0x8)
	char                                                         pad0x100_OOYDD[0x100];                             // 0x1a8(0x100)
	TArray<class Class*>                                         SpecifiedItemsToPurchase;                          // 0x2a8(0x10)
	char                                                         pad0x8_HI3MD[0x8];                                 // 0x2b8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleNPCOnShipServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class WaveBasedMechanismVisualController: public Actor
{
public:
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3a0(0x8)
	TArray<class Actor*>                                         WaveVisualActors;                                  // 0x3a8(0x10)
	struct FName                                                 StaticMeshDynamicMaterialTag;                      // 0x3b8(0x8)
	class CurveFloat*                                            ScalarParameterCurve;                              // 0x3c0(0x8)
	struct FName                                                 MaterialScalarParameterName;                       // 0x3c8(0x8)
	float                                                        NewWaveDelay;                                      // 0x3d0(0x4)
	int                                                          WaveIndex;                                         // 0x3d4(0x4)
	char                                                         pad0x10_XO4IP[0x10];                               // 0x3d8(0x10)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x3e8(0x10)
	char                                                         pad0x10_VSSBB[0x10];                               // 0x3f8(0x10)
	TArray<class MaterialInstanceDynamic*>                       MaterialsToTransition;                             // 0x408(0x10)
	char                                                         pad0x8_IK8D2[0x8];                                 // 0x418(0x8)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class HullDamagePointProxy: public Object
{
public:
	char                                                         pad0x8_Z0C9E[0x8];                                 // 0x28(0x8)
	class RepairableComponent*                                   Repairable;                                        // 0x30(0x8)
	char                                                         pad0x80_ST218[0x80];                               // 0x38(0x80)
};


// Size 0x218 (Full Size[0x2d0] - InheritedSize[0xb8]
class HitRegSnapshotComponent: public ActorComponent
{
public:
	char                                                         pad0x8_9E7JC[0x8];                                 // 0xb8(0x8)
	struct HitRegProjectileSnapshotData                          SnapshotData;                                      // 0xc0(0x180)
	struct HitRegSnapshotDisplaySettings                         ServerDisplaySettings;                             // 0x240(0x6)
	char                                                         pad0x2_SVWC6[0x2];                                 // 0x246(0x2)
	float                                                        DistanceToDisplayMessages;                         // 0x298(0x4)
	char                                                         pad0x34_YUL74[0x34];                               // 0x29c(0x34)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterCameraStablizationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_SharedResource_AggressiveGhostShip_ghost_ship_sails_captain_01_a: public SandboxPerformanceConstraintSharedResourceType
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestGetNPCOnIslandStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class StatusResponseSoak: public StatusResponse
{
public:
};


// Size 0x38 (Full Size[0x98] - InheritedSize[0x60]
class TaleAggressiveGhostShipEncounterService: public TaleQuestService
{
public:
	char                                                         pad0x10_V42LA[0x10];                               // 0x60(0x10)
	class TaleAggressiveGhostShipEncounterServiceDesc*           ServiceDesc;                                       // 0x70(0x8)
	class AggressiveGhostShipsEncounter*                         ActiveGhostShipEncounter;                          // 0x78(0x8)
	char                                                         pad0x18_9Y9ND[0x18];                               // 0x80(0x18)
};


// Size 0x138 (Full Size[0x1f0] - InheritedSize[0xb8]
class IslandMechanismSelectionComponent: public ActorComponent
{
public:
	TArray<class MechanismGroup*>                                MechanismGroups;                                   // 0xb8(0x10)
	TArray<struct FeatureToggledMechanismGroups>                 FeatureToggledMechanismGroups;                     // 0xc8(0x10)
	float                                                        CoolDownDuration;                                  // 0xd8(0x4)
	bool                                                         EnableRandomSelection;                             // 0xdc(0x1)
	char                                                         pad0x3_7PB40[0x3];                                 // 0xdd(0x3)
	struct WeightedProbabilityRangeOfRanges                      MechanismGroupsToSelect;                           // 0xe0(0x30)
	TArray<class MechanismGroup*>                                SelectedMechanismGroups;                           // 0x110(0x10)
	char                                                         pad0xd0_6EOXX[0xd0];                               // 0x120(0xd0)
};


// Size 0x50 (Full Size[0x320] - InheritedSize[0x2d0]
class TeleportLocationComponent: public SceneComponent
{
public:
	struct FName                                                 FeatureFlagToBeIncluded;                           // 0x2d0(0x8)
	struct FName                                                 FeatureFlagToBeExcluded;                           // 0x2d8(0x8)
	struct TeleportLocation                                      TeleportLocation;                                  // 0x2e0(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SPC_Activity_AggressiveGhostShip_DarkCrystal: public SandboxPerformanceConstraintActivityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealableServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimatedCosmeticItemInterface: public Interface
{
public:
};


// Size 0x168 (Full Size[0x190] - InheritedSize[0x28]
class EncounterService: public Object
{
public:
	char                                                         pad0x10_WJ0O1[0x10];                               // 0x28(0x10)
	TArray<struct Encounter>                                     Encounters;                                        // 0x38(0x10)
	struct EncounterListenerData                                 EncounterListenerData;                             // 0x48(0x40)
	struct EncounterServiceParams                                EncounterParams;                                   // 0x88(0x20)
	char                                                         pad0xe8_UWOEX[0xe8];                               // 0xa8(0xe8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_OccupiedLocationsInRegion: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConcealingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ParticleSystemServiceInterface: public Interface
{
public:
};


// Size 0x180 (Full Size[0x2c0] - InheritedSize[0x140]
class RepairableComponent: public InteractableComponent
{
public:
	char                                                         pad0x48_ER10N[0x48];                               // 0x140(0x48)
	float                                                        InteractionPointDepthOffset;                       // 0x188(0x4)
	float                                                        MaximumRepairAngleToRepairer;                      // 0x18c(0x4)
	float                                                        MaximumRepairDistance;                             // 0x190(0x4)
	float                                                        RepairTime;                                        // 0x194(0x4)
	class UClass*                                                RepairType;                                        // 0x198(0x8)
	class SceneComponent*                                        RepairMountParent;                                 // 0x1a0(0x8)
	char                                                         pad0x8_2MNP8[0x8];                                 // 0x1a8(0x8)
	struct Transform                                             RepairMountOffset;                                 // 0x1b0(0x30)
	struct FName                                                 RepairMountSocket;                                 // 0x1e0(0x8)
	class UClass*                                                AIInteractionType;                                 // 0x1e8(0x8)
	struct Vector                                                AIInteractionOffset;                               // 0x1f0(0xc)
	int                                                          MaxDamageLevel;                                    // 0x1fc(0x4)
	TArray<struct RepairableComponentMaxDamageLevelOverride>     MaxDamageLevelOverrides;                           // 0x200(0x10)
	struct RepairableAuthoritiveRepairState                      AuthorityRepairableState;                          // 0x210(0x18)
	char                                                         RepairableState;                                   // 0x228(0x1)
	char                                                         pad0x3_IECMW[0x3];                                 // 0x229(0x3)
	int                                                          DamageLevel;                                       // 0x22c(0x4)
	char                                                         InteractionState;                                  // 0x230(0x1)
	char                                                         pad0x8f_4QEIU[0x8f];                               // 0x231(0x8f)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class ControllablesResponseHandlerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CLMAF[0x8];                                 // 0xb8(0x8)
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class StatProgressStepDesc: public TaleQuestStepDesc
{
public:
	struct PlayerStat                                            Stat;                                              // 0x80(0x4)
	char                                                         pad0x4_Y3HP5[0x4];                                 // 0x84(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class FeedingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HV93A[0x8];                                 // 0xb8(0x8)
	TArray<char>                                                 ValidFeedableTypes;                                // 0xc0(0x10)
	float                                                        FeedTime;                                          // 0xd0(0x4)
	char                                                         pad0x4_L8JCN[0x4];                                 // 0xd4(0x4)
	struct FeedStruct                                            FeedStruct;                                        // 0xd8(0x10)
	class Actor*                                                 LastActorToBeFedBy;                                // 0xe8(0x8)
	bool                                                         AlwaysDescribe;                                    // 0xf0(0x1)
	char                                                         pad0x1f_MS2K9[0x1f];                               // 0xf1(0x1f)
};


// Size 0x178 (Full Size[0x518] - InheritedSize[0x3a0]
class IslandData: public Actor
{
public:
	char                                                         pad0x10_WQV3I[0x10];                               // 0x3a0(0x10)
	class IslandAnnouncementComponent*                           IslandAnnouncementComponent;                       // 0x3b0(0x8)
	class IslandBoundsComponent*                                 IslandBoundsComponent;                             // 0x3b8(0x8)
	class IslandReservationComponent*                            IslandReservationComponent;                        // 0x3c0(0x8)
	class SphereComponent*                                       IslandTriggerComponent;                            // 0x3c8(0x8)
	class SphereComponent*                                       IslandSafeZoneComponent;                           // 0x3d0(0x8)
	struct FName                                                 IslandName;                                        // 0x3d8(0x8)
	char                                                         IslandType;                                        // 0x3e0(0x1)
	char                                                         pad0x7_ZK757[0x7];                                 // 0x3e1(0x7)
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3e8(0x10)
	TArray<class ShipSpawnLocation*>                             AssociatedShipSpawnLocations;                      // 0x3f8(0x10)
	struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x408(0xa0)
	struct Vector                                                CompassDirectionIslandCentre;                      // 0x4a8(0xc)
	char                                                         pad0x4_PFY2S[0x4];                                 // 0x4b4(0x4)
	class AICreatureMovementModifierParamsDataAsset*             PetMovementParamsData;                             // 0x4b8(0x8)
	float                                                        ShipDiveAndResurfaceExclusionZoneRadius;           // 0x4c0(0x4)
	char                                                         pad0x44_B4ARC[0x44];                               // 0x4c4(0x44)
	class IslandSalvageSpawnerManager*                           IslandSalvageSpawnerManager;                       // 0x508(0x8)
	char                                                         pad0x8_CYVG6[0x8];                                 // 0x510(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ActivateSpawnerVaultStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewLockableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BaseContainerContentSpawner: public DataAsset
{
public:
	struct FeatureFlag                                           FeatureFlag;                                       // 0x28(0xc)
	char                                                         pad0x4_SBWEC[0x4];                                 // 0x34(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FiredFromCannonActionStateId: public FiredFromActorActionStateId
{
public:
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventStartParticleSystem: public LandmarkReactionEvent
{
public:
	struct FName                                                 ComponentName;                                     // 0x58(0x8)
	int                                                          ComponentIndex;                                    // 0x60(0x4)
	char                                                         pad0x4_Q8Z1F[0x4];                                 // 0x64(0x4)
	class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class NPCDialogConditionalTextHeader: public NPCDialogHeader
{
public:
	TArray<class NPCDialogConditionalText*>                      Text;                                              // 0x28(0x10)
	struct FText                                                 DefaultText;                                       // 0x38(0x38)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleEnchantedSpyglassServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class UClass*                                                EnchantedSpyglassDesc;                             // 0x30(0x8)
};


// Size 0x78 (Full Size[0x308] - InheritedSize[0x290]
class WaterBarrelInputComponent: public LookAtOffsetInputComponent
{
public:
	class WaterBarrel*                                           WaterBarrel;                                       // 0x290(0x8)
	char                                                         pad0x70_P44J8[0x70];                               // 0x298(0x70)
};


// Size 0x1e8 (Full Size[0x2c0] - InheritedSize[0xd8]
class NarratedCompassDirectionComponent: public NarratedAccessibilityComponent
{
public:
	float                                                        YawThreshold;                                      // 0xd8(0x4)
	char                                                         pad0x16c_3AAG6[0x16c];                             // 0xdc(0x16c)
	class Actor*                                                 Wielder;                                           // 0x258(0x8)
	char                                                         pad0x60_C3DL8[0x60];                               // 0x260(0x60)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ShipLiveryDescAsset: public ShipPartDescAsset
{
public:
	struct ShipLivery                                            ShipLivery;                                        // 0x28(0x20)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AchievementReward: public Reward
{
public:
	char                                                         pad0x8_NKHSA[0x8];                                 // 0x28(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class SeasonXPReward: public Reward
{
public:
	char                                                         pad0x8_M74KO[0x8];                                 // 0x28(0x8)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class ShantyUnlockDesc: public EntitlementDesc
{
public:
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventCallInterfaceStopReaction: public LandmarkReactionEvent
{
public:
	char                                                         RunLocation;                                       // 0x58(0x1)
	char                                                         pad0x7_9MT3Y[0x7];                                 // 0x59(0x7)
};


// Size 0x80 (Full Size[0x3b0] - InheritedSize[0x330]
class InterpolatingMountpointComponent: public MountpointComponent
{
public:
	float                                                        InterpolateSpeed;                                  // 0x330(0x4)
	float                                                        MaximumDistance;                                   // 0x334(0x4)
	struct Vector                                                RelativeSnapLocation;                              // 0x338(0xc)
	float                                                        RelativeYawToUseExtraTransform;                    // 0x344(0x4)
	float                                                        RelativeYawRangeToUseExtraTransform;               // 0x348(0x4)
	struct Vector                                                ExtraTranslation;                                  // 0x34c(0xc)
	struct Rotator                                               ExtraRotation;                                     // 0x358(0xc)
	bool                                                         UseExtraTransform;                                 // 0x364(0x1)
	char                                                         pad0x4b_XEKBO[0x4b];                               // 0x365(0x4b)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CaptainCurtainsPartDescAsset: public ShipPartDescAsset
{
public:
	struct CaptainCurtainsPartDesc                               CaptainCurtainsPartDesc;                           // 0x28(0x20)
};


// Size 0x50 (Full Size[0x310] - InheritedSize[0x2c0]
class SovereignNPCComponent: public CompanyNPCComponent
{
public:
	char                                                         pad0x8_DAP9T[0x8];                                 // 0x2c0(0x8)
	TArray<struct AssociatedCompanies>                           AssociatedCompanies;                               // 0x2c8(0x10)
	class UClass*                                                DefaultFlotsamCompanyTarget;                       // 0x2d8(0x8)
	class UClass*                                                GuardiansFlotsamCompanyTarget;                     // 0x2e0(0x8)
	TArray<Class>                                                GuardianRejectedFlotsamItems;                      // 0x2e8(0x10)
	class SovereignData*                                         SovereignData;                                     // 0x2f8(0x8)
	TArray<class Class*>                                         FeatureFilteredAssociatedCompanies;                // 0x300(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsWearingClothingStatConditional: public StatCondition
{
public:
	TArray<class Class*>                                         Clothes;                                           // 0x28(0x10)
	int                                                          MinimumRequiredItems;                              // 0x38(0x4)
	char                                                         pad0x4_Y7VUX[0x4];                                 // 0x3c(0x4)
};


// Size 0x28 (Full Size[0x1a8] - InheritedSize[0x180]
class OptInDamageableComponent: public DamageableComponent
{
public:
	char                                                         pad0x8_BUMW8[0x8];                                 // 0x180(0x8)
	bool                                                         EnableDamageFilteringByType;                       // 0x188(0x1)
	char                                                         pad0x7_SLYER[0x7];                                 // 0x189(0x7)
	TArray<class Class*>                                         AllowedDamagers;                                   // 0x190(0x10)
	char                                                         pad0x8_IRCA2[0x8];                                 // 0x1a0(0x8)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class NotSaferSeasRequirement: public SpawnRequirement
{
public:
};


// Size 0xc8 (Full Size[0x1c8] - InheritedSize[0x100]
class AmmoEffectsComponent: public MaterialManipulationComponent
{
public:
	class WwiseEvent*                                            StartLoopingSfx;                                   // 0x100(0x8)
	class WwiseEvent*                                            StopLoopingSfx;                                    // 0x108(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x110(0x8)
	TArray<class AmmoBaseEffect*>                                AmmoEffects;                                       // 0x118(0x10)
	struct AmmoEffectState                                       AmmoEffectState;                                   // 0x178(0x18)
	char                                                         pad0x38_Q0O6P[0x38];                               // 0x190(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_FireRock_Thrown: public ImpactProjectileId
{
public:
};


// Size 0xe0 (Full Size[0x3b8] - InheritedSize[0x2d8]
class PiratePreviewComponentFrontend: public PiratePreviewComponent
{
public:
	class AnimationDataStore*                                    AnimationDataStore;                                // 0x2d8(0x8)
	TArray<struct EmoteDataEntryFrontend>                        EmoteAnimData;                                     // 0x300(0x10)
	struct PirateDescription                                     CurrentPirateDescription;                          // 0x310(0x80)
	TArray<class Class*>                                         CurrentPirateOutfit;                               // 0x390(0x10)
	class UClass*                                                ThirdPersonAnimSetDataId;                          // 0x3a0(0x8)
	class PirateSelector*                                        PirateSelectorComponent;                           // 0x3a8(0x8)
	char                                                         pad0x8_ADBHK[0x8];                                 // 0x3b0(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AbsorbsLiquidStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x88 (Full Size[0x100] - InheritedSize[0x78]
class MysteriousNotesRadialContentRule: public RadialContentRule
{
public:
	float                                                        RadialIconScale;                                   // 0x78(0x4)
	struct Vector2D                                              RadialIconOffset;                                  // 0x7c(0x8)
	char                                                         pad0x54_3N45W[0x54];                               // 0x84(0x54)
	TArray<struct Guid>                                          MappedNoteIDs;                                     // 0xd8(0x10)
	char                                                         pad0x18_GUADQ[0x18];                               // 0xe8(0x18)
};


// Size 0x90 (Full Size[0x630] - InheritedSize[0x5a0]
class ShipTrinketMountpointManagerComponent: public TrinketMountpointManagerComponent
{
public:
	char                                                         pad0x10_RIS0L[0x10];                               // 0x5a0(0x10)
	struct MountpointWaterLevelParams                            MountpointWaterLevelParams;                        // 0x5b0(0xc)
	char                                                         pad0x74_D00PO[0x74];                               // 0x5bc(0x74)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Cloth: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x290] - InheritedSize[0x290]
class AttachedToObjectInputComponent: public LookAtOffsetInputComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LockMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0xa0 (Full Size[0x150] - InheritedSize[0xb0]
class AddItemToCollectorsChestStepDesc: public MutateCollectorsChestStepDesc
{
public:
	struct QuestVariableClass                                    ItemToStore;                                       // 0xb0(0x30)
	struct QuestVariableActor                                    SpawnedItemInStorage;                              // 0xe0(0x30)
	bool                                                         TrackItem;                                         // 0x110(0x1)
	bool                                                         MarkItemAsCritical;                                // 0x111(0x1)
	char                                                         pad0x6_1ZGAE[0x6];                                 // 0x112(0x6)
	struct FText                                                 CriticalActorLostMessage;                          // 0x118(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Goods: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class TaleQuestAnyStep: public TaleQuestParallelStep
{
public:
	char                                                         pad0x8_F7RBK[0x8];                                 // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShip: public ShipSize
{
public:
};


// Size 0x8 (Full Size[0x150] - InheritedSize[0x148]
class WieldableInteractableComponent: public ActionRulesInteractableComponent
{
public:
	class WieldableItem*                                         WieldableItem;                                     // 0x148(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipPassiveGameEventType: public GameEventType
{
public:
};


// Size 0x70 (Full Size[0x148] - InheritedSize[0xd8]
class NPCDialogOptionNoUIPurchase: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	struct Guid                                                  CatalogId;                                         // 0x110(0x10)
	struct Guid                                                  OfferId;                                           // 0x120(0x10)
	class PopUpMessageDesc*                                      OfferTriggeredPopupDesc;                           // 0x130(0x8)
	class Controller*                                            Interactor;                                        // 0x138(0x8)
	char                                                         pad0x8_TWNZ6[0x8];                                 // 0x140(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FallDamagePreventedStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_MoltenFireball: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsPlayModeStatCondition: public StatCondition
{
public:
	char                                                         PlayMode;                                          // 0x28(0x1)
	char                                                         pad0x7_IA5MP[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemInfoCaptainsLogDataCacheMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Ingesting_RegurgitateTarget: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanPerformEmoteRadialContext: public RadialContextBase
{
public:
};


// Size 0x1b0 (Full Size[0x480] - InheritedSize[0x2d0]
class LaunchableShotActionComponent: public ItemActionComponent
{
public:
	bool                                                         InterruptActionOnProjectileDestroyed;              // 0x2d0(0x1)
	char                                                         pad0x7_ANIQT[0x7];                                 // 0x2d1(0x7)
	class LaunchableProjectile*                                  CurrentProjectile;                                 // 0x2d8(0x8)
	char                                                         pad0x4_SHTFV[0x4];                                 // 0x2e0(0x4)
	struct Guid                                                  LastProjectileId;                                  // 0x2e4(0x10)
	bool                                                         OverrideProjectileCollisionBeforeFiring;           // 0x2f4(0x1)
	char                                                         pad0x3_CPJ35[0x3];                                 // 0x2f5(0x3)
	struct CollisionProfileName                                  ProjectileCollisionProfileOverride;                // 0x2f8(0x8)
	struct CollisionProfileName                                  ProjectileCollisionProfile;                        // 0x300(0x8)
	class UClass*                                                ProjectileType;                                    // 0x308(0x8)
	int                                                          AmmoCost;                                          // 0x310(0x4)
	bool                                                         ShouldProjectileAttachToWeaponOnSpawn;             // 0x314(0x1)
	bool                                                         ShouldConsumeAmmoWhenUsedByAI;                     // 0x315(0x1)
	bool                                                         ShouldConsumeAmmoWhenUsedByPlayers;                // 0x316(0x1)
	char                                                         pad0x1_YO79B[0x1];                                 // 0x317(0x1)
	struct Vector                                                ProjectileRelativeAimOffset;                       // 0x318(0xc)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0x324(0x4)
	char                                                         pad0x40_BQKLC[0x40];                               // 0x328(0x40)
	class LaunchableShotComponentAudioParams*                    LaunchableAudioParams;                             // 0x368(0x8)
	struct WwiseEmitterCreationParams                            FireProjectileSfxParams;                           // 0x370(0x28)
	struct FName                                                 MuzzleFireVFXSocketName;                           // 0x398(0x8)
	class Object*                                                MuzzleFireVfxFirst;                                // 0x3a0(0x8)
	class Object*                                                MuzzleFireVfxThird;                                // 0x3a8(0x8)
	class Object*                                                MuzzleFireVfxLocal;                                // 0x3b0(0x8)
	class ForceFeedbackEffect*                                   ActionFireForceFeedback;                           // 0x3b8(0x8)
	struct FName                                                 ActionFireForceFeedbackTag;                        // 0x3c0(0x8)
	char                                                         pad0x58_VCMUB[0x58];                               // 0x3c8(0x58)
	struct LaunchableProjectileState                             LaunchableProjectileState;                         // 0x420(0x40)
	char                                                         pad0x20_BZRGA[0x20];                               // 0x460(0x20)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DealtDamageStatsTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneType_Murk: public WaterModifierZoneType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShortRangeGunAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HasAnyEntitlementNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         Entitlements;                                      // 0x30(0x10)
};


// Size 0x20 (Full Size[0x430] - InheritedSize[0x410]
class PressurePlateMechanismProgressTrigger: public PressurePlateMechanismTriggerBase
{
public:
	float                                                        ProgressionAmount;                                 // 0x410(0x4)
	char                                                         pad0x1c_FNFIJ[0x1c];                               // 0x414(0x1c)
};


// Size 0x8 (Full Size[0xe8] - InheritedSize[0xe0]
class WaitForAshenLordHealthStageStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
	int                                                          RequiredHealthStage;                               // 0xe0(0x4)
	char                                                         pad0x4_F9WGN[0x4];                                 // 0xe4(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TestSailDynamicsDesc: public BaseSailDynamicsDesc
{
public:
	char                                                         pad0x18_7JDE7[0x18];                               // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MovedByPortableHarpoonGrappleActionStateId: public MovedByActorActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SunkenKingdomShrineGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x2a8] - InheritedSize[0x2a8]
class TestPlayerTelemetryComponentNoEvents: public PlayerTelemetryComponent
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class OpenableItemMeshAnimationReactionComponent: public OpenableItemReactionComponent
{
public:
	TArray<struct OpenableItemMeshAnimationReactionComponentAnimationNameAndSfxCueSet> AnimNameSets;                                      // 0xc8(0x10)
	class MeshAnimatorComponent*                                 MeshAnimatorComponent;                             // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBoilingWaterNoSplash: public ImpactProjectileId
{
public:
};


// Size 0x8a0 (Full Size[0x14f0] - InheritedSize[0xc50]
class AthenaAICharacter: public AthenaCharacter
{
public:
	char                                                         pad0xb8_WJ70Y[0xb8];                               // 0xc50(0xb8)
	class UClass*                                                DefaultAmmoItemDescType;                           // 0xd08(0x8)
	class UClass*                                                DefaultInteractableAmmoItemDescType;               // 0xd10(0x8)
	class CurveFloat*                                            DistanceInMToCannonShotHitChanceCurve;             // 0xd18(0x8)
	bool                                                         AimNoiseEnabled;                                   // 0xd20(0x1)
	char                                                         pad0x3_PEK9R[0x3];                                 // 0xd21(0x3)
	float                                                        AmplitudeChangeSpeed;                              // 0xd24(0x4)
	float                                                        AmplitudeOffset;                                   // 0xd28(0x4)
	float                                                        Frequency;                                         // 0xd2c(0x4)
	float                                                        InteractableMissFallShortMinProportion;            // 0xd30(0x4)
	float                                                        InteractableMissFallShortMaxProportion;            // 0xd34(0x4)
	char                                                         TrackedActorType;                                  // 0xd38(0x1)
	char                                                         pad0x7_DVKRB[0x7];                                 // 0xd39(0x7)
	class FaceTargetComponent*                                   FaceTargetComponent;                               // 0xd40(0x8)
	class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0xd48(0x8)
	class AthenaAIFormComponent*                                 FormComponent;                                     // 0xd50(0x8)
	class AICharacterAudioComponent*                             AICharacterAudioComponent;                         // 0xd58(0x8)
	class StatusEffectManagerComponent*                          StatusEffectManagerComponent;                      // 0xd60(0x8)
	class StatusEffectPersistenceComponent*                      StatusEffectPersistenceComponent;                  // 0xd68(0x8)
	class PlayerCurseComponent*                                  PlayerCurseComponent;                              // 0xd70(0x8)
	class VulnerabilityDuringAIStrategyComponent*                VulnerabilityDuringAIStrategyComponent;            // 0xd78(0x8)
	class CapsuleComponent*                                      ProjectileTraceHitVolume;                          // 0xd80(0x8)
	class AnimationDataOverriderComponent*                       AnimationDataOverriderComponent;                   // 0xd88(0x8)
	class CustomAnimationHandlerComponent*                       CustomAnimationHandlerComponent;                   // 0xd90(0x8)
	class AIProjectileWeaponFiringIntentionComponent*            FiringIntentionComponent;                          // 0xd98(0x8)
	class CustomAttitudeComponent*                               CustomAttitudeComponent;                           // 0xda0(0x8)
	class Object*                                                KilledVfxTemplate;                                 // 0xda8(0x8)
	class Object*                                                PartSpecificKilledVfxTemplate;                     // 0xdb0(0x8)
	struct ItemLoadout                                           AISpawnLoadout;                                    // 0xdb8(0x20)
	bool                                                         KillOnFallingIntoWater;                            // 0xdd8(0x1)
	char                                                         pad0x7_4L19F[0x7];                                 // 0xdd9(0x7)
	class UClass*                                                MeleeAttackStrategyId;                             // 0xde0(0x8)
	class UClass*                                                GunpowderKegAnimationStoreId;                      // 0xde8(0x8)
	struct PlayerStat                                            OnFireStat;                                        // 0xdf0(0x4)
	struct PlayerStat                                            OnDistortStat;                                     // 0xdf4(0x4)
	char                                                         pad0x48_IUU6W[0x48];                               // 0xdf8(0x48)
	class SkeletalMesh*                                          AssignedMesh;                                      // 0xe40(0x8)
	class ColorTexture*                                          TeamColorTexture;                                  // 0xe48(0x8)
	struct GenericTeamId                                         TeamID;                                            // 0xe50(0x1)
	bool                                                         StartSpawnAnimation;                               // 0xe51(0x1)
	char                                                         pad0x6_03QWP[0x6];                                 // 0xe52(0x6)
	class Actor*                                                 CurrentShip;                                       // 0xe58(0x8)
	float                                                        MeshScale;                                         // 0xe60(0x4)
	bool                                                         DamageResponsesDisabled;                           // 0xe64(0x1)
	bool                                                         TurnActive;                                        // 0xe65(0x1)
	char                                                         pad0x2_095BO[0x2];                                 // 0xe66(0x2)
	class UClass*                                                CurrentAIStrategy;                                 // 0xe68(0x8)
	class UClass*                                                CurrentAnimationState;                             // 0xe70(0x8)
	class UClass*                                                AlternateLocomotionItemType;                       // 0xe78(0x8)
	char                                                         pad0x490_SUDBR[0x490];                             // 0xe80(0x490)
	class AthenaAIAmmoDataAsset*                                 Ammo;                                              // 0x1310(0x8)
	struct AIEncounterSpecification                              PawnEncounterSpec;                                 // 0x1318(0xd0)
	char                                                         pad0xe0_0CSY8[0xe0];                               // 0x13e8(0xe0)
	bool                                                         IsInCombat;                                        // 0x14c8(0x1)
	char                                                         pad0x27_ZEAUR[0x27];                               // 0x14c9(0x27)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ItemTypeHighlightedRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         ItemTypes;                                         // 0x28(0x10)
	bool                                                         UseSlotCategory;                                   // 0x38(0x1)
	char                                                         pad0x7_B3XNO[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class PoseableMeshWieldableReplica: public WieldableReplica
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InvasionTunnelDioramaLimitedQuantitySpawnCondition: public InvasionTunnelDioramaSpawnCondition
{
public:
	int                                                          MaximumActiveAtOnce;                               // 0x28(0x4)
	char                                                         pad0x4_53FCB[0x4];                                 // 0x2c(0x4)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class OpenRadialAction: public RadialAction
{
public:
	TArray<struct ContextAction>                                 RadialContexts;                                    // 0x30(0x10)
	class RadialCreationRuleAsset*                               CanExecuteRadial;                                  // 0x40(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class ShipwreckNameGeneratorDefault: public ShipwreckNameGeneratorAbstract
{
public:
	char                                                         pad0x18_FI7YY[0x18];                               // 0x28(0x18)
	TArray<struct Text>                                          ShipwreckNames;                                    // 0x40(0x10)
	bool                                                         UseClassSpecificShipwreckNames;                    // 0x50(0x1)
	char                                                         pad0x7_LDMR8[0x7];                                 // 0x51(0x7)
	TArray<struct ShipwreckClassNames>                           ShipwreckClassSpecificNames;                       // 0x58(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsGuildShipOrCaptainNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class FiniteUseNPCDialogConditional: public NPCDialogConditional
{
public:
	int                                                          LinkedDialog;                                      // 0x30(0x4)
	int                                                          LinkedDialogOption;                                // 0x34(0x4)
	int                                                          NumberOfUses;                                      // 0x38(0x4)
	char                                                         pad0x4_U36HT[0x4];                                 // 0x3c(0x4)
};


// Size 0x8 (Full Size[0xc8] - InheritedSize[0xc0]
class GiveItemUponConsumptionComponent: public ConsumableWieldableComponent
{
public:
	class UClass*                                                ItemToGive;                                        // 0xc0(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class GrantPagesStepFromBundleDesc: public GrantPagesStepDesc
{
public:
	struct QuestVariablePageBundle                               Bundle;                                            // 0x80(0x30)
};


// Size 0x8 (Full Size[0x268] - InheritedSize[0x260]
class ClawPummelAIAbilityParams: public KnockbackAIAbilityParams
{
public:
	float                                                        WarmUpTime;                                        // 0x260(0x4)
	char                                                         pad0x4_LB08H[0x4];                                 // 0x264(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintDefaultSkeletalCategory: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x148 (Full Size[0x588] - InheritedSize[0x440]
class AggressiveGhostShipsEncounterService: public GameEventService
{
public:
	char                                                         pad0x100_QWI5Z[0x100];                             // 0x440(0x100)
	struct AggressiveGhostShipsEncounterServiceDesc              Desc;                                              // 0x540(0x20)
	class AggressiveGhostShipsEncounterServiceParams*            Params;                                            // 0x560(0x8)
	TArray<class AggressiveGhostShipsEncounter*>                 Encounters;                                        // 0x568(0x10)
	struct FName                                                 TargetIslandName;                                  // 0x578(0x8)
	struct FName                                                 PreparedIslandName;                                // 0x580(0x8)
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class TestCategory: public CategoryBase
{
public:
};


// Size 0xd0 (Full Size[0x550] - InheritedSize[0x480]
class AggressiveGhostShipsEncounter: public GameEvent
{
public:
	char                                                         pad0x10_R4YQ6[0x10];                               // 0x480(0x10)
	class AggressiveGhostShipsEncounterParams*                   Params;                                            // 0x490(0x8)
	class Actor*                                                 ActiveWaveMusicZoneActor;                          // 0x498(0x8)
	class AggressiveGhostShipPoolResource*                       PoolResourceActor;                                 // 0x4a0(0x8)
	class PhasedClusterRoot*                                     PhasedClusterRoot;                                 // 0x4a8(0x8)
	char                                                         pad0xa0_3311G[0xa0];                               // 0x4b0(0xa0)
};


// Size 0x80 (Full Size[0x380] - InheritedSize[0x300]
class KrakenShipWrappingTentacleAIAudioComponent: public AICharacterAudioComponent
{
public:
	class KrakenShipWrappingTentacleAIAudioComponentParams*      Params;                                            // 0x300(0x8)
	struct WwiseEmitter                                          KrakenTentacleEmitter;                             // 0x308(0x20)
	char                                                         pad0x58_4WA2H[0x58];                               // 0x328(0x58)
};


// Size 0x3b0 (Full Size[0x468] - InheritedSize[0xb8]
class VotableWithSessionComponent: public VotableBaseComponent
{
public:
	struct FText                                                 VoteTooltipText;                                   // 0xb8(0x38)
	struct FText                                                 VoteDiveToQuestTooltipText;                        // 0xf0(0x38)
	struct FText                                                 VoteSailToQuestTooltipText;                        // 0x128(0x38)
	struct FText                                                 CantVoteTooltipText;                               // 0x160(0x38)
	struct FText                                                 CancelExistingPrimaryTooltipText;                  // 0x198(0x38)
	struct FText                                                 CancelExistingAthenaVoyageTooltipText;             // 0x1d0(0x38)
	struct FText                                                 CancelExistingTaleTooltipText;                     // 0x208(0x38)
	struct FText                                                 BlockedByFactionTooltipText;                       // 0x240(0x38)
	struct FText                                                 BlockedByPlayModeVariantTooltipText;               // 0x278(0x38)
	struct FText                                                 PendingDeferredTunnelCancelTooltipText;            // 0x2b0(0x38)
	struct FText                                                 CancelAndAbandonShipTooltipText;                   // 0x2e8(0x38)
	struct FText                                                 DiveBlockedByFactionTooltipText;                   // 0x320(0x38)
	struct FText                                                 BlockedBySailingReapersTributeShipTooltipText;     // 0x358(0x38)
	bool                                                         CancelExistingPrimaryVoyages;                      // 0x390(0x1)
	char                                                         pad0x7_3J09S[0x7];                                 // 0x391(0x7)
	class UClass*                                                VoteActionInputId;                                 // 0x398(0x8)
	class UClass*                                                VoteActionReleaseInputId;                          // 0x3a0(0x8)
	char                                                         pad0xc0_IHOA8[0xc0];                               // 0x3a8(0xc0)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class MechanismAnimationEvent: public MechanismEvent
{
public:
	char                                                         Type;                                              // 0x38(0x1)
	char                                                         pad0x7_T4O3D[0x7];                                 // 0x39(0x7)
};


// Size 0xe8 (Full Size[0x220] - InheritedSize[0x138]
class SeagullManagerComponent: public ShipCreatureManagerComponent
{
public:
	class SeagullManagerComponentDataAsset*                      DataAsset;                                         // 0x138(0x8)
	char                                                         pad0xe0_1KGTK[0xe0];                               // 0x140(0xe0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggressiveGhostShipDamagerType: public DamagerType
{
public:
};


// Size 0x8 (Full Size[0xb20] - InheritedSize[0xb18]
class TestAthenaGameMode: public AthenaGameMode
{
public:
	char                                                         pad0x8_5SGZC[0x8];                                 // 0xb18(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NotInActionStateRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         TargetActionStates;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snooze_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0x50] - InheritedSize[0x48]
class MeshMemoryConstraintScoringMemoryUsed: public MeshMemoryConstraintScoringObject
{
public:
	char                                                         pad0x8_3CUOQ[0x8];                                 // 0x48(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class OnEndDockToObjectStopwatchConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsPlayerCurrentlyCrewingTheReapersTributeShipStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintDefaultStaticCategory: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Roar: public KrakenHeadState
{
public:
};


// Size 0x30 (Full Size[0x250] - InheritedSize[0x220]
class BuriedItemStepFromActorDesc: public BuriedItemStepDesc
{
public:
	struct QuestVariableActor                                    PlaceableActor;                                    // 0x220(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipRowboatPersistenceInterface: public PersistenceInterface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_SuckingTell: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CampfireWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x28 (Full Size[0x178] - InheritedSize[0x150]
class BTTask_AthenaRunEQSQueryFromBlackboard: public BTTask_AthenaRunEQSQuery
{
public:
	struct BlackboardKeySelector                                 EQSBlackboardKey;                                  // 0x150(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Key_Disc: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ServerNetworkedEventsWhitelistDefinition: public NetworkedEventsWhitelistDefinition
{
public:
	TArray<class ScriptStruct*>                                  ValidEvents;                                       // 0x28(0x10)
};


// Size 0x1d8 (Full Size[0x2b0] - InheritedSize[0xd8]
class NPCDialogOptionMultiShop: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	char                                                         MultiShopTypeValue;                                // 0x110(0x1)
	char                                                         pad0x7_NZCDK[0x7];                                 // 0x111(0x7)
	class NPCDialogOptionMultiShopResponseListDataAsset*         UIShopDescResponseList;                            // 0x118(0x8)
	class Controller*                                            Interactor;                                        // 0x120(0x8)
	char                                                         pad0x188_WGSGX[0x188];                             // 0x128(0x188)
};


// Size 0x100 (Full Size[0x648] - InheritedSize[0x548]
class TutorialFootsteps: public TutorialEventControlledObject
{
public:
	struct FName                                                 ParamName;                                         // 0x548(0x8)
	class MaterialInstance*                                      LeftFootprint;                                     // 0x550(0x8)
	class MaterialInstance*                                      RightFootprint;                                    // 0x558(0x8)
	bool                                                         RaycastLocationsToGround;                          // 0x560(0x1)
	char                                                         pad0x7_ZX5GH[0x7];                                 // 0x561(0x7)
	class FootstepIDAsset*                                       FootstepDataID;                                    // 0x568(0x8)
	bool                                                         StartActivated;                                    // 0x570(0x1)
	char                                                         pad0x3_3746D[0x3];                                 // 0x571(0x3)
	int                                                          NumberStepPairsVisible;                            // 0x574(0x4)
	float                                                        UpdateInterval;                                    // 0x578(0x4)
	float                                                        AnimationInterval;                                 // 0x57c(0x4)
	int                                                          AnimationSteps;                                    // 0x580(0x4)
	float                                                        FadeUpTime;                                        // 0x584(0x4)
	float                                                        FadeDownTime;                                      // 0x588(0x4)
	float                                                        AutoAnimateDistanceSquared;                        // 0x58c(0x4)
	class SplineComponent*                                       SplineComponent;                                   // 0x590(0x8)
	class DecalComponent*                                        DecalComponentLeft;                                // 0x598(0x8)
	class DecalComponent*                                        DecalComponentRight;                               // 0x5a0(0x8)
	TArray<struct DecalEntry>                                    LeftDecalEntries;                                  // 0x5a8(0x10)
	TArray<struct DecalEntry>                                    RightDecalEntries;                                 // 0x5b8(0x10)
	TArray<struct FootstepLocation>                              Locations;                                         // 0x5c8(0x10)
	char                                                         pad0x70_KN2C4[0x70];                               // 0x5d8(0x70)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsSailingForGuildRadialContext: public RadialContextBase
{
public:
	bool                                                         MustNotBeMimicked;                                 // 0x28(0x1)
	char                                                         pad0x7_VFGSN[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0xd0] - InheritedSize[0xd0]
class TestDoubleIntentComponent: public DoubleIntentComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TaleQuestStatQueryGreaterThanFunction: public TaleQuestStatQueryFunctionComparator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ThrowingKnifeDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_None: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemHealthMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x10 (Full Size[0x680] - InheritedSize[0x670]
class WieldableBookAnimationInstance: public WieldableItemAnimationInstance
{
public:
	char                                                         pad0x10_Q0ZI9[0x10];                               // 0x670(0x10)
};


// Size 0x70 (Full Size[0x368] - InheritedSize[0x2f8]
class InGamePremiumShopViewModelComponent: public PremiumShopViewModelComponentBase
{
public:
	struct StringAssetReference                                  StoreDesc;                                         // 0x2f8(0x10)
	char                                                         pad0x60_5J3FX[0x60];                               // 0x308(0x60)
};


// Size 0x0 (Full Size[0x3f0] - InheritedSize[0x3f0]
class MultiCrewSkeletonThrone: public SkeletonThrone
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryB: public ShipCategory
{
public:
};


// Size 0x40 (Full Size[0xc8] - InheritedSize[0x88]
class HoleSpawnData: public ItemSpawnData
{
public:
	char                                                         pad0x20_DDNZK[0x20];                               // 0x88(0x20)
	class UClass*                                                HoleClass;                                         // 0xa8(0x8)
	class UClass*                                                HoleWorldMarkerVariant;                            // 0xb0(0x8)
	float                                                        BuriableRadius;                                    // 0xb8(0x4)
	float                                                        HitTestTraceDistance;                              // 0xbc(0x4)
	char                                                         HitTestTraceChannel;                               // 0xc0(0x1)
	char                                                         pad0x7_CW6ES[0x7];                                 // 0xc1(0x7)
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleEnchantedSpyglassService: public TaleQuestToolService
{
public:
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class InvasionDepartureTunnelPresenterObjectParams: public TunnelPresenterObjectParamsBase
{
public:
	class UClass*                                                ScrollingSceneryActorClass;                        // 0x38(0x8)
	struct Vector                                                ScrollingScenerySpawnOffset;                       // 0x40(0xc)
	char                                                         pad0x4_IUN76[0x4];                                 // 0x4c(0x4)
};


// Size 0x58 (Full Size[0x428] - InheritedSize[0x3d0]
class CapstanMock: public InteractableBase
{
public:
	char                                                         pad0x18_CE8MY[0x18];                               // 0x3d0(0x18)
	float                                                        State;                                             // 0x3e8(0x4)
	float                                                        RatioVelocity;                                     // 0x3ec(0x4)
	float                                                        MaxRatioVelocity;                                  // 0x3f0(0x4)
	float                                                        MaxVelocityPerPlayer;                              // 0x3f4(0x4)
	int                                                          NumCurrentUsers;                                   // 0x3f8(0x4)
	bool                                                         Locked;                                            // 0x3fc(0x1)
	char                                                         pad0x2b_KMCEB[0x2b];                               // 0x3fd(0x2b)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Holding: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x20 (Full Size[0x100] - InheritedSize[0xe0]
class ShipTelemetrySubjectComponent: public TelemetrySubjectComponent
{
public:
	char                                                         pad0x20_SB86T[0x20];                               // 0xe0(0x20)
};


// Size 0x0 (Full Size[0x150] - InheritedSize[0x150]
class BTTask_DoesEQSQuerySucceed: public BTTask_AthenaRunEQSQuery
{
public:
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ShipVoyageEntitlementProcessingPolicy: public ShipEntitlementProcessingPolicy
{
public:
	class ShipEntitlementComponent*                              ShipEntitlementComponent;                          // 0x50(0x8)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class CrewManagementCommands: public InGameCommand
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class BuriedTreasureDataAsset: public GeneratedLocationsDataAsset
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BoneCallerSummonKilledPawnStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class HoldToUseInputVisualModifier_RandomiseAlternate: public HoldToUseInputVisualModifier
{
public:
	float                                                        ChanceForAlternate;                                // 0x28(0x4)
	char                                                         pad0x4_B6OU6[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CrouchReleasedNotificationInputId: public CrouchPressedNotificationInputId
{
public:
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class ShantyItemDesc: public EntitlementDesc
{
public:
	struct ShantyData                                            ShantyData;                                        // 0xc8(0x30)
	struct StringAssetReference                                  BackgroundPath;                                    // 0xf8(0x10)
};


// Size 0x50 (Full Size[0x1c0] - InheritedSize[0x170]
class BookTaleQuestService: public TaleQuestToolService
{
public:
	class BookTaleQuestServiceDesc*                              Desc;                                              // 0x170(0x8)
	TArray<int>                                                  BookContents;                                      // 0x178(0x10)
	TArray<struct PageLayoutRepInfo>                             ProcBookContents;                                  // 0x188(0x10)
	TArray<int>                                                  CurrentBookContents;                               // 0x198(0x10)
	class QuestBookItemDesc*                                     QuestBookDesc;                                     // 0x1a8(0x8)
	class UClass*                                                RemapperClass;                                     // 0x1b0(0x8)
	char                                                         pad0x8_63A8I[0x8];                                 // 0x1b8(0x8)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class SeatStat_SleepOnOtherCrewsBed: public SeatStat
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PerformActionStatCondition: public StatCondition
{
public:
	char                                                         RequiredTrackId;                                   // 0x28(0x1)
	char                                                         pad0x7_8XH7O[0x7];                                 // 0x29(0x7)
	class UClass*                                                RequiredAction;                                    // 0x30(0x8)
};


// Size 0x10 (Full Size[0x408] - InheritedSize[0x3f8]
class ClothingDependentObstacleCourse: public ObstacleCourse
{
public:
	TArray<class Class*>                                         RequiredClothing;                                  // 0x3f8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OffworldStrainDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class TaleQuestAnyStepDesc: public TaleQuestParallelStepDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Barrel: public ImpactProjectileId
{
public:
};


// Size 0x3c0 (Full Size[0x840] - InheritedSize[0x480]
class AshenLordEncounter: public GameEvent
{
public:
	char                                                         pad0x8_CAI7D[0x8];                                 // 0x480(0x8)
	class AISpawner*                                             AshenLordSpawner;                                  // 0x488(0x8)
	class AIDioramaController*                                   AIDioramaController;                               // 0x490(0x8)
	class GeyserManager*                                         RewardGeyserManager;                               // 0x498(0x8)
	class AshenLordEncounterParams*                              Params;                                            // 0x4a0(0x8)
	char                                                         pad0x22c_NYX9S[0x22c];                             // 0x4a8(0x22c)
	struct PlayerStat                                            SpecificAshenLordDefeatedStat;                     // 0x6d4(0x4)
	char                                                         pad0xb8_X6RA8[0xb8];                               // 0x6d8(0xb8)
	class PlayerProximityObservedSpawnContextProvider*           ObservingContextProvider;                          // 0x790(0x8)
	class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x798(0x8)
	class Actor*                                                 AshenLordMusicZone;                                // 0x7a0(0x8)
	char                                                         pad0x88_NAX0E[0x88];                               // 0x7a8(0x88)
	TArray<class GeyserItemSpawnComponent*>                      RemainingRewardSpawnersToSpawn;                    // 0x830(0x10)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class TaleQuestSpyglassOfRevealingServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class UClass*                                                SpyglassDesc;                                      // 0x30(0x8)
	TArray<class Class*>                                         AdditionalToolDescs;                               // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestNeverAllowedServerNetworkedEventsWhitelistDefinition: public NetworkedEventsWhitelistDefinition
{
public:
};


// Size 0x10 (Full Size[0x518] - InheritedSize[0x508]
class ProjectileItemInfo: public ItemInfo
{
public:
	class LoadableProjectileComponent*                           LoadableProjectileComponent;                       // 0x508(0x8)
	bool                                                         CanProjectileBeLoaded;                             // 0x510(0x1)
	char                                                         pad0x7_3DB5A[0x7];                                 // 0x511(0x7)
};


// Size 0x38 (Full Size[0x110] - InheritedSize[0xd8]
class NPCDialogOptionClose: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
};


// Size 0x0 (Full Size[0x1f0] - InheritedSize[0x1f0]
class CrewSpecificCutsceneComponent: public CutsceneComponent
{
public:
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class PortableHarpoonItemInfo: public ItemInfo
{
public:
};


// Size 0x188 (Full Size[0x338] - InheritedSize[0x1b0]
class MatchmakingVoyageRecipeDesc: public VoyageRecipeDataAsset
{
public:
	struct MatchmakingVoyageRecipe                               MatchmakingRecipe;                                 // 0x1b0(0x188)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlunderbussDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSmallShot: public ImpactProjectileId
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StandardAnchorDynamicsDesc: public BaseAnchorDynamicsDesc
{
public:
	struct StandardAnchorDynamicsParameters                      Parameters;                                        // 0x28(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialogueExit: public SceneDialoguePoint
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Limp_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactMeleeAttackId: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadBiteDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyCampGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerHasDiedConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TaleQuestStatQueryNotEqualFunction: public TaleQuestStatQueryFunctionComparator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SailForcedIntoFullBillowStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class CaptainsLogPartDescAsset: public ShipPartDescAsset
{
public:
	struct CaptainsLogPartDesc                                   CaptainsLogPartDesc;                               // 0x28(0x40)
};


// Size 0x258 (Full Size[0x730] - InheritedSize[0x4d8]
class SkeletonCampEventRoom: public EventRoom
{
public:
	char                                                         pad0x20_7135Y[0x20];                               // 0x4d8(0x20)
	class GameEventOnDemandAvailabilityHandler*                  GameEventOnDemandAvailabilityHandler;              // 0x4f8(0x8)
	class Actor*                                                 FinalEnemySpawnerActionActor;                      // 0x500(0x8)
	struct FName                                                 CampId;                                            // 0x508(0x8)
	struct FName                                                 IslandName;                                        // 0x510(0x8)
	class Actor*                                                 StarChartActor;                                    // 0x518(0x8)
	class Actor*                                                 SpotlightActor;                                    // 0x520(0x8)
	class Actor*                                                 TempleLootSpawnerActor;                            // 0x528(0x8)
	class UClass*                                                TempleLootSpawner;                                 // 0x530(0x8)
	class Actor*                                                 TempleLootSpawnLocationActor;                      // 0x538(0x8)
	TArray<struct PlayerStat>                                    StatsOnPuzzleCompletion;                           // 0x540(0x10)
	TArray<struct PlayerStat>                                    StatsOnSecretCofferOpened;                         // 0x550(0x10)
	TArray<class Actor*>                                         ConstellationSpinnerMechanismActions;              // 0x560(0x10)
	TArray<class Actor*>                                         CofferMechanismActions;                            // 0x570(0x10)
	TArray<struct Name>                                          MajorConstellationIds;                             // 0x580(0x10)
	TArray<struct Name>                                          MinorConstellationIds;                             // 0x590(0x10)
	class UClass*                                                TempleCryptOrbOfSecrets;                           // 0x5a0(0x8)
	class Actor*                                                 TempleCryptOrbOfSecretsLocationActor;              // 0x5a8(0x8)
	class Actor*                                                 TempleCryptSpawnedActor;                           // 0x5b0(0x8)
	struct StringAssetReference                                  SkeletonCampAvailabilityParamsAssetFileLocation;   // 0x5d8(0x10)
	char                                                         pad0x18_HGLAJ[0x18];                               // 0x5e8(0x18)
	class Actor*                                                 EventOnDemandEntranceActor;                        // 0x600(0x8)
	bool                                                         IsOnDemand;                                        // 0x608(0x1)
	char                                                         pad0x1f_952H1[0x1f];                               // 0x609(0x1f)
	TArray<struct Name>                                          ChosenMajorConstellationIds;                       // 0x628(0x10)
	TArray<struct Name>                                          ChosenMinorConstellationIds;                       // 0x638(0x10)
	TArray<class CountPolicy*>                                   RewardCountPolicies;                               // 0x648(0x10)
	TArray<struct Guid>                                          CrewIdsInTempleHall;                               // 0x658(0x10)
	bool                                                         AIThatGuardsTheCryptHasBeenKilled;                 // 0x668(0x1)
	bool                                                         TempleCryptSpawnedActorHasBeenTaken;               // 0x669(0x1)
	bool                                                         TempleRitualHasBeenPrepared;                       // 0x66a(0x1)
	bool                                                         TempleRitualHasBeenCompleted;                      // 0x66b(0x1)
	struct Guid                                                  CachedOnDemandCrewId;                              // 0x66c(0x10)
	char                                                         pad0x4_25UWF[0x4];                                 // 0x67c(0x4)
	class GameEventBannerDataAsset*                              CompletionBannerData;                              // 0x680(0x8)
	char                                                         pad0xa8_4REM7[0xa8];                               // 0x688(0xa8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class GuaranteedContainerContentSpawner: public BaseContainerContentSpawner
{
public:
	TArray<struct GuaranteedStorageContainerContentSpawnerEntry> Entries;                                           // 0x38(0x10)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class KnockdownElevatorAction: public ElevatorActionBase
{
public:
	float                                                        HardPhaseHeight;                                   // 0x28(0x4)
	float                                                        SoftPhaseHeight;                                   // 0x2c(0x4)
	float                                                        DropDistance;                                      // 0x30(0x4)
	char                                                         pad0x4_OW8CE[0x4];                                 // 0x34(0x4)
	class WwiseEvent*                                            StartKnockdownEvent;                               // 0x38(0x8)
	class WwiseEvent*                                            EndKnockdownEvent;                                 // 0x40(0x8)
	char                                                         pad0x40_Q6LLB[0x40];                               // 0x48(0x40)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class WorldSettingsCommands: public InGameCommand
{
public:
};


// Size 0x20 (Full Size[0x430] - InheritedSize[0x410]
class PressurePlateMechanismTrigger: public PressurePlateMechanismTriggerBase
{
public:
	bool                                                         DisableAfterActivation;                            // 0x410(0x1)
	bool                                                         AutoEnableAfterDisable;                            // 0x411(0x1)
	char                                                         pad0x2_3ZJN7[0x2];                                 // 0x412(0x2)
	float                                                        TimeAfterDisableBeforeAutoEnable;                  // 0x414(0x4)
	float                                                        DelayBeforeActivation;                             // 0x418(0x4)
	float                                                        DeactivateTime;                                    // 0x41c(0x4)
	bool                                                         InvertTriggerActivation;                           // 0x420(0x1)
	char                                                         pad0xf_6TEGI[0xf];                                 // 0x421(0xf)
};


// Size 0x0 (Full Size[0x1960] - InheritedSize[0x1960]
class DebugRegisterDynamicsShip: public Ship
{
public:
};


// Size 0x10 (Full Size[0x100] - InheritedSize[0xf0]
class CharacterHitReactionComponent: public HitReactionComponent
{
public:
	char                                                         pad0x8_80PVZ[0x8];                                 // 0xf0(0x8)
	class CharacterHitReactionDamagerTypeToAnimTypeLayer*        DamagerTypeToAnimTypeLayer;                        // 0xf8(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NPCOnSurfaceResponseMetadata: public CutsceneResponseMetaData
{
public:
	float                                                        Delay;                                             // 0x28(0x4)
	float                                                        Cooldown;                                          // 0x2c(0x4)
};


// Size 0x0 (Full Size[0xd8] - InheritedSize[0xd8]
class ArrivalTunnelDependencies: public TunnelDependencies
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StashedMapsAvailableContext: public RadialContextBase
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class CapstanMechanismTriggerProxy: public MechanismElementProxy
{
public:
	struct CapstanParams                                         Parameters;                                        // 0x3c8(0x14)
	char                                                         pad0x4_LME1E[0x4];                                 // 0x3dc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rigging_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChargedProjectileDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DartTypeId_Gunpowder: public DartTypeId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ScuttleDamagerType: public DamagerType
{
public:
};


// Size 0x20 (Full Size[0x520] - InheritedSize[0x500]
class SimpleAnimatedMechanismAction: public AnimatedMechanismAction
{
public:
	class SceneComponent*                                        Root;                                              // 0x500(0x8)
	char                                                         Mode;                                              // 0x508(0x1)
	bool                                                         AlwaysActive;                                      // 0x509(0x1)
	bool                                                         OnlyAnimateWhenActive;                             // 0x50a(0x1)
	char                                                         pad0x5_WEUU7[0x5];                                 // 0x50b(0x5)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x510(0x8)
	char                                                         pad0x8_2W34B[0x8];                                 // 0x518(0x8)
};


// Size 0x60 (Full Size[0x120] - InheritedSize[0xc0]
class WaitForAshenLordAIAbilityStartedStep: public WaitForAshenLordPawnBaseStep
{
public:
	class UClass*                                                AIAbilityType;                                     // 0xc0(0x8)
	char                                                         pad0x58_TWQ4B[0x58];                               // 0xc8(0x58)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemInfoHealthMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventPlayReactionFromAnotherLandmark: public LandmarkReactionEvent
{
public:
	int                                                          ReactionIndex;                                     // 0x58(0x4)
	char                                                         pad0x4_EAT5X[0x4];                                 // 0x5c(0x4)
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class ControllableIntentCombinerComponent: public IntentCombinerComponent
{
public:
};


// Size 0x8 (Full Size[0x3e0] - InheritedSize[0x3d8]
class InstantaneousPanicTeleportVolume: public PanicTeleportVolume
{
public:
	char                                                         pad0x8_2FNUL[0x8];                                 // 0x3d8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AlwaysRadialContext: public RadialContextBase
{
public:
};


// Size 0x48 (Full Size[0x78] - InheritedSize[0x30]
class PledgeToReapersVoteValidator: public VoteValidatorInlineBase
{
public:
	class VoteConsumerInlineBase*                                Consumer;                                          // 0x30(0x8)
	class Actor*                                                 OwningActor;                                       // 0x38(0x8)
	char                                                         pad0x38_IYQLB[0x38];                               // 0x40(0x38)
};


// Size 0x40 (Full Size[0x180] - InheritedSize[0x140]
class SpawnActorStepDesc: public SpawnActorStepDescBase
{
public:
	struct FName                                                 SocketName;                                        // 0x140(0x8)
	bool                                                         bAttachToSocket;                                   // 0x148(0x1)
	char                                                         pad0x7_3PRT1[0x7];                                 // 0x149(0x7)
	struct QuestVariableActor                                    LocatorVar;                                        // 0x150(0x30)
};


// Size 0xd0 (Full Size[0x6110] - InheritedSize[0x6040]
class FirstPersonAnimationInstance: public AthenaAnimationInstance
{
public:
	float                                                        SpineRotationTime;                                 // 0x6040(0x4)
	struct Vector                                                RangedWeaponTargetingOffset;                       // 0x6044(0xc)
	float                                                        RangedWeaponAlpha;                                 // 0x6050(0x4)
	struct AthenaAnimationCamera                                 CameraParams;                                      // 0x6054(0x18)
	char                                                         pad0x4_HLLUE[0x4];                                 // 0x606c(0x4)
	struct AthenaAnimationFirstPersonAnimatic                    FirstPersonAnimatic;                               // 0x6070(0x80)
	char                                                         CameraAdditiveBlendPoseType;                       // 0x60f0(0x1)
	char                                                         pad0x3_XYDBQ[0x3];                                 // 0x60f1(0x3)
	float                                                        RowboatCameraAlpha;                                // 0x60f4(0x4)
	bool                                                         UseAdditiveHandOverlay;                            // 0x60f8(0x1)
	bool                                                         CameraAttachmentTypeNotDefault;                    // 0x60f8(0x1)
	bool                                                         BlendUpperBodyAndArmOverlay;                       // 0x60f8(0x1)
	bool                                                         UseArmOverlayJumpContinuous;                       // 0x60f8(0x1)
	bool                                                         IsSwimming;                                        // 0x60f8(0x1)
	bool                                                         IsControllableObjectActive;                        // 0x60f8(0x1)
	bool                                                         UseSwimmingEquip;                                  // 0x60f8(0x1)
	char                                                         pad0x3_A49YI[0x3];                                 // 0x60f9(0x3)
	float                                                        EquipAnimationPlayRate;                            // 0x60fc(0x4)
	bool                                                         ActivateIK;                                        // 0x6100(0x1)
	bool                                                         UseOneShotIntoAnimInContinuousUse;                 // 0x6100(0x1)
	char                                                         pad0xf_9IURX[0xf];                                 // 0x6101(0xf)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class PlayerCommands: public InGameCommand
{
public:
};


// Size 0x100 (Full Size[0xa80] - InheritedSize[0x980]
class SirenPawn: public SwimmingCreaturePawn
{
public:
	char                                                         pad0x48_E71S1[0x48];                               // 0x980(0x48)
	class StatusEffectManagerComponent*                          StatusEffectComponent;                             // 0x9c8(0x8)
	class HitDetectionComponent*                                 HitDetectionComponent;                             // 0x9d0(0x8)
	class InventoryManipulatorComponent*                         InventoryManipulatorComponent;                     // 0x9d8(0x8)
	class WieldedItemComponent*                                  WieldedItemComponent;                              // 0x9e0(0x8)
	class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x9e8(0x8)
	class LoadoutComponent*                                      LoadoutComponent;                                  // 0x9f0(0x8)
	class ItemLoadoutComponent*                                  ItemLoadoutComponent;                              // 0x9f8(0x8)
	class MeleeAttackProcessorComponent*                         MeleeAttackProcessorComponent;                     // 0xa00(0x8)
	class AnimationDataStoreComponent*                           AnimationDataStoreComponent;                       // 0xa08(0x8)
	class CustomAnimationMontageComponent*                       CustomAnimationMontageComponent;                   // 0xa10(0x8)
	class AIProjectileWeaponFiringIntentionComponent*            FiringIntentionComponent;                          // 0xa18(0x8)
	class HealthGemComponent*                                    HealthGemComponent;                                // 0xa20(0x8)
	struct CustomAnimationMontageId                              DeathMontageId;                                    // 0xa28(0x8)
	char                                                         pad0x18_DCP53[0x18];                               // 0xa30(0x18)
	class CharacterHitReactionComponent*                         CharacterHitReactionComponent;                     // 0xa48(0x8)
	char                                                         pad0x8_C4BDD[0x8];                                 // 0xa50(0x8)
	class UClass*                                                AnimationID;                                       // 0xa58(0x8)
	char                                                         pad0x20_8CSX7[0x20];                               // 0xa60(0x20)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class ArrivalTunnelDesc: public TunnelDesc
{
public:
	char                                                         ShipSailStateUponArrival;                          // 0x90(0x1)
	bool                                                         CentreMapTableOnArrivalLocation;                   // 0x91(0x1)
	bool                                                         UseArrivalTunnelBaseTimeout;                       // 0x92(0x1)
	char                                                         pad0x5_IRFTZ[0x5];                                 // 0x93(0x5)
};


// Size 0x68 (Full Size[0x100] - InheritedSize[0x98]
class AddItemsToCollectorsChestStep: public MutateCollectorsChestStep
{
public:
	class MutateCollectorsChestStepDesc*                         Desc;                                              // 0x98(0x8)
	class FillCollectorsChestWithItemsDataAsset*                 ItemData;                                          // 0xa0(0x8)
	char                                                         pad0x58_OY8L9[0x58];                               // 0xa8(0x58)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemBuriedHistoryMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x28 (Full Size[0x88] - InheritedSize[0x60]
class ModifiedLoadoutSwitchesDataTypeManager: public SwitchesDataTypeManagerBase
{
public:
	char                                                         pad0x8_0S4K8[0x8];                                 // 0x60(0x8)
	TArray<class Class*>                                         WeaponDescs;                                       // 0x68(0x10)
	TArray<Class>                                                WeaponChestClasses;                                // 0x78(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShipEventType: public GameEventType
{
public:
};


// Size 0x140 (Full Size[0x188] - InheritedSize[0x48]
class AggressiveGhostShipsEncounterParams: public GameEventParams
{
public:
	class AggressiveGhostShipEncounterDataAsset*                 Encounter;                                         // 0x48(0x8)
	class AggressiveGhostShipEncounterFormationsDataAsset*       Formations;                                        // 0x50(0x8)
	class UClass*                                                EventSignal_SPCActivityType;                       // 0x78(0x8)
	class UClass*                                                ToggledEventSignal_SPCActivityType;                // 0xa0(0x8)
	struct FName                                                 EventSignalClassToggle;                            // 0xa8(0x8)
	float                                                        EventSignalHeightOffset;                           // 0xb0(0x4)
	char                                                         pad0x4_DRNIE[0x4];                                 // 0xb4(0x4)
	TArray<struct AggressiveGhostShipsEncounterHeightPerIslandOffsets> EventSignalHeightPerIslandOffset;                  // 0xb8(0x10)
	struct PoolableCollectionMapConfiguration                    ProjectilePoolMapConfiguration;                    // 0xc8(0x18)
	struct PoolableCollectionMapConfiguration                    GhostShipsPoolMapConfiguration;                    // 0xe0(0x18)
	int                                                          MinePoolSize;                                      // 0xf8(0x4)
	int                                                          AnchorDropPoolSize;                                // 0xfc(0x4)
	class UClass*                                                PoolingResourceClass;                              // 0x100(0x8)
	class AggressiveGhostShipRewardsDataAsset*                   EncounterRewards;                                  // 0x108(0x8)
	TArray<class AggressiveGhostShipRewardsDataAsset*>           OnDemandEncounterRewards;                          // 0x110(0x10)
	TArray<struct AggressiveGhostShipShipSpawnDistribution>      OverrideEncounterRewards;                          // 0x120(0x10)
	TArray<struct AggressiveGhostShipShipSpawnDistribution>      AdditionalEncounterRewards;                        // 0x130(0x10)
	struct FName                                                 CustomIslandName;                                  // 0x140(0x8)
	bool                                                         UseParticipantList;                                // 0x148(0x1)
	char                                                         pad0x3_JUTKB[0x3];                                 // 0x149(0x3)
	float                                                        EncounterEnteredBannerDistance;                    // 0x14c(0x4)
	class AggressiveGhostShipBannerDataAsset*                    EncounterEnteredBanner;                            // 0x150(0x8)
	class AggressiveGhostShipBannerDataAsset*                    EncounterCompleteBanner;                           // 0x158(0x8)
	float                                                        MinimumIslandRangeInMeters;                        // 0x160(0x4)
	float                                                        MaximumIslandRangeInMeters;                        // 0x164(0x4)
	bool                                                         FireEmissaryStatsOnFinished;                       // 0x168(0x1)
	char                                                         pad0x3_AFKPV[0x3];                                 // 0x169(0x3)
	float                                                        DelayBeforeEndingEncounter;                        // 0x16c(0x4)
	float                                                        EncounterExclusionRadiusInMetres;                  // 0x170(0x4)
	char                                                         EncounterSightingType;                             // 0x174(0x1)
	char                                                         EncounterCloseType;                                // 0x175(0x1)
	char                                                         pad0x2_JJ0AV[0x2];                                 // 0x176(0x2)
	TArray<struct Name>                                          CustomIslandList;                                  // 0x178(0x10)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class MaterialParameterBlendBase: public EffectBlendObjectBase
{
public:
	class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0x38(0x8)
	struct FName                                                 ParameterName;                                     // 0x40(0x8)
	struct ActorComponentSelector                                Mesh;                                              // 0x48(0x10)
	int                                                          MaterialIndex;                                     // 0x58(0x4)
	char                                                         pad0x4_YVWKL[0x4];                                 // 0x5c(0x4)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class RandomChanceRequirement: public SpawnRequirement
{
public:
	float                                                        ChanceOfSpawning;                                  // 0x50(0x4)
	char                                                         pad0x4_P9NIG[0x4];                                 // 0x54(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TooltipDescriptorId: public BaseTooltipDescriptorId
{
public:
};


// Size 0x30 (Full Size[0xa8] - InheritedSize[0x78]
class NonVerbalRadialContentRule: public RadialContentRule
{
public:
	class RadialAction*                                          PrimaryActionSlot;                                 // 0x78(0x8)
	class RadialAction*                                          SecondaryActionSlot;                               // 0x80(0x8)
	class RadialAction*                                          TertiaryActionSlot;                                // 0x88(0x8)
	class RadialAction*                                          QuaternaryActionSlot;                              // 0x90(0x8)
	char                                                         pad0x4_35UHP[0x4];                                 // 0x98(0x4)
	float                                                        RadialTextScale;                                   // 0x9c(0x4)
	struct Vector2D                                              RadialTextOffset;                                  // 0xa0(0x8)
};


// Size 0x20 (Full Size[0xb0] - InheritedSize[0x90]
class HasEntitlementPrerequisite: public InteractionPrerequisiteBase
{
public:
	char                                                         pad0x20_34D3F[0x20];                               // 0x90(0x20)
};


// Size 0x90 (Full Size[0x550] - InheritedSize[0x4c0]
class AIItemSpawnComponent: public ItemSpawnComponent
{
public:
	float                                                        SpawnDelayAfterDeath;                              // 0x4c0(0x4)
	float                                                        PercentageChanceToDrop;                            // 0x4c4(0x4)
	bool                                                         UseComponentTransformAsSpawnTransform;             // 0x4c8(0x1)
	char                                                         pad0x7_5E1YO[0x7];                                 // 0x4c9(0x7)
	TArray<struct CauseOfDeathItemSpawnDistribution>             DeathItemSpawnDistributionOverrides;               // 0x4d0(0x10)
	class ShortRangeMarkerDataAsset*                             RewardMarkerDataAsset;                             // 0x4e0(0x8)
	char                                                         pad0x68_ENVUY[0x68];                               // 0x4e8(0x68)
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class TreasureMapItemInfo: public ItemInfo
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBlunderbomb_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpottedCaptainedShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x148 (Full Size[0x518] - InheritedSize[0x3d0]
class VotableObjectView: public InteractableBase
{
public:
	char                                                         pad0x10_T2KP1[0x10];                               // 0x3d0(0x10)
	class InteractableComponent*                                 InteractableComponent;                             // 0x3e0(0x8)
	class VotableBaseComponent*                                  VotableObject;                                     // 0x3e8(0x8)
	float                                                        HoldToTriggerTime;                                 // 0x3f0(0x4)
	char                                                         pad0x4_JPQE0[0x4];                                 // 0x3f4(0x4)
	TArray<class Interface*>                                     Voters;                                            // 0x3f8(0x10)
	char                                                         pad0x110_H1051[0x110];                             // 0x408(0x110)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class IsPlayerParticipatingInQuestTypeStatCondition: public StatCondition
{
public:
	char                                                         TargetQuestType;                                   // 0x28(0x1)
	char                                                         pad0x1f_NQ4AW[0x1f];                               // 0x29(0x1f)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerSpawnerWeightedItemList: public StorageContainerSpawnerItemListBase
{
public:
	TArray<struct StorageContainerWeightedItemListEntry>         Entries;                                           // 0x28(0x10)
};


// Size 0xc8 (Full Size[0x1a0] - InheritedSize[0xd8]
class NPCDialogOptionReputationMenu: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	char                                                         NavigationAction;                                  // 0x110(0x1)
	char                                                         pad0x7_QMHFM[0x7];                                 // 0x111(0x7)
	struct FString                                               CompanyId;                                         // 0x118(0x10)
	class Controller*                                            Interactor;                                        // 0x128(0x8)
	char                                                         pad0x70_4SXG5[0x70];                               // 0x130(0x70)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ChandelierPartDescAsset: public ShipPartDescAsset
{
public:
	struct ChandelierPartDesc                                    ChandelierPartDesc;                                // 0x28(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingPowerSlam: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SunkenKingdomTreasuryGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class KillActorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemFirstDroppedByMeOnMyShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Ballast: public ImpactProjectileId
{
public:
};


// Size 0x40 (Full Size[0x588] - InheritedSize[0x548]
class SirenStatue: public StatueThreatBase
{
public:
	char                                                         pad0x8_Q6ADC[0x8];                                 // 0x548(0x8)
	char                                                         Team;                                              // 0x550(0x1)
	char                                                         pad0x37_II934[0x37];                               // 0x551(0x37)
};


// Size 0x48 (Full Size[0x468] - InheritedSize[0x420]
class ReceiverPuzzleStatue: public PuzzleStatueBase
{
public:
	char                                                         pad0xa_986EC[0xa];                                 // 0x420(0xa)
	char                                                         InitialStatueConfiguration;                        // 0x42a(0x1)
	char                                                         pad0x5_IJYDJ[0x5];                                 // 0x42b(0x5)
	class SceneComponent*                                        ConfigurationPositionPivot;                        // 0x430(0x8)
	class CurveFloat*                                            PositionTransitionCurve;                           // 0x438(0x8)
	TArray<struct PuzzleStatueConfigurationPosition>             Positions;                                         // 0x440(0x10)
	class ReceiverPuzzleStatueAudioParamsDataAsset*              ReceiverAudioParams;                               // 0x450(0x8)
	char                                                         pad0x10_QFBH9[0x10];                               // 0x458(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Barrel_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class GrantPagesStepFromLayoutsDesc: public GrantPagesStepDesc
{
public:
	TArray<struct StringAssetReference>                          Pages;                                             // 0x80(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Throwing: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x18 (Full Size[0x2a8] - InheritedSize[0x290]
class ControlWheelInputComponent: public LookAtOffsetInputComponent
{
public:
	class IntentComponent*                                       IntentComponent;                                   // 0x290(0x8)
	class Wheel*                                                 Wheel;                                             // 0x298(0x8)
	char                                                         pad0x8_X19TJ[0x8];                                 // 0x2a0(0x8)
};


// Size 0x0 (Full Size[0x5c0] - InheritedSize[0x5c0]
class PerfTestIslandService: public IslandService
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class UnlockConditionalStatsTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class ExhaustibleTeleportLocationRetrievalComponent: public TeleportLocationRetrievalComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Passive: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleQuestLanternService: public TaleQuestToolService
{
public:
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionRefillTankard: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	int                                                          LinkedDialog;                                      // 0x110(0x4)
	char                                                         pad0x4_GUR2X[0x4];                                 // 0x114(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CollectorsChestMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PremiumCurrencyReward: public Reward
{
public:
	char                                                         pad0x8_JHZ5D[0x8];                                 // 0x28(0x8)
};


// Size 0x140 (Full Size[0x7a8] - InheritedSize[0x668]
class HarpoonProjectile: public LaunchableProjectile
{
public:
	char                                                         pad0x10_MP98I[0x10];                               // 0x668(0x10)
	struct ReplicatedTransformState                              ReplicatedTransformState;                          // 0x678(0x30)
	struct NetTimeStampCalculator                                NetMovementTimeStamp;                              // 0x6a8(0x70)
	char                                                         pad0x20_04QUW[0x20];                               // 0x718(0x20)
	class ShapeComponent*                                        CollisionComponent;                                // 0x738(0x8)
	class StaticMeshComponent*                                   MeshComponent;                                     // 0x740(0x8)
	class HarpoonRenderComponent*                                HarpoonRenderComponent;                            // 0x748(0x8)
	class SceneComponent*                                        MovementBase;                                      // 0x750(0x8)
	char                                                         pad0x18_JKHRE[0x18];                               // 0x758(0x18)
	struct FName                                                 TetherAttachSocketName;                            // 0x770(0x8)
	struct FName                                                 ArrowHeadSocketName;                               // 0x778(0x8)
	char                                                         pad0x8_3H2TU[0x8];                                 // 0x780(0x8)
	float                                                        DamageAmount;                                      // 0x788(0x4)
	char                                                         ProjectileState;                                   // 0x78c(0x1)
	char                                                         pad0x1b_YT01T[0x1b];                               // 0x78d(0x1b)
};


// Size 0x508 (Full Size[0x560] - InheritedSize[0x58]
class MechanismAnimationCurve_Transform: public MechanismAnimation
{
public:
	char                                                         pad0x8_TSOHE[0x8];                                 // 0x58(0x8)
	struct TransformBlendCurve                                   Curve;                                             // 0x60(0x500)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class CalculatedMemoryReservationInformationBase: public MemoryReservationInformationBase
{
public:
	char                                                         pad0x8_X8LGC[0x8];                                 // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrackedEncountersGameEventType: public GameEventType
{
public:
};


// Size 0x98 (Full Size[0x110] - InheritedSize[0x78]
class MapRadialContentRule: public RadialContentRule
{
public:
	float                                                        RadialIconScale;                                   // 0x78(0x4)
	struct Vector2D                                              RadialIconOffset;                                  // 0x7c(0x8)
	char                                                         pad0x54_O7VPA[0x54];                               // 0x84(0x54)
	TArray<class Actor*>                                         MappedSlots;                                       // 0xd8(0x10)
	char                                                         pad0x28_6Y6Z3[0x28];                               // 0xe8(0x28)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class OnTutorialStepNPCDialogConditional: public NPCDialogConditional
{
public:
	struct FName                                                 TutorialStepName;                                  // 0x30(0x8)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class QuestBookSinglePageLayout: public QuestBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SmallShip: public ShipSize
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class FlameOfFateTypeRevealRequirement: public RevealRequirement
{
public:
	char                                                         RequiredFlameType;                                 // 0x38(0x1)
	char                                                         pad0x7_9SWKZ[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BoarDamagerType: public DamagerType
{
public:
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventPlayForceFeedback: public LandmarkReactionEvent
{
public:
	TArray<struct LandmarkReactionEventPlayForceFeedbackEntry>   ForceFeedbackEntries;                              // 0x58(0x10)
	class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x150 (Full Size[0x940] - InheritedSize[0x7f0]
class MusicalInstrument: public WieldableItem
{
public:
	char                                                         pad0x10_M0DYI[0x10];                               // 0x7f0(0x10)
	char                                                         InstrumentType;                                    // 0x800(0x1)
	char                                                         pad0x7_DBZQ7[0x7];                                 // 0x801(0x7)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x808(0x8)
	float                                                        PlayingCoolDownTime;                               // 0x810(0x4)
	struct FName                                                 InstrumentDrunkennessRtpc;                         // 0x814(0x8)
	struct FName                                                 InstrumentUnderwaterRtpc;                          // 0x81c(0x8)
	float                                                        MaxUnderwaterRtpcFactor;                           // 0x824(0x4)
	float                                                        MinUnderwaterRtpcFactor;                           // 0x828(0x4)
	float                                                        PlayingAINoiseRange;                               // 0x82c(0x4)
	float                                                        AINoiseEventInterval;                              // 0x830(0x4)
	char                                                         pad0x4_YHH1B[0x4];                                 // 0x834(0x4)
	class UClass*                                                TriggerEffectActor;                                // 0x838(0x8)
	char                                                         pad0x8_YX4ET[0x8];                                 // 0x840(0x8)
	class AthenaPlayerCharacter*                                 AthenaPlayerCharacter;                             // 0x848(0x8)
	char                                                         pad0xf0_3WGFY[0xf0];                               // 0x850(0xf0)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CannonEnchantmentDescAsset: public ShipPartDescAsset
{
public:
	struct CannonEnchantmentDesc                                 CannonEnchantmentDesc;                             // 0x28(0x18)
};


// Size 0x0 (Full Size[0x2c0] - InheritedSize[0x2c0]
class CompetitiveVoyageNPCComponent: public CompanyNPCComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class OpenableItemMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsWearingSkeletonCurseStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SetPlayerOnFireWithAshenWindsFlamethrowerConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingWaterDunk: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x68 (Full Size[0x1a0] - InheritedSize[0x138]
class RatManagerComponent: public ShipCreatureManagerComponent
{
public:
	class RatManagerComponentDataAsset*                          DataAsset;                                         // 0x138(0x8)
	char                                                         pad0x60_5SU3N[0x60];                               // 0x140(0x60)
};


// Size 0x0 (Full Size[0xa30] - InheritedSize[0xa30]
class SkeletalStashedMeshMemoryConstraintComponent: public SkeletalMeshMemoryConstraintComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class IsWieldingItemFilterDesc: public OneShotInteractableFilterDesc
{
public:
	TArray<Class>                                                AllowedItems;                                      // 0x28(0x10)
};


// Size 0x1e0 (Full Size[0x6d8] - InheritedSize[0x4f8]
class ShipHullAudio: public ShipAudio
{
public:
	class WwiseEvent*                                            WwiseEvent_ShipSinkingLoop_Play;                   // 0x4f8(0x8)
	class WwiseEvent*                                            WwiseEvent_ShipSinkingLoop_Stop;                   // 0x500(0x8)
	class WwiseEvent*                                            WwiseEvent_ShipSinkingNotice;                      // 0x508(0x8)
	class WwiseEvent*                                            WwiseEvent_ShipSinkingExceededRollThreshold;       // 0x510(0x8)
	class WwiseEvent*                                            WwiseEvent_FloodDamage_Play;                       // 0x518(0x8)
	class WwiseEvent*                                            WwiseEvent_FloodDamage_Stop;                       // 0x520(0x8)
	class WwiseEvent*                                            WwiseEvent_ShipStrain_Play;                        // 0x528(0x8)
	class WwiseEvent*                                            WwiseEvent_ShipStrain_Stop;                        // 0x530(0x8)
	class WwiseEvent*                                            WwiseEvent_SuperheatedWater_Play;                  // 0x538(0x8)
	class WwiseEvent*                                            WwiseEvent_SuperheatedWater_Stop;                  // 0x540(0x8)
	class WwiseEvent*                                            WwiseEvent_ShipSinking_Music;                      // 0x548(0x8)
	class WwiseEvent*                                            WwiseEvent_ShroudBreakerShield;                    // 0x550(0x8)
	class WwiseEvent*                                            WwiseEvent_InvasionShipDive;                       // 0x558(0x8)
	class WwiseEvent*                                            WwiseEvent_InvasionShipSurface;                    // 0x560(0x8)
	class WwiseObjectPoolWrapper*                                WwiseEvent_ShipSinking_Music_Pool;                 // 0x568(0x8)
	class WwiseObjectPoolWrapper*                                Emitter_MidShip_Pool;                              // 0x570(0x8)
	struct FName                                                 RTPC_ShipRoll;                                     // 0x578(0x8)
	struct FName                                                 RTPC_ShipPitch;                                    // 0x580(0x8)
	struct FName                                                 RTPC_FloodDamage;                                  // 0x588(0x8)
	struct FName                                                 RTPC_ShipVelocity;                                 // 0x590(0x8)
	struct FName                                                 RTPC_ShipStrain;                                   // 0x598(0x8)
	struct FName                                                 RTPC_SuperheatedWaterIntensity;                    // 0x5a0(0x8)
	float                                                        PositionTolerance;                                 // 0x5a8(0x4)
	float                                                        MaxVelocity;                                       // 0x5ac(0x4)
	float                                                        SinkingShipRollThreshold;                          // 0x5b0(0x4)
	char                                                         pad0x4_2NLLD[0x4];                                 // 0x5b4(0x4)
	class SceneComponent*                                        ShipAudioRootComponent;                            // 0x5b8(0x8)
	TArray<struct ShipHullAudioData>                             ShipHullAudioDataArray;                            // 0x5c0(0x10)
	char                                                         pad0xc0_Q5IAB[0xc0];                               // 0x5d0(0xc0)
	class ShipInternalWater*                                     InternalWater;                                     // 0x690(0x8)
	struct WwiseEmitter                                          Emitter_MidShip;                                   // 0x698(0x20)
	struct WwiseEmitter                                          ShipSinkingMusicEmitter;                           // 0x6b8(0x20)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerEnteredShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class GameplayEventSignal_StaticMesh: public GameplayEventSignal
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryItemUseHeldNotificationInputId: public SecondaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x58 (Full Size[0x118] - InheritedSize[0xc0]
class WaitForAshenLordVulnerabilityStartStep: public WaitForAshenLordPawnBaseStep
{
public:
	char                                                         pad0x58_U5GKH[0x58];                               // 0xc0(0x58)
};


// Size 0xa8 (Full Size[0x120] - InheritedSize[0x78]
class BlowpipeDartRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_7M68K[0x58];                               // 0x78(0x58)
	float                                                        RadialIconScale;                                   // 0xd0(0x4)
	struct Vector2D                                              RadialIconOffset;                                  // 0xd4(0x8)
	char                                                         pad0x4_Y0R0R[0x4];                                 // 0xdc(0x4)
	class InventoryItemDescToSlotRemappingPolicyAsset*           RemappingAsset;                                    // 0xe0(0x8)
	TArray<class ItemInfo*>                                      MappedSlots;                                       // 0xe8(0x10)
	class UClass*                                                DartItemCategory;                                  // 0xf8(0x8)
	TArray<class Class*>                                         ExcludedItemCategories;                            // 0x100(0x10)
	char                                                         pad0x10_W39CW[0x10];                               // 0x110(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GenericPartDescAsset: public ShipPartDescAsset
{
public:
	struct GenericPartDesc                                       GenericPartDesc;                                   // 0x28(0x18)
};


// Size 0x8 (Full Size[0x70] - InheritedSize[0x68]
class LaunchableShotComponentAudioParams: public ItemActionComponentAudioParams
{
public:
	class WwiseEvent*                                            FireProjectileEvent;                               // 0x68(0x8)
};


// Size 0x80 (Full Size[0xf8] - InheritedSize[0x78]
class EmoteRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_7JTPC[0x58];                               // 0x78(0x58)
	TArray<struct EmoteData>                                     DefaultEmoteData;                                  // 0xd0(0x10)
	TArray<class Class*>                                         DefaultEmoteDescs;                                 // 0xe0(0x10)
	class EmoteSettings*                                         EmoteSettings;                                     // 0xf0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Despawning: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x18 (Full Size[0x190] - InheritedSize[0x178]
class ClimbingComponent: public IntentComponent
{
public:
	char                                                         ServerClimbId;                                     // 0x178(0x1)
	char                                                         pad0x3_P2PA7[0x3];                                 // 0x179(0x3)
	struct Vector                                                UseLadderOffset;                                   // 0x17c(0xc)
	float                                                        ServerHeight;                                      // 0x188(0x4)
	char                                                         pad0x4_CIDHA[0x4];                                 // 0x18c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryD: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class GhostShipsDefeatedConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Wraith: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsGuildDistinctionLevelMetStatCondition: public StatCondition
{
public:
	int                                                          GuildDistinctionLevel;                             // 0x28(0x4)
	char                                                         pad0x4_G2YMO[0x4];                                 // 0x2c(0x4)
};


// Size 0x8 (Full Size[0x680] - InheritedSize[0x678]
class CustomizableShipService: public ShipService
{
public:
	char                                                         pad0x8_7AG2G[0x8];                                 // 0x678(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GrenadeDamagerType: public DamagerType
{
public:
};


// Size 0x118 (Full Size[0x1f0] - InheritedSize[0xd8]
class NPCDialogOptionShops: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	TArray<class ShopDesc*>                                      ShopDescArray;                                     // 0x110(0x10)
	class Controller*                                            Interactor;                                        // 0x120(0x8)
	char                                                         pad0xc8_73AFZ[0xc8];                               // 0x128(0xc8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Plants: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBucketThrowType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipAggressiveGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x3b0] - InheritedSize[0x3b0]
class GlobalNamedPointContainer: public NamedPointsContainer
{
public:
};


// Size 0x30 (Full Size[0x80] - InheritedSize[0x50]
class MaximumMultipleTrackedActorTypesPopulationSpawnRequirement: public SpawnRequirement
{
public:
	TArray<char>                                                 ActorTypesToTrack;                                 // 0x50(0x10)
	struct FString                                               MaxTrackedActorCountString;                        // 0x60(0x10)
	char                                                         pad0x10_O5LJU[0x10];                               // 0x70(0x10)
};


// Size 0x128 (Full Size[0x1f8] - InheritedSize[0xd0]
class PetPreviewDataObject: public ItemPreviewDataObject
{
public:
	char                                                         pad0x110_SXCQ8[0x110];                             // 0xd0(0x110)
	class UClass*                                                CurrentPetDesc;                                    // 0x1e0(0x8)
	char                                                         pad0x10_HP67B[0x10];                               // 0x1e8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipWheelAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x38 (Full Size[0x180] - InheritedSize[0x148]
class DamageableMechanismTrigger: public MechanismTriggerComponent
{
public:
	float                                                        TriggerThreshold;                                  // 0x148(0x4)
	float                                                        TriggerResetTime;                                  // 0x14c(0x4)
	float                                                        AutomaticResetTime;                                // 0x150(0x4)
	char                                                         pad0x4_8YN52[0x4];                                 // 0x154(0x4)
	TArray<class Class*>                                         AllowedDamagersToTriggerRegardlessOfDamageDealt;   // 0x158(0x10)
	class DamageableComponent*                                   OwningDamageSource;                                // 0x168(0x8)
	class World*                                                 CachedWorld;                                       // 0x170(0x8)
	char                                                         pad0x8_IN4YU[0x8];                                 // 0x178(0x8)
};


// Size 0x28 (Full Size[0x608] - InheritedSize[0x5e0]
class AggressiveGhostShipMine: public BuoyantActor
{
public:
	char                                                         pad0x8_713K7[0x8];                                 // 0x5e0(0x8)
	class PrimitiveComponent*                                    PhysicsRootComponent;                              // 0x5e8(0x8)
	class FuseComponent*                                         FuseComponent;                                     // 0x5f0(0x8)
	class ExplosiveComponent*                                    ExplosiveComponent;                                // 0x5f8(0x8)
	class HealthComponent*                                       HealthComponent;                                   // 0x600(0x8)
};


// Size 0x8 (Full Size[0xc8] - InheritedSize[0xc0]
class ItemScoreFromCountProviderComponent: public BaseItemScoreProviderComponent
{
public:
	class UClass*                                                CountType;                                         // 0xc0(0x8)
};


// Size 0x48 (Full Size[0x160] - InheritedSize[0x118]
class PossessionsChestViewModel: public ViewModelComponentBase
{
public:
	struct FText                                                 AllTabLabel;                                       // 0x118(0x38)
	struct StringAssetReference                                  AllTabIcon;                                        // 0x150(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryS: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ConditionalFrameworkConditionalStatsTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ConqueringATreasuryConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x8 (Full Size[0xa8] - InheritedSize[0xa0]
class SpawnActorStep: public SpawnActorBaseStep
{
public:
	class SpawnActorStepDesc*                                    Desc;                                              // 0xa0(0x8)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class AnimNotifyStateWieldableBookLeftSpreadPreviousRightSpreadCurrent: public AnimNotifyStateWieldableBookRenderingModeRequest
{
public:
};


// Size 0x48 (Full Size[0x490] - InheritedSize[0x448]
class StarChartConstellation: public StarChartStarCluster
{
public:
	char                                                         pad0x8_VVIH2[0x8];                                 // 0x448(0x8)
	struct FName                                                 ConstellationID;                                   // 0x450(0x8)
	class StaticMeshComponent*                                   ConstellationPicture;                              // 0x458(0x8)
	TArray<struct StarPointConnector>                            Connectors;                                        // 0x460(0x10)
	char                                                         StarPointSelectionConnectorMode;                   // 0x470(0x1)
	char                                                         StarPointHighlightConnectorMode;                   // 0x471(0x1)
	char                                                         pad0x2_19DP0[0x2];                                 // 0x472(0x2)
	float                                                        LightBeamCosThetaEarlyExitThreshold;               // 0x474(0x4)
	bool                                                         IsConstellationSolved;                             // 0x478(0x1)
	char                                                         pad0x7_VIKIX[0x7];                                 // 0x479(0x7)
	char                                                         pad0x10_DIF11[0x10];                               // 0x480(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersChestWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HeistVoyageGameEventType: public GameEventType
{
public:
};


// Size 0x18 (Full Size[0xd8] - InheritedSize[0xc0]
class UncachedResourceProviderComponent: public ResourceProviderComponent
{
public:
	char                                                         pad0x18_NDNSW[0x18];                               // 0xc0(0x18)
};


// Size 0x28 (Full Size[0x2b8] - InheritedSize[0x290]
class SittingInputComponent: public LookAtOffsetInputComponent
{
public:
	class AthenaSpringArmComponentParams*                        ThirdPersonCameraParams;                           // 0x290(0x8)
	class UClass*                                                SeatAnimationId;                                   // 0x298(0x8)
	char                                                         pad0x18_3K7WX[0x18];                               // 0x2a0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class WaitForAshenLordVulnerabilityEndStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EnemyKnockedOffShipStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x690] - InheritedSize[0x690]
class StaticStashedMeshMemoryConstraintComponent: public StaticMeshMemoryConstraintComponent
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsWieldingItemRadialContext: public RadialContextBase
{
public:
	bool                                                         TargetsAllWieldables;                              // 0x28(0x1)
	char                                                         pad0x7_4XYUJ[0x7];                                 // 0x29(0x7)
	TArray<class Class*>                                         TargetItems;                                       // 0x30(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EatItemConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class IsWearingClothingNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         Clothes;                                           // 0x30(0x10)
	int                                                          MinimumRequiredItems;                              // 0x40(0x4)
	char                                                         pad0x4_ETSEV[0x4];                                 // 0x44(0x4)
};


// Size 0x38 (Full Size[0xc0] - InheritedSize[0x88]
class ItemDescSpawnData: public ItemSpawnData
{
public:
	char                                                         pad0x38_AHUWZ[0x38];                               // 0x88(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenTentacleDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVomitNoSplash: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x670] - InheritedSize[0x670]
class QuestBookAnimationInstance: public WieldableItemAnimationInstance
{
public:
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class NPCDialogHeaderSimple: public NPCDialogHeader
{
public:
	char                                                         pad0x8_JLSIU[0x8];                                 // 0x28(0x8)
	struct FText                                                 Text;                                              // 0x30(0x38)
	class UClass*                                                InteractResponse;                                  // 0x68(0x8)
	class WwiseEvent*                                            InteractAudioEvent;                                // 0x70(0x8)
	class UClass*                                                InteractParticipantType;                           // 0x78(0x8)
};


// Size 0x70 (Full Size[0x138] - InheritedSize[0xc8]
class VoyageProposalDesc: public EntitlementDesc
{
public:
	char                                                         pad0x8_L4MVI[0x8];                                 // 0xc8(0x8)
	class UClass*                                                TradingCompany;                                    // 0xd0(0x8)
	int                                                          Rank;                                              // 0xd8(0x4)
	bool                                                         UseDifficultyAsRank;                               // 0xdc(0x1)
	bool                                                         UnlockedForAnyRank;                                // 0xdd(0x1)
	bool                                                         AvailableEvenIfRecentlySeen;                       // 0xde(0x1)
	char                                                         pad0x1_BW5YY[0x1];                                 // 0xdf(0x1)
	int                                                          Difficulty;                                        // 0xe0(0x4)
	int                                                          Length;                                            // 0xe4(0x4)
	char                                                         VoyageType;                                        // 0xe8(0x1)
	char                                                         pad0x7_BXCVJ[0x7];                                 // 0xe9(0x7)
	struct StringAssetReference                                  TooltipBackgroundImageUrl;                         // 0xf0(0x10)
	class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0x100(0x8)
	class VoyageDescDataAsset*                                   VoyageDesc;                                        // 0x108(0x8)
	struct StringAssetReference                                  OverrideVotingTableVoyageProposalMesh;             // 0x110(0x10)
	struct StringAssetReference                                  OverrideOpenVoyageProposalMesh;                    // 0x120(0x10)
	char                                                         pad0x8_ZTHL9[0x8];                                 // 0x130(0x8)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class TeleportCommands: public InGameCommand
{
public:
	class InGameCommandTeleportManager*                          InGameCommandTeleportManager;                      // 0x50(0x8)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class OutOfAmmoDestroyEffect: public AmmoBaseEffect
{
public:
	struct OutOfAmmoDestructionEffects                           DestructionEffects;                                // 0x28(0x80)
	class Actor*                                                 OwningActor;                                       // 0xa8(0x8)
	char                                                         pad0x68_UNWHS[0x68];                               // 0xb0(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Appear: public KrakenHeadState
{
public:
};


// Size 0x20 (Full Size[0x670] - InheritedSize[0x650]
class ArrivalTunnelOfTheDamned: public TunnelOfTheDamnedBase
{
public:
	char                                                         pad0x8_HCKR9[0x8];                                 // 0x650(0x8)
	class ArrivalTunnelDesc*                                     ArrivalTunnelDesc;                                 // 0x658(0x8)
	TArray<struct ArrivalTunnelOfTheDamnedPlayerState>           PlayersInArrivalTunnelOfTheDamnedActionState;      // 0x660(0x10)
};


// Size 0x58 (Full Size[0x560] - InheritedSize[0x508]
class RewardableItemInfo: public ItemInfo
{
public:
	struct RewardId                                              RewardId;                                          // 0x508(0x8)
	char                                                         Type;                                              // 0x510(0x1)
	char                                                         pad0x3_694M3[0x3];                                 // 0x511(0x3)
	struct FName                                                 Rarity;                                            // 0x514(0x8)
	char                                                         pad0x4_93IKS[0x4];                                 // 0x51c(0x4)
	TArray<struct PlayerStat>                                    HandInStats;                                       // 0x520(0x10)
	TArray<struct PlayerStat>                                    LegendHandInStats;                                 // 0x530(0x10)
	class PopUpMessageDesc*                                      PopUpMessageDesc;                                  // 0x540(0x8)
	class PopUpAudioDesc*                                        PopUpAudioOverrides;                               // 0x548(0x8)
	struct Guid                                                  Id;                                                // 0x550(0x10)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class AnimNotifyStateQuestBookLeftSpreadPreviousRightSpreadCurrent: public AnimNotifyStateQuestBookRenderingModeRequest
{
public:
};


// Size 0x80 (Full Size[0x380] - InheritedSize[0x300]
class FishingFloatNameplateComponent: public NameplateComponent
{
public:
	struct Vector                                                NameplateOffset;                                   // 0x300(0xc)
	char                                                         pad0x74_FMT2N[0x74];                               // 0x30c(0x74)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Anchor: public ImpactProjectileId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class LogicalOrStatCondition: public StatCondition
{
public:
	TArray<class StatCondition*>                                 StatConditions;                                    // 0x28(0x10)
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionFireNPCDialogInteraction: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	bool                                                         CloseOnExecuted;                                   // 0x110(0x1)
	char                                                         pad0x7_C2FLN[0x7];                                 // 0x111(0x7)
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class PlaceableReactionMechanismAction: public PlaceableReaction
{
public:
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3c8(0x8)
	float                                                        Delay;                                             // 0x3d0(0x4)
	bool                                                         LoopReactionsWhileActive;                          // 0x3d4(0x1)
	char                                                         pad0x3_QVQNA[0x3];                                 // 0x3d5(0x3)
	struct FloatRange                                            DelayBetweenLoops;                                 // 0x3d8(0x10)
	char                                                         pad0x8_H8DRE[0x8];                                 // 0x3e8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteQuestConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x30 (Full Size[0xf8] - InheritedSize[0xc8]
class ShipCustomizationDesc: public EntitlementDesc
{
public:
	struct StringAssetReference                                  CustomizationInfo;                                 // 0xc8(0x10)
	struct FString                                               PreviousItem;                                      // 0xd8(0x10)
	struct FString                                               NextItem;                                          // 0xe8(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ContestPlacedFinishStatCondition: public StatCondition
{
public:
	struct Int32Range                                            ContestPlacesRange;                                // 0x28(0x10)
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventStartCameraShake: public LandmarkReactionEvent
{
public:
	class UClass*                                                CameraShake;                                       // 0x58(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x60(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x64(0x4)
	class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractableAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealAICharacterRecoverMethod: public AICharacterRecoverMethod
{
public:
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class SpawnCollectableQuestObjectStepFromActorDesc: public SpawnCollectableQuestObjectStepDesc
{
public:
	struct QuestVariableActor                                    PlaceableActor;                                    // 0xb8(0x30)
	struct FName                                                 SocketName;                                        // 0xe8(0x8)
	bool                                                         AttachToSocket;                                    // 0xf0(0x1)
	char                                                         pad0x7_LZ34X[0x7];                                 // 0xf1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExplosiveAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x178 (Full Size[0x598] - InheritedSize[0x420]
class BroadcasterPuzzleStatue: public PuzzleStatueBase
{
public:
	char                                                         pad0x8_VJJIY[0x8];                                 // 0x420(0x8)
	class StaticMeshComponent*                                   ArmStaticMesh;                                     // 0x428(0x8)
	TArray<class Actor*>                                         ReceiverStatues;                                   // 0x430(0x10)
	TArray<struct ConfigurationComboAndTrigger>                  ValidConfigurationCombos;                          // 0x440(0x10)
	struct ReactionSequenceStateInfo                             ReactionSequenceState;                             // 0x450(0x10)
	char                                                         pad0x48_LTIN1[0x48];                               // 0x460(0x48)
	class IslandVisitorCallbackComponent*                        IslandVisitorCallbackComponent;                    // 0x4a8(0x8)
	float                                                        DelayBeforeReactionSequenceCheck;                  // 0x4b0(0x4)
	float                                                        DelayPerStatueDuringReactionSequenceCheck;         // 0x4b4(0x4)
	float                                                        DelayAfterReactionSequenceCheck;                   // 0x4b8(0x4)
	float                                                        DelayBeforeActivatingTriggerDuringReactionSequenceSuccess; // 0x4bc(0x4)
	char                                                         pad0x8_CRTO9[0x8];                                 // 0x4c0(0x8)
	class ParticleSystemComponent*                               ShockwaveParticleSystem;                           // 0x4c8(0x8)
	class ParticleSystemComponent*                               HornDustParticleSystem;                            // 0x4d0(0x8)
	class BroadcasterPuzzleStatueAudioParamsDataAsset*           BroadcasterAudioParams;                            // 0x4d8(0x8)
	char                                                         pad0xa4_T0ORD[0xa4];                               // 0x4e0(0xa4)
	float                                                        ShockwaveEffectDelay;                              // 0x584(0x4)
	bool                                                         ShouldResetWhenIslandIsEmpty;                      // 0x588(0x1)
	char                                                         pad0x3_BXHHW[0x3];                                 // 0x589(0x3)
	float                                                        TimeBeforeIslandResetWhenEmpty;                    // 0x58c(0x4)
	float                                                        StatueResetCooldownInSeconds;                      // 0x590(0x4)
	char                                                         pad0x4_MOJPJ[0x4];                                 // 0x594(0x4)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class AnimNotify_AthenaPlayParticleEffectWithOwnerCustomisation: public AnimNotify_AthenaPlayParticleEffect
{
public:
	class UClass*                                                VfxCustomisationType;                              // 0x88(0x8)
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class BlueprintSpawnAIStepBase: public BlueprintStepBase
{
public:
	char                                                         pad0x18_45OVB[0x18];                               // 0x90(0x18)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsPlayingOnCustomServerNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class PressurePlateMechanismProgressTriggerProxy: public MechanismElementProxy
{
public:
	float                                                        ProgressionAmount;                                 // 0x3c8(0x4)
	char                                                         pad0x4_I24I4[0x4];                                 // 0x3cc(0x4)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x3d0(0x10)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionFireTutorialEvent: public NPCDialogOption
{
public:
	char                                                         TutorialStep;                                      // 0xd8(0x1)
	char                                                         pad0x7_1HC6O[0x7];                                 // 0xd9(0x7)
	struct FText                                                 Text;                                              // 0xe0(0x38)
	bool                                                         CloseOnExectuted;                                  // 0x118(0x1)
	char                                                         pad0x3_KX5SQ[0x3];                                 // 0x119(0x3)
	int                                                          LinkedDialog;                                      // 0x11c(0x4)
	bool                                                         RelevantOnServer;                                  // 0x120(0x1)
	char                                                         pad0x7_4LDAF[0x7];                                 // 0x121(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WieldedItemSizeOneShotInteractableFilterDesc: public OneShotInteractableFilterDesc
{
public:
	TArray<char>                                                 WieldableItemSizesToDisableInteraction;            // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class StandardSailDynamicsDesc: public BaseSailDynamicsDesc
{
public:
	class CurveFloat*                                            SailSetFractionToSailForceAmp;                     // 0x28(0x8)
	struct StandardSailDynamicsParameters                        Parameters;                                        // 0x30(0xc)
	char                                                         pad0x4_6H0P7[0x4];                                 // 0x3c(0x4)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class BuriedDecalVisibilityReplicationChannel: public IndividualReplicationChannelComponent
{
public:
	TArray<struct BuryDecal>                                     ReplicatedDecals;                                  // 0xb8(0x10)
	char                                                         pad0x20_N71LP[0x20];                               // 0xc8(0x20)
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class GameplayEventSignal_SkinnedMesh: public GameplayEventSignal
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdAshenLordVolcanoRockMedium: public ImpactProjectileId
{
public:
};


// Size 0x10 (Full Size[0xc0] - InheritedSize[0xb0]
class ClawPummelAIAbility: public KnockbackAIAbility
{
public:
	char                                                         pad0x10_HRPYJ[0x10];                               // 0xb0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CursedChest_Drunken: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogBinaryExpression: public NPCDialogExpression
{
public:
	class NPCDialogExpression*                                   Left;                                              // 0x28(0x8)
	class NPCDialogExpression*                                   Right;                                             // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactKnifeMeleeAttackId: public ImpactProjectileId
{
public:
};


// Size 0x58 (Full Size[0x130] - InheritedSize[0xd8]
class SeaFortDataAsset: public FortDataAsset
{
public:
	class WeightedItemDescSpawnDataAsset*                        LootToSpawn;                                       // 0xd8(0x8)
	class AIBountySpawner*                                       OnePlayerCrewBountySpawner;                        // 0xe0(0x8)
	class AIBountySpawner*                                       TwoPlayerCrewBountySpawner;                        // 0xe8(0x8)
	class AIBountySpawner*                                       ThreePlayerCrewBountySpawner;                      // 0xf0(0x8)
	class AIBountySpawner*                                       FourPlayerCrewBountySpawner;                       // 0xf8(0x8)
	class WwiseEvent*                                            WarningBellStartEvent;                             // 0x100(0x8)
	class WwiseEvent*                                            WarningBellStopEvent;                              // 0x108(0x8)
	class WwiseObjectPoolWrapper*                                WarningBellEmitterPool;                            // 0x110(0x8)
	float                                                        WarningBellDuration;                               // 0x118(0x4)
	float                                                        WarningBellCooldownDuration;                       // 0x11c(0x4)
	float                                                        SightingDistance;                                  // 0x120(0x4)
	float                                                        EncounterDistance;                                 // 0x124(0x4)
	bool                                                         FireEmissaryStatsOnFinish;                         // 0x128(0x1)
	char                                                         pad0x7_YUXUV[0x7];                                 // 0x129(0x7)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AggressiveGhostShipsEncounterServiceParams: public GameEventServiceParams
{
public:
	class AggressiveGhostShipsEncounterParams*                   EncounterParams;                                   // 0x28(0x8)
	TArray<struct Name>                                          IslandsToSpawnOn;                                  // 0x30(0x10)
	float                                                        MinPlayerDistanceToIsland;                         // 0x40(0x4)
	int                                                          MaxTotalNumFiringCannons;                          // 0x44(0x4)
	int                                                          MaxNumFiringCannonsPerEncounter;                   // 0x48(0x4)
	float                                                        MaxTimeToBeAllowedToFire;                          // 0x4c(0x4)
	float                                                        MinTimeBeforeBeingAllowedToFireAgain;              // 0x50(0x4)
	char                                                         pad0x4_UXDEQ[0x4];                                 // 0x54(0x4)
};


// Size 0x30 (Full Size[0x250] - InheritedSize[0x220]
class BuriedItemStepFromOrientedPointDesc: public BuriedItemStepDesc
{
public:
	struct QuestVariableOrientedPoint                            ItemOrientation;                                   // 0x220(0x30)
};


// Size 0x8 (Full Size[0xe8] - InheritedSize[0xe0]
class PhasedMovingWorldMarkerComponent: public MovingWorldMarkerComponent
{
public:
	char                                                         pad0x8_BLPLP[0x8];                                 // 0xe0(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ShipVisitsAnIslandConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsCrewWithinProximityNPCDialogConditional: public NPCDialogConditional
{
public:
	float                                                        ProximityFromNPC;                                  // 0x30(0x4)
	char                                                         pad0x1c_C49PL[0x1c];                               // 0x34(0x1c)
};


// Size 0x2f0 (Full Size[0x5f0] - InheritedSize[0x300]
class KrakenTentacleAIAudioComponent: public AICharacterAudioComponent
{
public:
	float                                                        MouthHeightOffset;                                 // 0x300(0x4)
	char                                                         pad0x4_H4GT7[0x4];                                 // 0x304(0x4)
	class KrakenTentacleAIAudioComponentParams*                  KrakenTentacleAudioParams;                         // 0x308(0x8)
	struct WwiseEmitter                                          KrakenTentacleMouthEmitter;                        // 0x310(0x20)
	char                                                         pad0x2c0_77ZVC[0x2c0];                             // 0x330(0x2c0)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpeakToActorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x18 (Full Size[0x180] - InheritedSize[0x168]
class InteractableToggleMechanismActionComponent: public MechanismActionComponent
{
public:
	char                                                         InactiveState;                                     // 0x168(0x1)
	char                                                         ActiveState;                                       // 0x169(0x1)
	char                                                         pad0x6_LCVAF[0x6];                                 // 0x16a(0x6)
	char                                                         pad0x10_8QENQ[0x10];                               // 0x170(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BattleElevatorEventRoomKrakenPhaseEndedPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingItemNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         TargetItems;                                       // 0x30(0x10)
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class StaticMeshWieldableReplica: public WieldableReplica
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class NPCDialogHeaderDynamic: public NPCDialogHeader
{
public:
	struct FText                                                 Text;                                              // 0x28(0x38)
};


// Size 0x1b0 (Full Size[0x660] - InheritedSize[0x4b0]
class FrontendHUD: public CoherentBaseHUD
{
public:
	char                                                         pad0x8_WRYBL[0x8];                                 // 0x4b0(0x8)
	struct ObjectMessagingDispatcher                             ObjectMessagingDispatcher;                         // 0x4b8(0xa0)
	class FrontendHudComponent*                                  FrontendHudComponent;                              // 0x558(0x8)
	class UITelemetryComponent*                                  FrontendTelemetryComponent;                        // 0x560(0x8)
	class UIInputForwardComponent*                               InputForwardComponent;                             // 0x568(0x8)
	class FrontendCameraComponent*                               FrontendCameraComponent;                           // 0x570(0x8)
	class PirateSelector*                                        PirateSelectorComponent;                           // 0x578(0x8)
	class FrontendPremiumShopViewModelComponent*                 PremiumShopViewModelComponent;                     // 0x580(0x8)
	class FrontendPirateLogComponent*                            FrontendPirateLogComponent;                        // 0x588(0x8)
	class PiratePreviewComponentFrontend*                        PiratePreviewComponent;                            // 0x590(0x8)
	class ItemPreviewComponent*                                  ItemPreviewComponent;                              // 0x598(0x8)
	class ShipPreviewComponent*                                  ShipPreviewComponent;                              // 0x5a0(0x8)
	class HttpClientComponent*                                   HttpClientComponent;                               // 0x5a8(0x8)
	class UIDataRequestComponent*                                UIDataRequestComponent;                            // 0x5b0(0x8)
	class FrontendEntitlementInformationComponent*               FrontendEntitlementInformationComponent;           // 0x5b8(0x8)
	class GamertagProviderHudComponent*                          GamerTagProviderComponent;                         // 0x5c0(0x8)
	class GuildUIComponent*                                      GuildUIComponent;                                  // 0x5c8(0x8)
	class FrontendScrambledNamesComponent*                       FrontendScrambledNamesComponent;                   // 0x5d0(0x8)
	class UserPresenceHudComponent*                              UserPresenceComponent;                             // 0x5d8(0x8)
	char                                                         pad0x8_GFCH8[0x8];                                 // 0x5e0(0x8)
	class CoherentToWwiseEventComponent*                         CoherentToWwiseEventComponent;                     // 0x5e8(0x8)
	class WwiseEvent*                                            PressAnyButtonSFX;                                 // 0x5f0(0x8)
	char                                                         pad0x68_MJ72K[0x68];                               // 0x5f8(0x68)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PickUpObjectConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSirenTridentSmall: public ImpactProjectileId
{
public:
};


// Size 0x80 (Full Size[0xd8] - InheritedSize[0x58]
class MechanismAnimationCurve_Float: public MechanismAnimation
{
public:
	struct RuntimeFloatCurve                                     Curve;                                             // 0x58(0x80)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class AnimatedMechanismActionProxy: public MechanismElementProxy
{
public:
	float                                                        Delay;                                             // 0x3c8(0x4)
	char                                                         pad0x4_E78D0[0x4];                                 // 0x3cc(0x4)
	class UClass*                                                MaterialGroup;                                     // 0x3d0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnarmedCombatWieldableItemAnimationStoreId: public WieldableItemAnimationStoreId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CrewOwnershipTrackingComponentMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockLarge: public ImpactProjectileId
{
public:
};


// Size 0x118 (Full Size[0x4e8] - InheritedSize[0x3d0]
class ControllableObject: public InteractableBase
{
public:
	char                                                         pad0x30_DISAH[0x30];                               // 0x3d0(0x30)
	struct ControlObjectActionRuleParams                         ControlObjectActionRuleParams;                     // 0x400(0x10)
	class PhrasesRadialDataAsset*                                Phrases;                                           // 0x410(0x8)
	bool                                                         AllowDisconnectWhenIdle;                           // 0x418(0x1)
	char                                                         pad0x3_O62Q4[0x3];                                 // 0x419(0x3)
	bool                                                         IsAllowedToKickOffFriendlyAI;                      // 0x420(0x1)
	char                                                         pad0xa7_BCICU[0xa7];                               // 0x421(0xa7)
	char                                                         pad0x20_34AD2[0x20];                               // 0x4c8(0x20)
};


// Size 0x70 (Full Size[0x488] - InheritedSize[0x418]
class ArmoryChestInteraction: public PossessionsChestInteraction
{
public:
	TArray<class Class*>                                         Categories;                                        // 0x418(0x10)
	bool                                                         AllTab;                                            // 0x428(0x1)
	char                                                         pad0x5f_M4DVF[0x5f];                               // 0x429(0x5f)
};


// Size 0x50 (Full Size[0x420] - InheritedSize[0x3d0]
class MovableNetProxy: public NetProxy
{
public:
	char                                                         pad0x50_R9LET[0x50];                               // 0x3d0(0x50)
};


// Size 0x10 (Full Size[0x68] - InheritedSize[0x58]
class LandmarkReactionEventCallObjectFunction: public LandmarkReactionEvent
{
public:
	char                                                         RunLocation;                                       // 0x58(0x1)
	char                                                         pad0x3_MP3K4[0x3];                                 // 0x59(0x3)
	struct FName                                                 FunctionName;                                      // 0x5c(0x8)
	char                                                         pad0x4_BU2IY[0x4];                                 // 0x64(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_TreasureChest: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdHarpoonProjectile: public ImpactProjectileId
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class CapstanDescAsset: public ShipPartDescAsset
{
public:
	struct CapstanDesc                                           CapstanDesc;                                       // 0x28(0x48)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class UseZiplineStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DartExplosionDamagerType: public DamagerType
{
public:
};


// Size 0x180 (Full Size[0x480] - InheritedSize[0x300]
class SharkAICharacterAudioComponent: public AICharacterAudioComponent
{
public:
	class SharkAICharacterAudioComponentParams*                  SharkAudioParams;                                  // 0x300(0x8)
	char                                                         pad0x160_HUBK9[0x160];                             // 0x308(0x160)
	class UClass*                                                CachedStrategyID;                                  // 0x468(0x8)
	char                                                         pad0x10_Y2IUB[0x10];                               // 0x470(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class CannonDescAsset: public ShipPartDescAsset
{
public:
	struct CannonDesc                                            CannonDesc;                                        // 0x28(0x30)
};


// Size 0x10 (Full Size[0x58] - InheritedSize[0x48]
class MeshMemoryConstraintScoringPlayerDistance: public MeshMemoryConstraintScoringObject
{
public:
	float                                                        MaxDistanceSqr;                                    // 0x48(0x4)
	char                                                         pad0xc_8Q623[0xc];                                 // 0x4c(0xc)
};


// Size 0x18 (Full Size[0x2c0] - InheritedSize[0x2a8]
class TestPlayerTelemetryComponent: public PlayerTelemetryComponent
{
public:
	char                                                         pad0x18_4JH1N[0x18];                               // 0x2a8(0x18)
};


// Size 0x10 (Full Size[0x1970] - InheritedSize[0x1960]
class FixedWaterHeightShip: public Ship
{
public:
	class FixedWaterHeightShipComponent*                         FixedWaterHeightComponent;                         // 0x1960(0x8)
	bool                                                         CanUpdateClientMovement;                           // 0x1968(0x1)
	char                                                         pad0x7_TMLBW[0x7];                                 // 0x1969(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FiredActorFromCannonConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsShipCustomizedWithStatCondition: public StatCondition
{
public:
	struct RequiredShipCustomizationData                         RequiredShipCustomizationData;                     // 0x28(0x18)
};


// Size 0x78 (Full Size[0x370] - InheritedSize[0x2f8]
class FrontendPremiumShopViewModelComponent: public PremiumShopViewModelComponentBase
{
public:
	char                                                         pad0x78_UKLPW[0x78];                               // 0x2f8(0x78)
};


// Size 0x30 (Full Size[0x250] - InheritedSize[0x220]
class BuriedItemStepFromLocationDesc: public BuriedItemStepDesc
{
public:
	struct QuestVariableVector                                   ItemLocation;                                      // 0x220(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISmallShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class CutscenePoolTypeResettable: public CutscenePoolType
{
public:
};


// Size 0x2a0 (Full Size[0x638] - InheritedSize[0x398]
class CoherentBaseHUDComponent: public CoherentUIGTInstancedComponent
{
public:
	class Pawn*                                                  CurrentPawn;                                       // 0x398(0x8)
	char                                                         pad0x298_2ZJNX[0x298];                             // 0x3a0(0x298)
};


// Size 0x1b8 (Full Size[0x700] - InheritedSize[0x548]
class SunkenCurseArtefact: public StatueThreatBase
{
public:
	char                                                         pad0x8_IIZ4B[0x8];                                 // 0x548(0x8)
	struct Vector                                                OffsetFromOrigin;                                  // 0x550(0xc)
	struct PlayerStat                                            DefeatedStat;                                      // 0x55c(0x4)
	struct Color                                                 ArtefactColour;                                    // 0x560(0x4)
	char                                                         pad0x4_QOJCV[0x4];                                 // 0x564(0x4)
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x568(0x8)
	char                                                         pad0x190_H94SO[0x190];                             // 0x570(0x190)
};


// Size 0x8 (Full Size[0x168] - InheritedSize[0x160]
class InteractableComponentWithTooltipDetailedEventProvider: public InteractableComponentWithActionRules
{
public:
	char                                                         pad0x8_IFT8D[0x8];                                 // 0x160(0x8)
};


// Size 0x8 (Full Size[0x630] - InheritedSize[0x628]
class LandmarkSphere: public Landmark
{
public:
	class ShapeComponent*                                        DefaultShape;                                      // 0x628(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogPredicate: public NPCDialogExpression
{
public:
	char                                                         pad0x10_9EDZ2[0x10];                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class UnlockedFortDoorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x10 (Full Size[0x178] - InheritedSize[0x168]
class CutsceneMechanismActionComponent: public MechanismActionComponent
{
public:
	struct FName                                                 CutsceneName;                                      // 0x168(0x8)
	class Actor*                                                 CutSceneActor;                                     // 0x170(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsPlayerAMemberOfTheGuildThatTheCrewIsCurrentlyRepresentingStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TakesItemFromStorageContainerConditionalTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class AthenaGameEngineSettingsWindows: public AthenaGameEngineSettings
{
public:
	char                                                         pad0x10_D07ME[0x10];                               // 0x50(0x10)
};


// Size 0x10 (Full Size[0x680] - InheritedSize[0x670]
class PocketWatchAnimationInstance: public WieldableItemAnimationInstance
{
public:
	struct Rotator                                               MinuteHandRotation;                                // 0x668(0xc)
	struct Rotator                                               HourHandRotation;                                  // 0x674(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdThrowingKnife_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBucketScoopType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsCaptainedSessionNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class MapMarkRenderResource: public MapRenderResource
{
public:
	class UClass*                                                MarkTypeId;                                        // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FleeAICharacterRecoverMethod: public AICharacterRecoverMethod
{
public:
};


// Size 0x10 (Full Size[0x1970] - InheritedSize[0x1960]
class TestShipActorPhysicsErrorCorrection: public Ship
{
public:
	char                                                         pad0x10_35BPP[0x10];                               // 0x1960(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Boogie: public ImpactProjectileId
{
public:
};


// Size 0x70 (Full Size[0x530] - InheritedSize[0x4c0]
class AIShipItemSpawnComponent: public ItemSpawnComponent
{
public:
	bool                                                         SpawnForBattleFinalShip;                           // 0x4c0(0x1)
	char                                                         pad0x6f_PGN7N[0x6f];                               // 0x4c1(0x6f)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionFireTutorialDialogOptionSelectedEvent: public NPCDialogOption
{
public:
	char                                                         TutorialDialogOption;                              // 0xd8(0x1)
	char                                                         pad0x7_YDDW4[0x7];                                 // 0xd9(0x7)
	struct FText                                                 Text;                                              // 0xe0(0x38)
	bool                                                         CloseOnExectuted;                                  // 0x118(0x1)
	char                                                         pad0x3_NIJXV[0x3];                                 // 0x119(0x3)
	int                                                          LinkedDialog;                                      // 0x11c(0x4)
	bool                                                         RelevantOnServer;                                  // 0x120(0x1)
	char                                                         pad0x7_DJ6AK[0x7];                                 // 0x121(0x7)
};


// Size 0x110 (Full Size[0x1e8] - InheritedSize[0xd8]
class NPCDialogOptionShop: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	class ShopDesc*                                              ShopDesc;                                          // 0x110(0x8)
	class Controller*                                            Interactor;                                        // 0x118(0x8)
	char                                                         pad0xc8_AM43W[0xc8];                               // 0x120(0xc8)
};


// Size 0xa8 (Full Size[0x150] - InheritedSize[0xa8]
class TaleQuestSpawnAIStep: public TaleQuestBlueprintStep
{
public:
	class AISpawner*                                             Spawner;                                           // 0xa8(0x8)
	class SimpleAIRegion*                                        Region;                                            // 0xb0(0x8)
	char                                                         pad0x28_98IVS[0x28];                               // 0xb8(0x28)
	class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0xe0(0x8)
	class FilterFirstPlayerEnterPlayerTrackerDecorator*          VoyageParticipantOnlyActivateFilter;               // 0xe8(0x8)
	char                                                         pad0x60_FLOC0[0x60];                               // 0xf0(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdTrap: public ImpactProjectileId
{
public:
};


// Size 0xcd0 (Full Size[0xda0] - InheritedSize[0xd0]
class AthenaTutorialComponent: public TutorialComponent
{
public:
	struct MainTutorialSequence                                  MainTutorial;                                      // 0xd0(0xcd0)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class SimpleShipSinkingHandler: public ShipSinkingHandler
{
public:
	char                                                         pad0x8_0GP3T[0x8];                                 // 0x60(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryItemUseReleasedNotificationInputId: public PrimaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x2a0 (Full Size[0x5c0] - InheritedSize[0x320]
class HangingComponent: public SeatComponentBase
{
public:
	struct HangingActionStateParams                              HangingActionStateParams;                          // 0x320(0x230)
	struct FText                                                 InteractionTextTakingDamage;                       // 0x550(0x38)
	TArray<struct PlayerStat>                                    OnHangStats;                                       // 0x588(0x10)
	char                                                         HangingComponentId;                                // 0x598(0x1)
	char                                                         pad0x7_H3YQ4[0x7];                                 // 0x599(0x7)
	struct FString                                               HangingComponentName;                              // 0x5a0(0x10)
	char                                                         pad0x10_O6LD1[0x10];                               // 0x5b0(0x10)
};


// Size 0x110 (Full Size[0x5d0] - InheritedSize[0x4c0]
class KrakenTentacleItemSpawnComponent: public ItemSpawnComponent
{
public:
	class ShortRangeMarkerDataAsset*                             RewardMarkerParams;                                // 0x4c0(0x8)
	char                                                         pad0x108_3P9O8[0x108];                             // 0x4c8(0x108)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SwimmingCreaturePawnHealthChangedStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x60 (Full Size[0x120] - InheritedSize[0xc0]
class WaitForAshenLordHealthStageStep: public WaitForAshenLordPawnBaseStep
{
public:
	char                                                         pad0x60_VI01O[0x60];                               // 0xc0(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snake: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x300] - InheritedSize[0x300]
class DebugFlyingInputComponent: public AthenaCharacterBaseLocomotionInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlintlockDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdAshenLordVolcanoRockSmall: public ImpactProjectileId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TestServerNetworkedEventsWhitelistDefinition: public NetworkedEventsWhitelistDefinition
{
public:
	TArray<class ScriptStruct*>                                  ValidEvents;                                       // 0x28(0x10)
};


// Size 0x380 (Full Size[0x1dc0] - InheritedSize[0x1a40]
class OnlineAthenaPlayerController: public AthenaPlayerController
{
public:
	char                                                         pad0x8_5R584[0x8];                                 // 0x1a40(0x8)
	struct MysteriousNotesCompletionEventsModelEntry             LogoutNoteCompletionIdent;                         // 0x1a48(0x8)
	char                                                         pad0x21_G5CPJ[0x21];                               // 0x1a50(0x21)
	bool                                                         IdleDisconnectEnabled;                             // 0x1a71(0x1)
	char                                                         pad0x34e_RT7NA[0x34e];                             // 0x1a72(0x34e)
};


// Size 0x28 (Full Size[0x58] - InheritedSize[0x30]
class CommodityHasDemandNPCDialogConditional: public NPCDialogConditional
{
public:
	struct FName                                                 CompanyNPCName;                                    // 0x30(0x8)
	struct CommoditySelectionType                                CommodityType;                                     // 0x38(0x8)
	char                                                         RequiredCommodityDemand;                           // 0x40(0x1)
	char                                                         pad0x17_4JEBX[0x17];                               // 0x41(0x17)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerSpawnerWeightedListOfWeightedItemList: public StorageContainerSpawnerItemListBase
{
public:
	TArray<struct StorageContainerWeightedItemListEntryList>     Entries;                                           // 0x28(0x10)
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class ItemDesc: public EntitlementDesc
{
public:
	bool                                                         CanBeAddedToLoadout;                               // 0xc8(0x1)
	bool                                                         IsTransient;                                       // 0xc8(0x1)
	char                                                         pad0x3_RJXZK[0x3];                                 // 0xc9(0x3)
	bool                                                         AvailableInSaferSeas;                              // 0xcc(0x1)
	char                                                         pad0x3_SQ1OD[0x3];                                 // 0xcd(0x3)
	struct FString                                               PreviousItem;                                      // 0xd0(0x10)
	struct FString                                               NextItem;                                          // 0xe0(0x10)
	struct StringAssetReference                                  IconRadPath;                                       // 0xf0(0x10)
	struct StringClassReference                                  InstanceClassType;                                 // 0x100(0x10)
	TArray<struct ItemInfoTogglePair>                            ItemInfoOverrides;                                 // 0x110(0x10)
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class OneShotPlaceableReactionMechanismAction: public PlaceableReaction
{
public:
	char                                                         pad0x8_TXAM5[0x8];                                 // 0x3c8(0x8)
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3d0(0x8)
	char                                                         pad0x18_A3D8H[0x18];                               // 0x3d8(0x18)
};


// Size 0x60 (Full Size[0xa8] - InheritedSize[0x48]
class SeatStat_SitOnShipOnFire: public SeatStat
{
public:
	char                                                         pad0x60_0IR44[0x60];                               // 0x48(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snooze: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WasAnActorTheExplosionWielderOfTheOtherActorStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TaleQuestStatQueryLessThanFunction: public TaleQuestStatQueryFunctionComparator
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class OpenableItemMaterialAnimationReactionComponent: public OpenableItemReactionComponent
{
public:
	TArray<struct OpenableItemMaterialAnimationReactionComponentAnimationNameAndSfxCueSet> AnimNameSets;                                      // 0xc8(0x10)
	class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleQuestPlankService: public TaleQuestToolService
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FuseComponentMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0xd8 (Full Size[0x4f0] - InheritedSize[0x418]
class ShipCustomizationChestInteraction: public PossessionsChestInteraction
{
public:
	TArray<struct FeaturedShipCustomisationCategory>             Categories;                                        // 0x418(0x10)
	bool                                                         AllTab;                                            // 0x428(0x1)
	char                                                         pad0xc7_QBBOI[0xc7];                               // 0x429(0xc7)
};


// Size 0x20 (Full Size[0x320] - InheritedSize[0x300]
class BlendedLightingZoneComponent: public LightingZoneComponent
{
public:
	class CurveFloat*                                            FadeCurveNormalised;                               // 0x2f8(0x8)
	class CurveFloat*                                            FadeOutCurveNormalised;                            // 0x300(0x8)
	char                                                         pad0x18_NCIG2[0x18];                               // 0x308(0x18)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BootyItemShipOwnershipComponentMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x30 (Full Size[0x330] - InheritedSize[0x300]
class KrakenAICharacterAudioComponent: public AICharacterAudioComponent
{
public:
	class KrakenAICharacterAudioComponentParams*                 AICharacterAudioParams;                            // 0x300(0x8)
	struct WwiseEmitter                                          KrakenBodyEmitter;                                 // 0x308(0x20)
	char                                                         pad0x8_8WJ1V[0x8];                                 // 0x328(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MultipleContextsRadialContext: public RadialContextBase
{
public:
	TArray<class RadialContextBase*>                             RadialContexts;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Artifact: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class SkeletalMeshWieldableItem: public WieldableItem
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EnemyKnockedOffTightropeStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsReapersTributeShipCurrentlyPlayerControlledCondition: public StatCondition
{
public:
	char                                                         pad0x18_Y3BH6[0x18];                               // 0x28(0x18)
};


// Size 0x8 (Full Size[0x188] - InheritedSize[0x180]
class ActorDamageableComponent: public DamageableComponent
{
public:
	class HealthComponent*                                       HealthComp;                                        // 0x180(0x8)
};


// Size 0x0 (Full Size[0x878] - InheritedSize[0x878]
class TestAthenaPlayerState: public AthenaPlayerState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrapExplosionDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkullOfStormsDamagerType: public DamagerType
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleQuestCompassServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class UClass*                                                CompassDesc;                                       // 0x30(0x8)
};


// Size 0x8 (Full Size[0x1f8] - InheritedSize[0x1f0]
class EventDrivenAIRageComponent: public ChestOfRageComponent
{
public:
	char                                                         pad0x8_ZLUGM[0x8];                                 // 0x1f0(0x8)
};


// Size 0x0 (Full Size[0x2c0] - InheritedSize[0x2c0]
class ItemRepresentationFlamesOfFateContainerComponent: public FlamesOfFateContainerComponent
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleQuestPlankServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class UClass*                                                WoodenPlankDesc;                                   // 0x30(0x8)
};


// Size 0x8 (Full Size[0x298] - InheritedSize[0x290]
class LadderInputComponent: public LookAtOffsetInputComponent
{
public:
	char                                                         pad0x8_85TYD[0x8];                                 // 0x290(0x8)
};


// Size 0x0 (Full Size[0x4d8] - InheritedSize[0x4d8]
class HauntedFortEmplacement: public HauntedFortTarget
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class SchedulerGameEventSwitchesDataTypeManager: public SwitchesDataTypeManagerBase
{
public:
	char                                                         pad0x10_B5W3L[0x10];                               // 0x60(0x10)
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class NonStorableItemInfo: public ItemInfo
{
public:
};


// Size 0x70 (Full Size[0xf8] - InheritedSize[0x88]
class CollectorsChestItemDescSpawnData: public ItemSpawnData
{
public:
	char                                                         pad0x20_1ZRYD[0x20];                               // 0x88(0x20)
	struct WeightedProbabilityRange                              NumberOfItemsToSpawn;                              // 0xa8(0x20)
	struct WeightedItemDescSpawnDataAssetsWithWeights            ItemsToSpawnInsideCollectorsChest;                 // 0xc8(0x10)
	class WeightedGoldRewardsDataAsset*                          GoldToSpawnInsideCollectorsChest;                  // 0xd8(0x8)
	char                                                         pad0x18_QERI0[0x18];                               // 0xe0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Barrel: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x1e0 (Full Size[0x5b0] - InheritedSize[0x3d0]
class PickupableObject: public InteractableBase
{
public:
	char                                                         pad0x10_FHJLC[0x10];                               // 0x3d0(0x10)
	struct StartPickupObjectActionRuleParams                     StartPickupObjectActionRuleParams;                 // 0x3e0(0x10)
	float                                                        PickupTime;                                        // 0x3f0(0x4)
	char                                                         pad0x10c_OSRRI[0x10c];                             // 0x3f4(0x10c)
	struct FText                                                 PickupTooltipDescription;                          // 0x500(0x38)
	struct FText                                                 PickupInventoryFullTooltipDescription;             // 0x538(0x38)
	struct FText                                                 StoreTooltipDescription;                           // 0x570(0x38)
	char                                                         pad0x8_SU6UW[0x8];                                 // 0x5a8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LongRangeGunAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DartTypeId_Lure: public DartTypeId
{
public:
};


// Size 0x20 (Full Size[0x1980] - InheritedSize[0x1960]
class ShipErrorOnNonAuthorityPhysicsChange: public Ship
{
public:
	class BaseHullDragDynamicsDesc*                              HullDragDynamicsDesc;                              // 0x1960(0x8)
	char                                                         pad0x18_8TTHS[0x18];                               // 0x1968(0x18)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleQuestLanternServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class UClass*                                                LanternDesc;                                       // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryA: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ZoomInOnWieldableItemReleasedNotificationInputId: public ZoomInOnWieldableItemPressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CursedChest_Weeping: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class ReplicatedShipPartCustomizationComponent: public ShipPartCustomizationComponent
{
public:
	struct PartDesc                                              PartDesc;                                          // 0xb8(0x20)
	char                                                         pad0x20_GXV21[0x20];                               // 0xd8(0x20)
};


// Size 0x10 (Full Size[0x158] - InheritedSize[0x148]
class DynamicOnlyMechanismTriggerComponent: public MechanismTriggerComponent
{
public:
	TArray<class Actor*>                                         MechanismActors;                                   // 0x148(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonSplashDamagerType: public DamagerType
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TestAnchorDynamicsDesc: public BaseAnchorDynamicsDesc
{
public:
	char                                                         pad0x18_9JH8M[0x18];                               // 0x28(0x18)
};


// Size 0x14d0 (Full Size[0x7510] - InheritedSize[0x6040]
class ThirdPersonAnimationInstance: public AthenaAnimationInstance
{
public:
	float                                                        ItemAnimPausedTimeRemaining;                       // 0x6038(0x4)
	bool                                                         IsItemAnimPaused;                                  // 0x603c(0x1)
	bool                                                         UseContinualLoopInOneShotState;                    // 0x603c(0x1)
	char                                                         pad0x3_2WHKT[0x3];                                 // 0x603d(0x3)
	struct AthenaAnimationIKLimbStretch                          IKLimbStretchParams;                               // 0x6040(0xc)
	char                                                         pad0x4_2ROB3[0x4];                                 // 0x604c(0x4)
	struct AthenaAnimationLadder                                 LadderAnimationParams;                             // 0x6050(0x330)
	struct AthenaAnimationTalking                                Talking;                                           // 0x6380(0x38)
	struct AthenaAnimationPitchControlStates                     PitchTargetingControlStates;                       // 0x63b8(0x168)
	struct AthenaAnimationObjectTargetingOptions                 PitchTargetingParameters;                          // 0x6520(0x3c)
	struct AthenaAnimationObjectTargetingOptions                 WantedPitchTargetingParameters;                    // 0x655c(0x3c)
	struct AthenaAnimationPitchAlpha                             PitchTargetingAlpha;                               // 0x6598(0x14)
	struct AthenaAnimationPitchShoulders                         PitchShoulderParams;                               // 0x65ac(0x1c)
	struct AthenaAnimationMountedWeapon                          MountedWeaponAnimationParams;                      // 0x65c8(0x128)
	struct AthenaAnimationFootPlanting                           FootPlanting;                                      // 0x66f0(0x48)
	char                                                         StairAnimationState;                               // 0x6738(0x1)
	char                                                         pad0x7_CNQ5C[0x7];                                 // 0x6739(0x7)
	struct AthenaAnimationPulleyControl                          PulleyControl;                                     // 0x6740(0x40)
	struct AthenaAnimationPulleyControlAnimData                  PulleyControlAnimData;                             // 0x6780(0x48)
	struct AthenaAnimationKeyedInstrumentAnimData                KeyedInstrumentAnimData;                           // 0x67c8(0x18)
	struct AthenaAnimationAI                                     AIAnimationParams;                                 // 0x67e0(0x358)
	struct AthenaAnimationLocomotionAlternateAnimData            LocomotionDrunk;                                   // 0x6b38(0x50)
	struct AthenaAnimationLocomotionAlternateAnimData            LocomotionLimp;                                    // 0x6b88(0x50)
	struct AthenaAnimationLocomotionAlternateAnimData            LocomotionPegLeg;                                  // 0x6bd8(0x50)
	struct AthenaAnimationLocomotionAlternateAnimData            LocomotionHotCoals;                                // 0x6c28(0x50)
	TArray<struct AthenaAnimationSpawnBase>                      AISpawnStruct;                                     // 0x6c78(0x10)
	TArray<struct AthenaAnimationSkeletonFlee>                   AIFleeLoadingStruct;                               // 0x6c88(0x10)
	struct AthenaAnimationSkeletonFleeInGraph                    AIFleePlayingStruct;                               // 0x6c98(0x38)
	struct AthenaAnimationSkeletonScream                         SkeletonScream;                                    // 0x6cd0(0x8)
	class BlendSpace1D*                                          PitchAnimationToPlay;                              // 0x6cd8(0x8)
	struct AthenaAnimationShopInteractionParams                  ShopInteractionParams;                             // 0x6ce0(0x30)
	struct AthenaAnimationEmoteAnimgraphStructure                EmoteParams;                                       // 0x6d10(0x160)
	struct AthenaAnimationSkeletonCurseAnimations                SkeletonCurseAnims;                                // 0x6e70(0x28)
	struct AthenaAnimationHarpoonLauncherAnimData                HarpoonLauncherAnims;                              // 0x6e98(0x28)
	struct AthenaAnimationMountableSpotlightMechanismAnimData    MountableSpotlightMechanismAnims;                  // 0x6ec0(0x28)
	struct AthenaAnimationAIKnockback                            AIKnockbackStruct;                                 // 0x6ee8(0x30)
	struct AthenaAnimationHitReactsAnimData                      HitReactionsAnimationData;                         // 0x6f18(0x40)
	struct AthenaAnimationHitReactsSelectedAnimations            HitReactionsSelectedAnimationData;                 // 0x6f58(0x48)
	struct AthenaAnimationHitReactParams                         HitReactionsAnimationParams;                       // 0x6fa0(0x2c)
	char                                                         pad0x4_YSRB1[0x4];                                 // 0x6fcc(0x4)
	struct AthenaAnimationSinkingTunnel                          Sinking;                                           // 0x6fd0(0x68)
	float                                                        HitReactAdditiveBlendAmount;                       // 0x7038(0x4)
	float                                                        WieldedItemPoseBlendTime;                          // 0x703c(0x4)
	float                                                        UpperBodyPoseBlendTime;                            // 0x7040(0x4)
	float                                                        AimingAndPitchOverride;                            // 0x7044(0x4)
	float                                                        FacialOverlayBlendWeight;                          // 0x7048(0x4)
	struct Rotator                                               PitchShoulderRotation;                             // 0x704c(0xc)
	struct Rotator                                               PitchClavicleRotation;                             // 0x7058(0xc)
	float                                                        RightArmPitchAlpha;                                // 0x7064(0x4)
	float                                                        LeftArmPitchAlpha;                                 // 0x7068(0x4)
	float                                                        SpineRotation;                                     // 0x706c(0x4)
	struct AthenaAnimationStunData                               StunData;                                          // 0x7070(0x8)
	class BlendSpace1D*                                          HitReactItem;                                      // 0x7078(0x8)
	float                                                        WorldDelta;                                        // 0x7080(0x4)
	float                                                        CapstanAngularVelocityWanted;                      // 0x7084(0x4)
	struct AthenaAnimationPlayingFacialAnimations                PlayingFacialAnimations;                           // 0x7088(0x40)
	struct AthenaAnimationPlayingEquipAnimations                 PlayingEquipAnimations;                            // 0x70c8(0x18)
	float                                                        CharacterPitch;                                    // 0x70e0(0x4)
	float                                                        TargetingPitch;                                    // 0x70e4(0x4)
	float                                                        FullBodyOverlayPoseBlendOutTime;                   // 0x70e8(0x4)
	char                                                         pad0x4_HQG7O[0x4];                                 // 0x70ec(0x4)
	struct AthenaAnimationObjectLocomotionAnimations             ItemAlternateLocomotionAnims;                      // 0x70f0(0x40)
	struct AthenaAnimationObjectIdleAnimations                   ItemAlternateIdleAnims;                            // 0x7130(0x18)
	struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemPrimaryContinousUseAnimsPitchOverride;         // 0x7148(0x78)
	struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemSecondaryContinousUseAnimsPitchOverride;       // 0x71c0(0x78)
	struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemPrimaryContinousUseAlternateAnimsPitchOverride; // 0x7238(0x78)
	struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemSecondaryContinousUseAlternateAnimsPitchOverride; // 0x72b0(0x78)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAnimsPitchOverride; // 0x7328(0x20)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAnimsPitchOverride; // 0x7348(0x20)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAlternateAnimsPitchOverride; // 0x7368(0x20)
	struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAlternateAnimsPitchOverride; // 0x7388(0x20)
	struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemPrimaryContinousUseJumpingAnimsPitchOverride;  // 0x73a8(0x20)
	struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemSecondaryContinousUseJumpingAnimsPitchOverride; // 0x73c8(0x20)
	struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemPrimaryContinousUseJumpingAlternateAnimsPitchOverride; // 0x73e8(0x20)
	struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemSecondaryContinousUseJumpingAlternateAnimsPitchOverride; // 0x7408(0x20)
	struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemPrimaryOneShotAnimsPitchOverride;              // 0x7428(0x28)
	struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemSecondaryOneShotAnimsPitchOverride;            // 0x7450(0x28)
	struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemPrimaryOneShotAlternateAnimsPitchOverride;     // 0x7478(0x28)
	struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemSecondaryOneShotAlternateAnimsPitchOverride;   // 0x74a0(0x28)
	bool                                                         ZeroLocomotionForced;                              // 0x74c8(0x1)
	bool                                                         ConcealedInLoadable;                               // 0x74c8(0x1)
	bool                                                         AIUseAlternateLocomotion;                          // 0x74c8(0x1)
	bool                                                         EmoteIKIsOff;                                      // 0x74c8(0x1)
	bool                                                         InBlockingInto;                                    // 0x74c8(0x1)
	bool                                                         IsAI;                                              // 0x74c8(0x1)
	bool                                                         IsLocallyControlled;                               // 0x74c8(0x1)
	bool                                                         IsHit;                                             // 0x74c8(0x1)
	bool                                                         InRecover;                                         // 0x74c9(0x1)
	bool                                                         InWarmUp;                                          // 0x74c9(0x1)
	bool                                                         PlayingFullBodyAnimation;                          // 0x74c9(0x1)
	bool                                                         PlayingUpperBodyAnimation;                         // 0x74c9(0x1)
	bool                                                         PlayingRightArmOverlayAnimation;                   // 0x74c9(0x1)
	bool                                                         PlayingSpineOverlayAnimation;                      // 0x74c9(0x1)
	bool                                                         PlayingLeftArmOverlayAnimation;                    // 0x74c9(0x1)
	bool                                                         IsUsingFullBodyOverlayPose;                        // 0x74c9(0x1)
	bool                                                         IsUsingLocalIKPose;                                // 0x74ca(0x1)
	bool                                                         IsRightShoulderActive;                             // 0x74ca(0x1)
	bool                                                         IsLeftShoulderActive;                              // 0x74ca(0x1)
	bool                                                         ControllableObjectTypeHasValidTarget;              // 0x74ca(0x1)
	bool                                                         UseHandsAndFootplantingIK;                         // 0x74ca(0x1)
	bool                                                         IKLODActive;                                       // 0x74ca(0x1)
	bool                                                         LODSolverActive;                                   // 0x74ca(0x1)
	bool                                                         ObjectPitchTargetingActive;                        // 0x74ca(0x1)
	bool                                                         ObjectOrIKEmoteActive;                             // 0x74cb(0x1)
	bool                                                         ObjectOrWheelCapstanAndNotDocking;                 // 0x74cb(0x1)
	bool                                                         HitReact1Active;                                   // 0x74cb(0x1)
	bool                                                         HitReact2Active;                                   // 0x74cb(0x1)
	bool                                                         AthenaCharacterIsValid;                            // 0x74cb(0x1)
	bool                                                         UsePrimaryActionPitchOverride;                     // 0x74cb(0x1)
	bool                                                         UseSecondaryActionPitchOverride;                   // 0x74cb(0x1)
	char                                                         pad0x44_RJV85[0x44];                               // 0x74cc(0x44)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class OnBuryAdjustFuseTimeScale: public OnBuryStrategy
{
public:
	float                                                        FuseTimeScaleOnBury;                               // 0x28(0x4)
	char                                                         pad0x4_M0THF[0x4];                                 // 0x2c(0x4)
};


// Size 0x60 (Full Size[0xa8] - InheritedSize[0x48]
class SeatStat_SitOnSinkingShip: public SeatStat
{
public:
	char                                                         pad0x60_27OIG[0x60];                               // 0x48(0x60)
};


// Size 0x1f8 (Full Size[0x2d0] - InheritedSize[0xd8]
class SkellyFortDataAsset: public FortDataAsset
{
public:
	class UClass*                                                GameEventType;                                     // 0xd8(0x8)
	char                                                         BountySpawnerType;                                 // 0xe0(0x1)
	char                                                         pad0x3_X0B47[0x3];                                 // 0xe1(0x3)
	float                                                        FindAvailableFortThrottle;                         // 0xe4(0x4)
	TArray<struct Name>                                          UnavailableFortNamesOnDemand;                      // 0xe8(0x10)
	class UClass*                                                FortSignalClass;                                   // 0xf8(0x8)
	class UClass*                                                FortSignal_SPCActivityType;                        // 0x100(0x8)
	class GameEventBannerDataAsset*                              CompletionBanner;                                  // 0x108(0x8)
	class BountyQuestDescData*                                   BountyQuestDescData;                               // 0x110(0x8)
	struct BountyQuestRandomSpawnGeneratorParams                 BountyQuestRandomSpawnGeneratorParams;             // 0x118(0x148)
	TArray<struct AdditionalWave>                                AdditionalWaves;                                   // 0x260(0x10)
	class AISkillsetRankProgression*                             CrewSkillset;                                      // 0x270(0x8)
	class AISkillsetRankProgression*                             CaptainSkillset;                                   // 0x278(0x8)
	class AIItemSpawnRankProgression*                            CrewItemDrops;                                     // 0x280(0x8)
	class AIItemSpawnRankProgression*                            CaptainItemDrops;                                  // 0x288(0x8)
	class EnvQuery*                                              FindSpawnPosQuery;                                 // 0x290(0x8)
	struct WeightedProbabilityRange                              WaveRank;                                          // 0x298(0x20)
	struct PlayerStat                                            PlayerStatToFireOnOpen;                            // 0x2b8(0x4)
	char                                                         pad0x4_EVX5U[0x4];                                 // 0x2bc(0x4)
	TArray<struct PlayerStat>                                    AdditionalPlayerStatsToFireOnOpen;                 // 0x2c0(0x10)
};


// Size 0x100 (Full Size[0x480] - InheritedSize[0x380]
class ShipLeakerComponent: public LeakerComponent
{
public:
	class ParticleSystem*                                        ParticleSystem_SplashOnInternalWaterSurface;       // 0x378(0x8)
	int                                                          TickInterval;                                      // 0x380(0x4)
	char                                                         pad0x4_8PLPA[0x4];                                 // 0x384(0x4)
	class Ship*                                                  Ship;                                              // 0x388(0x8)
	class ShipInternalWater*                                     InternalWater;                                     // 0x390(0x8)
	TArray<struct ShipLeak>                                      ShipLeaks;                                         // 0x398(0x10)
	char                                                         pad0xd8_M7X1E[0xd8];                               // 0x3a8(0xd8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PirateLegendTypeFilter: public PirateLegendSectionFilter
{
public:
	char                                                         AllowedType;                                       // 0x28(0x1)
	char                                                         pad0x7_JM9CZ[0x7];                                 // 0x29(0x7)
};


// Size 0x20 (Full Size[0xe0] - InheritedSize[0xc0]
class CachedResourceProviderComponent: public ResourceProviderComponent
{
public:
	char                                                         pad0x18_33AMS[0x18];                               // 0xc0(0x18)
	class ResourceCache*                                         Cache;                                             // 0xd8(0x8)
};


// Size 0x30 (Full Size[0x140] - InheritedSize[0x110]
class SpawnPhasedActorFromInputPinStepDesc: public SpawnPhasedActorStepDesc
{
public:
	struct QuestVariableActorAssetType                           PhasedActorType;                                   // 0x110(0x30)
};


// Size 0x10 (Full Size[0x320] - InheritedSize[0x310]
class FishingRegionComponent: public WorldRegionComponent
{
public:
	class AvailableFishForSpawning*                              CustomAvailableFish;                               // 0x310(0x8)
	bool                                                         AlwaysTreatAsPond;                                 // 0x318(0x1)
	bool                                                         UseCustomChanceOfComedyItems;                      // 0x319(0x1)
	char                                                         pad0x2_JAOTS[0x2];                                 // 0x31a(0x2)
	float                                                        CustomChanceOfComedyItems;                         // 0x31c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinyKrakenGameEventType: public GameEventType
{
public:
};


// Size 0x30 (Full Size[0x4f0] - InheritedSize[0x4c0]
class FortItemSpawnComponent: public ItemSpawnComponent
{
public:
	TArray<class Class*>                                         AllowedGameEventTypes;                             // 0x4c0(0x10)
	TArray<struct SkellyFortGameEventOverrides>                  GameEventTypesOverrides;                           // 0x4d0(0x10)
	struct FName                                                 ExplosivesActivationKey;                           // 0x4e0(0x8)
	struct PlayerStat                                            StatToFireOnPlayerPickUp;                          // 0x4e8(0x4)
	bool                                                         IsMegaStashReward;                                 // 0x4ec(0x1)
	char                                                         pad0x3_MCNQX[0x3];                                 // 0x4ed(0x3)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class EntitlementSwitchesDataTypeManager: public SwitchesDataTypeManagerBase
{
public:
	char                                                         pad0x10_E8LGD[0x10];                               // 0x60(0x10)
};


// Size 0x18 (Full Size[0x60] - InheritedSize[0x48]
class MeshMemoryConstraintScoringPlayerView: public MeshMemoryConstraintScoringObject
{
public:
	char                                                         pad0x18_IFS3M[0x18];                               // 0x48(0x18)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class OnDigTriggerFuse: public OnDigStrategy
{
public:
	bool                                                         OnlyIfBuriedByPlayer;                              // 0x28(0x1)
	char                                                         pad0x7_LELZA[0x7];                                 // 0x29(0x7)
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class TeleportTriggerObject: public TriggerObject
{
public:
	class Actor*                                                 TargetTeleportActor;                               // 0x3a0(0x8)
	char                                                         pad0x8_U3I2W[0x8];                                 // 0x3a8(0x8)
	struct Transform                                             TeleportOffset;                                    // 0x3b0(0x30)
	float                                                        RelevancyTimeout;                                  // 0x3e0(0x4)
	char                                                         pad0xc_46S2D[0xc];                                 // 0x3e4(0xc)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class RankDesc: public EntitlementDesc
{
public:
	char                                                         pad0x8_Q307W[0x8];                                 // 0xc8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ReapersChestBrokenSealConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFortGameEventTypeBase: public GameEventType
{
public:
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionStartVoyageFromDesc: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	bool                                                         CloseOnExecuted;                                   // 0x110(0x1)
	char                                                         pad0x3_49PBX[0x3];                                 // 0x111(0x3)
	int                                                          LinkedDialog;                                      // 0x114(0x4)
	class VoyageDescDataAsset*                                   VoyageDesc;                                        // 0x118(0x8)
	bool                                                         TrySetTaleAsCurrentlyActive;                       // 0x120(0x1)
	char                                                         pad0x7_3MO5I[0x7];                                 // 0x121(0x7)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class EquippedWithClothingStatCondition: public StatCondition
{
public:
	struct RequiredClothingData                                  RequiredClothingData;                              // 0x28(0x18)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FOVHandlerItemActionEffect: public ItemActionEffect
{
public:
	float                                                        BlendSpeed;                                        // 0x28(0x4)
	float                                                        AimFOV;                                            // 0x2c(0x4)
};


// Size 0x10 (Full Size[0xa90] - InheritedSize[0xa80]
class KrakenShipWrappingTellAnimatedTentacle: public KrakenAnimatedTentacle
{
public:
	char                                                         pad0x10_EX4CT[0x10];                               // 0xa80(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Bite: public KrakenHeadState
{
public:
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionFireEvent: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	struct FName                                                 EventName;                                         // 0x110(0x8)
	bool                                                         CloseOnExecuted;                                   // 0x118(0x1)
	char                                                         pad0x3_VAW9T[0x3];                                 // 0x119(0x3)
	int                                                          LinkedDialog;                                      // 0x11c(0x4)
	bool                                                         RelevantOnServer;                                  // 0x120(0x1)
	char                                                         pad0x7_FZN85[0x7];                                 // 0x121(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RewardedCurrencyConditionalStatsTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BellDescAsset: public ShipPartDescAsset
{
public:
	struct BellDesc                                              BellDesc;                                          // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpikeMechanismDamagerType: public DamagerType
{
public:
};


// Size 0xb0 (Full Size[0x8a0] - InheritedSize[0x7f0]
class WieldableIngestible: public WieldableItem
{
public:
	char                                                         pad0x8_J9Y2N[0x8];                                 // 0x7f0(0x8)
	class GiveItemUponConsumptionComponent*                      GiveItemUponConsumptionComponent;                  // 0x7f8(0x8)
	class ApplyStatusToConsumerComponent*                        ApplyStatusToConsumerComponent;                    // 0x800(0x8)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x808(0x8)
	class FeedableComponent*                                     FeedableComponent;                                 // 0x810(0x8)
	float                                                        InToIngestionDuration;                             // 0x818(0x4)
	float                                                        OutOfIngestionDuration;                            // 0x81c(0x4)
	bool                                                         CanIngest;                                         // 0x820(0x1)
	char                                                         pad0x7_T2MLP[0x7];                                 // 0x821(0x7)
	class WwiseEvent*                                            IngestAudioEvent;                                  // 0x828(0x8)
	struct FName                                                 IngestAudioFoodType;                               // 0x830(0x8)
	struct PlayerStat                                            IngestionStat;                                     // 0x838(0x4)
	struct PlayerStat                                            IngestionShipStat;                                 // 0x83c(0x4)
	char                                                         pad0x48_U52YG[0x48];                               // 0x840(0x48)
	class WwiseEvent*                                            EatingSfx;                                         // 0x888(0x8)
	class WwiseEvent*                                            EatingSfxStop;                                     // 0x890(0x8)
	char                                                         pad0x8_HJLD8[0x8];                                 // 0x898(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Phantom: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TaleQuestStatQueryLesserOrEqualFunction: public TaleQuestStatQueryFunctionComparator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Ballast_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x2c0] - InheritedSize[0x2c0]
class MastRepairableComponent: public RepairableComponent
{
public:
};


// Size 0x1f0 (Full Size[0x5c0] - InheritedSize[0x3d0]
class ClamberSpot: public InteractableBase
{
public:
	char                                                         pad0x20_8HFOU[0x20];                               // 0x3d0(0x20)
	class InteractableComponent*                                 InteractableComponent;                             // 0x3f0(0x8)
	class SplineComponent*                                       ClamberSplineComponent;                            // 0x3f8(0x8)
	struct LadderBlendParams                                     ClamberBlendParams;                                // 0x400(0xc)
	char                                                         pad0x4_CAHPJ[0x4];                                 // 0x40c(0x4)
	struct FText                                                 InteractionVerb;                                   // 0x410(0x38)
	struct FText                                                 InteractionDisplayName;                            // 0x448(0x38)
	struct Vector                                                InteractionOffset;                                 // 0x480(0xc)
	char                                                         pad0x4_E6HWU[0x4];                                 // 0x48c(0x4)
	class WwiseEvent*                                            OnClamberSfx;                                      // 0x490(0x8)
	class WwiseObjectPoolWrapper*                                ClamberSpotPool;                                   // 0x498(0x8)
	char                                                         pad0x120_4BPHO[0x120];                             // 0x4a0(0x120)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsOnActiveVoyageNPCDialogConditional: public NPCDialogConditional
{
public:
	char                                                         VoyageType;                                        // 0x30(0x1)
	char                                                         pad0x7_2KO1O[0x7];                                 // 0x31(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownShovelDigType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x138 (Full Size[0x508] - InheritedSize[0x3d0]
class ModalInteractionProxy: public InteractableBase
{
public:
	char                                                         pad0x10_H7N4N[0x10];                               // 0x3d0(0x10)
	class PrimitiveComponent*                                    Mesh;                                              // 0x3e0(0x8)
	class InteractableComponent*                                 InteractionRegion;                                 // 0x408(0x8)
	class UClass*                                                InteractionType;                                   // 0x410(0x8)
	struct FText                                                 DefaultTooltip;                                    // 0x418(0x38)
	struct FText                                                 DefaultDisplayName;                                // 0x450(0x38)
	class UClass*                                                NotificationInputId;                               // 0x488(0x8)
	char                                                         DisplayPriority;                                   // 0x490(0x1)
	char                                                         pad0x77_Z1NTO[0x77];                               // 0x491(0x77)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SoloShip: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x138] - InheritedSize[0x138]
class SeaFortTelemetryComponent: public EventFortTelemetryComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingExpose: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Grog_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class ServantChampionCategory: public CategoryBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AncientTinySharkGameEventType: public GameEventType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class OnDigAdjustFuseTimeScale: public OnDigStrategy
{
public:
	float                                                        FuseTimeScaleOnDigUp;                              // 0x28(0x4)
	char                                                         pad0x4_WG25U[0x4];                                 // 0x2c(0x4)
};


// Size 0x100 (Full Size[0x230] - InheritedSize[0x130]
class TaleQuestSpawnAIStepDesc: public TaleQuestBlueprintStepDesc
{
public:
	struct QuestVariableAISpawner                                SpawnerAsset;                                      // 0x130(0x30)
	struct QuestVariableAsset                                    WaveSpawnLocation;                                 // 0x160(0x30)
	struct QuestVariableActor                                    WaveSpawnActorLocation;                            // 0x190(0x30)
	struct QuestVariableOrientedPoint                            WaveSpawnAtNamedPoint;                             // 0x1c0(0x30)
	struct QuestVariableActor                                    RegionSource;                                      // 0x1f0(0x30)
	class UClass*                                                MusicZone;                                         // 0x220(0x8)
	char                                                         AILifeTimePolicy;                                  // 0x228(0x1)
	char                                                         AISpawnerShutdownPolicy;                           // 0x229(0x1)
	char                                                         pad0x2_OVVZ1[0x2];                                 // 0x22a(0x2)
	int                                                          SpawnerIndex;                                      // 0x22c(0x4)
};


// Size 0x0 (Full Size[0x310] - InheritedSize[0x310]
class CompanyRegionComponent: public WorldRegionComponent
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class TaleQuestCommonToolServiceDesc: public TaleQuestToolServiceDesc
{
public:
	TArray<class Class*>                                         ToolDescs;                                         // 0x30(0x10)
};


// Size 0x18 (Full Size[0x8a8] - InheritedSize[0x890]
class SpectacleCapstan: public Capstan
{
public:
	char                                                         pad0x8_6IHL0[0x8];                                 // 0x890(0x8)
	float                                                        DisengagedRotationSpeed;                           // 0x898(0x4)
	float                                                        DisengagedDropSpeed;                               // 0x89c(0x4)
	bool                                                         IsEngaged;                                         // 0x8a0(0x1)
	char                                                         pad0x7_IA40L[0x7];                                 // 0x8a1(0x7)
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionGiveClue: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	int                                                          LinkedDialog;                                      // 0x110(0x4)
	char                                                         pad0x4_3QIOJ[0x4];                                 // 0x114(0x4)
};


// Size 0x58 (Full Size[0x168] - InheritedSize[0x110]
class PremiumCatalogCardsDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
	struct FText                                                 PageTitle;                                         // 0x110(0x38)
	struct StringAssetReference                                  PageIcon;                                          // 0x148(0x10)
	TArray<class PremiumCatalogItemSetDataAsset*>                Cards;                                             // 0x158(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchedFromKrakenActionStateId: public FiredFromActorActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Firework: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class UnlockedSeaFortConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSirenTridentMedium: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ShipFireDousedStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x18 (Full Size[0x2a0] - InheritedSize[0x288]
class FlamesOfFateQuestInteractableComponent: public FlamesOfFateInteractableComponent
{
public:
	char                                                         pad0x18_BIEA4[0x18];                               // 0x288(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Ingesting_SwallowTarget: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ParticipatedInActorKillConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchedFromGeyserActionStateId: public FiredFromActorActionStateId
{
public:
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionGiveMap: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0x110(0x8)
	int                                                          LinkedDialog;                                      // 0x118(0x4)
	int                                                          NumberOfUses;                                      // 0x11c(0x4)
	int                                                          NumTimesUsed;                                      // 0x120(0x4)
	char                                                         pad0x4_3SEKM[0x4];                                 // 0x124(0x4)
};


// Size 0x18 (Full Size[0x198] - InheritedSize[0x180]
class SovereignRewardHandInComponent: public RewardHandInComponent
{
public:
	TArray<struct CompanyBootyTypePairing>                       CompanyToBootyTypes;                               // 0x180(0x10)
	class SovereignData*                                         SovereignData;                                     // 0x190(0x8)
};


// Size 0xc0 (Full Size[0x310] - InheritedSize[0x250]
class ShipRegenerativeHealthComponent: public HealthComponent
{
public:
	char                                                         pad0xb0_5AY9J[0xb0];                               // 0x250(0xb0)
	class Ship*                                                  Ship;                                              // 0x300(0x8)
	float                                                        HealingPerSecond;                                  // 0x308(0x4)
	char                                                         pad0x4_WTCWM[0x4];                                 // 0x30c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteTavernBoardMapConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsPlayerInIslandBoundsStatCondition: public StatCondition
{
public:
	struct FName                                                 IslandName;                                        // 0x28(0x8)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class NPCDialogHeaderByCondition: public NPCDialogHeader
{
public:
	char                                                         pad0x8_F22OI[0x8];                                 // 0x28(0x8)
	TArray<struct NPCDialogHeaderByConditionText>                Text;                                              // 0x30(0x10)
	struct FText                                                 DefaultText;                                       // 0x40(0x38)
	class UClass*                                                DefaultInteractResponse;                           // 0x78(0x8)
	class WwiseEvent*                                            DefaultInteractionAudioEvent;                      // 0x80(0x8)
	class UClass*                                                DefaultInteractParticipantType;                    // 0x88(0x8)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class SpawnDependentTrackedOwnerComponent: public TrackedOwnerComponent
{
public:
};


// Size 0x68 (Full Size[0x438] - InheritedSize[0x3d0]
class InteractableObject: public InteractableBase
{
public:
	char                                                         pad0x18_RJQQA[0x18];                               // 0x3d0(0x18)
	class OneShotInteractableFilterDesc*                         FilterDesc;                                        // 0x3e8(0x8)
	struct FText                                                 Verb;                                              // 0x3f0(0x38)
	char                                                         pad0x10_GTQR6[0x10];                               // 0x428(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterInterface: public CharacterMeshInterface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Boogie_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsOnFerryRadialContext: public RadialContextBase
{
public:
	bool                                                         InvertContext;                                     // 0x28(0x1)
	char                                                         pad0x7_WT1YO[0x7];                                 // 0x29(0x7)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class NPCDialogFormattedHeaderByCondition: public NPCDialogHeader
{
public:
	TArray<struct NPCDialogFormattedHeaderByConditionText>       Substitutes;                                       // 0x28(0x10)
	TArray<String>                                               ExpectedParameters;                                // 0x38(0x10)
	struct FText                                                 FormattedText;                                     // 0x48(0x38)
	struct FText                                                 DefaultText;                                       // 0x80(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SingleBulletGunDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBoilingWater: public ImpactProjectileId
{
public:
};


// Size 0x70 (Full Size[0x610] - InheritedSize[0x5a0]
class MechanismTriggerTrinketMountpointManagerComponent: public TrinketMountpointManagerComponent
{
public:
	TArray<Class>                                                ExpectedTrinketClasses;                            // 0x5a0(0x10)
	TArray<class Class*>                                         RequiredClothingToInteract;                        // 0x5b0(0x10)
	class UClass*                                                RequiredTitleToInteract;                           // 0x5c0(0x8)
	bool                                                         MechanismTriggered;                                // 0x5c8(0x1)
	char                                                         pad0x47_TGUCT[0x47];                               // 0x5c9(0x47)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SkeletonCampRansackedConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class IslandTelemetrySubjectComponent: public TelemetrySubjectComponent
{
public:
};


// Size 0x20 (Full Size[0x70] - InheritedSize[0x50]
class StarlightTunnelLegacyPresenterObject: public TunnelPresenterObjectBase
{
public:
	class SequencerCutSceneActor*                                ShipAgnosticCutSceneActor;                         // 0x50(0x8)
	class SequencerCutSceneActor*                                ShipSpecificCutSceneActor;                         // 0x58(0x8)
	class StarlightTunnelLegacyPresenterObjectParams*            Params;                                            // 0x60(0x8)
	char                                                         pad0x8_KWO24[0x8];                                 // 0x68(0x8)
};


// Size 0x10 (Full Size[0x180] - InheritedSize[0x170]
class TaleQuestSpyglassOfRevealingService: public TaleQuestToolService
{
public:
	struct Vector                                                CurrentTarget;                                     // 0x170(0xc)
	bool                                                         TargetChanged;                                     // 0x17c(0x1)
	bool                                                         CurrentVisibility;                                 // 0x17d(0x1)
	bool                                                         VisibilityChanged;                                 // 0x17e(0x1)
	char                                                         pad0x1_BBQVD[0x1];                                 // 0x17f(0x1)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Gem: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AttachHarpoonTetherConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x38 (Full Size[0x138] - InheritedSize[0x100]
class AshenLordSummonAIAbility: public SummonAIAbility
{
public:
	class Pawn*                                                  OwnerPawn;                                         // 0x100(0x8)
	class VFXSpawnerComponent*                                   FireShroudVFX;                                     // 0x108(0x8)
	class AshenLordSummonAIAbilityParams*                        SetupAbilityParams;                                // 0x110(0x8)
	struct AshenLordFireShroud                                   FireShroud;                                        // 0x118(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdLightning: public ImpactProjectileId
{
public:
};


// Size 0xe0 (Full Size[0x5a0] - InheritedSize[0x4c0]
class TreasureVaultItemSpawnComponent: public ItemSpawnComponent
{
public:
	char                                                         pad0x8_NF453[0x8];                                 // 0x4c0(0x8)
	char                                                         ItemSpawnType;                                     // 0x4c8(0x1)
	char                                                         pad0x7_PQFHP[0x7];                                 // 0x4c9(0x7)
	TArray<struct VaultTreasureRarity>                           VaultTreasureRarity;                               // 0x4d0(0x10)
	bool                                                         TrackItemsAndDestroy;                              // 0x4e0(0x1)
	bool                                                         FinishedSpawning;                                  // 0x4e1(0x1)
	char                                                         pad0x6_IBI2N[0x6];                                 // 0x4e2(0x6)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x4e8(0xa0)
	char                                                         pad0x18_EUFWE[0x18];                               // 0x588(0x18)
};


// Size 0x1f0 (Full Size[0x220] - InheritedSize[0x30]
class PledgeToReapersVoteConsumer: public VoteConsumerInlineBase
{
public:
	struct FText                                                 AddVoteToPledgeTooltip;                            // 0x30(0x38)
	struct FText                                                 RemoveVoteToPledgeTooltip;                         // 0x68(0x38)
	struct FText                                                 CantRemoveVoteTooltip;                             // 0xa0(0x38)
	struct FText                                                 CantVoteVotingStartsSoonTooltip;                   // 0xd8(0x38)
	struct FText                                                 CantVoteShipControlledByAITooltip;                 // 0x110(0x38)
	struct FText                                                 CantVoteShipControlledByYourCrewTooltip;           // 0x148(0x38)
	struct FText                                                 CantVoteShipControlledByAnotherCrewTooltip;        // 0x180(0x38)
	float                                                        VotePassRequirementRatio;                          // 0x1b8(0x4)
	char                                                         pad0x4_2L0UH[0x4];                                 // 0x1bc(0x4)
	class Actor*                                                 OwningActor;                                       // 0x1c0(0x8)
	class VoteValidatorInlineBase*                               Validator;                                         // 0x1c8(0x8)
	TArray<class PlayerState*>                                   Votes;                                             // 0x1d0(0x10)
	char                                                         pad0x40_GO7OI[0x40];                               // 0x1e0(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Disappear: public KrakenHeadState
{
public:
};


// Size 0x38 (Full Size[0xb0] - InheritedSize[0x78]
class GuildEmoteRadialContentRule: public RadialContentRule
{
public:
	TArray<struct PriorityStruct>                                CannotInviteReasonPriorityList;                    // 0x78(0x10)
	char                                                         pad0x28_ZLOO9[0x28];                               // 0x88(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBlunderbomb: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class LastHealthChangeReasonStatCondition: public StatCondition
{
public:
	char                                                         LastHealthChangeReason;                            // 0x28(0x1)
	char                                                         pad0x7_9R4UC[0x7];                                 // 0x29(0x7)
};


// Size 0xa8 (Full Size[0x120] - InheritedSize[0x78]
class BaitRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_FHAWM[0x58];                               // 0x78(0x58)
	float                                                        RadialIconScale;                                   // 0xd0(0x4)
	struct Vector2D                                              RadialIconOffset;                                  // 0xd4(0x8)
	char                                                         pad0x4_HJ0G0[0x4];                                 // 0xdc(0x4)
	class InventoryItemDescToSlotRemappingPolicyAsset*           RemappingAsset;                                    // 0xe0(0x8)
	TArray<class ItemInfo*>                                      MappedSlots;                                       // 0xe8(0x10)
	class UClass*                                                BaitItemCategory;                                  // 0xf8(0x8)
	TArray<class Class*>                                         ExcludedItemCategories;                            // 0x100(0x10)
	char                                                         pad0x10_BN0P0[0x10];                               // 0x110(0x10)
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class MockTaleQuestBoarService: public TaleQuestBoarsService
{
public:
	char                                                         pad0x18_TMABL[0x18];                               // 0xb8(0x18)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ActionStateRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         TargetActionStates;                                // 0x28(0x10)
	bool                                                         AreDockablePhrasesRequired;                        // 0x38(0x1)
	char                                                         pad0x7_IEG5X[0x7];                                 // 0x39(0x7)
};


// Size 0x28 (Full Size[0x58] - InheritedSize[0x30]
class HasEmblemNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<struct Name>                                          RequiredEmblemNames;                               // 0x30(0x10)
	char                                                         pad0x18_62KDN[0x18];                               // 0x40(0x18)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DonateMapStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x8 (Full Size[0x138] - InheritedSize[0x130]
class CustomInactivityDetectionService: public InactivityDetectionService
{
public:
	char                                                         pad0x8_0VT7H[0x8];                                 // 0x130(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class IsPirateLegendPrerequisite: public InteractionPrerequisiteBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBlowpipeDart: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Limp: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AmmoStoreMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x138 (Full Size[0x458] - InheritedSize[0x320]
class BedComponent: public SeatComponentBase
{
public:
	struct FText                                                 DisengageVerb;                                     // 0x320(0x38)
	struct FText                                                 InteractionTextTakingDamage;                       // 0x358(0x38)
	struct FText                                                 InteractionTextBedUnderwater;                      // 0x390(0x38)
	struct SleepingActionStateParams                             SleepingStateParams;                               // 0x3c8(0x70)
	char                                                         pad0x20_0I6NP[0x20];                               // 0x438(0x20)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AimWeaponReleasedNotificationInputId: public AimWeaponPressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class PoseableMeshWieldableItem: public WieldableItem
{
public:
};


// Size 0x2a0 (Full Size[0x910] - InheritedSize[0x670]
class WieldablePetAnimationInstance: public WieldableItemAnimationInstance
{
public:
	char                                                         pad0x10_L41CO[0x10];                               // 0x670(0x10)
	struct AthenaAnimationPets                                   PetAnimationParams;                                // 0x680(0xe0)
	float                                                        LocomotionSpeed;                                   // 0x760(0x4)
	bool                                                         TurningActive;                                     // 0x764(0x1)
	bool                                                         TurnLeft;                                          // 0x765(0x1)
	char                                                         pad0x2_M111O[0x2];                                 // 0x766(0x2)
	float                                                        TurnRate;                                          // 0x768(0x4)
	float                                                        PositiveMoodBlendTime;                             // 0x76c(0x4)
	struct Vector                                                LookAtLocation;                                    // 0x770(0xc)
	struct Rotator                                               SurfaceOrientation;                                // 0x77c(0xc)
	float                                                        TransitionFromTurningMovementSpeed;                // 0x788(0x4)
	float                                                        LookAtAlpha;                                       // 0x78c(0x4)
	float                                                        LookAtClamp;                                       // 0x790(0x4)
	bool                                                         LookAtActive;                                      // 0x794(0x1)
	bool                                                         LookAtAnimationOverride;                           // 0x795(0x1)
	bool                                                         LookAtAnimationDisabled;                           // 0x796(0x1)
	bool                                                         IsStrokeAllowed;                                   // 0x797(0x1)
	bool                                                         PositiveMoodModifierAllowed;                       // 0x798(0x1)
	char                                                         pad0x3_LI8AO[0x3];                                 // 0x799(0x3)
	float                                                        PositiveMoodAlpha;                                 // 0x79c(0x4)
	float                                                        PositiveMoodAnimationActiveValue;                  // 0x7a0(0x4)
	bool                                                         CloseRadiusPositiveMoodModifierAllowed;            // 0x7a4(0x1)
	bool                                                         IsSmoothingClientPosition;                         // 0x7a5(0x1)
	char                                                         pad0x2_B4MQI[0x2];                                 // 0x7a6(0x2)
	float                                                        CloseRadiusPositiveMoodModifierActiveValue;        // 0x7a8(0x4)
	float                                                        AlternateHeldPoseBlendStrength;                    // 0x7ac(0x4)
	bool                                                         AnimationsLoaded;                                  // 0x7b0(0x1)
	char                                                         pad0x7_1O0DF[0x7];                                 // 0x7b1(0x7)
	TArray<char>                                                 IdleOverrideExceptions;                            // 0x7b8(0x10)
	class WeightedAnimSequenceLoadOnDemand*                      WeightedAnimSequenceLoadOnDemandRoaming;           // 0x7c8(0x8)
	class WeightedAnimSequenceLoadOnDemand*                      WeightedAnimSequenceLoadOnDemandHeld;              // 0x7d0(0x8)
	class WeightedAnimSequenceLoadOnDemand*                      WeightedAnimSequenceLoadOnDemandShow;              // 0x7d8(0x8)
	class AnimMontage*                                           PetCurrentPlayingAnimMontage;                      // 0x7e0(0x8)
	char                                                         pad0x18_92F0N[0x18];                               // 0x7e8(0x18)
	struct PetRoamingAnimationState                              LoadedState;                                       // 0x850(0x38)
	struct PetRoamingAnimationState                              PriorLoadedState;                                  // 0x888(0x38)
	struct AnimationInterruptData                                CurrentlyPlayingAnimationInterruptData;            // 0x8c0(0x4)
	char                                                         pad0x14_EV25N[0x14];                               // 0x8c4(0x14)
	class Pet*                                                   Pet;                                               // 0x8d8(0x8)
	class CharacterMovementComponent*                            CharacterMovementComponent;                        // 0x8e0(0x8)
	char                                                         pad0x28_ZL97A[0x28];                               // 0x8e8(0x28)
};


// Size 0x140 (Full Size[0x460] - InheritedSize[0x320]
class SeatComponent: public SeatComponentBase
{
public:
	struct SittingActionStateParams                              SittingStateParams;                                // 0x320(0xc0)
	TArray<struct PlayerStat>                                    OnSitStats;                                        // 0x3e0(0x10)
	float                                                        CosCameraAngleToTurnOffFirstPersonMesh;            // 0x3f0(0x4)
	int                                                          SeatID;                                            // 0x3f4(0x4)
	struct FText                                                 InteractionTextTakingDamage;                       // 0x3f8(0x38)
	char                                                         pad0x30_XWZD6[0x30];                               // 0x430(0x30)
};


// Size 0x40 (Full Size[0x98] - InheritedSize[0x58]
class LandmarkReactionEventCallFunction: public LandmarkReactionEvent
{
public:
	char                                                         pad0x40_9JVRV[0x40];                               // 0x58(0x40)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DigUpPlayerBuriedItemStatsTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class TestRudderDynamicsDesc: public BaseRudderDynamicsDesc
{
public:
	char                                                         pad0x28_8TB7V[0x28];                               // 0x28(0x28)
};


// Size 0x18 (Full Size[0x518] - InheritedSize[0x500]
class AnimatedMaterialMechanismAction: public AnimatedMechanismAction
{
public:
	TArray<struct AnimatedMaterialData>                          AnimatedMaterials;                                 // 0x500(0x10)
	char                                                         pad0x8_CTW7B[0x8];                                 // 0x510(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MechanismOneShotEvent: public MechanismEvent
{
public:
};


// Size 0x40 (Full Size[0x1a80] - InheritedSize[0x1a40]
class TestAthenaPlayerController: public AthenaPlayerController
{
public:
	class ForceFeedbackEffect*                                   LastReceivedForceFeedbackEffect;                   // 0x1a40(0x8)
	char                                                         pad0x38_A8WVO[0x38];                               // 0x1a48(0x38)
};


// Size 0x180 (Full Size[0x1b0] - InheritedSize[0x30]
class ReapersTributeShipHandInVoteConsumer: public VoteConsumerInlineBase
{
public:
	struct FText                                                 AddVoteToHandInTooltip;                            // 0x30(0x38)
	struct FText                                                 RemoveVoteToHandInTooltip;                         // 0x68(0x38)
	struct FText                                                 CantRemoveVoteTooltip;                             // 0xa0(0x38)
	struct FText                                                 CantVoteShipNotNearbyTooltip;                      // 0xd8(0x38)
	struct FText                                                 CantVoteHostileShipsNearbyTooltip;                 // 0x110(0x38)
	float                                                        VotePassRequirementRatio;                          // 0x148(0x4)
	char                                                         pad0x4_J90RO[0x4];                                 // 0x14c(0x4)
	class Actor*                                                 OwningActor;                                       // 0x150(0x8)
	class VoteValidatorInlineBase*                               Validator;                                         // 0x158(0x8)
	TArray<class PlayerState*>                                   Votes;                                             // 0x160(0x10)
	char                                                         pad0x40_B4L6G[0x40];                               // 0x170(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Anchor_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x240 (Full Size[0x890] - InheritedSize[0x650]
class DepartureTunnelOfTheDamned: public TunnelOfTheDamnedBase
{
public:
	float                                                        DistanceAwayFromShipToMoveLootTo;                  // 0x648(0x4)
	char                                                         pad0x4_N5S89[0x4];                                 // 0x64c(0x4)
	class LootTeleportFilterDataAsset*                           LootFilterDataAsset;                               // 0x650(0x8)
	class DepartureTunnelDesc*                                   DepartureTunnelDesc;                               // 0x658(0x8)
	bool                                                         AllowTunnelVoyageVoting;                           // 0x820(0x1)
	char                                                         pad0x6f_RM6OS[0x6f];                               // 0x821(0x6f)
};


// Size 0x40 (Full Size[0x540] - InheritedSize[0x500]
class BaseToggleAnimatedMechanismAction: public AnimatedMechanismAction
{
public:
	char                                                         pad0x8_OJYRU[0x8];                                 // 0x500(0x8)
	class SceneComponent*                                        Root;                                              // 0x508(0x8)
	class SceneComponent*                                        Pivot;                                             // 0x510(0x8)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x518(0x8)
	char                                                         pad0x10_CH6X4[0x10];                               // 0x520(0x10)
	TArray<struct MechanismAnimationEventContainer>              AnimationEvents;                                   // 0x530(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StandardRudderDynamicsDesc: public BaseRudderDynamicsDesc
{
public:
	struct StandardRudderDynamicsParameters                      Parameters;                                        // 0x28(0x8)
	class CurveFloat*                                            ShipSpeedToSteeringBoostCurve;                     // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_WoodPlank: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x8 (Full Size[0x630] - InheritedSize[0x628]
class LandmarkBox: public Landmark
{
public:
	class ShapeComponent*                                        DefaultShape;                                      // 0x628(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class FeatureToggleNPCDialogConditional: public NPCDialogConditional
{
public:
	struct FName                                                 FeatureName;                                       // 0x30(0x8)
	bool                                                         InvertFeatureToggleCheck;                          // 0x38(0x1)
	char                                                         pad0x7_SESRO[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x250] - InheritedSize[0x250]
class ItemHealthComponent: public HealthComponent
{
public:
};


// Size 0xb0 (Full Size[0x3b0] - InheritedSize[0x300]
class PlayerNameplateComponent: public NameplateComponent
{
public:
	char                                                         pad0x8_15JSS[0x8];                                 // 0x300(0x8)
	float                                                        VisibleFromWorldDistance;                          // 0x308(0x4)
	float                                                        VisibleUntilWorldDistanceCrew;                     // 0x30c(0x4)
	float                                                        VisibleUntilWorldDistanceNonCrew;                  // 0x310(0x4)
	float                                                        EmoteForcedRevealTime;                             // 0x314(0x4)
	bool                                                         HideNameplateWhileHanging;                         // 0x318(0x1)
	char                                                         pad0x3_B3RSG[0x3];                                 // 0x319(0x3)
	float                                                        DurationUntilPlayerInHangingHiddenFromAI;          // 0x31c(0x4)
	char                                                         pad0x8_6AVEB[0x8];                                 // 0x320(0x8)
	class AthenaPlayerCharacter*                                 PlayerCharacter;                                   // 0x328(0x8)
	char                                                         pad0x80_NEDC4[0x80];                               // 0x330(0x80)
};


// Size 0x80 (Full Size[0xf8] - InheritedSize[0x78]
class MimicEmoteRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_KP1PI[0x58];                               // 0x78(0x58)
	TArray<struct EmoteData>                                     DefaultEmoteData;                                  // 0xd0(0x10)
	TArray<class Class*>                                         DefaultEmoteDescs;                                 // 0xe0(0x10)
	class EmoteSettings*                                         EmoteSettings;                                     // 0xf0(0x8)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class AmmoChangeEffect: public AmmoBaseEffect
{
public:
	struct AmmoChangeEffectParams                                AmmoChangeEffectParams;                            // 0x28(0x40)
	char                                                         pad0x20_K3PCS[0x20];                               // 0x68(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Tome: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x40 (Full Size[0x3f0] - InheritedSize[0x3b0]
class MovingWorldMarkerBeaconActor: public WorldMarkerBeaconActor
{
public:
	class SceneComponent*                                        MarkerRoot;                                        // 0x3b0(0x8)
	char                                                         pad0x30_7WMVH[0x30];                               // 0x3b8(0x30)
	class Actor*                                                 PreviousTrackedOwner;                              // 0x3e8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompetitiveVoyageGameEventType: public GameEventType
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BedPartDescAsset: public ShipPartDescAsset
{
public:
	struct BedPartDesc                                           BedPartDesc;                                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSmallShotScatter: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageZoneAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x48 (Full Size[0x1f8] - InheritedSize[0x1b0]
class TallTaleContestRecipeDataAsset: public VoyageDescDataAsset
{
public:
	struct ContestZoneDistribution                               WeightedContestZonesToActivate;                    // 0x1b0(0x10)
	TArray<struct ContestIslandArchetype>                        AvailableIslandArchetypes;                         // 0x1c0(0x10)
	struct ContestTimerData                                      ContestVoyageTime;                                 // 0x1d0(0x18)
	struct StringClassReference                                  ScoreSystemToLoad;                                 // 0x1e8(0x10)
};


// Size 0xa0 (Full Size[0x1d8] - InheritedSize[0x138]
class PlayGroupNpcAnimationStepDesc: public BasePlayNpcAnimationStepDesc
{
public:
	struct QuestVariableActor                                    TargetNpc1;                                        // 0x138(0x30)
	struct QuestVariableActor                                    TargetNpc2;                                        // 0x168(0x30)
	struct QuestVariableActor                                    TargetNpc3;                                        // 0x198(0x30)
	TArray<struct Text>                                          SpeakingActorLocalisableNames;                     // 0x1c8(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsProjectileOfGivenImpactProjectileId: public StatCondition
{
public:
	class UClass*                                                ImpactProjectileId;                                // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdWater: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnemyAIOnShipGameEventType: public GameEventType
{
public:
};


// Size 0x60 (Full Size[0x1c8] - InheritedSize[0x168]
class FrontendEntitlementInformationComponent: public EntitlementInformationComponent
{
public:
	TArray<class Object*>                                        CachedLoadedAssets;                                // 0x168(0x10)
	char                                                         pad0x50_PPMLN[0x50];                               // 0x178(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Despawning_Panic: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HarpoonDamagerType: public DamagerType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class LevelReward: public Reward
{
public:
	char                                                         pad0x8_RE1KK[0x8];                                 // 0x28(0x8)
};


// Size 0x68 (Full Size[0x1a0] - InheritedSize[0x138]
class PlayNpcAnimationStepDesc: public BasePlayNpcAnimationStepDesc
{
public:
	struct QuestVariableActor                                    TargetNpc;                                         // 0x138(0x30)
	struct FText                                                 SpeakingActorLocalisableName;                      // 0x168(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonballFirePhantom: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LargeShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockMini: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonBall_Soda: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildShip: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GrenadeSplashDamagerType: public DamagerType
{
public:
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ShipBarrelEntitlementProcessingPolicy: public ShipEntitlementProcessingPolicy
{
public:
	char                                                         pad0x10_G4IL0[0x10];                               // 0x50(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Ingesting: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TaleQuestStatQueryEqualsFunction: public TaleQuestStatQueryFunctionComparator
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class OwnsLegendOfTheSunkenKingdomVoyagePrerequisite: public InteractionPrerequisiteBase
{
public:
};


// Size 0x0 (Full Size[0x290] - InheritedSize[0x290]
class DockableCutsceneInputComponent: public LookAtOffsetInputComponent
{
public:
};


// Size 0x40 (Full Size[0xf0] - InheritedSize[0xb0]
class AddItemsFromDataToCollectorsChestStepBaseDesc: public MutateCollectorsChestStepDesc
{
public:
	bool                                                         TrackItems;                                        // 0xb0(0x1)
	bool                                                         MarkItemsAsCritical;                               // 0xb1(0x1)
	char                                                         pad0x6_Z43UE[0x6];                                 // 0xb2(0x6)
	struct FText                                                 CriticalActorLostMessage;                          // 0xb8(0x38)
};


// Size 0x600 (Full Size[0xb18] - InheritedSize[0x518]
class Seafort: public IslandData
{
public:
	char                                                         pad0x30_99971[0x30];                               // 0x518(0x30)
	char                                                         PreviousSeaFortAlignmentState;                     // 0x548(0x1)
	char                                                         CurrentSeaFortAlignmentState;                      // 0x549(0x1)
	char                                                         pad0x6_53GH0[0x6];                                 // 0x54a(0x6)
	float                                                        ServerMigrationExclusionRadius;                    // 0x570(0x4)
	char                                                         pad0x4_DFEQS[0x4];                                 // 0x574(0x4)
	TArray<struct AIBountySpawnerWaveLocation>                   WaveSpawnerLocations;                              // 0x578(0x10)
	class AIBountySpawner*                                       Spawner;                                           // 0x588(0x8)
	class SeaFortDataAsset*                                      FortData;                                          // 0x590(0x8)
	class FortFlag*                                              Flag;                                              // 0x598(0x8)
	class Actor*                                                 AlignmentFlagPole;                                 // 0x5a0(0x8)
	class SeaFortAddOnComponent*                                 SeaFortAddOnComponent;                             // 0x5a8(0x8)
	class SeaFortStateComponent*                                 SeaFortStateComponent;                             // 0x5b0(0x8)
	class Actor*                                                 SeaFortCannonsMechanismAction;                     // 0x5b8(0x8)
	class SeaFortCannonsMechanismTrigger*                        CannonsMechanismTrigger;                           // 0x5c0(0x8)
	class OverlapTriggerComponent*                               ActionAudioZoneComponent;                          // 0x5c8(0x8)
	class OverlapTriggerComponent*                               AnticipationAudioZoneComponent;                    // 0x5d0(0x8)
	struct Vector                                                BellEmitterOffset;                                 // 0x5d8(0xc)
	char                                                         pad0x4_CMU30[0x4];                                 // 0x5e4(0x4)
	class OneShotAnimatedMechanismAction*                        TreasuryDoor;                                      // 0x5e8(0x8)
	class OneShotAnimatedMechanismAction*                        StoreroomDoor;                                     // 0x5f0(0x8)
	class PopUpMessageDesc*                                      KeyDiscoveredPopUpDesc;                            // 0x5f8(0x8)
	class PopUpMessageDesc*                                      KeyHandInHintPopUpDesc;                            // 0x600(0x8)
	struct FeatureFlag                                           DeactivateFortFeatureFlag;                         // 0x608(0xc)
	struct EncounterParams                                       SightingEncounterParams;                           // 0x614(0xc)
	struct EncounterParams                                       CloseEncounterParams;                              // 0x620(0xc)
	char                                                         pad0x4_YE7FF[0x4];                                 // 0x62c(0x4)
	class SeaFortTelemetryComponent*                             TelemetryComponent;                                // 0x630(0x8)
	struct FString                                               SubjectName;                                       // 0x638(0x10)
	struct StringAssetReference                                  SeaFortAvailabilityParamsAssetFileLocation;        // 0x648(0x10)
	struct FText                                                 EmergentSeaFortCompleteText;                       // 0x658(0x38)
	class WwiseEvent*                                            WaveGroupSpawnedEvent;                             // 0x690(0x8)
	class WwiseEvent*                                            FinalWaveGroupSpawnedEvent;                        // 0x698(0x8)
	class WwiseEvent*                                            FortCompleteEvent;                                 // 0x6a0(0x8)
	struct WwiseEmitter                                          SeaFortEmitter;                                    // 0x6a8(0x20)
	char                                                         pad0x188_NFYRP[0x188];                             // 0x6c8(0x188)
	struct PlayerStat                                            StatToFireOnFortComplete;                          // 0x850(0x4)
	char                                                         pad0x154_VUTA0[0x154];                             // 0x854(0x154)
	TArray<class ItemSpawnComponent*>                            Rewards;                                           // 0x9a8(0x10)
	class FortAIToggler*                                         AIToggler;                                         // 0x9b8(0x8)
	TArray<struct AdditionalCaptainTarget>                       SpawnedAdditionalCaptainsData;                     // 0x9c0(0x10)
	class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x9d0(0x8)
	char                                                         pad0x28_M3CZK[0x28];                               // 0x9d8(0x28)
	class LockComponent*                                         TreasuryLock;                                      // 0xa00(0x8)
	class LockComponent*                                         StoreroomLock;                                     // 0xa08(0x8)
	char                                                         CurrentSeaFortState;                               // 0xa10(0x1)
	char                                                         pad0x7_CO0F0[0x7];                                 // 0xa11(0x7)
	class GameEventOnDemandAvailabilityHandler*                  GameEventOnDemandAvailabilityHandler;              // 0xa18(0x8)
	char                                                         pad0xf8_FL0JI[0xf8];                               // 0xa20(0xf8)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class AnimNotifyStateWieldableBookLeftSpreadCurrentRightSpreadNext: public AnimNotifyStateWieldableBookRenderingModeRequest
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StaticMeshVoteVisualiserInterface: public VoteVisualiserInterface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShipType: public ShipType
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MatchesAllConditionsStatCondition: public StatCondition
{
public:
	TArray<class StatCondition*>                                 Conditions;                                        // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoralFortressProgressLocationID: public ProgressLocationId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_GunpowderBarrel: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_EmissaryFlotsam: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x428 (Full Size[0x8d8] - InheritedSize[0x4b0]
class AthenaHUD: public CoherentBaseHUD
{
public:
	char                                                         pad0x18_U6VDP[0x18];                               // 0x4b0(0x18)
	bool                                                         PhotoModeEnabled;                                  // 0x4c8(0x1)
	char                                                         pad0x7_WLIB8[0x7];                                 // 0x4c9(0x7)
	TArray<struct Name>                                          InputActionsToPropagate;                           // 0x4d0(0x10)
	struct PlayerTalkingSettings                                 PlayerTalkingSettings;                             // 0x4e0(0x30)
	bool                                                         VirtualKeyboardEnabled;                            // 0x510(0x1)
	char                                                         pad0x7_FK0QN[0x7];                                 // 0x511(0x7)
	struct FText                                                 EmissaryLockedReason;                              // 0x518(0x38)
	struct FText                                                 EmissaryLockedReason_FlagNotRaised;                // 0x550(0x38)
	struct FText                                                 EmissaryLockedReason_SaferSeas;                    // 0x588(0x38)
	class CoherentUIGTTooltipComponent*                          CoherentTooltipsComponent;                         // 0x5c0(0x8)
	class CoherentUIGTTooltipDetailedComponent*                  CoherentTooltipsDetailedComponent;                 // 0x5c8(0x8)
	class CoherentUIGTNameplateComponent*                        CoherentNameplatesComponent;                       // 0x5d0(0x8)
	class CoherentUIGTHUDComponent*                              CoherentHUDComponent;                              // 0x5d8(0x8)
	class CoherentUIGTInGameMenusComponent*                      CoherentInGameMenusComponent;                      // 0x5e0(0x8)
	class IslandEventTooltipComponent*                           IslandEventTooltipComponent;                       // 0x5e8(0x8)
	class CoherentToWwiseEventComponent*                         CoherentToWwiseEventComponent;                     // 0x5f0(0x8)
	class UIInputForwardComponent*                               InputForwardComponent;                             // 0x5f8(0x8)
	class UITelemetryComponent*                                  TelemetryComponent;                                // 0x600(0x8)
	class CanvasWorldMapComponent*                               CanvasWorldMapComponent;                           // 0x608(0x8)
	class WatermarkComponent*                                    WatermarkComponent;                                // 0x610(0x8)
	class ShopViewModelComponent*                                ShopViewModelComponent;                            // 0x618(0x8)
	class InGamePremiumShopViewModelComponent*                   PremiumShopViewModelComponent;                     // 0x620(0x8)
	class MigrationUIComponent*                                  MigrationUIComponent;                              // 0x628(0x8)
	struct HUDBlurParams                                         BlurParameters;                                    // 0x630(0x18)
	class EquipmentChestViewModelComponent*                      EquipmentChestViewModelComponent;                  // 0x648(0x8)
	class ClothingChestViewModelComponent*                       ClothingChestViewModelComponent;                   // 0x650(0x8)
	class ArmoryChestViewModelComponent*                         ArmoryChestViewModelComponent;                     // 0x658(0x8)
	class ShipCustomizationChestViewModelComponent*              ShipCustomizationChestViewModelComponent;          // 0x660(0x8)
	class VoyageInventoryViewModelComponent*                     VoyageInventoryViewModelComponent;                 // 0x668(0x8)
	class PiratePreviewComponent*                                PiratePreviewComponent;                            // 0x670(0x8)
	class PetChestViewModelComponent*                            PetChestViewModelComponent;                        // 0x678(0x8)
	class TrinketBoxViewModelComponent*                          TrinketBoxViewModelComponent;                      // 0x680(0x8)
	class ItemPreviewComponent*                                  ItemPreviewComponent;                              // 0x688(0x8)
	class EntitlementInformationComponent*                       EntitlementInformationComponent;                   // 0x690(0x8)
	class HttpClientComponent*                                   HttpClientComponent;                               // 0x698(0x8)
	class AimAssistDebugComponent*                               AimAssistDebugComponent;                           // 0x6a0(0x8)
	class GamertagProviderHudComponent*                          GamerTagProviderComponent;                         // 0x6a8(0x8)
	class UserPresenceHudComponent*                              UserPresenceComponent;                             // 0x6b0(0x8)
	class Font*                                                  PerfCounterFont;                                   // 0x6b8(0x8)
	class AudioVisualiserHudComponent*                           AudioVisualiserComponent;                          // 0x6c0(0x8)
	class GuildUIComponent*                                      GuildUIComponent;                                  // 0x6c8(0x8)
	class InGameScrambledNamesComponent*                         InGameScrambledNamesComponent;                     // 0x6d0(0x8)
	char                                                         pad0x30_SV003[0x30];                               // 0x6d8(0x30)
	struct HUDBlur                                               Blur;                                              // 0x708(0x18)
	class AthenaDebugMenuComponent*                              AthenaDebugMenuComponent;                          // 0x720(0x8)
	char                                                         pad0xc0_AGZJ0[0xc0];                               // 0x728(0xc0)
	TArray<class CoherentUIGTInstancedComponent*>                CoherentComponents;                                // 0x7e8(0x10)
	char                                                         pad0xe0_VINYW[0xe0];                               // 0x7f8(0xe0)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class HasJustFiredConditionalStatStatCondition: public StatCondition
{
public:
	struct PlayerStat                                            Stat;                                              // 0x28(0x4)
	char                                                         pad0x4_W7QPM[0x4];                                 // 0x2c(0x4)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class LightIntensityBlend: public EffectBlendObjectBase
{
public:
	struct ActorComponentSelector                                Component;                                         // 0x38(0x10)
	float                                                        Inactive;                                          // 0x48(0x4)
	float                                                        Active;                                            // 0x4c(0x4)
};


// Size 0x20 (Full Size[0x3a0] - InheritedSize[0x380]
class SimpleLeakerComponent: public LeakerComponent
{
public:
	char                                                         pad0x20_6YU53[0x20];                               // 0x380(0x20)
};


// Size 0x8 (Full Size[0x308] - InheritedSize[0x300]
class LocomotionInputComponent: public AthenaCharacterBaseLocomotionInputComponent
{
public:
	char                                                         pad0x8_J3TR3[0x8];                                 // 0x300(0x8)
};


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class ShipwreckSiteGeneratorRandomComponent: public ShipwreckSiteGeneratorComponent
{
public:
	class ShipwreckSiteGeneratorRandom*                          SiteGenAsset;                                      // 0xb8(0x8)
	char                                                         pad0x50_Q8AQY[0x50];                               // 0xc0(0x50)
};


// Size 0x110 (Full Size[0x220] - InheritedSize[0x110]
class PremiumCatalogBundleSetDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
	struct FText                                                 PageTitle;                                         // 0x110(0x38)
	struct StringAssetReference                                  PageIcon;                                          // 0x148(0x10)
	struct FText                                                 BundleTitle;                                       // 0x158(0x38)
	struct FText                                                 Saving;                                            // 0x190(0x38)
	TArray<struct PremiumShopBundleOfferItem>                    BundleItems;                                       // 0x1c8(0x10)
	struct PremiumCatalogItemSet                                 AdditionalItems;                                   // 0x1d8(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnlockedGhostCurseStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x3f8] - InheritedSize[0x3f8]
class ObstacleCourseTestable: public ObstacleCourse
{
public:
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class MinimumCrewCountSpawnRequirement: public SpawnRequirement
{
public:
	int                                                          MinimumCrewCount;                                  // 0x50(0x4)
	char                                                         pad0x14_5BPJ3[0x14];                               // 0x54(0x14)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class TallTaleIslandEventType: public IslandEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NullReward: public Reward
{
public:
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class CutscenePoolTypeExhaustible: public CutscenePoolType
{
public:
};


// Size 0x10 (Full Size[0xa0] - InheritedSize[0x90]
class IsFeatureFlagSetPrerequisite: public InteractionPrerequisiteBase
{
public:
	struct FeatureFlag                                           FeatureToggle;                                     // 0x90(0xc)
	char                                                         pad0x4_U43HW[0x4];                                 // 0x9c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Fireball: public ImpactProjectileId
{
public:
};


// Size 0xc8 (Full Size[0x508] - InheritedSize[0x440]
class AshenLordEncounterService: public GameEventService
{
public:
	char                                                         pad0x98_ANSA8[0x98];                               // 0x440(0x98)
	struct AshenLordEncounterServiceDesc                         Desc;                                              // 0x4d8(0x20)
	class AshenLordEncounterServiceParams*                       Params;                                            // 0x4f8(0x8)
	struct FName                                                 TargetIslandName;                                  // 0x500(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CollectorsChest: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TaleQuestStatQueryGreaterOrEqualFunction: public TaleQuestStatQueryFunctionComparator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BurningSwordWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x20 (Full Size[0x380] - InheritedSize[0x360]
class MurkWaterModifierZoneComponent: public WaterModifierZoneComponent
{
public:
	float                                                        MaximumInnerRadius;                                // 0x358(0x4)
	float                                                        MaximumOuterRadius;                                // 0x35c(0x4)
	class CurveFloat*                                            ActivationCurve;                                   // 0x360(0x8)
	class CurveFloat*                                            DeactivationCurve;                                 // 0x368(0x8)
	bool                                                         DeactivateActorWhenInactive;                       // 0x370(0x1)
	char                                                         State;                                             // 0x371(0x1)
	char                                                         pad0xe_UZ2PD[0xe];                                 // 0x372(0xe)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerVomitedOnActorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x2c0] - InheritedSize[0x2c0]
class ItemInfoFlamesOfFateContainerComponent: public FlamesOfFateContainerComponent
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FeatureEnabledRadialContext: public RadialContextBase
{
public:
	struct FName                                                 FeatureName;                                       // 0x28(0x8)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsCampaignActiveNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<struct Name>                                          RequiredCampaigns;                                 // 0x30(0x10)
	char                                                         pad0x10_FXLSE[0x10];                               // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HuntingSpearCannonDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShockwaveDamagerType: public DamagerType
{
public:
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class IgnitableMechanismTriggerProxy: public MechanismElementProxy
{
public:
	bool                                                         UseExtinguishTimer;                                // 0x3c8(0x1)
	bool                                                         AllowFireToBeReplenishedBeforeExtinguishTimerExpired; // 0x3c9(0x1)
	char                                                         pad0x2_B83YA[0x2];                                 // 0x3ca(0x2)
	float                                                        TimeInSecondsUntilFireExtinguished;                // 0x3cc(0x4)
	class StatusRecipientResponseList*                           RecipientResponseList;                             // 0x3d0(0x8)
};


// Size 0x0 (Full Size[0x130] - InheritedSize[0x130]
class WaterHeightProviderServerOnlyComponent: public WaterHeightProviderComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MovedByPortableHarpoonRetractionActionStateId: public MovedByActorActionStateId
{
public:
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class AILoadoutWithNonStoreableAsset: public LoadoutAsset
{
public:
	char                                                         pad0x8_4UC42[0x8];                                 // 0x50(0x8)
	class UClass*                                                NonStoreableItem;                                  // 0x58(0x8)
};


// Size 0x20 (Full Size[0x70] - InheritedSize[0x50]
class SpawningCommands: public InGameCommand
{
public:
	class InGameCommandAISpawnManager*                           InGameCommandAISpawnManager;                       // 0x50(0x8)
	class InGameCommandItemSpawnManager*                         InGameCommandItemSpawnManager;                     // 0x58(0x8)
	TArray<class Actor*>                                         SpawnedAIShips;                                    // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DefaultMechanismMaterialGroup: public MechanismMaterialGroup
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemInfoPartDescCustomizationMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BuryItemStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0xa8 (Full Size[0x180] - InheritedSize[0xd8]
class NPCDialogOptionStorageContainerStore: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	struct FText                                                 FullText;                                          // 0x110(0x38)
	struct FText                                                 NoItemInInventoryText;                             // 0x148(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DartTypeId_Poison: public DartTypeId
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class LogicalNotStatCondition: public StatCondition
{
public:
	class StatCondition*                                         StatCondition;                                     // 0x28(0x8)
};


// Size 0x28 (Full Size[0x170] - InheritedSize[0x148]
class SignalMechanismTargetComponent: public MechanismTriggerComponent
{
public:
	char                                                         pad0x8_MAPFT[0x8];                                 // 0x148(0x8)
	struct Vector                                                TargetLocationRelativeToOwner;                     // 0x150(0xc)
	bool                                                         StopSignalWhenOutsideRange;                        // 0x15c(0x1)
	char                                                         pad0x3_8C474[0x3];                                 // 0x15d(0x3)
	TArray<class Actor*>                                         NumActiveInstigators;                              // 0x160(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class NextPageRadialAction: public RadialAction
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerForcedChestOfRageExplosionStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdPortableHarpoonProjectile: public ImpactProjectileId
{
public:
};


// Size 0x38 (Full Size[0x98] - InheritedSize[0x60]
class ModifiedStorageSwitchesDataTypeManager: public SwitchesDataTypeManagerBase
{
public:
	char                                                         pad0x28_135RO[0x28];                               // 0x60(0x28)
	TArray<struct ModifiedStorageSwitch>                         ShipModifiedStorage;                               // 0x88(0x10)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class WaitForCrewToCollectCollectorsChestPagesStep: public MutateCollectorsChestStep
{
public:
	class WaitForCrewToCollectCollectorsChestPagesStepDesc*      StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x8_JKVEP[0x8];                                 // 0xa0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTypeAIAggressive: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemFirstDroppedOnShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsAnotherCrewOnSameIslandStatCondition: public StatCondition
{
public:
	char                                                         pad0x18_27SCZ[0x18];                               // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DefaultRevealableSceneType: public RevealableSceneType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdScatterGhostly: public ImpactProjectileId
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HasEntitlementsNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         RequiredEntitlements;                              // 0x30(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WieldableBookSinglePageLayout: public WieldableBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AvoidTargetAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdAshenLordVolcanoRockMini: public ImpactProjectileId
{
public:
};


// Size 0xd0 (Full Size[0x738] - InheritedSize[0x668]
class CannonProjectile: public LaunchableProjectile
{
public:
	char                                                         pad0x8_KLO60[0x8];                                 // 0x668(0x8)
	class ExplosionComponent*                                    ExplosionComponent;                                // 0x670(0x8)
	class ImpactProxySpawnerComponent*                           ImpactProxySpawnerComponent;                       // 0x678(0x8)
	bool                                                         ShouldImpactProxySpawnOnGround;                    // 0x680(0x1)
	bool                                                         ShouldImpactProxyFloat;                            // 0x681(0x1)
	bool                                                         ShouldAlwaysSpawn;                                 // 0x682(0x1)
	bool                                                         ApplyKnockbackOnDirectHit;                         // 0x683(0x1)
	bool                                                         AllowFriendlyFireOnDirectHit;                      // 0x684(0x1)
	char                                                         DirectHitHealthChangeReason;                       // 0x685(0x1)
	char                                                         pad0x2_HSWSN[0x2];                                 // 0x686(0x2)
	class UClass*                                                ImpactDamagerType;                                 // 0x688(0x8)
	class Actor*                                                 FiredFrom;                                         // 0x690(0x8)
	bool                                                         ShouldSpawnProjectiles;                            // 0x698(0x1)
	char                                                         pad0x3_AT15J[0x3];                                 // 0x699(0x3)
	int                                                          NumberOfCannonballsWhenSplit;                      // 0x69c(0x4)
	float                                                        TimeToSplit;                                       // 0x6a0(0x4)
	float                                                        TimeBetweenGrapeCreations;                         // 0x6a4(0x4)
	float                                                        InitialVelocityZMultiplier;                        // 0x6a8(0x4)
	float                                                        MaxHorizontalConeAngleForVelocityForInitialGrape;  // 0x6ac(0x4)
	float                                                        MaxVerticalConeAngleForVelocityForInitialGrape;    // 0x6b0(0x4)
	float                                                        MaxHorizontalConeAngleForRandomVelocities;         // 0x6b4(0x4)
	float                                                        MaxVerticalConeAngleForRandomVelocities;           // 0x6b8(0x4)
	struct Vector2D                                              RandomMultiplierToSpeedRange;                      // 0x6bc(0x8)
	char                                                         pad0x4_S83SZ[0x4];                                 // 0x6c4(0x4)
	class UClass*                                                ProjectileClass;                                   // 0x6c8(0x8)
	bool                                                         ShouldDestroyAfterLifetime;                        // 0x6d0(0x1)
	char                                                         pad0x3_URMKY[0x3];                                 // 0x6d1(0x3)
	float                                                        LifeTime;                                          // 0x6d4(0x4)
	bool                                                         ShouldCreateProxyAtHitLocation;                    // 0x6d8(0x1)
	char                                                         pad0x3_DGF4O[0x3];                                 // 0x6d9(0x3)
	float                                                        CannonImpactAINoiseRange;                          // 0x6dc(0x4)
	struct FName                                                 AINoiseTag;                                        // 0x6e0(0x8)
	char                                                         pad0x10_2IQUR[0x10];                               // 0x6e8(0x10)
	class UClass*                                                StatTriggerForCannonballsHittingShips;             // 0x6f8(0x8)
	class UClass*                                                StatTriggerForCannonballsHittingPlayers;           // 0x700(0x8)
	class UClass*                                                StatTriggerForCannonballsHittingReactingActors;    // 0x708(0x8)
	char                                                         pad0x28_0IDIN[0x28];                               // 0x710(0x28)
};


// Size 0x208 (Full Size[0x5d8] - InheritedSize[0x3d0]
class SwitchMechanismTrigger: public InteractableBase
{
public:
	char                                                         pad0x20_2X02U[0x20];                               // 0x3d0(0x20)
	class SceneComponent*                                        Root;                                              // 0x3f0(0x8)
	class SceneComponent*                                        Pivot;                                             // 0x3f8(0x8)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x400(0x8)
	bool                                                         ShowSwitchInteractionPrompt;                       // 0x408(0x1)
	char                                                         pad0x7_N3L2I[0x7];                                 // 0x409(0x7)
	struct FText                                                 SwitchInteractionPromptText;                       // 0x410(0x38)
	struct FText                                                 SwitchInteractionBackwardsPromptText;              // 0x448(0x38)
	struct FText                                                 SwitchNameText;                                    // 0x480(0x38)
	TArray<class SwitchMechanismTrigger*>                        SwitchesToSyncTo;                                  // 0x4b8(0x10)
	bool                                                         DisableWhenActivated;                              // 0x4c8(0x1)
	bool                                                         AutoDeactivateAfterActivation;                     // 0x4c9(0x1)
	char                                                         pad0x2_14ZC3[0x2];                                 // 0x4ca(0x2)
	float                                                        TimeAfterActivationBeforeAutoDeactivating;         // 0x4cc(0x4)
	bool                                                         SelectRandomStartPositionOnSpawn;                  // 0x4d0(0x1)
	char                                                         RandomStartPositionSelectionMode;                  // 0x4d1(0x1)
	char                                                         SwitchMechanismTriggerRotationMode;                // 0x4d2(0x1)
	bool                                                         WrapSwitchAtEndPosition;                           // 0x4d3(0x1)
	int                                                          FixedStartPositionIndex;                           // 0x4d4(0x4)
	struct MechanismFloatAnimationCurve                          PositionTransitionAnimationCurve;                  // 0x4d8(0x8)
	TArray<struct SwitchMechanismTriggerPosition>                Positions;                                         // 0x4e0(0x10)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x4f0(0x8)
	class UClass*                                                MaterialGroup;                                     // 0x4f8(0x8)
	int                                                          CurrentPositionIndex;                              // 0x500(0x4)
	char                                                         pad0x74_RO1H0[0x74];                               // 0x504(0x74)
	struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x578(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BuryHoardOfItemsStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x100 (Full Size[0x218] - InheritedSize[0x118]
class VoyageInventoryViewModelComponent: public ViewModelComponentBase
{
public:
	char                                                         pad0x18_CSDN2[0x18];                               // 0x118(0x18)
	class PlayerController*                                      PlayerController;                                  // 0x130(0x8)
	char                                                         pad0xd8_OMHP1[0xd8];                               // 0x138(0xd8)
	class TaleBlockedByFactionDataAsset*                         TaleBlockedByFactionDataAsset;                     // 0x210(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CrewingTheReapersTributeShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RepairShipPartStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class SeasonPassEntitlementDesc: public EntitlementDesc
{
public:
};


// Size 0x60 (Full Size[0x150] - InheritedSize[0xf0]
class AshenLordSummonAIAbilityParams: public SummonAIAbilityParams
{
public:
	struct VFXHandlerComponentParams                             FireShroudVFXParams;                               // 0xf0(0x40)
	class UClass*                                                FireShroudVFXSpawner;                              // 0x130(0x8)
	struct AshenLordFireShroudParams                             FireShroudParams;                                  // 0x138(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Skull: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x38 (Full Size[0x4d8] - InheritedSize[0x4a0]
class CustomShipwreck: public Shipwreck
{
public:
	char                                                         pad0x8_OB905[0x8];                                 // 0x4a0(0x8)
	class UClass*                                                WreckIndicatorActorClass;                          // 0x4a8(0x8)
	struct Vector                                                WreckIndicatorOffset;                              // 0x4b0(0xc)
	char                                                         pad0x4_VHWNZ[0x4];                                 // 0x4bc(0x4)
	class Actor*                                                 SpawnedWreckIndicatorActor;                        // 0x4c0(0x8)
	char                                                         pad0x10_91GF5[0x10];                               // 0x4c8(0x10)
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class SeatStat_TimeOfDay: public SeatStat
{
public:
	char                                                         TimeOfDay;                                         // 0x48(0x1)
	char                                                         pad0x7_HE7MQ[0x7];                                 // 0x49(0x7)
	class TimeOfDayDataAsset*                                    TimeOfDayRanges;                                   // 0x50(0x8)
	char                                                         pad0x20_OMNQH[0x20];                               // 0x58(0x20)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ShipPartHitsConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x98 (Full Size[0x110] - InheritedSize[0x78]
class ShantyRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x28_XZ7B6[0x28];                               // 0x78(0x28)
	TArray<class ShantyItemDesc*>                                CachedShanties;                                    // 0xa0(0x10)
	struct FText                                                 ShuffleTitle;                                      // 0xb0(0x38)
	struct StringAssetReference                                  ShuffleIcon;                                       // 0xe8(0x10)
	struct StringAssetReference                                  ShuffleBackground;                                 // 0xf8(0x10)
	class ShantyItemDescToSlotRemappingDataAsset*                RemappingDataAsset;                                // 0x108(0x8)
};


// Size 0x30 (Full Size[0x1d8] - InheritedSize[0x1a8]
class PickupablePlayerBuriedItemMapComponent: public PickupableComponent
{
public:
	char                                                         pad0x30_AL0I2[0x30];                               // 0x1a8(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteVoyageChapterConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x30 (Full Size[0xe0] - InheritedSize[0xb0]
class WaitForCrewToCollectCollectorsChestPagesStepDesc: public MutateCollectorsChestStepDesc
{
public:
	struct QuestVariablePlayerActor                              CollectingPlayer;                                  // 0xb0(0x30)
};


// Size 0x0 (Full Size[0xa00] - InheritedSize[0xa00]
class ContinuousAnimatedMechanismAction: public BaseContinuousAnimatedMechanismAction
{
public:
	class MechanismActionComponent*                              MechanismActionComponent;                          // 0x9f8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Despawning_Defeated: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class ConditionInstanceNPCDialogConditional: public NPCDialogConditional
{
public:
	struct ConditionInstance                                     Condition;                                         // 0x30(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EyeOfReachDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class AthenaGameEngineSettingsJupiter: public AthenaGameEngineSettings
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsShipCaptainedStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x3f0] - InheritedSize[0x3f0]
class ProgressShipSpawnLocation: public ShipSpawnLocation
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdWaterNoSplash: public ImpactProjectileId
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class CinematicQuestRunnable: public Runnable
{
public:
	struct FText                                                 Message;                                           // 0x28(0x38)
	struct FText                                                 Header;                                            // 0x60(0x38)
	struct FName                                                 Tag;                                               // 0x98(0x8)
	bool                                                         RunOnce;                                           // 0xa0(0x1)
	char                                                         pad0x7_E57FD[0x7];                                 // 0xa1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_SkullOfTheArgonauts: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenWindsSkullDamagerType: public DamagerType
{
public:
};


// Size 0x30 (Full Size[0x538] - InheritedSize[0x508]
class ItemSpawnTelemetryDispatchingItemInfo: public ItemInfo
{
public:
	char                                                         pad0x20_X1I4W[0x20];                               // 0x508(0x20)
	struct Guid                                                  ItemId;                                            // 0x528(0x10)
};


// Size 0x1f8 (Full Size[0x3a8] - InheritedSize[0x1b0]
class EmergentContestVoyageRecipeDataAsset: public VoyageRecipeDataAsset
{
public:
	struct EmergentContestVoyageRecipe                           ContestVoyageRecipe;                               // 0x1b0(0x1f8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HuntingSpearDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x110] - InheritedSize[0x110]
class PremiumCatalogOfferDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
};


// Size 0x20 (Full Size[0x2b0] - InheritedSize[0x290]
class ControlIntentInputComponent: public LookAtOffsetInputComponent
{
public:
	char                                                         pad0x20_44U1H[0x20];                               // 0x290(0x20)
};


// Size 0x30 (Full Size[0x2d0] - InheritedSize[0x2a0]
class CannonInputComponent: public MountedWeaponAimAndFireInputComponent
{
public:
	char                                                         pad0x30_6GXRG[0x30];                               // 0x2a0(0x30)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class HasCompanyPromotionPrerequisite: public InteractionPrerequisiteBase
{
public:
	class UClass*                                                RankDesc;                                          // 0x90(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BlockInteractEffect: public AmmoBaseEffect
{
public:
	class Actor*                                                 OwningActor;                                       // 0x28(0x8)
	char                                                         TargetInteractableState;                           // 0x30(0x1)
	char                                                         pad0x7_XWRNP[0x7];                                 // 0x31(0x7)
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventCallInterfaceStartReaction: public LandmarkReactionEvent
{
public:
	char                                                         RunLocation;                                       // 0x58(0x1)
	char                                                         pad0x7_43NKR[0x7];                                 // 0x59(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlowpipeDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Silence: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0xa8] - InheritedSize[0xa0]
class SpawnActorAtPointStep: public SpawnActorBaseStep
{
public:
	class SpawnActorAtPointStepDesc*                             Desc;                                              // 0xa0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdGrapeshot: public ImpactProjectileId
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class NPCDialogHeaderStorageContainer: public NPCDialogHeader
{
public:
	struct FText                                                 Text;                                              // 0x28(0x38)
};


// Size 0x20 (Full Size[0xa8] - InheritedSize[0x88]
class WeightedItemSpawnData: public ItemSpawnData
{
public:
	class WeightedItemDescSpawnDataAsset*                        WeightedItemSpawnAsset;                            // 0x88(0x8)
	char                                                         pad0x18_7SKBB[0x18];                               // 0x90(0x18)
};


// Size 0x50 (Full Size[0x8f8] - InheritedSize[0x8a8]
class SkellyFortOfTheDamned: public SkellyFort
{
public:
	class MusicZoneComponent*                                    PreBossMusicZone;                                  // 0x8a8(0x8)
	class MusicZoneComponent*                                    BossMusicZone;                                     // 0x8b0(0x8)
	class WwiseObjectPoolWrapper*                                FortBellPool;                                      // 0x8b8(0x8)
	class WwiseEvent*                                            FortBellOneshot;                                   // 0x8c0(0x8)
	struct Vector                                                EmitterOffset;                                     // 0x8c8(0xc)
	bool                                                         DoorClosesWhenPlayersLeaveVicinity;                // 0x8d4(0x1)
	char                                                         CurrentAudioState;                                 // 0x8d5(0x1)
	char                                                         pad0x22_RI279[0x22];                               // 0x8d6(0x22)
};


// Size 0xb8 (Full Size[0x108] - InheritedSize[0x50]
class InvasionDepartureTunnelPresenterObject: public TunnelPresenterObjectBase
{
public:
	char                                                         pad0x8_WTOT3[0x8];                                 // 0x50(0x8)
	class InvasionDepartureTunnelScrollingScenery*               ScrollingSceneryActorInstance;                     // 0x58(0x8)
	class InvasionDepartureTunnelPresenterObjectParams*          Params;                                            // 0x60(0x8)
	char                                                         pad0xa0_H1JXH[0xa0];                               // 0x68(0xa0)
};


// Size 0x80 (Full Size[0x540] - InheritedSize[0x4c0]
class SunkenCurseArtefactItemSpawnComponent: public ItemSpawnComponent
{
public:
	char                                                         pad0x80_3WO87[0x80];                               // 0x4c0(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BattleElevatorEventRoomKrakenDeadPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LockStat_LockOpened: public UnlockLockConditionalStatTrigger
{
public:
};


// Size 0x38 (Full Size[0x110] - InheritedSize[0xd8]
class NPCDialogOptionSellBooty: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
};


// Size 0x280 (Full Size[0x698] - InheritedSize[0x418]
class PetChestInteraction: public PossessionsChestInteraction
{
public:
	char                                                         pad0x10_1753A[0x10];                               // 0x418(0x10)
	TArray<struct FeaturedPetCategory>                           Categories;                                        // 0x428(0x10)
	bool                                                         AllTab;                                            // 0x438(0x1)
	char                                                         pad0x7_OGM8X[0x7];                                 // 0x439(0x7)
	TArray<String>                                               ForbiddenNameTokens;                               // 0x440(0x10)
	char                                                         pad0x218_M5UOO[0x218];                             // 0x450(0x218)
	struct PetLoadout                                            OriginalLoadout;                                   // 0x668(0x18)
	struct PetLoadout                                            Loadout;                                           // 0x680(0x18)
};


// Size 0x8 (Full Size[0x2a8] - InheritedSize[0x2a0]
class HarpoonInputComponent: public MountedWeaponAimAndFireInputComponent
{
public:
	class HarpoonLauncher*                                       HarpoonLauncher;                                   // 0x2a0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVomit: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class FirstPersonAnimationData: public AthenaAnimationData
{
public:
	class FirstPersonAnimaticList*                               FirstPersonAnimaticList;                           // 0x90(0x8)
};


// Size 0x28 (Full Size[0x1a68] - InheritedSize[0x1a40]
class TestPlayerRelevancyAthenaPlayerController: public AthenaPlayerController
{
public:
	char                                                         pad0x28_SX4AJ[0x28];                               // 0x1a40(0x28)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StorageContainerMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x50 (Full Size[0x1b0] - InheritedSize[0x160]
class QuestBookPagesInContainerComponent: public LayerInContainerComponent
{
public:
	char                                                         pad0x10_D2TOA[0x10];                               // 0x160(0x10)
	struct FText                                                 ActionTooltipDisplaySentence;                      // 0x170(0x38)
	char                                                         pad0x8_IT345[0x8];                                 // 0x1a8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockMedium: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdHuntingSpear: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DarkAncientTridentDamagerType: public DamagerType
{
public:
};


// Size 0x120 (Full Size[0x5e0] - InheritedSize[0x4c0]
class FlotsamItemSpawnComponent: public ItemSpawnComponent
{
public:
	char                                                         pad0x108_AE9GA[0x108];                             // 0x4c0(0x108)
	TArray<class Object*>                                        PreLoadedClasses;                                  // 0x5c8(0x10)
	char                                                         pad0x8_ZKZPZ[0x8];                                 // 0x5d8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Grog: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DartTypeId_Mimic: public DartTypeId
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StorageContainerContentSpawner: public BaseContainerContentSpawner
{
public:
	TArray<struct StorageContainerContentSpawnerEntry>           Entries;                                           // 0x38(0x10)
};


// Size 0x18 (Full Size[0xd8] - InheritedSize[0xc0]
class SeaFortStatFireOnItemNPCHandinComponent: public StatFireOnItemNPCHandinComponent
{
public:
	class UClass*                                                BewitchingDoll;                                    // 0xc0(0x8)
	class UClass*                                                EnchantedDoll;                                     // 0xc8(0x8)
	char                                                         SeaFortAlignmentState;                             // 0xd0(0x1)
	char                                                         pad0x7_27G3V[0x7];                                 // 0xd1(0x7)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class MaximumTrackedActorTypePopulationSpawnRequirement: public SpawnRequirement
{
public:
	char                                                         TrackedActorType;                                  // 0x50(0x1)
	char                                                         pad0x3_BJO7C[0x3];                                 // 0x51(0x3)
	int                                                          MaximumPopulation;                                 // 0x54(0x4)
	char                                                         pad0x10_CM0TP[0x10];                               // 0x58(0x10)
};


// Size 0x28 (Full Size[0x90] - InheritedSize[0x68]
class BTTask_PickUpItemActorFromBlackboard: public BTTask_WaitForWieldBase
{
public:
	struct BlackboardKeySelector                                 ItemToPickUpBlackboardKey;                         // 0x68(0x28)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class PirateLegendDesc: public EntitlementDesc
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class ClothingDesc: public EntitlementDesc
{
public:
	struct FName                                                 WardrobeKey;                                       // 0xc8(0x8)
};


// Size 0x28 (Full Size[0xb0] - InheritedSize[0x88]
class ClothingCategory: public CategoryBase
{
public:
	TArray<class Class*>                                         PiratePreviewRemovals;                             // 0x88(0x10)
	class AnimationAsset*                                        PiratePreviewAnim;                                 // 0x98(0x8)
	struct FName                                                 PiratePreviewCamera;                               // 0xa0(0x8)
	bool                                                         PiratePreviewSpin;                                 // 0xa8(0x1)
	char                                                         pad0x7_CCVIS[0x7];                                 // 0xa9(0x7)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class WheelDescAsset: public ShipPartDescAsset
{
public:
	struct WheelDesc                                             WheelDesc;                                         // 0x28(0x28)
};


// Size 0x20 (Full Size[0xa8] - InheritedSize[0x88]
class ActorSpawnData: public ItemSpawnData
{
public:
	char                                                         pad0x20_8Q3B0[0x20];                               // 0x88(0x20)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HandedInTheReapersTributeShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EquipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SkeletonCampCompletedAndTributeCollectedConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x150 (Full Size[0x9d0] - InheritedSize[0x880]
class AthenaAICharacterMovementComponent: public AthenaCharacterMovementComponent
{
public:
	char                                                         pad0x10_WKA2K[0x10];                               // 0x880(0x10)
	struct AIStrategyMovementProperties                          DefaultMovementProperties;                         // 0x890(0x18)
	TArray<struct AIStrategyMovementProperties>                  AIStrategyMovementProperties;                      // 0x8a8(0x10)
	TArray<struct ItemCategoryAIStrategyMovementPropertiesOverride> ItemCategoryAIStrategyMovementPropertiesOverrides; // 0x8b8(0x10)
	float                                                        BlendSpeed;                                        // 0x8c8(0x4)
	float                                                        KeepOnNavMeshProjectionDistance;                   // 0x8cc(0x4)
	bool                                                         bDebugKeepOnNavMesh;                               // 0x8d0(0x1)
	bool                                                         DisableNavMeshChecks;                              // 0x8d1(0x1)
	bool                                                         OverrideSmoothNetUpdateDistancesDuringCharge;      // 0x8d2(0x1)
	char                                                         pad0x1_CSM9F[0x1];                                 // 0x8d3(0x1)
	float                                                        ChargeMaxSmoothNetUpdateDist;                      // 0x8d4(0x4)
	float                                                        ChargeNoSmoothNetUpdateDist;                       // 0x8d8(0x4)
	char                                                         pad0x4_YTTH7[0x4];                                 // 0x8dc(0x4)
	class CurveFloat*                                            RVOPostAvoidanceVelocityMultiplier;                // 0x8e0(0x8)
	float                                                        ChargeSmoothNetUpdateGracePeriod;                  // 0x8e8(0x4)
	char                                                         pad0xc4_TL0B1[0xc4];                               // 0x8ec(0xc4)
	float                                                        DesiredMaxSpeedAmp;                                // 0x9b0(0x4)
	float                                                        DesiredMaxAccelAmp;                                // 0x9b4(0x4)
	char                                                         pad0x18_F3TZV[0x18];                               // 0x9b8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rudder: public ImpactProjectileId
{
public:
};


// Size 0x2d0 (Full Size[0x5a0] - InheritedSize[0x2d0]
class MeleeItemActionComponent: public ItemActionComponent
{
public:
	class ParticleSystemComponent*                               TrailParticleSystem_FP;                            // 0x2d0(0x8)
	class ParticleSystemComponent*                               TrailParticleSystem_TP;                            // 0x2d8(0x8)
	bool                                                         PreventCombosOnHealthChange;                       // 0x2e0(0x1)
	char                                                         pad0x1f_J6MZ2[0x1f];                               // 0x2e1(0x1f)
	class MeleeWeaponDataAsset*                                  WeaponData;                                        // 0x300(0x8)
	class MeleeAttackProcessorComponent*                         WieldersAttackProcessor;                           // 0x308(0x8)
	class InventoryManipulatorComponent*                         WieldersInventoryManipulator;                      // 0x310(0x8)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0x318(0x4)
	float                                                        MaxAcceptableAttackLocationDelta;                  // 0x31c(0x4)
	float                                                        MaxAcceptableAttackLocationOnShipDelta;            // 0x320(0x4)
	float                                                        MaxAcceptableAttackShipSpeedForLocation;           // 0x324(0x4)
	char                                                         pad0x278_MN2YJ[0x278];                             // 0x328(0x278)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactDecalParamModifierVomit: public ImpactDecalParamModifier
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MediumShip: public ShipSize
{
public:
};


// Size 0x90 (Full Size[0xe8] - InheritedSize[0x58]
class MechanismAnimationCurve_Flamethrower: public MechanismAnimation
{
public:
	float                                                        MinLength;                                         // 0x58(0x4)
	float                                                        MaxLength;                                         // 0x5c(0x4)
	float                                                        Radius;                                            // 0x60(0x4)
	float                                                        MinFlameLengthRequiredForDamage;                   // 0x64(0x4)
	struct RuntimeFloatCurve                                     LengthCurve;                                       // 0x68(0x80)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SinkShipStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class CanPerformMimicEmoteRadialContext: public RadialContextBase
{
public:
	bool                                                         InvertContext;                                     // 0x28(0x1)
	char                                                         pad0x7_6FP33[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0x3c0] - InheritedSize[0x3c0]
class GenericPartWithVFX: public GenericPart
{
public:
};


// Size 0x10 (Full Size[0xa0] - InheritedSize[0x90]
class IsCompanyLevelPrerequisite: public InteractionPrerequisiteBase
{
public:
	class UClass*                                                Company;                                           // 0x90(0x8)
	char                                                         pad0x8_6UL1N[0x8];                                 // 0x98(0x8)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class QuestBookDoublePageLayout: public QuestBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RowboatOarsAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightningDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutlassDamagerType: public DamagerType
{
public:
};


// Size 0x60 (Full Size[0x138] - InheritedSize[0xd8]
class DepartureTunnelDependencies: public TunnelDependencies
{
public:
	char                                                         pad0x60_UXH11[0x60];                               // 0xd8(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rudder_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSirenTridentLarge: public ImpactProjectileId
{
public:
};


// Size 0x1e0 (Full Size[0x5b0] - InheritedSize[0x3d0]
class Ladder: public InteractableBase
{
public:
	char                                                         pad0x38_UFP28[0x38];                               // 0x3d0(0x38)
	class StaticMeshComponent*                                   MeshComponent;                                     // 0x408(0x8)
	class SplineComponent*                                       OnTopSplineComponent;                              // 0x410(0x8)
	class SplineComponent*                                       OffTopSplineComponent;                             // 0x418(0x8)
	float                                                        MaxDistFromLadderTopToClassifyAsTopDocking;        // 0x420(0x4)
	struct Vector                                                InteractOffset;                                    // 0x424(0xc)
	struct LadderDefinition                                      LadderDefinition;                                  // 0x430(0x1c)
	char                                                         pad0x4_BYAC4[0x4];                                 // 0x44c(0x4)
	class PhysicalMaterial*                                      LadderPhysicsMaterial;                             // 0x450(0x8)
	class PhrasesRadialDataAsset*                                Phrases;                                           // 0x458(0x8)
	float                                                        RepeatExecutionThreshold;                          // 0x460(0x4)
	char                                                         pad0x14c_Y1J53[0x14c];                             // 0x464(0x14c)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StashMapRadialAction: public RadialAction
{
public:
	class RadialContextBase*                                     Context;                                           // 0x30(0x8)
	char                                                         pad0x8_6DSW1[0x8];                                 // 0x38(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BattleElevatorEventRoomHeightReachedPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
	float                                                        TargetHeightPercentage;                            // 0x28(0x4)
	char                                                         pad0x14_BNSZL[0x14];                               // 0x2c(0x14)
};


// Size 0x58 (Full Size[0x98] - InheritedSize[0x40]
class CustomScorePrivateSandboxVariant: public CustomScoreVariantBase
{
public:
	char                                                         pad0x58_CNDK1[0x58];                               // 0x40(0x58)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class AnimNotifyStateQuestBookLeftSpreadCurrentRightSpreadNext: public AnimNotifyStateQuestBookRenderingModeRequest
{
public:
};


// Size 0x158 (Full Size[0x228] - InheritedSize[0xd0]
class BalancingComponent: public DoubleIntentComponent
{
public:
	char                                                         pad0x8_AQ6RE[0x8];                                 // 0xd0(0x8)
	class ParticleSystemComponent*                               PlayerWalkwayWindVFXComponent;                     // 0xd8(0x8)
	class ParticleSystemComponent*                               PlayerWalkwayTrailVFXComponent;                    // 0xe0(0x8)
	class ParticleSystemComponent*                               PlayerWalkwayRightFootTrailVFXComponent;           // 0xe8(0x8)
	char                                                         pad0x80_YHL8G[0x80];                               // 0xf0(0x80)
	float                                                        ReplicationValueForCurrentDistance;                // 0x170(0x4)
	char                                                         pad0x8_HV4CP[0x8];                                 // 0x174(0x8)
	float                                                        ReplicationValueForCurrentTilt;                    // 0x17c(0x4)
	char                                                         pad0x4_FFQLO[0x4];                                 // 0x180(0x4)
	float                                                        ReplicationValueForCurrentTimeOnRope;              // 0x184(0x4)
	char                                                         pad0x8_2A2VV[0x8];                                 // 0x188(0x8)
	float                                                        ReplicationValueForCurrentTimeHoldingLeft;         // 0x190(0x4)
	char                                                         pad0x8_FKARK[0x8];                                 // 0x194(0x8)
	float                                                        ReplicationValueForCurrentTimeHoldingRight;        // 0x19c(0x4)
	char                                                         pad0x8_BU0YB[0x8];                                 // 0x1a0(0x8)
	char                                                         ServerId;                                          // 0x1a8(0x1)
	char                                                         pad0x1_UZ5Z7[0x1];                                 // 0x1a9(0x1)
	bool                                                         ServerSprint;                                      // 0x1aa(0x1)
	char                                                         pad0x35_MJPUK[0x35];                               // 0x1ab(0x35)
	class BalanceableWalkwayFXParams*                            FXParams;                                          // 0x1e0(0x8)
	char                                                         pad0x20_PG6P7[0x20];                               // 0x1e8(0x20)
	struct PlayerStat                                            TransferBootyStat;                                 // 0x210(0x4)
	struct PlayerStat                                            TransferToEnemyShipStat;                           // 0x214(0x4)
	struct PlayerStat                                            SlideToPlayerShipStat;                             // 0x218(0x4)
	char                                                         pad0xc_B7OU3[0xc];                                 // 0x21c(0xc)
};


// Size 0x28 (Full Size[0xb8] - InheritedSize[0x90]
class AthenaAnimationThirdPersonAnimationData: public AthenaAnimationData
{
public:
	class AthenaAnimationPulleyDataAsset*                        PulleyAnimationsDataAsset;                         // 0x90(0x8)
	class AthenaAnimationEmoteListingAsset*                      EmoteListingAsset;                                 // 0x98(0x8)
	class AthenaAnimationKeyedInstrumentDataAsset*               KeyedInstrumentDataAsset;                          // 0xa0(0x8)
	class AthenaAnimationSinkingTunnelDataAsset*                 SinkingTunnelDataAsset;                            // 0xa8(0x8)
	class CustomAnimationMontageDefinitionListingDataAsset*      CustomAnimationMontageDefinitionListingDataAsset;  // 0xb0(0x8)
};


// Size 0x0 (Full Size[0x420] - InheritedSize[0x420]
class VariableFillRateWaterVolume: public WaterVolume
{
public:
};


// Size 0xa8 (Full Size[0x180] - InheritedSize[0xd8]
class NPCDialogOptionStorageContainerTake: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	struct FText                                                 EmptyText;                                         // 0x110(0x38)
	struct FText                                                 NoInventorySpaceText;                              // 0x148(0x38)
};


// Size 0x8 (Full Size[0x630] - InheritedSize[0x628]
class LandmarkCapsule: public Landmark
{
public:
	class ShapeComponent*                                        DefaultShape;                                      // 0x628(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersTributeShipWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MastCannonDamagerType: public DamagerType
{
public:
};


// Size 0x20 (Full Size[0x3f0] - InheritedSize[0x3d0]
class TreasureVaultTable: public InteractableBase
{
public:
	class VaultKeyMappingDataAsset*                              VaultKeyMapping;                                   // 0x3d0(0x8)
	char                                                         pad0x18_X0O47[0x18];                               // 0x3d8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeWeaponAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x18 (Full Size[0x160] - InheritedSize[0x148]
class IntentBasedMechanismTriggerComponent: public MechanismTriggerComponent
{
public:
	char                                                         pad0x18_JNITU[0x18];                               // 0x148(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_TreasureChest_Skeletal: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenLordEncounterGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanBeReloadedOneShotInteractableFilterDesc: public OneShotInteractableFilterDesc
{
public:
};


// Size 0x50 (Full Size[0x840] - InheritedSize[0x7f0]
class CollectorsChestWieldableItemBase: public WieldableItem
{
public:
	char                                                         pad0x20_5QIR2[0x20];                               // 0x7f0(0x20)
	TArray<class CollectorsChestItemSlotInteractable*>           Slots;                                             // 0x810(0x10)
	char                                                         pad0x20_KINNX[0x20];                               // 0x820(0x20)
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventPlayAudio: public LandmarkReactionEvent
{
public:
	class WwiseEvent*                                            AudioCue;                                          // 0x58(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SinkReapersTributeShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x60 (Full Size[0x1c0] - InheritedSize[0x160]
class GoldInContainerComponent: public LayerInContainerComponent
{
public:
	struct RewardId                                              GoldRewardId;                                      // 0x158(0x8)
	char                                                         pad0x60_VNB79[0x60];                               // 0x160(0x60)
};


// Size 0x60 (Full Size[0xa00] - InheritedSize[0x9a0]
class SkullOfStormsWindthrowerController: public AshenWindsFlamethrowerController
{
public:
	bool                                                         AllowFireDousing;                                  // 0x998(0x1)
	bool                                                         AllowFireDamage;                                   // 0x999(0x1)
	char                                                         pad0x2_LWBIX[0x2];                                 // 0x99a(0x2)
	float                                                        MaxWindSpeedMultiplier;                            // 0x99c(0x4)
	float                                                        MaximumMaxWindSpeedMultiplier;                     // 0x9a0(0x4)
	struct KnockBackInfo                                         KnockbackParams;                                   // 0x9a4(0x54)
	char                                                         pad0x8_ECZ10[0x8];                                 // 0x9f8(0x8)
};


// Size 0x10 (Full Size[0x88] - InheritedSize[0x78]
class FortIslandDataDefaultAssetEntry: public IslandDataDefaultAssetEntry
{
public:
	class AISpawner*                                             AISpawnerWhenFortActive;                           // 0x78(0x8)
	class AISpawner*                                             CannonsAISpawnerWhenFortActive;                    // 0x80(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactDecalParamModifierTime: public ImpactDecalParamModifier
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class EmblemReward: public Reward
{
public:
	struct EmblemId                                              EmblemId;                                          // 0x28(0x18)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class CrestPartDescAsset: public ShipPartDescAsset
{
public:
	struct CrestPartDesc                                         CrestPartDesc;                                     // 0x28(0x30)
};


// Size 0x58 (Full Size[0x168] - InheritedSize[0x110]
class PremiumCatalogItemSetDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
	struct FText                                                 PageTitle;                                         // 0x110(0x38)
	struct StringAssetReference                                  PageIcon;                                          // 0x148(0x10)
	TArray<struct PremiumCatalogItemSet>                         ItemSets;                                          // 0x158(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsShipPlayersOwnShipCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggressiveGhostShipsEncounterGameEventType: public GameEventType
{
public:
};


// Size 0x1b80 (Full Size[0x27d0] - InheritedSize[0xc50]
class AthenaPlayerCharacter: public AthenaCharacter
{
public:
	char                                                         pad0x170_JDVCR[0x170];                             // 0xc50(0x170)
	class SceneComponent*                                        FirstPersonMeshOffsetComponent;                    // 0xdc0(0x8)
	class SkeletalMeshComponent*                                 FirstPersonMesh;                                   // 0xdc8(0x8)
	class AthenaCameraComponent*                                 FirstPersonCamera;                                 // 0xdd0(0x8)
	TArray<class ParticleSystemComponent*>                       FirstPersonParticleComponents;                     // 0xdd8(0x10)
	class AthenaCameraComponent*                                 ThirdPersonCamera;                                 // 0xde8(0x8)
	TArray<class ParticleSystemComponent*>                       ThirdPersonParticleComponents;                     // 0xdf0(0x10)
	class AthenaCameraComponent*                                 SpringArmCamera;                                   // 0xe00(0x8)
	class LookAtEmoteCameraComponent*                            LookAtEmoteCameraComponent;                        // 0xe08(0x8)
	class AthenaSpringArmComponent*                              SpringArm;                                         // 0xe10(0x8)
	class ChildActorComponent*                                   LocalCloudDome;                                    // 0xe18(0x8)
	class CharacterInteractionComponent*                         InteractionComponent;                              // 0xe20(0x8)
	class ClimbingComponent*                                     ClimbingComponent;                                 // 0xe28(0x8)
	class DrunkennessComponent*                                  DrunkennessComponent;                              // 0xe30(0x8)
	class StaggerComponent*                                      StaggerComponent;                                  // 0xe38(0x8)
	class DrowningComponent*                                     DrowningComponent;                                 // 0xe40(0x8)
	class RumbleHandlerComponent*                                RumbleHandlerComponent;                            // 0xe48(0x8)
	class ScreenSpaceVfxComponent*                               ScreenSpaceVfxComponent;                           // 0xe50(0x8)
	class TreasureMapCollectionComponent*                        TreasureMapCollectionComponent;                    // 0xe58(0x8)
	class PhrasesRadialComponent*                                PhrasesRadialComponent;                            // 0xe60(0x8)
	class QuickInventoryComponent*                               QuickInventoryComponent;                           // 0xe68(0x8)
	class PointOfInterestTrackerComponent*                       PointOfInterestTrackerComponent;                   // 0xe70(0x8)
	class LimpingComponent*                                      LimpingComponent;                                  // 0xe78(0x8)
	class PacingComponent*                                       PacingComponent;                                   // 0xe80(0x8)
	class BurpComponent*                                         BurpComponent;                                     // 0xe88(0x8)
	class MeleeAttackLockOnComponent*                            MeleeLockOnComponent;                              // 0xe90(0x8)
	class DeathSelfInteractionComponent*                         DeathSelfInteractionComponent;                     // 0xe98(0x8)
	class RidePlayerComponent*                                   RidePlayerComponent;                               // 0xea0(0x8)
	class ReviveDebugComponent*                                  ReviveDebugComponent;                              // 0xea8(0x8)
	class FlashbangEffectComponent*                              FlashbangEffectComponent;                          // 0xeb0(0x8)
	class BalancingComponent*                                    BalancingComponent;                                // 0xeb8(0x8)
	class WorldLocationVisitorComponent*                         WorldLocationVisitorComponent;                     // 0xec0(0x8)
	class MeleeAttackLockOnComponentSettings*                    MeleeAttackLockOnSettings;                         // 0xec8(0x8)
	class StatusEffectManagerComponent*                          StatusEffectManagerComponent;                      // 0xed0(0x8)
	class StatusEffectPersistenceComponent*                      StatusEffectPersistenceComponent;                  // 0xed8(0x8)
	class PlayerCurseComponent*                                  PlayerCurseComponent;                              // 0xee0(0x8)
	class MaterialStatusSusceptibilityComponent*                 MaterialStatusSusceptibilityComponent;             // 0xee8(0x8)
	class HealthRegenerationPoolComponent*                       HealthRegenerationPoolComponent;                   // 0xef0(0x8)
	class SicknessComponent*                                     SicknessComponent;                                 // 0xef8(0x8)
	class RewindComponent*                                       PlayerViewRewindComponent;                         // 0xf00(0x8)
	class CapsuleComponent*                                      ProjectileTraceHitVolume;                          // 0xf08(0x8)
	class PlayerMerchantContractsComponent*                      PlayerMerchantContractsComponent;                  // 0xf10(0x8)
	class PlayerShroudBreakerTrackerComponent*                   PlayerShroudBreakerTrackerComponent;               // 0xf18(0x8)
	class PetOwnerComponent*                                     PetOwnerComponent;                                 // 0xf20(0x8)
	class AISpawnContextContainerComponent*                      SpawnContextContainerComponent;                    // 0xf28(0x8)
	class RadialManagerComponent*                                RadialManager;                                     // 0xf30(0x8)
	class StreamingLocationComponent*                            StreamingLocationComponent;                        // 0xf38(0x8)
	class EquipClothingComponent*                                EquipClothingComponent;                            // 0xf40(0x8)
	class GenericStatusVFXComponent*                             GenericStatusVFXComponent;                         // 0xf48(0x8)
	float                                                        CameraFOVWhenSprinting;                            // 0xf50(0x4)
	char                                                         pad0x4_2L8L8[0x4];                                 // 0xf54(0x4)
	class CurveFloat*                                            CameraFOVScalarMultiplierCurveWhenSprinting;       // 0xf58(0x8)
	class CurveVector*                                           ApproximateCamPitchToLocalCamOffsetCurve;          // 0xf60(0x8)
	struct WalkConditionsParams                                  WalkConditionParams;                               // 0xf68(0x8)
	struct SprintConditionsParams                                ServerSprintConditionParams;                       // 0xf70(0xc)
	struct SprintConditionsParams                                ClientSprintConditionParams;                       // 0xf7c(0xc)
	float                                                        SprintingServerTimeTolerance;                      // 0xf88(0x4)
	float                                                        PostSprintResetTime;                               // 0xf8c(0x4)
	class AthenaSpringArmComponentParams*                        EmoteSpringArmParameters;                          // 0xf90(0x8)
	class AthenaSpringArmComponentParams*                        DeathSpringArmParameters;                          // 0xf98(0x8)
	class EmotesRadialDataAsset*                                 EmotesRadialDataAsset;                             // 0xfa0(0x8)
	class WalkableEmotesRadialDataAsset*                         WalkableEmotesRadialDataAsset;                     // 0xfa8(0x8)
	bool                                                         AllowAnimationTickAggregation;                     // 0xfb0(0x1)
	char                                                         pad0x3_7H8FQ[0x3];                                 // 0xfb1(0x3)
	struct AchievementKillOpponentFromBehindWithBlunderbuss      AchievementKillOpponentFromBehindWithBlunderbuss;  // 0xfb4(0x4)
	struct AchievementHeavyAttackRivalOffTheirShip               AchievementHeavyAttackRivalOffTheirShip;           // 0xfb8(0x10)
	struct AchievementBlockThenHitAndGetBlockedThenTakeHit       AchievementBlockThenHitAndGetBlockedThenTakeHit;   // 0xfc8(0x10)
	struct AchievementHaveADrinkWithAnotherCrewAtAnOutpost       AchievementHaveADrinkWithAnotherCrewAtAnOutpost;   // 0xfd8(0x20)
	struct AchievementKillOpponentInContest                      AchievementKillOpponentInContest;                  // 0xff8(0x8)
	class UClass*                                                ConditionalStatsTriggerForKillingAnotherPlayer;    // 0x1000(0x8)
	struct VengeanceParams                                       VengeanceParams;                                   // 0x1008(0x10)
	struct PlayerStat                                            KillMultipleSkeletonsStat;                         // 0x1018(0x4)
	struct PlayerStat                                            KillMultipleSkeletonsWithThrowingKnifeStat;        // 0x101c(0x4)
	int                                                          MinimumNumberOfSkeletonsKilledToFireStat;          // 0x1020(0x4)
	struct PlayerStat                                            KillMultipleSkeletonsWithDoubleBarrelStat;         // 0x1024(0x4)
	int                                                          MinimumNumberOfSkeletonsKilledByDoubleBarrelToFireStat; // 0x1028(0x4)
	char                                                         pad0x4_F3H2D[0x4];                                 // 0x102c(0x4)
	struct PlayerStat                                            HangOnAllEnemyShipPointsStat;                      // 0x1050(0x4)
	char                                                         pad0x4_OCRZ2[0x4];                                 // 0x1054(0x4)
	class AICreatureMovementModifierParamsDataAsset*             PirateLegendHideoutPetMovementData;                // 0x1058(0x8)
	class AICreatureMovementModifierParamsDataAsset*             OnShipPetMovementData;                             // 0x1060(0x8)
	class AsyncLoadoutRepairComponent*                           RepairComponent;                                   // 0x1068(0x8)
	class SeasonProgressionUIComponent*                          SeasonUIComponent;                                 // 0x1070(0x8)
	class AimAssistComponent*                                    AimAssistComponent;                                // 0x1078(0x8)
	class AimAssistTargetComponent*                              AimAssistTargetComponent;                          // 0x1080(0x8)
	class SequencerCameraDockingComponent*                       SequencerCameraDockingComponent;                   // 0x1088(0x8)
	class ScrambledIdentityProviderComponent*                    GuildIdentityProviderComponent;                    // 0x1090(0x8)
	class DisguiseHandlerComponent*                              DisguiseHandlerComponent;                          // 0x1098(0x8)
	class EmotePropData*                                         EmotePropData;                                     // 0x10a0(0x8)
	class MimicHandlerComponent*                                 MimicHandlerComponent;                             // 0x10a8(0x8)
	class CurveFloat*                                            TimeOfDayToBrightness;                             // 0x10b0(0x8)
	char                                                         pad0xf8_FWW2Z[0xf8];                               // 0x10b8(0xf8)
	class UClass*                                                FirstPersonAnimSetDataId;                          // 0x11b0(0x8)
	class AnimationDataStoreWeakReferenceAsset*                  FirstPersonAnimationDataStoreWeakReferencesAsset;  // 0x11b8(0x8)
	char                                                         CharacterType;                                     // 0x11c0(0x1)
	char                                                         pad0x20_4D2Z5[0x20];                               // 0x11c1(0x20)
	bool                                                         IsWearingSkeletonCurseCached;                      // 0x11e1(0x1)
	bool                                                         IsWearingGhostCurseCached;                         // 0x11e2(0x1)
	char                                                         pad0x5_OG4M1[0x5];                                 // 0x11e3(0x5)
	float                                                        SpawningInvisibilityActiveDuration;                // 0x11e8(0x4)
	char                                                         pad0x4_5Y9YE[0x4];                                 // 0x11ec(0x4)
	class PostProcessComponent*                                  PostProcessComponent;                              // 0x11f0(0x8)
	bool                                                         IsBeingMovedByAPortableHarpoonActionState;         // 0x11f8(0x1)
	char                                                         pad0x10df_EH0X8[0x10df];                           // 0x11f9(0x10df)
	class FaunaRammableComponent*                                FaunaRammableComponent;                            // 0x22d8(0x8)
	class ClothingLoadoutComponent*                              ClothingLoadoutComponent;                          // 0x22e0(0x8)
	class PetLoadoutComponent*                                   PetLoadoutComponent;                               // 0x22e8(0x8)
	class VoyageParticipantComponent*                            PrimaryVoyageParticipantComponent;                 // 0x22f0(0x8)
	class VoyageParticipantComponent*                            TaleVoyageParticipantComponent;                    // 0x22f8(0x8)
	class VoyageParticipantComponent*                            EmergentVoyageParticipantComponent;                // 0x2300(0x8)
	class PlayerWorldLocationComponent*                          PlayerWorldLocationComponent;                      // 0x2308(0x8)
	class ChainLightningReceiverComponent*                       ChainLightningReceiverComponent;                   // 0x2310(0x8)
	class PlayerGuildComponent*                                  PlayerGuildComponent;                              // 0x2318(0x8)
	class GuildInviterComponent*                                 GuildInviterComponent;                             // 0x2320(0x8)
	class InteractableComponentWithTooltipDetailedEventProvider* EmoteInteractableComponent;                        // 0x2328(0x8)
	class CharacterMovementModeReporterComponent*                CharacterMovementModeReporterComponent;            // 0x2330(0x8)
	struct AthenaPlayerCharacterModelSwap                        PendingModelSwap;                                  // 0x2338(0x80)
	char                                                         pad0x30_T3KBQ[0x30];                               // 0x23b8(0x30)
	class AthenaGameEngineSettings*                              EngineSettings;                                    // 0x23e8(0x8)
	struct FName                                                 ReplicatedOverrideAnimationEntry;                  // 0x23f0(0x8)
	char                                                         pad0x5_12V86[0x5];                                 // 0x23f8(0x5)
	bool                                                         ServerCanPlayerCrouch;                             // 0x23fd(0x1)
	char                                                         pad0x8_X2K0W[0x8];                                 // 0x23fe(0x8)
	bool                                                         ReplicatedEmoteExitAllowed;                        // 0x2406(0x1)
	char                                                         pad0xc9_9PINR[0xc9];                               // 0x2407(0xc9)
	bool                                                         FinishedWaitingForSpawn;                           // 0x24d0(0x1)
	char                                                         pad0x31_F0OPP[0x31];                               // 0x24d1(0x31)
	bool                                                         ReplicatedIsInvulnerable;                          // 0x2502(0x1)
	bool                                                         AutoFloatInWater;                                  // 0x2503(0x1)
	char                                                         pad0x1_PC48Y[0x1];                                 // 0x2504(0x1)
	bool                                                         ReplicatedIsSprinting;                             // 0x2505(0x1)
	bool                                                         ReplicatedIsCrouching;                             // 0x2506(0x1)
	char                                                         pad0x19_DCVHW[0x19];                               // 0x2507(0x19)
	float                                                        AutoMoveCancelThreshold;                           // 0x2520(0x4)
	int                                                          ReplicatedOverridePirateDescSeed;                  // 0x2524(0x4)
	struct PirateDescription                                     ReplicatedOverridePirateDesc;                      // 0x2528(0x80)
	struct PirateDescription                                     ReplicatedCachedOverridePirateDesc;                // 0x25a8(0x80)
	bool                                                         PreventJumping;                                    // 0x2628(0x1)
	bool                                                         StopMovementAndPreventSwimming;                    // 0x2629(0x1)
	bool                                                         PlayerIsInTunnelOfTheDamned;                       // 0x262a(0x1)
	char                                                         pad0x125_WS6WK[0x125];                             // 0x262b(0x125)
	bool                                                         ShouldDisguiseCollideWithPlayers;                  // 0x2750(0x1)
	char                                                         pad0x7_F3BIT[0x7];                                 // 0x2751(0x7)
	class MaterialInstanceDynamic*                               DynamicCrouchVignette;                             // 0x2758(0x8)
	char                                                         pad0x50_2NHD5[0x50];                               // 0x2760(0x50)
	class Actor*                                                 LastPlayerHangingShip;                             // 0x27b0(0x8)
	char                                                         pad0x18_GB7AL[0x18];                               // 0x27b8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsWearingGhostCurseStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rigging: public ImpactProjectileId
{
public:
};


// Size 0x10 (Full Size[0xe8] - InheritedSize[0xd8]
class NPCDialogOptionRestoreShip: public NPCDialogOption
{
public:
	float                                                        RestorationDistance;                               // 0xd8(0x4)
	char                                                         pad0x4_V8QJK[0x4];                                 // 0xdc(0x4)
	class ShipRestorationSettings*                               RestorationSettings;                               // 0xe0(0x8)
};


// Size 0x50 (Full Size[0x6c0] - InheritedSize[0x670]
class BootyItemWithCutscenesAnimationInstance: public WieldableItemAnimationInstance
{
public:
	char                                                         pad0x8_MLKNG[0x8];                                 // 0x670(0x8)
	class SkeletalMeshComponent*                                 BootyItemSkeletalMesh;                             // 0x678(0x8)
	class CutsceneAnimationDataAsset*                            CutsceneAnimationData;                             // 0x680(0x8)
	class AnimMontage*                                           CurrentCutscene;                                   // 0x688(0x8)
	char                                                         pad0x30_4WQK1[0x30];                               // 0x690(0x30)
};


// Size 0x10 (Full Size[0x128] - InheritedSize[0x118]
class TestAthenaDebugMenuComponent: public AthenaDebugMenuComponent
{
public:
	class PlayerPermissionsComponent*                            TestPermissionComponent;                           // 0x118(0x8)
	char                                                         pad0x8_MX7F0[0x8];                                 // 0x120(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_IdleActive: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x178 (Full Size[0x7e0] - InheritedSize[0x668]
class LiquidProjectile: public LaunchableProjectile
{
public:
	char                                                         ObjectTypeChannelToEnableInShip;                   // 0x668(0x1)
	char                                                         pad0x7_X0K4U[0x7];                                 // 0x669(0x7)
	class FireGridCellSelectionParamsDataAsset*                  DousingParameters;                                 // 0x670(0x8)
	TArray<struct Status>                                        StatusesToApply;                                   // 0x678(0x10)
	struct FName                                                 LiquidProjectileNoiseTag;                          // 0x688(0x8)
	float                                                        LiquidProjectileNoiseRadius;                       // 0x690(0x4)
	char                                                         pad0x4_J2IN5[0x4];                                 // 0x694(0x4)
	struct LiquidContents                                        Contents;                                          // 0x698(0x70)
	char                                                         pad0xd8_R2PX7[0xd8];                               // 0x708(0xd8)
};


// Size 0x48 (Full Size[0x80] - InheritedSize[0x38]
class StarlightTunnelLegacyPresenterObjectParams: public TunnelPresenterObjectParamsBase
{
public:
	float                                                        SecondsAfterVignetteSequenceStartsBeforeTriggeringEndSequence; // 0x38(0x4)
	float                                                        SecondsAfterVignetteSequenceStartsBeforeTransitioningFog; // 0x3c(0x4)
	int                                                          VignetteHeightCorrection;                          // 0x40(0x4)
	char                                                         pad0x4_EQMGV[0x4];                                 // 0x44(0x4)
	class SceneDialogueData*                                     DialogueData;                                      // 0x48(0x8)
	TArray<struct Text>                                          LocalisableNames;                                  // 0x50(0x10)
	class LevelSequence*                                         VignetteSequence;                                  // 0x60(0x8)
	TArray<struct ShipSpecificData>                              ShipSpecificVignettes;                             // 0x68(0x10)
	bool                                                         EnableDynamicFogTransition;                        // 0x78(0x1)
	char                                                         pad0x7_DAFIO[0x7];                                 // 0x79(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RowboatSeatAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class DrapesPartDescAsset: public ShipPartDescAsset
{
public:
	struct DrapesPartDesc                                        DrapesPartDesc;                                    // 0x28(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AmmoTransferMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x40 (Full Size[0xa8] - InheritedSize[0x68]
class BTTask_WieldItemByCategory: public BTTask_WaitForWieldBase
{
public:
	bool                                                         EnableOverrideItemCategory;                        // 0x68(0x1)
	char                                                         pad0x7_1330N[0x7];                                 // 0x69(0x7)
	class UClass*                                                OverrideItemCategory;                              // 0x70(0x8)
	struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x78(0x28)
	bool                                                         AllowWieldNoneWhenNoItemOfCategory;                // 0xa0(0x1)
	char                                                         pad0x7_VVR1Z[0x7];                                 // 0xa1(0x7)
};


// Size 0x20 (Full Size[0x80] - InheritedSize[0x60]
class EmergentFaunaSwitchesDataTypeManager: public SwitchesDataTypeManagerBase
{
public:
	char                                                         pad0x20_GS0MY[0x20];                               // 0x60(0x20)
};


// Size 0x10 (Full Size[0xa0] - InheritedSize[0x90]
class IsCompanyRankPrerequisite: public InteractionPrerequisiteBase
{
public:
	class UClass*                                                Company;                                           // 0x90(0x8)
	int                                                          Rank;                                              // 0x98(0x4)
	char                                                         pad0x4_WAT5C[0x4];                                 // 0x9c(0x4)
};


// Size 0x20 (Full Size[0xd8] - InheritedSize[0xb8]
class TaleQuestPlayerStatQueryStep: public TaleQuestBranchStep
{
public:
	class TaleQuestPlayerStatQueryStepDesc*                      StepDesc;                                          // 0xb8(0x8)
	char                                                         pad0x18_1W39Z[0x18];                               // 0xc0(0x18)
};


// Size 0x58 (Full Size[0x158] - InheritedSize[0x100]
class RotatingAudioSourceComponent: public MeshRotatorComponent
{
public:
	class WwiseObjectPoolWrapper*                                RotatingObjectPool;                                // 0x100(0x8)
	class WwiseEvent*                                            PlayWwiseEvent;                                    // 0x108(0x8)
	class WwiseEvent*                                            StopWwiseEvent;                                    // 0x110(0x8)
	struct FName                                                 PitchRtpcName;                                     // 0x118(0x8)
	struct FName                                                 RollRtpcName;                                      // 0x120(0x8)
	struct FName                                                 YawRtpcName;                                       // 0x128(0x8)
	float                                                        RtpcMax;                                           // 0x130(0x4)
	char                                                         pad0x24_WKTBH[0x24];                               // 0x134(0x24)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnarmedCombatDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BlueprintMechanismStepBase: public BlueprintStepBase
{
public:
};


// Size 0x10 (Full Size[0x6c0] - InheritedSize[0x6b0]
class TestDockingActorWithPhrases: public TestClimbingActor
{
public:
	char                                                         pad0x10_0ULSL[0x10];                               // 0x6b0(0x10)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class NPCDialogConditionalExpression: public NPCDialogConditional
{
public:
	class NPCDialogExpression*                                   Expression;                                        // 0x30(0x8)
};


// Size 0x38 (Full Size[0x178] - InheritedSize[0x140]
class SpawnActorAtPointStepDesc: public SpawnActorStepDescBase
{
public:
	struct QuestVariableTransform                                PointVar;                                          // 0x140(0x38)
};


// Size 0x20 (Full Size[0x310] - InheritedSize[0x2f0]
class BlendedAtmosphericPressureZoneComponent: public AtmosphericPressureZoneComponent
{
public:
	class CurveFloat*                                            WeightFadeCurveNormalised;                         // 0x2f0(0x8)
	class CurveFloat*                                            RadiusFadeCurveNormalised;                         // 0x2f8(0x8)
	char                                                         pad0x10_6C7LY[0x10];                               // 0x300(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Sucking: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class IsOnActiveFortEventTypeStatCondition: public StatCondition
{
public:
	class UClass*                                                EventType;                                         // 0x28(0x8)
	char                                                         pad0x18_TXC3Z[0x18];                               // 0x30(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TestHullDragDynamicsDesc: public BaseHullDragDynamicsDesc
{
public:
	char                                                         pad0x10_JL70U[0x10];                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersBountyWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class HasEntitlementStatCondition: public StatCondition
{
public:
	int                                                          RequiredNumberToMatch;                             // 0x28(0x4)
	char                                                         pad0x4_J5BZN[0x4];                                 // 0x2c(0x4)
	TArray<class Class*>                                         RequiredEntitlements;                              // 0x30(0x10)
};


// Size 0x60 (Full Size[0x2b0] - InheritedSize[0x250]
class FlamethrowerChargeComponent: public HealthComponent
{
public:
	char                                                         pad0x8_IWHLK[0x8];                                 // 0x250(0x8)
	float                                                        MaxCharge;                                         // 0x258(0x4)
	float                                                        ChargeDrainPerSecond;                              // 0x25c(0x4)
	char                                                         pad0x50_S2Y2U[0x50];                               // 0x260(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_MoltenFireball_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockSmall: public ImpactProjectileId
{
public:
};


// Size 0x8 (Full Size[0x50] - InheritedSize[0x48]
class MeshMemoryConstraintScoringNumberOfMeshes: public MeshMemoryConstraintScoringObject
{
public:
	char                                                         pad0x8_A04GS[0x8];                                 // 0x48(0x8)
};


// Size 0x0 (Full Size[0xc0] - InheritedSize[0xc0]
class TestPlayerPermissionsComponent: public PlayerPermissionsComponent
{
public:
};


// Size 0x18 (Full Size[0x190] - InheritedSize[0x178]
class ControllableIntentComponent: public IntentComponent
{
public:
	char                                                         pad0x18_H4LNJ[0x18];                               // 0x178(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExplosionDamagerType: public DamagerType
{
public:
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionDialogSelect: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	int                                                          LinkedDialog;                                      // 0x110(0x4)
	char                                                         ReactionSuppression;                               // 0x114(0x1)
	char                                                         pad0x3_YVR1I[0x3];                                 // 0x115(0x3)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionFireQueryableState: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	class UClass*                                                DataID;                                            // 0x110(0x8)
	bool                                                         CloseOnExecuted;                                   // 0x118(0x1)
	char                                                         pad0x3_5I9HI[0x3];                                 // 0x119(0x3)
	int                                                          LinkedDialog;                                      // 0x11c(0x4)
	bool                                                         RelevantOnServer;                                  // 0x120(0x1)
	char                                                         pad0x7_1MZQQ[0x7];                                 // 0x121(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTypeAI: public ShipType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class XPReward: public Reward
{
public:
	char                                                         pad0x8_CSR33[0x8];                                 // 0x28(0x8)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class ItemCategory: public CategoryBase
{
public:
	class UClass*                                                NotificationInputId;                               // 0x88(0x8)
};


// Size 0x8 (Full Size[0x6c0] - InheritedSize[0x6b8]
class DebugCrewService: public CrewService
{
public:
	char                                                         pad0x8_NRH1M[0x8];                                 // 0x6b8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SceneDialogueSectionRedirect: public SceneDialoguePoint
{
public:
	struct FString                                               SectionNameToGoTo;                                 // 0x28(0x10)
};


// Size 0x78 (Full Size[0x318] - InheritedSize[0x2a0]
class SpotlightMechanismInputComponent: public MountedWeaponAimAndFireInputComponent
{
public:
	class MountableSpotlightMechanism*                           MountableSpotlight;                                // 0x2a0(0x8)
	char                                                         pad0x70_3E79U[0x70];                               // 0x2a8(0x70)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NamedMemoryReservationInformation: public MemoryReservationInformationBase
{
public:
	char                                                         pad0x8_L29L0[0x8];                                 // 0x28(0x8)
	struct FString                                               ReservedMemoryName;                                // 0x30(0x10)
};


// Size 0x50 (Full Size[0x80] - InheritedSize[0x30]
class ReapersTributeShipHandInVoteValidator: public VoteValidatorInlineBase
{
public:
	float                                                        MaxDistanceFromShip;                               // 0x30(0x4)
	char                                                         pad0x4_M6FE8[0x4];                                 // 0x34(0x4)
	class VoteConsumerInlineBase*                                Consumer;                                          // 0x38(0x8)
	class Actor*                                                 OwningActor;                                       // 0x40(0x8)
	char                                                         pad0x38_YRCH1[0x38];                               // 0x48(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCCustomItemPurchaseInterface: public NPCCommerceEventInterface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class MastDescAsset: public ShipPartDescAsset
{
public:
	struct MastDesc                                              MastDesc;                                          // 0x28(0x40)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsOnActiveFortStatCondition: public StatCondition
{
public:
	char                                                         pad0x18_RG6TW[0x18];                               // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdHuntingSpear_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x20 (Full Size[0x400] - InheritedSize[0x3e0]
class ContestSafeRegion: public WorldSafeRegion
{
public:
	class ContestZone*                                           ParentContestZone;                                 // 0x3e0(0x8)
	struct WorldSafeZone                                         ContestSafeZone;                                   // 0x3e8(0x18)
};


// Size 0x20 (Full Size[0x88] - InheritedSize[0x68]
class BTTask_SpawnAndWieldItem: public BTTask_WaitForWieldBase
{
public:
	class UClass*                                                ItemDesc;                                          // 0x68(0x8)
	char                                                         pad0x18_YOSA1[0x18];                               // 0x70(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownChainBucketScoopAndBucketThrowType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnlockedSkeletonCurseStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Idle: public KrakenHeadState
{
public:
};


// Size 0x20 (Full Size[0x80] - InheritedSize[0x60]
class EmergentWatercraftSwitchesDataTypeManager: public SwitchesDataTypeManagerBase
{
public:
	char                                                         pad0x20_W0701[0x20];                               // 0x60(0x20)
};


// Size 0x48 (Full Size[0x98] - InheritedSize[0x50]
class PlayerLoadoutAsset: public LoadoutAsset
{
public:
	struct ClothingLoadout                                       ClothingLoadout;                                   // 0x50(0x30)
	struct PetLoadout                                            PetLoadout;                                        // 0x80(0x18)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsAIShipEventTypeStatCondition: public StatCondition
{
public:
	class UClass*                                                EncounterType;                                     // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimmingCreatureDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RentalShip: public ShipType
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ClothingLoadoutContainsItemRadialContext: public RadialContextBase
{
public:
	class UClass*                                                TargetItem;                                        // 0x28(0x8)
	TArray<class Class*>                                         MustAlsoBeWearing;                                 // 0x30(0x10)
	TArray<class Class*>                                         MustNotBeWearing;                                  // 0x40(0x10)
	bool                                                         MustNotBeMimicked;                                 // 0x50(0x1)
	char                                                         pad0x7_985RR[0x7];                                 // 0x51(0x7)
};


// Size 0x8 (Full Size[0xe8] - InheritedSize[0xe0]
class WaitForAshenLordAIAbilityStartedStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
	class UClass*                                                AIAbilityType;                                     // 0xe0(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BattleElevatorEventRoomMechanismCompletedPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
	TArray<Class>                                                ActorWithMechanismsComponentsToWaitFor;            // 0x28(0x10)
	char                                                         pad0x8_GWZL0[0x8];                                 // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PortableHarpoonDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteVoyageConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ReloadHeldNotificationInputId: public ReloadPressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSmallShotGhostly: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteVoyageOnCaptainedCrewConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class TaleQuestUnionStepDesc: public TaleQuestParallelStepDesc
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class IsNotAllowedInSaferSeasPrerequisite: public InteractionPrerequisiteBase
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class ShantyCategory: public CategoryBase
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class StaticMeshWieldableItem: public WieldableItem
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class NPCDialogHeaderByRank: public NPCDialogHeader
{
public:
	TArray<struct NPCDialogRankGatedText>                        Text;                                              // 0x28(0x10)
	struct FText                                                 DefaultText;                                       // 0x38(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Animal: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FishingConditionStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdAIHuntingSpear_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionProxyItemInfoTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x1f0 (Full Size[0xd08] - InheritedSize[0xb18]
class OnlineAthenaGameMode: public AthenaGameMode
{
public:
	char                                                         pad0x1f0_JPFVX[0x1f0];                             // 0xb18(0x1f0)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionTrackedShipTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AshenLordEncounterServiceParams: public GameEventServiceParams
{
public:
	class AshenLordEncounterParams*                              EncounterParams;                                   // 0x28(0x8)
	float                                                        MinPlayerDistanceToIsland;                         // 0x30(0x4)
	char                                                         pad0x4_YIEO6[0x4];                                 // 0x34(0x4)
	class UClass*                                                AshenLordEncounterClass;                           // 0x38(0x8)
	float                                                        EncounterExclusionRadiusInMetres;                  // 0x40(0x4)
	char                                                         pad0x4_09JCZ[0x4];                                 // 0x44(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdGrenade: public ImpactProjectileId
{
public:
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class TimeOfDayRevealRequirement: public RevealRequirement
{
public:
	struct GameTimeRange                                         RevealTimeRange;                                   // 0x38(0x10)
	char                                                         pad0x10_QV42Y[0x10];                               // 0x48(0x10)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class EmergentAISwitchesDataTypeManager: public SwitchesDataTypeManagerBase
{
public:
	char                                                         pad0x10_55IX2[0x10];                               // 0x60(0x10)
};


// Size 0x0 (Full Size[0x3f0] - InheritedSize[0x3f0]
class TunnelOfTheDamnedPortalShipSpawnLocation: public ShipSpawnLocation
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Fire_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0xb18] - InheritedSize[0xb18]
class TestInventoryAthenaGameMode: public AthenaGameMode
{
public:
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleQuestCommonToolService: public TaleQuestToolService
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HandoverAmmoMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x40 (Full Size[0xc8] - InheritedSize[0x88]
class ClusterSpawnData: public ItemSpawnData
{
public:
	char                                                         pad0x40_JE5I4[0x40];                               // 0x88(0x40)
};


// Size 0xd0 (Full Size[0x218] - InheritedSize[0x148]
class PlayerBuriedItemsMapBundleInteractionComponent: public ActionRulesInteractableComponent
{
public:
	char                                                         pad0x10_QTTGA[0x10];                               // 0x148(0x10)
	struct ActorComponentSelector                                MapBundleMesh;                                     // 0x158(0x10)
	float                                                        PickupHoldTime;                                    // 0x168(0x4)
	float                                                        CombineHoldTime;                                   // 0x16c(0x4)
	float                                                        StealingHoldTime;                                  // 0x170(0x4)
	char                                                         pad0x4_SCFFN[0x4];                                 // 0x174(0x4)
	class UClass*                                                HoldInputId;                                       // 0x178(0x8)
	class UClass*                                                ReleaseInputId;                                    // 0x180(0x8)
	class WwiseEvent*                                            StartStealingSoundEvent;                           // 0x188(0x8)
	class WwiseEvent*                                            StopStealingSoundEvent;                            // 0x190(0x8)
	class WwiseEvent*                                            StartStealingMusicEvent;                           // 0x198(0x8)
	class WwiseEvent*                                            StopStealingMusicEvent;                            // 0x1a0(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x1a8(0x8)
	bool                                                         MapsAvailable;                                     // 0x1b0(0x1)
	char                                                         pad0x3_8NQS0[0x3];                                 // 0x1b1(0x3)
	struct Guid                                                  ShipCrewId;                                        // 0x1b4(0x10)
	char                                                         pad0x54_DSMN7[0x54];                               // 0x1c4(0x54)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class SceneDialogueTextPoint: public SceneDialoguePoint
{
public:
	bool                                                         IsDelay;                                           // 0x28(0x1)
	char                                                         ActorNumber;                                       // 0x29(0x1)
	char                                                         pad0x6_DR8B4[0x6];                                 // 0x2a(0x6)
	struct FText                                                 Text;                                              // 0x30(0x38)
	float                                                        DelayAfter;                                        // 0x68(0x4)
	char                                                         pad0x4_0HUEI[0x4];                                 // 0x6c(0x4)
	class AnimationAsset*                                        Animation;                                         // 0x70(0x8)
	class WwiseEvent*                                            Speech;                                            // 0x78(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RugsPartDescAsset: public ShipPartDescAsset
{
public:
	struct RugsPartDesc                                          RugsPartDesc;                                      // 0x28(0x8)
};


// Size 0x8 (Full Size[0x128] - InheritedSize[0x120]
class SkeletonAudioFootfallControllerParams: public CharacterAudioFootfallControllerParams
{
public:
	class WwiseEvent*                                            SkeletonLayerFootfallEvent;                        // 0x120(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class WaywardTokensReward: public Reward
{
public:
	char                                                         pad0x8_DHN6V[0x8];                                 // 0x28(0x8)
};


// Size 0x10 (Full Size[0x320] - InheritedSize[0x310]
class NPCRegionComponent: public WorldRegionComponent
{
public:
	bool                                                         AnimateAllVisibleNPCsWithinRegion;                 // 0x310(0x1)
	char                                                         pad0xf_5DSCC[0xf];                                 // 0x311(0xf)
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class SkeletalMeshWieldableReplica: public WieldableReplica
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryItemUseReleasedNotificationInputId: public SecondaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFortServiceInterface: public SkeletonFortTrackerServiceInterface
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleQuestEnchantedLanternServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class UClass*                                                EnchantedLanternDesc;                              // 0x30(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FeatureToggleStatCondition: public StatCondition
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class IsWieldingItemCategoryRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         TargetItemCategories;                              // 0x28(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsPirateLegendNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBucketDouseType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x200] - InheritedSize[0x200]
class ShipPreviewCustomizationLoadoutComponent: public ShipCustomizationLoadoutComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FishItemConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenGlobalGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Bottles: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x90 (Full Size[0x120] - InheritedSize[0x90]
class DepartureTunnelDesc: public TunnelDesc
{
public:
	struct StringAssetReference                                  ArrivalTunnelDesc;                                 // 0x90(0x10)
	float                                                        MinimumTunnelDuration;                             // 0xa0(0x4)
	float                                                        PlayerArrivalTimeoutSeconds;                       // 0xa4(0x4)
	float                                                        ShipRespawnTimeoutSeconds;                         // 0xa8(0x4)
	float                                                        MigrationSequenceSeconds;                          // 0xac(0x4)
	TArray<struct ShipCameraAnimation>                           MigrationSequenceCameraAnimation;                  // 0xb0(0x10)
	float                                                        MigrationReadyToMigrationStartDelay;               // 0xc0(0x4)
	char                                                         pad0x4_LUU7G[0x4];                                 // 0xc4(0x4)
	struct FString                                               MatchmakingPlayModeTag;                            // 0xc8(0x10)
	bool                                                         WaitForMatchmakingSequenceToCompleteBeforeMigrating; // 0xd8(0x1)
	char                                                         MigrationShipSailState;                            // 0xd9(0x1)
	bool                                                         TeleportShipAfterMigration;                        // 0xda(0x1)
	char                                                         pad0x5_TBM7W[0x5];                                 // 0xdb(0x5)
	struct StringAssetReference                                  SpawnLocation;                                     // 0xe0(0x10)
	bool                                                         SpawnShipOutsidePortalOnDestinationServer;         // 0xf0(0x1)
	char                                                         pad0x7_GGM8Z[0x7];                                 // 0xf1(0x7)
	TArray<struct DuplicateEmissaryFlagByFeatureToggle>          DuplicateEmissaryFlagByFeatureInPriorityOrder;     // 0xf8(0x10)
	class UClass*                                                ShipTeleportEffectsClass;                          // 0x108(0x8)
	bool                                                         ReturnShipToEnteredTunnelLocationOnCancellation;   // 0x110(0x1)
	char                                                         pad0x3_BLVRH[0x3];                                 // 0x111(0x3)
	float                                                        RequiredDistanceFromOtherShipsWhenRespawningAtEnteredTunnelLocationDueToTunnelFailure; // 0x114(0x4)
	float                                                        RequiredDistanceFromOtherShipsWhenRespawningAtNearestShipSpawnLocationDueToTunnelFailure; // 0x118(0x4)
	char                                                         pad0x4_PNA8E[0x4];                                 // 0x11c(0x4)
};


// Size 0x8 (Full Size[0xf8] - InheritedSize[0xf0]
class MockHitReactionComponent: public HitReactionComponent
{
public:
	bool                                                         CalledServerProcessHitReactionImpl;                // 0xf0(0x1)
	bool                                                         CalledClientProcessHitReactionImpl;                // 0xf1(0x1)
	char                                                         pad0x6_EJVQR[0x6];                                 // 0xf2(0x6)
};


// Size 0x10 (Full Size[0x158] - InheritedSize[0x148]
class VotingInteractionComponentBase: public ActionRulesInteractableComponent
{
public:
	class UClass*                                                HoldInputId;                                       // 0x148(0x8)
	class UClass*                                                ReleaseInputId;                                    // 0x150(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class MapIslandRenderResource: public MapRenderResource
{
public:
	struct FName                                                 IslandName;                                        // 0x28(0x8)
};


// Size 0x18 (Full Size[0x90] - InheritedSize[0x78]
class NPCOnShipManager: public NPCOnSurfaceManager
{
public:
	char                                                         pad0x8_RQB7K[0x8];                                 // 0x78(0x8)
	class Ship*                                                  CurrentCachedCannonsShip;                          // 0x80(0x8)
	class NPCOnShipDataAsset*                                    NPCOnShipDataAsset;                                // 0x88(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsPirateLegendStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class TaleRankDesc: public EntitlementDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_FireRock: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipBattleGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdChainShot: public ImpactProjectileId
{
public:
};


// Size 0xe0 (Full Size[0x5a0] - InheritedSize[0x4c0]
class IslandItemSpawnComponent: public ItemSpawnComponent
{
public:
	float                                                        RespawnTime;                                       // 0x4c0(0x4)
	char                                                         pad0x4_RKE2D[0x4];                                 // 0x4c4(0x4)
	class IslandData*                                            IslandData;                                        // 0x4c8(0x8)
	char                                                         pad0xd0_ZAYM6[0xd0];                               // 0x4d0(0xd0)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ConditionalStatFiredStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x20 (Full Size[0x60] - InheritedSize[0x40]
class MovingWorldMarker: public BaseWorldMarker
{
public:
	char                                                         AttachType;                                        // 0x40(0x1)
	char                                                         pad0x7_JES9U[0x7];                                 // 0x41(0x7)
	class Actor*                                                 TrackedLocationOwner;                              // 0x48(0x8)
	struct Vector_NetQuantize                                    MarkerLocalAttachPosition;                         // 0x50(0xc)
	char                                                         pad0x4_BHQBY[0x4];                                 // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DigItemStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_FishedItem_Comedy: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrapDamagerType: public DamagerType
{
public:
};


// Size 0x50 (Full Size[0x350] - InheritedSize[0x300]
class SkeletonAICharacterAudioComponent: public AICharacterAudioComponent
{
public:
	char                                                         pad0x8_BFGKM[0x8];                                 // 0x300(0x8)
	class SkeletonAICharacterAudioComponentParams*               AICharacterAudioParams;                            // 0x308(0x8)
	bool                                                         ShouldResetEmitterOnDeath;                         // 0x310(0x1)
	char                                                         pad0x7_ZTGYR[0x7];                                 // 0x311(0x7)
	class SkeletonAudioFootfallControllerParams*                 FootfallParams;                                    // 0x318(0x8)
	class UClass*                                                CachedStrategyID;                                  // 0x320(0x8)
	class UClass*                                                CachedWieldedItemCategory;                         // 0x328(0x8)
	char                                                         pad0x20_12HB6[0x20];                               // 0x330(0x20)
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class TaleQuestUnionStep: public TaleQuestParallelStep
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class ShipCustomizationCategory: public CategoryBase
{
public:
};


// Size 0x5d8 (Full Size[0x9a8] - InheritedSize[0x3d0]
class DamageZone: public InteractableBase
{
public:
	char                                                         pad0x38_46JEO[0x38];                               // 0x3d0(0x38)
	float                                                        InteractionPointDepthOffset;                       // 0x408(0x4)
	float                                                        MaximumRepairAngleToRepairer;                      // 0x40c(0x4)
	float                                                        MaximumRepairDistance;                             // 0x410(0x4)
	float                                                        HullFloodedPercentageToShiftWaterSamplingPos;      // 0x414(0x4)
	float                                                        WaterSampleOffsetBelowHullFloodThreshold;          // 0x418(0x4)
	float                                                        WaterSampleOffsetAboveHullFloodThreshold;          // 0x41c(0x4)
	float                                                        InternalWaterHeightDeltaForVFXUpdate;              // 0x420(0x4)
	struct Vector                                                InternalWaterSamplePositionTop;                    // 0x424(0xc)
	struct Vector                                                InternalWaterSamplePositionBottom;                 // 0x430(0xc)
	struct Vector                                                InternalWaterSamplePositionCurrent;                // 0x43c(0xc)
	float                                                        WaterSplashDelayMax;                               // 0x448(0x4)
	float                                                        WaterSplashDelayMin;                               // 0x44c(0x4)
	class SceneComponent*                                        SceneRootComponent;                                // 0x450(0x8)
	class InteractableComponent*                                 InteractionComponent;                              // 0x458(0x8)
	class AdaptiveTriggerComponent*                              AdaptiveTriggerComponent;                          // 0x460(0x8)
	char                                                         LocationOnShip;                                    // 0x468(0x1)
	char                                                         pad0x3_PJWBL[0x3];                                 // 0x469(0x3)
	struct Vector                                                AIInteractionOffset;                               // 0x46c(0xc)
	class UClass*                                                UndoRepairItemDesc;                                // 0x478(0x8)
	struct FText                                                 UndoRepairTooltipText;                             // 0x480(0x38)
	struct FText                                                 UndoRepairInventoryFullTooltipText;                // 0x4b8(0x38)
	struct FText                                                 RemoveSpearTooltipText;                            // 0x4f0(0x38)
	int                                                          MaxStoredHits;                                     // 0x528(0x4)
	struct FName                                                 RepairTag;                                         // 0x52c(0x8)
	struct FName                                                 SpearTag;                                          // 0x534(0x8)
	char                                                         pad0x4_NJSXT[0x4];                                 // 0x53c(0x4)
	struct InternalDamageGroup                                   RepairDamageGroup;                                 // 0x540(0x10)
	struct InternalDamageGroup                                   SpearDamageGroup;                                  // 0x550(0x10)
	char                                                         pad0x8_DAK6P[0x8];                                 // 0x560(0x8)
	TArray<struct LevelOfDamageProperties>                       LevelOfDamageProperties;                           // 0x568(0x10)
	class StaticMeshComponent*                                   LodgedSpearComponent;                              // 0x578(0x8)
	bool                                                         IsUnderExternalWater;                              // 0x580(0x1)
	bool                                                         IsUnderInternalWater;                              // 0x581(0x1)
	char                                                         pad0x6_0A4QT[0x6];                                 // 0x582(0x6)
	class UClass*                                                RepairType;                                        // 0x588(0x8)
	class ForceFeedbackEffect*                                   SpearForceFeedbackEffect;                          // 0x590(0x8)
	struct FName                                                 SpearForceFeedbackTag;                             // 0x598(0x8)
	class ShipInternalWater*                                     InternalWater;                                     // 0x5a0(0x8)
	char                                                         pad0x8_NB422[0x8];                                 // 0x5a8(0x8)
	class DecalComponent*                                        HoleDecalComponent;                                // 0x5b0(0x8)
	class ParticleSystemComponent*                               WaterLeakParticleSystem;                           // 0x5b8(0x8)
	class ParticleSystemComponent*                               WaterLeakParticleSystemRepairing;                  // 0x5c0(0x8)
	class ParticleSystemComponent*                               BubbleLeakParticleSystem;                          // 0x5c8(0x8)
	class ParticleSystemComponent*                               BubbleLeakParticleSystemRepairing;                 // 0x5d0(0x8)
	class ParticleSystemComponent*                               SplashParticleSystem;                              // 0x5d8(0x8)
	class ParticleSystem*                                        InternalHitVfx;                                    // 0x5e0(0x8)
	char                                                         pad0x8_MYPWN[0x8];                                 // 0x5e8(0x8)
	struct WwiseEmitter                                          WaterLeakEmitter;                                  // 0x5f0(0x20)
	class WwiseEvent*                                            WaterLeakSfx_Play;                                 // 0x610(0x8)
	class WwiseEvent*                                            WaterLeakSfx_Stop;                                 // 0x618(0x8)
	class WwiseEvent*                                            WaterLeakRepairSfx_Play;                           // 0x620(0x8)
	class WwiseEvent*                                            WaterLeakRepairSfx_Stop;                           // 0x628(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchGroup;                    // 0x630(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchDefaultAboveWater;        // 0x638(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchUnderwater;               // 0x640(0x8)
	struct FName                                                 LeakDamageSwitchGroup;                             // 0x648(0x8)
	struct FName                                                 WaterLevelRTPC;                                    // 0x650(0x8)
	float                                                        WaterLeakFadeTime;                                 // 0x658(0x4)
	char                                                         pad0x4_NHLCT[0x4];                                 // 0x65c(0x4)
	class WwiseObjectPoolWrapper*                                WaterLeakWisePool;                                 // 0x660(0x8)
	class WwiseEvent*                                            Strain_DamageSfx;                                  // 0x668(0x8)
	class WwiseObjectPoolWrapper*                                StrainDamagePool;                                  // 0x670(0x8)
	class WwiseEvent*                                            StartRemoveSpearSfx;                               // 0x678(0x8)
	class WwiseEvent*                                            StopRemoveSpearSfx;                                // 0x680(0x8)
	class WwiseObjectPoolWrapper*                                SpearLodgedPool;                                   // 0x688(0x8)
	class WwiseEvent*                                            SpearRemovedSfx;                                   // 0x690(0x8)
	char                                                         pad0x20_EYC4V[0x20];                               // 0x698(0x20)
	struct WwiseEmitterCreationParams                            EmitterParams;                                     // 0x6b8(0x28)
	class ParticleSystem*                                        ParticleSystem_RemoveSpearAboveWater;              // 0x6e0(0x8)
	class ParticleSystem*                                        ParticleSystem_RemoveSpearBelowWater;              // 0x6e8(0x8)
	char                                                         pad0x8_A8QAB[0x8];                                 // 0x6f0(0x8)
	TArray<struct HullDamageHit>                                 ExternalHitList;                                   // 0x6f8(0x10)
	TArray<class DecalComponent*>                                DeferredDecals;                                    // 0x708(0x10)
	int                                                          Rep_ServerUpdateEventCount;                        // 0x718(0x4)
	char                                                         pad0x1c_4IS4U[0x1c];                               // 0x71c(0x1c)
	struct AuthorityRepairableState                              AuthorityRepairableState;                          // 0x738(0x18)
	char                                                         pad0x4_WE9S9[0x4];                                 // 0x750(0x4)
	int                                                          DamageLevel;                                       // 0x754(0x4)
	int                                                          RepairedDamageLevel;                               // 0x758(0x4)
	bool                                                         AboutToBlow;                                       // 0x75c(0x1)
	char                                                         pad0x24b_YVZYJ[0x24b];                             // 0x75d(0x24b)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactKnifeMeleeHeavyAttackId: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryItemUseHeldNotificationInputId: public PrimaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BoulderDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DoubleBarrelPistolDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class ShipwreckSiteGeneratorNoneComponent: public ShipwreckSiteGeneratorComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AttachableArmourDestroyedStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x190 (Full Size[0xa10] - InheritedSize[0x880]
class AthenaPlayerCharacterMovementComponent: public AthenaCharacterMovementComponent
{
public:
	char                                                         pad0x10_70G9K[0x10];                               // 0x880(0x10)
	class CurveFloat*                                            LandingSpeedToFallDamageCurve;                     // 0x890(0x8)
	float                                                        MinFallSpeedToPossiblyCauseDamage;                 // 0x898(0x4)
	float                                                        MinTimeBetweenDamagingImpactsOnUnwalkableSurface;  // 0x89c(0x4)
	float                                                        MinFallDamageToBreakLeg;                           // 0x8a0(0x4)
	float                                                        FiredFromActorFallDamageScalar;                    // 0x8a4(0x4)
	float                                                        TimeUntilRecoverFallDamageAudioState;              // 0x8a8(0x4)
	char                                                         pad0x4_AQQ3N[0x4];                                 // 0x8ac(0x4)
	struct Status                                                FallDamageLimpingStatus;                           // 0x8b0(0x20)
	float                                                        SwimmingStateFilterTime;                           // 0x8d0(0x4)
	char                                                         pad0x13c_0I6ZX[0x13c];                             // 0x8d4(0x13c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdEelThrow: public ImpactProjectileId
{
public:
};


// Size 0x68 (Full Size[0x140] - InheritedSize[0xd8]
class NPCDialogOptionGiveItem: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	class UClass*                                                ItemClassToBeGiven;                                // 0x110(0x8)
	int                                                          LinkedDialog;                                      // 0x118(0x4)
	char                                                         pad0x24_M05W0[0x24];                               // 0x11c(0x24)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsShipWithinProximityNPCDialogConditional: public NPCDialogConditional
{
public:
	float                                                        ProximityFromNPC;                                  // 0x30(0x4)
	char                                                         pad0x1c_NW5PA[0x1c];                               // 0x34(0x1c)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionWieldedItemInfoTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class AddItemToCollectorsChestStep: public MutateCollectorsChestStep
{
public:
	class AddItemToCollectorsChestStepDesc*                      Desc;                                              // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_None: public KrakenHeadState
{
public:
};


// Size 0x8 (Full Size[0x2c8] - InheritedSize[0x2c0]
class MeleeAttackProcessorComponentMock: public MeleeAttackProcessorComponent
{
public:
	char                                                         pad0x8_U9L7M[0x8];                                 // 0x2c0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryC: public ShipCategory
{
public:
};


// Size 0x18 (Full Size[0x188] - InheritedSize[0x170]
class TaleQuestCompassService: public TaleQuestToolService
{
public:
	struct EnchantedCompassTarget                                CurrentTarget;                                     // 0x170(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTypeAIPassive: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CargoRunCrateMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x10 (Full Size[0x320] - InheritedSize[0x310]
class SeaRegionComponent: public WorldRegionComponent
{
public:
	class UClass*                                                SeaId;                                             // 0x310(0x8)
	char                                                         pad0x8_9IDYK[0x8];                                 // 0x318(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Totem: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class KillingSwimmingCreaturePawnConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x3a8 (Full Size[0x7c0] - InheritedSize[0x418]
class ClothingChestInteraction: public PossessionsChestInteraction
{
public:
	char                                                         pad0x10_UZRWJ[0x10];                               // 0x418(0x10)
	TArray<struct FeaturedClothingCategory>                      Categories;                                        // 0x428(0x10)
	TArray<struct SpecialisedClothingCategories>                 SpecialisedCategories;                             // 0x438(0x10)
	bool                                                         AllTab;                                            // 0x448(0x1)
	char                                                         pad0x30f_VWZ08[0x30f];                             // 0x449(0x30f)
	struct ClothingLoadout                                       OriginalLoadout;                                   // 0x758(0x30)
	struct ClothingLoadout                                       Loadout;                                           // 0x788(0x30)
	class UClass*                                                CurrentSpecialisedClothingCategory;                // 0x7b8(0x8)
};


// Size 0x28 (Full Size[0x78] - InheritedSize[0x50]
class WorldEventCommands: public InGameCommand
{
public:
	class WorldEventsCommandSettings*                            WorldEventsCommandSettings;                        // 0x50(0x8)
	char                                                         pad0x20_NULID[0x20];                               // 0x58(0x20)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class IslandItemDataAsset: public GeneratedLocationsDataAsset
{
public:
	TArray<struct IslandItemSpawnLocationData>                   SpawnLocations;                                    // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AILargeShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class AthenaGameEngineSettingsXbox: public AthenaGameEngineSettings
{
public:
};


// Size 0x90 (Full Size[0x450] - InheritedSize[0x3c0]
class GenericPartWithMMC: public GenericPart
{
public:
	char                                                         pad0x8_CQUVJ[0x8];                                 // 0x3c0(0x8)
	class StaticMeshMemoryConstraintComponent*                   MeshMemoryConstraintComponent;                     // 0x3c8(0x8)
	class GenericPartDescAsset*                                  DescToSetWhenSafe;                                 // 0x3d0(0x8)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x3d8(0x8)
	char                                                         pad0x70_OJJYQ[0x70];                               // 0x3e0(0x70)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ThrowableAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x10 (Full Size[0x310] - InheritedSize[0x300]
class IGCMFlyingInputComponent: public AthenaCharacterBaseLocomotionInputComponent
{
public:
	float                                                        FlyingSpeedDefault;                                // 0x300(0x4)
	float                                                        FlyingSpeedFast;                                   // 0x304(0x4)
	float                                                        FlyingSpeedSlow;                                   // 0x308(0x4)
	char                                                         pad0x4_2V6RT[0x4];                                 // 0x30c(0x4)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class SpawnCollectableQuestObjectStepFromLocationDesc: public SpawnCollectableQuestObjectStepDesc
{
public:
	struct QuestVariableVector                                   ItemLocation;                                      // 0xb8(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemFirstDroppedByEnemyOnMyShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ShipAnnouncementPartDescAsset: public ShipPartDescAsset
{
public:
	struct ShipAnnouncementPartDesc                              ShipAnnouncementPartDesc;                          // 0x28(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Key_Traditional: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsCaptainNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x0 (Full Size[0x920] - InheritedSize[0x920]
class BlendedPostProcessingRainZoneComponent: public BlendedPostProcessingZoneComponentBase
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TargetedStatCondition: public StatCondition
{
public:
	class StatConditionTargetSelector*                           TargetSelector;                                    // 0x28(0x8)
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class QuestBookItemInfo: public ItemInfo
{
public:
};


// Size 0x80 (Full Size[0xb0] - InheritedSize[0x30]
class TaleQuestDescAsset: public QuestDescDataAsset
{
public:
	class TaleQuestStepDesc*                                     Root;                                              // 0x30(0x8)
	TArray<class UserDefinedStruct*>                             Linkage;                                           // 0x38(0x10)
	TArray<struct TaleQuestToggledDefinition>                    ToggledDefinitions;                                // 0x48(0x10)
	class UClass*                                                Definition;                                        // 0x58(0x8)
	class UClass*                                                DevDefinition;                                     // 0x60(0x8)
	struct FText                                                 TaleFailMessage;                                   // 0x68(0x38)
	struct FName                                                 TaleFailBannerTag;                                 // 0xa0(0x8)
	bool                                                         ShouldFireStartTallTaleTrackedObjective;           // 0xa8(0x1)
	char                                                         pad0x7_6T9BU[0x7];                                 // 0xa9(0x7)
};


// Size 0x28 (Full Size[0x560] - InheritedSize[0x538]
class PortalSignalCutSceneActor: public SequencerCutSceneActor
{
public:
	char                                                         pad0x28_9OAQ3[0x28];                               // 0x538(0x28)
};


// Size 0x0 (Full Size[0x150] - InheritedSize[0x150]
class PlayerShroudBreakerTrackerComponent: public ShroudBreakerTrackerComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterGunDamagerType: public DamagerType
{
public:
};


// Size 0x28 (Full Size[0x100] - InheritedSize[0xd8]
class PledgeToReapersVoteAudioComponent: public VoteAudioComponent
{
public:
	char                                                         pad0x28_9XX3A[0x28];                               // 0xd8(0x28)
};


// Size 0x58 (Full Size[0x118] - InheritedSize[0xc0]
class WaitForAshenLordVulnerabilityEndStep: public WaitForAshenLordPawnBaseStep
{
public:
	char                                                         pad0x58_A111U[0x58];                               // 0xc0(0x58)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemFirstDroppedByMeOnOtherShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NPCDialogUnaryExpression: public NPCDialogExpression
{
public:
	class NPCDialogExpression*                                   Child;                                             // 0x28(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class KillBoneCallerPawnStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x40 (Full Size[0x90] - InheritedSize[0x50]
class ShipCommands: public InGameCommand
{
public:
	char                                                         pad0x18_24FLR[0x18];                               // 0x50(0x18)
	class ShipCommandSettings*                                   ShipCommandSettings;                               // 0x68(0x8)
	class EnvQuery*                                              RowboatSpawnLocationEQSQuery;                      // 0x70(0x8)
	TArray<struct RowboatSpawnSettings>                          RowboatSpawnSettings;                              // 0x78(0x10)
	char                                                         pad0x8_G5Z5F[0x8];                                 // 0x88(0x8)
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class WaitForAshenLordVulnerabilityStartStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
};


// Size 0x38 (Full Size[0x68] - InheritedSize[0x30]
class BackRadialAction: public RadialAction
{
public:
	struct FText                                                 BackActionName;                                    // 0x30(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingDisorientate: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x20 (Full Size[0x348] - InheritedSize[0x328]
class RestrictedInteractionInputComponent: public InteractionInputComponent
{
public:
	TArray<class Class*>                                         AllowedInteractableTypes;                          // 0x328(0x10)
	TArray<class Class*>                                         AllowedInteractionNotificationInputIds;            // 0x338(0x10)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class NullEntitlementDesc: public EntitlementDesc
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class EquippedWithItemStatCondition: public StatCondition
{
public:
	struct ItemRequirementData                                   RequiredItemsData;                                 // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CursedChest_Rage: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x8 (Full Size[0x260] - InheritedSize[0x258]
class SmugglersRunCrateComponent: public CargoRunCrateComponent
{
public:
	bool                                                         ShouldAlwaysGiveOnTimeRewards;                     // 0x258(0x1)
	char                                                         pad0x7_ZKDXN[0x7];                                 // 0x259(0x7)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class SectionFullyExhaustedConditional: public NPCDialogConditional
{
public:
	struct FString                                               SectionName;                                       // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneType_Default: public WaterModifierZoneType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Bait: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MapTextureRenderResource: public MapRenderResource
{
public:
	struct StringAssetReference                                  Texture;                                           // 0x28(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class BookTaleQuestServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class UClass*                                                QuestBookDesc;                                     // 0x30(0x8)
	class UClass*                                                RemapperClass;                                     // 0x38(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerEnteredPirateLegendHideoutConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x58 (Full Size[0x3f0] - InheritedSize[0x398]
class CoherentUIGTAtlasComponent: public CoherentUIGTInstancedComponent
{
public:
	char                                                         pad0x18_7OZ8O[0x18];                               // 0x398(0x18)
	class Canvas*                                                CurrentCanvas;                                     // 0x3b0(0x8)
	char                                                         pad0x38_PEFZ0[0x38];                               // 0x3b8(0x38)
};


// Size 0x10 (Full Size[0x158] - InheritedSize[0x148]
class CapstanMechanismTriggerComponent: public MechanismTriggerComponent
{
public:
	char                                                         pad0x10_N6YX0[0x10];                               // 0x148(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class GoldReward: public Reward
{
public:
	char                                                         pad0x8_ABHFN[0x8];                                 // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SirenStatuesSelector_BasedOnShipSize: public SirenStatuesSelector
{
public:
	TArray<struct SirenStatuesSelector_BasedOnShipSize_Entry>    Entries;                                           // 0x28(0x10)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class SwitchMechanismTriggerProxy: public MechanismElementProxy
{
public:
	bool                                                         SyncToConnectedActionStateOnChange;                // 0x3c8(0x1)
	bool                                                         DisableWhenActivated;                              // 0x3c9(0x1)
	bool                                                         AutoDeactivateAfterActivation;                     // 0x3ca(0x1)
	char                                                         pad0x1_3JLEM[0x1];                                 // 0x3cb(0x1)
	float                                                        TimeAfterActivationBeforeAutoDeactivating;         // 0x3cc(0x4)
	bool                                                         SelectRandomStartPositionOnSpawn;                  // 0x3d0(0x1)
	char                                                         RandomStartPositionSelectionMode;                  // 0x3d1(0x1)
	char                                                         SwitchMechanismTriggerRotationMode;                // 0x3d2(0x1)
	bool                                                         WrapSwitchAtEndPosition;                           // 0x3d3(0x1)
	int                                                          FixedStartPositionIndex;                           // 0x3d4(0x4)
	struct MechanismFloatAnimationCurve                          PositionTransitionAnimationCurve;                  // 0x3d8(0x8)
	TArray<struct SwitchMechanismTriggerPosition>                Positions;                                         // 0x3e0(0x10)
	class UClass*                                                MaterialGroup;                                     // 0x3f0(0x8)
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class CanStartTallTalePrerequisite: public InteractionPrerequisiteBase
{
public:
	struct FName                                                 TallTaleCampaignId;                                // 0x90(0x8)
};


// Size 0x28 (Full Size[0x160] - InheritedSize[0x138]
class GiveVoyageOnWieldItemComponent: public OnItemWieldedComponent
{
public:
	char                                                         pad0x18_RB6L6[0x18];                               // 0x138(0x18)
	class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0x150(0x8)
	char                                                         SourceType;                                        // 0x158(0x1)
	char                                                         pad0x7_KBREP[0x7];                                 // 0x159(0x7)
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class SaferSeasRequirement: public SpawnRequirement
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class OnDigFirePopUpNotification: public OnDigStrategy
{
public:
	struct StringAssetReference                                  Notification;                                      // 0x28(0x10)
};


// Size 0x8 (Full Size[0x3e8] - InheritedSize[0x3e0]
class ProgressSpawnLocation: public SpawnLocation
{
public:
	class UClass*                                                ProgressId;                                        // 0x3e0(0x8)
};


// Size 0x0 (Full Size[0x458] - InheritedSize[0x458]
class MastEmissaryFlag: public EmissaryFlag
{
public:
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WieldableBookDoublePageLayout: public WieldableBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HitReactingActorWithCannonConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HangingDistanceConditionalStatsTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class SeaFortState_AdventureAlignment: public SeaFortStateBase
{
public:
	struct AdventureFortAllignmentState                          BelleAlignment;                                    // 0x48(0x8)
	struct AdventureFortAllignmentState                          SotFAlignment;                                     // 0x50(0x8)
	class SeaFortDataAsset*                                      CachedOriginalFortData;                            // 0x58(0x8)
	char                                                         pad0x18_FQ46M[0x18];                               // 0x60(0x18)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionGiveReward: public NPCDialogOption
{
public:
	struct FText                                                 Text;                                              // 0xd8(0x38)
	struct RewardId                                              RewardId;                                          // 0x110(0x8)
	class UClass*                                                Company;                                           // 0x118(0x8)
	int                                                          LinkedDialog;                                      // 0x120(0x4)
	char                                                         pad0x4_RZB3H[0x4];                                 // 0x124(0x4)
};


// Size 0x60 (Full Size[0xa8] - InheritedSize[0x48]
class SeatStat_SitWithOthers: public SeatStat
{
public:
	int                                                          PlayersSittingToFireStat;                          // 0x48(0x4)
	char                                                         pad0x5c_SAFP8[0x5c];                               // 0x4c(0x5c)
};


// Size 0x20 (Full Size[0x690] - InheritedSize[0x670]
class WieldableFishingRodAnimationInstance: public WieldableItemAnimationInstance
{
public:
	float                                                        ReelSpeed;                                         // 0x668(0x4)
	struct Vector2D                                              RodBend;                                           // 0x66c(0x8)
	char                                                         pad0x4_FJZ4X[0x4];                                 // 0x674(0x4)
	class BlendSpace*                                            RodBendAnimation;                                  // 0x678(0x8)
	class AnimSequence*                                          ReelAnimation;                                     // 0x680(0x8)
	char                                                         CurrentFishingState;                               // 0x688(0x1)
	bool                                                         IsFishHookedAndVisible;                            // 0x689(0x1)
	char                                                         CurrentFishingJIPState;                            // 0x68a(0x1)
	char                                                         pad0x5_VSTSQ[0x5];                                 // 0x68b(0x5)
};


// Size 0x0 (Full Size[0x188] - InheritedSize[0x188]
class AthenaCharacterKnockbackComponentMock: public AthenaCharacterKnockbackComponent
{
public:
};


// Size 0xf8 (Full Size[0x4c8] - InheritedSize[0x3d0]
class Door: public InteractableBase
{
public:
	char                                                         pad0x8_94K7B[0x8];                                 // 0x3d0(0x8)
	float                                                        AmountDoorOpens;                                   // 0x3d8(0x4)
	float                                                        DoorOpeningSpeed;                                  // 0x3dc(0x4)
	float                                                        DoorClosingSpeed;                                  // 0x3e0(0x4)
	char                                                         pad0x4_V01SP[0x4];                                 // 0x3e4(0x4)
	class SceneComponent*                                        Root;                                              // 0x3e8(0x8)
	class StaticMeshComponent*                                   DoorMesh;                                          // 0x3f0(0x8)
	TArray<struct LandmarkReactionKeyFrame>                      LandmarkReactionsWhenDoorOpens;                    // 0x3f8(0x10)
	TArray<struct LandmarkReactionKeyFrame>                      LandmarkReactionsWhenDoorCloses;                   // 0x408(0x10)
	class LandmarkReactionPlayer*                                LandmarkReactionPlayer;                            // 0x418(0x8)
	class InteractableComponent*                                 InteractionRegion;                                 // 0x420(0x8)
	char                                                         pad0xa0_ETC2T[0xa0];                               // 0x428(0xa0)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsPlayingOnSaferSeasServerNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RadialBlurItemActionEffect: public ItemActionEffect
{
public:
	class MaterialInterface*                                     MaterialInstance;                                  // 0x28(0x8)
};


// Size 0x18 (Full Size[0x2a8] - InheritedSize[0x290]
class BalanceableWalkwayInputComponent: public LookAtOffsetInputComponent
{
public:
	char                                                         pad0x18_Z35TI[0x18];                               // 0x290(0x18)
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class PressurePlateMechanismTriggerProxy: public MechanismElementProxy
{
public:
	bool                                                         DisableAfterActivation;                            // 0x3c8(0x1)
	bool                                                         AutoEnableAfterDisable;                            // 0x3c9(0x1)
	char                                                         pad0x2_AD3RW[0x2];                                 // 0x3ca(0x2)
	float                                                        TimeAfterDisableBeforeAutoEnable;                  // 0x3cc(0x4)
	float                                                        DelayBeforeActivation;                             // 0x3d0(0x4)
	char                                                         pad0x4_W8HS0[0x4];                                 // 0x3d4(0x4)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x3d8(0x10)
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class CutscenePoolTypeSingleUseRandom: public CutscenePoolType
{
public:
};


// Size 0x0 (Full Size[0xa00] - InheritedSize[0xa00]
class IntentBasedContinuousAnimatedMechanismAction: public BaseContinuousAnimatedMechanismAction
{
public:
	class IntentBasedMechanismActionComponent*                   IntentBasedMechanismActionComponent;               // 0x9f8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GeyserDamagerType: public DamagerType
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StandardHullDragDynamicsDesc: public BaseHullDragDynamicsDesc
{
public:
	class CurveFloat*                                            WaterDragScalarIfAllSailsUp;                       // 0x28(0x8)
	class CurveFloat*                                            WaterDragScalarIfInReef;                           // 0x30(0x8)
	struct StandardHullDragDynamicsParameters                    Parameters;                                        // 0x38(0x18)
};


// Size 0x88 (Full Size[0x588] - InheritedSize[0x500]
class OneShotAnimatedMechanismAction: public AnimatedMechanismAction
{
public:
	class SceneComponent*                                        Root;                                              // 0x500(0x8)
	class SceneComponent*                                        Pivot;                                             // 0x508(0x8)
	struct MechanismTransformAnimationCurve                      Animation;                                         // 0x510(0x8)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x518(0x8)
	struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x520(0x60)
	char                                                         pad0x8_3G81T[0x8];                                 // 0x580(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ReloadReleasedNotificationInputId: public ReloadPressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class PetEntitlementBaseDesc: public EntitlementDesc
{
public:
};


// Size 0x0 (Full Size[0x138] - InheritedSize[0x138]
class ObtainMapPieceOnWieldComponent: public OnItemWieldedComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Fire: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snake_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsGuildShipNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BootyItemInfoMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x10 (Full Size[0x1f0] - InheritedSize[0x1e0]
class TaleQuestAssignVaultWithFallbackKeysStepDesc: public TaleQuestAssignVaultStepDesc
{
public:
	TArray<class Class*>                                         FallbackKeys;                                      // 0x1e0(0x10)
};


// Size 0x70 (Full Size[0x418] - InheritedSize[0x3a8]
class AlwaysRelevantLightweightPlayerNameplate: public AlwaysRelevantLightweightActor
{
public:
	char                                                         pad0x20_QPHMR[0x20];                               // 0x3a8(0x20)
	class AlwaysRelevantPlayerNameplateComponent*                PlayerNameplateComponent;                          // 0x3c8(0x8)
	struct Guid                                                  OwnedActorsCrewId;                                 // 0x3d0(0x10)
	char                                                         pad0x28_D17S9[0x28];                               // 0x3e0(0x28)
	class AthenaPlayerState*                                     PlayerStatePtr;                                    // 0x408(0x8)
	bool                                                         IsOwnerInert;                                      // 0x410(0x1)
	char                                                         pad0x7_V47XD[0x7];                                 // 0x411(0x7)
};


// Size 0x70 (Full Size[0x9f0] - InheritedSize[0x980]
class SharkPawn: public SwimmingCreaturePawn
{
public:
	char                                                         pad0x28_DR5SP[0x28];                               // 0x980(0x28)
	class RammerComponent*                                       RammerComponent;                                   // 0x9a8(0x8)
	class SharkAICharacterAudioComponent*                        SharkAudioComponent;                               // 0x9b0(0x8)
	bool                                                         AllowTestForQuickDeath;                            // 0x9b8(0x1)
	char                                                         pad0x3_YN852[0x3];                                 // 0x9b9(0x3)
	float                                                        DistanceToGroundForQuickDeath;                     // 0x9bc(0x4)
	char                                                         DistanceToGroundTestTraceChannel;                  // 0x9c0(0x1)
	char                                                         pad0x3_OWKGY[0x3];                                 // 0x9c1(0x3)
	float                                                        CheckIntervalForQuickDeath;                        // 0x9c4(0x4)
	struct CollisionProfileName                                  CollisionComponentServerProfile;                   // 0x9cc(0x8)
	struct CollisionProfileName                                  CollisionComponentClientProfile;                   // 0x9d4(0x8)
	char                                                         pad0x14_PPTGQ[0x14];                               // 0x9dc(0x14)
};


// Size 0xb0 (Full Size[0x218] - InheritedSize[0x168]
class IntentBasedMechanismActionComponent: public MechanismActionComponent
{
public:
	float                                                        InitialActionProgress;                             // 0x168(0x4)
	float                                                        MaxPositiveMovementSpeedDueToPlayer;               // 0x16c(0x4)
	float                                                        MaxNegativeMovementSpeedDueToPlayer;               // 0x170(0x4)
	float                                                        PositiveAccelerationDueToPlayerIntent;             // 0x174(0x4)
	float                                                        NegativeAccelerationDueToPlayerIntent;             // 0x178(0x4)
	bool                                                         InvertControlls;                                   // 0x17c(0x1)
	bool                                                         EnableCircularActionProgress;                      // 0x17d(0x1)
	char                                                         pad0x2_G7P4U[0x2];                                 // 0x17e(0x2)
	float                                                        MinActionProgress;                                 // 0x180(0x4)
	float                                                        MaxActionProgress;                                 // 0x184(0x4)
	bool                                                         GravityEnabled;                                    // 0x188(0x1)
	char                                                         pad0x3_MQW1I[0x3];                                 // 0x189(0x3)
	float                                                        MaxNegativeMovementSpeedDueToGravity;              // 0x18c(0x4)
	float                                                        NegativeAccelerationDueToGravity;                  // 0x190(0x4)
	bool                                                         ProgressLockingEnabled;                            // 0x194(0x1)
	bool                                                         LockProgressWhenPlayerIntentBecomesZero;           // 0x195(0x1)
	char                                                         pad0x2_FCGT7[0x2];                                 // 0x196(0x2)
	float                                                        ProgressLockValue;                                 // 0x198(0x4)
	float                                                        UpperPlayerIntentUnlockThreshold;                  // 0x19c(0x4)
	float                                                        LowerPlayerIntentUnlockThreshold;                  // 0x1a0(0x4)
	bool                                                         UseAutoUnlockTimer;                                // 0x1a4(0x1)
	char                                                         pad0x3_DVL28[0x3];                                 // 0x1a5(0x3)
	float                                                        TimeUntilAutoUnlock;                               // 0x1a8(0x4)
	struct IntentPredictor                                       ClientPrediction;                                  // 0x1ac(0x1c)
	bool                                                         ResetToInitial;                                    // 0x1c8(0x1)
	bool                                                         ForceClientToUseServerActionProgress;              // 0x1c9(0x1)
	bool                                                         ServerActionProgressIsLocked;                      // 0x1ca(0x1)
	char                                                         pad0x1_F60HH[0x1];                                 // 0x1cb(0x1)
	float                                                        ServerActionProgress;                              // 0x1cc(0x4)
	char                                                         pad0x48_37BJT[0x48];                               // 0x1d0(0x48)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HasRanksNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         RequiredRanks;                                     // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Passive_Thrown: public ImpactProjectileId
{
public:
};


// Size 0xe0 (Full Size[0x128] - InheritedSize[0x48]
class AshenLordEncounterParams: public GameEventParams
{
public:
	class AISpawner*                                             AshenLordSpawner;                                  // 0x48(0x8)
	class AIDioramaDesc*                                         AshenLordDioramaDesc;                              // 0x70(0x8)
	TArray<class Class*>                                         AshenLordMusicZones;                               // 0x78(0x10)
	float                                                        DelayFromPlayerSpottedToRitualEnd;                 // 0x88(0x4)
	float                                                        AshenLordSpawnerProximityPlayerTrackerDistanceScalar; // 0x8c(0x4)
	TArray<class AshenLordDesc*>                                 AllAshenLordDescs;                                 // 0x90(0x10)
	TArray<class Class*>                                         RandomlySpawnableAshenLords;                       // 0xa0(0x10)
	float                                                        EventSignalHeightOffset;                           // 0xd0(0x4)
	struct EncounterParams                                       SightingEncounterParams;                           // 0xd4(0xc)
	struct EncounterParams                                       CloseEncounterParams;                              // 0xe0(0xc)
	char                                                         pad0x4_FGCP0[0x4];                                 // 0xec(0x4)
	class GeyserManagerSetupDataAsset*                           RewardsGeyserManagerParams;                        // 0xf0(0x8)
	class EnvQuery*                                              RewardLocationEnvironmentQuery;                    // 0xf8(0x8)
	float                                                        EmergentMinRewardLocationRadiusEnvironmentQueryParam; // 0x100(0x4)
	float                                                        OnDemandMinRewardLocationRadiusEnvironmentQueryParam; // 0x104(0x4)
	float                                                        MinDistanceBetweenRewardLocations;                 // 0x108(0x4)
	float                                                        FallbackEncounterCompletionDurationSeconds;        // 0x10c(0x4)
	bool                                                         FireEmissaryStatsOnFinished;                       // 0x110(0x1)
	char                                                         pad0x7_FEC6I[0x7];                                 // 0x111(0x7)
	class GameEventBannerDataAsset*                              EncounterEnteredBanner;                            // 0x118(0x8)
	class GameEventBannerDataAsset*                              EncounterCompleteBanner;                           // 0x120(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionObjectTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x0 (Full Size[0x430] - InheritedSize[0x430]
class PlayerWieldedItemComponent: public WieldedItemComponent
{
public:
};


// Size 0x0 (Full Size[0x4d8] - InheritedSize[0x4d8]
class NetworkClusterEventRoom: public EventRoom
{
public:
};


// Size 0x0 (Full Size[0x50] - InheritedSize[0x50]
class SessionManagementCommands: public InGameCommand
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CommoditySourceMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x70 (Full Size[0x488] - InheritedSize[0x418]
class EquipmentChestInteraction: public PossessionsChestInteraction
{
public:
	TArray<class Class*>                                         Categories;                                        // 0x418(0x10)
	bool                                                         AllTab;                                            // 0x428(0x1)
	char                                                         pad0x5f_5MNTZ[0x5f];                               // 0x429(0x5f)
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class PirateLegendCategory: public CategoryBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Idle: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsInAllianceStatCondition: public StatCondition
{
public:
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventStopParticleSystem: public LandmarkReactionEvent
{
public:
	struct FName                                                 ComponentName;                                     // 0x58(0x8)
	int                                                          ComponentIndex;                                    // 0x60(0x4)
	char                                                         pad0x4_LJ3QL[0x4];                                 // 0x64(0x4)
	class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x58 (Full Size[0x430] - InheritedSize[0x3d8]
class ShovelHole: public Hole
{
public:
	struct FName                                                 ParallaxParameterName;                             // 0x3d8(0x8)
	class DecalComponent*                                        Decal;                                             // 0x3e0(0x8)
	float                                                        ParallaxValue;                                     // 0x3e8(0x4)
	char                                                         pad0x4_OBE0D[0x4];                                 // 0x3ec(0x4)
	class Actor*                                                 ContainedActor;                                    // 0x3f0(0x8)
	char                                                         pad0x20_J5BNM[0x20];                               // 0x3f8(0x20)
	class DiggingComponent*                                      DiggingComponent;                                  // 0x418(0x8)
	char                                                         pad0x8_KSW7O[0x8];                                 // 0x420(0x8)
	class UClass*                                                StatTriggerForDiggingItems;                        // 0x428(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class EntitlementReward: public Reward
{
public:
	class UClass*                                                EntitlementDesc;                                   // 0x28(0x8)
};


// Size 0xa8 (Full Size[0x120] - InheritedSize[0x78]
class ItemRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_55NBX[0x58];                               // 0x78(0x58)
	float                                                        RadialIconScale;                                   // 0xd0(0x4)
	struct Vector2D                                              RadialIconOffset;                                  // 0xd4(0x8)
	char                                                         pad0x4_P3UBK[0x4];                                 // 0xdc(0x4)
	class InventoryItemCategoryToSlotRemappingAsset*             RemappingAsset;                                    // 0xe0(0x8)
	TArray<class ItemInfo*>                                      RemappedSlots;                                     // 0xe8(0x10)
	char                                                         pad0x28_UIJ53[0x28];                               // 0xf8(0x28)
};


// Size 0x100 (Full Size[0x990] - InheritedSize[0x890]
class SinkingTunnelOfTheDamned: public DepartureTunnelOfTheDamned
{
public:
	char                                                         pad0x18_HME6M[0x18];                               // 0x890(0x18)
	class ExhaustibleTeleportLocationRetrievalComponent*         TeleportLocationRetrievalComponent;                // 0x8a8(0x8)
	struct Rotator                                               ShipOrientation;                                   // 0x8b0(0xc)
	char                                                         pad0xc8_NJ2YI[0xc8];                               // 0x8bc(0xc8)
	struct CrewInTunnel                                          CrewInTunnel;                                      // 0x984(0xc)
};


// Size 0x70 (Full Size[0x860] - InheritedSize[0x7f0]
class TreasureMap: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x18_TT7MF[0x18];                               // 0x7f0(0x18)
	class WieldableItemCanvasRenderingComponent*                 WieldableCanvasRenderingComponent;                 // 0x808(0x8)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x810(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x818(0x8)
	class ZoomInOnWieldableItemComponent*                        ZoomInOnWieldableComponent;                        // 0x820(0x8)
	char                                                         pad0x29_91NT6[0x29];                               // 0x828(0x29)
	char                                                         QuestMapIcon;                                      // 0x851(0x1)
	char                                                         pad0xe_K2CGB[0xe];                                 // 0x852(0xe)
};


// Size 0x0 (Full Size[0xb20] - InheritedSize[0xb20]
class TestAthenaGameModeWithHUD: public TestAthenaGameMode
{
public:
};


// Size 0x60 (Full Size[0x490] - InheritedSize[0x430]
class LootHole: public ShovelHole
{
public:
	char                                                         pad0x8_75YV6[0x8];                                 // 0x430(0x8)
	int                                                          NumberOfTimesToBury;                               // 0x438(0x4)
	char                                                         pad0x4_7K1NG[0x4];                                 // 0x43c(0x4)
	class Actor*                                                 ActorThatIsDug;                                    // 0x440(0x8)
	char                                                         pad0x48_ZS5DC[0x48];                               // 0x448(0x48)
};


// Size 0x100 (Full Size[0x8f0] - InheritedSize[0x7f0]
class Spyglass: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x10_1OR98[0x10];                               // 0x7f0(0x10)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x800(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x808(0x8)
	class AimSensitivityComponent*                               AimSensitivityComponent;                           // 0x810(0x8)
	char                                                         pad0x10_JLSCQ[0x10];                               // 0x818(0x10)
	float                                                        NameplateVisibilityRangeExtensionFactorWhileZoomed; // 0x828(0x4)
	float                                                        SecondsUntilZoomStarts;                            // 0x82c(0x4)
	float                                                        SecondsUntilPostStarts;                            // 0x830(0x4)
	float                                                        InAimFOV;                                          // 0x834(0x4)
	float                                                        BlendSpeed;                                        // 0x838(0x4)
	char                                                         pad0x4_RPY4K[0x4];                                 // 0x83c(0x4)
	class CurveFloat*                                            InAimFOVScalarMultiplierCurve;                     // 0x840(0x8)
	struct ItemUseSpeedParams                                    AimSpeedScaleParameters;                           // 0x848(0x8)
	class PostProcessComponent*                                  PostProcessComponent;                              // 0x850(0x8)
	class CurveFloat*                                            BlurCurve;                                         // 0x858(0x8)
	bool                                                         TurningOn;                                         // 0x860(0x1)
	char                                                         pad0x3_FG91J[0x3];                                 // 0x861(0x3)
	float                                                        BlurTime;                                          // 0x864(0x4)
	float                                                        BlurInDuration;                                    // 0x868(0x4)
	float                                                        BlurOutDuration;                                   // 0x86c(0x4)
	char                                                         pad0x38_3Z02B[0x38];                               // 0x870(0x38)
	class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0x8a8(0x8)
	class StaticMeshComponent*                                   Glint;                                             // 0x8b0(0x8)
	class Material*                                              MaterialParent;                                    // 0x8b8(0x8)
	class Texture2D*                                             LensNormal;                                        // 0x8c0(0x8)
	class Texture2D*                                             LensMask;                                          // 0x8c8(0x8)
	struct LinearColor                                           LensTint;                                          // 0x8d0(0x10)
	char                                                         pad0x10_YMO21[0x10];                               // 0x8e0(0x10)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsTargetBootyAllegianceAwardStatCondition: public TargetedStatCondition
{
public:
	class UClass*                                                TargetAllegiance;                                  // 0x30(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ArrivalRespawnTunnelDesc: public ArrivalTunnelDesc
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateAtDamageTaken: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	float                                                        DamageThreshold;                                   // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class BTTask_SpawnAmmoItemForAI: public BTTask_SpawnAndWieldItem
{
public:
};


// Size 0x180 (Full Size[0x6c0] - InheritedSize[0x540]
class TimedDoorMechanismAction: public BaseToggleAnimatedMechanismAction
{
public:
	char                                                         pad0x8_CR8VF[0x8];                                 // 0x540(0x8)
	TArray<struct CrewSizeToCloseDelayDurationInfo>              CrewSizeToCloseDelayDurationByVaultKeyType;        // 0x548(0x10)
	float                                                        CloseDelayInsertTime;                              // 0x558(0x4)
	char                                                         pad0x4_CSJ7Y[0x4];                                 // 0x55c(0x4)
	TArray<struct KeySequence>                                   KeySequences;                                      // 0x560(0x10)
	class MechanismTriggerComponent*                             InternalTrigger;                                   // 0x570(0x8)
	bool                                                         UseSameLandmarkEventsForAllJammedPhases;           // 0x578(0x1)
	bool                                                         UseSameLandmarkEventsForAllLoweringPhases;         // 0x579(0x1)
	char                                                         pad0x6_CWXL0[0x6];                                 // 0x57a(0x6)
	struct TimedDoorLandmarkReactions                            LandmarkReactionsWhenDoorOpens;                    // 0x580(0x10)
	TArray<struct TimedDoorLandmarkReactions>                    LandmarkReactionsWhenDoorLowers;                   // 0x590(0x10)
	TArray<struct TimedDoorLandmarkReactions>                    LandmarkReactionsWhenDoorJams;                     // 0x5a0(0x10)
	class LandmarkReactionPlayer*                                LandmarkReactionPlayer;                            // 0x5b0(0x8)
	char                                                         pad0x30_JLGA2[0x30];                               // 0x5b8(0x30)
	struct CurrentKeyDescInfo                                    CurrentKeyDesc;                                    // 0x5e8(0x10)
	struct TimedDoorState                                        ServerDoorState;                                   // 0x5f8(0xc)
	char                                                         pad0x4_QC02I[0x4];                                 // 0x604(0x4)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x608(0xa0)
	class MechanismAnimationCurve_Transform*                     ModifiedAnimationCurve;                            // 0x6a8(0x8)
	TArray<struct TimedDoorLandmarkReactions>                    ModifiedLandmarkReactionsWhenDoorLowers;           // 0x6b0(0x10)
};


// Size 0x360 (Full Size[0xb50] - InheritedSize[0x7f0]
class MeleeWeapon: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x10_YWAZW[0x10];                               // 0x7f0(0x10)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x800(0x8)
	class ParticleSystemComponent*                               TrailParticleSystem_FP;                            // 0x808(0x8)
	class ParticleSystemComponent*                               TrailParticleSystem_TP;                            // 0x810(0x8)
	class MeleeWeaponDataAsset*                                  DataAsset;                                         // 0x818(0x8)
	class InventoryManipulatorComponent*                         InventoryManipulator;                              // 0x820(0x8)
	bool                                                         CanUseWeaponToBlock;                               // 0x828(0x1)
	bool                                                         PreventCombosOnHealthChange;                       // 0x829(0x1)
	char                                                         pad0x76_FGM1S[0x76];                               // 0x82a(0x76)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0x8a0(0x4)
	float                                                        MaxAcceptableAttackLocationDelta;                  // 0x8a4(0x4)
	float                                                        MaxAcceptableAttackLocationOnShipDelta;            // 0x8a8(0x4)
	float                                                        MaxAcceptableAttackShipVelocityForLocation;        // 0x8ac(0x4)
	char                                                         pad0x10_3ANNK[0x10];                               // 0x8b0(0x10)
	class MeleeAttackProcessorComponent*                         WieldersAttackProcessor;                           // 0x8c0(0x8)
	char                                                         pad0x288_0HL3M[0x288];                             // 0x8c8(0x288)
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class MermaidInteractionProxy: public ModalInteractionProxy
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISmugglerShipPassiveGameEventType: public AIShipPassiveGameEventType
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class LargeStaticMeshWieldableItem: public StaticMeshWieldableItem
{
public:
};


// Size 0xb0 (Full Size[0x650] - InheritedSize[0x5a0]
class SalvageItemSpawnComponent: public IslandItemSpawnComponent
{
public:
	TArray<struct IslandItemSpawnLocationData>                   IslandSalvageLocationData;                         // 0x598(0x10)
	char                                                         pad0x3c_UGXZD[0x3c];                               // 0x5a8(0x3c)
	float                                                        GlobalIslandChanceToSpawn;                         // 0x5e4(0x4)
	TArray<struct GlobalIslandChanceToSpawnOverride>             GlobalIslandChanceToSpawnOverrides;                // 0x5e8(0x10)
	float                                                        MinimumZOffSet;                                    // 0x5f8(0x4)
	float                                                        MaximumZOffset;                                    // 0x5fc(0x4)
	float                                                        MinimumRoll;                                       // 0x600(0x4)
	float                                                        MaximumRoll;                                       // 0x604(0x4)
	float                                                        MinimumPitch;                                      // 0x608(0x4)
	float                                                        MaximumPitch;                                      // 0x60c(0x4)
	bool                                                         SunkenItem;                                        // 0x610(0x1)
	char                                                         pad0x7_YS9W3[0x7];                                 // 0x611(0x7)
	class UClass*                                                SpawnLocationType;                                 // 0x618(0x8)
	struct WeightedProbabilityRangeOfRanges                      SpawnedContainerContents;                          // 0x620(0x30)
};


// Size 0x10 (Full Size[0x448] - InheritedSize[0x438]
class PuzzleMechanism: public InteractableObject
{
public:
	char                                                         pad0x8_YSOHG[0x8];                                 // 0x438(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x440(0x8)
};


// Size 0x0 (Full Size[0xb0] - InheritedSize[0xb0]
class CostumeCategory: public ClothingCategory
{
public:
};


// Size 0x0 (Full Size[0xf8] - InheritedSize[0xf8]
class ShipTitleDesc: public ShipCustomizationDesc
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class PetCustomizationDesc: public PetEntitlementBaseDesc
{
public:
	TArray<struct PetCustomizationPartMapping>                   PetPartMapping;                                    // 0xc8(0x10)
	class UClass*                                                RelatedPetEntitlementCategory;                     // 0xd8(0x8)
	char                                                         pad0x20_2S7SL[0x20];                               // 0xe0(0x20)
};


// Size 0x100 (Full Size[0x8f0] - InheritedSize[0x7f0]
class Compass: public PoseableMeshWieldableItem
{
public:
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7f0(0x8)
	class CompassSpinComponent*                                  SpinComponent;                                     // 0x7f8(0x8)
	class NarratedCompassDirectionComponent*                     NarratedCompassDirectionComponent;                 // 0x800(0x8)
	class PoseableMeshComponent*                                 MeshToUse;                                         // 0x808(0x8)
	char                                                         pad0xe0_5DTOW[0xe0];                               // 0x810(0xe0)
};


// Size 0x10 (Full Size[0x800] - InheritedSize[0x7f0]
class WieldableWeaponMock: public StaticMeshWieldableItem
{
public:
	class InventoryItemComponent*                                InventoryItem;                                     // 0x7f0(0x8)
	char                                                         pad0x8_SKEIP[0x8];                                 // 0x7f8(0x8)
};


// Size 0x0 (Full Size[0x1a80] - InheritedSize[0x1a80]
class TestAthenaPlayerControllerWithAthenaPlayerCameraManager: public TestAthenaPlayerController
{
public:
};


// Size 0x0 (Full Size[0x190] - InheritedSize[0x190]
class TestControllableIntentComponent: public ControllableIntentComponent
{
public:
};


// Size 0x0 (Full Size[0x940] - InheritedSize[0x940]
class MusicalInstrumentSkeletalMesh: public MusicalInstrument
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsItemOwnedStatCondition: public TargetedStatCondition
{
public:
	char                                                         OwnershipType;                                     // 0x30(0x1)
	char                                                         pad0x7_05OMC[0x7];                                 // 0x31(0x7)
};


// Size 0x110 (Full Size[0x618] - InheritedSize[0x508]
class PossessionsChest: public ModalInteractionProxy
{
public:
	char                                                         pad0x8_0ARI9[0x8];                                 // 0x508(0x8)
	struct FText                                                 Name;                                              // 0x510(0x38)
	struct FName                                                 InteractionFeatureGuard;                           // 0x548(0x8)
	class WwiseEvent*                                            BeginInteractionSfx;                               // 0x550(0x8)
	class WwiseEvent*                                            EndInteractionSfx;                                 // 0x558(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x560(0x8)
	bool                                                         BlockImpactProxySpawn;                             // 0x568(0x1)
	bool                                                         BlockMimicAccess;                                  // 0x569(0x1)
	char                                                         pad0x6_8875B[0x6];                                 // 0x56a(0x6)
	struct Status                                                MimicStatus;                                       // 0x570(0x20)
	char                                                         pad0x88_0Z0RX[0x88];                               // 0x590(0x88)
};


// Size 0x30 (Full Size[0x120] - InheritedSize[0xf0]
class AddItemsFromDataToCollectorsChestStepDesc: public AddItemsFromDataToCollectorsChestStepBaseDesc
{
public:
	struct QuestVariableDataAsset                                ItemData;                                          // 0xf0(0x30)
};


// Size 0x20 (Full Size[0x758] - InheritedSize[0x738]
class DamageableCannonProjectile: public CannonProjectile
{
public:
	char                                                         pad0x8_IXFQV[0x8];                                 // 0x738(0x8)
	float                                                        ImpactExplosionDelayOverride;                      // 0x740(0x4)
	char                                                         pad0x14_YE1VE[0x14];                               // 0x744(0x14)
};


// Size 0x1c0 (Full Size[0x9b0] - InheritedSize[0x7f0]
class Lantern: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x20_YKJF3[0x20];                               // 0x7f0(0x20)
	float                                                        LightRaisedBlendSpringAccel;                       // 0x810(0x4)
	float                                                        LightActiveBlendSpringAccel;                       // 0x814(0x4)
	class WwiseEvent*                                            TurnOnSfx;                                         // 0x818(0x8)
	class WwiseEvent*                                            TurnOffSfx;                                        // 0x820(0x8)
	class WwiseEvent*                                            FlameTransferSfx;                                  // 0x828(0x8)
	class CurveFloat*                                            ThirdPersonLanternDistanceInMetresMultiplier;      // 0x830(0x8)
	class CurveFloat*                                            ThirdPersonLanternTimeOfDayMultiplier;             // 0x838(0x8)
	float                                                        CurrentThirdPersonMultiplier;                      // 0x840(0x4)
	float                                                        CurrentExternalLightFactor;                        // 0x844(0x4)
	struct FlameData                                             FlameData;                                         // 0x848(0x2)
	char                                                         pad0x6_Y6LHT[0x6];                                 // 0x84a(0x6)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x850(0x8)
	char                                                         pad0x48_M1TZ8[0x48];                               // 0x858(0x48)
	bool                                                         LightOn;                                           // 0x8a0(0x1)
	bool                                                         bRaised;                                           // 0x8a1(0x1)
	bool                                                         CanApplyFlameOfFate;                               // 0x8a2(0x1)
	char                                                         pad0xfd_B95D9[0xfd];                               // 0x8a3(0xfd)
	bool                                                         FlameOfFateLocked;                                 // 0x9a0(0x1)
	char                                                         pad0xf_Y1SZK[0xf];                                 // 0x9a1(0xf)
};


// Size 0x460 (Full Size[0xc50] - InheritedSize[0x7f0]
class ProjectileWeapon: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x38_KGKUN[0x38];                               // 0x7f0(0x38)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x828(0x8)
	class ProjectileWeaponAdaptiveTriggerComponent*              AdaptiveTriggerComponent;                          // 0x830(0x8)
	struct ProjectileWeaponParameters                            WeaponParameters;                                  // 0x848(0x250)
	char                                                         pad0x1_6NZ90[0x1];                                 // 0xa98(0x1)
	char                                                         State;                                             // 0xa99(0x1)
	char                                                         pad0x2_KA7VW[0x2];                                 // 0xa9a(0x2)
	int                                                          AmmoLeft;                                          // 0xa9c(0x4)
	char                                                         pad0x8_7FL7B[0x8];                                 // 0xaa0(0x8)
	class AimSensitivityComponent*                               AimSensitivityComponent;                           // 0xaa8(0x8)
	char                                                         pad0x10_EQ06Z[0x10];                               // 0xab0(0x10)
	char                                                         ProjectileWeaponType;                              // 0xac0(0x1)
	char                                                         pad0x3_POQCF[0x3];                                 // 0xac1(0x3)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0xac4(0x4)
	char                                                         pad0x4_UZ673[0x4];                                 // 0xac8(0x4)
	bool                                                         ShouldSendHitScanTelemetry;                        // 0xacc(0x1)
	char                                                         pad0xf_N4NBT[0xf];                                 // 0xacd(0xf)
	float                                                        DistanceBeforeGravity;                             // 0xadc(0x4)
	float                                                        NameplateVisibilityRangeExtensionFactorWhileAiming; // 0xae0(0x4)
	char                                                         pad0x10c_CNDBU[0x10c];                             // 0xae4(0x10c)
	bool                                                         ShouldShowAmmoUI;                                  // 0xbf0(0x1)
	char                                                         pad0x4f_RMCER[0x4f];                               // 0xbf1(0x4f)
	class Actor*                                                 LastHomingTarget;                                  // 0xc40(0x8)
	char                                                         pad0x8_SE4P8[0x8];                                 // 0xc48(0x8)
};


// Size 0x8e0 (Full Size[0xdc8] - InheritedSize[0x4e8]
class Cannon: public ControllableObject
{
public:
	char                                                         pad0x30_R2GXR[0x30];                               // 0x4e8(0x30)
	class SkeletalMeshMemoryConstraintComponent*                 BaseMeshComponent;                                 // 0x518(0x8)
	class StaticMeshMemoryConstraintComponent*                   BarrelMeshComponent;                               // 0x520(0x8)
	class StaticMeshComponent*                                   FuseMeshComponent;                                 // 0x528(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x530(0x8)
	class LoadableComponent*                                     LoadableComponent;                                 // 0x538(0x8)
	class LoadingPointComponent*                                 LoadingPointComponent;                             // 0x540(0x8)
	class ChildActorComponent*                                   CannonBarrelInteractionComponent;                  // 0x548(0x8)
	class FuseComponent*                                         FuseComponent;                                     // 0x550(0x8)
	bool                                                         ApplyCannonRollToAim;                              // 0x558(0x1)
	char                                                         pad0x3_S8N1E[0x3];                                 // 0x559(0x3)
	struct FName                                                 CameraSocket;                                      // 0x55c(0x8)
	struct FName                                                 CameraInsideCannonSocket;                          // 0x564(0x8)
	struct FName                                                 LaunchSocket;                                      // 0x56c(0x8)
	bool                                                         AttachBarrelInteractionComponentToLaunchSocket;    // 0x574(0x1)
	char                                                         pad0x3_U0243[0x3];                                 // 0x575(0x3)
	struct Rotator                                               BarrelInteractionComponentRelativeSocketRotation;  // 0x578(0xc)
	struct FName                                                 TooltipSocket;                                     // 0x584(0x8)
	struct FName                                                 AudioAimRTPCName;                                  // 0x58c(0x8)
	struct FName                                                 InsideCannonRTPCName;                              // 0x594(0x8)
	char                                                         pad0x4_PZ62M[0x4];                                 // 0x59c(0x4)
	class UClass*                                                ProjectileClass;                                   // 0x5a0(0x8)
	float                                                        TimePerFire;                                       // 0x5a8(0x4)
	float                                                        ProjectileSpeed;                                   // 0x5ac(0x4)
	float                                                        ProjectileGravityScale;                            // 0x5b0(0x4)
	struct FloatRange                                            PitchRange;                                        // 0x5b4(0x10)
	struct FloatRange                                            YawRange;                                          // 0x5c4(0x10)
	float                                                        PitchSpeed;                                        // 0x5d4(0x4)
	float                                                        YawSpeed;                                          // 0x5d8(0x4)
	char                                                         pad0x4_UMU7K[0x4];                                 // 0x5dc(0x4)
	class UClass*                                                CameraShake;                                       // 0x5e0(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x5e8(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x5ec(0x4)
	float                                                        CannonFiredAINoiseRange;                           // 0x5f0(0x4)
	struct FName                                                 AINoiseTag;                                        // 0x5f4(0x8)
	char                                                         pad0x4_2B9H3[0x4];                                 // 0x5fc(0x4)
	struct FText                                                 CannonDisabledToolTipText;                         // 0x600(0x38)
	struct FText                                                 LoadingDisabledToolTipText;                        // 0x638(0x38)
	class UClass*                                                UseCannonInputId;                                  // 0x670(0x8)
	class UClass*                                                StartLoadingCannonInputId;                         // 0x678(0x8)
	class UClass*                                                StopLoadingCannonInputId;                          // 0x680(0x8)
	float                                                        DefaultFOV;                                        // 0x688(0x4)
	float                                                        AimFOV;                                            // 0x68c(0x4)
	class CurveFloat*                                            AimingScalarMultiplierCurve;                       // 0x690(0x8)
	float                                                        IntoAimBlendSpeed;                                 // 0x698(0x4)
	float                                                        OutOfAimBlendSpeed;                                // 0x69c(0x4)
	class WwiseEvent*                                            FireSfx;                                           // 0x6a0(0x8)
	class WwiseEvent*                                            DryFireSfx;                                        // 0x6a8(0x8)
	class WwiseEvent*                                            LoadingSfx_Play;                                   // 0x6b0(0x8)
	class WwiseEvent*                                            LoadingSfx_Stop;                                   // 0x6b8(0x8)
	class WwiseEvent*                                            UnloadingSfx_Play;                                 // 0x6c0(0x8)
	class WwiseEvent*                                            UnloadingSfx_Stop;                                 // 0x6c8(0x8)
	class WwiseEvent*                                            LoadedPlayerSfx;                                   // 0x6d0(0x8)
	class WwiseEvent*                                            UnloadedPlayerSfx;                                 // 0x6d8(0x8)
	class WwiseEvent*                                            FiredPlayerSfx;                                    // 0x6e0(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x6e8(0x8)
	class WwiseEvent*                                            StartPitchMovement;                                // 0x6f0(0x8)
	class WwiseEvent*                                            StopPitchMovement;                                 // 0x6f8(0x8)
	class WwiseEvent*                                            StartYawMovement;                                  // 0x700(0x8)
	class WwiseEvent*                                            StopYawMovement;                                   // 0x708(0x8)
	class WwiseEvent*                                            StopMovementAtEnd;                                 // 0x710(0x8)
	class WwiseObjectPoolWrapper*                                SfxMovementPool;                                   // 0x718(0x8)
	class Object*                                                FuseVfxFirstPerson;                                // 0x720(0x8)
	class Object*                                                FuseVfxThirdPerson;                                // 0x728(0x8)
	class Object*                                                MuzzleFlashVfxFirstPerson;                         // 0x730(0x8)
	class Object*                                                MuzzleFlashVfxThirdPerson;                         // 0x738(0x8)
	struct FName                                                 FuseSocketName;                                    // 0x740(0x8)
	struct FName                                                 BarrelSocketName;                                  // 0x748(0x8)
	class UClass*                                                RadialCategoryFilter;                              // 0x750(0x8)
	class UClass*                                                DefaultLoadedItemDesc;                             // 0x758(0x8)
	float                                                        ClientRotationBlendTime;                           // 0x760(0x4)
	char                                                         pad0x1_U59BQ[0x1];                                 // 0x764(0x1)
	bool                                                         IgnoreLauncherParentCollision;                     // 0x765(0x1)
	char                                                         pad0x3_GOW5I[0x3];                                 // 0x766(0x3)
	bool                                                         OverrideProjectileLauncherType;                    // 0x769(0x1)
	char                                                         ProjectileLauncherTypeOverride;                    // 0x76a(0x1)
	char                                                         pad0x5_4BZW0[0x5];                                 // 0x76b(0x5)
	class ItemInfo*                                              LoadedItemInfo;                                    // 0x770(0x8)
	bool                                                         FiringDisabled;                                    // 0x778(0x1)
	bool                                                         IsAShipPart;                                       // 0x779(0x1)
	char                                                         pad0x1e_YC8NT[0x1e];                               // 0x77a(0x1e)
	class MemoryConstrainedMeshInitializer*                      BaseMMCMeshInitializer;                            // 0x798(0x8)
	class MemoryConstrainedMeshInitializer*                      BarrelMMCMeshInitializer;                          // 0x7a0(0x8)
	class CannonDescAsset*                                       DescToSetWhenSafe;                                 // 0x7a8(0x8)
	class CannonDescAsset*                                       CurrentCannonDesc;                                 // 0x7b0(0x8)
	float                                                        ServerPitch;                                       // 0x7b8(0x4)
	float                                                        ServerYaw;                                         // 0x7bc(0x4)
	class ParticleSystemComponent*                               LoadedItemVFXComp;                                 // 0x7c0(0x8)
	class StaticMeshComponent*                                   LoadedItemMeshComp;                                // 0x7c8(0x8)
	class StaticMesh*                                            DefaultFuseMesh;                                   // 0x7d0(0x8)
	char                                                         pad0x5d0_7EPH1[0x5d0];                             // 0x7d8(0x5d0)
	char                                                         InteractionState;                                  // 0xda8(0x1)
	char                                                         pad0x1f_LTTD7[0x1f];                               // 0xda9(0x1f)
};


// Size 0x58 (Full Size[0x540] - InheritedSize[0x4e8]
class MapTableControlPoint: public ControllableObject
{
public:
	char                                                         pad0x8_IZNJX[0x8];                                 // 0x4e8(0x8)
	class SceneComponent*                                        SceneRootComponent;                                // 0x4f0(0x8)
	class InteractableComponent*                                 MyInteractable;                                    // 0x4f8(0x8)
	struct FName                                                 CameraSocketName;                                  // 0x500(0x8)
	bool                                                         InvertControls;                                    // 0x508(0x1)
	char                                                         pad0x7_N88BJ[0x7];                                 // 0x509(0x7)
	class UClass*                                                StartClearMarkersInputId;                          // 0x510(0x8)
	class UClass*                                                ReleasedClearMarkersInputId;                       // 0x518(0x8)
	float                                                        ClearMarkersHoldTime;                              // 0x520(0x4)
	char                                                         pad0x1c_JXSLH[0x1c];                               // 0x524(0x1c)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateIsWearingAny: public NPCDialogPredicate
{
public:
	TArray<class Class*>                                         ClothingItems;                                     // 0x38(0x10)
};


// Size 0x28 (Full Size[0x460] - InheritedSize[0x438]
class AmmoChest: public InteractableObject
{
public:
	char                                                         pad0x8_Q63V7[0x8];                                 // 0x438(0x8)
	class StaticMeshComponent*                                   StaticMesh;                                        // 0x440(0x8)
	class UClass*                                                InputID;                                           // 0x448(0x8)
	class UClass*                                                ReleasedInputId;                                   // 0x450(0x8)
	float                                                        PressAndHoldTime;                                  // 0x458(0x4)
	char                                                         pad0x4_NGGWV[0x4];                                 // 0x45c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISmugglerShipAggressiveGameEventType: public AIShipAggressiveGameEventType
{
public:
};


// Size 0x0 (Full Size[0x518] - InheritedSize[0x518]
class WarMapVotableObjectView: public VotableObjectView
{
public:
};


// Size 0xe0 (Full Size[0x5c8] - InheritedSize[0x4e8]
class DockableKeyedInstrument: public ControllableObject
{
public:
	char                                                         pad0x8_M6T3X[0x8];                                 // 0x4e8(0x8)
	class ParticleSystem*                                        PipeVFXObject;                                     // 0x4f0(0x8)
	char                                                         pad0x40_SU66Z[0x40];                               // 0x4f8(0x40)
	int                                                          CurrentKeyID;                                      // 0x538(0x4)
	char                                                         pad0x4_U5KID[0x4];                                 // 0x53c(0x4)
	struct FText                                                 DisplayName;                                       // 0x540(0x38)
	float                                                        MoveKeyThreshold;                                  // 0x578(0x4)
	float                                                        MovementCooldown;                                  // 0x57c(0x4)
	float                                                        XAxisDeadzone;                                     // 0x580(0x4)
	int                                                          StartingKeyID;                                     // 0x584(0x4)
	class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x588(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x590(0x8)
	class SceneComponent*                                        PlayerPositionComponent;                           // 0x598(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x5a0(0x8)
	TArray<class ParticleSystemComponent*>                       VFXPositions;                                      // 0x5a8(0x10)
	class ParticleSystemComponent*                               CurrentVFXSpawner;                                 // 0x5b8(0x8)
	char                                                         pad0x8_GZG57[0x8];                                 // 0x5c0(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateInAIDialogueState: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	struct FName                                                 DialogueState;                                     // 0x3c(0x8)
	char                                                         pad0x4_NJSD1[0x4];                                 // 0x44(0x4)
};


// Size 0x0 (Full Size[0x840] - InheritedSize[0x840]
class CollectorsChestWieldableItemWithNoOpenableComponent: public CollectorsChestWieldableItemBase
{
public:
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class PetEntitlementBaseCategory: public ItemCategory
{
public:
	struct FName                                                 PetPreviewCamera;                                  // 0x90(0x8)
};


// Size 0x0 (Full Size[0x670] - InheritedSize[0x670]
class ArrivalRespawnTunnelOfTheDamned: public ArrivalTunnelOfTheDamned
{
public:
};


// Size 0x1a0 (Full Size[0x990] - InheritedSize[0x7f0]
class Bucket: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x8_EK7FU[0x8];                                 // 0x7f0(0x8)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	TArray<struct BucketContentsInfo>                            BucketContentsInfos;                               // 0x800(0x10)
	class WwiseEvent*                                            ScoopSfx;                                          // 0x810(0x8)
	struct FName                                                 ThrowSocketName;                                   // 0x818(0x8)
	struct FName                                                 DrenchWielderSocketName;                           // 0x820(0x8)
	float                                                        ScoopActionTime;                                   // 0x828(0x4)
	float                                                        ScoopCompleteTime;                                 // 0x82c(0x4)
	float                                                        ThrowActionTime;                                   // 0x830(0x4)
	float                                                        ThrowCompleteTime;                                 // 0x834(0x4)
	float                                                        DrenchWielderActionTime;                           // 0x838(0x4)
	float                                                        DrenchWielderCompleteTime;                         // 0x83c(0x4)
	float                                                        RequestToleranceTimeOnServer;                      // 0x840(0x4)
	float                                                        ProjectileSpeed;                                   // 0x844(0x4)
	float                                                        ProjectileAdditionalLiftAngle;                     // 0x848(0x4)
	float                                                        WaterFillFromShip;                                 // 0x84c(0x4)
	float                                                        WaterFillFromSea;                                  // 0x850(0x4)
	float                                                        WaterTransferFillAmountModifier;                   // 0x854(0x4)
	float                                                        ScoopBufferDistance;                               // 0x858(0x4)
	char                                                         ScoopHitTestTraceChannel;                          // 0x85c(0x1)
	char                                                         pad0x3_XREBU[0x3];                                 // 0x85d(0x3)
	class UClass*                                                BucketScoopCooldownType;                           // 0x860(0x8)
	class UClass*                                                BucketThrowCooldownType;                           // 0x868(0x8)
	class UClass*                                                BucketDouseCooldownType;                           // 0x870(0x8)
	float                                                        ThrowLiquidAINoiseRange;                           // 0x878(0x4)
	char                                                         pad0x4_6JYD8[0x4];                                 // 0x87c(0x4)
	class LiquidContainerComponent*                              LiquidContainer;                                   // 0x880(0x8)
	struct LiquidContents                                        Contents;                                          // 0x888(0x70)
	char                                                         pad0x78_EBFNY[0x78];                               // 0x8f8(0x78)
	char                                                         FillState;                                         // 0x970(0x1)
	char                                                         pad0x7_RABQL[0x7];                                 // 0x971(0x7)
	class ParticleSystemComponent*                               BucketContentsEffect;                              // 0x978(0x8)
	char                                                         pad0x10_ZEGPR[0x10];                               // 0x980(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class NPCDialogNotExpression: public NPCDialogUnaryExpression
{
public:
};


// Size 0xa8 (Full Size[0x590] - InheritedSize[0x4e8]
class DockableCutscene: public ControllableObject
{
public:
	char                                                         pad0x8_QUOLE[0x8];                                 // 0x4e8(0x8)
	class AnimSequence*                                          FirstPersonAnimToPlay;                             // 0x4f0(0x8)
	class AnimMontage*                                           DockableAnimToPlay;                                // 0x4f8(0x8)
	class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x500(0x8)
	float                                                        DetachCutOffTime;                                  // 0x508(0x4)
	char                                                         pad0x4_HW52V[0x4];                                 // 0x50c(0x4)
	class InteractableComponent*                                 InteractableComponent;                             // 0x510(0x8)
	struct FText                                                 DockableCutsceneName;                              // 0x518(0x38)
	struct FText                                                 InteractWithCutsceneText;                          // 0x550(0x38)
	struct FName                                                 DockingSocketName;                                 // 0x588(0x8)
};


// Size 0x18 (Full Size[0x500] - InheritedSize[0x4e8]
class AIDockableObject: public ControllableObject
{
public:
	char                                                         pad0x8_BFL4Q[0x8];                                 // 0x4e8(0x8)
	class UClass*                                                InteractableType;                                  // 0x4f0(0x8)
	float                                                        InteractableOffset;                                // 0x4f8(0x4)
	char                                                         pad0x4_QE4MU[0x4];                                 // 0x4fc(0x4)
};


// Size 0x1a0 (Full Size[0x688] - InheritedSize[0x4e8]
class StandingSpyglass: public ControllableObject
{
public:
	class ActionRulesInteractableComponent*                      ActionRulesInteractableComponent;                  // 0x4e8(0x8)
	class PostProcessComponent*                                  PostProcessComponent;                              // 0x4f0(0x8)
	class SceneComponent*                                        PlayerDocking;                                     // 0x4f8(0x8)
	class SceneComponent*                                        Root;                                              // 0x500(0x8)
	class SceneComponent*                                        SpyglassPivot;                                     // 0x508(0x8)
	class StaticMeshComponent*                                   SpyglassMesh;                                      // 0x510(0x8)
	class StaticMeshComponent*                                   SpyglassStandMesh;                                 // 0x518(0x8)
	class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0x520(0x8)
	class CameraComponent*                                       FirstPersonPlayerCamera;                           // 0x528(0x8)
	bool                                                         UseLookAtForPivotRotation;                         // 0x530(0x1)
	char                                                         pad0x3_DWS0P[0x3];                                 // 0x531(0x3)
	struct LookAtOffsetParams                                    LookAtOffsetParams;                                // 0x534(0x1c)
	struct StandingSpyglassAudioParams                           StandingSpyglassAudioParams;                       // 0x550(0x40)
	struct StandingSpyglassInteractionParams                     StandingSpyglassInteractionParams;                 // 0x590(0x78)
	struct StandingSpyglassPostProcessingParams                  StandingSpyglassPostProcessingParams;              // 0x608(0x40)
	char                                                         pad0x18_LW9UI[0x18];                               // 0x648(0x18)
	struct Vector                                                TargetLookAtLocation;                              // 0x660(0xc)
	char                                                         pad0xc_I0FIA[0xc];                                 // 0x66c(0xc)
	float                                                        BlendSpeed;                                        // 0x678(0x4)
	float                                                        ZoomedInFov;                                       // 0x67c(0x4)
	char                                                         pad0x8_P788Y[0x8];                                 // 0x680(0x8)
};


// Size 0x28 (Full Size[0x188] - InheritedSize[0x160]
class EquipmentChestViewModelComponent: public PossessionsChestViewModel
{
public:
	char                                                         pad0x10_13K2H[0x10];                               // 0x160(0x10)
	TArray<class Class*>                                         Categories;                                        // 0x170(0x10)
	bool                                                         IncludeAllCategory;                                // 0x180(0x1)
	char                                                         pad0x7_PKHOD[0x7];                                 // 0x181(0x7)
};


// Size 0x50 (Full Size[0x488] - InheritedSize[0x438]
class HalfSkellyInteractableObject: public InteractableObject
{
public:
	class InteractableComponent*                                 InteractableComponent;                             // 0x438(0x8)
	class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x440(0x8)
	struct FText                                                 HalfSkellyName;                                    // 0x448(0x38)
	char                                                         pad0x8_PTFTX[0x8];                                 // 0x480(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFortGameEventType: public SkellyFortGameEventTypeBase
{
public:
};


// Size 0x8 (Full Size[0xb0] - InheritedSize[0xa8]
class QuickAccessNonVerbalRadialContentRule: public NonVerbalRadialContentRule
{
public:
	class NonVerbalRadialDataAsset*                              CurrentPhrases;                                    // 0xa8(0x8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsBootyItemSpawnSourceStatCondition: public TargetedStatCondition
{
public:
	char                                                         TargetSpawnSource;                                 // 0x30(0x1)
	char                                                         pad0x7_7BE62[0x7];                                 // 0x31(0x7)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingItemOfTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<class Class*>                                         TargetItemCategories;                              // 0x30(0x10)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DoesNameContainsStatCondition: public TargetedStatCondition
{
public:
	struct FName                                                 TargetNameSubString;                               // 0x30(0x8)
};


// Size 0x10 (Full Size[0x800] - InheritedSize[0x7f0]
class CannonBall: public StaticMeshWieldableItem
{
public:
	class InventoryItemComponent*                                InventoryItem;                                     // 0x7f0(0x8)
	class ConsumableWieldableComponent*                          ConsumableWieldable;                               // 0x7f8(0x8)
};


// Size 0x8 (Full Size[0x740] - InheritedSize[0x738]
class VolcanicRock: public CannonProjectile
{
public:
	char                                                         pad0x8_TWS4X[0x8];                                 // 0x738(0x8)
};


// Size 0x590 (Full Size[0xb30] - InheritedSize[0x5a0]
class IslandBoarWallowSpawnComponent: public IslandItemSpawnComponent
{
public:
	char                                                         pad0x528_F6XZX[0x528];                             // 0x5a0(0x528)
	bool                                                         ShouldBoarVoyageImmediatelySpawnBoarWallows;       // 0xac8(0x1)
	char                                                         pad0x3_PKXYW[0x3];                                 // 0xac9(0x3)
	float                                                        SecondsToWaitUntilSpawningWallows;                 // 0xacc(0x4)
	char                                                         pad0x8_MA5GA[0x8];                                 // 0xad0(0x8)
	class Actor*                                                 OwnerActor;                                        // 0xad8(0x8)
	char                                                         pad0x50_8EK0P[0x50];                               // 0xae0(0x50)
};


// Size 0x28 (Full Size[0x600] - InheritedSize[0x5d8]
class PetCageSwitchMechanismTrigger: public SwitchMechanismTrigger
{
public:
	char                                                         pad0x8_J0FML[0x8];                                 // 0x5d8(0x8)
	struct HangoutSpotId                                         LinkedPerchHangoutId;                              // 0x5e0(0x8)
	char                                                         pad0x18_441OY[0x18];                               // 0x5e8(0x18)
};


// Size 0x58 (Full Size[0x2a8] - InheritedSize[0x250]
class GatedHealthComponent: public ItemHealthComponent
{
public:
	char                                                         pad0x58_Q8FYB[0x58];                               // 0x250(0x58)
};


// Size 0x0 (Full Size[0xf8] - InheritedSize[0xf8]
class WalkableEmoteRadialContentRule: public EmoteRadialContentRule
{
public:
};


// Size 0x0 (Full Size[0x8a0] - InheritedSize[0x8a0]
class SkeletalWieldableIngestible: public WieldableIngestible
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TargetLastHealthChangeReasonStatCondition: public TargetedStatCondition
{
public:
	char                                                         LastHealthChangeReason;                            // 0x30(0x1)
	char                                                         pad0x7_4CQWJ[0x7];                                 // 0x31(0x7)
};


// Size 0x1a0 (Full Size[0x688] - InheritedSize[0x4e8]
class WaterBarrel: public ControllableObject
{
public:
	char                                                         pad0x38_PGDG7[0x38];                               // 0x4e8(0x38)
	class WwiseObjectPoolWrapper*                                WaterBarrelSfxPool;                                // 0x520(0x8)
	class WwiseEvent*                                            WaterBarrelStartLeakingSfx;                        // 0x528(0x8)
	class WwiseEvent*                                            WaterBarrelStopLeakingSfx;                         // 0x530(0x8)
	class WwiseEvent*                                            WaterBarrelStartPumpingSfx;                        // 0x538(0x8)
	class WwiseEvent*                                            WaterBarrelStopPumpingSfx;                         // 0x540(0x8)
	class WwiseEvent*                                            WaterBarrelLetStartPumpingSfx;                     // 0x548(0x8)
	class WwiseEvent*                                            WaterBarrelLetStopPumpingSfx;                      // 0x550(0x8)
	struct Vector                                                MinWaterHeight;                                    // 0x558(0xc)
	struct Vector                                                MaxWaterHeight;                                    // 0x564(0xc)
	char                                                         pad0x18_IUQ7B[0x18];                               // 0x570(0x18)
	class StaticMeshComponent*                                   BarrelMesh;                                        // 0x588(0x8)
	class StaticMeshComponent*                                   HandleMesh;                                        // 0x590(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x598(0x8)
	class LiquidContainerComponent*                              LiquidContainerComponent;                          // 0x5a0(0x8)
	class WaterBarrelAdaptiveTriggerComponent*                   AdaptiveTriggerComponent;                          // 0x5a8(0x8)
	float                                                        MaxCapacity;                                       // 0x5b0(0x4)
	float                                                        CurrentCapacity;                                   // 0x5b4(0x4)
	float                                                        MaxLiquidCollectionAmount;                         // 0x5b8(0x4)
	float                                                        PumpResetTime;                                     // 0x5bc(0x4)
	float                                                        WaterIncreasePerPump;                              // 0x5c0(0x4)
	char                                                         pad0x4_2JUWS[0x4];                                 // 0x5c4(0x4)
	class CurveFloat*                                            HandleRotationCurve;                               // 0x5c8(0x8)
	class CurveFloat*                                            WaterFlowCurve;                                    // 0x5d0(0x8)
	float                                                        WaterIntensityIncreaseSpeed;                       // 0x5d8(0x4)
	float                                                        WaterIntensityDecreaseSpeed;                       // 0x5dc(0x4)
	float                                                        TargetWaterIntensity;                              // 0x5e0(0x4)
	char                                                         pad0x4_4IZHF[0x4];                                 // 0x5e4(0x4)
	float                                                        MinPumpRotation;                                   // 0x5e8(0x4)
	float                                                        MaxPumpRotation;                                   // 0x5ec(0x4)
	bool                                                         IsPumpingWater;                                    // 0x5f0(0x1)
	char                                                         pad0x17_28BW0[0x17];                               // 0x5f1(0x17)
	struct FName                                                 DockingSocketName;                                 // 0x608(0x8)
	struct Vector                                                LookAtPosLocalSpace;                               // 0x610(0xc)
	char                                                         pad0x4_JWQUU[0x4];                                 // 0x61c(0x4)
	class Object*                                                WaterSurfaceVFXTemplate;                           // 0x620(0x8)
	class Object*                                                WaterPumpVFXTemplate;                              // 0x628(0x8)
	class ParticleSystemComponent*                               WaterPumpParticleComponent;                        // 0x630(0x8)
	class ParticleSystemComponent*                               WaterSurfaceParticleComponent;                     // 0x638(0x8)
	TArray<struct WaterBarrelFeedbackLevel>                      HandleFeedbackLevels;                              // 0x640(0x10)
	char                                                         pad0x38_I3LTR[0x38];                               // 0x650(0x38)
};


// Size 0x20 (Full Size[0x810] - InheritedSize[0x7f0]
class VoyageInAContainerWieldableItem: public StaticMeshWieldableItem
{
public:
	TArray<struct MessageInABottleVoyageEntry>                   VoyageRecipeList;                                  // 0x7f0(0x10)
	class WwiseEvent*                                            OnOpenedSfx;                                       // 0x800(0x8)
	char                                                         pad0x8_LGWDM[0x8];                                 // 0x808(0x8)
};


// Size 0xb0 (Full Size[0xab0] - InheritedSize[0xa00]
class HangingPlatform: public ContinuousAnimatedMechanismAction
{
public:
	class StaticMeshComponent*                                   PlatformBody;                                      // 0xa00(0x8)
	class ChildActorComponent*                                   DrivingMechanism;                                  // 0xa08(0x8)
	struct Vector                                                PlatformEndLocation;                               // 0xa10(0xc)
	struct Vector                                                TargetDefiningTiltAxis;                            // 0xa1c(0xc)
	struct Vector                                                PlatformTiltHeightConstant;                        // 0xa28(0xc)
	float                                                        TotalTimeToComplete;                               // 0xa34(0x4)
	float                                                        TimeForFullFlatten;                                // 0xa38(0x4)
	float                                                        TimeForFullMove;                                   // 0xa3c(0x4)
	float                                                        TiltAngle;                                         // 0xa40(0x4)
	char                                                         pad0x58_AAMQV[0x58];                               // 0xa44(0x58)
	float                                                        CurrentAngleInterpolation;                         // 0xa9c(0x4)
	float                                                        CurrentMoveInterpolation;                          // 0xaa0(0x4)
	char                                                         pad0xc_EFFJW[0xc];                                 // 0xaa4(0xc)
};


// Size 0xa0 (Full Size[0x490] - InheritedSize[0x3f0]
class CoherentUIGTNameplateComponent: public CoherentUIGTAtlasComponent
{
public:
	int                                                          MaxElements;                                       // 0x3f0(0x4)
	float                                                        NormalizedScreenSpaceVisibilityMargin;             // 0x3f4(0x4)
	class CurveFloat*                                            DistanceScalingCurve;                              // 0x3f8(0x8)
	float                                                        TitleFadeDistance;                                 // 0x400(0x4)
	struct NameplateVisibilityFactors                            VisibilityFactors;                                 // 0x404(0x14)
	char                                                         pad0x78_4D7UE[0x78];                               // 0x418(0x78)
};


// Size 0x10 (Full Size[0x3e8] - InheritedSize[0x3d8]
class SimpleAnimatedMechanismActionProxy: public AnimatedMechanismActionProxy
{
public:
	char                                                         Mode;                                              // 0x3d8(0x1)
	bool                                                         AlwaysActive;                                      // 0x3d9(0x1)
	bool                                                         OnlyAnimateWhenActive;                             // 0x3da(0x1)
	bool                                                         OverrideAudioEmitterPool;                          // 0x3db(0x1)
	char                                                         pad0x4_VGC7O[0x4];                                 // 0x3dc(0x4)
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x3e0(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateHasRank: public NPCDialogPredicate
{
public:
	class UClass*                                                Rank;                                              // 0x38(0x8)
};


// Size 0x10 (Full Size[0x50] - InheritedSize[0x40]
class GenericPartWithVFXDescAsset: public GenericPartDescAsset
{
public:
	class ParticleSystem*                                        VFX;                                               // 0x40(0x8)
	bool                                                         Reflected;                                         // 0x48(0x1)
	bool                                                         ReflectedOnLowQuality;                             // 0x49(0x1)
	char                                                         pad0x6_OCKMV[0x6];                                 // 0x4a(0x6)
};


// Size 0x30 (Full Size[0x150] - InheritedSize[0x120]
class ItemsByCategoryRadialContentRule: public ItemRadialContentRule
{
public:
	class InventoryItemDescToSlotRemappingPolicyAsset*           ItemDescRemappingAsset;                            // 0x120(0x8)
	class UClass*                                                CustomItemCategory;                                // 0x128(0x8)
	TArray<class Class*>                                         CustomItemCategories;                              // 0x130(0x10)
	TArray<class Class*>                                         ExcludedItemCategories;                            // 0x140(0x10)
};


// Size 0x40 (Full Size[0x1a0] - InheritedSize[0x160]
class PetChestViewModelComponent: public PossessionsChestViewModel
{
public:
	struct StringAssetReference                                  ClearIcon;                                         // 0x160(0x10)
	bool                                                         WithClearButtons;                                  // 0x170(0x1)
	char                                                         pad0x17_Q2XRX[0x17];                               // 0x171(0x17)
	TArray<class Class*>                                         Categories;                                        // 0x188(0x10)
	bool                                                         IncludeAllCategory;                                // 0x198(0x1)
	char                                                         pad0x7_V13XJ[0x7];                                 // 0x199(0x7)
};


// Size 0xf0 (Full Size[0x980] - InheritedSize[0x890]
class InvasionDepartureTunnelOfTheDamned: public DepartureTunnelOfTheDamned
{
public:
	class InvasionDepartureTunnelDesc*                           InvasionDepartureTunnelDesc;                       // 0x890(0x8)
	char                                                         pad0xe8_IK8DJ[0xe8];                               // 0x898(0xe8)
};


// Size 0x20 (Full Size[0x140] - InheritedSize[0x120]
class SinkingTunnelDesc: public DepartureTunnelDesc
{
public:
	TArray<struct FactionMusic>                                  FactionMusics;                                     // 0x120(0x10)
	class WwiseObjectPoolWrapper*                                FactionMusicPool;                                  // 0x130(0x8)
	struct FName                                                 CrewFaction;                                       // 0x138(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class NPCDialogPredicateHasFeature: public NPCDialogPredicate
{
public:
	struct FName                                                 FeatureName;                                       // 0x38(0x8)
	bool                                                         InvertFeatureFlag;                                 // 0x40(0x1)
	char                                                         pad0xf_QTUVG[0xf];                                 // 0x41(0xf)
};


// Size 0x8 (Full Size[0x168] - InheritedSize[0x160]
class WheelMechanismTriggerComponent: public IntentBasedMechanismTriggerComponent
{
public:
	class Wheel*                                                 ParentWheel;                                       // 0x160(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class NPCDialogPredicateEquals: public NPCDialogPredicate
{
public:
	struct FName                                                 ParameterName;                                     // 0x38(0x8)
	struct FString                                               Value;                                             // 0x40(0x10)
};


// Size 0x20 (Full Size[0x8b0] - InheritedSize[0x890]
class SameServerDepartureTunnelOfTheDamned: public DepartureTunnelOfTheDamned
{
public:
	char                                                         pad0x10_Q9HG7[0x10];                               // 0x890(0x10)
	TArray<class Interface*>                                     EjectActionStateFadeCompletedTargets;              // 0x8a0(0x10)
};


// Size 0x1b0 (Full Size[0x698] - InheritedSize[0x4e8]
class Seat: public ControllableObject
{
public:
	char                                                         pad0x8_HEARN[0x8];                                 // 0x4e8(0x8)
	class UClass*                                                InteractionInput;                                  // 0x4f0(0x8)
	struct SittingActionStateParams                              SittingStateParams;                                // 0x4f8(0xc0)
	class InteractableComponent*                                 InteractableComponent;                             // 0x5b8(0x8)
	struct FName                                                 SocketName;                                        // 0x5c0(0x8)
	struct FText                                                 InteractionVerb;                                   // 0x5c8(0x38)
	struct FText                                                 InteractionDisplayName;                            // 0x600(0x38)
	bool                                                         HoldToInteract;                                    // 0x638(0x1)
	char                                                         pad0x7_I55TR[0x7];                                 // 0x639(0x7)
	class UClass*                                                HoldInteractionInput;                              // 0x640(0x8)
	float                                                        HoldDuration;                                      // 0x648(0x4)
	float                                                        CosCameraAngleToTurnOffFirstPersonMesh;            // 0x64c(0x4)
	char                                                         pad0x48_9DEJ8[0x48];                               // 0x650(0x48)
};


// Size 0x10 (Full Size[0x550] - InheritedSize[0x540]
class ToggleAnimatedMechanismAction: public BaseToggleAnimatedMechanismAction
{
public:
	struct MechanismTransformAnimationCurve                      InactiveToActiveAnimation;                         // 0x540(0x8)
	struct MechanismTransformAnimationCurve                      ActiveToInactiveAnimation;                         // 0x548(0x8)
};


// Size 0x0 (Full Size[0x158] - InheritedSize[0x158]
class VotingInteractionComponent: public VotingInteractionComponentBase
{
public:
};


// Size 0xf0 (Full Size[0x528] - InheritedSize[0x438]
class TavernBoard: public InteractableObject
{
public:
	char                                                         pad0x8_PGHER[0x8];                                 // 0x438(0x8)
	class StaticMeshComponent*                                   Mesh;                                              // 0x440(0x8)
	class InteractableComponent*                                 InteractionRegion;                                 // 0x448(0x8)
	class BoxComponent*                                          ContextualTutorialOverlap;                         // 0x450(0x8)
	char                                                         pad0xd0_FV5PZ[0xd0];                               // 0x458(0xd0)
};


// Size 0x28 (Full Size[0x400] - InheritedSize[0x3d8]
class BaseToggleAnimatedMechanismActionProxy: public AnimatedMechanismActionProxy
{
public:
	class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x3d8(0x8)
	char                                                         pad0x10_ZKRI5[0x10];                               // 0x3e0(0x10)
	TArray<struct MechanismAnimationEventContainer>              AnimationEvents;                                   // 0x3f0(0x10)
};


// Size 0x40 (Full Size[0x160] - InheritedSize[0x120]
class InvasionDepartureTunnelDesc: public DepartureTunnelDesc
{
public:
	float                                                        SecondsAfterCrewArriveInTunnelBeforeAllowingTunnelCancellation; // 0x120(0x4)
	float                                                        SecondsAfterCrewArriveInTunnelBeforeShowingCancellationReminderPopUp; // 0x124(0x4)
	float                                                        SecondsBetweenEachCancellationReminderPopUp;       // 0x128(0x4)
	char                                                         pad0x4_1XW7V[0x4];                                 // 0x12c(0x4)
	TArray<struct TunnelOfTheDamnedFactionThemedPopUpDesc>       CancellationReminderPopUpDescs;                    // 0x130(0x10)
	TArray<struct TunnelOfTheDamnedFactionThemedPopUpDesc>       XboxGamePadOnlyServerCancellationReminderPopUpDescs; // 0x140(0x10)
	TArray<struct TunnelOfTheDamnedFactionThemedPopUpDesc>       FactionSpecificTunnelFailurePopUpDescs;            // 0x150(0x10)
};


// Size 0x1a0 (Full Size[0x750] - InheritedSize[0x5b0]
class ItemProxy: public PickupableObject
{
public:
	char                                                         pad0x30_XFU4H[0x30];                               // 0x5b0(0x30)
	float                                                        InteractionPointRadius;                            // 0x5e0(0x4)
	char                                                         pad0x4_3M3PJ[0x4];                                 // 0x5e4(0x4)
	class WwiseEvent*                                            GroundImpactSfx;                                   // 0x5e8(0x8)
	class WwiseEvent*                                            GroundImpactAdditiveSfx;                           // 0x5f0(0x8)
	class WwiseEvent*                                            PlayProxySfxLoop;                                  // 0x5f8(0x8)
	class WwiseEvent*                                            StopProxySfxLoop;                                  // 0x600(0x8)
	TArray<struct ItemProxyImpactVfxParams>                      VFXParams;                                         // 0x608(0x10)
	float                                                        ZOffsetWhenPlacingWorldProxy;                      // 0x618(0x4)
	struct Rotator                                               RotationWhenPlacingWorldProxy;                     // 0x61c(0xc)
	class PrimitiveComponent*                                    ThirdPersonMesh;                                   // 0x628(0x8)
	char                                                         pad0x20_HJPOC[0x20];                               // 0x630(0x20)
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x650(0x8)
	class BuoyancyComponent*                                     BuoyancyComponent;                                 // 0x658(0x8)
	float                                                        TTL;                                               // 0x660(0x4)
	char                                                         pad0xc_4U5HT[0xc];                                 // 0x664(0xc)
	class ItemInfo*                                              ItemInfo;                                          // 0x670(0x8)
	char                                                         pad0xb8_434GT[0xb8];                               // 0x678(0xb8)
	float                                                        TTLPlayerProximityCutoff;                          // 0x730(0x4)
	float                                                        TTLRecheckPeriod;                                  // 0x734(0x4)
	char                                                         DropOnSurfaceClientTraceChannel;                   // 0x738(0x1)
	char                                                         CachedProxySurfaceType;                            // 0x739(0x1)
	char                                                         pad0x2_531FE[0x2];                                 // 0x73a(0x2)
	bool                                                         CachedOnTopOfExistingBuriable;                     // 0x73c(0x1)
	char                                                         pad0x3_1XXJW[0x3];                                 // 0x73d(0x3)
	char                                                         InWaterState;                                      // 0x740(0x1)
	char                                                         pad0xf_FPY3L[0xf];                                 // 0x741(0xf)
};


// Size 0x8 (Full Size[0x140] - InheritedSize[0x138]
class VoyageCheckpointProposalDesc: public VoyageProposalDesc
{
public:
	int                                                          TaleIndex;                                         // 0x138(0x4)
	bool                                                         DoConsumeOnUse;                                    // 0x13c(0x1)
	bool                                                         DoCountAsInventoryVoyage;                          // 0x13d(0x1)
	char                                                         pad0x2_ZUE75[0x2];                                 // 0x13e(0x2)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PageNamedNextPageRadialAction: public NextPageRadialAction
{
public:
};


// Size 0x238 (Full Size[0x740] - InheritedSize[0x508]
class BootyItemInfo: public NonStorableItemInfo
{
public:
	char                                                         pad0x40_SCY8B[0x40];                               // 0x508(0x40)
	struct Guid                                                  Id;                                                // 0x548(0x10)
	bool                                                         PlayedFirstTimeEquipSfx;                           // 0x558(0x1)
	char                                                         BootyType;                                         // 0x559(0x1)
	char                                                         pad0x6_ZU3AG[0x6];                                 // 0x55a(0x6)
	TArray<struct PlayerStat>                                    HandInPlayerStats;                                 // 0x560(0x10)
	TArray<struct PlayerStat>                                    HandInStolenPlayerStats;                           // 0x570(0x10)
	TArray<struct PlayerStat>                                    HandInStolenFromPlayerStats;                       // 0x580(0x10)
	TArray<struct PlayerStat>                                    HandInGiftPlayerStats;                             // 0x590(0x10)
	TArray<struct PlayerStat>                                    HandInAsPirateLegendPlayerStats;                   // 0x5a0(0x10)
	TArray<struct PlayerStat>                                    HandInOnSchedulePlayerStats;                       // 0x5b0(0x10)
	TArray<struct PlayerStat>                                    HandInAsPirateLegendOnSchedulePlayerStats;         // 0x5c0(0x10)
	TArray<struct EmissaryBootyItemStats>                        HandInAsEmissaryPlayerStats;                       // 0x5d0(0x10)
	TArray<struct EmissaryBootyItemStats>                        HandInAsMaxLevelEmissaryPlayerStats;               // 0x5e0(0x10)
	TArray<struct EmissaryBootyItemStats>                        HandInStolenAsEmissaryPlayerStats;                 // 0x5f0(0x10)
	TArray<struct EmissaryBootyItemStats>                        HandInStolenAsMaxLevelEmissaryPlayerStats;         // 0x600(0x10)
	TArray<struct PlayerStat>                                    UsePlayerStats;                                    // 0x610(0x10)
	TArray<struct PlayerStat>                                    UseStolenPlayerStats;                              // 0x620(0x10)
	struct CompanyBootyStatList                                  CompanySpecificStats;                              // 0x630(0x10)
	struct ConditionalHandInStat                                 ConditionalHandInStat;                             // 0x640(0x20)
	class PopUpMessageDesc*                                      DiscoveredPopupDesc;                               // 0x660(0x8)
	struct BootyItemSellPrerequisites                            SellPrerequisites;                                 // 0x668(0x10)
	class TrackedOwnerComponent*                                 TrackedOwnerComponent;                             // 0x678(0x8)
	class ItemQualityComponent*                                  ItemQualityComponent;                              // 0x680(0x8)
	TArray<struct PerComanyItemQualityEntry>                     CompanySpecificItemQualityLevel;                   // 0x688(0x10)
	struct RewardId                                              HandInRewardId;                                    // 0x698(0x8)
	struct FName                                                 Rarity;                                            // 0x6a0(0x8)
	TArray<struct CompanySpecificBootyReward>                    HandInRewardIdCompanySpecific;                     // 0x6a8(0x10)
	class UClass*                                                AwardAllegianceToFaction;                          // 0x6b8(0x8)
	class UClass*                                                CargoRunXPOverrideCompany;                         // 0x6c0(0x8)
	char                                                         ItemQualityLevel;                                  // 0x6c8(0x1)
	bool                                                         RewardToOwnCrewOnly;                               // 0x6c9(0x1)
	bool                                                         ShouldTrackOwnership;                              // 0x6ca(0x1)
	char                                                         SpawnSource;                                       // 0x6cb(0x1)
	char                                                         pad0x1c_26D0H[0x1c];                               // 0x6cc(0x1c)
	class DeliverableComponent*                                  DeliverableComponent;                              // 0x6e8(0x8)
	class CrewOwnershipTrackingComponent*                        CrewOwnershipTrackingComponent;                    // 0x6f0(0x8)
	class BootyItemShipOwnershipComponent*                       BootyItemShipOwnershipComponent;                   // 0x6f8(0x8)
	char                                                         pad0x40_KNYDD[0x40];                               // 0x700(0x40)
};


// Size 0xb0 (Full Size[0x8a0] - InheritedSize[0x7f0]
class Tankard: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x18_6TN3B[0x18];                               // 0x7f0(0x18)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x808(0x8)
	class WwiseEvent*                                            StartDrinkingSfx;                                  // 0x810(0x8)
	class WwiseEvent*                                            StopDrinkingSfx;                                   // 0x818(0x8)
	class WwiseEvent*                                            SfxRefill;                                         // 0x820(0x8)
	class WwiseEvent*                                            SfxTankardOnRaised;                                // 0x828(0x8)
	class WwiseEvent*                                            SfxTankardOnEquipWhenFullOverride;                 // 0x830(0x8)
	class WwiseEvent*                                            SfxTankardOnUnequipWhenFullOverride;               // 0x838(0x8)
	class WwiseEvent*                                            SfxTankardSloshOnLandingAfterJump;                 // 0x840(0x8)
	class WwiseEvent*                                            SfxTankardSloshOnFootstep;                         // 0x848(0x8)
	float                                                        TotalGasContained;                                 // 0x850(0x4)
	float                                                        AlcoholPercentage;                                 // 0x854(0x4)
	float                                                        DrinkSpeed;                                        // 0x858(0x4)
	float                                                        TotalVolume;                                       // 0x85c(0x4)
	TArray<struct TankardContentsInfo>                           TankardContentsInfo;                               // 0x860(0x10)
	class LiquidContainerComponent*                              LiquidContainer;                                   // 0x870(0x8)
	char                                                         TankardFillState;                                  // 0x878(0x1)
	char                                                         pad0x3_D6MMF[0x3];                                 // 0x879(0x3)
	float                                                        RemainingVolume;                                   // 0x87c(0x4)
	char                                                         pad0x8_H2ICV[0x8];                                 // 0x880(0x8)
	TArray<struct PlayerStat>                                    DrinkConsumedStats;                                // 0x888(0x10)
	char                                                         pad0x8_R8P6J[0x8];                                 // 0x898(0x8)
};


// Size 0x2f0 (Full Size[0xae0] - InheritedSize[0x7f0]
class PocketWatch: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x8_HS7RO[0x8];                                 // 0x7f0(0x8)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x800(0x8)
	class WwiseEmitterComponent*                                 AudioEmitter;                                      // 0x808(0x8)
	struct PocketWatchHandParams                                 MinuteHandParams;                                  // 0x810(0x68)
	struct PocketWatchHandParams                                 HourHandParams;                                    // 0x878(0x68)
	struct PocketWatchDateDisplay                                DateDisplay;                                       // 0x8e0(0x20)
	char                                                         pad0x18_EEV2B[0x18];                               // 0x900(0x18)
	class MaterialInstanceDynamic*                               FirstPersonMeshDynamicMaterialInstance;            // 0x918(0x8)
	class MaterialInstanceDynamic*                               ThirdPersonMeshDynamicMaterialInstance;            // 0x920(0x8)
	class WwiseEvent*                                            DateSwitchSFX;                                     // 0x928(0x8)
	class WwiseEvent*                                            MinuteHandTickSFX;                                 // 0x930(0x8)
	char                                                         pad0x10_PHZOF[0x10];                               // 0x938(0x10)
	class PocketWatchAnimationInstance*                          FirstPersonMeshAnimator;                           // 0x948(0x8)
	class PocketWatchAnimationInstance*                          ThirdPersonMeshAnimator;                           // 0x950(0x8)
	class PocketWatchAnimationInstance*                          CurrentMeshAnimator;                               // 0x958(0x8)
	char                                                         pad0x180_MJGJU[0x180];                             // 0x960(0x180)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateAIState: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	char                                                         TargetState;                                       // 0x3c(0x1)
	char                                                         pad0x3_UXWHY[0x3];                                 // 0x3d(0x3)
};


// Size 0x20 (Full Size[0x860] - InheritedSize[0x840]
class CollectorsChestWieldableItemWithOpenableComponent: public CollectorsChestWieldableItemBase
{
public:
	class OpenableItemComponent*                                 OpenableItemComponent;                             // 0x838(0x8)
	float                                                        GobbleTime;                                        // 0x840(0x4)
	char                                                         pad0x4_PT3X4[0x4];                                 // 0x844(0x4)
	class WwiseEvent*                                            PickupAndStoreItemSound;                           // 0x848(0x8)
	char                                                         pad0x10_7EUI9[0x10];                               // 0x850(0x10)
};


// Size 0x30 (Full Size[0x3e0] - InheritedSize[0x3b0]
class AlwaysRelevantPlayerNameplateComponent: public PlayerNameplateComponent
{
public:
	class AthenaPlayerState*                                     PlayerStatePtr;                                    // 0x3a8(0x8)
	char                                                         pad0x30_GFAL3[0x30];                               // 0x3b0(0x30)
};


// Size 0x0 (Full Size[0x118] - InheritedSize[0x118]
class NPCDialogOptionDialogSelectDynamic: public NPCDialogOptionDialogSelect
{
public:
};


// Size 0xb0 (Full Size[0x6e8] - InheritedSize[0x638]
class CoherentUIGTInGameMenusComponent: public CoherentBaseHUDComponent
{
public:
	char                                                         pad0xb0_EDUUQ[0xb0];                               // 0x638(0xb0)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateIsTrue: public NPCDialogPredicate
{
public:
	struct FName                                                 ParameterName;                                     // 0x38(0x8)
};


// Size 0xe8 (Full Size[0x5d0] - InheritedSize[0x4e8]
class CapstanArm: public ControllableObject
{
public:
	char                                                         pad0x10_5HS7Q[0x10];                               // 0x4e8(0x10)
	class StaticMeshMemoryConstraintComponent*                   MeshComponent;                                     // 0x4f8(0x8)
	class ControllableIntentComponent*                           IntentComponent;                                   // 0x500(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x508(0x8)
	class RepairableComponent*                                   RepairableComponent;                               // 0x510(0x8)
	struct StringAssetReference                                  IntactHandleMesh;                                  // 0x518(0x10)
	class StaticMesh*                                            BrokenHandleMesh;                                  // 0x528(0x8)
	class StaticMesh*                                            RepairedHandleMesh;                                // 0x530(0x8)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x538(0x8)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializerForIntactArm;                    // 0x540(0x8)
	struct FText                                                 UseCapstanArmToolTipText;                          // 0x548(0x38)
	struct FText                                                 ObjectDisplayName;                                 // 0x580(0x38)
	char                                                         pad0x18_07WNY[0x18];                               // 0x5b8(0x18)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class LoreBookItemsDataAsset: public IslandItemDataAsset
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DoesCompanyNPCNameContainStatCondition: public TargetedStatCondition
{
public:
	struct FName                                                 CompanyNPCNameSubString;                           // 0x30(0x8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsQuestTypeStatCondition: public TargetedStatCondition
{
public:
	char                                                         QuestType;                                         // 0x30(0x1)
	char                                                         pad0x7_V0S3Z[0x7];                                 // 0x31(0x7)
};


// Size 0x138 (Full Size[0x620] - InheritedSize[0x4e8]
class CombinationLockMechanismTrigger: public ControllableObject
{
public:
	char                                                         pad0x28_F4VYU[0x28];                               // 0x4e8(0x28)
	class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x510(0x8)
	class WwiseEvent*                                            DockingSFX;                                        // 0x518(0x8)
	class WwiseEvent*                                            LockedSFX;                                         // 0x520(0x8)
	class WwiseEvent*                                            UnlockedSFX;                                       // 0x528(0x8)
	class WwiseEvent*                                            RotateSFX;                                         // 0x530(0x8)
	class WwiseEvent*                                            OpenSFX;                                           // 0x538(0x8)
	struct FText                                                 CanInteractText;                                   // 0x540(0x38)
	float                                                        DelayBeforeUndocking;                              // 0x578(0x4)
	char                                                         pad0x4_Q8OR2[0x4];                                 // 0x57c(0x4)
	TArray<int>                                                  Sequence;                                          // 0x580(0x10)
	char                                                         StartDirection;                                    // 0x590(0x1)
	char                                                         pad0x7_2KV9L[0x7];                                 // 0x591(0x7)
	class SceneComponent*                                        PlayerPositionComponent;                           // 0x598(0x8)
	class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x5a0(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x5a8(0x8)
	class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x5b0(0x8)
	struct FText                                                 DisplayName;                                       // 0x5b8(0x38)
	float                                                        MoveKeyThreshold;                                  // 0x5f0(0x4)
	float                                                        MovementCooldown;                                  // 0x5f4(0x4)
	int                                                          MaxPinCode;                                        // 0x5f8(0x4)
	int                                                          CurrentPinCode;                                    // 0x5fc(0x4)
	char                                                         CurrentDirection;                                  // 0x600(0x1)
	char                                                         pad0x1f_DW6FR[0x1f];                               // 0x601(0x1f)
};


// Size 0x0 (Full Size[0xb0] - InheritedSize[0xb0]
class GrantPagesWithPriorityFromBundleStepDesc: public GrantPagesStepFromBundleDesc
{
public:
};


// Size 0x28 (Full Size[0x58] - InheritedSize[0x30]
class PlayerOnIslandTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<char>                                                 IslandTypes;                                       // 0x30(0x10)
	char                                                         pad0x18_2MLX9[0x18];                               // 0x40(0x18)
};


// Size 0x150 (Full Size[0x2b0] - InheritedSize[0x160]
class TrinketBoxViewModelComponent: public PossessionsChestViewModel
{
public:
	struct StringAssetReference                                  UnequipActionIcon;                                 // 0x160(0x10)
	struct FText                                                 TrinketsLockedByCaptainDescription;                // 0x170(0x38)
	struct FText                                                 ScrambledTrinketOwnerName;                         // 0x1a8(0x38)
	char                                                         pad0x68_ATSUU[0x68];                               // 0x1e0(0x68)
	TArray<class Class*>                                         Categories;                                        // 0x248(0x10)
	bool                                                         AllCategoriesTabWasRequested;                      // 0x258(0x1)
	char                                                         pad0x7_6FVG3[0x7];                                 // 0x259(0x7)
	class TrinketSettings*                                       TrinketSettings;                                   // 0x260(0x8)
	char                                                         pad0x48_HXJ21[0x48];                               // 0x268(0x48)
};


// Size 0x28 (Full Size[0x188] - InheritedSize[0x160]
class ArmoryChestViewModelComponent: public PossessionsChestViewModel
{
public:
	char                                                         pad0x10_IUC9I[0x10];                               // 0x160(0x10)
	TArray<class Class*>                                         Categories;                                        // 0x170(0x10)
	bool                                                         IncludeAllCategory;                                // 0x180(0x1)
	char                                                         pad0x7_CI44B[0x7];                                 // 0x181(0x7)
};


// Size 0x10 (Full Size[0x4f8] - InheritedSize[0x4e8]
class ControllablePulley: public ControllableObject
{
public:
	char                                                         pad0x8_4ZMVE[0x8];                                 // 0x4e8(0x8)
	class ControllableIntentComponent*                           IntentComponent;                                   // 0x4f0(0x8)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class PetEntitlementDesc: public PetEntitlementBaseDesc
{
public:
	struct AIPartId                                              PetPartId;                                         // 0xc8(0x8)
	class UClass*                                                RelatedPetDesc;                                    // 0xd0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NPCDialogAndExpression: public NPCDialogBinaryExpression
{
public:
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class NPCDialogPredicateHasEmblem: public NPCDialogPredicate
{
public:
	struct FName                                                 EmblemName;                                        // 0x38(0x8)
	char                                                         pad0x18_9196F[0x18];                               // 0x40(0x18)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class ControllableObjectNamedContextualOpenRadialAction: public OpenRadialAction
{
public:
};


// Size 0x8 (Full Size[0x128] - InheritedSize[0x120]
class QuestBookItemDesc: public ItemDesc
{
public:
	class QuestBookPageList*                                     PageList;                                          // 0x120(0x8)
};


// Size 0x168 (Full Size[0x8a0] - InheritedSize[0x738]
class TrapProjectile: public CannonProjectile
{
public:
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x738(0x8)
	class SimpleOverlapComponent*                                SimpleOverlapComponent;                            // 0x740(0x8)
	class MeshRotatorComponent*                                  MeshRotatorComponent;                              // 0x748(0x8)
	struct StringAssetReference                                  ThrownInExclusionZonePopUpMessageDescDataAsset;    // 0x750(0x10)
	class SphereComponent*                                       CollisionSphere;                                   // 0x760(0x8)
	char                                                         pad0x138_B4CDU[0x138];                             // 0x768(0x138)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class ConsumableItemCategory: public ItemCategory
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class WasProjectileFiredFromTypeOfActorStatCondition: public TargetedStatCondition
{
public:
	char                                                         ProjectileFiredFromType;                           // 0x30(0x1)
	char                                                         pad0x7_7DOLA[0x7];                                 // 0x31(0x7)
};


// Size 0x60 (Full Size[0x560] - InheritedSize[0x500]
class LanternWieldableReplica: public StaticMeshWieldableReplica
{
public:
	bool                                                         CanApplyFlameOfFate;                               // 0x500(0x1)
	char                                                         pad0x3_XVBFH[0x3];                                 // 0x501(0x3)
	struct LinearColor                                           LanternLightColour;                                // 0x504(0x10)
	struct LinearColor                                           LanternGlowColour;                                 // 0x514(0x10)
	struct LinearColor                                           LanternFlameColour;                                // 0x524(0x10)
	char                                                         pad0x4_F4YRM[0x4];                                 // 0x534(0x4)
	class SpotLightComponent*                                    LightComponent;                                    // 0x538(0x8)
	class AmbientLightSourceComponent*                           AmbientLightSourceComponent;                       // 0x540(0x8)
	char                                                         pad0x18_DYNPD[0x18];                               // 0x548(0x18)
};


// Size 0x568 (Full Size[0x9a0] - InheritedSize[0x438]
class Mermaid: public InteractableObject
{
public:
	char                                                         pad0x28_L34ZS[0x28];                               // 0x438(0x28)
	class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0x460(0x8)
	char                                                         pad0x8_KOJ7L[0x8];                                 // 0x468(0x8)
	struct WaterBuoyancy                                         Buoyancy;                                          // 0x470(0x140)
	class CurveFloat*                                            BuoyancyScalarWhenDisappearing;                    // 0x5b0(0x8)
	struct FName                                                 InteractionSocket;                                 // 0x5b8(0x8)
	struct FName                                                 ClientWorldHitsCollisionProfile;                   // 0x5c0(0x8)
	struct FName                                                 TorchVfxSocketName;                                // 0x5c8(0x8)
	struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x5d0(0x1c)
	char                                                         pad0x4_XMR3H[0x4];                                 // 0x5ec(0x4)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x5f0(0x8)
	class Object*                                                BeaconVfx;                                         // 0x5f8(0x8)
	class Object*                                                BeaconVfxUnderwater;                               // 0x600(0x8)
	class Object*                                                SurfacingSplash;                                   // 0x608(0x8)
	class Object*                                                DiveSplash;                                        // 0x610(0x8)
	class Object*                                                TorchVfx;                                          // 0x618(0x8)
	class WwiseEvent*                                            PlaySongEvent;                                     // 0x620(0x8)
	class WwiseEvent*                                            StopSongEvent;                                     // 0x628(0x8)
	class WwiseEvent*                                            PlayTorchCrackleFx;                                // 0x630(0x8)
	class WwiseEvent*                                            StopTorchCrackleFx;                                // 0x638(0x8)
	class WwiseEvent*                                            SurfacingAudioEvent;                               // 0x640(0x8)
	class WwiseEvent*                                            DiveAudioEvent;                                    // 0x648(0x8)
	class WwiseEvent*                                            TeleportSfxEvent;                                  // 0x650(0x8)
	TArray<struct MermaidAnimMapping>                            AnimMap;                                           // 0x658(0x10)
	float                                                        ChoppinessScalar;                                  // 0x668(0x4)
	float                                                        MinProximityToWaterSurfaceToConsiderSurfaced;      // 0x66c(0x4)
	float                                                        MinDistanceFromEdgeOfWorld;                        // 0x670(0x4)
	float                                                        LowestZToDestroySelf;                              // 0x674(0x4)
	float                                                        MaxDisappearTime;                                  // 0x678(0x4)
	float                                                        TimeIntoDiveToPlayFx;                              // 0x67c(0x4)
	float                                                        FacePlayerSpringAccel;                             // 0x680(0x4)
	float                                                        GlueToWaterSurfaceSpringAccel;                     // 0x684(0x4)
	float                                                        BlendToWaterSurfaceTimeWhenSurfacing;              // 0x688(0x4)
	float                                                        BlendAwayFromWaterSurfaceTimeWhenDiving;           // 0x68c(0x4)
	float                                                        PreferredWaterSubmersionOfModel;                   // 0x690(0x4)
	float                                                        CollisionRetainTime;                               // 0x694(0x4)
	float                                                        MaxTimeCollidingWithLandUntilDestroy;              // 0x698(0x4)
	float                                                        MaxTimeCollidingWithShipUntilDestroy;              // 0x69c(0x4)
	float                                                        MaxZOutOfWaterToCountAsOutOfWaterWhenHittingShip;  // 0x6a0(0x4)
	char                                                         pad0x4_QQ271[0x4];                                 // 0x6a4(0x4)
	class SkeletalMeshMemoryConstraintComponent*                 Mesh;                                              // 0x6a8(0x8)
	bool                                                         bGlueToSurface;                                    // 0x6b0(0x1)
	char                                                         pad0x1f_55XMS[0x1f];                               // 0x6b1(0x1f)
	class PrimitiveComponent*                                    PrimitiveRootComponent;                            // 0x6d0(0x8)
	char                                                         pad0x58_HN0YQ[0x58];                               // 0x6d8(0x58)
	class ParticleSystemComponent*                               BeaconParticleSystem;                              // 0x730(0x8)
	class ParticleSystemComponent*                               UnderwaterBeaconParticleSystem;                    // 0x738(0x8)
	class ParticleSystemComponent*                               TorchParticleSystem;                               // 0x740(0x8)
	struct NetTimeStampCalculator                                MovementTimestamp;                                 // 0x748(0x70)
	char                                                         MermaidState;                                      // 0x7b8(0x1)
	char                                                         pad0x1e7_8RHOZ[0x1e7];                             // 0x7b9(0x1e7)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateReadAllOf: public NPCDialogPredicate
{
public:
	struct FString                                               SectionName;                                       // 0x38(0x10)
};


// Size 0xf0 (Full Size[0x528] - InheritedSize[0x438]
class SkeletonFortDoor: public InteractableObject
{
public:
	float                                                        DoorDelayTime;                                     // 0x438(0x4)
	float                                                        AmountDoorOpens;                                   // 0x43c(0x4)
	float                                                        DoorOpeningSpeed;                                  // 0x440(0x4)
	char                                                         pad0x4_WORL5[0x4];                                 // 0x444(0x4)
	class UClass*                                                ItemToWieldToUnlockDoor;                           // 0x448(0x8)
	struct PlayerStat                                            PlayerStatToFireOnOpen;                            // 0x450(0x4)
	struct PlayerStat                                            PlayerAllianceStatToFireOnOpen;                    // 0x454(0x4)
	bool                                                         FireStatToAllNearbyCrews;                          // 0x458(0x1)
	char                                                         pad0x3_8EEXW[0x3];                                 // 0x459(0x3)
	struct FName                                                 ExplosivesActivationKey;                           // 0x45c(0x8)
	char                                                         pad0x14_K5KSB[0x14];                               // 0x464(0x14)
	class StaticMeshComponent*                                   DoorMesh;                                          // 0x478(0x8)
	TArray<struct LandmarkReactionKeyFrame>                      LandmarkReactionsWhenDoorOpens;                    // 0x480(0x10)
	class LandmarkReactionPlayer*                                LandmarkReactionPlayer;                            // 0x490(0x8)
	class InteractableComponent*                                 InteractionRegion;                                 // 0x498(0x8)
	class WwiseEvent*                                            DoorUnlockSound;                                   // 0x4a0(0x8)
	class WwiseObjectPoolWrapper*                                DoorUnlockPool;                                    // 0x4a8(0x8)
	struct FName                                                 KeyMountLocation;                                  // 0x4b0(0x8)
	float                                                        KeyMountTime;                                      // 0x4b8(0x4)
	float                                                        KeyDestroyTime;                                    // 0x4bc(0x4)
	TArray<struct PlayerStat>                                    AdditionalPlayerStatsToFireOnOpen;                 // 0x4c0(0x10)
	char                                                         ServerDoorState;                                   // 0x4d0(0x1)
	char                                                         pad0x7_ZNBBQ[0x7];                                 // 0x4d1(0x7)
	class UClass*                                                OverrideItemToWieldToUnlockDoor;                   // 0x4d8(0x8)
	char                                                         pad0x48_OXGK7[0x48];                               // 0x4e0(0x48)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class IsTargetAllianceMemberStatCondition: public TargetedStatCondition
{
public:
	char                                                         pad0x18_PQEKA[0x18];                               // 0x30(0x18)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WieldedItemNamedContextualOpenRadialAction: public OpenRadialAction
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CalculatedMemoryReservationInformationMesh: public CalculatedMemoryReservationInformationBase
{
public:
};


// Size 0x10 (Full Size[0x168] - InheritedSize[0x158]
class InlineVotingInteractionComponent: public VotingInteractionComponentBase
{
public:
	TArray<struct InlineVotingParameterSet>                      VotingParameters;                                  // 0x158(0x10)
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class PlayerBuriedItemsMapBundleItemInfo: public NonStorableItemInfo
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsVoyageOfCompanyTypeStatCondition: public TargetedStatCondition
{
public:
	class UClass*                                                VoyageCompanyType;                                 // 0x30(0x8)
};


// Size 0x270 (Full Size[0x660] - InheritedSize[0x3f0]
class CoherentUIGTTooltipComponent: public CoherentUIGTAtlasComponent
{
public:
	int                                                          TooltipSpacing;                                    // 0x3f0(0x4)
	float                                                        NormalisedScreenSpaceTooltipPositionY;             // 0x3f4(0x4)
	char                                                         pad0x268_SYFAW[0x268];                             // 0x3f8(0x268)
};


// Size 0x0 (Full Size[0x5a0] - InheritedSize[0x5a0]
class IslandItemSpawnComponentMock: public IslandItemSpawnComponent
{
public:
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class SirenTridentShotComponentAudioParams: public LaunchableShotComponentAudioParams
{
public:
	class WwiseEvent*                                            ChangeProjectileTierEvent;                         // 0x70(0x8)
	struct FName                                                 DamageLevelAudioSwitchName;                        // 0x78(0x8)
	char                                                         pad0x8_29IVG[0x8];                                 // 0x80(0x8)
};


// Size 0x18 (Full Size[0x168] - InheritedSize[0x150]
class TaleQuestSpawnAIDioramaStep: public TaleQuestSpawnAIStep
{
public:
	class AIDioramaController*                                   DioramaController;                                 // 0x150(0x8)
	class Actor*                                                 WaveSpawnLocationActor;                            // 0x158(0x8)
	char                                                         pad0x8_FRHWA[0x8];                                 // 0x160(0x8)
};


// Size 0x38 (Full Size[0x78] - InheritedSize[0x40]
class MechanismAnimationEvent_VFX: public MechanismAnimationEvent
{
public:
	class ParticleSystemComponent*                               CachedParticleSystem;                              // 0x40(0x8)
	class SceneComponent*                                        CachedAttachParent;                                // 0x48(0x8)
	char                                                         pad0x28_ZOXTT[0x28];                               // 0x50(0x28)
};


// Size 0x80 (Full Size[0xa70] - InheritedSize[0x9f0]
class TinyShark: public SharkPawn
{
public:
	char                                                         pad0x18_P5VAB[0x18];                               // 0x9f0(0x18)
	TArray<struct Vector>                                        AITargetVisibilityPoints;                          // 0xa08(0x10)
	float                                                        TargetBoxHeightMultiplier;                         // 0xa18(0x4)
	float                                                        TargetBoxZOffsetMultiplier;                        // 0xa1c(0x4)
	class UClass*                                                ProxyClass;                                        // 0xa20(0x8)
	char                                                         pad0x8_O4H7N[0x8];                                 // 0xa28(0x8)
	class LootSpawnParamsDataAsset*                              ItemLootSpawnParams;                               // 0xa30(0x8)
	class LootSpawnParamsDataAsset*                              FoodLootSpawnParams;                               // 0xa38(0x8)
	TArray<class LootSpawnParamsDataAsset*>                      MegaStashLootSpawnParams;                          // 0xa40(0x10)
	float                                                        MegaStashSpawnChance;                              // 0xa50(0x4)
	char                                                         pad0x1c_021MT[0x1c];                               // 0xa54(0x1c)
};


// Size 0x8 (Full Size[0x70] - InheritedSize[0x68]
class WaitInWaterloggedStateShipSinkingHandler: public SimpleShipSinkingHandler
{
public:
	float                                                        TimeHaltedBeforeSinking;                           // 0x68(0x4)
	char                                                         pad0x4_BIP2H[0x4];                                 // 0x6c(0x4)
};


// Size 0x30 (Full Size[0x70] - InheritedSize[0x40]
class MechanismAnimationEvent_ContinuousAudio: public MechanismAnimationEvent
{
public:
	class WwiseEvent*                                            StartEvent;                                        // 0x40(0x8)
	class WwiseEvent*                                            StopEvent;                                         // 0x48(0x8)
	float                                                        StartTime;                                         // 0x50(0x4)
	float                                                        StopTime;                                          // 0x54(0x4)
	char                                                         pad0x18_AVAJB[0x18];                               // 0x58(0x18)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class QuestItemCategory: public ItemCategory
{
public:
};


// Size 0xd0 (Full Size[0x5f0] - InheritedSize[0x520]
class PivotAnimatedMechanismAction: public SimpleAnimatedMechanismAction
{
public:
	char                                                         pad0x10_W452N[0x10];                               // 0x520(0x10)
	class SceneComponent*                                        Pivot;                                             // 0x530(0x8)
	bool                                                         TransformPivotOnClient;                            // 0x538(0x1)
	bool                                                         UseVirtualPivotTransformOnServer;                  // 0x539(0x1)
	char                                                         pad0x6_H93EW[0x6];                                 // 0x53a(0x6)
	struct MechanismFloatAnimationCurve                          Animation;                                         // 0x540(0x8)
	char                                                         pad0x10_H5F3Z[0x10];                               // 0x548(0x10)
	struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x558(0x60)
	char                                                         pad0x38_D5G54[0x38];                               // 0x5b8(0x38)
};


// Size 0x180 (Full Size[0x5b8] - InheritedSize[0x438]
class InteractableLight: public InteractableObject
{
public:
	char                                                         pad0x10_4YHL2[0x10];                               // 0x438(0x10)
	class InteractableLightParameters*                           InteractableLightParameters;                       // 0x448(0x8)
	class WwiseEvent*                                            SfxSwitchOn;                                       // 0x450(0x8)
	class WwiseEvent*                                            SfxSwitchOff;                                      // 0x458(0x8)
	class WwiseEvent*                                            SfxSetFlame;                                       // 0x460(0x8)
	class WwiseEvent*                                            PlaySfxFlameLoop;                                  // 0x468(0x8)
	class WwiseEvent*                                            StopSfxFlameLoop;                                  // 0x470(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x478(0x8)
	struct FName                                                 SfxEmitterName;                                    // 0x480(0x8)
	float                                                        InteractionRadius;                                 // 0x488(0x4)
	char                                                         pad0x1_2D6LH[0x1];                                 // 0x48c(0x1)
	struct LightData                                             LightData;                                         // 0x48d(0x3)
	struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x490(0xa0)
	char                                                         pad0x88_ALKU0[0x88];                               // 0x530(0x88)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateOnTutorialStep: public NPCDialogPredicate
{
public:
	struct FName                                                 TutorialStepName;                                  // 0x38(0x8)
};


// Size 0x108 (Full Size[0x540] - InheritedSize[0x438]
class Bell: public InteractableObject
{
public:
	class ReplicatedShipPartCustomizationComponent*              CustomisationComponent;                            // 0x438(0x8)
	struct BellPlayerStats                                       PlayerStats;                                       // 0x440(0x10)
	class InteractableComponent*                                 InteractableComponent;                             // 0x450(0x8)
	class StaticMeshComponent*                                   BellMeshComponent;                                 // 0x458(0x8)
	class WwiseEvent*                                            BellRingSFX;                                       // 0x460(0x8)
	class WwiseEvent*                                            BellRingSfxStorm;                                  // 0x468(0x8)
	struct FText                                                 BellName;                                          // 0x470(0x38)
	float                                                        TimeBetweenTurbulenceChecks;                       // 0x4a8(0x4)
	float                                                        MinIntervalBetweenRingsLowerBound;                 // 0x4ac(0x4)
	float                                                        MinIntervalBetweenRingsUpperBound;                 // 0x4b0(0x4)
	float                                                        MaxIntervalBetweenRingsLowerBound;                 // 0x4b4(0x4)
	float                                                        MaxIntervalBetweenRingsUpperBound;                 // 0x4b8(0x4)
	char                                                         pad0x4_R9XDG[0x4];                                 // 0x4bc(0x4)
	class WwiseObjectPoolWrapper*                                BellPool;                                          // 0x4c0(0x8)
	struct Vector                                                EmitterOffset;                                     // 0x4c8(0xc)
	char                                                         pad0x4_IEXAD[0x4];                                 // 0x4d4(0x4)
	class MaterialInstanceDynamic*                               BellDynamicMaterial;                               // 0x4d8(0x8)
	int                                                          BellMaterialIndex;                                 // 0x4e0(0x4)
	char                                                         pad0x5c_ZKQ1C[0x5c];                               // 0x4e4(0x5c)
};


// Size 0x60 (Full Size[0x498] - InheritedSize[0x438]
class CapstanRelease: public InteractableObject
{
public:
	class StaticMeshMemoryConstraintComponent*                   MeshComponent;                                     // 0x438(0x8)
	struct FName                                                 TooltipSocket;                                     // 0x440(0x8)
	float                                                        ReleaseTime;                                       // 0x448(0x4)
	char                                                         pad0x44_VN74E[0x44];                               // 0x44c(0x44)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x490(0x8)
};


// Size 0xc0 (Full Size[0x698] - InheritedSize[0x5d8]
class SwitchMechanismTriggerForPuzzleManager: public SwitchMechanismTrigger
{
public:
	char                                                         pad0x10_9ANY5[0x10];                               // 0x5d8(0x10)
	class Object*                                                PuzzleManagerPolicy;                               // 0x5e8(0x8)
	bool                                                         DisableSwitchInteraction;                          // 0x5f0(0x1)
	char                                                         pad0xa7_3QX2N[0xa7];                               // 0x5f1(0xa7)
};


// Size 0x0 (Full Size[0xb0] - InheritedSize[0xb0]
class EmoteCategory: public ClothingCategory
{
public:
};


// Size 0x68 (Full Size[0x4a0] - InheritedSize[0x438]
class MusicBox: public InteractableObject
{
public:
	class InteractableComponent*                                 InteractableComponent;                             // 0x438(0x8)
	class SceneComponent*                                        RootSceneComponent;                                // 0x440(0x8)
	class SkeletalMeshComponent*                                 MeshComponent;                                     // 0x448(0x8)
	class WwiseEvent*                                            SfxMusic;                                          // 0x450(0x8)
	class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x458(0x8)
	struct FName                                                 SfxEmitterName;                                    // 0x460(0x8)
	bool                                                         IsPlaying;                                         // 0x468(0x1)
	char                                                         pad0x37_OJ5LU[0x37];                               // 0x469(0x37)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateGroupAIState: public NPCDialogPredicate
{
public:
	char                                                         TargetState;                                       // 0x38(0x1)
	char                                                         pad0x7_JNFK6[0x7];                                 // 0x39(0x7)
};


// Size 0x60 (Full Size[0x2830] - InheritedSize[0x27d0]
class AthenaTavernPlayerCharacter: public AthenaPlayerCharacter
{
public:
	class AICreatureMovementModifierParamsDataAsset*             ArenaTavernPetMovementData;                        // 0x27c8(0x8)
	char                                                         pad0x30_SOP3X[0x30];                               // 0x27d0(0x30)
	class AthenaPlayerController*                                PlayerController;                                  // 0x2800(0x8)
	char                                                         pad0x20_KDXRB[0x20];                               // 0x2808(0x20)
	bool                                                         VoteForRivalsHasPassed;                            // 0x2828(0x1)
	char                                                         pad0x7_GOIUS[0x7];                                 // 0x2829(0x7)
};


// Size 0x60 (Full Size[0x498] - InheritedSize[0x438]
class StorageContainer: public InteractableObject
{
public:
	char                                                         pad0x8_P3PUK[0x8];                                 // 0x438(0x8)
	class StaticMeshComponent*                                   Mesh;                                              // 0x440(0x8)
	class InteractableComponent*                                 InteractionRegion;                                 // 0x448(0x8)
	char                                                         pad0x14_AJXJM[0x14];                               // 0x450(0x14)
	char                                                         TrackedActorType;                                  // 0x464(0x1)
	char                                                         pad0x33_OQAZ5[0x33];                               // 0x465(0x33)
};


// Size 0x20 (Full Size[0xf0] - InheritedSize[0xd0]
class TitleDesc: public ClothingDesc
{
public:
	TArray<struct TitleDescIconEntry>                            IconInvPathOverride;                               // 0xd0(0x10)
	TArray<struct TitleDescIconEntry>                            IconPrvPathOverride;                               // 0xe0(0x10)
};


// Size 0x38 (Full Size[0x528] - InheritedSize[0x4f0]
class ShipFlagCustomizationChestInteraction: public ShipCustomizationChestInteraction
{
public:
	TArray<class Class*>                                         CategoriesToSave;                                  // 0x4f0(0x10)
	char                                                         pad0x28_IOHW4[0x28];                               // 0x500(0x28)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WashedUpItemDataAsset: public IslandItemDataAsset
{
public:
};


// Size 0x40 (Full Size[0x830] - InheritedSize[0x7f0]
class SpeakingTrumpet: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_NX3N4[0x8];                                 // 0x7f0(0x8)
	float                                                        LoudVoiceAttenuationScaler;                        // 0x7f8(0x4)
	float                                                        QuietVoiceAttenuationScaler;                       // 0x7fc(0x4)
	float                                                        NonVerbalBroadcastRadiusScaler;                    // 0x800(0x4)
	float                                                        QuietNonVerbalBroadcastRadiusScaler;               // 0x804(0x4)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x808(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x810(0x8)
	char                                                         pad0x18_0TTVS[0x18];                               // 0x818(0x18)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsQuestMapOverriddenStatCondition: public TargetedStatCondition
{
public:
	TArray<class Class*>                                         ValidMaps;                                         // 0x30(0x10)
};


// Size 0x78 (Full Size[0x560] - InheritedSize[0x4e8]
class ProtoTavernPiano: public ControllableObject
{
public:
	class StaticMeshComponent*                                   PianoMesh;                                         // 0x4e8(0x8)
	struct FText                                                 DisplayName;                                       // 0x4f0(0x38)
	class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x528(0x8)
	char                                                         pad0x30_N3FOY[0x30];                               // 0x530(0x30)
};


// Size 0xe8 (Full Size[0x5d0] - InheritedSize[0x4e8]
class PlayerLoadingInteractionPoint: public ControllableObject
{
public:
	char                                                         pad0x10_10NJ3[0x10];                               // 0x4e8(0x10)
	struct Vector                                                InteractionBounds;                                 // 0x4f8(0xc)
	struct FName                                                 ThirdPersonMeshSocketAttachName;                   // 0x504(0x8)
	struct FName                                                 FirstPersonCameraMeshSocketAttachName;             // 0x50c(0x8)
	char                                                         pad0x4_Z7W6Y[0x4];                                 // 0x514(0x4)
	struct FText                                                 LoadPlayerDisabledToolTipText;                     // 0x518(0x38)
	struct FText                                                 LoadingDisabledToolTipText;                        // 0x550(0x38)
	class UClass*                                                StartLoadPlayerInputId;                            // 0x588(0x8)
	class UClass*                                                StartLoadItemInputId;                              // 0x590(0x8)
	class LoadingPointComponent*                                 LoadingPointComponent;                             // 0x598(0x8)
	class InteractableComponent*                                 InteractionRegion;                                 // 0x5a0(0x8)
	class SceneComponent*                                        SceneComponent;                                    // 0x5a8(0x8)
	class PlayerNameplateLocationOverrideComponent*              PlayerNameplateLocationOverrideComponent;          // 0x5b0(0x8)
	char                                                         pad0x18_3IH5Y[0x18];                               // 0x5b8(0x18)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsRunningReapersFlagStatCondition: public TargetedStatCondition
{
public:
	bool                                                         ShouldFlagBeRaised;                                // 0x30(0x1)
	char                                                         pad0x1f_8CUA0[0x1f];                               // 0x31(0x1f)
};


// Size 0x38 (Full Size[0xc0] - InheritedSize[0x88]
class BTTask_SpawnItemForCategory: public BTTask_SpawnAndWieldItem
{
public:
	bool                                                         EnableOverrideItemCategory;                        // 0x88(0x1)
	char                                                         pad0x7_B0QL3[0x7];                                 // 0x89(0x7)
	class UClass*                                                OverrideItemCategory;                              // 0x90(0x8)
	struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x98(0x28)
};


// Size 0x10 (Full Size[0x800] - InheritedSize[0x7f0]
class TestObscuringItemActor: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x10_M2FAO[0x10];                               // 0x7f0(0x10)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateAtHealthStage: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	int                                                          HealthStage;                                       // 0x3c(0x4)
};


// Size 0xb0 (Full Size[0x4a0] - InheritedSize[0x3f0]
class CoherentUIGTTooltipDetailedComponent: public CoherentUIGTAtlasComponent
{
public:
	char                                                         pad0xb0_BBMER[0xb0];                               // 0x3f0(0xb0)
};


// Size 0x2a8 (Full Size[0x708] - InheritedSize[0x460]
class StoolItemComponent: public SeatComponent
{
public:
	struct FText                                                 InteractionTextOutsideMaxAngle;                    // 0x460(0x38)
	struct FText                                                 InteractionTextObstructed;                         // 0x498(0x38)
	struct FText                                                 InteractionTextFloating;                           // 0x4d0(0x38)
	struct FText                                                 InteractionTextShipSinking;                        // 0x508(0x38)
	struct FText                                                 InteractionTextHarpooned;                          // 0x540(0x38)
	float                                                        MaxSittingAngle;                                   // 0x578(0x4)
	float                                                        SeatedHeight;                                      // 0x57c(0x4)
	float                                                        SeatedRadius;                                      // 0x580(0x4)
	bool                                                         IsAttachedToRetractable;                           // 0x584(0x1)
	bool                                                         IsAttachedToSinkingShip;                           // 0x585(0x1)
	bool                                                         IsFloating;                                        // 0x586(0x1)
	char                                                         pad0x181_X5851[0x181];                             // 0x587(0x181)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsActorOfTeamStatCondition: public TargetedStatCondition
{
public:
	TArray<char>                                                 TargetTeams;                                       // 0x30(0x10)
};


// Size 0x128 (Full Size[0x3e8] - InheritedSize[0x2c0]
class NarratedShipDirectionComponent: public NarratedCompassDirectionComponent
{
public:
	char                                                         pad0x128_RAHMH[0x128];                             // 0x2c0(0x128)
};


// Size 0x390 (Full Size[0x7c8] - InheritedSize[0x438]
class Beacon: public InteractableObject
{
public:
	char                                                         pad0x10_0VU4E[0x10];                               // 0x438(0x10)
	class StaticMeshComponent*                                   Mesh;                                              // 0x448(0x8)
	class ParticleSystemComponent*                               BeaconActiveParticleSystem;                        // 0x450(0x8)
	class PointLightComponent*                                   PointLight;                                        // 0x458(0x8)
	bool                                                         EnableParticleSystemTint;                          // 0x460(0x1)
	char                                                         pad0x7_TWV5V[0x7];                                 // 0x461(0x7)
	class InteractableComponent*                                 InteractableComponent;                             // 0x468(0x8)
	class Object*                                                ExtinguishedVFX;                                   // 0x470(0x8)
	struct FName                                                 WwiseEmitterName;                                  // 0x478(0x8)
	class WwiseEvent*                                            StartLoopFlameSfx;                                 // 0x480(0x8)
	class WwiseEvent*                                            StopLoopFlameSfx;                                  // 0x488(0x8)
	class WwiseEvent*                                            FlameTransferSfx;                                  // 0x490(0x8)
	class WwiseEvent*                                            ExtinguishedSfx;                                   // 0x498(0x8)
	class WwiseObjectPoolWrapper*                                BeaconWwisePool;                                   // 0x4a0(0x8)
	float                                                        InteractionRadius;                                 // 0x4a8(0x4)
	char                                                         pad0x4_305D1[0x4];                                 // 0x4ac(0x4)
	struct FText                                                 TakeFlameTooltipText;                              // 0x4b0(0x38)
	struct FText                                                 CannotTakeFlameTooltipText;                        // 0x4e8(0x38)
	struct FText                                                 LanternNotRaisedToolTipText;                       // 0x520(0x38)
	struct FText                                                 NotWieldingFlameTooltipText;                       // 0x558(0x38)
	struct FText                                                 SetFlameTooltipText;                               // 0x590(0x38)
	bool                                                         CanTakeFlameFromBeacon;                            // 0x5c8(0x1)
	bool                                                         CanSetFlameOnBeacon;                               // 0x5c9(0x1)
	bool                                                         StartLit;                                          // 0x5ca(0x1)
	char                                                         StartingType;                                      // 0x5cb(0x1)
	struct PlayerStat                                            StatToFire;                                        // 0x5cc(0x4)
	TArray<struct BeaconLitWithFlameOfFateStatsToFire>           StatMap;                                           // 0x5d0(0x10)
	class CurveLinearColor*                                      ColourChangeCurveFX;                               // 0x5e0(0x8)
	class CurveLinearColor*                                      ColourChangeCurveLight;                            // 0x5e8(0x8)
	bool                                                         CanExtinguish;                                     // 0x5f0(0x1)
	char                                                         pad0x3_58FAM[0x3];                                 // 0x5f1(0x3)
	float                                                        ExtinguishFadeTime;                                // 0x5f4(0x4)
	struct BeaconData                                            BeaconData;                                        // 0x5f8(0x2)
	char                                                         pad0x6_V8F58[0x6];                                 // 0x5fa(0x6)
	class ParticleSystemComponent*                               ExtinguishFXComponent;                             // 0x600(0x8)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x608(0xa0)
	char                                                         pad0x120_J8FE1[0x120];                             // 0x6a8(0x120)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class MysteriousNoteCategory: public ItemCategory
{
public:
};


// Size 0x30 (Full Size[0x90] - InheritedSize[0x60]
class MaterialVectorParameterBlend: public MaterialParameterBlendBase
{
public:
	struct LinearColor                                           Inactive;                                          // 0x60(0x10)
	struct LinearColor                                           Active;                                            // 0x70(0x10)
	char                                                         pad0x10_7I0A4[0x10];                               // 0x80(0x10)
};


// Size 0xe90 (Full Size[0x14c8] - InheritedSize[0x638]
class CoherentUIGTHUDComponent: public CoherentBaseHUDComponent
{
public:
	class ScrambledNamesDataAsset*                               ScrambledShipNamesDataAsset;                       // 0x638(0x8)
	char                                                         pad0x40_H8N3Z[0x40];                               // 0x640(0x40)
	struct HealthUI                                              HealthUI;                                          // 0x680(0x278)
	char                                                         pad0xa98_VI75B[0xa98];                             // 0x8f8(0xa98)
	struct TimerUI                                               TimerUI;                                           // 0x1390(0x70)
	char                                                         pad0xc8_37DH9[0xc8];                               // 0x1400(0xc8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsDrunkStatCondition: public TargetedStatCondition
{
public:
	float                                                        MinimumDrunkennessRequired;                        // 0x30(0x4)
	char                                                         pad0x4_XESYD[0x4];                                 // 0x34(0x4)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateHasEntitlement: public NPCDialogPredicate
{
public:
	class UClass*                                                Entitlement;                                       // 0x38(0x8)
};


// Size 0x90 (Full Size[0x4b0] - InheritedSize[0x420]
class ShipNetProxy: public MovableNetProxy
{
public:
	class MaterialInstanceDynamic*                               EmmissaryFlagMaterial;                             // 0x420(0x8)
	char                                                         pad0x8_XLTDP[0x8];                                 // 0x428(0x8)
	TArray<class ShipInteractableLight*>                         ShipLanterns;                                      // 0x430(0x10)
	char                                                         pad0x10_CY1ZX[0x10];                               // 0x440(0x10)
	bool                                                         EmissaryFlagActive;                                // 0x450(0x1)
	char                                                         pad0x7_P8KL2[0x7];                                 // 0x451(0x7)
	struct StringAssetReference                                  EmmissaryFlagTextureReference;                     // 0x458(0x10)
	int                                                          LanternBits;                                       // 0x468(0x4)
	char                                                         pad0x44_XEIM8[0x44];                               // 0x46c(0x44)
};


// Size 0x0 (Full Size[0xa8] - InheritedSize[0xa8]
class BlueprintSpawnAIStepDefault: public BlueprintSpawnAIStepBase
{
public:
};


// Size 0x30 (Full Size[0x100] - InheritedSize[0xd0]
class EmoteDesc: public ClothingDesc
{
public:
	struct StringAssetReference                                  EmoteInfo;                                         // 0xd0(0x10)
	struct StringAssetReference                                  BackgroundPath;                                    // 0xe0(0x10)
	struct FName                                                 LookAtSocketName;                                  // 0xf0(0x8)
	struct FName                                                 OverridePreviewCameraName;                         // 0xf8(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsItemOfClassStatCondition: public TargetedStatCondition
{
public:
	class UClass*                                                ItemType;                                          // 0x30(0x8)
	bool                                                         ExactMatch;                                        // 0x38(0x1)
	char                                                         pad0x7_EO61F[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class InvalidShipCustomizationCategory: public ShipCustomizationCategory
{
public:
};


// Size 0xd0 (Full Size[0x8c0] - InheritedSize[0x7f0]
class CarvedWoodenPlank: public StaticMeshWieldableItem
{
public:
	class InventoryItemComponent*                                InventoryItem;                                     // 0x7f0(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7f8(0x8)
	float                                                        FOVBlendSpeed;                                     // 0x800(0x4)
	float                                                        TargetFOV;                                         // 0x804(0x4)
	struct ItemUseSpeedParams                                    AimSpeedParams;                                    // 0x808(0x8)
	char                                                         pad0xb0_SSNNG[0xb0];                               // 0x810(0xb0)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class MaterialScalarParameterBlend: public MaterialParameterBlendBase
{
public:
	float                                                        Inactive;                                          // 0x60(0x4)
	float                                                        Active;                                            // 0x64(0x4)
	char                                                         pad0x8_J4I3M[0x8];                                 // 0x68(0x8)
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class InvasionArrivalTunnelDependencies: public ArrivalTunnelDependencies
{
public:
	char                                                         pad0x40_2JJQX[0x40];                               // 0xd8(0x40)
};


// Size 0x110 (Full Size[0x900] - InheritedSize[0x7f0]
class StarFieldRevealerMask: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_1UP3B[0x8];                                 // 0x7f0(0x8)
	class StaticMeshComponent*                                   SkySphere;                                         // 0x7f8(0x8)
	class PostProcessComponent*                                  PostProcessComponent;                              // 0x800(0x8)
	class InventoryItemComponent*                                InventoryItemComponent;                            // 0x808(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x810(0x8)
	class RevealerComponent*                                     RevealerComponent;                                 // 0x818(0x8)
	char                                                         ReplicatedStarFieldSkySpinState;                   // 0x820(0x1)
	char                                                         pad0x3_AS924[0x3];                                 // 0x821(0x3)
	float                                                        WearMaskTransitionTime;                            // 0x824(0x4)
	char                                                         pad0x18_0470H[0x18];                               // 0x828(0x18)
	struct SkySphereMaterialParams                               SkySphereMaterialParams;                           // 0x840(0x18)
	struct MaskPostProcessParams                                 MaskPostProcessParams;                             // 0x858(0x50)
	struct StarFieldRevealerMaskAudioParams                      MaskAudioParams;                                   // 0x8a8(0x50)
	char                                                         pad0x8_EM978[0x8];                                 // 0x8f8(0x8)
};


// Size 0x18 (Full Size[0x450] - InheritedSize[0x438]
class RespawnStatue: public InteractableObject
{
public:
	class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x438(0x8)
	struct FName                                                 InteractionSocketName;                             // 0x440(0x8)
	float                                                        HoldTime;                                          // 0x448(0x4)
	char                                                         TooltipDisplayPriority;                            // 0x44c(0x1)
	char                                                         pad0x3_QFRI2[0x3];                                 // 0x44d(0x3)
};


// Size 0x10 (Full Size[0x680] - InheritedSize[0x670]
class ClientDestinationPreLoadingArrivalTunnelOfTheDamned: public ArrivalTunnelOfTheDamned
{
public:
	class ClientDestinationPreLoadingArrivalTunnelDesc*          ClientDestinationPreLoadingArrivalTunnelDesc;      // 0x670(0x8)
	char                                                         pad0x8_X4YWH[0x8];                                 // 0x678(0x8)
};


// Size 0x8 (Full Size[0x1b0] - InheritedSize[0x1a8]
class ShipDamageableComponent: public OptInDamageableComponent
{
public:
	class Actor*                                                 Ship;                                              // 0x1a8(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class MerchantCrateCategoryMock: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsTargetCrewMemberStatCondition: public TargetedStatCondition
{
public:
};


// Size 0x98 (Full Size[0x1f8] - InheritedSize[0x160]
class ClothingChestViewModelComponent: public PossessionsChestViewModel
{
public:
	TArray<struct ClothingChestRandomFilter>                     RandomFilters;                                     // 0x160(0x10)
	struct StringAssetReference                                  RandomiseIcon;                                     // 0x170(0x10)
	struct StringAssetReference                                  ClearIcon;                                         // 0x180(0x10)
	bool                                                         WithRandomiseButtons;                              // 0x190(0x1)
	bool                                                         WithClearButtons;                                  // 0x191(0x1)
	char                                                         pad0x6_TIZWS[0x6];                                 // 0x192(0x6)
	TArray<class Class*>                                         CategoriesWithClearButtonDisabled;                 // 0x198(0x10)
	TArray<class Class*>                                         CategoriesWithRandomiseButtonDisabled;             // 0x1a8(0x10)
	char                                                         pad0x20_BETTL[0x20];                               // 0x1b8(0x20)
	TArray<class Class*>                                         Categories;                                        // 0x1d8(0x10)
	bool                                                         IncludeAllCategory;                                // 0x1e8(0x1)
	char                                                         pad0xf_7Q816[0xf];                                 // 0x1e9(0xf)
};


// Size 0x18 (Full Size[0x7f8] - InheritedSize[0x7e0]
class VomitProjectile: public LiquidProjectile
{
public:
	char                                                         pad0x10_RR4B9[0x10];                               // 0x7e0(0x10)
	bool                                                         CallParentFunctionalityOnImpactEffects;            // 0x7f0(0x1)
	char                                                         pad0x7_ICOCD[0x7];                                 // 0x7f1(0x7)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsQuestAtSpecificSeaStatCondition: public TargetedStatCondition
{
public:
	class UClass*                                                SeaId;                                             // 0x30(0x8)
};


// Size 0x20 (Full Size[0xc8] - InheritedSize[0xa8]
class ControllableObjectNonVerbalContentRule: public NonVerbalRadialContentRule
{
public:
	class PhrasesRadialDataAsset*                                CurrentPhrases;                                    // 0xa8(0x8)
	char                                                         pad0x10_8U93S[0x10];                               // 0xb0(0x10)
	class Object*                                                ControlledObject;                                  // 0xc0(0x8)
};


// Size 0x1e8 (Full Size[0x650] - InheritedSize[0x468]
class VotableVoyageProposalComponent: public VotableWithSessionComponent
{
public:
	char                                                         pad0x8_GPZWI[0x8];                                 // 0x468(0x8)
	float                                                        TooltipUIFadeDuration;                             // 0x470(0x4)
	struct Vector2D                                              TooltipUIScreenSpaceOffsetRatio;                   // 0x474(0x8)
	char                                                         pad0x4_EXFQA[0x4];                                 // 0x47c(0x4)
	struct ProposedVoyageEntry                                   ProposedEntry;                                     // 0x480(0x50)
	struct ProposedTaleEntry                                     ProposedTale;                                      // 0x4d0(0x20)
	class StaticMeshComponent*                                   VotableMeshComponent;                              // 0x4f0(0x8)
	class StaticMeshComponent*                                   DiveShipMeshComponent;                             // 0x4f8(0x8)
	char                                                         pad0x150_JJH7X[0x150];                             // 0x500(0x150)
};


// Size 0x48 (Full Size[0x510] - InheritedSize[0x4c8]
class SlidingDoor: public Door
{
public:
	char                                                         MovementDirection;                                 // 0x4c8(0x1)
	char                                                         pad0x7_6OQV0[0x7];                                 // 0x4c9(0x7)
	class SlidingDoorAudioParams*                                SlidingDoorAudioParams;                            // 0x4d0(0x8)
	char                                                         pad0x20_XV7JK[0x20];                               // 0x4d8(0x20)
	char                                                         ServerDoorState;                                   // 0x4f8(0x1)
	char                                                         pad0xb_EKCY4[0xb];                                 // 0x4f9(0xb)
	struct Vector                                                InitialDoorMeshLocation;                           // 0x504(0xc)
};


// Size 0x0 (Full Size[0xf8] - InheritedSize[0xf8]
class CostumeEmoteRadialContentRule: public EmoteRadialContentRule
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsActorTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Class>                                                TargetActorClasses;                                // 0x30(0x10)
};


// Size 0x178 (Full Size[0x8b0] - InheritedSize[0x738]
class ThrowableKnifeProjectile: public CannonProjectile
{
public:
	char                                                         pad0x10_EWIJ2[0x10];                               // 0x738(0x10)
	class SphereComponent*                                       KnifeCollisionSphere;                              // 0x748(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x750(0x8)
	float                                                        RewindProjectileRadius;                            // 0x758(0x4)
	char                                                         pad0x154_CO9Z4[0x154];                             // 0x75c(0x154)
};


// Size 0x1048 (Full Size[0x1480] - InheritedSize[0x438]
class PuzzleVault: public InteractableObject
{
public:
	char                                                         pad0x60_A9F9H[0x60];                               // 0x438(0x60)
	class SpawnActorComponent*                                   PuzzleMechanism1ActorComponent;                    // 0x498(0x8)
	class SpawnActorComponent*                                   PuzzleMechanism2ActorComponent;                    // 0x4a0(0x8)
	class SpawnActorComponent*                                   PuzzleMechanism3ActorComponent;                    // 0x4a8(0x8)
	class SpawnActorComponent*                                   PuzzleMechanism4ActorComponent;                    // 0x4b0(0x8)
	class SpawnActorComponent*                                   Brazier1ActorComponent;                            // 0x4b8(0x8)
	class SpawnActorComponent*                                   Brazier2ActorComponent;                            // 0x4c0(0x8)
	class SpawnActorComponent*                                   Brazier3ActorComponent;                            // 0x4c8(0x8)
	class SpawnActorComponent*                                   Brazier4ActorComponent;                            // 0x4d0(0x8)
	class SpawnActorComponent*                                   WaterActorComponent;                               // 0x4d8(0x8)
	class SpawnActorComponent*                                   MainDoorActorComponent;                            // 0x4e0(0x8)
	class SpawnActorComponent*                                   TimedMainDoorActorComponent;                       // 0x4e8(0x8)
	class SpawnActorComponent*                                   RewardDoorActorComponent;                          // 0x4f0(0x8)
	class StaticMeshComponent*                                   PlinthItemSpawnMesh;                               // 0x4f8(0x8)
	class StaticMeshComponent*                                   ButtonMesh;                                        // 0x500(0x8)
	class SceneComponent*                                        DefaultSceneRoot;                                  // 0x508(0x8)
	class ShapeComponent*                                        VaultPassageOverlapVolume;                         // 0x510(0x8)
	class ShapeComponent*                                        VaultRoomOverlapVolume;                            // 0x518(0x8)
	class StoryClaimableResourceComponent*                       StoryClaimableResourceComponent;                   // 0x520(0x8)
	char                                                         pad0x8_5DX2M[0x8];                                 // 0x528(0x8)
	struct VaultButtonData                                       VaultButtonData;                                   // 0x530(0xa90)
	class Object*                                                SpoutParticleSystem;                               // 0xfc0(0x8)
	struct FText                                                 VaultName;                                         // 0xfc8(0x38)
	class SlidingDoor*                                           OuterDoor;                                         // 0x1000(0x8)
	class VaultPuzzleDataAsset*                                  DefaultPuzzleData;                                 // 0x1008(0x8)
	class VaultPuzzleDataAsset*                                  TreasureVaultPuzzleData;                           // 0x1010(0x8)
	char                                                         AllocationStrategy;                                // 0x1018(0x1)
	char                                                         pad0x3_LI79D[0x3];                                 // 0x1019(0x3)
	float                                                        WeightOfBeingChosenByGHVoyage;                     // 0x101c(0x4)
	class PuzzleVaultAudioParams*                                DefaultVaultAudioParams;                           // 0x1020(0x8)
	class PuzzleVaultAudioParams*                                NoWaterVaultAudioParams;                           // 0x1028(0x8)
	class PuzzleVaultAudioParams*                                NoMusicVaultAudioParams;                           // 0x1030(0x8)
	class PuzzleVaultAudioParams*                                TreasureVaultAudioParams;                          // 0x1038(0x8)
	struct RuntimeFloatCurve                                     TreasureVaultAudioCurve;                           // 0x1040(0x80)
	float                                                        FillRatePerWaterSpout;                             // 0x10c0(0x4)
	int                                                          MaxNumWaterSpouts;                                 // 0x10c4(0x4)
	float                                                        BrazierExtinguishWaterLevel;                       // 0x10c8(0x4)
	float                                                        SpoutsSubmergedWaterLevel;                         // 0x10cc(0x4)
	float                                                        WaterFillFactorChangeToUpdateAudio;                // 0x10d0(0x4)
	float                                                        FailureCheckInterval;                              // 0x10d4(0x4)
	float                                                        ResetCheckInterval;                                // 0x10d8(0x4)
	struct Vector                                                VaultDoorHidingPosition;                           // 0x10dc(0xc)
	struct Vector                                                VaultDoorActivePosition;                           // 0x10e8(0xc)
	char                                                         pad0x4_2XYLC[0x4];                                 // 0x10f4(0x4)
	class WaterSpoutVFXComponent*                                WaterSpoutVFXComponent;                            // 0x10f8(0x8)
	class VaultKeyMappingDataAsset*                              TreasureVaultKeyTypes;                             // 0x1100(0x8)
	class WaterModifierZoneComponent*                            WaterModifierZoneComponent;                        // 0x1128(0x8)
	struct FName                                                 TotemLocationTag;                                  // 0x1150(0x8)
	struct Vector                                                TotemOffset;                                       // 0x1158(0xc)
	struct VaultReserved                                         TallTaleVaultReservation;                          // 0x1164(0x14)
	TArray<struct BrazierExtinguishCrewSizeTimes>                BrazierExtinguishCrewSizeTimes;                    // 0x1178(0x10)
	char                                                         pad0x18_9M8M3[0x18];                               // 0x1188(0x18)
	struct FString                                               SubjectName;                                       // 0x11a0(0x10)
	struct Guid                                                  VaultUniqueId;                                     // 0x11b0(0x10)
	class Actor*                                                 ReservationTotem;                                  // 0x11c0(0x8)
	class SlidingDoor*                                           VaultDoor;                                         // 0x11c8(0x8)
	class TimedDoorMechanismAction*                              TimedVaultDoor;                                    // 0x11d0(0x8)
	class SlidingDoor*                                           VaultRewardDoor;                                   // 0x11d8(0x8)
	class WaterVolume*                                           WaterVolume;                                       // 0x11e0(0x8)
	TArray<class RotatingBlockPuzzle*>                           PuzzleMechanisms;                                  // 0x11e8(0x10)
	TArray<class Beacon*>                                        Braziers;                                          // 0x11f8(0x10)
	class TreasureVaultTable*                                    VaultTable;                                        // 0x1208(0x8)
	class VaultPuzzleDataAsset*                                  VaultDataAsset;                                    // 0x1210(0x8)
	char                                                         VaultAudioSetting;                                 // 0x1218(0x1)
	char                                                         pad0x7_LZ5X8[0x7];                                 // 0x1219(0x7)
	class PuzzleVaultAudioParams*                                VaultAudioParams;                                  // 0x1220(0x8)
	class TreasureVaultItemSpawnComponent*                       ScaffoldingSpawner;                                // 0x1228(0x8)
	TArray<class TreasureVaultItemSpawnComponent*>               RewardSpawners;                                    // 0x1230(0x10)
	TArray<class TreasureVaultItemSpawnComponent*>               PressurePlateSpawners;                             // 0x1240(0x10)
	TArray<struct VaultPuzzleSolutionPositions>                  Solutions;                                         // 0x1250(0x10)
	TArray<class AthenaPlayerCharacter*>                         PlayersInVaultPassage;                             // 0x1260(0x10)
	TArray<struct StringAssetReference>                          MaterialSetReferences;                             // 0x1270(0x10)
	class InteractableComponent*                                 InteractableComponent;                             // 0x1280(0x8)
	int                                                          CurrentSolution;                                   // 0x1288(0x4)
	bool                                                         IsActive;                                          // 0x128c(0x1)
	bool                                                         IsCompleted;                                       // 0x128d(0x1)
	char                                                         pad0x2_60WTU[0x2];                                 // 0x128e(0x2)
	TArray<class VaultMaterialSetDataAsset*>                     MaterialSets;                                      // 0x1290(0x10)
	int                                                          NumActiveWaterSpouts;                              // 0x12a0(0x4)
	char                                                         pad0x4c_JI5Y7[0x4c];                               // 0x12a4(0x4c)
	int                                                          ActiveActionRule;                                  // 0x12f0(0x4)
	char                                                         pad0x164_CSN1R[0x164];                             // 0x12f4(0x164)
	float                                                        ServerMigrationExclusionRadius;                    // 0x1458(0x4)
	char                                                         pad0x24_D150X[0x24];                               // 0x145c(0x24)
};


// Size 0xb0 (Full Size[0x650] - InheritedSize[0x5a0]
class IslandFaunaSpawnComponent: public IslandItemSpawnComponent
{
public:
	class IslandFaunaSettings*                                   FaunaSettings;                                     // 0x5a0(0x8)
	TArray<class AIFaunaSpawner*>                                FaunaSpawners;                                     // 0x5a8(0x10)
	TArray<struct FaunaBreedRequirement>                         RequiredFaunaBreeds;                               // 0x5b8(0x10)
	TArray<class Class*>                                         SpawnedFaunaSpecies;                               // 0x5c8(0x10)
	char                                                         pad0x78_ZGQY4[0x78];                               // 0x5d8(0x78)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateIntEquals: public NPCDialogPredicate
{
public:
	struct FName                                                 ParameterName;                                     // 0x38(0x8)
	int                                                          Value;                                             // 0x40(0x4)
	char                                                         pad0x4_XWO5U[0x4];                                 // 0x44(0x4)
};


// Size 0x108 (Full Size[0x268] - InheritedSize[0x160]
class ShipCustomizationChestViewModelComponent: public PossessionsChestViewModel
{
public:
	class UClass*                                                AllianceFlagCategory;                              // 0x160(0x8)
	class UClass*                                                JoinAllianceDesc;                                  // 0x168(0x8)
	class UClass*                                                LeaveAllianceDesc;                                 // 0x170(0x8)
	class UClass*                                                LastRequestedCategory;                             // 0x178(0x8)
	class ShipCustomizationSettings*                             ShipCustomizationSettings;                         // 0x180(0x8)
	struct StringAssetReference                                  ClearIcon;                                         // 0x188(0x10)
	char                                                         pad0x90_ZN7OH[0x90];                               // 0x198(0x90)
	TArray<class Class*>                                         Categories;                                        // 0x228(0x10)
	bool                                                         IncludeAllCategory;                                // 0x238(0x1)
	char                                                         pad0x7_N9LCI[0x7];                                 // 0x239(0x7)
	TArray<struct ShipCustomizationChestMutualExclusion>         MutualExclusions;                                  // 0x240(0x10)
	TArray<class Class*>                                         CategoriesExcludedFromCaptainsPermissions;         // 0x250(0x10)
	char                                                         pad0x8_WGJEM[0x8];                                 // 0x260(0x8)
};


// Size 0x0 (Full Size[0xb0] - InheritedSize[0xb0]
class WalkableEmoteCategory: public ClothingCategory
{
public:
};


// Size 0x178 (Full Size[0x8b0] - InheritedSize[0x738]
class HuntingSpearProjectile: public CannonProjectile
{
public:
	char                                                         pad0x10_25QK7[0x10];                               // 0x738(0x10)
	class SphereComponent*                                       SpearCollisionSphere;                              // 0x748(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x750(0x8)
	float                                                        RewindProjectileRadius;                            // 0x758(0x4)
	char                                                         pad0x154_3ZM2B[0x154];                             // 0x75c(0x154)
};


// Size 0xe8 (Full Size[0x520] - InheritedSize[0x438]
class WellOfFates: public InteractableObject
{
public:
	char                                                         pad0x10_RANEE[0x10];                               // 0x438(0x10)
	class SkeletalMeshComponent*                                 SkeletalMesh;                                      // 0x448(0x8)
	class StaticMeshComponent*                                   StaticMesh;                                        // 0x450(0x8)
	class ParticleSystemComponent*                               LanternParticleSystem;                             // 0x458(0x8)
	class ParticleSystemComponent*                               WellOfFatesParticleSystem;                         // 0x460(0x8)
	class PointLightComponent*                                   PointLight;                                        // 0x468(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x470(0x8)
	float                                                        InteractionRadius;                                 // 0x478(0x4)
	char                                                         pad0x4_ICAXJ[0x4];                                 // 0x47c(0x4)
	struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x480(0xa0)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class GrantPagesWithPriorityFromLayoutsStepDesc: public GrantPagesStepFromLayoutsDesc
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class WieldableNonStowableMockItem: public StaticMeshWieldableItem
{
public:
};


// Size 0x160 (Full Size[0x2930] - InheritedSize[0x27d0]
class AthenaGhostPlayerCharacter: public AthenaPlayerCharacter
{
public:
	float                                                        MinDistanceToUpdateLevelStreaming;                 // 0x27d0(0x4)
	char                                                         pad0xb4_LW9AA[0xb4];                               // 0x27d4(0xb4)
	class GhostShipTickManager*                                  GhostShipTickManager;                              // 0x2888(0x8)
	char                                                         pad0xa0_RY5DG[0xa0];                               // 0x2890(0xa0)
};


// Size 0x1c0 (Full Size[0x7f8] - InheritedSize[0x638]
class FrontendHudComponent: public CoherentBaseHUDComponent
{
public:
	char                                                         pad0x1c0_287PD[0x1c0];                             // 0x638(0x1c0)
};


// Size 0x18 (Full Size[0x188] - InheritedSize[0x170]
class TaleQuestEnchantedLanternService: public TaleQuestLanternService
{
public:
	struct Vector                                                TargetLocation;                                    // 0x170(0xc)
	float                                                        HeatbeatDistance;                                  // 0x17c(0x4)
	float                                                        MidFlameDistanceAlpha;                             // 0x180(0x4)
	float                                                        CloseFlameDistanceAlpha;                           // 0x184(0x4)
};


// Size 0x3a0 (Full Size[0xb90] - InheritedSize[0x7f0]
class QuestBook: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x18_JTUEB[0x18];                               // 0x7f0(0x18)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x808(0x8)
	char                                                         pad0x10_1HDKG[0x10];                               // 0x810(0x10)
	struct QuestBookMaterialHandler                              MaterialHandler;                                   // 0x870(0x140)
	float                                                        ExtraPageTurnDurationForForceRedraw;               // 0x9b0(0x4)
	char                                                         pad0x4_QV79T[0x4];                                 // 0x9b4(0x4)
	struct QuestBookRepInfo                                      ReplicationInfo;                                   // 0x9b8(0x28)
	class QuestBookPageList*                                     PageList;                                          // 0x9e0(0x8)
	class UClass*                                                RemapperClass;                                     // 0x9e8(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x9f0(0x8)
	class DirectionalLightComponent*                             DirectionalLightComponent;                         // 0x9f8(0x8)
	float                                                        ShadowCascadeDistributionExponentWhenUsing;        // 0xa00(0x4)
	float                                                        ShadowCascadeDistributionExponentTransitionTime;   // 0xa04(0x4)
	char                                                         pad0x8_KNO84[0x8];                                 // 0xa08(0x8)
	float                                                        PageTurnDuration;                                  // 0xa10(0x4)
	float                                                        PageTurnForceRedrawDuration;                       // 0xa14(0x4)
	char                                                         pad0x150_XFG5E[0x150];                             // 0xa18(0x150)
	int                                                          PageWidth;                                         // 0xb68(0x4)
	int                                                          PageHeight;                                        // 0xb6c(0x4)
	struct QuestBookPageRenderer                                 PageTextRenderer;                                  // 0xb70(0x18)
	char                                                         pad0x8_WW0UT[0x8];                                 // 0xb88(0x8)
};


// Size 0x5a0 (Full Size[0xa88] - InheritedSize[0x4e8]
class Wheel: public ControllableObject
{
public:
	char                                                         pad0x38_5VG34[0x38];                               // 0x4e8(0x38)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x520(0x8)
	class SkeletalMeshMemoryConstraintComponent*                 WheelMeshComponent;                                // 0x528(0x8)
	struct WheelAnimationProperties                              WheelAnimationProps;                               // 0x530(0x78)
	struct WheelEventProperties                                  WheelEventProps;                                   // 0x5a8(0x8)
	class ForceFeedbackEffect*                                   CenteredForceFeedbackEffect;                       // 0x5b0(0x8)
	class ForceFeedbackEffect*                                   TurbulenceForceFeedbackEffect;                     // 0x5b8(0x8)
	struct FName                                                 TurbulenceForceFeedbackTag;                        // 0x5c0(0x8)
	class ForceFeedbackEffect*                                   SteeringForceFeedbackEffect;                       // 0x5c8(0x8)
	struct FName                                                 SteeringForceFeedbackTag;                          // 0x5d0(0x8)
	class WwiseObjectPoolWrapper*                                EmitterPool;                                       // 0x5d8(0x8)
	class WwiseEvent*                                            WheelStartedMovingEvent;                           // 0x5e0(0x8)
	class WwiseEvent*                                            WheelHasStoppedEvent;                              // 0x5e8(0x8)
	class WwiseEvent*                                            WheelIsStoppingEvent;                              // 0x5f0(0x8)
	class WwiseEvent*                                            DamagedWheelStartedMovingEvent;                    // 0x5f8(0x8)
	class WwiseEvent*                                            DamagedWheelHasStoppedEvent;                       // 0x600(0x8)
	class WwiseEvent*                                            DamagedWheelIsStoppingEvent;                       // 0x608(0x8)
	class WwiseEvent*                                            WheelCenteredEvent;                                // 0x610(0x8)
	class WwiseEvent*                                            FightingTurbulenceStartEvent;                      // 0x618(0x8)
	class WwiseEvent*                                            FightingTurbulenceStopEvent;                       // 0x620(0x8)
	class WwiseEvent*                                            SqueakyWheelEvent;                                 // 0x628(0x8)
	struct FName                                                 RTPCTurnRateName;                                  // 0x630(0x8)
	struct FName                                                 RTPCTurnAngleName;                                 // 0x638(0x8)
	struct FName                                                 WheelDamageRTPC;                                   // 0x640(0x8)
	bool                                                         DisableTurbulence;                                 // 0x648(0x1)
	char                                                         pad0x7_J3B5E[0x7];                                 // 0x649(0x7)
	class SceneComponent*                                        RootSceneComponent;                                // 0x660(0x8)
	class BoxComponent*                                          PlayerCollisionComponent;                          // 0x668(0x8)
	class ShipDamageableComponent*                               WheelDamageComponent;                              // 0x670(0x8)
	class RepairableComponent*                                   RepairableComponentWest;                           // 0x678(0x8)
	class RepairableComponent*                                   RepairableComponentEast;                           // 0x680(0x8)
	class RepairableComponent*                                   RepairableComponentSouth;                          // 0x688(0x8)
	char                                                         pad0x50_KY037[0x50];                               // 0x690(0x50)
	struct Vector                                                ShipPartFireCellActorSpaceLocation;                // 0x6e0(0xc)
	char                                                         pad0x24_MUM1Y[0x24];                               // 0x6ec(0x24)
	class MemoryConstrainedMeshInitializer*                      WheelMMCMeshInitializer;                           // 0x710(0x8)
	class WheelDescAsset*                                        DescToSetWhenSafe;                                 // 0x718(0x8)
	class WheelDescAsset*                                        CurrentWheelDesc;                                  // 0x720(0x8)
	float                                                        DamageSpeedMultiplierLevel1;                       // 0x728(0x4)
	float                                                        DamageSpeedMultiplierLevel2;                       // 0x72c(0x4)
	float                                                        DamageSpeedMultiplierLevel3;                       // 0x730(0x4)
	char                                                         pad0x4_XWYZW[0x4];                                 // 0x734(0x4)
	class ParticleSystem*                                        WheelDamageParticleSystem;                         // 0x738(0x8)
	char                                                         pad0x18_5XZ3U[0x18];                               // 0x740(0x18)
	float                                                        TurbulenceFactor;                                  // 0x758(0x4)
	float                                                        ServerWheelAngle;                                  // 0x75c(0x4)
	float                                                        ServerWantedAngle;                                 // 0x760(0x4)
	char                                                         pad0x24_I494T[0x24];                               // 0x764(0x24)
	float                                                        CenterJoltDuration;                                // 0x788(0x4)
	float                                                        CenterJoltSlowDownFactor;                          // 0x78c(0x4)
	char                                                         pad0x20_A1SHI[0x20];                               // 0x790(0x20)
	class DamageableShipPartAudioParams*                         WheelDamageLevelAudio;                             // 0x7b0(0x8)
	char                                                         pad0x4_IBVE3[0x4];                                 // 0x7b8(0x4)
	float                                                        MaxWheelAngle;                                     // 0x7bc(0x4)
	float                                                        MinWheelAngle;                                     // 0x7c0(0x4)
	float                                                        SqueakAtAngle;                                     // 0x7c4(0x4)
	char                                                         AllowedWheelDirection;                             // 0x7c8(0x1)
	char                                                         pad0x7_JFY8N[0x7];                                 // 0x7c9(0x7)
	class NarratedShipDirectionComponent*                        NarratedShipDirectionComponent;                    // 0x7d0(0x8)
	char                                                         pad0x2b0_FZAWR[0x2b0];                             // 0x7d8(0x2b0)
};


// Size 0x0 (Full Size[0xf8] - InheritedSize[0xf8]
class CurseEmoteRadialContentRule: public EmoteRadialContentRule
{
public:
};


// Size 0x8 (Full Size[0x50] - InheritedSize[0x48]
class CaptainsLogDynamicSinglePageLayout: public WieldableBookSinglePageLayout
{
public:
	char                                                         PageType;                                          // 0x48(0x1)
	char                                                         pad0x3_AXHOS[0x3];                                 // 0x49(0x3)
	int                                                          PageSetIndex;                                      // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OceanCrawlersOnShipGameEventType: public EnemyAIOnShipGameEventType
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class ShipTitleCategory: public ShipCustomizationCategory
{
public:
};


// Size 0x8 (Full Size[0xb0] - InheritedSize[0xa8]
class StrategyNonVerbalRadialContentRule: public NonVerbalRadialContentRule
{
public:
	class NonVerbalRadialDataAsset*                              CurrentPhrases;                                    // 0xa8(0x8)
};


// Size 0x8 (Full Size[0xb0] - InheritedSize[0xa8]
class WieldedItemNonVerbalRadialContentRule: public NonVerbalRadialContentRule
{
public:
	class PhrasesRadialDataAsset*                                CurrentPhrases;                                    // 0xa8(0x8)
};


// Size 0x1f0 (Full Size[0x9e0] - InheritedSize[0x7f0]
class DoubleActionItem: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x18_25ABR[0x18];                               // 0x7f0(0x18)
	class ItemActionComponent*                                   PrimaryAction;                                     // 0x808(0x8)
	class ItemActionComponent*                                   SecondaryAction;                                   // 0x810(0x8)
	char                                                         ActionPriority;                                    // 0x818(0x1)
	bool                                                         IsDisplaceable;                                    // 0x819(0x1)
	bool                                                         ShouldBlockPickup;                                 // 0x81a(0x1)
	char                                                         pad0x1_2OK9K[0x1];                                 // 0x81b(0x1)
	float                                                        ActionMoveSpeedScalar;                             // 0x81c(0x4)
	char                                                         ActionSensitivitySettingCategory;                  // 0x820(0x1)
	char                                                         pad0x1bf_PJMVJ[0x1bf];                             // 0x821(0x1bf)
};


// Size 0x0 (Full Size[0x438] - InheritedSize[0x438]
class TestInteractableObject: public InteractableObject
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CursedSkellyFortGameEventType: public SkellyFortGameEventTypeBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipBattleChestOfFortuneGameEventType: public AIShipBattleGameEventType
{
public:
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class NamedContextualOpenRadialAction: public OpenRadialAction
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class DefaultItemCategory: public ItemCategory
{
public:
};


// Size 0x300 (Full Size[0x7e8] - InheritedSize[0x4e8]
class CaptainsLogbookInteractableProxy: public ControllableObject
{
public:
	char                                                         pad0x10_DZGCP[0x10];                               // 0x4e8(0x10)
	class StaticMeshMemoryConstraintComponent*                   BookMeshComponent;                                 // 0x4f8(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x500(0x8)
	class UClass*                                                InteractionInput;                                  // 0x508(0x8)
	class UClass*                                                ReleaseHeldInteractionInput;                       // 0x510(0x8)
	float                                                        HoldDuration;                                      // 0x518(0x4)
	bool                                                         IsEnabled;                                         // 0x51c(0x1)
	bool                                                         IsVisible;                                         // 0x51d(0x1)
	char                                                         pad0x2_CPN77[0x2];                                 // 0x51e(0x2)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x520(0x8)
	struct PartDesc                                              DefaultCustomization;                              // 0x548(0x20)
	char                                                         pad0x270_G7JH3[0x270];                             // 0x568(0x270)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x7d8(0x8)
	char                                                         pad0x8_CZ1E2[0x8];                                 // 0x7e0(0x8)
};


// Size 0x2d0 (Full Size[0x7d8] - InheritedSize[0x508]
class VoyageProposalContainer: public ModalInteractionProxy
{
public:
	char                                                         pad0x20_LB7SR[0x20];                               // 0x508(0x20)
	struct FName                                                 VoyageSelectionVoteTag;                            // 0x528(0x8)
	struct FName                                                 VoyageCancelVoteTag;                               // 0x530(0x8)
	struct FName                                                 TaleSelectionVoteTag;                              // 0x538(0x8)
	struct FName                                                 TaleCancelVoteTag;                                 // 0x540(0x8)
	struct FName                                                 AdventureCancelVoteTag;                            // 0x548(0x8)
	bool                                                         CancelExistingPrimaryVoyages;                      // 0x550(0x1)
	char                                                         pad0x7_0121O[0x7];                                 // 0x551(0x7)
	struct StringAssetReference                                  VoyageDescAssetString;                             // 0x558(0x10)
	class UClass*                                                ProposalDescAssetString;                           // 0x568(0x8)
	struct StringAssetReference                                  OptionalMapTableVoyageDescOverride;                // 0x570(0x10)
	class VoyageDescDataAsset*                                   VoyageDescAsset;                                   // 0x580(0x8)
	class VoyageProposalDesc*                                    ProposalDescAsset;                                 // 0x588(0x8)
	class IslandEventComponent*                                  IslandEventComponent;                              // 0x590(0x8)
	class CrewShipManifest*                                      CrewShipManifest;                                  // 0x598(0x8)
	char                                                         pad0x10_QXB4U[0x10];                               // 0x5a0(0x10)
	TArray<class Actor*>                                         VoyageSelectionVotableObjectViews;                 // 0x5b0(0x10)
	class Actor*                                                 VoyageCancelVotableObjectView;                     // 0x5c0(0x8)
	TArray<class CrewShipManifest*>                              TaleManifests;                                     // 0x5c8(0x10)
	class Actor*                                                 TaleCancelVotableObjectView;                       // 0x628(0x8)
	class Actor*                                                 AdventureCancelVotableObjectView;                  // 0x630(0x8)
	char                                                         pad0x1a0_OUHIX[0x1a0];                             // 0x638(0x1a0)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class InvalidItemCategory: public ItemCategory
{
public:
};


// Size 0xb0 (Full Size[0x598] - InheritedSize[0x4e8]
class DockableBase: public ControllableObject
{
public:
	class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x4e8(0x8)
	float                                                        DetachCutOffTime;                                  // 0x4f0(0x4)
	bool                                                         ShouldInteractorDock;                              // 0x4f4(0x1)
	char                                                         pad0x3_XTDC1[0x3];                                 // 0x4f5(0x3)
	class LevelSequence*                                         FirstPersonLevelSequenceToPlay;                    // 0x4f8(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x500(0x8)
	struct FText                                                 DockableCutsceneName;                              // 0x508(0x38)
	struct FText                                                 InteractWithCutsceneText;                          // 0x540(0x38)
	struct FName                                                 DockingSocketName;                                 // 0x578(0x8)
	char                                                         pad0x18_COKM1[0x18];                               // 0x580(0x18)
};


// Size 0x10 (Full Size[0x50] - InheritedSize[0x40]
class MechanismAnimationEvent_SetSeatComponentCanBeControlled: public MechanismAnimationEvent
{
public:
	float                                                        StartTime;                                         // 0x40(0x4)
	bool                                                         CanBeControlled;                                   // 0x44(0x1)
	char                                                         pad0x3_KQD72[0x3];                                 // 0x45(0x3)
	class SeatComponentBase*                                     CachedSeatComponent;                               // 0x48(0x8)
};


// Size 0x208 (Full Size[0x640] - InheritedSize[0x438]
class MountpointActor: public InteractableObject
{
public:
	char                                                         pad0x10_FDIDG[0x10];                               // 0x438(0x10)
	class InterpolatingMountpointComponent*                      MountpointComponent;                               // 0x448(0x8)
	class CapsuleComponent*                                      OverlapBroadcasterShapeComponent;                  // 0x450(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x458(0x8)
	class StaticMeshComponent*                                   MountedMeshComponent;                              // 0x460(0x8)
	class StaticMeshComponent*                                   ExtraRotationMountedMeshComponent;                 // 0x468(0x8)
	class UClass*                                                PressedNotificationInputId;                        // 0x470(0x8)
	class UClass*                                                ReleasedNotificationInputId;                       // 0x478(0x8)
	float                                                        InputHoldTime;                                     // 0x480(0x4)
	char                                                         pad0x4_Q5AU8[0x4];                                 // 0x484(0x4)
	struct FText                                                 MountVerb;                                         // 0x488(0x38)
	struct FText                                                 UnmountVerb;                                       // 0x4c0(0x38)
	bool                                                         IsNothingToMountTooltipEnabled;                    // 0x4f8(0x1)
	char                                                         pad0x7_7YTXP[0x7];                                 // 0x4f9(0x7)
	struct FText                                                 NothingToMountDescription;                         // 0x500(0x38)
	TArray<struct Vector>                                        DetachInteractionPoints;                           // 0x538(0x10)
	float                                                        DetachInteractionPointRadius;                      // 0x548(0x4)
	float                                                        DetachInteractionMaxDistance;                      // 0x54c(0x4)
	float                                                        AttachInteractionMaxDistance;                      // 0x550(0x4)
	bool                                                         UnmountIfOwnerShipSinks;                           // 0x554(0x1)
	bool                                                         UseClosestMountableToInteractor;                   // 0x555(0x1)
	char                                                         pad0xea_XCJA1[0xea];                               // 0x556(0xea)
};


// Size 0x3f0 (Full Size[0xbe0] - InheritedSize[0x7f0]
class WieldableBook: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x60_T6DGD[0x60];                               // 0x7f0(0x60)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x850(0x8)
	struct WieldableBookMaterialHandler                          MaterialHandler;                                   // 0x858(0x188)
	class WieldableBookRendererSettings*                         RendererSettings;                                  // 0x9e0(0x8)
	class DirectionalLightComponent*                             DirectionalLightComponent;                         // 0x9e8(0x8)
	bool                                                         BuildProceduralPageCacheOnRep;                     // 0x9f0(0x1)
	char                                                         pad0x3_R5CBT[0x3];                                 // 0x9f1(0x3)
	float                                                        ShadowCascadeDistributionExponentWhenUsing;        // 0x9f4(0x4)
	float                                                        ShadowCascadeDistributionExponentTransitionTime;   // 0x9f8(0x4)
	float                                                        ExtraPageTurnDurationForForceRedraw;               // 0x9fc(0x4)
	bool                                                         ShouldAlterAudio;                                  // 0xa00(0x1)
	char                                                         pad0x3_GLJ1A[0x3];                                 // 0xa01(0x3)
	struct FName                                                 AudioGameStateGroup;                               // 0xa04(0x8)
	struct FName                                                 AudioGameStateIngame;                              // 0xa0c(0x8)
	struct FName                                                 AudioGameStateInBook;                              // 0xa14(0x8)
	float                                                        PageTurnDuration;                                  // 0xa1c(0x4)
	float                                                        PageTurnForceRedrawDuration;                       // 0xa20(0x4)
	char                                                         pad0x4_HW52K[0x4];                                 // 0xa24(0x4)
	class PostProcessComponent*                                  CachedPostProcessComponent;                        // 0xa28(0x8)
	class MaterialInterface*                                     WieldedPostProcessMaterial;                        // 0xa30(0x8)
	class MaterialInstanceDynamic*                               WieldedPostProcessMaterialInstance;                // 0xa38(0x8)
	float                                                        WieldedPostProcessStartBlend;                      // 0xa40(0x4)
	float                                                        WieldedPostProcessEndBlend;                        // 0xa44(0x4)
	float                                                        WieldedPostProcessDuration;                        // 0xa48(0x4)
	bool                                                         WieldedPostProcessShouldIgnoreMesh;                // 0xa4c(0x1)
	char                                                         pad0x3_I5NFT[0x3];                                 // 0xa4d(0x3)
	struct FName                                                 WieldedTimedBlendVectorName;                       // 0xa50(0x8)
	struct WieldableBookRepInfo                                  ReplicationInfo;                                   // 0xa58(0x28)
	class WieldableBookPageList*                                 PageList;                                          // 0xa80(0x8)
	char                                                         pad0x158_4JLQW[0x158];                             // 0xa88(0x158)
};


// Size 0x48 (Full Size[0x530] - InheritedSize[0x4e8]
class TestMountedWeapon: public ControllableObject
{
public:
	char                                                         pad0x18_VV8P0[0x18];                               // 0x4e8(0x18)
	class Actor*                                                 SetProjectile;                                     // 0x500(0x8)
	class SceneComponent*                                        CameraAttachComponent;                             // 0x508(0x8)
	char                                                         pad0x20_RVMM7[0x20];                               // 0x510(0x20)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class EquipmentItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x8a0] - InheritedSize[0x8a0]
class StaticWieldableIngestible: public WieldableIngestible
{
public:
};


// Size 0x30 (Full Size[0x2800] - InheritedSize[0x27d0]
class AthenaPlayerCharacterMock: public AthenaPlayerCharacter
{
public:
	class AICreatureMovementModifierParamsDataAsset*             PetMovementParamsDataAsset;                        // 0x27c8(0x8)
	bool                                                         AllowedToSwim;                                     // 0x27d0(0x1)
	char                                                         pad0x2f_HZ8BC[0x2f];                               // 0x27d1(0x2f)
};


// Size 0x1b0 (Full Size[0x6b8] - InheritedSize[0x508]
class NPC: public ModalInteractionProxy
{
public:
	char                                                         pad0x60_4D8SQ[0x60];                               // 0x508(0x60)
	float                                                        AggressiveNetCullDistanceSquared;                  // 0x568(0x4)
	struct Guid                                                  Id;                                                // 0x56c(0x10)
	bool                                                         UseCustomInteractionRotation;                      // 0x57c(0x1)
	bool                                                         HasRedirectionToolip;                              // 0x57d(0x1)
	char                                                         pad0x2_P4YOJ[0x2];                                 // 0x57e(0x2)
	class InteractableGrammaticalGenderComponent*                InteractableGrammaticalGenderComponent;            // 0x580(0x8)
	class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x588(0x8)
	class BeckonComponent*                                       BeckonComponent;                                   // 0x590(0x8)
	class CameraComponent*                                       ViewTargetCameraComponent;                         // 0x598(0x8)
	char                                                         pad0x118_I15OU[0x118];                             // 0x5a0(0x118)
};


// Size 0x20 (Full Size[0x60] - InheritedSize[0x40]
class MechanismAnimationEvent_Audio: public MechanismAnimationEvent
{
public:
	class WwiseEvent*                                            Event;                                             // 0x40(0x8)
	char                                                         pad0x18_THTLE[0x18];                               // 0x48(0x18)
};


// Size 0x0 (Full Size[0x940] - InheritedSize[0x940]
class MusicalInstrumentStaticMesh: public MusicalInstrument
{
public:
};


// Size 0x8 (Full Size[0xd8] - InheritedSize[0xd0]
class CostumeDesc: public ClothingDesc
{
public:
	bool                                                         CrewCostume;                                       // 0xd0(0x1)
	char                                                         pad0x7_LYRIZ[0x7];                                 // 0xd1(0x7)
};


// Size 0x190 (Full Size[0x698] - InheritedSize[0x508]
class CaptainsBookcase: public ModalInteractionProxy
{
public:
	char                                                         pad0x8_IBLLB[0x8];                                 // 0x508(0x8)
	struct FName                                                 IndicatorMaterialParamName;                        // 0x510(0x8)
	TArray<struct BookcaseIndicatorSetting>                      IndicatorSettings;                                 // 0x518(0x10)
	TArray<struct BookcaseCompanyFullnessData>                   FullnessData;                                      // 0x528(0x10)
	char                                                         pad0x160_EF3K8[0x160];                             // 0x538(0x160)
};


// Size 0xe0 (Full Size[0x15d0] - InheritedSize[0x14f0]
class OceanCrawlerAICharacter: public AthenaAICharacter
{
public:
	char                                                         pad0x70_SA9JJ[0x70];                               // 0x14f0(0x70)
	class HealthGemComponent*                                    HealthGemComponent;                                // 0x1560(0x8)
	class BuffReceiverComponent*                                 BuffReceiver;                                      // 0x1568(0x8)
	char                                                         OceanCrawlerType;                                  // 0x1570(0x1)
	char                                                         pad0x7_3JG3Q[0x7];                                 // 0x1571(0x7)
	class CustomAnimationMontageComponent*                       MontageComponent;                                  // 0x1578(0x8)
	class AnimationServerData*                                   OceanCrawlerAnimationServerData;                   // 0x1580(0x8)
	float                                                        StaticCollisionRampAngleLimit;                     // 0x1588(0x4)
	bool                                                         ShouldPlayersInterruptBullRush;                    // 0x158c(0x1)
	bool                                                         SporeBreathActive;                                 // 0x158d(0x1)
	char                                                         pad0x42_H7UYZ[0x42];                               // 0x158e(0x42)
};


// Size 0x0 (Full Size[0xb0] - InheritedSize[0xb0]
class InvalidClothingCategory: public ClothingCategory
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingItemStatCondition: public TargetedStatCondition
{
public:
	TArray<class Class*>                                         TargetItems;                                       // 0x30(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class SunkenItemDataAsset: public IslandItemDataAsset
{
public:
};


// Size 0x0 (Full Size[0xa10] - InheritedSize[0xa10]
class MockAthenaPlayerCharacterMovementComponent: public AthenaPlayerCharacterMovementComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsQuestAtAnIslandWithFriendlyAssistingAIStatCondition: public TargetedStatCondition
{
public:
};


// Size 0x40 (Full Size[0x4c0] - InheritedSize[0x480]
class SirenTridentShotActionComponent: public LaunchableShotActionComponent
{
public:
	char                                                         pad0x4_07TNQ[0x4];                                 // 0x480(0x4)
	float                                                        MaxAcceptableChargeTimeStampDelta;                 // 0x484(0x4)
	TArray<class SirenTridentProjectileParams*>                  ProjectileParameters;                              // 0x488(0x10)
	class SirenTridentProjectileParams*                          CurrentProjectileParameters;                       // 0x498(0x8)
	struct FName                                                 ActionSizeChangeForceFeedbackTag;                  // 0x4a0(0x8)
	class SirenTridentProjectile*                                TridentProjectile;                                 // 0x4a8(0x8)
	class SirenTridentShotComponentAudioParams*                  SirenShotActionAudio;                              // 0x4b0(0x8)
	char                                                         CurrentShotState;                                  // 0x4b8(0x1)
	char                                                         pad0x7_PKRID[0x7];                                 // 0x4b9(0x7)
};


// Size 0x40 (Full Size[0x508] - InheritedSize[0x4c8]
class SwingDoor: public Door
{
public:
	class LockComponent*                                         LockComponent;                                     // 0x4c8(0x8)
	class WwiseEvent*                                            OpenDoorAudioSting;                                // 0x4d0(0x8)
	class SwingDoorAudioParams*                                  SwingDoorAudioParams;                              // 0x4d8(0x8)
	char                                                         pad0x20_4VCIB[0x20];                               // 0x4e0(0x20)
	char                                                         ServerDoorState;                                   // 0x500(0x1)
	char                                                         pad0x7_913EH[0x7];                                 // 0x501(0x7)
};


// Size 0x20 (Full Size[0x158] - InheritedSize[0x138]
class InvasionDepartureTunnelDependencies: public DepartureTunnelDependencies
{
public:
	char                                                         pad0x20_L9KV5[0x20];                               // 0x138(0x20)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class WeaponItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0xc0] - InheritedSize[0xc0]
class StorageContainerDescSpawnData: public ItemDescSpawnData
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsVoyageTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Class>                                                AllowedVoyages;                                    // 0x30(0x10)
};


// Size 0x8 (Full Size[0x198] - InheritedSize[0x190]
class FixedIntentComponent: public ControllableIntentComponent
{
public:
	float                                                        Intent;                                            // 0x190(0x4)
	char                                                         pad0x4_YW96G[0x4];                                 // 0x194(0x4)
};


// Size 0x8 (Full Size[0x50] - InheritedSize[0x48]
class CaptainsLogDynamicDoublePageLayout: public WieldableBookDoublePageLayout
{
public:
	char                                                         PageType;                                          // 0x48(0x1)
	char                                                         pad0x3_DB7VE[0x3];                                 // 0x49(0x3)
	int                                                          PageSetIndex;                                      // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x5d8] - InheritedSize[0x5d8]
class DynamicOnlySwitchMechanismTrigger: public SwitchMechanismTrigger
{
public:
};


// Size 0x38 (Full Size[0x70] - InheritedSize[0x38]
class MechanismOneShotEvent_Audio: public MechanismOneShotEvent
{
public:
	class WwiseEvent*                                            Event;                                             // 0x38(0x8)
	struct WwiseEmitter                                          Emitter;                                           // 0x40(0x20)
	char                                                         pad0x10_GED5T[0x10];                               // 0x60(0x10)
};


// Size 0x198 (Full Size[0x680] - InheritedSize[0x4e8]
class MeshBasedMountableWeapon: public ControllableObject
{
public:
	char                                                         pad0x8_JD98F[0x8];                                 // 0x4e8(0x8)
	class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x4f0(0x8)
	class StaticMeshComponent*                                   MountMeshComponent;                                // 0x4f8(0x8)
	class StaticMeshComponent*                                   BarrelMeshComponent;                               // 0x500(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x508(0x8)
	struct FText                                                 InteractionDisplayUseVerb;                         // 0x510(0x38)
	struct FText                                                 InteractionDisplayName;                            // 0x548(0x38)
	struct FloatRange                                            PitchRange;                                        // 0x580(0x10)
	struct FloatRange                                            YawRange;                                          // 0x590(0x10)
	float                                                        ReplicatedPitch;                                   // 0x5a0(0x4)
	float                                                        ReplicatedYaw;                                     // 0x5a4(0x4)
	char                                                         pad0x3c_S2U69[0x3c];                               // 0x5a8(0x3c)
	float                                                        PitchSpeed;                                        // 0x5e4(0x4)
	float                                                        YawSpeed;                                          // 0x5e8(0x4)
	struct FName                                                 CameraDockSocket;                                  // 0x5ec(0x8)
	struct FName                                                 CharacterDockSocket;                               // 0x5f4(0x8)
	struct FName                                                 TooltipSocket;                                     // 0x5fc(0x8)
	float                                                        ClientToServerAimBlendSpeed;                       // 0x604(0x4)
	char                                                         pad0x68_CJMC7[0x68];                               // 0x608(0x68)
	class UClass*                                                StartControllingNotificationInputId;               // 0x670(0x8)
	char                                                         pad0x8_WN9RN[0x8];                                 // 0x678(0x8)
};


// Size 0x240 (Full Size[0x7750] - InheritedSize[0x7510]
class SkeletonAnimationInstance: public ThirdPersonAnimationInstance
{
public:
	char                                                         pad0x10_PGJKY[0x10];                               // 0x7510(0x10)
	struct AthenaAnimationSkeletonAIFastPathData                 SkeletonAIFastPathData;                            // 0x7520(0x4)
	char                                                         pad0x4_NGOU6[0x4];                                 // 0x7524(0x4)
	class NPCHeldObjectData*                                     HeldObjectList;                                    // 0x7528(0x8)
	class Actor*                                                 LeftHandObject;                                    // 0x7530(0x8)
	class Actor*                                                 RightHandObject;                                   // 0x7538(0x8)
	float                                                        ObjectOverlayBlendOutTime;                         // 0x7540(0x4)
	char                                                         pad0x4_UUWH0[0x4];                                 // 0x7544(0x4)
	class AthenaAnimationCustomSkeletonAnimationData*            CustomAnimationData;                               // 0x7548(0x8)
	struct AthenaAnimationCustomSkeletonAnimationBlueprintData   CustomAnimationBlueprintData;                      // 0x7550(0x58)
	struct CustomAnimationMontageStateMachine                    CustomAnimationMontageStateMachine;                // 0x75a8(0xd8)
	char                                                         PreviousCustomAnimationState;                      // 0x7680(0x1)
	char                                                         pad0x7_ZQNWL[0x7];                                 // 0x7681(0x7)
	class AnimMontage*                                           CustomAnimationCurrentMontage;                     // 0x7688(0x8)
	char                                                         pad0xc0_M2UL4[0xc0];                               // 0x7690(0xc0)
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class NonStorableQuestBookItemInfo: public QuestBookItemInfo
{
public:
};


// Size 0xb8 (Full Size[0x590] - InheritedSize[0x4d8]
class BattleElevatorEventRoom: public NetworkClusterEventRoom
{
public:
	TArray<class Actor*>                                         ActorsWithAIRegionsToAssignAIToCannons;            // 0x4d8(0x10)
	class BattleElevator*                                        TargetBattleElevatorActor;                         // 0x4e8(0x8)
	struct FName                                                 InitialFightPhase;                                 // 0x520(0x8)
	class BattleElevatorEventRoomPhasesDataAsset*                PhasesAsset;                                       // 0x528(0x8)
	struct CurrentPhaseData                                      CurrentPhaseData;                                  // 0x530(0x40)
	char                                                         pad0x20_GWMO5[0x20];                               // 0x570(0x20)
};


// Size 0x260 (Full Size[0x838] - InheritedSize[0x5d8]
class SwitchMechanismTriggerProjectileLauncher: public SwitchMechanismTrigger
{
public:
	struct SwitchMechanismTriggerPlankRotation                   PlankRotateToIdleRotation;                         // 0x5d8(0x28)
	struct SwitchMechanismTriggerPlankRotation                   PlankRotateToStartRotation;                        // 0x600(0x28)
	struct SwitchMechanismTriggerPlankRotation                   PlankRotateToEndRotation;                          // 0x628(0x28)
	struct SwitchMechanismTriggerProjectileParams                ProjectileParams;                                  // 0x650(0x28)
	class StaticMeshComponent*                                   PivotMesh;                                         // 0x678(0x8)
	class StaticMeshComponent*                                   PlankMesh;                                         // 0x680(0x8)
	class StaticMeshComponent*                                   PlankBoulderMesh;                                  // 0x688(0x8)
	class ArrowComponent*                                        LaunchDirectionArrowComponent;                     // 0x690(0x8)
	class SceneComponent*                                        PlankLaunchLocation;                               // 0x698(0x8)
	class SceneComponent*                                        PlankBoulderStartLocation;                         // 0x6a0(0x8)
	class SceneComponent*                                        PlankBoulderHitLocation;                           // 0x6a8(0x8)
	class BoxComponent*                                          PlayerBoxOverlap;                                  // 0x6b0(0x8)
	struct MechanismFloatAnimationCurve                          PlankBoulderDropCurve;                             // 0x6b8(0x8)
	struct MechanismFloatAnimationCurve                          ObjectToMoveToPlankCurve;                          // 0x6c0(0x8)
	class CurveVector*                                           PlankBoulderRotationCurve;                         // 0x6c8(0x8)
	class CurveVector*                                           ObjectToMoveToPlankRotationCurve;                  // 0x6d0(0x8)
	float                                                        TimeBeforePlankRotationResets;                     // 0x6d8(0x4)
	char                                                         pad0x4_PFX35[0x4];                                 // 0x6dc(0x4)
	class Actor*                                                 ActorToMoveToPlank;                                // 0x6e0(0x8)
	struct MechanismAnimationEventContainer                      PlankBoulderAnimationEvents;                       // 0x6e8(0x60)
	struct MechanismAnimationEventContainer                      ObjectToMoveToPlankAnimationEvents;                // 0x748(0x60)
	char                                                         pad0x90_Z7LIR[0x90];                               // 0x7a8(0x90)
};


// Size 0x100 (Full Size[0x538] - InheritedSize[0x438]
class ForceSpot: public InteractableObject
{
public:
	char                                                         pad0x8_6UDQZ[0x8];                                 // 0x438(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x440(0x8)
	class SplineComponent*                                       InteractionSplineComponent;                        // 0x448(0x8)
	float                                                        ForceScalar;                                       // 0x450(0x4)
	char                                                         pad0x4_VU333[0x4];                                 // 0x454(0x4)
	struct FText                                                 InteractionDisplayName;                            // 0x458(0x38)
	float                                                        InteractionRadius;                                 // 0x490(0x4)
	char                                                         pad0xa4_K0TJK[0xa4];                               // 0x494(0xa4)
};


// Size 0x430 (Full Size[0xc20] - InheritedSize[0x7f0]
class FishingRod: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x20_YJKAC[0x20];                               // 0x7f0(0x20)
	class UClass*                                                AuxiliaryRadialCategoryFilter;                     // 0x810(0x8)
	TArray<class Class*>                                         AuxiliaryRadialAllowedItems;                       // 0x818(0x10)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x828(0x8)
	struct FishingFishSelector                                   FishSelector;                                      // 0x830(0xd8)
	class FishingRodSetupDataAsset*                              FishingRodSetupDataAsset;                          // 0x908(0x8)
	class FishingSetupDataAsset*                                 FishingSetupDataAssetInToSea;                      // 0x910(0x8)
	class FishingSetupDataAsset*                                 FishingSetupDataAssetInToPond;                     // 0x918(0x8)
	class FishingMiniGameSetupDataAsset*                         FishingMiniGameSetupDataAssetInToSea;              // 0x920(0x8)
	class FishingMiniGameSetupDataAsset*                         FishingMiniGameSetupDataAssetInToPond;             // 0x928(0x8)
	class FishingFreeLookConstrainsDataAsset*                    FishingFreeLookConstrainsDataAsset;                // 0x930(0x8)
	class MaterialManipulationComponent*                         MaterialManipulationComponent;                     // 0x938(0x8)
	class FishingLineRenderComponent*                            Rope;                                              // 0x940(0x8)
	struct Vector                                                InteractionPointOffset;                            // 0x948(0xc)
	char                                                         pad0x4_1OLLT[0x4];                                 // 0x954(0x4)
	class UClass*                                                StatTriggerForCatchingAFish;                       // 0x958(0x8)
	char                                                         ServerState;                                       // 0x960(0x1)
	bool                                                         IsReeling;                                         // 0x961(0x1)
	char                                                         pad0x6_IHOFH[0x6];                                 // 0x962(0x6)
	struct FishingRodReplicatedFishState                         ReplicatedFishState;                               // 0x968(0x10)
	class Actor*                                                 FishInteractionProxy;                              // 0x978(0x8)
	struct FishingMiniGamePlayerInput                            FishingMiniGamePlayerInput;                        // 0x980(0x3)
	bool                                                         PlayerIsBattlingFish;                              // 0x983(0x1)
	char                                                         pad0x4_A8ABE[0x4];                                 // 0x984(0x4)
	class ItemProxy*                                             BaitOnFloat;                                       // 0x988(0x8)
	struct Vector                                                FishingFloatRelativeCentreLocation;                // 0x990(0xc)
	struct Vector                                                FishingFloatOffset;                                // 0x99c(0xc)
	bool                                                         CastIsInToAPond;                                   // 0x9a8(0x1)
	char                                                         pad0x7_K9VJG[0x7];                                 // 0x9a9(0x7)
	class UClass*                                                CaughtFishClass;                                   // 0x9b0(0x8)
	char                                                         BaitOnRodType;                                     // 0x9b8(0x1)
	char                                                         BattlingState;                                     // 0x9b9(0x1)
	char                                                         pad0x6_10AUF[0x6];                                 // 0x9ba(0x6)
	class ItemProxy*                                             ComedyItemOnFloat;                                 // 0x9c0(0x8)
	class UClass*                                                CaughtComedyItemDesc;                              // 0x9c8(0x8)
	float                                                        TimeReelingWhenBattlingBeforeSnapping;             // 0x9d0(0x4)
	float                                                        FishingMiniGamePercentageInToEscaping;             // 0x9d4(0x4)
	float                                                        MinimumDistanceFromPlayer;                         // 0x9d8(0x4)
	char                                                         pad0x4_QYGDR[0x4];                                 // 0x9dc(0x4)
	class Actor*                                                 FishingFloatActor;                                 // 0x9e0(0x8)
	class ItemProxy*                                             LocalOnlyBaitOnFloat;                              // 0x9e8(0x8)
	struct FishingMiniGame                                       FishingMiniGame;                                   // 0x9f0(0x50)
	class FishingFish*                                           NonReplicatedLocalFishingFishOnRod;                // 0xa40(0x8)
	class ItemProxy*                                             LocalOnlyComedyItemOnFloat;                        // 0xa48(0x8)
	bool                                                         IsInFishingActionState;                            // 0xa50(0x1)
	bool                                                         CurrentHookedFishHasFreeRoamEnabled;               // 0xa51(0x1)
	char                                                         pad0x1c2_94ZW0[0x1c2];                             // 0xa52(0x1c2)
	char                                                         pad0xc_2VYSO[0xc];                                 // 0xc14(0xc)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HasBeenBuriedByAPlayerConditional: public TargetedStatCondition
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class InstrumentItemCategory: public ItemCategory
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsTargetBootyTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<char>                                                 TargetBootyTypes;                                  // 0x30(0x10)
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class LargeSkeletalMeshWieldableItem: public SkeletalMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BlowpipeDartItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0xb0] - InheritedSize[0xb0]
class TitleCategory: public ClothingCategory
{
public:
};


// Size 0x140 (Full Size[0x578] - InheritedSize[0x438]
class CollectableQuestObject: public InteractableObject
{
public:
	char                                                         pad0x18_R40J0[0x18];                               // 0x438(0x18)
	class WwiseEvent*                                            PickupSFX;                                         // 0x450(0x8)
	char                                                         pad0x10_O2BU6[0x10];                               // 0x458(0x10)
	float                                                        InteractionPointRadius;                            // 0x468(0x4)
	struct FName                                                 InteractionPointSocketName;                        // 0x46c(0x8)
	char                                                         pad0x4_WZXSO[0x4];                                 // 0x474(0x4)
	struct FText                                                 InteractableObjectPickupName;                      // 0x478(0x38)
	class SceneComponent*                                        ThirdPersonMesh;                                   // 0x4b0(0x8)
	char                                                         pad0xc0_EN9H3[0xc0];                               // 0x4b8(0xc0)
};


// Size 0xc0 (Full Size[0x8b0] - InheritedSize[0x7f0]
class Shovel: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x10_SEKZV[0x10];                               // 0x7f0(0x10)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x800(0x8)
	TArray<struct DigAnimParams>                                 ExhumeAnimParams;                                  // 0x808(0x10)
	TArray<struct DigAnimParams>                                 BuryAnimParams;                                    // 0x818(0x10)
	class ShovelSurfaceHoleDataAsset*                            ShovelHoleParams;                                  // 0x828(0x8)
	class ShovelSurfaceFxDataAsset*                              ShovelHoleFx;                                      // 0x830(0x8)
	class WwiseEvent*                                            ShovelEnterSurfaceSfx;                             // 0x838(0x8)
	class WwiseEvent*                                            ShovelBuryingSfx;                                  // 0x840(0x8)
	class WwiseEvent*                                            ShovelExitSurfaceSfx;                              // 0x848(0x8)
	class WwiseEvent*                                            HitBuriedChestSfx;                                 // 0x850(0x8)
	class UClass*                                                ShovelDigCooldownType;                             // 0x858(0x8)
	float                                                        DigRequestToleranceTimeOnServer;                   // 0x860(0x4)
	float                                                        CameraPitchAfterSuccessfulDigIfStartedHigh;        // 0x864(0x4)
	float                                                        CameraPitchAfterSuccessfulDigIfStartedLow;         // 0x868(0x4)
	float                                                        CameraPitchAfterDeflectedDigIfStartedHigh;         // 0x86c(0x4)
	float                                                        CameraPitchAfterDeflectedDigIfStartedLow;          // 0x870(0x4)
	struct FName                                                 ShovelHeadSocketName;                              // 0x874(0x8)
	char                                                         pad0xc_AP0BP[0xc];                                 // 0x87c(0xc)
	class WwiseEvent*                                            PendingRevealSFX;                                  // 0x888(0x8)
	char                                                         pad0x20_59F9S[0x20];                               // 0x890(0x20)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWielderActorTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Class>                                                TargetActorClasses;                                // 0x30(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class ClientDestinationPreLoadingArrivalTunnelDesc: public ArrivalTunnelDesc
{
public:
	float                                                        DestinationLocationAsyncLoadTimeoutSeconds;        // 0x98(0x4)
	char                                                         pad0x4_2FCNG[0x4];                                 // 0x9c(0x4)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StorageContainerSpawnerItemFeatureBasedWeightedItemList: public StorageContainerSpawnerWeightedItemList
{
public:
	TArray<struct StorageContainerWeightedItemListFeatureGroup>  FeatureGroups;                                     // 0x38(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingBootyTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<char>                                                 TargetBootyTypes;                                  // 0x30(0x10)
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class ItemWithoutIconsDesc: public ItemDesc
{
public:
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class NPCDialogPredicateHasSubsetOfEntitlements: public NPCDialogPredicate
{
public:
	TArray<class Class*>                                         EntitlementsSet;                                   // 0x38(0x10)
	int                                                          MinimumNumberSatisfied;                            // 0x48(0x4)
	char                                                         pad0x4_1I70T[0x4];                                 // 0x4c(0x4)
};


// Size 0x20 (Full Size[0x520] - InheritedSize[0x500]
class CompassWieldableReplica: public PoseableMeshWieldableReplica
{
public:
	class CompassSpinComponent*                                  SpinComponent;                                     // 0x500(0x8)
	char                                                         pad0x18_UB6IR[0x18];                               // 0x508(0x18)
};


// Size 0x40 (Full Size[0x150] - InheritedSize[0x110]
class ShipwreckSiteGeneratorRandomEditorComponent: public ShipwreckSiteGeneratorRandomComponent
{
public:
	float                                                        ShipwreckSize;                                     // 0x110(0x4)
	int                                                          SphereSegments;                                    // 0x114(0x4)
	struct Color                                                 ShipwreckColor;                                    // 0x118(0x4)
	struct Color                                                 EndOfWorldColor;                                   // 0x11c(0x4)
	struct Color                                                 EndOfWorldWarningColor;                            // 0x120(0x4)
	struct Color                                                 ValidSpawnZoneColor;                               // 0x124(0x4)
	struct Color                                                 IslandColor;                                       // 0x128(0x4)
	char                                                         pad0x24_QM85N[0x24];                               // 0x12c(0x24)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NPCDialogOrExpression: public NPCDialogBinaryExpression
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsCurrencyTypeStatCondition: public TargetedStatCondition
{
public:
	char                                                         TargetCurrency;                                    // 0x30(0x1)
	char                                                         pad0x7_AJL4Q[0x7];                                 // 0x31(0x7)
};


// Size 0x0 (Full Size[0x560] - InheritedSize[0x560]
class NonStorableRewardableItemInfo: public RewardableItemInfo
{
public:
};


// Size 0x10 (Full Size[0xe0] - InheritedSize[0xd0]
class CurseWithEmoteDesc: public ClothingDesc
{
public:
	TArray<class Class*>                                         CurseEmotes;                                       // 0xd0(0x10)
};


// Size 0x18 (Full Size[0x520] - InheritedSize[0x508]
class StrongholdKeyItemInfo: public NonStorableItemInfo
{
public:
	char                                                         pad0x18_YZ6L8[0x18];                               // 0x508(0x18)
};


// Size 0x30 (Full Size[0x260] - InheritedSize[0x230]
class TaleQuestSpawnAIDioramaStepDesc: public TaleQuestSpawnAIStepDesc
{
public:
	struct QuestVariableAIDioramaDesc                            AIDioramaDescAsset;                                // 0x230(0x30)
};


// Size 0x50 (Full Size[0x840] - InheritedSize[0x7f0]
class WieldableMegalodonEffigy: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_WG984[0x8];                                 // 0x7f0(0x8)
	char                                                         MegalodonSoulType;                                 // 0x7f8(0x1)
	bool                                                         CanModifyVFX;                                      // 0x7f9(0x1)
	char                                                         pad0x2_WHNKJ[0x2];                                 // 0x7fa(0x2)
	float                                                        SoulVFXReturnModifier;                             // 0x7fc(0x4)
	float                                                        SoulVFXClientPredictionModifier;                   // 0x800(0x4)
	bool                                                         CanPlaySFX;                                        // 0x804(0x1)
	char                                                         pad0x3_N68IJ[0x3];                                 // 0x805(0x3)
	class WwiseEvent*                                            PlaySoulTransferAudioEvent;                        // 0x808(0x8)
	class WwiseEvent*                                            StopSoulTransferAudioEvent;                        // 0x810(0x8)
	class WwiseEvent*                                            PlaySoulTransferCompleteAudioEvent;                // 0x818(0x8)
	class UClass*                                                RaiseEffigyInputId;                                // 0x820(0x8)
	char                                                         pad0x10_XN0O0[0x10];                               // 0x828(0x10)
	class ParticleSystemComponent*                               ParticleSystem;                                    // 0x838(0x8)
};


// Size 0x0 (Full Size[0x110] - InheritedSize[0x110]
class StashedMapRadialContentRule: public MapRadialContentRule
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsTargetOwnedByCrewStatCondition: public TargetedStatCondition
{
public:
};


// Size 0x20 (Full Size[0x810] - InheritedSize[0x7f0]
class WoodPlank: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_CSOGE[0x8];                                 // 0x7f0(0x8)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	class ConsumableWieldableComponent*                          ConsumableWieldable;                               // 0x800(0x8)
	char                                                         pad0x8_IDB71[0x8];                                 // 0x808(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BootyCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x2830] - InheritedSize[0x2830]
class AthenaTavernPlayerCharacterMock: public AthenaTavernPlayerCharacter
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BaseFoodItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class FlintlockItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x100 (Full Size[0x548] - InheritedSize[0x448]
class RotatingBlockPuzzle: public PuzzleMechanism
{
public:
	class PrimitiveComponent*                                    StaticMesh;                                        // 0x448(0x8)
	class DecalComponent*                                        Position1Decal;                                    // 0x450(0x8)
	class DecalComponent*                                        Position2Decal;                                    // 0x458(0x8)
	class DecalComponent*                                        Position3Decal;                                    // 0x460(0x8)
	class DecalComponent*                                        Position4Decal;                                    // 0x468(0x8)
	TArray<struct Transform>                                     InteractVFXLocations;                              // 0x470(0x10)
	class Object*                                                InteractVFX;                                       // 0x480(0x8)
	struct FText                                                 BlockName;                                         // 0x488(0x38)
	class MaterialInterface*                                     DefaultMaterialInstance;                           // 0x4c0(0x8)
	float                                                        MaterialBlendInTime;                               // 0x4c8(0x4)
	float                                                        MaterialBlendOutTime;                              // 0x4cc(0x4)
	float                                                        IncorrectPulseDuration;                            // 0x4d0(0x4)
	char                                                         pad0x4_BZIJ9[0x4];                                 // 0x4d4(0x4)
	class PuzzleVaultAudioParams*                                PuzzleVaultAudioParams;                            // 0x4d8(0x8)
	int                                                          CorrectPostion;                                    // 0x4e0(0x4)
	float                                                        RotationSpeed;                                     // 0x4e4(0x4)
	int                                                          CurrentPosition;                                   // 0x4e8(0x4)
	char                                                         pad0x5c_L9ZVL[0x5c];                               // 0x4ec(0x5c)
};


// Size 0x0 (Full Size[0x650] - InheritedSize[0x650]
class SalvageItemSpawnComponentMock: public SalvageItemSpawnComponent
{
public:
};


// Size 0xf0 (Full Size[0x9e0] - InheritedSize[0x8f0]
class EnchantedCompass: public Compass
{
public:
	class ForceFeedbackEffect*                                   TargetReplacedForceFeedback;                       // 0x8e8(0x8)
	class WwiseEvent*                                            TargetReplacedSFX;                                 // 0x8f0(0x8)
	class InventoryItemComponent*                                InventoryItem;                                     // 0x8f8(0x8)
	char                                                         pad0x4_V53SP[0x4];                                 // 0x900(0x4)
	struct EnchantedCompassTarget                                Target;                                            // 0x904(0x18)
	char                                                         pad0xb4_P2ACR[0xb4];                               // 0x91c(0xb4)
	class EnchantedCompassProximityAnnouncementComponent*        ProximityAnnouncementComponent;                    // 0x9d0(0x8)
	char                                                         pad0x8_JAGQT[0x8];                                 // 0x9d8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MoltenSandsFortGameEventType: public SkellyFortGameEventType
{
public:
};


// Size 0x38 (Full Size[0x788] - InheritedSize[0x750]
class PollyProxy: public ItemProxy
{
public:
	class AnimMontage*                                           FlyAwayMontage;                                    // 0x750(0x8)
	float                                                        TargetHeight;                                      // 0x758(0x4)
	float                                                        TakeOffTime;                                       // 0x75c(0x4)
	bool                                                         IsFlyingAway;                                      // 0x760(0x1)
	bool                                                         IsInCave;                                          // 0x761(0x1)
	char                                                         pad0x6_BZMW7[0x6];                                 // 0x762(0x6)
	class BoxComponent*                                          BaseComponent;                                     // 0x768(0x8)
	class PollyProxyAnimInstance*                                PollyProxyAnimInstance;                            // 0x770(0x8)
	char                                                         pad0x10_LO3JB[0x10];                               // 0x778(0x10)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class WoodPlankItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class SwordItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x140 (Full Size[0xd90] - InheritedSize[0xc50]
class DoubleBarrelledProjectileWeapon: public ProjectileWeapon
{
public:
	double                                                       LastChargeRequestTimeStamp;                        // 0xc50(0x8)
	TArray<int>                                                  LoadedBarrelIds;                                   // 0xc58(0x10)
	char                                                         pad0x4_6EXMB[0x4];                                 // 0xc68(0x4)
	float                                                        ShortReloadAnimationDuration;                      // 0xc6c(0x4)
	float                                                        FirstOutOfTwoShotsRecoilDuration;                  // 0xc70(0x4)
	float                                                        ChargedRecoilDuration;                             // 0xc74(0x4)
	float                                                        TimeToStartChargingAnimation;                      // 0xc78(0x4)
	struct FName                                                 ChargedRumbleTag;                                  // 0xc7c(0x8)
	bool                                                         UseChargedFOV;                                     // 0xc84(0x1)
	char                                                         pad0x3_3ERML[0x3];                                 // 0xc85(0x3)
	float                                                        InAimingFOVCharged;                                // 0xc88(0x4)
	float                                                        InHipFOVCharged;                                   // 0xc8c(0x4)
	float                                                        ChargedBlendSpeed;                                 // 0xc90(0x4)
	char                                                         pad0x4_O0ZDZ[0x4];                                 // 0xc94(0x4)
	TArray<int>                                                  PreviousLoadedBarrelIds;                           // 0xc98(0x10)
	char                                                         pad0x2_IIORA[0x2];                                 // 0xca8(0x2)
	char                                                         AimingState;                                       // 0xcaa(0x1)
	char                                                         AimingDownSightsVisualsState;                      // 0xcab(0x1)
	int                                                          PostBarrelUpdateAmmoCount;                         // 0xcac(0x4)
	struct WeaponProjectileParams                                ChargedShotParams;                                 // 0xcb0(0xe0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LegendarySkellyFortGameEventType: public SkellyFortGameEventType
{
public:
};


// Size 0x138 (Full Size[0x6f0] - InheritedSize[0x5b8]
class ShipInteractableLight: public InteractableLight
{
public:
	char                                                         pad0x8_KKSVU[0x8];                                 // 0x5b8(0x8)
	TArray<char>                                                 DormantShipRegions;                                // 0x5c0(0x10)
	bool                                                         IsBrigLight;                                       // 0x5d0(0x1)
	bool                                                         ExposeToNetProxy;                                  // 0x5d1(0x1)
	char                                                         pad0x2_JMLYX[0x2];                                 // 0x5d2(0x2)
	int                                                          NetProxyBitIndex;                                  // 0x5d4(0x4)
	char                                                         pad0x18_C262P[0x18];                               // 0x5d8(0x18)
	TArray<class ShipInteractableLight*>                         SiblingLights;                                     // 0x5f0(0x10)
	char                                                         pad0xf0_Q2G0W[0xf0];                               // 0x600(0xf0)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class LanternItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x508] - InheritedSize[0x508]
class CabinDoor: public SwingDoor
{
public:
};


// Size 0x170 (Full Size[0xd50] - InheritedSize[0xbe0]
class CaptainsLogbookWieldable: public WieldableBook
{
public:
	class WieldableBookPageLayout*                               LeftLogbookPageTemplate;                           // 0xbe0(0x8)
	class WieldableBookPageLayout*                               RightLogbookPageTemplate;                          // 0xbe8(0x8)
	class CaptainsLogbookActivityIconsAsset*                     ActivityIconsAsset;                                // 0xbf0(0x8)
	class CaptainsLogbookAccoladeDefinitionsAsset*               AccoladeDefinitionsAsset;                          // 0xbf8(0x8)
	class GuildLogbookIconsAsset*                                GuildLogbookIconsAsset;                            // 0xc00(0x8)
	class GuildMottoLocalisedTextDefinitionAsset*                GuildMottoTextAsset;                               // 0xc08(0x8)
	class CaptainsLogbookAccoladeLocalisedTextDefinitionAsset*   AccoladeLocalisedTextDefinitionAsset;              // 0xc10(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0xc18(0x8)
	struct CaptainsLogbookServiceCache                           ServiceCache;                                      // 0xc20(0xc0)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0xce0(0x8)
	TArray<struct WieldableBookPageLayoutRepInfo>                ClientEventLogPages;                               // 0xce8(0x10)
	char                                                         pad0x48_NRRR7[0x48];                               // 0xcf8(0x48)
	bool                                                         IsWaterlogged;                                     // 0xd40(0x1)
	char                                                         pad0xf_9UW23[0xf];                                 // 0xd41(0xf)
};


// Size 0x0 (Full Size[0x518] - InheritedSize[0x518]
class WarMapCancelVotableObjectView: public WarMapVotableObjectView
{
public:
};


// Size 0x0 (Full Size[0x740] - InheritedSize[0x740]
class WieldableBookItemInfo: public BootyItemInfo
{
public:
};


// Size 0x18 (Full Size[0x118] - InheritedSize[0x100]
class EmoteFlourishDesc: public EmoteDesc
{
public:
	TArray<struct EmoteFlourishCategoryMapping>                  FlourishMappings;                                  // 0x100(0x10)
	char                                                         FlourishType;                                      // 0x110(0x1)
	char                                                         pad0x7_V4UEQ[0x7];                                 // 0x111(0x7)
};


// Size 0x10 (Full Size[0x560] - InheritedSize[0x550]
class DoorMechanism: public ToggleAnimatedMechanismAction
{
public:
	class StaticMeshComponent*                                   DoorMeshComponent;                                 // 0x550(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x558(0x8)
};


// Size 0xd8 (Full Size[0x628] - InheritedSize[0x550]
class PlinthMechanismAction: public ToggleAnimatedMechanismAction
{
public:
	class MechanismTriggerComponent*                             MechanismTrigger;                                  // 0x550(0x8)
	class LockComponent*                                         LockComponent;                                     // 0x558(0x8)
	class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x560(0x8)
	class PlinthInteractableComponent*                           InteractableComponent;                             // 0x568(0x8)
	bool                                                         CanLockComponentAcceptKey;                         // 0x570(0x1)
	char                                                         pad0xb7_7OBGR[0xb7];                               // 0x571(0xb7)
};


// Size 0x20 (Full Size[0xc0] - InheritedSize[0xa0]
class InvasionArrivalTunnelDesc: public ClientDestinationPreLoadingArrivalTunnelDesc
{
public:
	struct Vector                                                DestinationLocationOffset;                         // 0xa0(0xc)
	int                                                          SecondsToAllowLoadingBeforeRecomputingDestinationLocation; // 0xac(0x4)
	TArray<struct TunnelOfTheDamnedFactionThemedPopUpDesc>       FactionSpecificTunnelFailurePopUpDescs;            // 0xb0(0x10)
};


// Size 0x0 (Full Size[0x2800] - InheritedSize[0x2800]
class MockAthenaPlayerCharacterWithAthenaPlayerCharacterMovementComponent: public AthenaPlayerCharacterMock
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class InvalidPetEntitlementBaseCategory: public PetEntitlementBaseCategory
{
public:
};


// Size 0x8 (Full Size[0x6c0] - InheritedSize[0x6b8]
class Shipwright: public NPC
{
public:
	struct FName                                                 InteractionSocket;                                 // 0x6b8(0x8)
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class StorageCrateWieldable: public LargeSkeletalMeshWieldableItem
{
public:
};


// Size 0x100 (Full Size[0x900] - InheritedSize[0x800]
class Grenade: public CannonBall
{
public:
	char                                                         pad0x8_560UB[0x8];                                 // 0x800(0x8)
	bool                                                         UsingDelay;                                        // 0x808(0x1)
	char                                                         pad0x3_MHSQH[0x3];                                 // 0x809(0x3)
	float                                                        AnimDelay;                                         // 0x80c(0x4)
	class GrenadeSetupDataAsset*                                 GrenadeSetupDataAsset;                             // 0x810(0x8)
	struct WeightedProbabilityRangeOfRanges                      RotationRatePitch;                                 // 0x818(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateRoll;                                  // 0x848(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateYaw;                                   // 0x878(0x30)
	class UClass*                                                ThrownProjectileType;                              // 0x8a8(0x8)
	char                                                         pad0x50_P6GYB[0x50];                               // 0x8b0(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFort2022GameEventType: public SkellyFortGameEventType
{
public:
};


// Size 0x158 (Full Size[0x650] - InheritedSize[0x4f8]
class PulleyMechanism: public ControllablePulley
{
public:
	class StaticMeshComponent*                                   PulleyMesh;                                        // 0x4f8(0x8)
	class IntentBasedMechanismTriggerComponent*                  PulleyMechanismTriggerComponent;                   // 0x500(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x508(0x8)
	bool                                                         CameraTracksMechanismsBeingPulled;                 // 0x510(0x1)
	char                                                         pad0x7_I0V9W[0x7];                                 // 0x511(0x7)
	class Actor*                                                 UnconnectedActorToTrack;                           // 0x518(0x8)
	struct Vector                                                DefaultLookAtLocation;                             // 0x520(0xc)
	struct LookAtOffsetParams                                    CameraLookAtParams;                                // 0x52c(0x1c)
	class UClass*                                                AnalogControls;                                    // 0x548(0x8)
	struct FText                                                 PulleyInteractionPrompt;                           // 0x550(0x38)
	struct FText                                                 PulleyInteractionDisabledPrompt;                   // 0x588(0x38)
	char                                                         pad0x90_WTW21[0x90];                               // 0x5c0(0x90)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class ThrowingKnifeItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BlowpipeItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class MechanismAnimationEvent_OneShotAudio: public MechanismAnimationEvent_Audio
{
public:
	float                                                        StartTime;                                         // 0x60(0x4)
	char                                                         pad0x4_DBCDI[0x4];                                 // 0x64(0x4)
};


// Size 0x0 (Full Size[0x6b8] - InheritedSize[0x6b8]
class Shopkeeper: public NPC
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class SimpleBootyWieldableItem: public LargeSkeletalMeshWieldableItem
{
public:
};


// Size 0x28 (Full Size[0x778] - InheritedSize[0x750]
class ItemInteractionProxy: public ItemProxy
{
public:
	class UClass*                                                AcquiredItemDesc;                                  // 0x750(0x8)
	bool                                                         HidePromptIfInventoryIsFull;                       // 0x758(0x1)
	char                                                         pad0x1f_JNUTX[0x1f];                               // 0x759(0x1f)
};


// Size 0x140 (Full Size[0x9a0] - InheritedSize[0x860]
class XMarksTheSpotMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x860(0x4)
	int                                                          CanvasHeight;                                      // 0x864(0x4)
	class Texture*                                               MarkTexture;                                       // 0x868(0x8)
	class Texture*                                               AltMarkTexture;                                    // 0x870(0x8)
	class Texture*                                               UndergroundMarkTexture;                            // 0x878(0x8)
	class Texture*                                               AltUndergroundMarkTexture;                         // 0x880(0x8)
	class Texture*                                               AreaMarkTexture;                                   // 0x888(0x8)
	class Texture*                                               AltAreaMarkTexture;                                // 0x890(0x8)
	class Texture*                                               UndergroundAreaMarkTexture;                        // 0x898(0x8)
	class Texture*                                               AltUndergroundAreaMarkTexture;                     // 0x8a0(0x8)
	float                                                        MarkWidthRatio;                                    // 0x8a8(0x4)
	float                                                        MarkHeightRatio;                                   // 0x8ac(0x4)
	float                                                        AreaMarkScale;                                     // 0x8b0(0x4)
	char                                                         MarkBlendMode;                                     // 0x8b4(0x1)
	char                                                         pad0x3_PYD8G[0x3];                                 // 0x8b5(0x3)
	struct FString                                               MapTexturePath;                                    // 0x8b8(0x10)
	struct StringAssetReference                                  MapInventoryTexturePath;                           // 0x8c8(0x10)
	char                                                         pad0x70_UQFIY[0x70];                               // 0x8d8(0x70)
	TArray<struct XMarksTheSpotMapMark>                          Marks;                                             // 0x948(0x10)
	char                                                         pad0x18_G2K1A[0x18];                               // 0x958(0x18)
	float                                                        Rotation;                                          // 0x970(0x4)
	char                                                         pad0x2c_IDWXZ[0x2c];                               // 0x974(0x2c)
};


// Size 0x70 (Full Size[0x170] - InheritedSize[0x100]
class RestrictedGuildEmoteDesc: public EmoteDesc
{
public:
	struct FText                                                 RestrictedReason;                                  // 0x100(0x38)
	struct StringAssetReference                                  RestrictedBackgroundPath;                          // 0x138(0x10)
	bool                                                         IsEmoteRestricted;                                 // 0x148(0x1)
	char                                                         pad0x7_SIVSB[0x7];                                 // 0x149(0x7)
	struct StringAssetReference                                  RestrictedIconInvPath;                             // 0x150(0x10)
	struct StringAssetReference                                  RestrictedIconPrvPath;                             // 0x160(0x10)
};


// Size 0x600 (Full Size[0x1250] - InheritedSize[0xc50]
class PortableHarpoon: public ProjectileWeapon
{
public:
	char                                                         pad0x10_PRD6O[0x10];                               // 0xc50(0x10)
	class RetractorComponent*                                    RetractorComponent;                                // 0xc60(0x8)
	class ChildActorComponent*                                   ProjectileChildActorComponent;                     // 0xc68(0x8)
	class SceneComponent*                                        RetractDestinationComponent;                       // 0xc70(0x8)
	struct FName                                                 ProjectileAttachSocket;                            // 0xc78(0x8)
	struct FName                                                 TetherAttachSocket;                                // 0xc80(0x8)
	struct FName                                                 RetractedCharacterTargetPositionSocket;            // 0xc88(0x8)
	struct ActorComponentSelector                                RetractedCharacterTargetPositionSourceMesh;        // 0xc90(0x10)
	struct FName                                                 AnimNotifyEventShowHarpoonProjectile;              // 0xca0(0x8)
	struct FName                                                 AnimNotifyEventAttachHarpoonProjectileToWeapon;    // 0xca8(0x8)
	class CurveFloat*                                            EstimatedRetractionTimeScalarCurve;                // 0xcb0(0x8)
	float                                                        DefaultRetractionSpeed;                            // 0xcb8(0x4)
	float                                                        UnwieldedRetractionSpeed;                          // 0xcbc(0x4)
	float                                                        HarpoonedCharacterRetractionSpeed;                 // 0xcc0(0x4)
	float                                                        HarpoonedItemRetractionSpeed;                      // 0xcc4(0x4)
	bool                                                         AutoWieldHarpoonedItems;                           // 0xcc8(0x1)
	char                                                         pad0x7_28GIM[0x7];                                 // 0xcc9(0x7)
	TArray<class PhysicalMaterial*>                              UntetherableSurfaceTypes;                          // 0xcd0(0x10)
	struct Rotator                                               AimRelativeAngularLimitsDegrees;                   // 0xce0(0xc)
	bool                                                         ShouldConstrainPlayerFacingDirectionWhenProjectileNotDocked; // 0xcec(0x1)
	char                                                         pad0x3_6RWTA[0x3];                                 // 0xced(0x3)
	float                                                        ConstrainPlayerFacingDirectionMaximumAngle;        // 0xcf0(0x4)
	float                                                        ConstrainPlayerFacingDirectionRecentreSpeed;       // 0xcf4(0x4)
	bool                                                         CanGrappleToShips;                                 // 0xcf8(0x1)
	bool                                                         CanGrappleToShipsWhenFiredFromCannon;              // 0xcf9(0x1)
	char                                                         pad0x2_1TEGB[0x2];                                 // 0xcfa(0x2)
	float                                                        MaximumGrappleTargetEndOffsetDistance;             // 0xcfc(0x4)
	float                                                        ObstructionSweepRadiusReduction;                   // 0xd00(0x4)
	bool                                                         UsedOptimizedGrappleSafeLocationDetection;         // 0xd04(0x1)
	bool                                                         UsedOptimizedCharacterHarpoonSafeLocationDetection; // 0xd05(0x1)
	char                                                         pad0x2_RL8UI[0x2];                                 // 0xd06(0x2)
	float                                                        RetractionTargetOffsetDistance;                    // 0xd08(0x4)
	char                                                         pad0x4_O0LCK[0x4];                                 // 0xd0c(0x4)
	class WwiseEvent*                                            TetherReelingOutStartSfx;                          // 0xd10(0x8)
	class WwiseEvent*                                            TetherReelingOutStopSfx;                           // 0xd18(0x8)
	class WwiseEvent*                                            TetherReelingInStartSfx;                           // 0xd20(0x8)
	class WwiseEvent*                                            TetherReelingInStopSfx;                            // 0xd28(0x8)
	float                                                        SpoolingSpeedAudioClampValue;                      // 0xd30(0x4)
	struct FName                                                 SpoolingSpeedAudioRTPCName;                        // 0xd34(0x8)
	char                                                         pad0x4_7QVAE[0x4];                                 // 0xd3c(0x4)
	class ForceFeedbackEffect*                                   ReelingOutForceFeedbackEffect;                     // 0xd40(0x8)
	struct FName                                                 ReelingOutForceFeedbackTag;                        // 0xd48(0x8)
	class ForceFeedbackEffect*                                   ImpactForceFeedbackEffect;                         // 0xd50(0x8)
	struct FName                                                 ImpactForceFeedbackTag;                            // 0xd58(0x8)
	class ForceFeedbackEffect*                                   ReelingInForceFeedbackEffect;                      // 0xd60(0x8)
	struct FName                                                 ReelingInForceFeedbackTag;                         // 0xd68(0x8)
	class ForceFeedbackEffect*                                   ReeledInForceFeedbackEffect;                       // 0xd70(0x8)
	struct FName                                                 ReeledInForceFeedbackTag;                          // 0xd78(0x8)
	bool                                                         IsMigrating;                                       // 0xd80(0x1)
	char                                                         pad0x22f_2KPMJ[0x22f];                             // 0xd81(0x22f)
	struct PortableHarpoonTelemetryEvent                         PendingTelemetryEvent;                             // 0xfb0(0xc0)
	char                                                         pad0x15_0O2PL[0x15];                               // 0x1070(0x15)
	char                                                         ReplicatedLastAttachType;                          // 0x1085(0x1)
	char                                                         pad0x2_ITFP5[0x2];                                 // 0x1086(0x2)
	class Actor*                                                 LastAttachActor;                                   // 0x1088(0x8)
	char                                                         pad0x28_O9OSY[0x28];                               // 0x1090(0x28)
	class PrimitiveComponent*                                    LastAimAssistTarget;                               // 0x10b8(0x8)
	char                                                         pad0x190_193PR[0x190];                             // 0x10c0(0x190)
};


// Size 0x0 (Full Size[0x860] - InheritedSize[0x860]
class TutorialMap: public TreasureMap
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class FireworkItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class ShovelItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x750] - InheritedSize[0x750]
class SkeletalMeshItemProxy: public ItemProxy
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FortOfTheDamnedGameEventType: public SkellyFortGameEventType
{
public:
};


// Size 0x20 (Full Size[0xa00] - InheritedSize[0x9e0]
class DoubleActionItemWithAmmo: public DoubleActionItem
{
public:
	char                                                         pad0x10_QV1UX[0x10];                               // 0x9e0(0x10)
	bool                                                         bShouldShowAmmoUI;                                 // 0x9f0(0x1)
	char                                                         pad0x3_1OYMJ[0x3];                                 // 0x9f1(0x3)
	int                                                          AmmoMax;                                           // 0x9f4(0x4)
	int                                                          AmmoLeft;                                          // 0x9f8(0x4)
	char                                                         pad0x4_DF8HA[0x4];                                 // 0x9fc(0x4)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class HuntingSpearItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x30 (Full Size[0x5f8] - InheritedSize[0x5c8]
class PuzzleKeyedInstrument: public DockableKeyedInstrument
{
public:
	bool                                                         DockedPlayerIsOnTale;                              // 0x5c8(0x1)
	char                                                         pad0x7_NFMA6[0x7];                                 // 0x5c9(0x7)
	class SequenceComponent*                                     SequenceComponent;                                 // 0x5d0(0x8)
	class StaticMeshComponent*                                   SheetMusicMeshComponent;                           // 0x5d8(0x8)
	bool                                                         ShouldShowSheetMusic;                              // 0x5e0(0x1)
	char                                                         pad0x7_NF9PG[0x7];                                 // 0x5e1(0x7)
	TArray<struct Text>                                          TaleNames;                                         // 0x5e8(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class NPCDialogPredicateIsWearingAll: public NPCDialogPredicateIsWearingAny
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class TankardItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x470 (Full Size[0xcd0] - InheritedSize[0x860]
class CargoRunMap: public TreasureMap
{
public:
	char                                                         pad0x28_2XC4M[0x28];                               // 0x860(0x28)
	int                                                          CanvasWidth;                                       // 0x888(0x4)
	int                                                          CanvasHeight;                                      // 0x88c(0x4)
	class Font*                                                  Font;                                              // 0x890(0x8)
	float                                                        FontScale;                                         // 0x898(0x4)
	float                                                        FontLineSpacingScale;                              // 0x89c(0x4)
	char                                                         pad0x20_MXBTC[0x20];                               // 0x8a0(0x20)
	class CargoRunMapLayout*                                     CargoRunMapLayout;                                 // 0x8c0(0x8)
	struct CargoRunMapContents                                   Contents;                                          // 0x8c8(0x68)
	char                                                         pad0x3a0_BE929[0x3a0];                             // 0x930(0x3a0)
};


// Size 0x0 (Full Size[0x860] - InheritedSize[0x860]
class CollectorsChestWieldableItem: public CollectorsChestWieldableItemWithOpenableComponent
{
public:
};


// Size 0x290 (Full Size[0x8e0] - InheritedSize[0x650]
class IslandFaunaBoarSpawnComponent: public IslandFaunaSpawnComponent
{
public:
	char                                                         pad0x290_0PJ7A[0x290];                             // 0x650(0x290)
};


// Size 0x1a8 (Full Size[0x900] - InheritedSize[0x758]
class SirenTridentProjectile: public DamageableCannonProjectile
{
public:
	char                                                         pad0x10_GIYT3[0x10];                               // 0x758(0x10)
	TArray<class SirenTridentProjectileParams*>                  ProjectileParameters;                              // 0x768(0x10)
	float                                                        CurrentMaterialScale;                              // 0x778(0x4)
	struct FName                                                 MaterialScaleParameterName;                        // 0x77c(0x8)
	char                                                         pad0x4_0MSZ3[0x4];                                 // 0x784(0x4)
	class MaterialInstanceDynamic*                               DynamicMaterialInstance;                           // 0x788(0x8)
	class SirenTridentProjectileParams*                          CurrentProjectileParameters;                       // 0x790(0x8)
	char                                                         pad0x8_N0458[0x8];                                 // 0x798(0x8)
	class SphereComponent*                                       CollisionSphere;                                   // 0x7a0(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x7a8(0x8)
	char                                                         pad0x150_LRCDE[0x150];                             // 0x7b0(0x150)
};


// Size 0x230 (Full Size[0x2a30] - InheritedSize[0x2800]
class AthenaPlayerCharacterUnitTestMock: public AthenaPlayerCharacterMock
{
public:
	char                                                         pad0x230_CWGHA[0x230];                             // 0x2800(0x230)
};


// Size 0x140 (Full Size[0x918] - InheritedSize[0x7d8]
class VoyageTable: public VoyageProposalContainer
{
public:
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x7d8(0x8)
	struct FText                                                 UseQuestTableTooltipText;                          // 0x7e0(0x38)
	class GenericPartDescAsset*                                  DescToSetWhenSafe;                                 // 0x818(0x8)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x820(0x8)
	class StaticMeshMemoryConstraintComponent*                   CachedMeshMemoryConstraintComponent;               // 0x828(0x8)
	char                                                         pad0xe8_5X15P[0xe8];                               // 0x830(0xe8)
};


// Size 0x50 (Full Size[0x640] - InheritedSize[0x5f0]
class SpikeMechanismAction: public PivotAnimatedMechanismAction
{
public:
	char                                                         pad0x8_EPRC7[0x8];                                 // 0x5f0(0x8)
	class MechanismInteractionComponent*                         MechanismInteractionComponent;                     // 0x5f8(0x8)
	float                                                        Extent;                                            // 0x600(0x4)
	float                                                        Damage;                                            // 0x604(0x4)
	char                                                         DamageReason;                                      // 0x608(0x1)
	char                                                         pad0x7_O87XJ[0x7];                                 // 0x609(0x7)
	TArray<struct SpikeMechanismMaterialAnimationContext>        MaterialAnimations;                                // 0x610(0x10)
	TArray<class Actor*>                                         DamagedActors;                                     // 0x620(0x10)
	char                                                         pad0x10_3U3BX[0x10];                               // 0x630(0x10)
};


// Size 0x18 (Full Size[0x6d0] - InheritedSize[0x6b8]
class CompanyShopkeeper: public NPC
{
public:
	char                                                         pad0x8_I9QR9[0x8];                                 // 0x6b8(0x8)
	bool                                                         IsShadyShop;                                       // 0x6c0(0x1)
	char                                                         pad0x7_3GO7T[0x7];                                 // 0x6c1(0x7)
	class CompanyNPCComponent*                                   CompanyNPCComponent;                               // 0x6c8(0x8)
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class TreasureMapItemDesc: public ItemWithoutIconsDesc
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class FishingRodItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class PocketWatchItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0xf0 (Full Size[0x1f0] - InheritedSize[0x100]
class EmoteRandomFromListDesc: public EmoteDesc
{
public:
	struct StringAssetReference                                  EmotesListAssetPath;                               // 0x100(0x10)
	struct EmoteData                                             SelectedEmoteData;                                 // 0x110(0xc8)
	char                                                         pad0x18_ES3GJ[0x18];                               // 0x1d8(0x18)
};


// Size 0x20 (Full Size[0xf8] - InheritedSize[0xd8]
class EvolvingCostumeDesc: public CostumeDesc
{
public:
	struct StringAssetReference                                  PreviousCostumeLevel;                              // 0xd8(0x10)
	struct StringAssetReference                                  NextCostumeLevel;                                  // 0xe8(0x10)
};


// Size 0x18 (Full Size[0x770] - InheritedSize[0x758]
class DamageableCannonProjectileTest: public DamageableCannonProjectile
{
public:
	char                                                         pad0x18_EUOUP[0x18];                               // 0x758(0x18)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class PetEntitlementCategory: public PetEntitlementBaseCategory
{
public:
};


// Size 0x20 (Full Size[0x8c0] - InheritedSize[0x8a0]
class DroppableTankard: public Tankard
{
public:
	float                                                        DelayBeforeItemDestroyed;                          // 0x898(0x4)
	char                                                         pad0x4_TZVWD[0x4];                                 // 0x89c(0x4)
	class StaticMeshMemoryConstraintComponent*                   StaticMeshStashedMeshComponent;                    // 0x8a0(0x8)
	class WwiseEvent*                                            SfxTankardDestroy;                                 // 0x8a8(0x8)
	char                                                         pad0x8_C38CV[0x8];                                 // 0x8b0(0x8)
	class LiquidLevelTransferComponent*                          LiquidLevelTransferComponent;                      // 0x8b8(0x8)
};


// Size 0x50 (Full Size[0x2850] - InheritedSize[0x2800]
class AthenaPlayerCharacterMockWithAnimSeq: public AthenaPlayerCharacterMock
{
public:
	char                                                         pad0x50_URPBX[0x50];                               // 0x2800(0x50)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class PetCustomizationCategory: public PetEntitlementBaseCategory
{
public:
};


// Size 0x0 (Full Size[0xbe0] - InheritedSize[0xbe0]
class DebugRenderWieldableBook: public WieldableBook
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BaitItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0xf0 (Full Size[0x770] - InheritedSize[0x680]
class MountableSpotlightMechanism: public MeshBasedMountableWeapon
{
public:
	char                                                         pad0x10_POUH5[0x10];                               // 0x680(0x10)
	class MountableSpotlightAudioParamsDataAsset*                AudioParams;                                       // 0x690(0x8)
	class MechanismActionComponent*                              SpotlightMechanismComponent;                       // 0x698(0x8)
	class SpotLightComponent*                                    LightBeamComponent;                                // 0x6a0(0x8)
	class StaticMeshComponent*                                   LightBeamMeshComponent;                            // 0x6a8(0x8)
	class CurveFloat*                                            SpotlightStateChangeCurve;                         // 0x6b0(0x8)
	float                                                        SpotlightCurveBlendSpeed;                          // 0x6b8(0x4)
	float                                                        LightBeamInnerAngleMultiplier;                     // 0x6bc(0x4)
	float                                                        UnfocussedPitchSpeed;                              // 0x6c0(0x4)
	float                                                        FocussedPitchSpeed;                                // 0x6c4(0x4)
	float                                                        UnfocussedYawSpeed;                                // 0x6c8(0x4)
	float                                                        FocussedYawSpeed;                                  // 0x6cc(0x4)
	char                                                         ServerSpotlightState;                              // 0x6d0(0x1)
	char                                                         pad0x3_1OG3K[0x3];                                 // 0x6d1(0x3)
	float                                                        ReplicatedCurrentSpotlightCurveTime;               // 0x6d4(0x4)
	float                                                        CurrentSpotlightCurveTime;                         // 0x6d8(0x4)
	bool                                                         PerformSpotlightStateResolution;                   // 0x6dc(0x1)
	char                                                         pad0x13_J2GZ8[0x13];                               // 0x6dd(0x13)
	class SceneComponent*                                        InteractionBoxPivotPoint;                          // 0x6f0(0x8)
	char                                                         pad0xc_F3UAQ[0xc];                                 // 0x6f8(0xc)
	float                                                        LightSourceParamLength;                            // 0x704(0x4)
	bool                                                         ShouldCheckLineOfSightWhenBeamIsNotFocussed;       // 0x708(0x1)
	char                                                         pad0x7_3HEKT[0x7];                                 // 0x709(0x7)
	class LightSourceManager*                                    LightSourceManagerPtr;                             // 0x710(0x8)
	char                                                         pad0x58_GM2FZ[0x58];                               // 0x718(0x58)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class CannonballItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class AIDockableWheel: public AIDockableObject
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BucketItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class FlintlockDoubleBarrelItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x1c0 (Full Size[0xa20] - InheritedSize[0x860]
class MerchantMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x858(0x4)
	int                                                          CanvasHeight;                                      // 0x85c(0x4)
	class Font*                                                  Font;                                              // 0x860(0x8)
	float                                                        FontScale;                                         // 0x868(0x4)
	float                                                        FontLineSpacingScale;                              // 0x86c(0x4)
	char                                                         pad0x8_MIPD0[0x8];                                 // 0x870(0x8)
	class MerchantMapLayout*                                     MerchantMapLayout;                                 // 0x878(0x8)
	struct MerchantMapContents                                   Contents;                                          // 0x880(0x138)
	char                                                         pad0x68_BOS1I[0x68];                               // 0x9b8(0x68)
};


// Size 0x0 (Full Size[0x2930] - InheritedSize[0x2930]
class AthenaGhostPlayerCharacterMock: public AthenaGhostPlayerCharacter
{
public:
};


// Size 0x1e0 (Full Size[0xa40] - InheritedSize[0x860]
class ZoomMap: public TreasureMap
{
public:
	int                                                          IslandCanvasWidth;                                 // 0x860(0x4)
	int                                                          IslandCanvasHeight;                                // 0x864(0x4)
	class Texture*                                               MarkTexture;                                       // 0x868(0x8)
	class Texture*                                               AltMarkTexture;                                    // 0x870(0x8)
	float                                                        MarkWidthRatio;                                    // 0x878(0x4)
	float                                                        MarkHeightRatio;                                   // 0x87c(0x4)
	char                                                         MarkBlendMode;                                     // 0x880(0x1)
	char                                                         pad0x3_96IC5[0x3];                                 // 0x881(0x3)
	int                                                          TextCanvasWidth;                                   // 0x884(0x4)
	int                                                          TextCanvasHeight;                                  // 0x888(0x4)
	char                                                         pad0x4_K21M7[0x4];                                 // 0x88c(0x4)
	class Font*                                                  Font;                                              // 0x890(0x8)
	float                                                        FontScale;                                         // 0x898(0x4)
	float                                                        FontLineSpacingScale;                              // 0x89c(0x4)
	class ZoomMapLayout*                                         ZoomMapLayout;                                     // 0x8a0(0x8)
	char                                                         pad0x60_RHRZV[0x60];                               // 0x8a8(0x60)
	struct FString                                               MapTexturePath;                                    // 0x908(0x10)
	char                                                         pad0x20_LOME4[0x20];                               // 0x918(0x20)
	TArray<struct Vector>                                        Marks;                                             // 0x938(0x10)
	struct ZoomMapContents                                       Contents;                                          // 0x948(0x58)
	struct Vector                                                ZoomCenterPoint;                                   // 0x9a0(0xc)
	float                                                        Rotation;                                          // 0x9ac(0x4)
	float                                                        ZoomLevel;                                         // 0x9b0(0x4)
	char                                                         pad0x4_ANJNH[0x4];                                 // 0x9b4(0x4)
	TArray<struct Vector2D>                                      MarkPositions;                                     // 0x9b8(0x10)
	struct Vector2D                                              MarkScale;                                         // 0x9c8(0x8)
	char                                                         pad0x70_OAUC6[0x70];                               // 0x9d0(0x70)
};


// Size 0x20 (Full Size[0x80] - InheritedSize[0x60]
class MechanismAnimationEvent_SwingAudio: public MechanismAnimationEvent_Audio
{
public:
	float                                                        Midpoint;                                          // 0x60(0x4)
	char                                                         pad0x4_77CFD[0x4];                                 // 0x64(0x4)
	char                                                         pad0x18_HHSUI[0x18];                               // 0x68(0x18)
};


// Size 0x30 (Full Size[0xa10] - InheritedSize[0x9e0]
class InterruptibleProjectileActionItem: public DoubleActionItem
{
public:
	struct Status                                                OnInterruptionStatus;                              // 0x9e0(0x20)
	bool                                                         IsOneShotStatus;                                   // 0xa00(0x1)
	char                                                         pad0x3_99CPA[0x3];                                 // 0xa01(0x3)
	float                                                        StatusDuration;                                    // 0xa04(0x4)
	char                                                         pad0x8_O0I51[0x8];                                 // 0xa08(0x8)
};


// Size 0xa8 (Full Size[0x800] - InheritedSize[0x758]
class ChainLightningProjectile: public DamageableCannonProjectile
{
public:
	TArray<char>                                                 TriggerChainLightningHealthChangeReasons;          // 0x758(0x10)
	class ChainLightningSourceComponent*                         ChainLightningSource;                              // 0x768(0x8)
	struct Vector                                                PostFireProjectileScale;                           // 0x770(0xc)
	float                                                        PostFireScaleSpeed;                                // 0x77c(0x4)
	char                                                         pad0x80_4Z4IS[0x80];                               // 0x780(0x80)
};


// Size 0x10 (Full Size[0xe8] - InheritedSize[0xd8]
class CostumeWithEmoteDesc: public CostumeDesc
{
public:
	TArray<class Class*>                                         CostumeEmotes;                                     // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class SpyglassItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x640 (Full Size[0xcc0] - InheritedSize[0x680]
class HarpoonLauncher: public MeshBasedMountableWeapon
{
public:
	char                                                         pad0x138_ZWGOK[0x138];                             // 0x680(0x138)
	struct FName                                                 ProjectileLaunchSocket;                            // 0x7b8(0x8)
	struct FName                                                 TetherAttachSocket;                                // 0x7c0(0x8)
	struct FName                                                 RetractedCharacterTargetPositionSocket;            // 0x7c8(0x8)
	struct ActorComponentSelector                                RetractedCharacterTargetPositionSourceMesh;        // 0x7d0(0x10)
	struct FName                                                 FireAINoiseTag;                                    // 0x7e0(0x8)
	float                                                        FireAINoiseRange;                                  // 0x7e8(0x4)
	char                                                         pad0x4_03CS4[0x4];                                 // 0x7ec(0x4)
	class ChildActorComponent*                                   TetherChildActorComponent;                         // 0x7f0(0x8)
	class StaticMeshComponent*                                   LeftSpinnerMeshComponent;                          // 0x7f8(0x8)
	class StaticMeshComponent*                                   RightSpinnerMeshComponent;                         // 0x800(0x8)
	class StaticMeshComponent*                                   RopeSpoolMeshComponent;                            // 0x808(0x8)
	class RetractorComponent*                                    RetractorComponent;                                // 0x810(0x8)
	class ChildActorComponent*                                   ProjectileChildActorComponent;                     // 0x818(0x8)
	class DamageableComponent*                                   LauncherDamageComponent;                           // 0x820(0x8)
	class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x828(0x8)
	class BalanceableWalkwayComponent*                           BalanceableWalkwayComponent;                       // 0x830(0x8)
	class HarpoonAdaptiveTriggerComponent*                       AdaptiveTriggerComponent;                          // 0x838(0x8)
	TArray<class Class*>                                         ItemTypesToExclude;                                // 0x910(0x10)
	TArray<struct StringClassReference>                          ItemInfosToIgnore;                                 // 0x920(0x10)
	TArray<struct Vector>                                        ItemLocationsForHarpoon;                           // 0x930(0x10)
	class HarpoonLauncherAudioParamsDataAsset*                   AudioParams;                                       // 0x940(0x8)
	class HarpoonLauncherVFXDataAsset*                           VFXParams;                                         // 0x948(0x8)
	class ForceFeedbackEffect*                                   HarpoonImpactRumble;                               // 0x950(0x8)
	class ForceFeedbackEffect*                                   HarpoonDockedRumble;                               // 0x958(0x8)
	class UClass*                                                HarpoonDockedCameraShake;                          // 0x960(0x8)
	class CurveFloat*                                            EstimatedRetractionTimeScalarCurve;                // 0x968(0x8)
	float                                                        ProjectileSpeed;                                   // 0x970(0x4)
	float                                                        RetractionSpeed;                                   // 0x974(0x4)
	float                                                        SpinnerPitchScalar;                                // 0x978(0x4)
	float                                                        RopeSpoolPitchScalar;                              // 0x97c(0x4)
	float                                                        SpinnerMaxSlideDistance;                           // 0x980(0x4)
	float                                                        MaximumTetherLengthCm;                             // 0x984(0x4)
	struct Rotator                                               AimRelativeAngularLimitsDegrees;                   // 0x988(0xc)
	float                                                        PositionRelativeOutOfWaterPitchLimitDegrees;       // 0x994(0x4)
	float                                                        ShipSubmersionProportionRetractThreshold;          // 0x998(0x4)
	char                                                         pad0x2ac_261T3[0x2ac];                             // 0x99c(0x2ac)
	float                                                        ShipOutOfWaterRetractTimeSecs;                     // 0xc48(0x4)
	char                                                         pad0x4_8UNB2[0x4];                                 // 0xc4c(0x4)
	float                                                        OrientateBarrelTowardsTetherSpeedDistanceMultiplier; // 0xc50(0x4)
	float                                                        MaxReelInSpeedCmPerSec;                            // 0xc54(0x4)
	float                                                        MaxWeightReelableAtMaxSpeedKg;                     // 0xc58(0x4)
	bool                                                         IsMigrating;                                       // 0xc5c(0x1)
	char                                                         pad0x1_BJ27Q[0x1];                                 // 0xc5d(0x1)
	bool                                                         AlwaysRetractAtMaxLength;                          // 0xc5e(0x1)
	char                                                         pad0x1_WOSTH[0x1];                                 // 0xc5f(0x1)
	TArray<class Class*>                                         ForwardedDamagerTypes;                             // 0xc60(0x10)
	char                                                         pad0x50_PHBGS[0x50];                               // 0xc70(0x50)
};


// Size 0x2d0 (Full Size[0xac0] - InheritedSize[0x7f0]
class HuntingSpear: public LargeStaticMeshWieldableItem
{
public:
	char                                                         pad0x5c_J1HXG[0x5c];                               // 0x7f0(0x5c)
	float                                                        EquipTimeBeforeUse;                                // 0x84c(0x4)
	float                                                        ADSEnterTime;                                      // 0x850(0x4)
	float                                                        WieldedThrowDelay;                                 // 0x854(0x4)
	float                                                        ChargeDelayTime;                                   // 0x858(0x4)
	float                                                        MinimumChargeTime;                                 // 0x85c(0x4)
	struct FName                                                 RumbleName;                                        // 0x860(0x8)
	class CurveFloat*                                            ChargeFalloffCurve;                                // 0x868(0x8)
	class WwiseEvent*                                            ProjectileThrowSfx;                                // 0x870(0x8)
	class GrenadeSetupDataAsset*                                 GrenadeSetupDataAsset;                             // 0x878(0x8)
	struct WeightedProbabilityRangeOfRanges                      RotationRatePitch;                                 // 0x880(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateRoll;                                  // 0x8b0(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateYaw;                                   // 0x8e0(0x30)
	class UClass*                                                ThrownProjectileType;                              // 0x910(0x8)
	class AimSensitivityComponent*                               AimSensitivityComponent;                           // 0x918(0x8)
	char                                                         pad0x10_TDQUP[0x10];                               // 0x920(0x10)
	float                                                        AimingMoveSpeedScalar;                             // 0x930(0x4)
	char                                                         AimSensitivitySettingCategory;                     // 0x934(0x1)
	char                                                         pad0x3_91M6M[0x3];                                 // 0x935(0x3)
	float                                                        ChargeMaxBoost;                                    // 0x938(0x4)
	float                                                        AcceptableClientOvercharge;                        // 0x93c(0x4)
	struct WeaponProjectileParams                                AmmoParams;                                        // 0x940(0xe0)
	char                                                         pad0x68_2TLMI[0x68];                               // 0xa20(0x68)
	class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0xa88(0x8)
	struct FName                                                 ForceFeedbackTag;                                  // 0xa90(0x8)
	float                                                        FOVBlendSpeed;                                     // 0xa98(0x4)
	float                                                        AimFOV;                                            // 0xa9c(0x4)
	char                                                         pad0x20_JRPL7[0x20];                               // 0xaa0(0x20)
};


// Size 0x10 (Full Size[0x130] - InheritedSize[0x120]
class ClusterDescription: public ItemWithoutIconsDesc
{
public:
	TArray<class Class*>                                         ClusterAssets;                                     // 0x120(0x10)
};


// Size 0x78 (Full Size[0x690] - InheritedSize[0x618]
class ShipCustomizationChest: public PossessionsChest
{
public:
	class SphereComponent*                                       ShipInteractionRadius;                             // 0x618(0x8)
	float                                                        MaxShipSpeedXY;                                    // 0x620(0x4)
	char                                                         pad0x3c_02B43[0x3c];                               // 0x624(0x3c)
	bool                                                         DisableShipCheckRestrictions;                      // 0x660(0x1)
	char                                                         pad0x7_VB5WV[0x7];                                 // 0x661(0x7)
	TArray<class Class*>                                         CustomizableShipSizes;                             // 0x668(0x10)
	TArray<struct ShipCustomizationChestCrewMember>              CrewMembersInteracting;                            // 0x678(0x10)
	class UClass*                                                CaptaincyInteractionType;                          // 0x688(0x8)
};


// Size 0x0 (Full Size[0x168] - InheritedSize[0x168]
class PledgeToReapersVoteInteractionComponent: public InlineVotingInteractionComponent
{
public:
};


// Size 0x140 (Full Size[0xbf0] - InheritedSize[0xab0]
class BattleElevator: public HangingPlatform
{
public:
	class InstancedNavMeshComponent*                             InstancedNavMeshComponent;                         // 0xab0(0x8)
	class LocatorContainer*                                      BattleElevatorLocators;                            // 0xad8(0x8)
	class NamedPointsComponent*                                  NamedPointsComponent;                              // 0xae0(0x8)
	class DamageableComponent*                                   DamageableComponent;                               // 0xae8(0x8)
	TArray<class SceneComponent*>                                ChainPivotComponents;                              // 0xaf0(0x10)
	TArray<struct Vector>                                        ChainAnchorLocations;                              // 0xb00(0x10)
	char                                                         pad0x18_5HVT6[0x18];                               // 0xb10(0x18)
	float                                                        OverrideTransitionPeriod;                          // 0xb28(0x4)
	char                                                         pad0x88_GZX03[0x88];                               // 0xb2c(0x88)
	struct FName                                                 ExplosionNamedPointsGroupName;                     // 0xbb4(0x8)
	char                                                         pad0x34_0TGD8[0x34];                               // 0xbbc(0x34)
};


// Size 0x0 (Full Size[0x100] - InheritedSize[0x100]
class EmptyEmoteDesc: public EmoteDesc
{
public:
};


// Size 0x18 (Full Size[0x758] - InheritedSize[0x740]
class AshenWindsSkullItemInfo: public BootyItemInfo
{
public:
	class FlamethrowerChargeComponent*                           FlamethrowerChargeComponent;                       // 0x740(0x8)
	TArray<struct AshenWindsSkullRewardLevel>                    Rewards;                                           // 0x748(0x10)
};


// Size 0x120 (Full Size[0x670] - InheritedSize[0x550]
class WaterPuzzleAlterationMechanismAction: public ToggleAnimatedMechanismAction
{
public:
	bool                                                         ShouldDrain;                                       // 0x550(0x1)
	char                                                         pad0x7_4I2KX[0x7];                                 // 0x551(0x7)
	class Actor*                                                 PuzzleActor;                                       // 0x558(0x8)
	float                                                        WaterReactionDelay;                                // 0x560(0x4)
	int                                                          WaterLevelCapacity;                                // 0x564(0x4)
	float                                                        MinimumMouthOpenDuration;                          // 0x568(0x4)
	char                                                         pad0xc_LZKCO[0xc];                                 // 0x56c(0xc)
	class WaterPuzzleAlterationMechanismAudioParams*             AlterationMechanismAudioParams;                    // 0x578(0x8)
	class SceneComponent*                                        MouthSFXPosition;                                  // 0x580(0x8)
	struct WwiseEmitter                                          MouthSFXEmitter;                                   // 0x588(0x20)
	struct WwiseEmitter                                          SplashSFXEmitter;                                  // 0x5a8(0x20)
	class WaterSpoutVFXComponent*                                WaterSpoutComponent;                               // 0x5c8(0x8)
	class StoneFaceGlowComponent*                                GlowComponent;                                     // 0x5d0(0x8)
	char                                                         pad0x98_R68AA[0x98];                               // 0x5d8(0x98)
};


// Size 0x10 (Full Size[0x750] - InheritedSize[0x740]
class TreasureChestItemInfo: public BootyItemInfo
{
public:
	char                                                         pad0x10_RLHQH[0x10];                               // 0x740(0x10)
};


// Size 0xf0 (Full Size[0xd40] - InheritedSize[0xc50]
class TestProjectileWeapon: public ProjectileWeapon
{
public:
	struct TestProjectileWeaponParameters                        TestProjectileWeaponParameters;                    // 0xc48(0x1)
	char                                                         pad0x3_Y0PLS[0x3];                                 // 0xc49(0x3)
	int                                                          RequestDeniedCount;                                // 0xc4c(0x4)
	int                                                          FireProjectilesCallCount;                          // 0xc50(0x4)
	int                                                          HitPredictedCount;                                 // 0xc54(0x4)
	int                                                          HitAuthorityCount;                                 // 0xc58(0x4)
	int                                                          ProcessHitsAuthorityCallCount;                     // 0xc5c(0x4)
	bool                                                         OnWeaponFiredCalled;                               // 0xc60(0x1)
	char                                                         pad0x3_06JA9[0x3];                                 // 0xc61(0x3)
	struct Guid                                                  AttackId;                                          // 0xc64(0x10)
	char                                                         pad0x4_96PPJ[0x4];                                 // 0xc74(0x4)
	TArray<class Actor*>                                         ActorsHits;                                        // 0xc78(0x10)
	TArray<class PhysicalMaterial*>                              PhysicsMaterials;                                  // 0xc88(0x10)
	char                                                         pad0x8_HG0CM[0x8];                                 // 0xc98(0x8)
	struct ProjectileAim                                         LastProjectileAim;                                 // 0xca0(0x50)
	char                                                         pad0x50_BV5IP[0x50];                               // 0xcf0(0x50)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class SpeakingTrumpetItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x80 (Full Size[0x7c0] - InheritedSize[0x740]
class MerchantCrateItemInfo: public BootyItemInfo
{
public:
	TArray<struct MerchantCrateItemInfoFaunaBreedRarityEntry>    FaunaBreedRarity;                                  // 0x740(0x10)
	char                                                         pad0x68_L8XP8[0x68];                               // 0x750(0x68)
	class Actor*                                                 CurrentShip;                                       // 0x7b8(0x8)
};


// Size 0x60 (Full Size[0x850] - InheritedSize[0x7f0]
class StaticMerchantCrate: public LargeStaticMeshWieldableItem
{
public:
	class RewindComponent*                                       RewindComponent;                                   // 0x7f0(0x8)
	struct MerchantCrateSfx                                      FullCrateSfx;                                      // 0x7f8(0x20)
	class HitRegSnapshotRedirectImpactToReplicatedMovementAttachParentComponent* HitRegSnapshotRedirectComponent;                   // 0x828(0x8)
	char                                                         pad0x10_BZ5PN[0x10];                               // 0x830(0x10)
	bool                                                         RequiresRewindComponent;                           // 0x840(0x1)
	char                                                         pad0xf_IMHFB[0xf];                                 // 0x841(0xf)
};


// Size 0x68 (Full Size[0x7a8] - InheritedSize[0x740]
class CursedCaptainsSkullItemInfo: public BootyItemInfo
{
public:
	char                                                         pad0x28_J80BP[0x28];                               // 0x740(0x28)
	class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x768(0x8)
	class CutsceneComponent*                                     CutsceneComponent;                                 // 0x770(0x8)
	char                                                         pad0x30_TG0F3[0x30];                               // 0x778(0x30)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class UnarmedCombatItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x750] - InheritedSize[0x750]
class StaticMeshItemProxy: public ItemProxy
{
public:
};


// Size 0x90 (Full Size[0x4e0] - InheritedSize[0x450]
class TeleportStatue: public RespawnStatue
{
public:
	char                                                         pad0x20_PPIVH[0x20];                               // 0x450(0x20)
	struct FText                                                 LinkedCheckpointActionRuleDescription;             // 0x470(0x38)
	struct FText                                                 LinkedCheckpointWithLargeItemActionRuleDescription; // 0x4a8(0x38)
};


// Size 0x0 (Full Size[0x750] - InheritedSize[0x750]
class BuriableItemProxy: public ItemProxy
{
public:
};


// Size 0x120 (Full Size[0x7d8] - InheritedSize[0x6b8]
class CutsceneLockNPC: public NPC
{
public:
	char                                                         pad0x8_DIN4H[0x8];                                 // 0x6b8(0x8)
	class LockComponent*                                         LockComponent;                                     // 0x6c0(0x8)
	class CutsceneComponent*                                     CutsceneComponent;                                 // 0x6c8(0x8)
	class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x6d0(0x8)
	struct FName                                                 OnLockOpenedCutscene;                              // 0x6d8(0x8)
	struct FText                                                 TakeKeyInteractionText;                            // 0x6e0(0x38)
	bool                                                         KeyTaken;                                          // 0x718(0x1)
	char                                                         pad0x7_8SSMS[0x7];                                 // 0x719(0x7)
	TArray<struct SetHiddenData>                                 SetHiddenData;                                     // 0x720(0x10)
	char                                                         pad0xa8_SE5R2[0xa8];                               // 0x730(0xa8)
};


// Size 0x0 (Full Size[0x650] - InheritedSize[0x650]
class CancelVoyageVotableComponent: public VotableVoyageProposalComponent
{
public:
};


// Size 0x10 (Full Size[0x800] - InheritedSize[0x7f0]
class ShroudBreakerWieldable: public LargeStaticMeshWieldableItem
{
public:
	class ShroudBreakerComponent*                                ShroudBreakerComponent;                            // 0x7f0(0x8)
	char                                                         pad0x8_DWVU8[0x8];                                 // 0x7f8(0x8)
};


// Size 0x58 (Full Size[0xd0] - InheritedSize[0x78]
class MechanismAnimationEvent_ContinuousVFX: public MechanismAnimationEvent_VFX
{
public:
	float                                                        StartTime;                                         // 0x78(0x4)
	float                                                        StopTime;                                          // 0x7c(0x4)
	struct MechanismAnimationEvent_VFXParams                     VFXParams;                                         // 0x80(0x48)
	char                                                         pad0x8_R267Z[0x8];                                 // 0xc8(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class SirenTridentItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class BootyItemDesc: public ItemWithoutIconsDesc
{
public:
};


// Size 0x0 (Full Size[0x100] - InheritedSize[0x100]
class WalkableEmoteDesc: public EmoteDesc
{
public:
};


// Size 0x8 (Full Size[0x598] - InheritedSize[0x590]
class TestDockableCutscene: public DockableCutscene
{
public:
	char                                                         pad0x8_HB75R[0x8];                                 // 0x590(0x8)
};


// Size 0x230 (Full Size[0xe80] - InheritedSize[0xc50]
class BlowpipeWeapon: public ProjectileWeapon
{
public:
	int                                                          CurrentDartType;                                   // 0xc50(0x4)
	char                                                         pad0x74_55U8K[0x74];                               // 0xc54(0x74)
	struct BlowpipeWeaponTelemetryEvent                          PendingTelemetryEvent;                             // 0xcc8(0x2c)
	char                                                         pad0x4_64PXH[0x4];                                 // 0xcf4(0x4)
	class BlowpipeDartCollectionDataAsset*                       BlowdartList;                                      // 0xcf8(0x8)
	TArray<struct BlowpipeAmmoStruct>                            DartAmmoMap;                                       // 0xd00(0x10)
	TArray<struct BlowpipeAmmoStruct>                            DartAmmoMap_Replicated;                            // 0xd10(0x10)
	class BlowdartCreationComponent*                             ImpactProxySpawnerComponent;                       // 0xd20(0x8)
	class DartLimitsDataAsset*                                   DartLimitsDataAsset;                               // 0xd28(0x8)
	char                                                         pad0xc0_GXRYK[0xc0];                               // 0xd30(0xc0)
	float                                                        HipfireGravityFalloffScalar;                       // 0xdf0(0x4)
	float                                                        HipfireVelocity;                                   // 0xdf4(0x4)
	float                                                        ADSVelocity;                                       // 0xdf8(0x4)
	float                                                        CachedFireVelocity;                                // 0xdfc(0x4)
	float                                                        EnterADSStateTime;                                 // 0xe00(0x4)
	float                                                        ADSRaiseToMouthDuration;                           // 0xe04(0x4)
	char                                                         pad0x4_AL8NS[0x4];                                 // 0xe08(0x4)
	float                                                        HipfireRaiseToMouthDuration;                       // 0xe0c(0x4)
	char                                                         pad0x8_VMGIC[0x8];                                 // 0xe10(0x8)
	class CurveFloat*                                            ChargeFalloffCurve;                                // 0xe18(0x8)
	class StaticMeshComponent*                                   DartReloadMesh;                                    // 0xe20(0x8)
	struct FName                                                 AnimNotifyEventParentDartMeshToWeapon;             // 0xe28(0x8)
	struct FName                                                 AnimNotifyEventParentDartMeshToHand;               // 0xe30(0x8)
	struct FName                                                 AnimNotifyEventSquishDartFeathers;                 // 0xe38(0x8)
	struct FName                                                 AnimNotifyEventUnSquishDartFeathers;               // 0xe40(0x8)
	class ForceFeedbackEffect*                                   ADSForceFeedbackEffect;                            // 0xe48(0x8)
	struct FName                                                 ADSForceFeedbackTag;                               // 0xe50(0x8)
	char                                                         pad0x28_Z664A[0x28];                               // 0xe58(0x28)
};


// Size 0x288 (Full Size[0x720] - InheritedSize[0x498]
class BuoyantStorageContainer: public StorageContainer
{
public:
	char                                                         pad0x18_4YNTS[0x18];                               // 0x498(0x18)
	bool                                                         UseSocketForInteractionPoint;                      // 0x4b0(0x1)
	char                                                         pad0x3_IY7M7[0x3];                                 // 0x4b1(0x3)
	struct FName                                                 InteractionSocket;                                 // 0x4b4(0x8)
	char                                                         pad0xa4_DRSPZ[0xa4];                               // 0x4bc(0xa4)
	class ShapeComponent*                                        BaseComponent;                                     // 0x560(0x8)
	struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x568(0x1c)
	char                                                         pad0x4_0QOSE[0x4];                                 // 0x584(0x4)
	class BuoyancyComponent*                                     BuoyancyComponent;                                 // 0x588(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x590(0x8)
	struct NetTimeStampCalculator                                MovementTimestamp;                                 // 0x598(0x70)
	struct ReplicatedPhysicsState                                ReplicatedPhysicsState;                            // 0x608(0x50)
	char                                                         pad0x8_WN92F[0x8];                                 // 0x658(0x8)
	class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x660(0x8)
	class RetractableFloatingBarrelComponent*                    RetractableComponent;                              // 0x668(0x8)
	char                                                         pad0xb0_VQYXH[0xb0];                               // 0x670(0xb0)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BlunderbussItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x140 (Full Size[0x9a0] - InheritedSize[0x860]
class RiddleMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x858(0x4)
	int                                                          CanvasHeight;                                      // 0x85c(0x4)
	float                                                        RevealDuration;                                    // 0x860(0x4)
	float                                                        RiddleGateCompleteRampInDuration;                  // 0x864(0x4)
	float                                                        RiddleGateCompleteRampOutDuration;                 // 0x868(0x4)
	char                                                         pad0x4_ZS59W[0x4];                                 // 0x86c(0x4)
	struct RiddleTextRenderer                                    RiddleTextRenderer;                                // 0x870(0x58)
	struct RiddleMapContents                                     Contents;                                          // 0x8c8(0x18)
	struct StringAssetReference                                  MapInventoryTexturePath;                           // 0x8e0(0x10)
	float                                                        Rotation;                                          // 0x8f0(0x4)
	char                                                         pad0xac_36DG5[0xac];                               // 0x8f4(0xac)
};


// Size 0x318 (Full Size[0x810] - InheritedSize[0x4f8]
class SailManipulator: public ControllablePulley
{
public:
	struct RopeVisualParams                                      RopeVisuals;                                       // 0x4f8(0xc)
	float                                                        RopeLength;                                        // 0x504(0x4)
	class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x508(0x8)
	class StaticMeshComponent*                                   TopMeshComponent;                                  // 0x510(0x8)
	class FixedIntentComponent*                                  CurseIntentComponent;                              // 0x518(0x8)
	class WwiseObjectPoolWrapper*                                ManipulatorAudioPool;                              // 0x520(0x8)
	struct SocketId                                              MastSocketId;                                      // 0x528(0x20)
	class SailManipulatorAudioParams*                            AudioParams;                                       // 0x548(0x8)
	class SceneComponent*                                        MastSocketSceneComponent;                          // 0x550(0x8)
	struct WwiseEmitter                                          AudioEmitter;                                      // 0x558(0x20)
	char                                                         pad0x270_TRA8Q[0x270];                             // 0x578(0x270)
	class Mast*                                                  BoundMast;                                         // 0x7e8(0x8)
	class Mast*                                                  PendingBoundMast;                                  // 0x7f0(0x8)
	bool                                                         Locked;                                            // 0x7f8(0x1)
	char                                                         pad0x7_XIIY4[0x7];                                 // 0x7f9(0x7)
	class MobileInstancedStaticMeshComponent*                    TopMeshInstanceComponent;                          // 0x800(0x8)
	char                                                         pad0x8_LH3OO[0x8];                                 // 0x808(0x8)
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class TreasureChest: public LargeSkeletalMeshWieldableItem
{
public:
};


// Size 0x50 (Full Size[0xc8] - InheritedSize[0x78]
class MechanismAnimationEvent_OneShotVFX: public MechanismAnimationEvent_VFX
{
public:
	float                                                        StartTime;                                         // 0x78(0x4)
	char                                                         pad0x4_6NVXM[0x4];                                 // 0x7c(0x4)
	struct MechanismAnimationEvent_VFXParams                     VFXParams;                                         // 0x80(0x48)
};


// Size 0x10 (Full Size[0x900] - InheritedSize[0x8f0]
class EnchantedSpyglass: public Spyglass
{
public:
	class InventoryItemComponent*                                EnchantedInventoryItem;                            // 0x8e8(0x8)
	class Actor*                                                 ConstellationVisibilityEventActor;                 // 0x8f0(0x8)
	char                                                         pad0x8_KBVTE[0x8];                                 // 0x8f8(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class DrumItemCategory: public InstrumentItemCategory
{
public:
};


// Size 0x198 (Full Size[0x830] - InheritedSize[0x698]
class RowingSeat: public Seat
{
public:
	char                                                         pad0x8_RXVDN[0x8];                                 // 0x698(0x8)
	struct OarParams                                             OarParams;                                         // 0x6a0(0x38)
	float                                                        StrokeSynchronisationWindow;                       // 0x6d8(0x4)
	char                                                         pad0x4_BM1TJ[0x4];                                 // 0x6dc(0x4)
	class ForceFeedbackEffect*                                   ForceFeedbackForLeftStrokeEnd;                     // 0x6e0(0x8)
	class ForceFeedbackEffect*                                   ForceFeedbackForRightStrokeEnd;                    // 0x6e8(0x8)
	struct FName                                                 PaddleSocketName;                                  // 0x6f0(0x8)
	class StaticMeshComponent*                                   LeftOarMesh;                                       // 0x6f8(0x8)
	class StaticMeshComponent*                                   RightOarMesh;                                      // 0x700(0x8)
	class RowingSeatAdaptiveTriggerComponent*                    AdaptiveTriggerComponent;                          // 0x708(0x8)
	TArray<char>                                                 OarInputStates;                                    // 0x710(0x10)
	struct Oar                                                   LeftOar;                                           // 0x720(0x60)
	struct Oar                                                   RightOar;                                          // 0x780(0x60)
	char                                                         pad0x48_4LOMD[0x48];                               // 0x7e0(0x48)
	float                                                        PredictiveRowingMinimumStrokeTime;                 // 0x828(0x4)
	int                                                          PredictiveRowingSampleSize;                        // 0x82c(0x4)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class PortableHarpoonItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x740] - InheritedSize[0x740]
class AlwaysCashInItemInfo: public BootyItemInfo
{
public:
};


// Size 0x18 (Full Size[0x6d0] - InheritedSize[0x6b8]
class CompetitiveVoyageShopkeeper: public NPC
{
public:
	char                                                         pad0x8_W6KPO[0x8];                                 // 0x6b8(0x8)
	bool                                                         IsShadyShop;                                       // 0x6c0(0x1)
	char                                                         pad0x7_ZCKZ6[0x7];                                 // 0x6c1(0x7)
	class CompetitiveVoyageNPCComponent*                         CompetitiveVoyageNPCComponent;                     // 0x6c8(0x8)
};


// Size 0x60 (Full Size[0x8c0] - InheritedSize[0x860]
class RenderToTextureMapBase: public TreasureMap
{
public:
	TArray<class Texture*>                                       MapTextures;                                       // 0x858(0x10)
	int                                                          CanvasWidth;                                       // 0x868(0x4)
	int                                                          CanvasHeight;                                      // 0x86c(0x4)
	char                                                         pad0x8_0X1UK[0x8];                                 // 0x870(0x8)
	TArray<struct MapTextureRenderData>                          RenderData;                                        // 0x878(0x10)
	char                                                         pad0x38_EBV1R[0x38];                               // 0x888(0x38)
};


// Size 0x160 (Full Size[0x7e0] - InheritedSize[0x680]
class InvasionArrivalTunnelOfTheDamned: public ClientDestinationPreLoadingArrivalTunnelOfTheDamned
{
public:
	class InvasionArrivalTunnelDesc*                             InvasionArrivalTunnelDesc;                         // 0x678(0x8)
	char                                                         pad0x160_V1LR3[0x160];                             // 0x680(0x160)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class CompassItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0xf0 (Full Size[0x840] - InheritedSize[0x750]
class GoldMoundItemProxy: public ItemProxy
{
public:
	class WwiseEvent*                                            OnMoundInteractStartLoopingSfx;                    // 0x750(0x8)
	class WwiseEvent*                                            OnMoundInteractStopLoopingSfx;                     // 0x758(0x8)
	class WwiseEvent*                                            OnMoundCancelPickupSfx;                            // 0x760(0x8)
	class WwiseEvent*                                            OnMoundPickupCompleteSfx;                          // 0x768(0x8)
	class WwiseObjectPoolWrapper*                                GoldMoundSfxPool;                                  // 0x770(0x8)
	class Object*                                                AmbientVfx;                                        // 0x778(0x8)
	class Object*                                                PickupVfx;                                         // 0x780(0x8)
	class Object*                                                PickupCompleteVfx;                                 // 0x788(0x8)
	char                                                         pad0x20_KYFNF[0x20];                               // 0x790(0x20)
	class ParticleSystemComponent*                               AmbientParticleSystem;                             // 0x7e0(0x8)
	class ParticleSystemComponent*                               PickupParticleSystem;                              // 0x7e8(0x8)
	char                                                         pad0x30_B54AO[0x30];                               // 0x7f0(0x30)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x820(0x10)
	char                                                         pad0x4_35UQV[0x4];                                 // 0x830(0x4)
	float                                                        FadeOutDuration;                                   // 0x834(0x4)
	bool                                                         DelayedDestroyStarted;                             // 0x838(0x1)
	char                                                         pad0x7_0C92C[0x7];                                 // 0x839(0x7)
};


// Size 0x10 (Full Size[0x410] - InheritedSize[0x400]
class ToggleAnimatedMechanismActionProxy: public BaseToggleAnimatedMechanismActionProxy
{
public:
	struct MechanismTransformAnimationCurve                      InactiveToActiveAnimation;                         // 0x400(0x8)
	struct MechanismTransformAnimationCurve                      ActiveToInactiveAnimation;                         // 0x408(0x8)
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class NonDisplaceableLargeStaticMeshWieldableItem: public LargeStaticMeshWieldableItem
{
public:
};


// Size 0xb8 (Full Size[0x880] - InheritedSize[0x7c8]
class BrazierMechanismTrigger: public Beacon
{
public:
	class MechanismTriggerComponent*                             MechanismTrigger;                                  // 0x7c8(0x8)
	char                                                         FlameTypeToActivate;                               // 0x7d0(0x1)
	bool                                                         ActivateWithSpecificLantern;                       // 0x7d1(0x1)
	char                                                         pad0x6_YNIIF[0x6];                                 // 0x7d2(0x6)
	class UClass*                                                LanternToActivate;                                 // 0x7d8(0x8)
	struct FText                                                 LanternNotLitToolTipText;                          // 0x7e0(0x38)
	struct FText                                                 CannotSetBeaconToolTipText;                        // 0x818(0x38)
	class UClass*                                                TakeFlameOfFateNotificationID;                     // 0x850(0x8)
	class UClass*                                                SetFlameOfFateNotificationID;                      // 0x858(0x8)
	float                                                        LanternSwingAmmount;                               // 0x860(0x4)
	float                                                        LanternEmissiveAmmount;                            // 0x864(0x4)
	float                                                        LanternMegaEmmisiveAmount;                         // 0x868(0x4)
	char                                                         pad0x4_DZUMZ[0x4];                                 // 0x86c(0x4)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x870(0x10)
};


// Size 0x30 (Full Size[0x680] - InheritedSize[0x650]
class VoteOnVoyageVotableComponent: public VotableVoyageProposalComponent
{
public:
	float                                                        HoldToWithdrawVoyageTime;                          // 0x650(0x4)
	char                                                         pad0x4_MTPEV[0x4];                                 // 0x654(0x4)
	class UClass*                                                WithdrawActionInputId;                             // 0x658(0x8)
	class UClass*                                                WithdrawActionReleasedInputId;                     // 0x660(0x8)
	char                                                         pad0x18_JIGIZ[0x18];                               // 0x668(0x18)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class EyeOfReachItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x70 (Full Size[0x660] - InheritedSize[0x5f0]
class SwingMechanismAction: public PivotAnimatedMechanismAction
{
public:
	char                                                         pad0x10_IWCIC[0x10];                               // 0x5f0(0x10)
	class MechanismInteractionComponent*                         MechanismInteractionComponent;                     // 0x600(0x8)
	float                                                        MaxAngle;                                          // 0x608(0x4)
	float                                                        MinAngle;                                          // 0x60c(0x4)
	char                                                         Axis;                                              // 0x610(0x1)
	char                                                         pad0x3_L5NSE[0x3];                                 // 0x611(0x3)
	float                                                        Damage;                                            // 0x614(0x4)
	char                                                         DamageReason;                                      // 0x618(0x1)
	char                                                         pad0x7_JD214[0x7];                                 // 0x619(0x7)
	TArray<class SwingMechanismCordRenderComponent*>             CordChildren;                                      // 0x620(0x10)
	TArray<struct SwingMechanismMaterialAnimationContext>        MaterialAnimations;                                // 0x630(0x10)
	char                                                         pad0x8_AV2ZE[0x8];                                 // 0x640(0x8)
	TArray<class Actor*>                                         DamagedActors;                                     // 0x648(0x10)
	char                                                         pad0x8_BI27U[0x8];                                 // 0x658(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class HurdyGurdyItemCategory: public InstrumentItemCategory
{
public:
};


// Size 0x30 (Full Size[0x680] - InheritedSize[0x650]
class PersistentSalvageItemSpawnComponent: public SalvageItemSpawnComponent
{
public:
	float                                                        RefreshItemsRate;                                  // 0x650(0x4)
	char                                                         pad0x4_VW7SG[0x4];                                 // 0x654(0x4)
	TArray<struct SpawnedItem>                                   CachedActors;                                      // 0x658(0x10)
	char                                                         pad0x18_NM569[0x18];                               // 0x668(0x18)
};


// Size 0x8 (Full Size[0x3f0] - InheritedSize[0x3e8]
class PivotAnimatedMechanismActionProxy: public SimpleAnimatedMechanismActionProxy
{
public:
	struct MechanismFloatAnimationCurve                          Animation;                                         // 0x3e8(0x8)
};


// Size 0x0 (Full Size[0x650] - InheritedSize[0x650]
class UnmanagedSalvageItemSpawnComponent: public SalvageItemSpawnComponent
{
public:
};


// Size 0x10 (Full Size[0xb60] - InheritedSize[0xb50]
class PlayerMeleeWeapon: public MeleeWeapon
{
public:
	char                                                         pad0x10_AA5W2[0x10];                               // 0xb50(0x10)
};


// Size 0x10 (Full Size[0x7d8] - InheritedSize[0x7c8]
class AIWaveBeacon: public Beacon
{
public:
	char                                                         pad0x8_0DV0S[0x8];                                 // 0x7c8(0x8)
	class ChildActorComponent*                                   SpawnAIWaveMechanismAction;                        // 0x7d0(0x8)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class ConcertinaItemCategory: public InstrumentItemCategory
{
public:
};


// Size 0x90 (Full Size[0x980] - InheritedSize[0x8f0]
class SpyglassOfRevealing: public Spyglass
{
public:
	char                                                         pad0x8_C7QKM[0x8];                                 // 0x8f0(0x8)
	float                                                        InAimFarSightFOV;                                  // 0x8f8(0x4)
	bool                                                         KeepLastState;                                     // 0x8fc(0x1)
	char                                                         pad0x3_DPXIU[0x3];                                 // 0x8fd(0x3)
	class UClass*                                                ZoomInInput;                                       // 0x900(0x8)
	class RevealerComponent*                                     NearRevealer;                                      // 0x908(0x8)
	class RevealerComponent*                                     FarRevealer;                                       // 0x910(0x8)
	class InteractableComponent*                                 InteractionComponent;                              // 0x918(0x8)
	class PostProcessComponent*                                  FarSightPostProcessComponent;                      // 0x920(0x8)
	struct Vector                                                TargetLocation;                                    // 0x928(0xc)
	bool                                                         WakeVisibility;                                    // 0x934(0x1)
	bool                                                         FarSightEnabled;                                   // 0x935(0x1)
	char                                                         pad0x2_VAPCQ[0x2];                                 // 0x936(0x2)
	class MaterialInstanceDynamic*                               FarSightDynamicMaterial;                           // 0x938(0x8)
	class MaterialInstance*                                      FarSightMaterialParent;                            // 0x940(0x8)
	class Texture2D*                                             FarSightLensNormal;                                // 0x948(0x8)
	class Texture2D*                                             FarSightLensMask;                                  // 0x950(0x8)
	struct LinearColor                                           FarSightLensTint;                                  // 0x958(0x10)
	char                                                         pad0x18_KAUAZ[0x18];                               // 0x968(0x18)
};


// Size 0xf0 (Full Size[0x950] - InheritedSize[0x860]
class BountyMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x858(0x4)
	int                                                          CanvasHeight;                                      // 0x85c(0x4)
	class Font*                                                  Font;                                              // 0x860(0x8)
	float                                                        FontScale;                                         // 0x868(0x4)
	float                                                        FontLineSpacingScale;                              // 0x86c(0x4)
	char                                                         pad0x8_U9O6W[0x8];                                 // 0x870(0x8)
	class BountyMapLayout*                                       BountyMapLayout;                                   // 0x878(0x8)
	struct BountyMapContents                                     Contents;                                          // 0x880(0x68)
	struct StringAssetReference                                  MapInventoryTexturePath;                           // 0x8e8(0x10)
	float                                                        Rotation;                                          // 0x8f8(0x4)
	char                                                         pad0x54_PQVUL[0x54];                               // 0x8fc(0x54)
};


// Size 0x30 (Full Size[0x820] - InheritedSize[0x7f0]
class MerchantCrate: public LargeSkeletalMeshWieldableItem
{
public:
	struct MerchantCrateSfx                                      FullCrateSfx;                                      // 0x7f0(0x20)
	char                                                         pad0x10_PXW96[0x10];                               // 0x810(0x10)
};


// Size 0x0 (Full Size[0x860] - InheritedSize[0x860]
class CollectorsChestStaticWieldableItem: public CollectorsChestWieldableItemWithOpenableComponent
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class StrongholdKey: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class InvalidPetEntitlementCategory: public PetEntitlementCategory
{
public:
};


// Size 0x0 (Full Size[0x750] - InheritedSize[0x750]
class WeepingChestItemInfo: public TreasureChestItemInfo
{
public:
};


// Size 0x10 (Full Size[0x800] - InheritedSize[0x7f0]
class CursedCaptainsSkullWieldable: public SimpleBootyWieldableItem
{
public:
	char                                                         pad0x10_9JSO0[0x10];                               // 0x7f0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LegendarySkellyFort2023GameEventType: public LegendarySkellyFortGameEventType
{
public:
};


// Size 0xb0 (Full Size[0x970] - InheritedSize[0x8c0]
class TornMap: public RenderToTextureMapBase
{
public:
	char                                                         pad0x8_Q7FOR[0x8];                                 // 0x8c0(0x8)
	struct StringAssetReference                                  AltMapMarkTextureAsset;                            // 0x8c8(0x10)
	class Texture*                                               AltMapMarkTexture;                                 // 0x8d8(0x8)
	float                                                        BlendSpeed;                                        // 0x8e0(0x4)
	char                                                         pad0x4_HK8VU[0x4];                                 // 0x8e4(0x4)
	TArray<struct StringAssetReference>                          MaskRefs;                                          // 0x8e8(0x10)
	TArray<struct Vector>                                        TargetVisibility;                                  // 0x8f8(0x10)
	char                                                         pad0x24_2IBBI[0x24];                               // 0x908(0x24)
	float                                                        MaskRotation;                                      // 0x92c(0x4)
	int                                                          NumPieces;                                         // 0x930(0x4)
	char                                                         pad0x4_7KO13[0x4];                                 // 0x934(0x4)
	TArray<class Texture*>                                       MaskTextures;                                      // 0x938(0x10)
	char                                                         pad0x28_TH7FV[0x28];                               // 0x948(0x28)
};


// Size 0x0 (Full Size[0x100] - InheritedSize[0x100]
class EmptyWalkableEmoteDesc: public WalkableEmoteDesc
{
public:
};


// Size 0x0 (Full Size[0x750] - InheritedSize[0x750]
class GreenscreenItemProxy: public StaticMeshItemProxy
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class TreasureChestStatic: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FortOfTheDamnedRebalanceGameEventType: public FortOfTheDamnedGameEventType
{
public:
};


// Size 0x18 (Full Size[0x6a8] - InheritedSize[0x690]
class ShipFlagCustomizationChest: public ShipCustomizationChest
{
public:
	class Actor*                                                 ParentActor;                                       // 0x690(0x8)
	char                                                         pad0x10_DVOZU[0x10];                               // 0x698(0x10)
};


// Size 0x0 (Full Size[0x680] - InheritedSize[0x680]
class PersistentSalvageItemSpawnComponentMock: public PersistentSalvageItemSpawnComponent
{
public:
};


// Size 0xd0 (Full Size[0x7a0] - InheritedSize[0x6d0]
class TavernStrangerNPC: public CompanyShopkeeper
{
public:
	class TavernStrangersBarrel*                                 OwnedBarrelMeshActor;                              // 0x6d0(0x8)
	bool                                                         StrangerControlsBarrelVisibility;                  // 0x6d8(0x1)
	char                                                         pad0x7_Y72PN[0x7];                                 // 0x6d9(0x7)
	class AthenaPlayerController*                                RegisteredController;                              // 0x6e0(0x8)
	char                                                         pad0x8_63L7Z[0x8];                                 // 0x6e8(0x8)
	struct ObjectMessagingHandle                                 ShowNPCEventHandle;                                // 0x6f0(0x58)
	struct ObjectMessagingHandle                                 ResetNPCEventHandle;                               // 0x748(0x58)
};


// Size 0x40 (Full Size[0x850] - InheritedSize[0x810]
class SailHoist: public SailManipulator
{
public:
	char                                                         pad0x10_364NT[0x10];                               // 0x810(0x10)
	float                                                        RopeUVSpeed;                                       // 0x820(0x4)
	char                                                         pad0x4_Q1CJF[0x4];                                 // 0x824(0x4)
	class RiggingSystemComponent*                                Rigging;                                           // 0x828(0x8)
	int                                                          RiggingRopeIndex;                                  // 0x830(0x4)
	bool                                                         PlayAudio;                                         // 0x834(0x1)
	char                                                         pad0x1b_KXIJ6[0x1b];                               // 0x835(0x1b)
};


// Size 0x290 (Full Size[0xdf0] - InheritedSize[0xb60]
class ThrowableMeleeWeapon: public PlayerMeleeWeapon
{
public:
	char                                                         pad0xe0_EVASD[0xe0];                               // 0xb60(0xe0)
	class WwiseEvent*                                            ProjectileThrowSfx;                                // 0xc40(0x8)
	int                                                          AmmoLeft;                                          // 0xc48(0x4)
	char                                                         pad0x4_BUFV5[0x4];                                 // 0xc4c(0x4)
	bool                                                         RightClickHeld;                                    // 0xc50(0x1)
	char                                                         pad0x7_YM5WL[0x7];                                 // 0xc51(0x7)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializerPouch;                           // 0xc58(0x8)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializerKnife;                           // 0xc60(0x8)
	class StaticMesh*                                            KnifeStaticMesh;                                   // 0xc68(0x8)
	class MaterialInterface*                                     KnifeTexture;                                      // 0xc70(0x8)
	class StaticMesh*                                            PouchStaticMesh;                                   // 0xc78(0x8)
	class MaterialInterface*                                     PouchTexture;                                      // 0xc80(0x8)
	float                                                        ThrowAnimLockInTime;                               // 0xc88(0x4)
	float                                                        WaitForThrowAnimDelay;                             // 0xc8c(0x4)
	float                                                        HeavyAttackActionCooldown;                         // 0xc90(0x4)
	float                                                        HeavyAttackPrimeTime;                              // 0xc94(0x4)
	float                                                        LightAttackMovementDelayTime;                      // 0xc98(0x4)
	float                                                        EquipDelayTime;                                    // 0xc9c(0x4)
	struct FName                                                 RumbleName;                                        // 0xca0(0x8)
	char                                                         pad0x88_R20H2[0x88];                               // 0xca8(0x88)
	class GrenadeSetupDataAsset*                                 GrenadeSetupDataAsset;                             // 0xd30(0x8)
	struct WeightedProbabilityRangeOfRanges                      RotationRatePitch;                                 // 0xd38(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateRoll;                                  // 0xd68(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateYaw;                                   // 0xd98(0x30)
	class UClass*                                                ThrownProjectileType;                              // 0xdc8(0x8)
	class AimSensitivityComponent*                               AimSensitivityComponent;                           // 0xdd0(0x8)
	char                                                         pad0x10_00YBO[0x10];                               // 0xdd8(0x10)
	float                                                        AimingMoveSpeedScalar;                             // 0xde8(0x4)
	char                                                         AimSensitivitySettingCategory;                     // 0xdec(0x1)
	char                                                         pad0x3_3U4LN[0x3];                                 // 0xded(0x3)
};


// Size 0x110 (Full Size[0x790] - InheritedSize[0x680]
class VoteOnWarMapComponent: public VoteOnVoyageVotableComponent
{
public:
	struct FText                                                 CrewOnInvasionTooltipText;                         // 0x680(0x38)
	struct FText                                                 CrewInRangeOfEnemyFactionShipText;                 // 0x6b8(0x38)
	TArray<struct FactionDisplayInfo>                            FactionDisplayInfos;                               // 0x6f0(0x10)
	char                                                         pad0x90_5ZCXS[0x90];                               // 0x700(0x90)
};


// Size 0x48 (Full Size[0x858] - InheritedSize[0x810]
class SailAngle: public SailManipulator
{
public:
	char                                                         pad0x10_J7FBD[0x10];                               // 0x810(0x10)
	float                                                        RopeUVSpeed;                                       // 0x820(0x4)
	char                                                         pad0x4_299RR[0x4];                                 // 0x824(0x4)
	class RiggingSystemComponent*                                Rigging;                                           // 0x828(0x8)
	int                                                          RiggingLeftRopeIndex;                              // 0x830(0x4)
	int                                                          RiggingRightRopeIndex;                             // 0x834(0x4)
	bool                                                         PlayAudio;                                         // 0x838(0x1)
	char                                                         pad0x1f_H04UW[0x1f];                               // 0x839(0x1f)
};


// Size 0x18 (Full Size[0x428] - InheritedSize[0x410]
class WaterPuzzleAlterationMechanismActionProxy: public ToggleAnimatedMechanismActionProxy
{
public:
	class Actor*                                                 PuzzleActor;                                       // 0x410(0x8)
	float                                                        WaterReactionDelay;                                // 0x418(0x4)
	int                                                          WaterLevelCapacity;                                // 0x41c(0x4)
	float                                                        MinimumMouthOpenDuration;                          // 0x420(0x4)
	char                                                         pad0x4_DUPRQ[0x4];                                 // 0x424(0x4)
};


// Size 0x8 (Full Size[0x7c8] - InheritedSize[0x7c0]
class MerchantCrateItemInfoMock: public MerchantCrateItemInfo
{
public:
	char                                                         pad0x8_89BVN[0x8];                                 // 0x7c0(0x8)
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class BountyReward: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class StaticSimpleBootyWieldableItem: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x1b0 (Full Size[0x900] - InheritedSize[0x750]
class FloatingItemProxy: public BuriableItemProxy
{
public:
	char                                                         pad0x8_ES4RY[0x8];                                 // 0x750(0x8)
	struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x758(0x1c)
	char                                                         pad0x4_GDN7V[0x4];                                 // 0x774(0x4)
	class BoxComponent*                                          BaseComponent;                                     // 0x778(0x8)
	char                                                         pad0x38_37W0I[0x38];                               // 0x780(0x38)
	struct NetTimeStampCalculator                                MovementTimestamp;                                 // 0x7b8(0x70)
	class Actor*                                                 TutorialOwner;                                     // 0x828(0x8)
	struct ReplicatedPhysicsState                                ReplicatedPhysicsState;                            // 0x830(0x50)
	class RetractableComponent*                                  RetractableComponent;                              // 0x880(0x8)
	char                                                         pad0x71_52YBY[0x71];                               // 0x888(0x71)
	char                                                         CachedAutoAimCollisionChannel;                     // 0x8f9(0x1)
	char                                                         CachedVehicleCollisionResponse;                    // 0x8fa(0x1)
	bool                                                         ForceKeepTickActive;                               // 0x8fb(0x1)
	bool                                                         DisallowHarpoon;                                   // 0x8fc(0x1)
	bool                                                         IsTutorialProxy;                                   // 0x8fd(0x1)
	char                                                         pad0x2_WIG8C[0x2];                                 // 0x8fe(0x2)
};


// Size 0x40 (Full Size[0x900] - InheritedSize[0x8c0]
class LocationMap: public RenderToTextureMapBase
{
public:
	TArray<struct MapTextureRenderData>                          CachedRenderData;                                  // 0x8c0(0x10)
	TArray<class Class*>                                         MarkIds;                                           // 0x8d0(0x10)
	char                                                         pad0x20_4TR8R[0x20];                               // 0x8e0(0x20)
};


// Size 0x0 (Full Size[0xd50] - InheritedSize[0xd50]
class DebugRenderCaptainsLogbook: public CaptainsLogbookWieldable
{
public:
};


// Size 0x258 (Full Size[0x998] - InheritedSize[0x740]
class CaptainsLogItemInfo: public WieldableBookItemInfo
{
public:
	char                                                         pad0x18_O8ICZ[0x18];                               // 0x740(0x18)
	struct CaptainsLogbookDataCache                              DataCache;                                         // 0x758(0xe8)
	TArray<struct CaptainsLogItemInfoRarityEntry>                DaysAtSeaRarity;                                   // 0x840(0x10)
	struct CompanySpecificBootyReward                            HandInOwnLogReward;                                // 0x850(0x18)
	struct PartDesc                                              CachedCustomization;                               // 0x868(0x20)
	bool                                                         ShouldLogBeRuined;                                 // 0x888(0x1)
	bool                                                         IsLogForGuildShip;                                 // 0x889(0x1)
	char                                                         pad0x6_J3TM7[0x6];                                 // 0x88a(0x6)
	int                                                          MaxDaysAtSeaRarity;                                // 0x890(0x4)
	char                                                         pad0x4_SBWMI[0x4];                                 // 0x894(0x4)
	TArray<int>                                                  BookContents;                                      // 0x898(0x10)
	TArray<int>                                                  CurrentBookContents;                               // 0x8a8(0x10)
	char                                                         LastKnownShipType;                                 // 0x8c0(0x1)
	char                                                         pad0xd7_XJLBJ[0xd7];                               // 0x8c1(0xd7)
};


// Size 0x0 (Full Size[0x7f0] - InheritedSize[0x7f0]
class StaticStorageCrateWieldable: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x900] - InheritedSize[0x900]
class TestableEnchantedSpyglass: public EnchantedSpyglass
{
public:
};


// Size 0x590 (Full Size[0xce0] - InheritedSize[0x750]
class TrapItemProxy: public BuriableItemProxy
{
public:
	char                                                         pad0x18_3FTN3[0x18];                               // 0x750(0x18)
	struct FeatureFlag                                           FeatureToggle;                                     // 0x768(0xc)
	char                                                         pad0x4_GEEIH[0x4];                                 // 0x774(0x4)
	class StorageContainerComponent*                             StorageContainerComponent;                         // 0x778(0x8)
	class AddOpenContainerActionRuleComponent*                   AddOpenContainerActionRuleComponent;               // 0x780(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x788(0x8)
	class ItemProxyShipTrackerComponent*                         ItemProxyTrackerComponent;                         // 0x790(0x8)
	class TrapDataAsset*                                         SocketedItemsPlayerStats;                          // 0x798(0x8)
	class StaticMeshMemoryConstraintComponent*                   SocketedMesh;                                      // 0x7a0(0x8)
	class BoxComponent*                                          BaseComponent;                                     // 0x7a8(0x8)
	class BoxComponent*                                          BoxCollisionComponent;                             // 0x7b0(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x7b8(0x8)
	class HealthComponent*                                       HealthComponent;                                   // 0x7c0(0x8)
	class DamageableComponent*                                   DamageableComponent;                               // 0x7c8(0x8)
	class ExplosionComponent*                                    ExplosionComponent;                                // 0x7d0(0x8)
	class RewindComponent*                                       RewindComponent;                                   // 0x7d8(0x8)
	class MaterialInstanceDynamic*                               DynamicMaterialInstance;                           // 0x7e0(0x8)
	class UClass*                                                FireworkCategory;                                  // 0x7e8(0x8)
	class UClass*                                                Flare;                                             // 0x7f0(0x8)
	class UClass*                                                Jigball;                                           // 0x7f8(0x8)
	struct Status                                                LimpStatus;                                        // 0x800(0x20)
	bool                                                         UsesStatus;                                        // 0x820(0x1)
	char                                                         pad0x3_E3XJG[0x3];                                 // 0x821(0x3)
	float                                                        ActivationDelay;                                   // 0x824(0x4)
	float                                                        DamageActivationDelay;                             // 0x828(0x4)
	char                                                         pad0x4_3Z7UN[0x4];                                 // 0x82c(0x4)
	TArray<class Class*>                                         InstantTriggerDamagerTypes;                        // 0x830(0x10)
	float                                                        DestroyDelay;                                      // 0x840(0x4)
	float                                                        Lifespan;                                          // 0x844(0x4)
	float                                                        FadeTime;                                          // 0x848(0x4)
	float                                                        DroppedInWaterLifespan;                            // 0x84c(0x4)
	float                                                        TrapDamage;                                        // 0x850(0x4)
	struct Vector                                                FireworkSpawnOffset;                               // 0x854(0xc)
	class WwiseEvent*                                            SocketedTrapSfx;                                   // 0x860(0x8)
	class WwiseEvent*                                            TriggerTrapSfx;                                    // 0x868(0x8)
	class WwiseEvent*                                            DisarmTrapSfx;                                     // 0x870(0x8)
	class WwiseEvent*                                            StopDisarmTrapSfx;                                 // 0x878(0x8)
	class WwiseEvent*                                            DestroyTrapSfx;                                    // 0x880(0x8)
	class WwiseObjectPoolWrapper*                                TrapSfxPool;                                       // 0x888(0x8)
	TArray<char>                                                 AllowedTriggerAITeams;                             // 0x890(0x10)
	char                                                         pad0x4_2VL0D[0x4];                                 // 0x8a0(0x4)
	struct Guid                                                  CachedOwningCrewId;                                // 0x8ac(0x10)
	char                                                         pad0x2c_6SY6Y[0x2c];                               // 0x8bc(0x2c)
	char                                                         TrapState;                                         // 0x8e8(0x1)
	char                                                         pad0x1f_9AHAW[0x1f];                               // 0x8e9(0x1f)
	bool                                                         IsActive;                                          // 0x908(0x1)
	bool                                                         HasPickedUp;                                       // 0x909(0x1)
	bool                                                         HasTriggered;                                      // 0x90a(0x1)
	bool                                                         TriggeredByPlayer;                                 // 0x90b(0x1)
	bool                                                         HasExploded;                                       // 0x90c(0x1)
	bool                                                         ItemInfoOverridden;                                // 0x90d(0x1)
	char                                                         pad0x2_R66QB[0x2];                                 // 0x90e(0x2)
	class ItemInfo*                                              StoredItemInfo;                                    // 0x910(0x8)
	class UClass*                                                SocketedItemDesc;                                  // 0x920(0x8)
	class Actor*                                                 ProjectileActor;                                   // 0x928(0x8)
	struct LoadableProjectileData                                LoadableProjectileData;                            // 0x930(0x18)
	bool                                                         ShouldLaunchProjectile;                            // 0x948(0x1)
	char                                                         pad0x237_AHNJ2[0x237];                             // 0x949(0x237)
	struct Guid                                                  TrapId;                                            // 0xb80(0x10)
	char                                                         pad0x128_LMBZ3[0x128];                             // 0xb90(0x128)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0xcb8(0x8)
	char                                                         pad0x20_X12YE[0x20];                               // 0xcc0(0x20)
};


// Size 0x0 (Full Size[0x6d0] - InheritedSize[0x6d0]
class Sovereign: public CompanyShopkeeper
{
public:
};


// Size 0x40 (Full Size[0x690] - InheritedSize[0x650]
class IslandWatercraftSpawnComponent: public UnmanagedSalvageItemSpawnComponent
{
public:
	float                                                        MinMaxYawOffset;                                   // 0x650(0x4)
	float                                                        MinDistanceToNearestWatercraftInMetres;            // 0x654(0x4)
	char                                                         pad0x38_2YFDM[0x38];                               // 0x658(0x38)
};


// Size 0x0 (Full Size[0x980] - InheritedSize[0x980]
class TestableSpyglassOfRevealing: public SpyglassOfRevealing
{
public:
};


// Size 0x120 (Full Size[0x9e0] - InheritedSize[0x8c0]
class TradeRouteMap: public RenderToTextureMapBase
{
public:
	class Font*                                                  Font;                                              // 0x8c0(0x8)
	struct LinearColor                                           FontColour;                                        // 0x8c8(0x10)
	float                                                        FontLineSpacing;                                   // 0x8d8(0x4)
	float                                                        FontScale;                                         // 0x8dc(0x4)
	struct TradeRouteMapTextLayout                               TextData;                                          // 0x8e0(0x10)
	char                                                         ImageBlendMode;                                    // 0x8f0(0x1)
	char                                                         pad0x7_ND40B[0x7];                                 // 0x8f1(0x7)
	TArray<struct TreasureMapWidgetTexture>                      ImageData;                                         // 0x8f8(0x10)
	struct StringAssetReference                                  IslandMaterialReference;                           // 0x908(0x10)
	struct FText                                                 VesselText;                                        // 0x918(0x38)
	struct FText                                                 OriginText;                                        // 0x950(0x38)
	struct FText                                                 DestinationText;                                   // 0x988(0x38)
	char                                                         pad0x20_YIKBY[0x20];                               // 0x9c0(0x20)
};


// Size 0x10 (Full Size[0x660] - InheritedSize[0x650]
class UnmanagedSalvageItemSpawnComponentMock: public UnmanagedSalvageItemSpawnComponent
{
public:
	char                                                         pad0x10_K70KU[0x10];                               // 0x650(0x10)
};


// Size 0x20 (Full Size[0x410] - InheritedSize[0x3f0]
class SpikeMechanismActionProxy: public PivotAnimatedMechanismActionProxy
{
public:
	float                                                        Extent;                                            // 0x3f0(0x4)
	float                                                        Damage;                                            // 0x3f4(0x4)
	char                                                         DamageReason;                                      // 0x3f8(0x1)
	char                                                         pad0x7_FA6NY[0x7];                                 // 0x3f9(0x7)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x400(0x10)
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class MerchantCrateItemDescMock: public BootyItemDesc
{
public:
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class WieldableBookItemDesc: public BootyItemDesc
{
public:
};


// Size 0x18 (Full Size[0x138] - InheritedSize[0x120]
class CargoRunItemDesc: public BootyItemDesc
{
public:
	struct Guid                                                  DeliveryLocationId;                                // 0x120(0x10)
	char                                                         pad0x8_NPWDU[0x8];                                 // 0x130(0x8)
};


// Size 0x10 (Full Size[0xd60] - InheritedSize[0xd50]
class CaptainsLogbookInteractable: public CaptainsLogbookWieldable
{
public:
	char                                                         pad0x10_XKKIQ[0x10];                               // 0xd50(0x10)
};


// Size 0x10 (Full Size[0x830] - InheritedSize[0x820]
class DamageableMerchantCrate: public MerchantCrate
{
public:
	class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x820(0x8)
	class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x828(0x8)
};


// Size 0x10 (Full Size[0x860] - InheritedSize[0x850]
class StaticDamageableMerchantCrate: public StaticMerchantCrate
{
public:
	class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x848(0x8)
	class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x850(0x8)
	char                                                         pad0x8_391YQ[0x8];                                 // 0x858(0x8)
};


// Size 0xe8 (Full Size[0x838] - InheritedSize[0x750]
class ReapersChestItemInfo: public TreasureChestItemInfo
{
public:
	char                                                         pad0x8_KFEQV[0x8];                                 // 0x750(0x8)
	float                                                        SealBreakSequenceDelay;                            // 0x758(0x4)
	char                                                         pad0x4_STW5R[0x4];                                 // 0x75c(0x4)
	class UClass*                                                ActivatedWieldableType;                            // 0x760(0x8)
	bool                                                         HasPlayedSealBreakSequence;                        // 0x768(0x1)
	char                                                         pad0xaf_RXBYD[0xaf];                               // 0x769(0xaf)
	struct ReapersChestItemInfoReplicatedData                    ReplicatedData;                                    // 0x818(0x1c)
	char                                                         pad0x4_QURGE[0x4];                                 // 0x834(0x4)
};


// Size 0x18 (Full Size[0x768] - InheritedSize[0x750]
class SeaFortKeyItemInfo: public TreasureChestItemInfo
{
public:
	char                                                         pad0x18_RHTF5[0x18];                               // 0x750(0x18)
};


// Size 0x10 (Full Size[0x890] - InheritedSize[0x880]
class FortOfTheDamnedBrazierMechanismTrigger: public BrazierMechanismTrigger
{
public:
	class ParticleSystemComponent*                               FOTDBeaconActiveParticleSystem;                    // 0x880(0x8)
	bool                                                         IsActiveWaveBrazier;                               // 0x888(0x1)
	char                                                         pad0x7_FJ997[0x7];                                 // 0x889(0x7)
};


// Size 0x10 (Full Size[0x800] - InheritedSize[0x7f0]
class VoyagerFishWieldableItem: public SimpleBootyWieldableItem
{
public:
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7f0(0x8)
	char                                                         pad0x8_KONCW[0x8];                                 // 0x7f8(0x8)
};


// Size 0x2a0 (Full Size[0xa90] - InheritedSize[0x7f0]
class WaterGunWieldableItem: public SimpleBootyWieldableItem
{
public:
	char                                                         pad0x58_CLG49[0x58];                               // 0x7f0(0x58)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x848(0x8)
	class ParticleSystemComponent*                               LiquidLauncherParticleSystemComponent;             // 0x850(0x8)
	class ParticleSystemComponent*                               LiquidLauncherChargeParticleSystemComponent;       // 0x858(0x8)
	class ParticleSystemComponent*                               LiquidLauncherCurrentPressureParticleSystemComponent; // 0x860(0x8)
	class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0x868(0x8)
	class WaterGunLiquidLauncherController*                      LiquidLauncherController;                          // 0x870(0x8)
	struct ItemUseSpeedParams                                    ItemUseSpeedModifiers;                             // 0x878(0x8)
	float                                                        ItemUseFOVBlendSpeed;                              // 0x880(0x4)
	float                                                        ItemUseTargetFOV;                                  // 0x884(0x4)
	float                                                        AimingDownSightsEffectsDelayAmount;                // 0x888(0x4)
	float                                                        StartLiquidLauncherOnServerDelayLatencyCompensation; // 0x88c(0x4)
	float                                                        LiquidLauncherParticleSystemMaxLength;             // 0x890(0x4)
	char                                                         LiquidLauncherParticleSystemCustomLocalSpaceMode;  // 0x894(0x1)
	char                                                         pad0x3_POAXR[0x3];                                 // 0x895(0x3)
	struct FName                                                 OpenJawMaterialAnimationName;                      // 0x898(0x8)
	struct FName                                                 CloseJawMaterialAnimationName;                     // 0x8a0(0x8)
	struct Vector                                                LiquidLauncherParticleSystemThirdPersonAttachPoint; // 0x8a8(0xc)
	struct Rotator                                               LiquidLauncherParticleSystemThirdPersonRotation;   // 0x8b4(0xc)
	struct Vector                                                LiquidLauncherParticleSystemFirstPersonAttachPoint; // 0x8c0(0xc)
	struct Rotator                                               LiquidLauncherParticleSystemFirstPersonRotation;   // 0x8cc(0xc)
	struct Rotator                                               LiquidLauncherCurrentPressureParticleSystemFirstPersonRotation; // 0x8d8(0xc)
	struct Vector                                                LiquidLauncherCurrentPressureParticleSystemFirstPersonAttachPoint; // 0x8e4(0xc)
	struct Rotator                                               LiquidLauncherChargeParticleSystemFirstPersonRotation; // 0x8f0(0xc)
	struct Vector                                                LiquidLauncherChargeParticleSystemPersonAttachPoint; // 0x8fc(0xc)
	bool                                                         EnableCustomParticleSystemBelowWater;              // 0x908(0x1)
	char                                                         pad0x7_JYCGY[0x7];                                 // 0x909(0x7)
	class ParticleSystem*                                        AboveWaterThirdPersonParticleSystem;               // 0x910(0x8)
	class ParticleSystem*                                        BelowWaterThirdPersonParticleSystem;               // 0x918(0x8)
	class ParticleSystem*                                        AboveWaterFirstPersonParticleSystem;               // 0x920(0x8)
	class ParticleSystem*                                        BelowWaterFirstPersonParticleSystem;               // 0x928(0x8)
	class ParticleSystem*                                        CurrentPressureZeroParticleSystem;                 // 0x930(0x8)
	class ParticleSystem*                                        CurrentPressureOverchargedParticleSystem;          // 0x938(0x8)
	class ParticleSystem*                                        CurrentPressureAboveZeroParticleSystem;            // 0x940(0x8)
	class ParticleSystem*                                        LiquidLauncherChargeParticleSystem;                // 0x948(0x8)
	class WwiseEvent*                                            LiquidLauncherLoopStartEvent;                      // 0x950(0x8)
	class WwiseEvent*                                            LiquidLauncherLoopStopEvent;                       // 0x958(0x8)
	struct FName                                                 LiquidLauncherLoopChargeLevelRTPC;                 // 0x960(0x8)
	struct FloatRange                                            LiquidLauncherLoopChargeLevelRTPCRange;            // 0x968(0x10)
	struct FName                                                 LiquidLauncherLoopPressureLevelRTPC;               // 0x978(0x8)
	struct FloatRange                                            LiquidLauncherLoopPressureLevelRTPCRange;          // 0x980(0x10)
	class WwiseEvent*                                            LiquidLauncherActivatedEvent;                      // 0x990(0x8)
	class WwiseEvent*                                            LiquidLauncherDeactivatedEvent;                    // 0x998(0x8)
	float                                                        PressureTooLowForSFX;                              // 0x9a0(0x4)
	char                                                         pad0x4_V1DHV[0x4];                                 // 0x9a4(0x4)
	class ForceFeedbackEffect*                                   PrimaryUsingLiquidLauncherForceFeedback;           // 0x9a8(0x8)
	class ForceFeedbackEffect*                                   SecondaryUsingLiquidLauncherForceFeedback;         // 0x9b0(0x8)
	class ForceFeedbackEffect*                                   OverchargeUsingLiquidLauncherForceFeedback;        // 0x9b8(0x8)
	float                                                        MaxAmmo;                                           // 0x9c0(0x4)
	float                                                        AmmoDrainPerSecond;                                // 0x9c4(0x4)
	float                                                        MaxPressure;                                       // 0x9c8(0x4)
	float                                                        MaxPressureOvercharge;                             // 0x9cc(0x4)
	float                                                        PressureDrainPerSecond;                            // 0x9d0(0x4)
	float                                                        PressureChargePerSecond;                           // 0x9d4(0x4)
	float                                                        OverchargeDrainDelayInSeconds;                     // 0x9d8(0x4)
	float                                                        FizzSpeed;                                         // 0x9dc(0x4)
	float                                                        WobbleSpeed;                                       // 0x9e0(0x4)
	float                                                        LiquidLevelMin;                                    // 0x9e4(0x4)
	float                                                        LiquidLevelMax;                                    // 0x9e8(0x4)
	char                                                         pad0x4_Y14PR[0x4];                                 // 0x9ec(0x4)
	class Pawn*                                                  Wielder;                                           // 0x9f0(0x8)
	class LiquidLauncherChargeVisuals*                           LiquidLauncherChargeVisuals;                       // 0xa08(0x8)
	char                                                         pad0x50_EFAGS[0x50];                               // 0xa10(0x50)
	float                                                        CurrentAmmo;                                       // 0xa60(0x4)
	float                                                        CurrentPressure;                                   // 0xa64(0x4)
	char                                                         pad0x8_AMUAH[0x8];                                 // 0xa68(0x8)
	class MaterialInstanceDynamic*                               FirstPersonLiquidLauncherLiquidMaterial;           // 0xa70(0x8)
	class MaterialInstanceDynamic*                               ThirdPersonLiquidLauncherLiquidMaterial;           // 0xa78(0x8)
	char                                                         pad0x10_5VCZ1[0x10];                               // 0xa80(0x10)
};


// Size 0xb0 (Full Size[0x800] - InheritedSize[0x750]
class CollectorsChestItemInfo: public TreasureChestItemInfo
{
public:
	struct RewardId                                              GoldInContainerRewardId;                           // 0x750(0x8)
	char                                                         pad0x18_HVE1X[0x18];                               // 0x758(0x18)
	class GoldInContainerDataAsset*                              GoldInContainerDataAsset;                          // 0x770(0x8)
	class CollectorsChestSharedParamsDataAsset*                  CollectorsChestSharedParams;                       // 0x778(0x8)
	class QuestBookPagesInContainerDataAsset*                    PagesInContainerDataAsset;                         // 0x780(0x8)
	TArray<class Class*>                                         CurrentLayerPriorityOrder;                         // 0x788(0x10)
	char                                                         Material;                                          // 0x798(0x1)
	char                                                         pad0x3_BZFEX[0x3];                                 // 0x799(0x3)
	int                                                          PreferredStoreEmptySlotIndex;                      // 0x79c(0x4)
	char                                                         pad0x8_QW9RB[0x8];                                 // 0x7a0(0x8)
	TArray<class ItemInfo*>                                      ItemInfosToStore;                                  // 0x7a8(0x10)
	class CollectorsChestShipOwnershipPropagationComponent*      CollectorsChestShipOwnershipPropagationComponent;  // 0x7b8(0x8)
	char                                                         pad0x40_78DLT[0x40];                               // 0x7c0(0x40)
};


// Size 0x10 (Full Size[0x830] - InheritedSize[0x820]
class CargoRunCrate: public MerchantCrate
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x820(0x8)
	char                                                         pad0x8_5TU4P[0x8];                                 // 0x828(0x8)
};


// Size 0x0 (Full Size[0x850] - InheritedSize[0x850]
class StaticCargoRunCrate: public StaticMerchantCrate
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x848(0x8)
};


// Size 0x10 (Full Size[0x800] - InheritedSize[0x7f0]
class PollyWieldable: public SimpleBootyWieldableItem
{
public:
	char                                                         pad0x10_BNY2X[0x10];                               // 0x7f0(0x10)
};


// Size 0x20 (Full Size[0x410] - InheritedSize[0x3f0]
class SwingMechanismActionProxy: public PivotAnimatedMechanismActionProxy
{
public:
	float                                                        MaxAngle;                                          // 0x3f0(0x4)
	float                                                        MinAngle;                                          // 0x3f4(0x4)
	float                                                        Damage;                                            // 0x3f8(0x4)
	char                                                         DamageReason;                                      // 0x3fc(0x1)
	char                                                         pad0x3_895VS[0x3];                                 // 0x3fd(0x3)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x400(0x10)
};


// Size 0x0 (Full Size[0x900] - InheritedSize[0x900]
class StaticMeshFloatingItemProxy: public FloatingItemProxy
{
public:
};


// Size 0x20 (Full Size[0x810] - InheritedSize[0x7f0]
class SimpleBootyInteractiveItem: public StaticSimpleBootyWieldableItem
{
public:
	char                                                         pad0x8_SM0S6[0x8];                                 // 0x7f0(0x8)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7f8(0x8)
	class WwiseEvent*                                            InteractionSfx;                                    // 0x800(0x8)
	char                                                         pad0x8_DWCIW[0x8];                                 // 0x808(0x8)
};


// Size 0x10 (Full Size[0x840] - InheritedSize[0x830]
class DamageableCargoRunCrate: public DamageableMerchantCrate
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x830(0x8)
	char                                                         pad0x8_8HTBE[0x8];                                 // 0x838(0x8)
};


// Size 0xb8 (Full Size[0x858] - InheritedSize[0x7a0]
class TutorialTavernStrangerNPC: public TavernStrangerNPC
{
public:
	char                                                         pad0x18_7IOOY[0x18];                               // 0x7a0(0x18)
	struct StringAssetReference                                  AnimationData;                                     // 0x7b8(0x10)
	class WwiseObjectPoolWrapper*                                SummonSFXPool;                                     // 0x7c8(0x8)
	class WwiseEvent*                                            SummonSFX;                                         // 0x7d0(0x8)
	struct WwiseEmitter                                          SummonEmitter;                                     // 0x7d8(0x20)
	struct ObjectMessagingHandle                                 PlaySummonSFXEventHandle;                          // 0x7f8(0x58)
	char                                                         pad0x8_8SZFO[0x8];                                 // 0x850(0x8)
};


// Size 0x20 (Full Size[0x920] - InheritedSize[0x900]
class BootyProxy: public FloatingItemProxy
{
public:
	char                                                         pad0x18_1YOEM[0x18];                               // 0x900(0x18)
	class ItemProxyShipTrackerComponent*                         ItemProxyShipTrackerComponent;                     // 0x918(0x8)
};


// Size 0x0 (Full Size[0x790] - InheritedSize[0x790]
class CancelVoteOnWarMapComponent: public VoteOnWarMapComponent
{
public:
};


// Size 0x0 (Full Size[0x900] - InheritedSize[0x900]
class SkeletalMeshFloatingItemProxy: public FloatingItemProxy
{
public:
};


// Size 0x68 (Full Size[0x968] - InheritedSize[0x900]
class MessageInABottleItemProxy: public FloatingItemProxy
{
public:
	char                                                         pad0x8_2J67X[0x8];                                 // 0x900(0x8)
	TArray<struct MessageInABottleVoyageEntry>                   VoyageRecipeList;                                  // 0x908(0x10)
	bool                                                         UsePremadeVoyages;                                 // 0x918(0x1)
	char                                                         pad0x7_0ICO8[0x7];                                 // 0x919(0x7)
	TArray<class VoyageDescDataAsset*>                           PremadeVoyages;                                    // 0x920(0x10)
	TArray<struct MessageInABottlePremadeVoyageEntry>            PremadeVoyageEntries;                              // 0x930(0x10)
	char                                                         EmergentSource;                                    // 0x940(0x1)
	char                                                         pad0x7_BVVPS[0x7];                                 // 0x941(0x7)
	class WwiseEvent*                                            OnBottleOpenedSfx;                                 // 0x948(0x8)
	char                                                         pad0x18_0CUMD[0x18];                               // 0x950(0x18)
};


// Size 0x1d0 (Full Size[0x9c0] - InheritedSize[0x7f0]
class AshenWindsSkull: public StaticSimpleBootyWieldableItem
{
public:
	char                                                         pad0x18_Y4OWG[0x18];                               // 0x7f0(0x18)
	class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x808(0x8)
	class ParticleSystemComponent*                               FlamethrowerParticleSystemComponent;               // 0x810(0x8)
	class ParticleSystemComponent*                               FlamethrowerChargeParticleSystemComponent;         // 0x818(0x8)
	class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0x820(0x8)
	class AshenWindsSkullAdaptiveTriggerComponent*               AdaptiveTriggerComponent;                          // 0x828(0x8)
	class AshenWindsFlamethrowerController*                      FlamethrowerController;                            // 0x830(0x8)
	struct ItemUseSpeedParams                                    ItemUseSpeedModifiers;                             // 0x838(0x8)
	float                                                        ItemUseFOVBlendSpeed;                              // 0x840(0x4)
	float                                                        ItemUseTargetFOV;                                  // 0x844(0x4)
	float                                                        HipfireEffectsDelayAmount;                         // 0x848(0x4)
	float                                                        AimingDownSightsEffectsDelayAmount;                // 0x84c(0x4)
	float                                                        StartFlamethrowerOnServerDelayLatencyCompensation; // 0x850(0x4)
	float                                                        FlamethrowerParticleSystemMaxLength;               // 0x854(0x4)
	char                                                         FlamethrowerParticleSystemCustomLocalSpaceMode;    // 0x858(0x1)
	char                                                         pad0x3_8JVST[0x3];                                 // 0x859(0x3)
	struct FName                                                 OpenJawMaterialAnimationName;                      // 0x85c(0x8)
	struct FName                                                 CloseJawMaterialAnimationName;                     // 0x864(0x8)
	struct Vector                                                FlamethrowerParticleSystemThirdPersonAttachPoint;  // 0x86c(0xc)
	struct Rotator                                               FlamethrowerParticleSystemThirdPersonRotation;     // 0x878(0xc)
	struct Vector                                                FlamethrowerParticleSystemFirstPersonAttachPoint;  // 0x884(0xc)
	struct Rotator                                               FlamethrowerParticleSystemFirstPersonRotation;     // 0x890(0xc)
	bool                                                         EnableCustomParticleSystemBelowWater;              // 0x89c(0x1)
	char                                                         pad0x3_5VLRR[0x3];                                 // 0x89d(0x3)
	class ParticleSystem*                                        AboveWaterParticleSystem;                          // 0x8a0(0x8)
	class ParticleSystem*                                        AboveWaterParticleSystemThirdPerson;               // 0x8a8(0x8)
	class ParticleSystem*                                        BelowWaterParticleSystem;                          // 0x8b0(0x8)
	class ParticleSystem*                                        BelowWaterParticleSystemThirdPerson;               // 0x8b8(0x8)
	bool                                                         EnableVisualFlamethrowerMissfiring;                // 0x8c0(0x1)
	char                                                         pad0x7_AZNRA[0x7];                                 // 0x8c1(0x7)
	TArray<struct AshenWindsSkullMissfireParams>                 FlamethrowerMissfireParams;                        // 0x8c8(0x10)
	class WwiseEvent*                                            FlamethrowerLoopStartEvent;                        // 0x8d8(0x8)
	class WwiseEvent*                                            FlamethrowerLoopStopEvent;                         // 0x8e0(0x8)
	struct FName                                                 FlamethrowerLoopChargeLevelRTPC;                   // 0x8e8(0x8)
	struct FloatRange                                            FlamethrowerLoopChargeLevelRTPCRange;              // 0x8f0(0x10)
	class WwiseEvent*                                            FlamethrowerStartUsingEvent;                       // 0x900(0x8)
	class WwiseEvent*                                            FlamethrowerStopUsingEvent;                        // 0x908(0x8)
	float                                                        UseTimeRequiredToPlayStopEvent;                    // 0x910(0x4)
	char                                                         pad0x4_12C85[0x4];                                 // 0x914(0x4)
	class WwiseEvent*                                            FlamethrowerActivatedEvent;                        // 0x918(0x8)
	class WwiseEvent*                                            FlamethrowerDeactivatedEvent;                      // 0x920(0x8)
	class WwiseEvent*                                            FlamethrowerChargeLevelStageChangedEvent;          // 0x928(0x8)
	class ForceFeedbackEffect*                                   UsingFlamethrowerForceFeedback;                    // 0x930(0x8)
	class Pawn*                                                  Wielder;                                           // 0x938(0x8)
	class FlamethrowerChargeVisuals*                             FlamethrowerChargeVisuals;                         // 0x950(0x8)
	char                                                         pad0x68_U89IZ[0x68];                               // 0x958(0x68)
};


// Size 0x8 (Full Size[0x808] - InheritedSize[0x800]
class LockedCollectorsChestItemInfo: public CollectorsChestItemInfo
{
public:
	struct RewardId                                              EmptyContainerRewardId;                            // 0x800(0x8)
};


// Size 0x0 (Full Size[0x7c8] - InheritedSize[0x7c8]
class RareMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x0 (Full Size[0x7c8] - InheritedSize[0x7c8]
class LegendaryMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x0 (Full Size[0x860] - InheritedSize[0x860]
class StaticDamageableCargoRunCrate: public StaticDamageableMerchantCrate
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x858(0x8)
};


// Size 0x48 (Full Size[0x168] - InheritedSize[0x120]
class CaptainsLogItemDesc: public WieldableBookItemDesc
{
public:
	class WieldableBookPageList*                                 SmallShipPageList;                                 // 0x120(0x8)
	class WieldableBookPageList*                                 MediumShipPageList;                                // 0x128(0x8)
	class WieldableBookPageList*                                 LargeShipPageList;                                 // 0x130(0x8)
	class WieldableBookPageList*                                 SmallGuildShipPageList;                            // 0x138(0x8)
	class WieldableBookPageList*                                 MediumGuildShipPageList;                           // 0x140(0x8)
	class WieldableBookPageList*                                 LargeGuildShipPageList;                            // 0x148(0x8)
	class WieldableBookPageList*                                 RuinedSmallShipPageList;                           // 0x150(0x8)
	class WieldableBookPageList*                                 RuinedMediumShipPageList;                          // 0x158(0x8)
	class WieldableBookPageList*                                 RuinedLargeShipPageList;                           // 0x160(0x8)
};


// Size 0x58 (Full Size[0x958] - InheritedSize[0x900]
class DroppedPouchItemProxy: public FloatingItemProxy
{
public:
	char                                                         pad0x8_B3L1O[0x8];                                 // 0x900(0x8)
	class WwiseEvent*                                            OnPouchOpenedSfx;                                  // 0x908(0x8)
	struct WwiseEmitter                                          OpenPouchEmitter;                                  // 0x910(0x20)
	char                                                         TrackedActorType;                                  // 0x930(0x1)
	char                                                         pad0x7_8P92X[0x7];                                 // 0x931(0x7)
	class DitherComponent*                                       DitherComponent;                                   // 0x938(0x8)
	float                                                        FadeDuration;                                      // 0x940(0x4)
	bool                                                         UseRandomRotation;                                 // 0x944(0x1)
	char                                                         pad0x13_2RICF[0x13];                               // 0x945(0x13)
};


// Size 0x0 (Full Size[0x900] - InheritedSize[0x900]
class StrongholdKeyProxy: public FloatingItemProxy
{
public:
};


// Size 0x0 (Full Size[0x7c8] - InheritedSize[0x7c8]
class CommonMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x20 (Full Size[0x920] - InheritedSize[0x900]
class ShroudBreakerProxy: public FloatingItemProxy
{
public:
	class ShroudBreakerComponent*                                ShroudBreakerComponent;                            // 0x900(0x8)
	class ItemProxyShipTrackerComponent*                         ItemProxyShipTrackerComponent;                     // 0x908(0x8)
	class ItemProxyWatercraftTrackerComponent*                   ItemProxyWatercraftTrackerComponent;               // 0x910(0x8)
	class InteractableComponent*                                 InteractableComponent;                             // 0x918(0x8)
};


// Size 0x1d8 (Full Size[0xad8] - InheritedSize[0x900]
class DartProxy: public FloatingItemProxy
{
public:
	char                                                         pad0x10_CS9BF[0x10];                               // 0x900(0x10)
	float                                                        HeightAdjustmentOnDrop;                            // 0x910(0x4)
	struct Rotator                                               RotationOnDrop;                                    // 0x914(0xc)
	class DartCharacterBoneOffsets*                              DartCharacterBoneOffsets;                          // 0x920(0x8)
	float                                                        LifespanTime;                                      // 0x928(0x4)
	float                                                        FadeTime;                                          // 0x92c(0x4)
	bool                                                         ShouldFloat;                                       // 0x930(0x1)
	char                                                         pad0x7_HQMB8[0x7];                                 // 0x931(0x7)
	class HealthComponent*                                       HealthComponent;                                   // 0x938(0x8)
	class DamageableComponent*                                   DamageableComponent;                               // 0x940(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x948(0x8)
	class UClass*                                                DartTypeId;                                        // 0x950(0x8)
	char                                                         pad0x20_1YA6E[0x20];                               // 0x958(0x20)
	TArray<class Class*>                                         ForwardedDamagerTypes;                             // 0x978(0x10)
	bool                                                         ShouldPassThroughDamage;                           // 0x988(0x1)
	char                                                         pad0x7_VAMFH[0x7];                                 // 0x989(0x7)
	class RewindComponent*                                       RewindComponent;                                   // 0x990(0x8)
	char                                                         pad0x10_CH81H[0x10];                               // 0x998(0x10)
	struct HitResult                                             ImpactInfo;                                        // 0x9a8(0x80)
	char                                                         pad0xb0_I9PG3[0xb0];                               // 0xa28(0xb0)
};


// Size 0x0 (Full Size[0x900] - InheritedSize[0x900]
class PlayerBuriedItemsMapBundleItemProxy: public FloatingItemProxy
{
public:
};


// Size 0x0 (Full Size[0x7c8] - InheritedSize[0x7c8]
class MythicalMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x0 (Full Size[0x900] - InheritedSize[0x900]
class StorageCrateItemProxy: public FloatingItemProxy
{
public:
};


// Size 0xd0 (Full Size[0xba8] - InheritedSize[0xad8]
class GunpowderDartProxy: public DartProxy
{
public:
	float                                                        LifetimeAfterDefuse;                               // 0xad8(0x4)
	float                                                        TimeToDefuseForWaterBucket;                        // 0xadc(0x4)
	class FuseComponent*                                         FuseComponent;                                     // 0xae0(0x8)
	class BoxComponent*                                          BoxComponent;                                      // 0xae8(0x8)
	struct Status                                                WaterStatus;                                       // 0xaf0(0x20)
	struct Status                                                GunpowderDartStatus;                               // 0xb10(0x20)
	struct Status                                                CancelGunpowderDartStatus;                         // 0xb30(0x20)
	char                                                         pad0x24_LGH5A[0x24];                               // 0xb50(0x24)
	struct BlowpipeGunpowderDartTelemetryEvent                   PendingTelemetryEvent;                             // 0xb74(0x30)
	char                                                         pad0x4_BX1XZ[0x4];                                 // 0xba4(0x4)
};


// Size 0x8 (Full Size[0x960] - InheritedSize[0x958]
class RewardPouchItemProxy: public DroppedPouchItemProxy
{
public:
	class UClass*                                                Company;                                           // 0x958(0x8)
};


// Size 0xb0 (Full Size[0xa70] - InheritedSize[0x9c0]
class SkullOfStorms: public AshenWindsSkull
{
public:
	float                                                        WindStreamLength;                                  // 0x9c0(0x4)
	float                                                        WindSpeedMultiplier;                               // 0x9c4(0x4)
	float                                                        MaxWindMagnitudeBoostMultiplier;                   // 0x9c8(0x4)
	float                                                        SwimmingVelocity;                                  // 0x9cc(0x4)
	float                                                        WatercraftVelocity;                                // 0x9d0(0x4)
	bool                                                         PreventFallDamage;                                 // 0x9d4(0x1)
	char                                                         pad0x3_C2MIN[0x3];                                 // 0x9d5(0x3)
	float                                                        FiringTimeNeededToPreventFallDamage;               // 0x9d8(0x4)
	char                                                         pad0x4_ZZQML[0x4];                                 // 0x9dc(0x4)
	class CurveFloat*                                            SlowdownForceFromFallingSpeed;                     // 0x9e0(0x8)
	class CurveFloat*                                            SlowdownForceFromDistanceToFloor;                  // 0x9e8(0x8)
	float                                                        AirControlFallingSpeedScalar;                      // 0x9f0(0x4)
	float                                                        HorizontalAirControlForce;                         // 0x9f4(0x4)
	float                                                        DownThrustPitchDeadzone;                           // 0x9f8(0x4)
	char                                                         pad0x74_AR748[0x74];                               // 0x9fc(0x74)
};


// Size 0x220 (Full Size[0xcf8] - InheritedSize[0xad8]
class LureDartProxy: public DartProxy
{
public:
	char                                                         pad0x20_69WU3[0x20];                               // 0xad8(0x20)
	class GlintComponent*                                        GlintComponent;                                    // 0xaf8(0x8)
	class HitReactionComponent*                                  HitReactionComponent;                              // 0xb00(0x8)
	class RuntimeMaterialVariantsDataAsset*                      RuntimeMaterialVariantsDataAsset;                  // 0xb08(0x8)
	float                                                        MaxNoiseRadius;                                    // 0xb10(0x4)
	float                                                        RepeatRate;                                        // 0xb14(0x4)
	float                                                        LuredCheckRepeatRate;                              // 0xb18(0x4)
	float                                                        CongaCheckRepeatRate;                              // 0xb1c(0x4)
	float                                                        DelayTime;                                         // 0xb20(0x4)
	float                                                        DurationTime;                                      // 0xb24(0x4)
	float                                                        LuredCheckDurationTime;                            // 0xb28(0x4)
	float                                                        CongaCheckDurationTime;                            // 0xb2c(0x4)
	float                                                        FloatingDelayTime;                                 // 0xb30(0x4)
	char                                                         CollisionChannel;                                  // 0xb34(0x1)
	char                                                         pad0x3_CVRCQ[0x3];                                 // 0xb35(0x3)
	TArray<class Class*>                                         WaterStatus;                                       // 0xb38(0x10)
	TArray<class Class*>                                         ExcludedInstigators;                               // 0xb48(0x10)
	char                                                         pad0xb0_9F1GG[0xb0];                               // 0xb58(0xb0)
	int                                                          GlintMaterialNumber;                               // 0xc08(0x4)
	char                                                         pad0x6c_GUHXK[0x6c];                               // 0xc0c(0x6c)
	TArray<uintptr_t>                                            LuredPlayerList;                                   // 0xc78(0x10)
	TArray<struct LureDartProxyLuredAiTypes>                     LuredAITypes;                                      // 0xc88(0x10)
	TArray<uintptr_t>                                            LuredAIList;                                       // 0xc98(0x10)
	TArray<uintptr_t>                                            LuredAIIntoWaterList;                              // 0xca8(0x10)
	struct BlowpipeLureDartTelemetryEvent                        PendingTelemetryEvent;                             // 0xcb8(0x30)
	class AttitudeOverrideCustomAttitudeRule*                    AttachedAIAttitudeOverride;                        // 0xce8(0x8)
	class TargetCustomAttitudeComponent*                         TargetAttitudeComponent;                           // 0xcf0(0x8)
};


// Size 0x100 (Full Size[0xac0] - InheritedSize[0x9c0]
class ThrowableKnife: public AshenWindsSkull
{
public:
	char                                                         pad0x24_E2IOW[0x24];                               // 0x9c0(0x24)
	float                                                        WaitForThrowAnimDelay;                             // 0x9e4(0x4)
	float                                                        WieldedThrowDelay;                                 // 0x9e8(0x4)
	struct FName                                                 RumbleName;                                        // 0x9ec(0x8)
	char                                                         pad0x4_8CL4G[0x4];                                 // 0x9f4(0x4)
	class WwiseEvent*                                            ProjectileThrowSfx;                                // 0x9f8(0x8)
	class GrenadeSetupDataAsset*                                 GrenadeSetupDataAsset;                             // 0xa00(0x8)
	struct WeightedProbabilityRangeOfRanges                      RotationRatePitch;                                 // 0xa08(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateRoll;                                  // 0xa38(0x30)
	struct WeightedProbabilityRangeOfRanges                      RotationRateYaw;                                   // 0xa68(0x30)
	class UClass*                                                ThrownProjectileType;                              // 0xa98(0x8)
	class AimSensitivityComponent*                               AimSensitivityComponent;                           // 0xaa0(0x8)
	char                                                         pad0x10_OGKV9[0x10];                               // 0xaa8(0x10)
	float                                                        AimingMoveSpeedScalar;                             // 0xab8(0x4)
	char                                                         AimSensitivitySettingCategory;                     // 0xabc(0x1)
	char                                                         pad0x3_RZ5V1[0x3];                                 // 0xabd(0x3)
};


// Size 0xd8 (Full Size[0xbb0] - InheritedSize[0xad8]
class PoisonDartProxy: public DartProxy
{
public:
	class VenomComponent*                                        VenomComponent;                                    // 0xad8(0x8)
	struct Status                                                CancelVenomStatus;                                 // 0xae0(0x20)
	char                                                         pad0x58_GGB2O[0x58];                               // 0xb00(0x58)
	bool                                                         HitValidTarget;                                    // 0xb58(0x1)
	char                                                         pad0x7_ZLNRO[0x7];                                 // 0xb59(0x7)
	struct BlowpipePoisonDartTelemetryEvent                      PendingTelemetryEvent;                             // 0xb60(0x50)
};


// Size 0x20 (Full Size[0x940] - InheritedSize[0x920]
class BaseMerchantCrateItemProxy: public BootyProxy
{
public:
	class RewindComponent*                                       RewindComponent;                                   // 0x920(0x8)
	class WwiseEvent*                                            FullGroundImpactSfx;                               // 0x938(0x8)
};


// Size 0x0 (Full Size[0xad8] - InheritedSize[0xad8]
class BlowdartMimicItemProxy: public DartProxy
{
public:
};


// Size 0x8 (Full Size[0x908] - InheritedSize[0x900]
class StaticMeshFloatingItemProxyWithPickupSFX: public StaticMeshFloatingItemProxy
{
public:
	class WwiseEvent*                                            OnPickedUpSfx;                                     // 0x900(0x8)
};


// Size 0x80 (Full Size[0x9d8] - InheritedSize[0x958]
class AmmoPouchItemProxy: public DroppedPouchItemProxy
{
public:
	char                                                         pad0x80_1YO4B[0x80];                               // 0x958(0x80)
};


// Size 0x0 (Full Size[0x920] - InheritedSize[0x920]
class BaseSimpleBootyItemProxy: public BootyProxy
{
public:
};


// Size 0x88 (Full Size[0x9a8] - InheritedSize[0x920]
class TreasureChestItemProxy: public BootyProxy
{
public:
	char                                                         pad0x10_9FY45[0x10];                               // 0x920(0x10)
	class WwiseEvent*                                            ShovelEnterSurfaceSfx;                             // 0x930(0x8)
	class WwiseEvent*                                            ExhumeStepSfx;                                     // 0x938(0x8)
	class WwiseEvent*                                            FullyDugUpSfx;                                     // 0x940(0x8)
	class WwiseObjectPoolWrapper*                                ChestAmbiencePool;                                 // 0x948(0x8)
	class WwiseEvent*                                            ChestAmbiencePlay;                                 // 0x950(0x8)
	class WwiseEvent*                                            ChestAmbienceStop;                                 // 0x958(0x8)
	class DitherComponent*                                       DitherComponent;                                   // 0x960(0x8)
	struct EncounterParams                                       CloseProximityEncounterParams;                     // 0x968(0xc)
	char                                                         pad0x4_9M9QU[0x4];                                 // 0x974(0x4)
	class ItemDiggingAudioConfig*                                CachedAudioConfig;                                 // 0x978(0x8)
	char                                                         pad0x28_IP39R[0x28];                               // 0x980(0x28)
};


// Size 0x40 (Full Size[0x960] - InheritedSize[0x920]
class BountyRewardItemProxy: public BootyProxy
{
public:
	char                                                         pad0x8_AAA07[0x8];                                 // 0x920(0x8)
	class WwiseObjectPoolWrapper*                                AmbiencePool;                                      // 0x928(0x8)
	class WwiseEvent*                                            AmbiencePlay;                                      // 0x930(0x8)
	class WwiseEvent*                                            AmbienceStop;                                      // 0x938(0x8)
	struct WwiseEmitter                                          AmbienceEmitter;                                   // 0x940(0x20)
};


// Size 0x28 (Full Size[0x980] - InheritedSize[0x958]
class ThrowingKnifeItemProxy: public DroppedPouchItemProxy
{
public:
	char                                                         pad0x8_WN30I[0x8];                                 // 0x958(0x8)
	float                                                        HeightAdjustmentOnDrop;                            // 0x960(0x4)
	struct Rotator                                               RotationOnDrop;                                    // 0x964(0xc)
	float                                                        Lifespan;                                          // 0x970(0x4)
	float                                                        FadeTime;                                          // 0x974(0x4)
	float                                                        DroppedInWaterLifespan;                            // 0x978(0x4)
	char                                                         pad0x4_CZ1J3[0x4];                                 // 0x97c(0x4)
};


// Size 0x0 (Full Size[0x920] - InheritedSize[0x920]
class StaticSimpleBootyItemProxy: public BaseSimpleBootyItemProxy
{
public:
};


// Size 0x0 (Full Size[0x9a8] - InheritedSize[0x9a8]
class TreasureChestItemProxySkeletal: public TreasureChestItemProxy
{
public:
};


// Size 0x0 (Full Size[0x940] - InheritedSize[0x940]
class StaticMerchantCrateItemProxy: public BaseMerchantCrateItemProxy
{
public:
};


// Size 0x50 (Full Size[0x9b0] - InheritedSize[0x960]
class WaterGunItemProxy: public BountyRewardItemProxy
{
public:
	char                                                         pad0x8_HET39[0x8];                                 // 0x960(0x8)
	class ParticleSystemComponent*                               LiquidLauncherChargeParticleSystemComponent;       // 0x968(0x8)
	class LiquidLauncherChargeVisuals*                           LiquidLauncherChargeVisuals;                       // 0x970(0x8)
	float                                                        CurrentAmmo;                                       // 0x978(0x4)
	float                                                        CurrentPressure;                                   // 0x97c(0x4)
	float                                                        LiquidLevel;                                       // 0x980(0x4)
	float                                                        FoamLevel;                                         // 0x984(0x4)
	float                                                        FizzSpeed;                                         // 0x988(0x4)
	float                                                        WobbleSpeed;                                       // 0x98c(0x4)
	float                                                        LiquidLevelMin;                                    // 0x990(0x4)
	float                                                        LiquidLevelMax;                                    // 0x994(0x4)
	char                                                         pad0x10_JYG8V[0x10];                               // 0x998(0x10)
	class MaterialInstanceDynamic*                               ThirdPersonLiquidLauncherLiquidMaterial;           // 0x9a8(0x8)
};


// Size 0x0 (Full Size[0x920] - InheritedSize[0x920]
class SimpleBootyItemProxy: public BaseSimpleBootyItemProxy
{
public:
};


// Size 0x18 (Full Size[0x978] - InheritedSize[0x960]
class AshenWindsSkullItemProxy: public BountyRewardItemProxy
{
public:
	char                                                         pad0x8_GFY2G[0x8];                                 // 0x960(0x8)
	class ParticleSystemComponent*                               FlamethrowerChargeParticleSystemComponent;         // 0x968(0x8)
	class FlamethrowerChargeVisuals*                             FlamethrowerChargeVisuals;                         // 0x970(0x8)
};


// Size 0x0 (Full Size[0x940] - InheritedSize[0x940]
class MockMerchantCrateItemProxy: public BaseMerchantCrateItemProxy
{
public:
};


// Size 0x18 (Full Size[0x9c0] - InheritedSize[0x9a8]
class CollectorsChestItemProxyBase: public TreasureChestItemProxy
{
public:
	char                                                         pad0x18_TO6J1[0x18];                               // 0x9a8(0x18)
};


// Size 0x0 (Full Size[0x940] - InheritedSize[0x940]
class MerchantCrateItemProxy: public BaseMerchantCrateItemProxy
{
public:
};


// Size 0x0 (Full Size[0x9a8] - InheritedSize[0x9a8]
class TreasureChestItemProxyStatic: public TreasureChestItemProxy
{
public:
};


// Size 0x0 (Full Size[0x9c0] - InheritedSize[0x9c0]
class CollectorsChestItemProxyWithNoOpenableComponent: public CollectorsChestItemProxyBase
{
public:
};


// Size 0x30 (Full Size[0x970] - InheritedSize[0x940]
class StaticDamageableMerchantCrateItemProxy: public StaticMerchantCrateItemProxy
{
public:
	bool                                                         ProjectileCollisionsEnabledAboveMinimumHealthGate; // 0x940(0x1)
	char                                                         pad0x7_T6EMR[0x7];                                 // 0x941(0x7)
	class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x948(0x8)
	char                                                         pad0x8_PZ94S[0x8];                                 // 0x950(0x8)
	class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x958(0x8)
	class LightWeightStatusEffectManagerComponent*               LightweightStatusEffectComponent;                  // 0x960(0x8)
	class NPCDialogComponent*                                    NPCDialogComponent;                                // 0x968(0x8)
};


// Size 0x28 (Full Size[0x948] - InheritedSize[0x920]
class DroppableTankardStaticSimpleBootyItemProxy: public StaticSimpleBootyItemProxy
{
public:
	char                                                         pad0x8_CKXC6[0x8];                                 // 0x920(0x8)
	float                                                        RemainingVolume;                                   // 0x928(0x4)
	char                                                         pad0x4_CFCIM[0x4];                                 // 0x92c(0x4)
	class InteractableComponent*                                 InteractableComponent;                             // 0x930(0x8)
	class LiquidLevelTransferComponent*                          LiquidLevelTransferComponent;                      // 0x938(0x8)
	class LiquidContainerComponent*                              LiquidContainerComponent;                          // 0x940(0x8)
};


// Size 0x8 (Full Size[0x928] - InheritedSize[0x920]
class CursedCaptainsSkullProxy: public SimpleBootyItemProxy
{
public:
	char                                                         pad0x8_RGV3R[0x8];                                 // 0x920(0x8)
};


// Size 0x10 (Full Size[0x930] - InheritedSize[0x920]
class StoolItemProxy: public StaticSimpleBootyItemProxy
{
public:
	char                                                         pad0x10_WHZD0[0x10];                               // 0x920(0x10)
};


// Size 0x10 (Full Size[0x950] - InheritedSize[0x940]
class CargoRunCrateItemProxy: public MerchantCrateItemProxy
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x940(0x8)
	class NPCDialogComponent*                                    NPCDialogComponent;                                // 0x948(0x8)
};


// Size 0x8 (Full Size[0x9c8] - InheritedSize[0x9c0]
class CollectorsChestItemProxyWithOpenableComponent: public CollectorsChestItemProxyBase
{
public:
	class OpenableItemComponent*                                 OpenableItemComponent;                             // 0x9c0(0x8)
};


// Size 0x10 (Full Size[0x950] - InheritedSize[0x940]
class StaticCargoRunCrateItemProxy: public StaticMerchantCrateItemProxy
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x940(0x8)
	class NPCDialogComponent*                                    NPCDialogComponent;                                // 0x948(0x8)
};


// Size 0x30 (Full Size[0x950] - InheritedSize[0x920]
class HuntingSpearItemProxy: public StaticSimpleBootyItemProxy
{
public:
	char                                                         pad0x10_ML235[0x10];                               // 0x920(0x10)
	class WwiseEvent*                                            SpearPickupHoldSfx;                                // 0x930(0x8)
	float                                                        HeightAdjustmentOnDrop;                            // 0x938(0x4)
	struct Rotator                                               RotationOnDrop;                                    // 0x93c(0xc)
	float                                                        RandomAngleAdjustmentOnDrop;                       // 0x948(0x4)
	char                                                         pad0x4_MPV6Z[0x4];                                 // 0x94c(0x4)
};


// Size 0xf8 (Full Size[0xa18] - InheritedSize[0x920]
class ItemReactionItemProxy: public StaticSimpleBootyItemProxy
{
public:
	char                                                         pad0x8_9O0YO[0x8];                                 // 0x920(0x8)
	class InteractableComponentWithActionRules*                  InteractableComponentWithActionRules;              // 0x928(0x8)
	struct ItemReactionItemProxyActionRuleParams                 ItemReactionItemProxyActionRuleParams;             // 0x930(0x88)
	TArray<Class>                                                InAllowedItems;                                    // 0x9b8(0x10)
	class UClass*                                                ItemToGive;                                        // 0x9c8(0x8)
	class WwiseEvent*                                            ExecuteInteractSFX;                                // 0x9d0(0x8)
	class WwiseEvent*                                            InsertKeySFX;                                      // 0x9d8(0x8)
	class WwiseEvent*                                            ReleaseKeySFX;                                     // 0x9e0(0x8)
	class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x9e8(0x8)
	struct FName                                                 WwiseEmitterName;                                  // 0x9f0(0x8)
	char                                                         pad0x20_MY86W[0x20];                               // 0x9f8(0x20)
};


// Size 0x30 (Full Size[0x970] - InheritedSize[0x940]
class DamageableMerchantCrateItemProxy: public MerchantCrateItemProxy
{
public:
	bool                                                         ProjectileCollisionsEnabledAboveMinimumHealthGate; // 0x940(0x1)
	char                                                         pad0x7_TUIJI[0x7];                                 // 0x941(0x7)
	class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x948(0x8)
	char                                                         pad0x8_R2USL[0x8];                                 // 0x950(0x8)
	class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x958(0x8)
	class LightWeightStatusEffectManagerComponent*               LightweightStatusEffectComponent;                  // 0x960(0x8)
	class NPCDialogComponent*                                    NPCDialogComponent;                                // 0x968(0x8)
};


// Size 0x0 (Full Size[0x920] - InheritedSize[0x920]
class WieldableBookProxy: public StaticSimpleBootyItemProxy
{
public:
};


// Size 0x18 (Full Size[0x958] - InheritedSize[0x940]
class MerchantCrateFilledItemProxy: public StaticMerchantCrateItemProxy
{
public:
	class StorageContainerComponent*                             StorageContainerComponent;                         // 0x940(0x8)
	bool                                                         FillCrateToCapacity;                               // 0x948(0x1)
	char                                                         pad0xf_H72UK[0xf];                                 // 0x949(0xf)
};


// Size 0x0 (Full Size[0x9c8] - InheritedSize[0x9c8]
class CollectorsChestItemProxyStatic: public CollectorsChestItemProxyWithOpenableComponent
{
public:
};


// Size 0x8 (Full Size[0x978] - InheritedSize[0x970]
class StaticDamageableCargoRunCrateItemProxy: public StaticDamageableMerchantCrateItemProxy
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x970(0x8)
};


// Size 0x0 (Full Size[0x9c8] - InheritedSize[0x9c8]
class CollectorsChestItemProxy: public CollectorsChestItemProxyWithOpenableComponent
{
public:
};


// Size 0x40 (Full Size[0x960] - InheritedSize[0x920]
class CaptainsLogbookProxy: public WieldableBookProxy
{
public:
	char                                                         pad0x8_PJ42W[0x8];                                 // 0x920(0x8)
	class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x928(0x8)
	int                                                          DaysSinceLastSunk;                                 // 0x930(0x4)
	char                                                         pad0x4_D5GP3[0x4];                                 // 0x934(0x4)
	class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x938(0x8)
	char                                                         pad0x20_TV28O[0x20];                               // 0x940(0x20)
};


// Size 0x8 (Full Size[0x978] - InheritedSize[0x970]
class DamageableCargoRunCrateItemProxy: public DamageableMerchantCrateItemProxy
{
public:
	class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x970(0x8)
};


