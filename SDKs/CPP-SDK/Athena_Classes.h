// Generated by DougTheDruid#2784 on Discord
// https://github.com/DougTheDruid
namespace DougsSDKDumper
{
//-----
// Classes
//-----

// Size 0xc0 (Full Size[0x208] - InheritedSize[0x148]
class MetalAIFormComponent: public AthenaAIFormComponent
{
public:
	char                                                         pad0x28_E6VTF[0x28];                               // 0x148(0x28)
	Class ParticleSystem*                                        RustyParticlesTemplate;                            // 0x170(0x8)
	Class SkeletonAudioFootfallControllerParams*                 DefaultFootfallParams;                             // 0x178(0x8)
	Class SkeletonAudioFootfallControllerParams*                 RustyFootfallParams;                               // 0x180(0x8)
	struct FName                                                 RustShaderParamName;                               // 0x1a8(0x8)
	float                                                        NotRustyShaderParamValue;                          // 0x1b0(0x4)
	float                                                        RustyShaderParamValue;                             // 0x1b4(0x4)
	float                                                        ShaderParamBlendSpeed;                             // 0x1b8(0x4)
	struct FName                                                 SeedShaderParamName;                               // 0x1bc(0x8)
	int                                                          MaxSeedShaderValue;                                // 0x1c4(0x4)
	bool                                                         IsWet;                                             // 0x1c8(0x1)
	char                                                         pad0x7_RNVBQ[0x7];                                 // 0x1c9(0x7)
	Class ParticleSystemComponent*                               RustyParticleSystemComponent;                      // 0x1d0(0x8)
	char                                                         pad0x8_V0F7S[0x8];                                 // 0x1d8(0x8)
	Class DamageableVulnerabilityLayer*                          DefaultVulnerabilityLayer;                         // 0x1e0(0x8)
	Class DamageableVulnerabilityLayer*                          RustyVulnerabilityLayer;                           // 0x1e8(0x8)
	Class CharacterHitReactionDamagerTypeToAnimTypeLayer*        RustyHitReactionsLayer;                            // 0x1f0(0x8)
	Class MaterialInstanceDynamic*                               MetalDynamicMaterialInstance;                      // 0x1f8(0x8)
	char                                                         pad0x8_9ZDHV[0x8];                                 // 0x200(0x8)
};


// Size 0xa0 (Full Size[0x1e8] - InheritedSize[0x148]
class PlantAIFormComponent: public AthenaAIFormComponent
{
public:
	char                                                         pad0x28_21INB[0x28];                               // 0x148(0x28)
	Class ParticleSystem*                                        HealingParticlesTemplate;                          // 0x170(0x8)
	Class WwiseEvent*                                            StartHealingAudioLoopEvent;                        // 0x178(0x8)
	Class WwiseEvent*                                            StopHealingAudioLoopEvent;                         // 0x180(0x8)
	Class ParticleSystem*                                        WeakParticlesTemplate;                             // 0x188(0x8)
	struct FName                                                 HealingShaderParamName;                            // 0x1b0(0x8)
	float                                                        IsNotHealingShaderParamValue;                      // 0x1b8(0x4)
	float                                                        IsHealingShaderParamValue;                         // 0x1bc(0x4)
	float                                                        ShaderParamBlendSpeed;                             // 0x1c0(0x4)
	bool                                                         IsWet;                                             // 0x1c4(0x1)
	bool                                                         IsWeak;                                            // 0x1c5(0x1)
	char                                                         pad0x2_AB5VA[0x2];                                 // 0x1c6(0x2)
	Class ParticleSystemComponent*                               HealingParticleSystemComponent;                    // 0x1c8(0x8)
	Class ParticleSystemComponent*                               WeakParticleSystemComponent;                       // 0x1d0(0x8)
	Class MaterialInstanceDynamic*                               PlantDynamicMaterialInstance;                      // 0x1d8(0x8)
	char                                                         pad0x8_K7D3C[0x8];                                 // 0x1e0(0x8)
};


// Size 0x198 (Full Size[0x2e0] - InheritedSize[0x148]
class ShadowAIFormComponent: public AthenaAIFormComponent
{
public:
	byte                                                         FlameSpecificPhobia;                               // 0x148(0x1)
	char                                                         pad0x7_ZE9D8[0x7];                                 // 0x149(0x7)
	Class ParticleSystem*                                        LightStateConstantParticlesTemplate;               // 0x150(0x8)
	Class ParticleSystem*                                        DarkStateConstantParticlesTemplate;                // 0x158(0x8)
	Class ParticleSystem*                                        ToLightTransitionParticlesTemplate;                // 0x160(0x8)
	Class ParticleSystem*                                        ToDarkTransitionParticlesTemplate;                 // 0x168(0x8)
	Class PhysicalMaterial*                                      ClientLightStatePhysMaterialOverride;              // 0x170(0x8)
	Class PhysicalMaterial*                                      ClientDarkStatePhysMaterialOverride;               // 0x178(0x8)
	Class WwiseEvent*                                            StartDarkStateAudioLoopEvent;                      // 0x180(0x8)
	Class WwiseEvent*                                            StopDarkStateAudioLoopEvent;                       // 0x188(0x8)
	TArray<Assetclass ShadowBaseMaterials>                       ShadowBaseMaterials;                               // 0x190(0x10)
	struct FName                                                 ShadowShaderParamName;                             // 0x1a0(0x8)
	float                                                        LightStateShaderParamValue;                        // 0x1a8(0x4)
	float                                                        DarkStateShaderParamValue;                         // 0x1ac(0x4)
	float                                                        ShaderParamBlendSpeed;                             // 0x1b0(0x4)
	struct FName                                                 SeedShaderParamName;                               // 0x1b4(0x8)
	int                                                          MaxSeedShaderValue;                                // 0x1bc(0x4)
	byte                                                         CurrentState;                                      // 0x1c0(0x1)
	char                                                         pad0x7_U693G[0x7];                                 // 0x1c1(0x7)
	Class ParticleSystemComponent*                               LightStateConstantParticleSystemComponent;         // 0x1c8(0x8)
	Class ParticleSystemComponent*                               DarkStateConstantParticleSystemComponent;          // 0x1d0(0x8)
	TArray<class MaterialInstanceDynamic*>                       ShadowDynamicMaterialInstances;                    // 0x1d8(0x10)
	char                                                         pad0x78_IMND0[0x78];                               // 0x1e8(0x78)
	TArray<struct FlameSpecificDataMap>                          FlameSpecificDataMap;                              // 0x260(0x10)
	char                                                         pad0x70_BLY2O[0x70];                               // 0x270(0x70)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class EntitlementDesc: public DataAsset
{
public:
	Struct FText                                                 Title;                                             // 0x28(0x38)
	Struct FText                                                 Description;                                       // 0x60(0x38)
	Struct StringAssetReference                                  IconInvPath;                                       // 0x98(0x10)
	Struct StringAssetReference                                  IconPrvPath;                                       // 0xa8(0x10)
	class                                                        Category;                                          // 0xb8(0x8)
	class                                                        Company;                                           // 0xc0(0x8)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class ClothingDesc: public EntitlementDesc
{
public:
	struct FName                                                 WardrobeKey;                                       // 0xc8(0x8)
};


// Size 0x30 (Full Size[0xf8] - InheritedSize[0xc8]
class ShipCustomizationDesc: public EntitlementDesc
{
public:
	Struct StringAssetReference                                  CustomizationInfo;                                 // 0xc8(0x10)
	Struct FString                                               PreviousItem;                                      // 0xd8(0x10)
	Struct FString                                               NextItem;                                          // 0xe8(0x10)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class TaleRankDesc: public EntitlementDesc
{
public:
};


// Size 0x0 (Full Size[0xd0] - InheritedSize[0xd0]
class TitleDesc: public ClothingDesc
{
public:
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class ShantyItemDesc: public EntitlementDesc
{
public:
	Struct ShantyData                                            ShantyData;                                        // 0xc8(0x30)
	Struct StringAssetReference                                  BackgroundPath;                                    // 0xf8(0x10)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class SeasonPassEntitlementDesc: public EntitlementDesc
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryItemUsePressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryItemUsePressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class InteractableBase: public Actor
{
public:
	char                                                         pad0x10_VXBKD[0x10];                               // 0x3c8(0x10)
	bool                                                         RequiresFacingFront;                               // 0x3d8(0x1)
	bool                                                         RequiresNotBeingAirborne;                          // 0x3d9(0x1)
	bool                                                         RequiresNotSwimming;                               // 0x3da(0x1)
	bool                                                         InteractionsCanBeDisabled;                         // 0x3db(0x1)
	bool                                                         CanSetInteractionState;                            // 0x3dc(0x1)
	char                                                         pad0x3_742TE[0x3];                                 // 0x3dd(0x3)
	TArray<class InteractionPrerequisiteBase*>                   InteractionPrerequisites;                          // 0x3e0(0x10)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x3f0(0x8)
	byte                                                         InteractableIdentifier;                            // 0x3f8(0x1)
	char                                                         pad0x1_9ZO41[0x1];                                 // 0x3f9(0x1)
	byte                                                         CurrentInteractionState;                           // 0x3fa(0x1)
	char                                                         pad0x5_KW3E1[0x5];                                 // 0x3fb(0x5)
};


// Size 0x110 (Full Size[0x510] - InheritedSize[0x400]
class ControllableObject: public InteractableBase
{
public:
	char                                                         pad0x30_MY4IA[0x30];                               // 0x400(0x30)
	Struct ControlObjectActionRuleParams                         ControlObjectActionRuleParams;                     // 0x430(0x10)
	Class PhrasesRadialDataAsset*                                Phrases;                                           // 0x440(0x8)
	bool                                                         AllowDisconnectWhenIdle;                           // 0x448(0x1)
	char                                                         pad0x3_H506G[0x3];                                 // 0x449(0x3)
	char                                                         pad0xc4_G6Y8S[0xc4];                               // 0x44c(0xc4)
};


// Size 0x10 (Full Size[0x520] - InheritedSize[0x510]
class ControllablePulley: public ControllableObject
{
public:
	char                                                         pad0x8_RSBZJ[0x8];                                 // 0x510(0x8)
	Class ControllableIntentComponent*                           IntentComponent;                                   // 0x518(0x8)
};


// Size 0x318 (Full Size[0x838] - InheritedSize[0x520]
class SailManipulator: public ControllablePulley
{
public:
	Struct RopeVisualParams                                      RopeVisuals;                                       // 0x520(0xc)
	float                                                        RopeLength;                                        // 0x52c(0x4)
	Class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x530(0x8)
	Class StaticMeshComponent*                                   TopMeshComponent;                                  // 0x538(0x8)
	Class FixedIntentComponent*                                  CurseIntentComponent;                              // 0x540(0x8)
	Class WwiseObjectPoolWrapper*                                ManipulatorAudioPool;                              // 0x548(0x8)
	Struct SocketId                                              MastSocketId;                                      // 0x550(0x20)
	Class SailManipulatorAudioParams*                            AudioParams;                                       // 0x570(0x8)
	Class SceneComponent*                                        MastSocketSceneComponent;                          // 0x578(0x8)
	Struct WwiseEmitter                                          AudioEmitter;                                      // 0x580(0x20)
	char                                                         pad0x270_66B48[0x270];                             // 0x5a0(0x270)
	Class Mast*                                                  BoundMast;                                         // 0x810(0x8)
	Class Mast*                                                  PendingBoundMast;                                  // 0x818(0x8)
	bool                                                         Locked;                                            // 0x820(0x1)
	char                                                         pad0x7_4Y4Z6[0x7];                                 // 0x821(0x7)
	Class MobileInstancedStaticMeshComponent*                    TopMeshInstanceComponent;                          // 0x828(0x8)
	char                                                         pad0x8_IXHDW[0x8];                                 // 0x830(0x8)
};


// Size 0x28 (Full Size[0x860] - InheritedSize[0x838]
class SailHoist: public SailManipulator
{
public:
	char                                                         pad0x8_OI7XB[0x8];                                 // 0x838(0x8)
	float                                                        RopeUVSpeed;                                       // 0x840(0x4)
	char                                                         pad0x4_F2LG0[0x4];                                 // 0x844(0x4)
	Class RiggingSystemComponent*                                Rigging;                                           // 0x848(0x8)
	int                                                          RiggingRopeIndex;                                  // 0x850(0x4)
	bool                                                         PlayAudio;                                         // 0x854(0x1)
	char                                                         pad0xb_4FCH2[0xb];                                 // 0x855(0xb)
};


// Size 0x600 (Full Size[0x9c8] - InheritedSize[0x3c8]
class Mast: public Actor
{
public:
	char                                                         pad0x40_RS9ES[0x40];                               // 0x3c8(0x40)
	byte                                                         MastType;                                          // 0x408(0x1)
	char                                                         pad0x7_WL88B[0x7];                                 // 0x409(0x7)
	Class MastAudioParams*                                       MastAudioParams;                                   // 0x410(0x8)
	Class SceneComponent*                                        SceneRootComponent;                                // 0x418(0x8)
	Class IntentCombinerComponent*                               AngleCombinerComponent;                            // 0x420(0x8)
	Class IntentCombinerComponent*                               SailHoistIntentCombinerComponent;                  // 0x428(0x8)
	Class IntentCombinerComponent*                               MastHoistIntentCombinerComponent;                  // 0x430(0x8)
	Class SceneComponent*                                        MastMovingAttachComponent;                         // 0x438(0x8)
	Class SceneComponent*                                        SailAnglePivotComponent;                           // 0x440(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x448(0x8)
	Class RepairableComponent*                                   RepairableComponentFirst;                          // 0x450(0x8)
	Class RepairableComponent*                                   RepairableComponentSecond;                         // 0x458(0x8)
	Class RepairableComponent*                                   RepairableComponentThird;                          // 0x460(0x8)
	Class ShipDamageableComponent*                               DamageableComponent;                               // 0x468(0x8)
	Class MastFlammableComponent*                                MastFlammableComponent;                            // 0x470(0x8)
	float                                                        AngleBlend;                                        // 0x478(0x4)
	float                                                        LoweredBlend;                                      // 0x47c(0x4)
	float                                                        LoweringSpeed;                                     // 0x480(0x4)
	float                                                        RaisingSpeed;                                      // 0x484(0x4)
	float                                                        TurnSpeed;                                         // 0x488(0x4)
	float                                                        MaxTurnAngle;                                      // 0x48c(0x4)
	float                                                        SailOffsetFromMast;                                // 0x490(0x4)
	float                                                        SailWidth;                                         // 0x494(0x4)
	float                                                        SailHeight;                                        // 0x498(0x4)
	float                                                        SailStartOffset;                                   // 0x49c(0x4)
	Struct Vector                                                LookAtPosLow;                                      // 0x4a0(0xc)
	Struct Vector                                                LookAtPosHigh;                                     // 0x4ac(0xc)
	Class WwiseObjectPoolWrapper*                                SailAudioPool;                                     // 0x4b8(0x8)
	Class WwiseEvent*                                            AmbientSailFlapsSfx;                               // 0x4c0(0x8)
	Class WwiseEvent*                                            AmbientSailFlapsStopSfx;                           // 0x4c8(0x8)
	Class WwiseEvent*                                            PerfectSailInflationOneShot;                       // 0x4d0(0x8)
	Class WwiseEvent*                                            SailLostPerfectWindOneShot;                        // 0x4d8(0x8)
	struct FName                                                 InflationRTPC;                                     // 0x4e0(0x8)
	struct FName                                                 SailLengthRTPC;                                    // 0x4e8(0x8)
	float                                                        ClientSailBlendSpeed;                              // 0x4f0(0x4)
	char                                                         pad0x4_OWJ04[0x4];                                 // 0x4f4(0x4)
	TArray<class StaticMeshComponent*>                           YardArms;                                          // 0x4f8(0x10)
	struct FName                                                 TelemetryIdentifier;                               // 0x508(0x8)
	bool                                                         MastShouldBeFractured;                             // 0x510(0x1)
	char                                                         pad0x3_NQAPX[0x3];                                 // 0x511(0x3)
	Struct MastCollisionProfiles                                 MastCollisionProfiles;                             // 0x514(0x28)
	char                                                         pad0x4_FDS5B[0x4];                                 // 0x53c(0x4)
	Struct MastPhysicsComponents                                 MastPhysicsComponents;                             // 0x540(0x38)
	Class StaticMesh*                                            MastIntactMesh;                                    // 0x578(0x8)
	Class StaticMesh*                                            MastFractureMeshBottom;                            // 0x580(0x8)
	float                                                        MastFractureMeshBottomScale;                       // 0x588(0x4)
	float                                                        MastFractureMeshOriginalScale;                     // 0x58c(0x4)
	Class StaticMesh*                                            MastFractureMeshTop;                               // 0x590(0x8)
	Class ParticleSystem*                                        DamageParticleSystem;                              // 0x598(0x8)
	float                                                        HingeHeight;                                       // 0x5a0(0x4)
	float                                                        HingeDistanceFromCentre;                           // 0x5a4(0x4)
	float                                                        HingeDirectionAngle;                               // 0x5a8(0x4)
	float                                                        MaxFallAngle;                                      // 0x5ac(0x4)
	float                                                        MastLiftingSpeed;                                  // 0x5b0(0x4)
	bool                                                         OverrideSailLengthWhenFalling;                     // 0x5b4(0x1)
	char                                                         pad0x3_IJOU3[0x3];                                 // 0x5b5(0x3)
	float                                                        MaxFallenSailLength;                               // 0x5b8(0x4)
	float                                                        SailFoldingSpeed;                                  // 0x5bc(0x4)
	bool                                                         OverrideSailAngleWhenFalling;                      // 0x5c0(0x1)
	char                                                         pad0x3_M6LZR[0x3];                                 // 0x5c1(0x3)
	float                                                        DesiredFallingSailAngle;                           // 0x5c4(0x4)
	float                                                        SailTwistingSpeed;                                 // 0x5c8(0x4)
	char                                                         pad0x4_F5WNZ[0x4];                                 // 0x5cc(0x4)
	Class MastHinge*                                             Hinge;                                             // 0x5d0(0x8)
	Struct WeightedProbabilityRangeOfRanges                      MastImpactForceToApplyToShip;                      // 0x5d8(0x30)
	float                                                        MastImpactForceModifierToApplyToKrakenWrappedShip; // 0x608(0x4)
	float                                                        MastImpactHeightLocation;                          // 0x60c(0x4)
	class                                                        CameraShake;                                       // 0x610(0x8)
	float                                                        CameraShakeInnerRadius;                            // 0x618(0x4)
	float                                                        CameraShakeOuterRadius;                            // 0x61c(0x4)
	bool                                                         PreviewMastFallenPosition;                         // 0x620(0x1)
	char                                                         pad0x7_JQ0CV[0x7];                                 // 0x621(0x7)
	TArray<class RepairableComponent*>                           RepairableComponents;                              // 0x628(0x10)
	Struct MastDamageAudioParams                                 DamageAudioParameters;                             // 0x638(0xb0)
	char                                                         pad0x8_RULDE[0x8];                                 // 0x6e8(0x8)
	Class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x6f0(0x8)
	char                                                         pad0xa0_FWZZG[0xa0];                               // 0x6f8(0xa0)
	TArray<class ChildActorComponent*>                           LinkedSails;                                       // 0x798(0x10)
	Struct IntentPredictor                                       LengthIntentPredictor;                             // 0x7a8(0x1c)
	Struct IntentPredictor                                       AngleIntentPredictor;                              // 0x7c4(0x1c)
	Struct IntentPredictor                                       MastHoistIntentPredictor;                          // 0x7e0(0x1c)
	bool                                                         MastHoistingControlSchemeActive;                   // 0x7fc(0x1)
	char                                                         pad0x3_JGTDU[0x3];                                 // 0x7fd(0x3)
	Struct ObjectMessagingHandle                                 SailGotPerfectWindEventHandle;                     // 0x800(0x58)
	Struct ObjectMessagingHandle                                 SailLostPerfectWindEventHandle;                    // 0x858(0x58)
	Struct ObjectMessagingHandle                                 MastRepairStoppedHandle;                           // 0x8b0(0x58)
	char                                                         pad0x10_CM10I[0x10];                               // 0x908(0x10)
	Struct WwiseEmitter                                          SailsAudioEmitter;                                 // 0x918(0x20)
	float                                                        ServerAngleRatio;                                  // 0x938(0x4)
	float                                                        ServerLoweredProportion;                           // 0x93c(0x4)
	byte                                                         ForceBillowingState;                               // 0x940(0x1)
	char                                                         pad0x3_7YAQ3[0x3];                                 // 0x941(0x3)
	float                                                        ServerMastFallingProportion;                       // 0x944(0x4)
	char                                                         pad0x1c_8LGX3[0x1c];                               // 0x948(0x1c)
	bool                                                         AllowedToFall;                                     // 0x964(0x1)
	bool                                                         PlayAudio;                                         // 0x965(0x1)
	char                                                         pad0x3a_ARJAU[0x3a];                               // 0x966(0x3a)
	bool                                                         IsCursed;                                          // 0x9a0(0x1)
	char                                                         pad0x27_KH00B[0x27];                               // 0x9a1(0x27)
};


// Size 0x30 (Full Size[0x868] - InheritedSize[0x838]
class SailAngle: public SailManipulator
{
public:
	char                                                         pad0x8_E78L5[0x8];                                 // 0x838(0x8)
	float                                                        RopeUVSpeed;                                       // 0x840(0x4)
	char                                                         pad0x4_BGPCS[0x4];                                 // 0x844(0x4)
	Class RiggingSystemComponent*                                Rigging;                                           // 0x848(0x8)
	int                                                          RiggingLeftRopeIndex;                              // 0x850(0x4)
	int                                                          RiggingRightRopeIndex;                             // 0x854(0x4)
	bool                                                         PlayAudio;                                         // 0x858(0x1)
	char                                                         pad0xf_0V3WK[0xf];                                 // 0x859(0xf)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryInteractNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class InteractOrDisengageNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryInteractNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CompositeQuickSwitchWeaponSecondaryInteractNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryItemUseReleasedNotificationInputId: public PrimaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryItemUseReleasedNotificationInputId: public SecondaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFortGameEventTypeBase: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFortGameEventType: public SkellyFortGameEventTypeBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFort2022GameEventType: public SkellyFortGameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryInteractReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryInteractReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AbsorbsLiquidInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class AbsorbsLiquidComponent: public ActorComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AchievementDefinitionDataAsset: public DataAsset
{
public:
	TArray<struct AchievementDefintions>                         AchievementDefintions;                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActionRulesBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class ActionRuleTestActor: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialContextBase: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ActionStateRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         TargetActionStates;                                // 0x28(0x10)
	bool                                                         AreDockablePhrasesRequired;                        // 0x38(0x1)
	char                                                         pad0x7_LUNXM[0x7];                                 // 0x39(0x7)
};


// Size 0xa8 (Full Size[0x3f0] - InheritedSize[0x348]
class ActorCoherentViewComponent: public CoherentUIGTComponent
{
public:
	char                                                         pad0xa0_MA2IG[0xa0];                               // 0x348(0xa0)
	struct FName                                                 TargetPrimitiveName;                               // 0x3e8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorRelevancyTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class AddFogBankAvoidanceAreaStep: public TaleQuestStep
{
public:
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class FogBankManager: public Actor
{
public:
	TArray<struct FeatureToggledManagerAssetsArray>              FeatureToggledManagerAssetsArray;                  // 0x3c8(0x10)
	Class FogBankManagerDataAsset*                               DefaultFogBankManagerDataAsset;                    // 0x3d8(0x8)
	Class FogBankManagerDataAsset*                               ActiveFogBankManagerDataAsset;                     // 0x3e0(0x8)
};


// Size 0x18 (Full Size[0x78] - InheritedSize[0x60]
class FogBankTaleService: public TaleQuestService
{
public:
	Class FogBankTaleServiceDesc*                                Desc;                                              // 0x60(0x8)
	TArray<struct FogBankAvoidanceAreas>                         FogBankAvoidanceAreas;                             // 0x68(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FogBankTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class AddFogBankAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
	Struct QuestVariableFloat                                    Radius;                                            // 0xb0(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class AddMechanismTriggerStep: public TaleQuestStep
{
public:
	Class AddMechanismTriggerStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class AddMechanismTriggerStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	Struct QuestVariableActor                                    Trigger;                                           // 0xb0(0x30)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class AddOpenContainerActionRuleComponent: public ActorComponent
{
public:
	class                                                        NotificationInputId;                               // 0xc8(0x8)
	byte                                                         DisplayPriority;                                   // 0xd0(0x1)
	char                                                         pad0x7_WHAQD[0x7];                                 // 0xd1(0x7)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class AddReloadAmmoActionRuleComponent: public ActorComponent
{
public:
	class                                                        NotificationInputId;                               // 0xc8(0x8)
	byte                                                         DisplayPriority;                                   // 0xd0(0x1)
	char                                                         pad0x7_NWBM4[0x7];                                 // 0xd1(0x7)
};


// Size 0x100 (Full Size[0x4c8] - InheritedSize[0x3c8]
class AdjustableWaterLevelPuzzle: public Actor
{
public:
	char                                                         pad0x8_J9X06[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        RootComp;                                          // 0x3d0(0x8)
	Class ChildActorComponent*                                   WaterVolumeComponent;                              // 0x3d8(0x8)
	Class VariableFillRateWaterVolume*                           WaterVolumeActor;                                  // 0x3e0(0x8)
	TArray<struct WaterLevels>                                   WaterLevels;                                       // 0x3e8(0x10)
	int                                                          DefaultWaterLevelIndex;                            // 0x3f8(0x4)
	char                                                         pad0x4_00XFT[0x4];                                 // 0x3fc(0x4)
	Class CurveFloat*                                            FillCurve;                                         // 0x400(0x8)
	Class CurveFloat*                                            DrainCurve;                                        // 0x408(0x8)
	Class CurveFloat*                                            ResetCurve;                                        // 0x410(0x8)
	float                                                        PuzzleResetTimeout;                                // 0x418(0x4)
	Struct WaterPuzzleRepData                                    ReppedData;                                        // 0x41c(0x8)
	char                                                         pad0xa4_DSIYP[0xa4];                               // 0x424(0xa4)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AdjustableWaterLevelPuzzleAudioParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                WaterLevelPuzzlePool;                              // 0x28(0x8)
	Class WwiseEvent*                                            PuzzleWaterRiseStartEvent;                         // 0x30(0x8)
	Class WwiseEvent*                                            PuzzleWaterRiseEndEvent;                           // 0x38(0x8)
	Class WwiseEvent*                                            PuzzleWaterFallStartEvent;                         // 0x40(0x8)
	Class WwiseEvent*                                            PuzzleWaterFallEndEvent;                           // 0x48(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class QuestBookPageBundle: public DataAsset
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AdventuresActorBundleAsset: public DataAsset
{
public:
	TArray<struct Contents>                                      Contents;                                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AdventuresBundleListingAsset: public DataAsset
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class AdventuresActorBundleTaleFunctionLibrary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AdventureSettings: public DeveloperSettings
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AgitatedAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AIBuffStatus: public StatusBase
{
public:
};


// Size 0x18 (Full Size[0x528] - InheritedSize[0x510]
class AIDockableObject: public ControllableObject
{
public:
	char                                                         pad0x8_TWIS9[0x8];                                 // 0x510(0x8)
	class                                                        InteractableType;                                  // 0x518(0x8)
	float                                                        InteractableOffset;                                // 0x520(0x4)
	char                                                         pad0x4_9TEE4[0x4];                                 // 0x524(0x4)
};


// Size 0x0 (Full Size[0x528] - InheritedSize[0x528]
class AIDockableWheel: public AIDockableObject
{
public:
};


// Size 0x10 (Full Size[0x5a8] - InheritedSize[0x598]
class AIEmergentCaptainSpawner: public AIPerCrewSpawner
{
public:
	char                                                         pad0x8_IA56Y[0x8];                                 // 0x598(0x8)
	Class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x5a0(0x8)
};


// Size 0x18 (Full Size[0x160] - InheritedSize[0x148]
class AIFormWithVFXComponent: public AthenaAIFormComponent
{
public:
	Class ParticleSystem*                                        ParticlesTemplate;                                 // 0x148(0x8)
	Class ParticleSystemComponent*                               ParticleSystemComponent;                           // 0x150(0x8)
	float                                                        ParticleActivationDelay;                           // 0x158(0x4)
	Struct TimerHandle                                           ActivationTimerHandle;                             // 0x15c(0x4)
};


// Size 0x10 (Full Size[0xa0] - InheritedSize[0x90]
class AIFormWithVFXDataAsset: public AthenaAIFormDataAsset
{
public:
	Class ParticleSystem*                                        ParticlesTemplate;                                 // 0x90(0x8)
	float                                                        ParticleActivationDelay;                           // 0x98(0x4)
	char                                                         pad0x4_9FPSK[0x4];                                 // 0x9c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIKnockbackActionStateId: public ActionStateId
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class LoadoutAsset: public DataAsset
{
public:
	Struct ItemLoadout                                           ItemLoadout;                                       // 0x28(0x20)
	struct FName                                                 FeatureName;                                       // 0x48(0x8)
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class AILoadoutWithNonStoreableAsset: public LoadoutAsset
{
public:
	char                                                         pad0x8_HRN85[0x8];                                 // 0x50(0x8)
	class                                                        NonStoreableItem;                                  // 0x58(0x8)
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class AimSensitivityComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AimWeaponPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AimWeaponReleasedNotificationInputId: public AimWeaponPressedNotificationInputId
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class AIOnShipManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_JQAVZ[0x8];                                 // 0xc8(0x8)
	Class AIProximityPlayerTracker*                              AIProximityPlayerTracker;                          // 0xd0(0x8)
	TArray<class AIFixedWavesSpawner*>                           AIOnShipAIFixedWavesSpawners;                      // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileWeaponFiringIntentionInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class AIProjectileWeaponFiringIntentionComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7RSYD[0x8];                                 // 0xc8(0x8)
	Class Pawn*                                                  PawnOwner;                                         // 0xd0(0x8)
	Class AthenaAIControllerBase*                                AIController;                                      // 0xd8(0x8)
	char                                                         pad0x1c_HOYP0[0x1c];                               // 0xe0(0x1c)
	float                                                        DefaultHitChance;                                  // 0xfc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIQuickDeathInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipCaptainActionStateId: public ActionStateId
{
public:
};


// Size 0x160 (Full Size[0x440] - InheritedSize[0x2e0]
class ItemSpawnComponent: public SceneComponent
{
public:
	bool                                                         SpawnOnStart;                                      // 0x2e0(0x1)
	char                                                         pad0x7_WH6SN[0x7];                                 // 0x2e1(0x7)
	Struct ItemSpawnParams                                       SpawnParams;                                       // 0x2e8(0x28)
	Class WeightedItemDescSpawnDataAsset*                        ReferencedSpawnDistributionAsset;                  // 0x310(0x8)
	TArray<struct SpawnTransforms>                               SpawnTransforms;                                   // 0x318(0x10)
	TArray<struct SpawnTransformsWithRandomQuantities>           SpawnTransformsWithRandomQuantities;               // 0x328(0x10)
	struct FName                                                 FeatureToggle;                                     // 0x338(0x8)
	byte                                                         SpawnSource;                                       // 0x340(0x1)
	char                                                         pad0x3_LN7X8[0x3];                                 // 0x341(0x3)
	float                                                        SpawnRate;                                         // 0x344(0x4)
	bool                                                         DestroyProxiesOnEndPlay;                           // 0x348(0x1)
	bool                                                         SpawnWithPhysicsEnabled;                           // 0x349(0x1)
	bool                                                         DoNotAttachToOwnerWhenSpawned;                     // 0x34a(0x1)
	bool                                                         DropItemsOnSpawn;                                  // 0x34b(0x1)
	bool                                                         DropItemsUsingPriorityAIDropParams;                // 0x34c(0x1)
	char                                                         pad0x3_YYIK0[0x3];                                 // 0x34d(0x3)
	TArray<struct SpawnList>                                     SpawnList;                                         // 0x350(0x10)
	TArray<struct SingleItemInstances>                           SingleItemInstances;                               // 0x360(0x10)
	TArray<struct SpawnedItems>                                  SpawnedItems;                                      // 0x370(0x10)
	char                                                         pad0xc0_9HA61[0xc0];                               // 0x380(0xc0)
};


// Size 0x60 (Full Size[0x4a0] - InheritedSize[0x440]
class AIShipItemSpawnComponent: public ItemSpawnComponent
{
public:
	bool                                                         SpawnAlways;                                       // 0x440(0x1)
	bool                                                         SpawnForBattleFinalShip;                           // 0x441(0x1)
	bool                                                         SpawnForPassiveShip;                               // 0x442(0x1)
	bool                                                         SpawnForAggressiveShip;                            // 0x443(0x1)
	char                                                         pad0x5c_Z6CIJ[0x5c];                               // 0x444(0x5c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmotesInterface: public Interface
{
public:
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class LookAtOffsetComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterInterface: public CharacterMeshInterface
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class FireSettingsDataAsset: public DataAsset
{
public:
	float                                                        CharacterOnFireEffectRadius;                       // 0x28(0x4)
	byte                                                         TraceChannel;                                      // 0x2c(0x1)
	char                                                         pad0x3_N7TUX[0x3];                                 // 0x2d(0x3)
	float                                                        CharacterToCharacterPropagationInterval;           // 0x30(0x4)
	float                                                        MaxInitialPropagationOffset;                       // 0x34(0x4)
	Struct Status                                                BurnStatus;                                        // 0x38(0x18)
	Struct Status                                                FirePropagationStatus;                             // 0x50(0x18)
	char                                                         pad0x8_H92QR[0x8];                                 // 0x68(0x8)
};


// Size 0x160 (Full Size[0x270] - InheritedSize[0x110]
class CharacterFlammableComponent: public ActorFlammableComponent
{
public:
	char                                                         pad0x30_OIZ0L[0x30];                               // 0x110(0x30)
	float                                                        FireFalloffDuration;                               // 0x140(0x4)
	float                                                        FireRateOfFalloffInRain;                           // 0x144(0x4)
	float                                                        FireFalloffMultiplier;                             // 0x148(0x4)
	struct FName                                                 VfxSocketName;                                     // 0x14c(0x8)
	char                                                         pad0xc_7O1QY[0xc];                                 // 0x154(0xc)
	Struct Transform                                             SocketRelativeOffset;                              // 0x160(0x30)
	char                                                         pad0x88_3FMAC[0x88];                               // 0x190(0x88)
	Class World*                                                 CachedWorld;                                       // 0x218(0x8)
	char                                                         pad0x8_LKW3I[0x8];                                 // 0x220(0x8)
	Class FireSettingsDataAsset*                                 FireSettingsAsset;                                 // 0x228(0x8)
	char                                                         pad0x40_I3UM2[0x40];                               // 0x230(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterFootImpactMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObscuredVisionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerPrivilegeInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateDescInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CloudDomeInterface: public Interface
{
public:
};


// Size 0x2e8 (Full Size[0x6b0] - InheritedSize[0x3c8]
class CloudDome: public Actor
{
public:
	char                                                         pad0xb8_R3IB1[0xb8];                               // 0x3c8(0xb8)
	Class LocalPlayer*                                           LocalPlayer;                                       // 0x480(0x8)
	char                                                         pad0x228_6E0F4[0x228];                             // 0x488(0x228)
};


// Size 0x620 (Full Size[0xc00] - InheritedSize[0x5e0]
class AthenaCharacter: public Character
{
public:
	char                                                         pad0x120_91IDO[0x120];                             // 0x5e0(0x120)
	Class LookAtOffsetComponent*                                 LookAtOffsetComponent;                             // 0x700(0x8)
	Class AnimationDataStoreAsset*                               AnimationDataStoreAsset;                           // 0x708(0x8)
	Class AthenaAnimationSittingDataAsset*                       SittingAnimationDataAssets;                        // 0x710(0x8)
	Class AthenaCharacterMovementComponent*                      AthenaCharacterMovementComponent;                  // 0x718(0x8)
	Struct Docker                                                Docker;                                            // 0x720(0x90)
	Class ActionStateMachineComponent*                           ActionStateMachineComponent;                       // 0x7b0(0x8)
	Class ActionStatePriorityTableData*                          ActionStatePriorityTableData;                      // 0x7b8(0x8)
	class                                                        ActionStateCreatorDefinition;                      // 0x7c0(0x8)
	Struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x7c8(0xa0)
	Class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x868(0x8)
	Class WieldedItemComponent*                                  WieldedItemComponent;                              // 0x870(0x8)
	Class SceneComponent*                                        MeshAdjustmentComponent;                           // 0x878(0x8)
	Class InventoryManipulatorComponent*                         InventoryManipulatorComponent;                     // 0x880(0x8)
	Class LoadoutComponent*                                      LoadoutComponent;                                  // 0x888(0x8)
	Class ItemLoadoutComponent*                                  ItemLoadoutComponent;                              // 0x890(0x8)
	Class HealthComponent*                                       HealthComponent;                                   // 0x898(0x8)
	Class AthenaCharacterStateManagerComponent*                  StateManagerComponent;                             // 0x8a0(0x8)
	Class RewindComponent*                                       RewindComponent;                                   // 0x8a8(0x8)
	Class ActorDamageableComponent*                              ActorDamageableComponent;                          // 0x8b0(0x8)
	Class CharacterHitReactionComponent*                         CharacterHitReactionComponent;                     // 0x8b8(0x8)
	Class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x8c0(0x8)
	Class MeleeAttackProcessorComponent*                         MeleeAttackProcessor;                              // 0x8c8(0x8)
	Class HitDetectionComponent*                                 HitDetectionComponent;                             // 0x8d0(0x8)
	Class AthenaCharacterKnockbackComponent*                     KnockBackComponent;                                // 0x8d8(0x8)
	Class AthenaCharacterDodgeComponent*                         DodgeComponent;                                    // 0x8e0(0x8)
	Class CharacterAINoiseEventComponent*                        CharacterAINoiseEventComponent;                    // 0x8e8(0x8)
	Class ActionRulesComponent*                                  PrivateActionRulesComponent;                       // 0x8f0(0x8)
	Class ShipTrackerComponent*                                  ShipTrackerComponent;                              // 0x8f8(0x8)
	Class WatercraftTrackerComponent*                            WatercraftTrackerComponent;                        // 0x900(0x8)
	Class ItemLoaderComponent*                                   ItemLoaderComponent;                               // 0x908(0x8)
	Class RetractableCharacterComponent*                         RetractableCharacterComponent;                     // 0x910(0x8)
	Class ResourceProviderComponent*                             ResourceProviderComponent;                         // 0x918(0x8)
	Class CharacterFlammableComponent*                           CharacterFlammableComponent;                       // 0x920(0x8)
	Class SoakableComponent*                                     SoakableComponent;                                 // 0x928(0x8)
	Class WaterExposureComponent*                                WaterExposureComponent;                            // 0x930(0x8)
	Class ShelteredComponent*                                    ShelteredComponent;                                // 0x938(0x8)
	Class BoxedRpcDispatcherComponent*                           BoxedRpcDispatcherComponent;                       // 0x940(0x8)
	Class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x948(0x8)
	Class InteractionPreventionComponent*                        InteractionPreventionComponent;                    // 0x950(0x8)
	Class MovementInterferenceComponent*                         InterferenceComponent;                             // 0x978(0x8)
	Class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x980(0x8)
	class                                                        ThirdPersonAnimSetDataId;                          // 0x988(0x8)
	bool                                                         OverrideEncroachesBlockingGeometry;                // 0x990(0x1)
	byte                                                         OverrideEncroachesBlockingGeometryChannel;         // 0x991(0x1)
	char                                                         pad0x2_9T498[0x2];                                 // 0x992(0x2)
	struct FName                                                 OverrideFloorSweepCollisionProfileName;            // 0x994(0x8)
	char                                                         pad0x20_QB99T[0x20];                               // 0x99c(0x20)
	float                                                        MovementThresholdToRecordRewindTransform;          // 0x9bc(0x4)
	char                                                         pad0xc_4FO6K[0xc];                                 // 0x9c0(0xc)
	int                                                          SpawnAnimIndex;                                    // 0x9cc(0x4)
	char                                                         pad0x70_FWJYQ[0x70];                               // 0x9d0(0x70)
	Class AnimationDataStore*                                    AnimationDataStore;                                // 0xa40(0x8)
	char                                                         pad0x40_6EEOY[0x40];                               // 0xa48(0x40)
	Class PlayerState*                                           OldPlayerState;                                    // 0xa88(0x8)
	char                                                         pad0x3c_U0BUF[0x3c];                               // 0xa90(0x3c)
	float                                                        RelativeTargetYawOnMovingBase;                     // 0xacc(0x4)
	char                                                         pad0x30_HJVEN[0x30];                               // 0xad0(0x30)
	float                                                        SmoothYawOnMovingBaseTime;                         // 0xb00(0x4)
	int                                                          RandomAnimationSeed;                               // 0xb04(0x4)
	char                                                         pad0x8_27I7V[0x8];                                 // 0xb08(0x8)
	bool                                                         RandomBool;                                        // 0xb10(0x1)
	char                                                         pad0x27_LXODL[0x27];                               // 0xb11(0x27)
	Class SkeletalMeshSocket*                                    CameraSocket;                                      // 0xb38(0x8)
	char                                                         pad0x48_DAVYO[0x48];                               // 0xb40(0x48)
	TArray<class InputComponent*>                                RegisteredInputComponents;                         // 0xb88(0x10)
	char                                                         pad0x68_BKG82[0x68];                               // 0xb98(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BriggableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimAttackableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerManagerServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CloudDomeServiceInterface: public Interface
{
public:
};


// Size 0x1320 (Full Size[0x1f20] - InheritedSize[0xc00]
class AthenaPlayerCharacter: public AthenaCharacter
{
public:
	char                                                         pad0x150_SFXIK[0x150];                             // 0xc00(0x150)
	Class SceneComponent*                                        FirstPersonMeshOffsetComponent;                    // 0xd50(0x8)
	Class SkeletalMeshComponent*                                 FirstPersonMesh;                                   // 0xd58(0x8)
	Class AthenaCameraComponent*                                 FirstPersonCamera;                                 // 0xd60(0x8)
	TArray<class ParticleSystemComponent*>                       FirstPersonParticleComponents;                     // 0xd68(0x10)
	Class AthenaCameraComponent*                                 ThirdPersonCamera;                                 // 0xd78(0x8)
	TArray<class ParticleSystemComponent*>                       ThirdPersonParticleComponents;                     // 0xd80(0x10)
	Class AthenaCameraComponent*                                 SpringArmCamera;                                   // 0xd90(0x8)
	Class LookAtEmoteCameraComponent*                            LookAtEmoteCameraComponent;                        // 0xd98(0x8)
	Class AthenaSpringArmComponent*                              SpringArm;                                         // 0xda0(0x8)
	Class ChildActorComponent*                                   LocalCloudDome;                                    // 0xda8(0x8)
	Class CharacterInteractionComponent*                         InteractionComponent;                              // 0xdb0(0x8)
	Class ClimbingComponent*                                     ClimbingComponent;                                 // 0xdb8(0x8)
	Class DrunkennessComponent*                                  DrunkennessComponent;                              // 0xdc0(0x8)
	Class StaggerComponent*                                      StaggerComponent;                                  // 0xdc8(0x8)
	Class DrowningComponent*                                     DrowningComponent;                                 // 0xdd0(0x8)
	Class RumbleHandlerComponent*                                RumbleHandlerComponent;                            // 0xdd8(0x8)
	Class ScreenSpaceVfxComponent*                               ScreenSpaceVfxComponent;                           // 0xde0(0x8)
	Class TreasureMapCollectionComponent*                        TreasureMapCollectionComponent;                    // 0xde8(0x8)
	Class PhrasesRadialComponent*                                PhrasesRadialComponent;                            // 0xdf0(0x8)
	Class QuickInventoryComponent*                               QuickInventoryComponent;                           // 0xdf8(0x8)
	Class PointOfInterestTrackerComponent*                       PointOfInterestTrackerComponent;                   // 0xe00(0x8)
	Class LimpingComponent*                                      LimpingComponent;                                  // 0xe08(0x8)
	Class PacingComponent*                                       PacingComponent;                                   // 0xe10(0x8)
	Class BurpComponent*                                         BurpComponent;                                     // 0xe18(0x8)
	Class MeleeAttackLockOnComponent*                            MeleeLockOnComponent;                              // 0xe20(0x8)
	Class DeathSelfInteractionComponent*                         DeathSelfInteractionComponent;                     // 0xe28(0x8)
	Class RidePlayerComponent*                                   RidePlayerComponent;                               // 0xe30(0x8)
	Class ReviveDebugComponent*                                  ReviveDebugComponent;                              // 0xe38(0x8)
	Class FlashbangEffectComponent*                              FlashbangEffectComponent;                          // 0xe40(0x8)
	Class WorldLocationVisitorComponent*                         WorldLocationVisitorComponent;                     // 0xe48(0x8)
	Class MeleeAttackLockOnComponentSettings*                    MeleeAttackLockOnSettings;                         // 0xe50(0x8)
	Class StatusEffectManagerComponent*                          StatusEffectManagerComponent;                      // 0xe58(0x8)
	Class StatusEffectPersistenceComponent*                      StatusEffectPersistenceComponent;                  // 0xe60(0x8)
	Class PlayerCurseComponent*                                  PlayerCurseComponent;                              // 0xe68(0x8)
	Class MaterialStatusSusceptibilityComponent*                 MaterialStatusSusceptibilityComponent;             // 0xe70(0x8)
	Class HealthRegenerationPoolComponent*                       HealthRegenerationPoolComponent;                   // 0xe78(0x8)
	Class SicknessComponent*                                     SicknessComponent;                                 // 0xe80(0x8)
	Class RewindComponent*                                       PlayerViewRewindComponent;                         // 0xe88(0x8)
	Class CapsuleComponent*                                      ProjectileTraceHitVolume;                          // 0xe90(0x8)
	Class PlayerMerchantContractsComponent*                      PlayerMerchantContractsComponent;                  // 0xe98(0x8)
	Class PlayerShroudBreakerTrackerComponent*                   PlayerShroudBreakerTrackerComponent;               // 0xea0(0x8)
	Class PetOwnerComponent*                                     PetOwnerComponent;                                 // 0xea8(0x8)
	Class AISpawnContextContainerComponent*                      SpawnContextContainerComponent;                    // 0xeb0(0x8)
	Class RadialManagerComponent*                                RadialManager;                                     // 0xeb8(0x8)
	Class StreamingLocationComponent*                            StreamingLocationComponent;                        // 0xec0(0x8)
	Class EquipClothingComponent*                                EquipClothingComponent;                            // 0xec8(0x8)
	float                                                        CameraFOVWhenSprinting;                            // 0xed0(0x4)
	char                                                         pad0x4_NHV44[0x4];                                 // 0xed4(0x4)
	Class CurveVector*                                           ApproximateCamPitchToLocalCamOffsetCurve;          // 0xed8(0x8)
	Struct WalkConditionsParams                                  WalkConditionParams;                               // 0xee0(0x8)
	Struct SprintConditionsParams                                ServerSprintConditionParams;                       // 0xee8(0xc)
	Struct SprintConditionsParams                                ClientSprintConditionParams;                       // 0xef4(0xc)
	float                                                        SprintingServerTimeTolerance;                      // 0xf00(0x4)
	float                                                        PostSprintResetTime;                               // 0xf04(0x4)
	Class AthenaSpringArmComponentParams*                        EmoteSpringArmParameters;                          // 0xf08(0x8)
	Class AthenaSpringArmComponentParams*                        DeathSpringArmParameters;                          // 0xf10(0x8)
	Class EmotesRadialDataAsset*                                 EmotesRadialDataAsset;                             // 0xf18(0x8)
	bool                                                         AllowAnimationTickAggregation;                     // 0xf20(0x1)
	char                                                         pad0x3_VJRMH[0x3];                                 // 0xf21(0x3)
	Struct AchievementKillOpponentFromBehindWithBlunderbuss      AchievementKillOpponentFromBehindWithBlunderbuss;  // 0xf24(0x4)
	Struct AchievementHeavyAttackRivalOffTheirShip               AchievementHeavyAttackRivalOffTheirShip;           // 0xf28(0x10)
	Struct AchievementBlockThenHitAndGetBlockedThenTakeHit       AchievementBlockThenHitAndGetBlockedThenTakeHit;   // 0xf38(0x10)
	Struct AchievementHaveADrinkWithAnotherCrewAtAnOutpost       AchievementHaveADrinkWithAnotherCrewAtAnOutpost;   // 0xf48(0x20)
	Struct AchievementKillOpponentInContest                      AchievementKillOpponentInContest;                  // 0xf68(0x8)
	class                                                        ConditionalStatsTriggerForKillingAnotherPlayer;    // 0xf70(0x8)
	Class AICreatureMovementModifierParamsDataAsset*             PirateLegendHideoutPetMovementData;                // 0xf78(0x8)
	Class AICreatureMovementModifierParamsDataAsset*             OnShipPetMovementData;                             // 0xf80(0x8)
	Class AsyncLoadoutRepairComponent*                           RepairComponent;                                   // 0xf88(0x8)
	Class SeasonProgressionUIComponent*                          SeasonUIComponent;                                 // 0xf90(0x8)
	Class AimAssistComponent*                                    AimAssistComponent;                                // 0xf98(0x8)
	Class AimAssistTargetComponent*                              AimAssistTargetComponent;                          // 0xfa0(0x8)
	Class SequencerCameraDockingComponent*                       SequencerCameraDockingComponent;                   // 0xfa8(0x8)
	Class EmotePropData*                                         EmotePropData;                                     // 0xfb0(0x8)
	char                                                         pad0xb0_QZLZU[0xb0];                               // 0xfb8(0xb0)
	class                                                        FirstPersonAnimSetDataId;                          // 0x1068(0x8)
	Class AnimationDataStoreWeakReferenceAsset*                  FirstPersonAnimationDataStoreWeakReferencesAsset;  // 0x1070(0x8)
	byte                                                         CharacterType;                                     // 0x1078(0x1)
	char                                                         pad0x20_QBPQN[0x20];                               // 0x1079(0x20)
	bool                                                         IsWearingSkeletonCurseCached;                      // 0x1099(0x1)
	bool                                                         IsWearingGhostCurseCached;                         // 0x109a(0x1)
	char                                                         pad0xc2d_CHIS3[0xc2d];                             // 0x109b(0xc2d)
	Class ClothingLoadoutComponent*                              ClothingLoadoutComponent;                          // 0x1cc8(0x8)
	Class PetLoadoutComponent*                                   PetLoadoutComponent;                               // 0x1cd0(0x8)
	Class VoyageParticipantComponent*                            PrimaryVoyageParticipantComponent;                 // 0x1cd8(0x8)
	Class VoyageParticipantComponent*                            TaleVoyageParticipantComponent;                    // 0x1ce0(0x8)
	Class VoyageParticipantComponent*                            EmergentVoyageParticipantComponent;                // 0x1ce8(0x8)
	Class PlayerWorldLocationComponent*                          PlayerWorldLocationComponent;                      // 0x1cf0(0x8)
	Class ChainLightningReceiverComponent*                       ChainLightningReceiverComponent;                   // 0x1cf8(0x8)
	Class PlayerGuildComponent*                                  PlayerGuildComponent;                              // 0x1d00(0x8)
	Class GuildSignUpComponent*                                  GuildSignUpComponent;                              // 0x1d08(0x8)
	Class ActionRulesInteractableComponent*                      EmoteInteractableComponent;                        // 0x1d10(0x8)
	Struct AthenaPlayerCharacterModelSwap                        PendingModelSwap;                                  // 0x1d18(0x68)
	char                                                         pad0x20_9XVGU[0x20];                               // 0x1d80(0x20)
	struct FName                                                 ReplicatedOverrideAnimationEntry;                  // 0x1da0(0x8)
	char                                                         pad0x9_BL7PI[0x9];                                 // 0x1da8(0x9)
	bool                                                         ReplicatedEmoteExitAllowed;                        // 0x1db1(0x1)
	char                                                         pad0x7e_2RSV4[0x7e];                               // 0x1db2(0x7e)
	bool                                                         FinishedWaitingForSpawn;                           // 0x1e30(0x1)
	char                                                         pad0x31_X5IYS[0x31];                               // 0x1e31(0x31)
	bool                                                         AutoFloatInWater;                                  // 0x1e62(0x1)
	char                                                         pad0x1_K9EE1[0x1];                                 // 0x1e63(0x1)
	bool                                                         ReplicatedIsSprinting;                             // 0x1e64(0x1)
	char                                                         pad0x1b_5O3IV[0x1b];                               // 0x1e65(0x1b)
	float                                                        AutoMoveCancelThreshold;                           // 0x1e80(0x4)
	int                                                          ReplicatedOverridePirateDescSeed;                  // 0x1e84(0x4)
	bool                                                         PreventJumping;                                    // 0x1e88(0x1)
	bool                                                         StopMovementAndPreventSwimming;                    // 0x1e89(0x1)
	char                                                         pad0x96_B4C6U[0x96];                               // 0x1e8a(0x96)
};


// Size 0xe8 (Full Size[0x130] - InheritedSize[0x48]
class AIShipPlayerTracker: public AISpawnerPlayerTracker
{
public:
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class AIShipRegionPlayerTracker: public AISpawnerPlayerTracker
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipWheelAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x20 (Full Size[0x590] - InheritedSize[0x570]
class AISignalTargetWaveSpawner: public AIWaveSpawner
{
public:
	TArray<struct SignalMechanismAssetRefs>                      SignalMechanismAssetRefs;                          // 0x570(0x10)
	char                                                         pad0x10_H8FDJ[0x10];                               // 0x580(0x10)
};


// Size 0x30 (Full Size[0x90] - InheritedSize[0x60]
class AISpawnContextTaleQuestService: public TaleQuestService
{
public:
	Class AISpawnContextTaleQuestServiceDesc*                    Desc;                                              // 0x60(0x8)
	char                                                         pad0x28_AVU6C[0x28];                               // 0x68(0x28)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AISpawnContextTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	struct FName                                                 AISpawnContextName;                                // 0x28(0x8)
	bool                                                         SpecificToIsland;                                  // 0x30(0x1)
	char                                                         pad0x7_TRIFL[0x7];                                 // 0x31(0x7)
	Struct QuestVariableAsset                                    ActorLocatedOnIsland;                              // 0x38(0x30)
};


// Size 0x20 (Full Size[0x2b8] - InheritedSize[0x298]
class AIWieldableUseInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AlcoholStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AllianceBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xe0 (Full Size[0x4a8] - InheritedSize[0x3c8]
class AllianceService: public Actor
{
public:
	char                                                         pad0x8_4A8JT[0x8];                                 // 0x3c8(0x8)
	Class AllianceSettingsAsset*                                 Settings;                                          // 0x3d0(0x8)
	TArray<struct Alliances>                                     Alliances;                                         // 0x3d8(0x10)
	Class AllianceServiceTelemetryComponent*                     TelemetryComponent;                                // 0x3e8(0x8)
	TArray<struct CrewAllianceJoinStatuses>                      CrewAllianceJoinStatuses;                          // 0x3f0(0x10)
	char                                                         pad0x28_ZLH0U[0x28];                               // 0x400(0x28)
	char                                                         pad0x80_KUNY9[0x80];                               // 0x428(0x80)
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class AllianceServiceTelemetryComponent: public ActorComponent
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AllianceSettingsAsset: public DataAsset
{
public:
	float                                                        MaximumAllianceDistance;                           // 0x28(0x4)
	float                                                        PollDelay;                                         // 0x2c(0x4)
	class                                                        OfferFlag;                                         // 0x30(0x8)
	class                                                        AcceptFlag;                                        // 0x38(0x8)
	class                                                        LeaveFlag;                                         // 0x40(0x8)
	Class AlliancePennantAsset*                                  AlliancePennantAsset;                              // 0x48(0x8)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class AlwaysRelevantLightweightActor: public Actor
{
public:
	Class Actor*                                                 OwningActor;                                       // 0x3c8(0x8)
};


// Size 0x30 (Full Size[0x310] - InheritedSize[0x2e0]
class NameplateComponent: public SceneComponent
{
public:
	float                                                        FadeTime;                                          // 0x2e0(0x4)
	char                                                         pad0x4_2SP04[0x4];                                 // 0x2e4(0x4)
	Class SkeletalMeshSocket*                                    NameplateSocket;                                   // 0x2e8(0x8)
	char                                                         pad0x20_M90JZ[0x20];                               // 0x2f0(0x20)
};


// Size 0xa0 (Full Size[0x3b0] - InheritedSize[0x310]
class PlayerNameplateComponent: public NameplateComponent
{
public:
	char                                                         pad0x8_X5XTH[0x8];                                 // 0x310(0x8)
	float                                                        VisibleFromWorldDistance;                          // 0x318(0x4)
	float                                                        VisibleUntilWorldDistanceCrew;                     // 0x31c(0x4)
	float                                                        VisibleUntilWorldDistanceNonCrew;                  // 0x320(0x4)
	float                                                        EmoteForcedRevealTime;                             // 0x324(0x4)
	char                                                         pad0x8_WMH0S[0x8];                                 // 0x328(0x8)
	Class AthenaPlayerCharacter*                                 PlayerCharacter;                                   // 0x330(0x8)
	char                                                         pad0x78_KZVO7[0x78];                               // 0x338(0x78)
};


// Size 0x20 (Full Size[0x3d0] - InheritedSize[0x3b0]
class AlwaysRelevantPlayerNameplateComponent: public PlayerNameplateComponent
{
public:
	Class AthenaPlayerState*                                     PlayerStatePtr;                                    // 0x3a8(0x8)
	char                                                         pad0x20_Z8D94[0x20];                               // 0x3b0(0x20)
};


// Size 0x70 (Full Size[0x440] - InheritedSize[0x3d0]
class AlwaysRelevantLightweightPlayerNameplate: public AlwaysRelevantLightweightActor
{
public:
	char                                                         pad0x20_36JTO[0x20];                               // 0x3d0(0x20)
	Class AlwaysRelevantPlayerNameplateComponent*                PlayerNameplateComponent;                          // 0x3f0(0x8)
	Struct Guid                                                  OwnedActorsCrewId;                                 // 0x3f8(0x10)
	char                                                         pad0x28_Y9I6K[0x28];                               // 0x408(0x28)
	Class AthenaPlayerState*                                     PlayerStatePtr;                                    // 0x430(0x8)
	bool                                                         IsOwnerInert;                                      // 0x438(0x1)
	char                                                         pad0x7_LFPRB[0x7];                                 // 0x439(0x7)
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class Anchor: public Actor
{
public:
	char                                                         pad0x8_G6SH3[0x8];                                 // 0x3c8(0x8)
	Struct Vector                                                PositionForAnchorDynamicsRelativeToAnchorActor;    // 0x3d0(0xc)
	char                                                         pad0x4_HWCQJ[0x4];                                 // 0x3dc(0x4)
	Class BaseAnchorDynamicsDesc*                                AnchorDynamicsDesc;                                // 0x3e0(0x8)
	char                                                         pad0x18_PUDOB[0x18];                               // 0x3e8(0x18)
};


// Size 0x28 (Full Size[0x170] - InheritedSize[0x148]
class AncientAIFormComponent: public AthenaAIFormComponent
{
public:
};


// Size 0x10 (Full Size[0xa0] - InheritedSize[0x90]
class AncientAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	class                                                        AwardableComponentType;                            // 0x90(0x8)
	float                                                        TimeBeforeDespawn;                                 // 0x98(0x4)
	char                                                         pad0x4_BVK87[0x4];                                 // 0x9c(0x4)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class NPCHeldObjectData: public DataAsset
{
public:
	struct FName                                                 LeftHandWieldSocket;                               // 0x28(0x8)
	struct FName                                                 RightHandWieldSocket;                              // 0x30(0x8)
	struct FName                                                 DetachSocketA;                                     // 0x38(0x8)
	struct FName                                                 DetachSocketB;                                     // 0x40(0x8)
	class                                                        Object1;                                           // 0x48(0x8)
	class                                                        Object2;                                           // 0x50(0x8)
	class                                                        Object3;                                           // 0x58(0x8)
	class                                                        Object4;                                           // 0x60(0x8)
	class                                                        Object5;                                           // 0x68(0x8)
	class                                                        Object6;                                           // 0x70(0x8)
	class                                                        Object7;                                           // 0x78(0x8)
	class                                                        Object8;                                           // 0x80(0x8)
	class                                                        Object9;                                           // 0x88(0x8)
	class                                                        Object10;                                          // 0x90(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimatedCosmeticItemInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x4b0] - InheritedSize[0x440]
class AnimatedCosmeticItemAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x8_7Y09B[0x8];                                 // 0x440(0x8)
	TArray<struct OneShotSequences>                              OneShotSequences;                                  // 0x448(0x10)
	TArray<struct ContinuousSequences>                           ContinuousSequences;                               // 0x458(0x10)
	Class AnimInstance*                                          ParentCharacterAnimationInstance;                  // 0x468(0x8)
	Class AnimMontage*                                           CurrentPlayingMontage;                             // 0x470(0x8)
	Class AnimSequenceBase*                                      OneShot;                                           // 0x478(0x8)
	Class AnimSequenceBase*                                      ContinuousIn;                                      // 0x480(0x8)
	Class AnimSequenceBase*                                      ContinuousLoopA;                                   // 0x488(0x8)
	Class AnimSequenceBase*                                      ContinuousLoopB;                                   // 0x490(0x8)
	Class AnimSequenceBase*                                      ContinuousOut;                                     // 0x498(0x8)
	char                                                         pad0x10_WVO96[0x10];                               // 0x4a0(0x10)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class AnimatedStepsComponent: public ActorComponent
{
public:
	Class PoseableSkeletalMeshComponent*                         Mesh;                                              // 0xc8(0x8)
	TArray<class BoxComponent*>                                  Boxes;                                             // 0xd0(0x10)
	TArray<struct BoxOrigins>                                    BoxOrigins;                                        // 0xe0(0x10)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class AnimationDataOverriderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_MFDM3[0x8];                                 // 0xc8(0x8)
	Struct StringAssetReference                                  AnimationDataStoreAssetReference;                  // 0xd0(0x10)
	Class AnimationDataStoreAsset*                               AnimationDataStoreAsset;                           // 0xe0(0x8)
	char                                                         pad0x18_EJGZW[0x18];                               // 0xe8(0x18)
};


// Size 0x50 (Full Size[0x88] - InheritedSize[0x38]
class AnimNotify_AthenaPlayParticleEffect: public AnimNotify
{
public:
	Class Object*                                                PSTemplate;                                        // 0x38(0x8)
	struct FName                                                 SocketName;                                        // 0x40(0x8)
	Struct Vector                                                LocationOffset;                                    // 0x48(0xc)
	Struct Rotator                                               RotationOffset;                                    // 0x54(0xc)
	Struct Vector                                                RelativeScale;                                     // 0x60(0xc)
	Struct LinearColor                                           ColorTint;                                         // 0x6c(0x10)
	float                                                        CustomParameter;                                   // 0x7c(0x4)
	bool                                                         Attached;                                          // 0x80(0x1)
	bool                                                         KeepWorldScale;                                    // 0x80(0x1)
	bool                                                         OwnerOnlySee;                                      // 0x80(0x1)
	bool                                                         OwnerNoSee;                                        // 0x80(0x1)
	bool                                                         OwnedByWorld;                                      // 0x80(0x1)
	char                                                         pad0x3_84AKJ[0x3];                                 // 0x81(0x3)
	byte                                                         UnderwaterMode;                                    // 0x84(0x1)
	byte                                                         CustomLocalSpaceMode;                              // 0x85(0x1)
	char                                                         pad0x2_DLJBB[0x2];                                 // 0x86(0x2)
};


// Size 0x8 (Full Size[0x90] - InheritedSize[0x88]
class AnimNotify_AthenaPlayParticleEffectWithOwnerCustomisation: public AnimNotify_AthenaPlayParticleEffect
{
public:
	class                                                        VfxCustomisationType;                              // 0x88(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class AnimNotify_CutSceneSubtitle: public AnimNotify
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotify_DockableCutscene: public AnimNotify
{
public:
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class AnimNotify_RumbleController: public AnimNotify
{
public:
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x38(0x8)
	struct FName                                                 ForceFeedbackTag;                                  // 0x40(0x8)
	Class ForceFeedbackCondition*                                ForceFeedbackCondition;                            // 0x48(0x8)
};


// Size 0x10 (Full Size[0x320] - InheritedSize[0x310]
class AnimNotifyAdditionalEventsWwiseEmitterComponent: public AnimNotifyWwiseEmitterComponent
{
public:
	TArray<struct AnimNotifyObservers>                           AnimNotifyObservers;                               // 0x310(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotifyQuestBookForcePageRedraw: public AnimNotify
{
public:
};


// Size 0x28 (Full Size[0x80] - InheritedSize[0x58]
class AnimNotifyState_AthenaTimedParticleEffect: public AnimNotifyState_TimedParticleEffect
{
public:
	Struct Vector                                                RelativeScale;                                     // 0x58(0xc)
	Struct LinearColor                                           ColorTint;                                         // 0x64(0x10)
	float                                                        CustomParameter;                                   // 0x74(0x4)
	bool                                                         Attached;                                          // 0x78(0x1)
	bool                                                         KeepWorldScale;                                    // 0x78(0x1)
	char                                                         pad0x3_03PTY[0x3];                                 // 0x79(0x3)
	byte                                                         UnderwaterMode;                                    // 0x7c(0x1)
	byte                                                         CustomLocalSpaceMode;                              // 0x7d(0x1)
	char                                                         pad0x2_HP4P5[0x2];                                 // 0x7e(0x2)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AnimNotifyStateQuestBookRenderingModeRequest: public AnimNotifyState
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class AnimNotifyStateQuestBookLeftSpreadCurrentRightSpreadNext: public AnimNotifyStateQuestBookRenderingModeRequest
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class AnimNotifyStateQuestBookLeftSpreadPreviousRightSpreadCurrent: public AnimNotifyStateQuestBookRenderingModeRequest
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class AnimNotifyTriggerPlaceableReaction: public AnimNotify
{
public:
	Struct StringAssetReference                                  PlaceableReactionToTrigger;                        // 0x38(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ApplicationSettings: public Object
{
public:
	int                                                          GameLanguage;                                      // 0x28(0x4)
	char                                                         pad0x4_BZKXD[0x4];                                 // 0x2c(0x4)
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class ArenaVendorShip: public Actor
{
public:
	Class SceneComponent*                                        ArenaVendorShipRootComponent;                      // 0x3c8(0x8)
	Class ContestMerchantSpawnerComponent*                       ContestMerchantSpawnerComponent;                   // 0x3d0(0x8)
	Class GenericWorldMapMarker*                                 VendorShipWorldMarkerComponent;                    // 0x3d8(0x8)
	Class SphereComponent*                                       VendorDeadZoneComponent;                           // 0x3e0(0x8)
	float                                                        VendorShipDeadZoneRadius;                          // 0x3e8(0x4)
	char                                                         pad0x4_RPQZO[0x4];                                 // 0x3ec(0x4)
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class ViewModelComponentBase: public ActorComponent
{
public:
};


// Size 0x48 (Full Size[0x170] - InheritedSize[0x128]
class PossessionsChestViewModel: public ViewModelComponentBase
{
public:
	Struct FText                                                 AllTabLabel;                                       // 0x128(0x38)
	Struct StringAssetReference                                  AllTabIcon;                                        // 0x160(0x10)
};


// Size 0x28 (Full Size[0x198] - InheritedSize[0x170]
class ArmoryChestViewModelComponent: public PossessionsChestViewModel
{
public:
	char                                                         pad0x10_IEZQ0[0x10];                               // 0x170(0x10)
	TArray<class Class*>                                         Categories;                                        // 0x180(0x10)
	bool                                                         IncludeAllCategory;                                // 0x190(0x1)
	char                                                         pad0x7_QFCCB[0x7];                                 // 0x191(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshCloudAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class AshCloudAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x18 (Full Size[0x90] - InheritedSize[0x78]
class AshCloudAIAbility: public AthenaAIAbility
{
public:
	Class Pawn*                                                  Owner;                                             // 0x78(0x8)
	Class AshCloudAIAbilityParams*                               SetupAbilityParams;                                // 0x80(0x8)
	Class AshenLordAshCloud*                                     AshCloudInstance;                                  // 0x88(0x8)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class AshCloudAIAbilityParams: public AthenaAIAbilityParams
{
public:
	class                                                        AshCloudClass;                                     // 0xc8(0x8)
};


// Size 0x68 (Full Size[0x1b0] - InheritedSize[0x148]
class AshenLordAIFormComponent: public AthenaAIFormComponent
{
public:
	Class WwiseEvent*                                            AshenLordVulnerabilityDamageAudioEvent;            // 0x148(0x8)
	struct FName                                                 AshenLordHeartBeatShaderParamName;                 // 0x150(0x8)
	class                                                        CameraShake;                                       // 0x178(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x180(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x184(0x4)
	Class MaterialInstanceDynamic*                               AshenLordDynamicMaterialInstance;                  // 0x188(0x8)
	float                                                        CachedNormalisedHealthScalar;                      // 0x190(0x4)
	bool                                                         IsInVulnerability;                                 // 0x194(0x1)
	char                                                         pad0x1b_YVAHU[0x1b];                               // 0x195(0x1b)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AssetListDataAsset: public DataAsset
{
public:
	TArray<struct AssetList>                                     AssetList;                                         // 0x28(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class AssignItemStep: public TaleQuestStep
{
public:
	Class AssignItemStepDesc*                                    StepDesc;                                          // 0x98(0x8)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class AssignItemStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableClass                                    TypeVar;                                           // 0x80(0x30)
	class                                                        TypeValue;                                         // 0xb0(0x8)
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class AssociateActorToCrewTaskStep: public TaleQuestStep
{
public:
	Class AssociateActorToCrewTaskStepDesc*                      Desc;                                              // 0x98(0x8)
	char                                                         pad0x30_K1003[0x30];                               // 0xa0(0x30)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class AssociateActorToCrewTaskStepDesc: public TaleQuestStepDesc
{
public:
	Class TaleQuestStepDesc*                                     TaskDesc;                                          // 0x80(0x8)
	Struct QuestVariableActor                                    ActorToAssociate;                                  // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutRepairerInterface: public Interface
{
public:
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class AsyncLoadoutRepairComponent: public ActorComponent
{
public:
};


// Size 0x130 (Full Size[0x230] - InheritedSize[0x100]
class AthenaAIInteractableComponent: public AIInteractableComponent
{
public:
	char                                                         pad0x8_1X2QV[0x8];                                 // 0x100(0x8)
	bool                                                         Moveable;                                          // 0x108(0x1)
	char                                                         pad0x3_Z6JBE[0x3];                                 // 0x109(0x3)
	Struct Vector                                                InteractableRelativeVectorToSpawnPos;              // 0x10c(0xc)
	Struct Vector                                                TriggerSphereCentreOffset;                         // 0x118(0xc)
	float                                                        TriggerSphereRadiusOffset;                         // 0x124(0x4)
	float                                                        TimeToCacheLastBestTargetResult;                   // 0x128(0x4)
	byte                                                         OwnerAITeam;                                       // 0x12c(0x1)
	char                                                         pad0x103_PGIJS[0x103];                             // 0x12d(0x103)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAITeamsServiceInterface: public Interface
{
public:
};


// Size 0x5b8 (Full Size[0x5e0] - InheritedSize[0x28]
class AthenaAITeamsService: public Object
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AthenaAnimationCustomSkeletonAnimationData: public DataAsset
{
public:
	Struct SkeletonCustomAnimationDataStructure                  SkeletonCustomAnimData;                            // 0x28(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterAnimationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationLocomotionComponentFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x2b20 (Full Size[0x3180] - InheritedSize[0x660]
class AthenaAnimationInstance: public CharacterAnimationInstance
{
public:
	char                                                         pad0x38_XH8RI[0x38];                               // 0x660(0x38)
	byte                                                         ControllableObjectType;                            // 0x698(0x1)
	char                                                         pad0x7_SWGOI[0x7];                                 // 0x699(0x7)
	TArray<struct AllLoadedItemData>                             AllLoadedItemData;                                 // 0x6a0(0x10)
	Struct AthenaAnimationHandHeldItemParams                     HandHeldItemParams;                                // 0x6b0(0x20)
	Struct AthenaAnimationIdleVariantChange                      IdleVariantParams;                                 // 0x6d0(0x10)
	Struct AthenaAnimationWheel                                  WheelAnimationParams;                              // 0x6e0(0x1f0)
	Struct AthenaAnimationCapstan                                CapstanAnimationParams;                            // 0x8d0(0x178)
	Struct AthenaAnimationFacialAnimData                         FacialParams;                                      // 0xa48(0x90)
	Struct AthenaAnimationFire                                   Fire;                                              // 0xad8(0x20)
	byte                                                         MeleeSpecialState;                                 // 0xaf8(0x1)
	char                                                         pad0x3_S63DB[0x3];                                 // 0xaf9(0x3)
	float                                                        DodgeDirection;                                    // 0xafc(0x4)
	Struct AthenaAnimationRowboatParams                          RowboatParams;                                     // 0xb00(0xc8)
	Struct AthenaAnimationRowing                                 Rowing;                                            // 0xbc8(0xe0)
	Struct AthenaAnimationWaterPumpAnimData                      WaterPumpAnimations;                               // 0xca8(0x28)
	Struct AthenaAnimationWaterPumpParams                        WaterPumpAnimationParams;                          // 0xcd0(0xc)
	Struct AthenaAnimationFishingParams                          FishingParams;                                     // 0xcdc(0x34)
	Struct AthenaAnimationFishing                                Fishing;                                           // 0xd10(0x3f0)
	Struct AthenaAnimationWaterSlideControlAnimData              WaterSlideControlAnimData;                         // 0x1100(0x20)
	Class AthenaCharacter*                                       AthenaCharacter;                                   // 0x1120(0x8)
	Struct AthenaAnimationJumping                                JumpingAnimationParams;                            // 0x1128(0xf0)
	float                                                        SpineBlendAlpha;                                   // 0x1218(0x4)
	float                                                        DockingTransitionAlpha;                            // 0x121c(0x4)
	Struct AthenaAnimationWaterPump                              AthenaAnimationWaterPump;                          // 0x1220(0x30)
	Struct AthenaAnimationLODSettings                            AnimationLODSettings;                              // 0x1250(0x3)
	char                                                         pad0x5_R3PEQ[0x5];                                 // 0x1253(0x5)
	Struct AthenaAnimationLocomotion                             Locomotion;                                        // 0x1258(0x68)
	Struct AthenaAnimationWieldedItemStateMachine                WieldedItemStateMachine;                           // 0x12c0(0x5f0)
	Struct AthenaAnimationLoadObjectByID                         ItemLoading;                                       // 0x18b0(0x930)
	class                                                        CurrentWieldedItemALK;                             // 0x21e0(0x8)
	Struct AthenaAnimationObjectActionContinuousStruct           ItemPrimaryContinousUseAnims;                      // 0x21e8(0xa8)
	Struct AthenaAnimationObjectActionContinuousStruct           ItemSecondaryContinousUseAnims;                    // 0x2290(0xa8)
	Struct AthenaAnimationObjectActionContinuousStruct           ItemPrimaryContinousUseAlternateAnims;             // 0x2338(0xa8)
	Struct AthenaAnimationObjectActionContinuousStruct           ItemSecondaryContinousUseAlternateAnims;           // 0x23e0(0xa8)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAnims;              // 0x2488(0x20)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAnims;            // 0x24a8(0x20)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAlternateAnims;     // 0x24c8(0x20)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAlternateAnims;   // 0x24e8(0x20)
	Struct AthenaAnimationObjectJumpingAnimations                ItemPrimaryContinousUseJumpingAnims;               // 0x2508(0x20)
	Struct AthenaAnimationObjectJumpingAnimations                ItemSecondaryContinousUseJumpingAnims;             // 0x2528(0x20)
	Struct AthenaAnimationObjectJumpingAnimations                ItemPrimaryContinousUseJumpingAlternateAnims;      // 0x2548(0x20)
	Struct AthenaAnimationObjectJumpingAnimations                ItemSecondaryContinousUseJumpingAlternateAnims;    // 0x2568(0x20)
	Struct AthenaAnimationActiveOneShotAnimationStruct           ActiveOneShotAnimations;                           // 0x2588(0x20)
	Struct AthenaAnimationActiveOneShotAnimationStruct           DuplicateActiveOneShotAnimations;                  // 0x25a8(0x20)
	Struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemPrimaryOneShotAnims;                           // 0x25c8(0x28)
	Struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemSecondaryOneShotAnims;                         // 0x25f0(0x28)
	Struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemPrimaryOneShotAlternateAnims;                  // 0x2618(0x28)
	Struct AthenaAnimationObjectActionOneShotPlayingStruct       ItemSecondaryOneShotAlternateAnims;                // 0x2640(0x28)
	Struct AthenaAnimationActiveItemComplexAnimData              CurrentComplexOneShotData;                         // 0x2668(0x38)
	Struct AthenaAnimationObjectComplexOneShotPlaySpeeds         CurrentMeleeAttackSequencePlaySpeeds;              // 0x26a0(0x14)
	char                                                         pad0x4_PAZQT[0x4];                                 // 0x26b4(0x4)
	Struct AthenaAnimationObjectMeleeBlocking                    ItemCombatBlockingAnims;                           // 0x26b8(0x60)
	class                                                        FishingRodAnimStoreID;                             // 0x2718(0x8)
	class                                                        QuestBookAnimStoreID;                              // 0x2720(0x8)
	class                                                        WoodenPlankAnimStoreID;                            // 0x2728(0x8)
	float                                                        UnequipPlayRate;                                   // 0x2730(0x4)
	char                                                         pad0x4_K8NAY[0x4];                                 // 0x2734(0x4)
	Struct AthenaAnimationLoadOnDemandItemsAnimgraphStructure    LoadOnDemandItemParams;                            // 0x2738(0x760)
	byte                                                         ControllableSocketGroup;                           // 0x2e98(0x1)
	byte                                                         ControllableSocketGroupCharacterSize;              // 0x2e99(0x1)
	byte                                                         LocomotionState;                                   // 0x2e9a(0x1)
	Struct AthenaAnimationDebugTrackingParams                    DebugTrackingParams;                               // 0x2e9b(0x4)
	char                                                         pad0x1_USRRA[0x1];                                 // 0x2e9f(0x1)
	Struct AthenaAnimationDeath                                  Death;                                             // 0x2ea0(0x100)
	Struct AthenaAnimationUndoRepair                             UndoRepair;                                        // 0x2fa0(0x70)
	Struct AthenaAnimationSitting                                Sitting;                                           // 0x3010(0x70)
	byte                                                         PropWieldLocation;                                 // 0x3080(0x1)
	char                                                         pad0x3_PJGX1[0x3];                                 // 0x3081(0x3)
	Struct Vector                                                PropOffsetLocation;                                // 0x3084(0xc)
	Struct Rotator                                               PropOffsetRotation;                                // 0x3090(0xc)
	Struct Vector                                                PropOffsetScale;                                   // 0x309c(0xc)
	bool                                                         FaunaAddedToCrate;                                 // 0x30a8(0x1)
	bool                                                         InDockingTransition;                               // 0x30a8(0x1)
	bool                                                         WieldedItemIsMeleeWeapon;                          // 0x30a8(0x1)
	bool                                                         InMeleeCombat;                                     // 0x30a8(0x1)
	bool                                                         IsBlockingLeft;                                    // 0x30a8(0x1)
	bool                                                         IsFishingWithWieldedRod;                           // 0x30a8(0x1)
	bool                                                         UsePropOffset;                                     // 0x30a8(0x1)
	bool                                                         IsOnLadder;                                        // 0x30a8(0x1)
	bool                                                         IsUsingAdditiveHandOverlayPose;                    // 0x30a9(0x1)
	bool                                                         IgnoreIdleBlendTransition;                         // 0x30a9(0x1)
	bool                                                         UseDuplicateOneShotState;                          // 0x30a9(0x1)
	char                                                         pad0xd6_DK4RU[0xd6];                               // 0x30aa(0xd6)
};


// Size 0xd0 (Full Size[0x3250] - InheritedSize[0x3180]
class FirstPersonAnimationInstance: public AthenaAnimationInstance
{
public:
	char                                                         pad0x8_H8TD4[0x8];                                 // 0x3180(0x8)
	float                                                        SpineRotationTime;                                 // 0x3188(0x4)
	Struct Vector                                                RangedWeaponTargetingOffset;                       // 0x318c(0xc)
	float                                                        RangedWeaponAlpha;                                 // 0x3198(0x4)
	Struct AthenaAnimationCamera                                 CameraParams;                                      // 0x319c(0x18)
	char                                                         pad0x4_OPWLS[0x4];                                 // 0x31b4(0x4)
	Struct AthenaAnimationFirstPersonAnimatic                    FirstPersonAnimatic;                               // 0x31b8(0x80)
	byte                                                         CameraAdditiveBlendPoseType;                       // 0x3238(0x1)
	char                                                         pad0x3_YDMG3[0x3];                                 // 0x3239(0x3)
	float                                                        RowboatCameraAlpha;                                // 0x323c(0x4)
	bool                                                         UseAdditiveHandOverlay;                            // 0x3240(0x1)
	bool                                                         CameraAttachmentTypeNotDefault;                    // 0x3240(0x1)
	bool                                                         BlendUpperBodyAndArmOverlay;                       // 0x3240(0x1)
	bool                                                         UseArmOverlayJumpContinuous;                       // 0x3240(0x1)
	bool                                                         IsSwimming;                                        // 0x3240(0x1)
	bool                                                         IsControllableObjectActive;                        // 0x3240(0x1)
	bool                                                         UseSwimmingEquip;                                  // 0x3240(0x1)
	char                                                         pad0x3_3VBOI[0x3];                                 // 0x3241(0x3)
	float                                                        EquipAnimationPlayRate;                            // 0x3244(0x4)
	bool                                                         ActivateIK;                                        // 0x3248(0x1)
	bool                                                         UseOneShotIntoAnimInContinuousUse;                 // 0x3248(0x1)
	char                                                         pad0x7_ZM0WJ[0x7];                                 // 0x3249(0x7)
};


// Size 0x1490 (Full Size[0x4610] - InheritedSize[0x3180]
class ThirdPersonAnimationInstance: public AthenaAnimationInstance
{
public:
	float                                                        ItemAnimPausedTimeRemaining;                       // 0x3180(0x4)
	bool                                                         IsItemAnimPaused;                                  // 0x3184(0x1)
	bool                                                         UseContinualLoopInOneShotState;                    // 0x3184(0x1)
	char                                                         pad0x3_VSJTU[0x3];                                 // 0x3185(0x3)
	Struct AthenaAnimationIKLimbStretch                          IKLimbStretchParams;                               // 0x3188(0xc)
	char                                                         pad0x4_A8GPI[0x4];                                 // 0x3194(0x4)
	Struct AthenaAnimationLadder                                 LadderAnimationParams;                             // 0x3198(0x330)
	Struct AthenaAnimationTalking                                Talking;                                           // 0x34c8(0x38)
	Struct AthenaAnimationPitchControlStates                     PitchTargetingControlStates;                       // 0x3500(0x168)
	Struct AthenaAnimationObjectTargetingOptions                 PitchTargetingParameters;                          // 0x3668(0x3c)
	Struct AthenaAnimationObjectTargetingOptions                 WantedPitchTargetingParameters;                    // 0x36a4(0x3c)
	Struct AthenaAnimationPitchAlpha                             PitchTargetingAlpha;                               // 0x36e0(0x14)
	Struct AthenaAnimationPitchShoulders                         PitchShoulderParams;                               // 0x36f4(0x1c)
	Struct AthenaAnimationMountedWeapon                          MountedWeaponAnimationParams;                      // 0x3710(0x128)
	Struct AthenaAnimationFootPlanting                           FootPlanting;                                      // 0x3838(0x48)
	byte                                                         StairAnimationState;                               // 0x3880(0x1)
	char                                                         pad0x7_7871Y[0x7];                                 // 0x3881(0x7)
	Struct AthenaAnimationPulleyControl                          PulleyControl;                                     // 0x3888(0x40)
	Struct AthenaAnimationPulleyControlAnimData                  PulleyControlAnimData;                             // 0x38c8(0x48)
	Struct AthenaAnimationKeyedInstrumentAnimData                KeyedInstrumentAnimData;                           // 0x3910(0x18)
	Struct AthenaAnimationAI                                     AIAnimationParams;                                 // 0x3928(0x358)
	Struct AthenaAnimationLocomotionAlternateAnimData            LocomotionDrunk;                                   // 0x3c80(0x50)
	Struct AthenaAnimationLocomotionAlternateAnimData            LocomotionLimp;                                    // 0x3cd0(0x50)
	Struct AthenaAnimationLocomotionAlternateAnimData            LocomotionPegLeg;                                  // 0x3d20(0x50)
	Struct AthenaAnimationLocomotionAlternateAnimData            LocomotionHotCoals;                                // 0x3d70(0x50)
	TArray<struct AISpawnStruct>                                 AISpawnStruct;                                     // 0x3dc0(0x10)
	TArray<struct AIFleeLoadingStruct>                           AIFleeLoadingStruct;                               // 0x3dd0(0x10)
	Struct AthenaAnimationSkeletonFleeInGraph                    AIFleePlayingStruct;                               // 0x3de0(0x38)
	Struct AthenaAnimationSkeletonScream                         SkeletonScream;                                    // 0x3e18(0x8)
	Class BlendSpace1D*                                          PitchAnimationToPlay;                              // 0x3e20(0x8)
	Struct AthenaAnimationShopInteractionParams                  ShopInteractionParams;                             // 0x3e28(0x30)
	Struct AthenaAnimationEmoteAnimgraphStructure                EmoteParams;                                       // 0x3e58(0x148)
	Struct AthenaAnimationSkeletonCurseAnimations                SkeletonCurseAnims;                                // 0x3fa0(0x28)
	Struct AthenaAnimationHarpoonLauncherAnimData                HarpoonLauncherAnims;                              // 0x3fc8(0x28)
	Struct AthenaAnimationAIKnockback                            AIKnockbackStruct;                                 // 0x3ff0(0x30)
	Struct AthenaAnimationHitReactsAnimData                      HitReactionsAnimationData;                         // 0x4020(0x40)
	Struct AthenaAnimationHitReactsSelectedAnimations            HitReactionsSelectedAnimationData;                 // 0x4060(0x48)
	Struct AthenaAnimationHitReactParams                         HitReactionsAnimationParams;                       // 0x40a8(0x2c)
	char                                                         pad0x4_R59Y9[0x4];                                 // 0x40d4(0x4)
	Struct AthenaAnimationSinkingTunnel                          Sinking;                                           // 0x40d8(0x68)
	float                                                        HitReactAdditiveBlendAmount;                       // 0x4140(0x4)
	float                                                        WieldedItemPoseBlendTime;                          // 0x4144(0x4)
	float                                                        UpperBodyPoseBlendTime;                            // 0x4148(0x4)
	float                                                        AimingAndPitchOverride;                            // 0x414c(0x4)
	float                                                        FacialOverlayBlendWeight;                          // 0x4150(0x4)
	Struct Rotator                                               PitchShoulderRotation;                             // 0x4154(0xc)
	Struct Rotator                                               PitchClavicleRotation;                             // 0x4160(0xc)
	float                                                        RightArmPitchAlpha;                                // 0x416c(0x4)
	float                                                        LeftArmPitchAlpha;                                 // 0x4170(0x4)
	float                                                        SpineRotation;                                     // 0x4174(0x4)
	Struct AthenaAnimationStunData                               StunData;                                          // 0x4178(0x8)
	Class BlendSpace1D*                                          HitReactItem;                                      // 0x4180(0x8)
	float                                                        WorldDelta;                                        // 0x4188(0x4)
	float                                                        CapstanAngularVelocityWanted;                      // 0x418c(0x4)
	Struct AthenaAnimationPlayingFacialAnimations                PlayingFacialAnimations;                           // 0x4190(0x40)
	Struct AthenaAnimationPlayingEquipAnimations                 PlayingEquipAnimations;                            // 0x41d0(0x18)
	float                                                        CharacterPitch;                                    // 0x41e8(0x4)
	float                                                        TargetingPitch;                                    // 0x41ec(0x4)
	Struct AthenaAnimationObjectLocomotionAnimations             ItemAlternateLocomotionAnims;                      // 0x41f0(0x40)
	Struct AthenaAnimationObjectIdleAnimations                   ItemAlternateIdleAnims;                            // 0x4230(0x18)
	Struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemPrimaryContinousUseAnimsPitchOverride;         // 0x4248(0x78)
	Struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemSecondaryContinousUseAnimsPitchOverride;       // 0x42c0(0x78)
	Struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemPrimaryContinousUseAlternateAnimsPitchOverride; // 0x4338(0x78)
	Struct AthenaAnimationObjectActionContinuousStructPitchOverride ItemSecondaryContinousUseAlternateAnimsPitchOverride; // 0x43b0(0x78)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAnimsPitchOverride; // 0x4428(0x20)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAnimsPitchOverride; // 0x4448(0x20)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemPrimaryContinousUseSwimmingAlternateAnimsPitchOverride; // 0x4468(0x20)
	Struct AthenaAnimationObjectActionContinuousSwimming         ItemSecondaryContinousUseSwimmingAlternateAnimsPitchOverride; // 0x4488(0x20)
	Struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemPrimaryContinousUseJumpingAnimsPitchOverride;  // 0x44a8(0x20)
	Struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemSecondaryContinousUseJumpingAnimsPitchOverride; // 0x44c8(0x20)
	Struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemPrimaryContinousUseJumpingAlternateAnimsPitchOverride; // 0x44e8(0x20)
	Struct AthenaAnimationObjectJumpingAnimationsPitchOverride   ItemSecondaryContinousUseJumpingAlternateAnimsPitchOverride; // 0x4508(0x20)
	Struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemPrimaryOneShotAnimsPitchOverride;              // 0x4528(0x28)
	Struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemSecondaryOneShotAnimsPitchOverride;            // 0x4550(0x28)
	Struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemPrimaryOneShotAlternateAnimsPitchOverride;     // 0x4578(0x28)
	Struct AthenaAnimationObjectActionOneShotPlayingStructPitchOverride ItemSecondaryOneShotAlternateAnimsPitchOverride;   // 0x45a0(0x28)
	bool                                                         ZeroLocomotionForced;                              // 0x45c8(0x1)
	bool                                                         ConcealedInLoadable;                               // 0x45c8(0x1)
	bool                                                         AIUseAlternateLocomotion;                          // 0x45c8(0x1)
	bool                                                         EmoteIKIsOff;                                      // 0x45c8(0x1)
	bool                                                         InBlockingInto;                                    // 0x45c8(0x1)
	bool                                                         IsAI;                                              // 0x45c8(0x1)
	bool                                                         IsLocallyControlled;                               // 0x45c8(0x1)
	bool                                                         IsHit;                                             // 0x45c8(0x1)
	bool                                                         InRecover;                                         // 0x45c9(0x1)
	bool                                                         InWarmUp;                                          // 0x45c9(0x1)
	bool                                                         PlayingFullBodyAnimation;                          // 0x45c9(0x1)
	bool                                                         PlayingUpperBodyAnimation;                         // 0x45c9(0x1)
	bool                                                         PlayingRightArmOverlayAnimation;                   // 0x45c9(0x1)
	bool                                                         PlayingSpineOverlayAnimation;                      // 0x45c9(0x1)
	bool                                                         PlayingLeftArmOverlayAnimation;                    // 0x45c9(0x1)
	bool                                                         IsUsingFullBodyOverlayPose;                        // 0x45c9(0x1)
	bool                                                         IsUsingLocalIKPose;                                // 0x45ca(0x1)
	bool                                                         IsRightShoulderActive;                             // 0x45ca(0x1)
	bool                                                         IsLeftShoulderActive;                              // 0x45ca(0x1)
	bool                                                         ControllableObjectTypeHasValidTarget;              // 0x45ca(0x1)
	bool                                                         UseHandsAndFootplantingIK;                         // 0x45ca(0x1)
	bool                                                         IKLODActive;                                       // 0x45ca(0x1)
	bool                                                         LODSolverActive;                                   // 0x45ca(0x1)
	bool                                                         ObjectPitchTargetingActive;                        // 0x45ca(0x1)
	bool                                                         ObjectOrIKEmoteActive;                             // 0x45cb(0x1)
	bool                                                         ObjectOrWheelCapstanAndNotDocking;                 // 0x45cb(0x1)
	bool                                                         HitReact1Active;                                   // 0x45cb(0x1)
	bool                                                         HitReact2Active;                                   // 0x45cb(0x1)
	bool                                                         AthenaCharacterIsValid;                            // 0x45cb(0x1)
	bool                                                         UsePrimaryActionPitchOverride;                     // 0x45cb(0x1)
	bool                                                         UseSecondaryActionPitchOverride;                   // 0x45cb(0x1)
	char                                                         pad0x44_XB3SE[0x44];                               // 0x45cc(0x44)
};


// Size 0x170 (Full Size[0x4780] - InheritedSize[0x4610]
class SkeletonAnimationInstance: public ThirdPersonAnimationInstance
{
public:
	char                                                         pad0x10_FNSWA[0x10];                               // 0x4610(0x10)
	Struct AthenaAnimationSkeletonAIFastPathData                 SkeletonAIFastPathData;                            // 0x4620(0x4)
	char                                                         pad0x4_NEKBH[0x4];                                 // 0x4624(0x4)
	Class NPCHeldObjectData*                                     HeldObjectList;                                    // 0x4628(0x8)
	Class Actor*                                                 LeftHandObject;                                    // 0x4630(0x8)
	Class Actor*                                                 RightHandObject;                                   // 0x4638(0x8)
	float                                                        ObjectOverlayBlendOutTime;                         // 0x4640(0x4)
	char                                                         pad0x4_XPLJS[0x4];                                 // 0x4644(0x4)
	Class AthenaAnimationCustomSkeletonAnimationData*            CustomAnimationData;                               // 0x4648(0x8)
	Struct AthenaAnimationCustomSkeletonAnimationBlueprintData   CustomAnimationBlueprintData;                      // 0x4650(0x58)
	byte                                                         PreviousCustomAnimationState;                      // 0x46a8(0x1)
	char                                                         pad0x7_530C2[0x7];                                 // 0x46a9(0x7)
	Class AnimMontage*                                           CustomAnimationCurrentMontage;                     // 0x46b0(0x8)
	char                                                         pad0xc8_KWT0C[0xc8];                               // 0x46b8(0xc8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationInstanceTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationMountedWeaponBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationWieldedItemAnimationOverlayFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationWieldedItemFunctions: public Object
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AthenaAssetSettings: public Object
{
public:
	TArray<struct DelayLoadedAssets>                             DelayLoadedAssets;                                 // 0x28(0x10)
	TArray<struct SteamOnlyDelayLoadedAssets>                    SteamOnlyDelayLoadedAssets;                        // 0x38(0x10)
	TArray<Str PhysicsAuditBlueprintExceptions>                  PhysicsAuditBlueprintExceptions;                   // 0x48(0x10)
	TArray<struct FName>                                         PhysicsAuditExemptedCollisionProfiles;             // 0x58(0x10)
};


// Size 0x80 (Full Size[0x8d0] - InheritedSize[0x850]
class AthenaCameraComponent: public CameraComponent
{
public:
	float                                                        OffsetBlendSpeed;                                  // 0x850(0x4)
	float                                                        AboveWaterOffset;                                  // 0x854(0x4)
	float                                                        UnderWaterOffset;                                  // 0x858(0x4)
	float                                                        SubmersionDistanceBeforeSurfacing;                 // 0x85c(0x4)
	float                                                        SubmersionDistanceBeforeUnderwater;                // 0x860(0x4)
	float                                                        SubmersionDistanceBeforeUnderwaterOnShip;          // 0x864(0x4)
	bool                                                         IsInsideShipHull;                                  // 0x888(0x1)
	char                                                         pad0x3_IUMUQ[0x3];                                 // 0x889(0x3)
	float                                                        CurrentCameraOffset;                               // 0x88c(0x4)
	char                                                         pad0x40_46BWG[0x40];                               // 0x890(0x40)
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class CustomAnimationHandlerComponent: public ActorComponent
{
public:
	char                                                         pad0x10_YTB76[0x10];                               // 0xc8(0x10)
	TArray<struct CurrentCustomAnimationDataAssetReferences>     CurrentCustomAnimationDataAssetReferences;         // 0xd8(0x10)
	Struct RequestedLoopAnims                                    RequestedLoopingAnim;                              // 0xe8(0x10)
	Class AthenaAnimationCustomSkeletonAnimationData*            MergedCustomAnimationData;                         // 0xf8(0x8)
	char                                                         pad0x28_EHCO4[0x28];                               // 0x100(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitDetectionVisualisationInterface: public Interface
{
public:
};


// Size 0x780 (Full Size[0x1380] - InheritedSize[0xc00]
class AthenaAICharacter: public AthenaCharacter
{
public:
	char                                                         pad0xa8_V94M4[0xa8];                               // 0xc00(0xa8)
	class                                                        DefaultAmmoItemDescType;                           // 0xca8(0x8)
	class                                                        DefaultInteractableAmmoItemDescType;               // 0xcb0(0x8)
	Class CurveFloat*                                            DistanceInMToCannonShotHitChanceCurve;             // 0xcb8(0x8)
	bool                                                         AimNoiseEnabled;                                   // 0xcc0(0x1)
	char                                                         pad0x3_S2MVC[0x3];                                 // 0xcc1(0x3)
	float                                                        AmplitudeChangeSpeed;                              // 0xcc4(0x4)
	float                                                        AmplitudeOffset;                                   // 0xcc8(0x4)
	float                                                        Frequency;                                         // 0xccc(0x4)
	float                                                        InteractableMissFallShortMinProportion;            // 0xcd0(0x4)
	float                                                        InteractableMissFallShortMaxProportion;            // 0xcd4(0x4)
	byte                                                         TrackedActorType;                                  // 0xcd8(0x1)
	char                                                         pad0x7_9JQW0[0x7];                                 // 0xcd9(0x7)
	Class FaceTargetComponent*                                   FaceTargetComponent;                               // 0xce0(0x8)
	Class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0xce8(0x8)
	Class AthenaAIFormComponent*                                 FormComponent;                                     // 0xcf0(0x8)
	Class AICharacterAudioComponent*                             AICharacterAudioComponent;                         // 0xcf8(0x8)
	Class StatusEffectManagerComponent*                          StatusEffectManagerComponent;                      // 0xd00(0x8)
	Class StatusEffectPersistenceComponent*                      StatusEffectPersistenceComponent;                  // 0xd08(0x8)
	Class PlayerCurseComponent*                                  PlayerCurseComponent;                              // 0xd10(0x8)
	Class VulnerabilityDuringAIStrategyComponent*                VulnerabilityDuringAIStrategyComponent;            // 0xd18(0x8)
	Class CapsuleComponent*                                      ProjectileTraceHitVolume;                          // 0xd20(0x8)
	Class AnimationDataOverriderComponent*                       AnimationDataOverriderComponent;                   // 0xd28(0x8)
	Class CustomAnimationHandlerComponent*                       CustomAnimationHandlerComponent;                   // 0xd30(0x8)
	Class AIProjectileWeaponFiringIntentionComponent*            FiringIntentionComponent;                          // 0xd38(0x8)
	Class Object*                                                KilledVfxTemplate;                                 // 0xd40(0x8)
	Class Object*                                                PartSpecificKilledVfxTemplate;                     // 0xd48(0x8)
	Struct ItemLoadout                                           AISpawnLoadout;                                    // 0xd50(0x20)
	bool                                                         KillOnFallingIntoWater;                            // 0xd70(0x1)
	char                                                         pad0x7_7FG23[0x7];                                 // 0xd71(0x7)
	class                                                        MeleeAttackStrategyId;                             // 0xd78(0x8)
	class                                                        GunpowderKegAnimationStoreId;                      // 0xd80(0x8)
	Struct PlayerStat                                            OnFireStat;                                        // 0xd88(0x4)
	char                                                         pad0x4c_SHWOR[0x4c];                               // 0xd8c(0x4c)
	Class SkeletalMesh*                                          AssignedMesh;                                      // 0xdd8(0x8)
	Class ColorTexture*                                          TeamColorTexture;                                  // 0xde0(0x8)
	Struct GenericTeamId                                         TeamID;                                            // 0xde8(0x1)
	char                                                         pad0x7_JXH59[0x7];                                 // 0xde9(0x7)
	Class Actor*                                                 CurrentShip;                                       // 0xdf0(0x8)
	float                                                        MeshScale;                                         // 0xdf8(0x4)
	bool                                                         DamageResponsesDisabled;                           // 0xdfc(0x1)
	bool                                                         TurnActive;                                        // 0xdfd(0x1)
	char                                                         pad0x2_F7LEQ[0x2];                                 // 0xdfe(0x2)
	class                                                        CurrentAIStrategy;                                 // 0xe00(0x8)
	class                                                        CurrentAnimationState;                             // 0xe08(0x8)
	class                                                        AlternateLocomotionItemType;                       // 0xe10(0x8)
	char                                                         pad0x3b0_LMC31[0x3b0];                             // 0xe18(0x3b0)
	Class AthenaAIAmmoDataAsset*                                 Ammo;                                              // 0x11c8(0x8)
	Struct AIEncounterSpecification                              PawnEncounterSpec;                                 // 0x11d0(0xd0)
	char                                                         pad0xe0_E029H[0xe0];                               // 0x12a0(0xe0)
};


// Size 0xd0 (Full Size[0x1450] - InheritedSize[0x1380]
class OceanCrawlerAICharacter: public AthenaAICharacter
{
public:
	char                                                         pad0x68_Y5OSC[0x68];                               // 0x1380(0x68)
	Class HealthGemComponent*                                    HealthGemComponent;                                // 0x13e8(0x8)
	Class BuffReceiverComponent*                                 BuffReceiver;                                      // 0x13f0(0x8)
	byte                                                         OceanCrawlerType;                                  // 0x13f8(0x1)
	char                                                         pad0x7_OEU8D[0x7];                                 // 0x13f9(0x7)
	Class CustomAnimationMontageComponent*                       MontageComponent;                                  // 0x1400(0x8)
	Class AnimationServerData*                                   OceanCrawlerAnimationServerData;                   // 0x1408(0x8)
	float                                                        StaticCollisionRampAngleLimit;                     // 0x1410(0x4)
	bool                                                         ShouldPlayersInterruptBullRush;                    // 0x1414(0x1)
	bool                                                         SporeBreathActive;                                 // 0x1415(0x1)
	char                                                         pad0x3a_FUKD9[0x3a];                               // 0x1416(0x3a)
};


// Size 0x160 (Full Size[0x2080] - InheritedSize[0x1f20]
class AthenaGhostPlayerCharacter: public AthenaPlayerCharacter
{
public:
	char                                                         pad0xb0_A82EO[0xb0];                               // 0x1f20(0xb0)
	Class GhostShipTickManager*                                  GhostShipTickManager;                              // 0x1fd0(0x8)
	char                                                         pad0xa8_20GBY[0xa8];                               // 0x1fd8(0xa8)
};


// Size 0x0 (Full Size[0x2080] - InheritedSize[0x2080]
class AthenaGhostPlayerCharacterMock: public AthenaGhostPlayerCharacter
{
public:
};


// Size 0x2e8 (Full Size[0x3b0] - InheritedSize[0xc8]
class VoyageParticipantComponent: public ActorComponent
{
public:
	char                                                         pad0xa8_DI50K[0xa8];                               // 0xc8(0xa8)
	Class Actor*                                                 OwningPlayer;                                      // 0x170(0x8)
	Struct VoyageParticipantViewContainer                        ViewContainer;                                     // 0x178(0xd8)
	Struct VoyageParticipantViewContainer                        PreviousViewContainer;                             // 0x250(0xd8)
	char                                                         pad0x88_5UTFQ[0x88];                               // 0x328(0x88)
};


// Size 0x30 (Full Size[0x1f50] - InheritedSize[0x1f20]
class AthenaPlayerCharacterMock: public AthenaPlayerCharacter
{
public:
	Class AICreatureMovementModifierParamsDataAsset*             PetMovementParamsDataAsset;                        // 0x1f20(0x8)
	bool                                                         AllowedToSwim;                                     // 0x1f28(0x1)
	char                                                         pad0x27_G0QHQ[0x27];                               // 0x1f29(0x27)
};


// Size 0x170 (Full Size[0x20c0] - InheritedSize[0x1f50]
class AthenaPlayerCharacterUnitTestMock: public AthenaPlayerCharacterMock
{
public:
	char                                                         pad0x150_OFFZY[0x150];                             // 0x1f50(0x150)
	class                                                        ExpectedActionStateId;                             // 0x20a0(0x8)
	char                                                         pad0x18_MZVXV[0x18];                               // 0x20a8(0x18)
};


// Size 0x50 (Full Size[0x1fa0] - InheritedSize[0x1f50]
class AthenaPlayerCharacterMockWithAnimSeq: public AthenaPlayerCharacterMock
{
public:
};


// Size 0x120 (Full Size[0x148] - InheritedSize[0x28]
class AthenaCharacterMovementUnderwater: public DataAsset
{
public:
	bool                                                         bSphere;                                           // 0x28(0x1)
	char                                                         pad0x3_X2SOL[0x3];                                 // 0x29(0x3)
	float                                                        Radius;                                            // 0x2c(0x4)
	float                                                        HalfHeight;                                        // 0x30(0x4)
	float                                                        PenResolveInflation;                               // 0x34(0x4)
	float                                                        PullBackDistance;                                  // 0x38(0x4)
	float                                                        FanOutAngle;                                       // 0x3c(0x4)
	float                                                        MaxFanOutScalar;                                   // 0x40(0x4)
	float                                                        IdleBobSpeed;                                      // 0x48(0x4)
	float                                                        IdleBobDuration;                                   // 0x4c(0x4)
	struct FName                                                 CollisionProfileName;                              // 0x50(0x8)
	Class CurveFloat*                                            VelocityToAngle;                                   // 0x58(0x8)
	bool                                                         bDrawDebugCapsule;                                 // 0x64(0x1)
	bool                                                         bDebugOldMovement;                                 // 0x65(0x1)
	char                                                         pad0xe2_XFC6R[0xe2];                               // 0x66(0xe2)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocalDisturbanceFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x2d0 (Full Size[0x860] - InheritedSize[0x590]
class AthenaCharacterMovementComponent: public CharacterMovementComponent
{
public:
	char                                                         pad0x8_JMMJ1[0x8];                                 // 0x590(0x8)
	Struct AthenaCharacterSwimParams                             SwimParams;                                        // 0x598(0x9c)
	float                                                        SprintSpdAmp;                                      // 0x634(0x4)
	float                                                        SprintAccelAmp;                                    // 0x638(0x4)
	float                                                        LookAtYawRate;                                     // 0x63c(0x4)
	float                                                        LookAtPitchRate;                                   // 0x640(0x4)
	char                                                         pad0x4_XH8GB[0x4];                                 // 0x644(0x4)
	float                                                        MaxSpeedRatioWhenWalkingInNonSwimWater;            // 0x648(0x4)
	float                                                        MaxAccelerationRatioWhenWalkingInNonSwimWater;     // 0x64c(0x4)
	bool                                                         bCharacterCollisionSweepsEnabled;                  // 0x650(0x1)
	char                                                         pad0x3_U5UOM[0x3];                                 // 0x651(0x3)
	float                                                        CharacterCollisionRadius;                          // 0x654(0x4)
	Struct CollisionProfileName                                  CharacterCollisionProfile;                         // 0x658(0x8)
	Struct CollisionProfileName                                  CollisionPanicFallbackProfileName;                 // 0x660(0x8)
	float                                                        CharacterCollisionWalkingFriction;                 // 0x668(0x4)
	float                                                        CharacterCollisionSwimmingFriction;                // 0x66c(0x4)
	float                                                        CharacterCollisionUnderwaterOffset;                // 0x670(0x4)
	char                                                         pad0x4_8RPT7[0x4];                                 // 0x674(0x4)
	Class AthenaCharacterMovementUnderwater*                     UnderwaterMovement;                                // 0x678(0x8)
	bool                                                         bCreateDisturbance;                                // 0x680(0x1)
	char                                                         pad0x3_NFCNO[0x3];                                 // 0x681(0x3)
	float                                                        DisturbanceSize;                                   // 0x684(0x4)
	float                                                        DisturbanceVelocityScale;                          // 0x688(0x4)
	bool                                                         UseAsRVOObstacleOnly;                              // 0x68c(0x1)
	char                                                         pad0x63_VUQCA[0x63];                               // 0x68d(0x63)
	float                                                        FanPushOutAngle;                                   // 0x6f0(0x4)
	int                                                          FanPushOutNumSteps;                                // 0x6f4(0x4)
	float                                                        MaxFanPushOutScalar;                               // 0x6f8(0x4)
	char                                                         pad0x4_3KUAC[0x4];                                 // 0x6fc(0x4)
	Class CurveFloat*                                            UnderwaterVelocityToAnglePitchProjectileHitVolume; // 0x700(0x8)
	Class CurveFloat*                                            UnderwaterVelocityToAngleRollProjectileHitVolume;  // 0x708(0x8)
	Class CurveFloat*                                            UnderwaterVelocityToZOffsetProjectileHitVolume;    // 0x710(0x8)
	Class CurveFloat*                                            OnLandVelocityToAnglePitchProjectileHitVolume;     // 0x718(0x8)
	Class CurveFloat*                                            OnLandVelocityToXOffsetProjectileHitVolume;        // 0x720(0x8)
	Class CurveFloat*                                            OnLandVelocityToYOffsetProjectileHitVolume;        // 0x728(0x8)
	Class CurveFloat*                                            OnLandVelocityToZOffsetProjectileHitVolume;        // 0x730(0x8)
	Class CurveFloat*                                            FallingVelocityToAnglePitchProjectileHitVolume;    // 0x738(0x8)
	Class CurveFloat*                                            FallingVelocityToXOffsetProjectileHitVolume;       // 0x740(0x8)
	Class CurveFloat*                                            FallingVelocityToZOffsetProjectileHitVolume;       // 0x748(0x8)
	char                                                         pad0xd0_38WMY[0xd0];                               // 0x750(0xd0)
	struct FName                                                 NonUnderwaterCollisionProfileName;                 // 0x820(0x8)
	struct FName                                                 UnderwaterCollisionProfileName;                    // 0x828(0x8)
	char                                                         pad0x30_L74S0[0x30];                               // 0x830(0x30)
};


// Size 0x150 (Full Size[0x9b0] - InheritedSize[0x860]
class AthenaPlayerCharacterMovementComponent: public AthenaCharacterMovementComponent
{
public:
	Class CurveFloat*                                            LandingSpeedToFallDamageCurve;                     // 0x860(0x8)
	float                                                        MinFallSpeedToPossiblyCauseDamage;                 // 0x868(0x4)
	float                                                        MinTimeBetweenDamagingImpactsOnUnwalkableSurface;  // 0x86c(0x4)
	float                                                        MinFallDamageToBreakLeg;                           // 0x870(0x4)
	float                                                        FiredFromActorFallDamageScalar;                    // 0x874(0x4)
	float                                                        TimeUntilRecoverFallDamageAudioState;              // 0x878(0x4)
	char                                                         pad0x4_VIC0W[0x4];                                 // 0x87c(0x4)
	Struct Status                                                FallDamageLimpingStatus;                           // 0x880(0x18)
	float                                                        SwimmingStateFilterTime;                           // 0x898(0x4)
	char                                                         pad0x114_F3QEH[0x114];                             // 0x89c(0x114)
};


// Size 0x0 (Full Size[0x9b0] - InheritedSize[0x9b0]
class MockAthenaPlayerCharacterMovementComponent: public AthenaPlayerCharacterMovementComponent
{
public:
};


// Size 0x0 (Full Size[0x1f50] - InheritedSize[0x1f50]
class MockAthenaPlayerCharacterWithAthenaPlayerCharacterMovementComponent: public AthenaPlayerCharacterMock
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StreamingLocationInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class StreamingLocationComponent: public ActorComponent
{
public:
	char                                                         pad0x8_WG9S5[0x8];                                 // 0xc8(0x8)
	Struct Vector                                                StreamingLocationOverride;                         // 0xd0(0xc)
	bool                                                         StreamingLocationActive;                           // 0xdc(0x1)
	char                                                         pad0x3_EKGWJ[0x3];                                 // 0xdd(0x3)
};


// Size 0x70 (Full Size[0x1f90] - InheritedSize[0x1f20]
class AthenaTavernPlayerCharacter: public AthenaPlayerCharacter
{
public:
	Class AICreatureMovementModifierParamsDataAsset*             ArenaTavernPetMovementData;                        // 0x1f20(0x8)
	char                                                         pad0x30_G5LWV[0x30];                               // 0x1f28(0x30)
	Class AthenaPlayerController*                                PlayerController;                                  // 0x1f58(0x8)
	char                                                         pad0x20_HIVQW[0x20];                               // 0x1f60(0x20)
	bool                                                         VoteForRivalsHasPassed;                            // 0x1f80(0x1)
	char                                                         pad0xf_2Z94L[0xf];                                 // 0x1f81(0xf)
};


// Size 0x0 (Full Size[0x1f90] - InheritedSize[0x1f90]
class AthenaTavernPlayerCharacterMock: public AthenaTavernPlayerCharacter
{
public:
};


// Size 0x68 (Full Size[0x300] - InheritedSize[0x298]
class AthenaCharacterBaseLocomotionInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	char                                                         pad0x60_LSO72[0x60];                               // 0x298(0x60)
	class                                                        ThrowablesItemCategory;                            // 0x2f8(0x8)
};


// Size 0x0 (Full Size[0x300] - InheritedSize[0x300]
class DebugFlyingInputComponent: public AthenaCharacterBaseLocomotionInputComponent
{
public:
};


// Size 0x0 (Full Size[0x300] - InheritedSize[0x300]
class LocomotionInputComponent: public AthenaCharacterBaseLocomotionInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCharacterDockingFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class AthenaCharacterDodgeComponent: public ActorComponent
{
public:
	Struct AthenaCharacterDodgeParams                            Params;                                            // 0xc8(0x10)
	float                                                        ConsecutiveDodgeCountResetTimer;                   // 0xd8(0x4)
	char                                                         pad0x4_CQ8ZY[0x4];                                 // 0xdc(0x4)
	Class CurveFloat*                                            BunnyHoppingScalarCurve;                           // 0xe0(0x8)
	Class AthenaCharacter*                                       Character;                                         // 0xe8(0x8)
	char                                                         pad0x18_NQIFH[0x18];                               // 0xf0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCharacterFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x70 (Full Size[0x138] - InheritedSize[0xc8]
class AthenaCharacterKnockbackComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CUXYE[0x8];                                 // 0xc8(0x8)
	bool                                                         Disabled;                                          // 0xd0(0x1)
	char                                                         pad0x7_TCEGB[0x7];                                 // 0xd1(0x7)
	Class AthenaCharacter*                                       Character;                                         // 0xd8(0x8)
	char                                                         pad0x58_9W6RE[0x58];                               // 0xe0(0x58)
};


// Size 0x0 (Full Size[0x138] - InheritedSize[0x138]
class AthenaCharacterKnockbackComponentMock: public AthenaCharacterKnockbackComponent
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AthenaCharacterMovementCheatDetectionSettings: public Object
{
public:
	float                                                        MinLifetime;                                       // 0x28(0x4)
	float                                                        MinRatioLifetimeToLifetimeRawTimeDiscrepancy;      // 0x2c(0x4)
};


// Size 0x140 (Full Size[0x9a0] - InheritedSize[0x860]
class AthenaAICharacterMovementComponent: public AthenaCharacterMovementComponent
{
public:
	char                                                         pad0x8_KS9LR[0x8];                                 // 0x860(0x8)
	Struct AIStrategyMovementProperties                          DefaultMovementProperties;                         // 0x868(0x18)
	TArray<struct AIStrategyMovementProperties>                  AIStrategyMovementProperties;                      // 0x880(0x10)
	TArray<struct ItemCategoryAIStrategyMovementPropertiesOverrides> ItemCategoryAIStrategyMovementPropertiesOverrides; // 0x890(0x10)
	float                                                        BlendSpeed;                                        // 0x8a0(0x4)
	float                                                        KeepOnNavMeshProjectionDistance;                   // 0x8a4(0x4)
	bool                                                         bDebugKeepOnNavMesh;                               // 0x8a8(0x1)
	bool                                                         DisableNavMeshChecks;                              // 0x8a9(0x1)
	bool                                                         OverrideSmoothNetUpdateDistancesDuringCharge;      // 0x8aa(0x1)
	char                                                         pad0x1_NT8ZB[0x1];                                 // 0x8ab(0x1)
	float                                                        ChargeMaxSmoothNetUpdateDist;                      // 0x8ac(0x4)
	float                                                        ChargeNoSmoothNetUpdateDist;                       // 0x8b0(0x4)
	float                                                        ChargeSmoothNetUpdateGracePeriod;                  // 0x8b4(0x4)
	char                                                         pad0xc0_MQIEY[0xc0];                               // 0x8b8(0xc0)
	float                                                        DesiredMaxSpeedAmp;                                // 0x978(0x4)
	float                                                        DesiredMaxAccelAmp;                                // 0x97c(0x4)
	char                                                         pad0x20_GZHM3[0x20];                               // 0x980(0x20)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AthenaCharacterMovementSettings: public Object
{
public:
	Struct NetPositionErrorTolerance                             StandardError;                                     // 0x28(0x8)
	Struct NetPositionErrorTolerance                             SwimmingError;                                     // 0x30(0x8)
	float                                                        SwimmingClientTrustThreshold;                      // 0x38(0x4)
	float                                                        MaxSwimmingTimeStep;                               // 0x3c(0x4)
	int                                                          MaxSwimmingIterations;                             // 0x40(0x4)
	float                                                        RebaseToServerErrorSqrDist;                        // 0x44(0x4)
	float                                                        OnlyInterpolationAfterSqrDist;                     // 0x48(0x4)
	float                                                        InterpolationSqrDistWhenWithinConeAngle;           // 0x4c(0x4)
	float                                                        IncreasedInterpolationDistConeAngleDegrees;        // 0x50(0x4)
	bool                                                         OnlyUseInterpolationConeAngleForPlayerCharacters;  // 0x54(0x1)
	char                                                         pad0x3_BOEMH[0x3];                                 // 0x55(0x3)
	float                                                        NoVisualUpdateAfterSqrDist;                        // 0x58(0x4)
	float                                                        TimeBetweenPlayerDistanceChecks;                   // 0x5c(0x4)
	float                                                        TimeBetweenPlayerDistanceChecksWhenConsideringConeAngle; // 0x60(0x4)
	float                                                        TimeToSimulateNewCharacters;                       // 0x64(0x4)
};


// Size 0xc0 (Full Size[0x188] - InheritedSize[0xc8]
class AthenaCharacterStateManagerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCharacterTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class AthenaContestTavern: public Actor
{
public:
	TArray<class SpawnLocation*>                                 TavernSpawnPoints;                                 // 0x3c8(0x10)
	TArray<class Actor*>                                         TavernLevelActorsToPrepare;                        // 0x3d8(0x10)
	char                                                         pad0x18_JXJ3U[0x18];                               // 0x3e8(0x18)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class PlayerPermissionsComponent: public ActorComponent
{
public:
	bool                                                         AllowDebugMenuAccess;                              // 0xc8(0x1)
	bool                                                         AllowDebugMenuButtonShortcutsAccess;               // 0xc9(0x1)
	bool                                                         AllowExecuteOnServer;                              // 0xca(0x1)
	bool                                                         DisableWatermark;                                  // 0xcb(0x1)
	char                                                         pad0x4_RV25J[0x4];                                 // 0xcc(0x4)
};


// Size 0x10 (Full Size[0x128] - InheritedSize[0x118]
class AthenaDebugMenuComponent: public DebugMenuComponent
{
public:
};


// Size 0x10 (Full Size[0x138] - InheritedSize[0x128]
class TestAthenaDebugMenuComponent: public AthenaDebugMenuComponent
{
public:
	Class PlayerPermissionsComponent*                            TestPermissionComponent;                           // 0x128(0x8)
	char                                                         pad0x8_RKAY9[0x8];                                 // 0x130(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaDebugSettings: public Object
{
public:
	Struct StringAssetReference                                  Dioramas;                                          // 0x28(0x10)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class AthenaEditorRuntimeSettings: public DeveloperSettings
{
public:
	int                                                          PIECrewSize;                                       // 0x38(0x4)
	bool                                                         PIEWithBootflow;                                   // 0x3c(0x1)
	char                                                         pad0x3_FNKLD[0x3];                                 // 0x3d(0x3)
	class                                                        PIEShipSize;                                       // 0x40(0x8)
	bool                                                         PIEIsInitialTutorial;                              // 0x48(0x1)
	bool                                                         PIEIsArenaGame;                                    // 0x49(0x1)
	bool                                                         PIEIsCaptain;                                      // 0x4a(0x1)
	bool                                                         PIEIsGuildedSession;                               // 0x4b(0x1)
	int                                                          PIEGuildMembersOnCrew;                             // 0x4c(0x4)
	bool                                                         PIEIsCustomServer;                                 // 0x50(0x1)
	char                                                         pad0x7_0FYP3[0x7];                                 // 0x51(0x7)
	TArray<struct AnimationOverrideEntries>                      AnimationOverrideEntries;                          // 0x58(0x10)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class AthenaPlayModeLevelsDataAsset: public DataAsset
{
public:
	Struct PlayModeLevelArray                                    PlayModeSpecificLevels;                            // 0x28(0x20)
	char                                                         pad0x60_491XA[0x60];                               // 0x48(0x60)
	TArray<struct CommonLevels>                                  CommonLevels;                                      // 0xa8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UserBannedHandlerRetrievalInterface: public Interface
{
public:
};


// Size 0x780 (Full Size[0x7a8] - InheritedSize[0x28]
class AthenaGameContext: public Object
{
public:
	char                                                         pad0x70_D0HFU[0x70];                               // 0x28(0x70)
	Class VoiceChatRenderer*                                     VoiceChatRenderer;                                 // 0x98(0x8)
	Class AthenaPlayModeLevelsDataAsset*                         PlayModeLevels;                                    // 0xa0(0x8)
	Class FeatureToggledLevelsDataAsset*                         FeatureToggledLevels;                              // 0xa8(0x8)
	char                                                         pad0x1a0_Z91LW[0x1a0];                             // 0xb0(0x1a0)
	Class GameInstance*                                          PrimaryGameInstance;                               // 0x250(0x8)
	Class AthenaServerIdentityManager*                           AthenaServerIdentityManager;                       // 0x258(0x8)
	Struct GameServiceCoordinator                                ServiceCoordinator;                                // 0x260(0x20)
	char                                                         pad0x1f8_ORL99[0x1f8];                             // 0x280(0x1f8)
	Class AthenaLocalPlayerManager*                              AthenaLocalPlayerManager;                          // 0x478(0x8)
	Class AthenaLocalPlayerReengage*                             AthenaLocalPlayerReengage;                         // 0x480(0x8)
	Class GameNarrationCoordinator*                              GameNarrationCoordinator;                          // 0x488(0x8)
	Class ApplicationSettings*                                   ApplicationSettings;                               // 0x490(0x8)
	char                                                         pad0x310_D5B2K[0x310];                             // 0x498(0x310)
};


// Size 0x20 (Full Size[0xaa8] - InheritedSize[0xa88]
class AthenaGameEngine: public RareGameEngine
{
public:
	char                                                         pad0x8_KQ9X9[0x8];                                 // 0xa88(0x8)
	Class AthenaGameEngineSettings*                              EngineSettings;                                    // 0xa90(0x8)
	char                                                         pad0x10_ITPZ1[0x10];                               // 0xa98(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaGameEngineSettingsInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AthenaGameEngineSettings: public Object
{
public:
};


// Size 0x20 (Full Size[0x70] - InheritedSize[0x50]
class AthenaGameEngineSettingsWindows: public AthenaGameEngineSettings
{
public:
};


// Size 0x48 (Full Size[0xd0] - InheritedSize[0x88]
class AthenaGameInstance: public GameInstance
{
public:
	char                                                         pad0x8_YI6A6[0x8];                                 // 0x88(0x8)
	Class AthenaPlayModeLevelsDataAsset*                         AdditionalPlayModeLevels;                          // 0x90(0x8)
	Class AthenaGameContext*                                     GameContext;                                       // 0xa0(0x8)
	char                                                         pad0x28_FRKXP[0x28];                               // 0xa8(0x28)
};


// Size 0x680 (Full Size[0xb40] - InheritedSize[0x4c0]
class AthenaGameMode: public GameMode
{
public:
	char                                                         pad0x28_ZVWHD[0x28];                               // 0x4c0(0x28)
	class                                                        GhostShipPawnClass;                                // 0x4e8(0x8)
	class                                                        ServerNetworkedEventsWhitelistDefinition;          // 0x4f0(0x8)
	char                                                         pad0x1a8_U32SL[0x1a8];                             // 0x4f8(0x1a8)
	Struct GhostShipCoordinator                                  GhostShipCoordinator;                              // 0x6a0(0x370)
	Struct StorageContainerRefresher                             StorageContainerRefresher;                         // 0xa10(0xf8)
	Class RiddleQuestDescGeneratorData*                          RiddleQuestDescGeneratorData;                      // 0xb08(0x8)
	float                                                        RespawnTimer;                                      // 0xb10(0x4)
	float                                                        ContestRespawnTimer;                               // 0xb14(0x4)
	Struct CrewBasedRespawnTimes                                 CrewBasedRespawnTimes;                             // 0xb18(0x10)
	float                                                        StorageContainerRefreshInterval;                   // 0xb28(0x4)
	int                                                          ContainerRefreshBatchSize;                         // 0xb2c(0x4)
	char                                                         pad0x10_WJZ3E[0x10];                               // 0xb30(0x10)
};


// Size 0x210 (Full Size[0xd50] - InheritedSize[0xb40]
class OnlineAthenaGameMode: public AthenaGameMode
{
public:
};


// Size 0x8 (Full Size[0xb48] - InheritedSize[0xb40]
class TestAthenaGameMode: public AthenaGameMode
{
public:
};


// Size 0x0 (Full Size[0xb48] - InheritedSize[0xb48]
class TestAthenaGameModeWithHUD: public TestAthenaGameMode
{
public:
};


// Size 0x0 (Full Size[0xb40] - InheritedSize[0xb40]
class TestInventoryAthenaGameMode: public AthenaGameMode
{
public:
};


// Size 0x90 (Full Size[0x880] - InheritedSize[0x7f0]
class AthenaGameplayDebuggingComponent: public GameplayDebuggingComponent
{
public:
	TArray<Str CurrentServerActionStates>                        CurrentServerActionStates;                         // 0x7e8(0x10)
	class                                                        CurrentAIStrategyId;                               // 0x7f8(0x8)
	TArray<struct CachedAIAbilities>                             CachedAIAbilities;                                 // 0x800(0x10)
	TArray<struct CachedAITargetPickingData>                     CachedAITargetPickingData;                         // 0x810(0x10)
	class                                                        NextAbility;                                       // 0x820(0x8)
	class                                                        QueuedAbility;                                     // 0x828(0x8)
	TArray<class Class*>                                         ReadiedAbilities;                                  // 0x830(0x10)
	Class AthenaAIAbilityHandlerComponent*                       AIAbilityComponent;                                // 0x840(0x8)
	bool                                                         FollowUpAbilitySet;                                // 0x848(0x1)
	char                                                         pad0x3_XO04A[0x3];                                 // 0x849(0x3)
	int                                                          CurrentAbilityStageIndex;                          // 0x84c(0x4)
	TArray<class Class*>                                         AbilitiesActiveInCurrentStage;                     // 0x850(0x10)
	char                                                         pad0x20_IXOJI[0x20];                               // 0x860(0x20)
};


// Size 0x0 (Full Size[0x4b8] - InheritedSize[0x4b8]
class AthenaGameplayDebuggingHUDComponent: public GameplayDebuggingHUDComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShovelSurfaceFxDataAsset: public DataAsset
{
public:
	TArray<struct SurfaceParams>                                 SurfaceParams;                                     // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShovelSurfaceHoleDataAsset: public DataAsset
{
public:
	TArray<struct SurfaceDigHoleClass>                           SurfaceDigHoleClass;                               // 0x28(0x10)
};


// Size 0x8a8 (Full Size[0x8d0] - InheritedSize[0x28]
class AthenaGameSettings: public Object
{
public:
	int                                                          NumberOfDaysInEachMonth;                           // 0x28(0x4)
	char                                                         pad0x4_XAJV2[0x4];                                 // 0x2c(0x4)
	Struct FString                                               EntryMap;                                          // 0x30(0x10)
	Struct FString                                               FrontendMap;                                       // 0x40(0x10)
	Struct FString                                               InGameMap;                                         // 0x50(0x10)
	Struct FString                                               TutorialMap;                                       // 0x60(0x10)
	Struct StringAssetReference                                  PlayModeLevels;                                    // 0x70(0x10)
	Struct StringAssetReference                                  FeatureToggledLevels;                              // 0x80(0x10)
	Struct FString                                               OverrideServerURL;                                 // 0x90(0x10)
	float                                                        LoadLevelTimeoutTime;                              // 0xa0(0x4)
	float                                                        ServiceBridgeConnectTimeout;                       // 0xa4(0x4)
	Struct StringAssetReference                                  CinematicCameraControllerClass;                    // 0x108(0x10)
	Struct StringAssetReference                                  CinematicCameraSpectatorPawnClass;                 // 0x118(0x10)
	Struct StringAssetReference                                  MaterialTranslationTableFileLocation;              // 0x128(0x10)
	Struct StringAssetReference                                  MaterialAudioTableFileLocation;                    // 0x138(0x10)
	Struct StringAssetReference                                  MaterialVFXTableFileLocation;                      // 0x148(0x10)
	Struct StringAssetReference                                  ShipAssetClassDatabaseFileLocation;                // 0x158(0x10)
	Struct StringAssetReference                                  AIPersistentPartsServiceAssetClassFileLocation;    // 0x168(0x10)
	Struct StringAssetReference                                  AIPartsServiceAssetClassFileLocation;              // 0x178(0x10)
	Struct StringAssetReference                                  DebugMenuFileLocation;                             // 0x188(0x10)
	Struct StringAssetReference                                  SpawnLocationKeywordPriorityListLocation;          // 0x198(0x10)
	Struct StringAssetReference                                  CrewSpawnLocationVariablesListAsset;               // 0x1a8(0x10)
	Struct StringAssetReference                                  SkellyFortDataFileLocation;                        // 0x1b8(0x10)
	Struct StringAssetReference                                  SkellyFortListDataFileLocation;                    // 0x1c8(0x10)
	Struct StringAssetReference                                  AIShipServiceDataAssetFileLocation;                // 0x1d8(0x10)
	Struct ToggleableAIShipServiceDataAssetFileLocation          AIShipServiceDataAssetFileLocationOverride;        // 0x1e8(0x18)
	Struct StringAssetReference                                  EnemyAIOnShipServiceDataAssetFileLocation;         // 0x200(0x10)
	Struct StringAssetReference                                  ProjectileServiceDataFileLocation;                 // 0x210(0x10)
	Struct StringAssetReference                                  ThrottledProjectileTickDataAssetLocation;          // 0x220(0x10)
	Struct StringAssetReference                                  HoleDataFileLocation;                              // 0x230(0x10)
	Struct StringAssetReference                                  PlayerBuriedItemServiceDataFileLocation;           // 0x240(0x10)
	Struct StringAssetReference                                  ItemLifetimeIslandCapsDataFileLocation;            // 0x250(0x10)
	Struct StringAssetReference                                  CursedCannonballDataAsset;                         // 0x260(0x10)
	Struct StringAssetReference                                  Throwables;                                        // 0x270(0x10)
	class                                                        ThrowablesItemCategory;                            // 0x280(0x8)
	Struct StringAssetReference                                  SpawnableItemsDataAssetLocation;                   // 0x288(0x10)
	Struct StringAssetReference                                  FireworksDebugSpawnItemsDataAsset;                 // 0x298(0x10)
	Struct StringAssetReference                                  UnlockableEntitlementsDataAssetLocation;           // 0x2a8(0x10)
	Struct StringAssetReference                                  DebugWieldablesDataAsset;                          // 0x2b8(0x10)
	Struct StringAssetReference                                  StrongholdKeyDataAsset;                            // 0x2c8(0x10)
	Struct StringAssetReference                                  MigrationUIContentsFileLocation;                   // 0x2d8(0x10)
	Struct StringAssetReference                                  ArenaMigrationUIContentsFileLocation;              // 0x2e8(0x10)
	Struct StringAssetReference                                  InventoryRemappingAssetLocation;                   // 0x2f8(0x10)
	Struct StringAssetReference                                  AllianceSettingsAssetLocation;                     // 0x308(0x10)
	Struct StringAssetReference                                  ReapersMarkSettingsAssetLocation;                  // 0x318(0x10)
	Struct StringAssetReference                                  EmissaryLevelSettingsAssetLocation;                // 0x328(0x10)
	Struct StringAssetReference                                  EmissaryRewardSettingsAssetLocation;               // 0x338(0x10)
	Struct StringAssetReference                                  FactionSettingsAssetLocation;                      // 0x348(0x10)
	Struct StringAssetReference                                  FactionLootLevelRewardsAssetLocation;              // 0x358(0x10)
	Struct StringAssetReference                                  FlamesOfFateSettingsAssetLocation;                 // 0x368(0x10)
	Struct StringAssetReference                                  DiggingConfigResolverAssetLocation;                // 0x378(0x10)
	Struct StringAssetReference                                  ContestSettingsDataAsset;                          // 0x388(0x10)
	Struct StringAssetReference                                  ContestEventsDataAsset;                            // 0x398(0x10)
	Struct StringAssetReference                                  CrewNotificationToastSettings;                     // 0x3a8(0x10)
	Struct StringAssetReference                                  FireSettingsDataAsset;                             // 0x3b8(0x10)
	Struct FString                                               InventoryDefaultItemURL;                           // 0x3c8(0x10)
	float                                                        CheatFlyingSpeedSlow;                              // 0x3d8(0x4)
	float                                                        CheatFlyingSpeedDefault;                           // 0x3dc(0x4)
	float                                                        CheatFlyingSpeedFast;                              // 0x3e0(0x4)
	float                                                        CheatFlyingAcceleration;                           // 0x3e4(0x4)
	Struct EncounterServiceParams                                EncounterServiceParams;                            // 0x3e8(0x20)
	Struct WindServiceParams                                     WindParams;                                        // 0x408(0x24)
	char                                                         pad0x4_4HRFP[0x4];                                 // 0x42c(0x4)
	Struct CrewServiceParams                                     CrewServiceParams;                                 // 0x430(0x70)
	Struct SharedShovelParams                                    SharedShovelParams;                                // 0x4a0(0x60)
	Struct MermaidServiceParams                                  MermaidServiceParams;                              // 0x500(0x88)
	Struct MermaidServiceParams                                  ContestSpecificMermaidServiceParamsToggleLocked;   // 0x588(0x88)
	Struct MakeFriendsEmoteParams                                MakeFriendsEmoteParams;                            // 0x610(0x18)
	Struct MermaidRespawnConfig                                  MermaidRespawnConfiguration;                       // 0x628(0x28)
	Struct CharacterSocketCollisionServiceParams                 CharacterSocketCollisionServiceParams;             // 0x650(0x8)
	Struct AthenaAICharacterParams                               AAthenaAICharacterParams;                          // 0x658(0x14)
	int                                                          AssumedMaxFPSOnServer;                             // 0x66c(0x4)
	struct FName                                                 WwiseObjectUnderwaterStateSwitchGroup;             // 0x670(0x8)
	struct FName                                                 WwiseObjectUnderwaterSwitchDefaultState;           // 0x678(0x8)
	struct FName                                                 WwiseObjectUnderwaterSwitchUnderwaterState;        // 0x680(0x8)
	float                                                        StormQuantisePrecision;                            // 0x688(0x4)
	char                                                         pad0x4_7VIN3[0x4];                                 // 0x68c(0x4)
	Struct StringAssetReference                                  ShipLiveryCatalogueDataAssetLocation;              // 0x690(0x10)
	Struct StringAssetReference                                  ShipPartsCatalogueDataAssetLocation;               // 0x6a0(0x10)
	Struct StringAssetReference                                  RowboatSpawnParamsDataAssetLocation;               // 0x6b0(0x10)
	Struct StringAssetReference                                  HarpoonLauncherItemExclusionDataAssetLocation;     // 0x6c0(0x10)
	Struct StringAssetReference                                  KrakenTentacleClassLocation;                       // 0x6d0(0x10)
	Struct StringAssetReference                                  KrakenShipTentacleClassLocation;                   // 0x6e0(0x10)
	Struct StringAssetReference                                  KrakenServiceParamsDataAssetLocation;              // 0x6f0(0x10)
	Struct StringAssetReference                                  AmbientTinySharkServiceParamsDataAssetLocation;    // 0x700(0x10)
	Struct StringAssetReference                                  SunkenIslandSettings;                              // 0x710(0x10)
	Struct StringAssetReference                                  CompanyDataListAssetLocation;                      // 0x720(0x10)
	Struct StringAssetReference                                  CoherentUIGTAssetRootLocation;                     // 0x730(0x10)
	Struct StringAssetReference                                  CoherentUIGTPersistentDataAssetLocation;           // 0x740(0x10)
	Struct StringAssetReference                                  CoherentContentEngagementMessageLocation;          // 0x750(0x10)
	Struct StringAssetReference                                  NestedWorldRootDataAssetLocation;                  // 0x760(0x10)
	Struct StringAssetReference                                  AshenLordEncounterServiceParams;                   // 0x770(0x10)
	Struct StringAssetReference                                  PortalServiceParams;                               // 0x780(0x10)
	Struct StringAssetReference                                  AggressiveGhostShipsEncounterServiceParams;        // 0x790(0x10)
	TArray<Assetclass RequiredLoadoutCategories>                 RequiredLoadoutCategories;                         // 0x7a0(0x10)
	Struct StringAssetReference                                  CarouselGenerationParams;                          // 0x7b0(0x10)
	float                                                        SinkingShipDestructionDistanceThreshold;           // 0x7c0(0x4)
	char                                                         pad0x4_CSLM2[0x4];                                 // 0x7c4(0x4)
	Struct StringAssetReference                                  DefaultItemsToBeDisplayedOnInventoryPanel;         // 0x7c8(0x10)
	class                                                        DefaultFogBank;                                    // 0x7d8(0x8)
	class                                                        DefaultFogBankManager;                             // 0x7e0(0x8)
	Struct StringAssetReference                                  TunnelsOfTheDamnedServiceParamsDataAssetLocation;  // 0x7e8(0x10)
	Struct PlayerModerationParams                                PlayerModerationParams;                            // 0x7f8(0xc)
	char                                                         pad0x4_3DZ3Q[0x4];                                 // 0x804(0x4)
	Struct StringAssetReference                                  SpireServiceParamsDataAssetLocation;               // 0x808(0x10)
	class                                                        GhostCurseEntitlement;                             // 0x818(0x8)
	struct FName                                                 GhostCurseRewardId;                                // 0x820(0x8)
	class                                                        GoldGhostCurseEntitlement;                         // 0x828(0x8)
	struct FName                                                 GoldGhostCurseRewardId;                            // 0x830(0x8)
	class                                                        SkeletonCurseEntitlement;                          // 0x838(0x8)
	struct FName                                                 SkeletonCurseRewardId;                             // 0x840(0x8)
	struct FName                                                 SkeletonCurseWardrobeKey;                          // 0x848(0x8)
	TArray<class Class*>                                         SkeletonClothingCategories;                        // 0x850(0x10)
	Struct StringAssetReference                                  SkeletonClothingEntitlementMapDataAsset;           // 0x860(0x10)
	TArray<Byte KillNotificationHealthChangeReasons>             KillNotificationHealthChangeReasons;               // 0x870(0x10)
	Struct StringAssetReference                                  ShipStorageJettisonParamsDataAsset;                // 0x880(0x10)
	Struct StringAssetReference                                  WorldEdgeItemParamsDataAsset;                      // 0x890(0x10)
	Struct StringAssetReference                                  PlayerLootMarkerServiceParamsFileLocation;         // 0x8a0(0x10)
	Struct StringAssetReference                                  AdventureOnDemandServiceParamsAssetFileLocation;   // 0x8b0(0x10)
	Struct StringAssetReference                                  AdventureOnDemandVoyageSelectionDataAssetFileLocation; // 0x8c0(0x10)
};


// Size 0x6e0 (Full Size[0xc20] - InheritedSize[0x540]
class AthenaGameState: public ServiceProviderGameState
{
public:
	char                                                         pad0x78_K713P[0x78];                               // 0x540(0x78)
	Class WindService*                                           WindService;                                       // 0x5b8(0x8)
	Class PlayerManagerService*                                  PlayerManagerService;                              // 0x5c0(0x8)
	Class ShipService*                                           ShipService;                                       // 0x5c8(0x8)
	Class WatercraftService*                                     WatercraftService;                                 // 0x5d0(0x8)
	Class TimeService*                                           TimeService;                                       // 0x5d8(0x8)
	Class HealthCustomizationService*                            HealthService;                                     // 0x5e0(0x8)
	Class CustomWeatherService*                                  CustomWeatherService;                              // 0x5e8(0x8)
	Class CustomStatusesService*                                 CustomStatusesService;                             // 0x5f0(0x8)
	Class FFTWaterService*                                       WaterService;                                      // 0x5f8(0x8)
	Class StormService*                                          StormService;                                      // 0x600(0x8)
	Class CrewService*                                           CrewService;                                       // 0x608(0x8)
	Class CaptainedSessionService*                               CaptainedSessionService;                           // 0x610(0x8)
	Class ContestZoneService*                                    ContestZoneService;                                // 0x618(0x8)
	Class ContestRowboatsService*                                ContestRowboatsService;                            // 0x620(0x8)
	Class IslandService*                                         IslandService;                                     // 0x628(0x8)
	Class NPCService*                                            NPCService;                                        // 0x630(0x8)
	Class SkellyFortService*                                     SkellyFortService;                                 // 0x638(0x8)
	Class DeepSeaRegionService*                                  DeepSeaRegionService;                              // 0x640(0x8)
	Class AIActionSpotService*                                   AIActionSpotService;                               // 0x648(0x8)
	Class AIDioramaService*                                      AIDioramaService;                                  // 0x650(0x8)
	Class AshenLordEncounterService*                             AshenLordEncounterService;                         // 0x658(0x8)
	Class AggressiveGhostShipsEncounterService*                  AggressiveGhostShipsEncounterService;              // 0x660(0x8)
	Class TallTaleService*                                       TallTaleService;                                   // 0x668(0x8)
	Class AIShipObstacleService*                                 AIShipObstacleService;                             // 0x670(0x8)
	Class AIShipService*                                         AIShipService;                                     // 0x678(0x8)
	Class AITargetService*                                       AITargetService;                                   // 0x680(0x8)
	Class ShipLiveryCatalogueService*                            ShipLiveryCatalogueService;                        // 0x688(0x8)
	Class DrawDebugService*                                      DrawDebugService;                                  // 0x690(0x8)
	Class WorldEventZoneService*                                 WorldEventZoneService;                             // 0x698(0x8)
	Class WorldResourceRegistry*                                 WorldResourceRegistry;                             // 0x6a0(0x8)
	Class KrakenService*                                         KrakenService;                                     // 0x6a8(0x8)
	Class PlayerNameService*                                     PlayerNameService;                                 // 0x6b0(0x8)
	Class TinySharkService*                                      TinySharkService;                                  // 0x6b8(0x8)
	Class ProjectileService*                                     ProjectileService;                                 // 0x6c0(0x8)
	Class ProjectileHitRegService*                               ProjectileHitRegService;                           // 0x6c8(0x8)
	Class LaunchableProjectileService*                           LaunchableProjectileService;                       // 0x6d0(0x8)
	Class ServerNotificationsService*                            ServerNotificationsService;                        // 0x6d8(0x8)
	Class AIManagerService*                                      AIManagerService;                                  // 0x6e0(0x8)
	Class AIEncounterService*                                    AIEncounterService;                                // 0x6e8(0x8)
	Class AIEncounterGenerationService*                          AIEncounterGenerationService;                      // 0x6f0(0x8)
	Class EncounterService*                                      EncounterService;                                  // 0x6f8(0x8)
	Class GameEventSchedulerService*                             GameEventSchedulerService;                         // 0x700(0x8)
	Class HideoutService*                                        HideoutService;                                    // 0x708(0x8)
	Class AthenaStreamedLevelService*                            StreamedLevelService;                              // 0x710(0x8)
	Class LocationProviderService*                               LocationProviderService;                           // 0x718(0x8)
	Class HoleService*                                           HoleService;                                       // 0x720(0x8)
	Class PlayerBuriedItemService*                               PlayerBuriedItemService;                           // 0x728(0x8)
	Class LoadoutService*                                        LoadoutService;                                    // 0x730(0x8)
	Class OcclusionService*                                      OcclusionService;                                  // 0x738(0x8)
	Class PetsService*                                           PetsService;                                       // 0x740(0x8)
	Class AthenaAITeamsService*                                  AthenaAITeamsService;                              // 0x748(0x8)
	Class AllianceService*                                       AllianceService;                                   // 0x750(0x8)
	Class MaterialAccessibilityService*                          MaterialAccessibilityService;                      // 0x758(0x8)
	Class NPCLoadedOnClientService*                              NPCLoadedOnClientService;                          // 0x760(0x8)
	Class ReapersMarkService*                                    ReapersMarkService;                                // 0x768(0x8)
	Class EmissaryLevelService*                                  EmissaryLevelService;                              // 0x770(0x8)
	Class FactionService*                                        FactionService;                                    // 0x778(0x8)
	Class CampaignService*                                       CampaignService;                                   // 0x780(0x8)
	Class StoryService*                                          StoryService;                                      // 0x788(0x8)
	Class StorySpawnedActorsService*                             StorySpawnedActorsService;                         // 0x790(0x8)
	Class StoryClaimedResourcesService*                          StoryClaimedResourcesService;                      // 0x798(0x8)
	Class GlobalVoyageDirectorService*                           GlobalVoyageDirector;                              // 0x7a0(0x8)
	Class UtilityVoyageService*                                  UtilityVoyageService;                              // 0x7a8(0x8)
	Class FlamesOfFateSettingsService*                           FlamesOfFateSettingsService;                       // 0x7b0(0x8)
	Class ServiceStatusNotificationsService*                     ServiceStatusNotificationsService;                 // 0x7b8(0x8)
	Class MigrationService*                                      MigrationService;                                  // 0x7c0(0x8)
	Class ShipStockService*                                      ShipStockService;                                  // 0x7c8(0x8)
	Class ShroudBreakerService*                                  ShroudBreakerService;                              // 0x7d0(0x8)
	Class ServerUpdateReportingService*                          ServerUpdateReportingService;                      // 0x7d8(0x8)
	Class GenericMarkerService*                                  GenericMarkerService;                              // 0x7e0(0x8)
	Class MechanismsService*                                     MechanismsService;                                 // 0x7e8(0x8)
	Class MerchantContractsService*                              MerchantContractsService;                          // 0x7f0(0x8)
	Class ShipFactory*                                           ShipFactory;                                       // 0x7f8(0x8)
	Class RewindPhysicsService*                                  RewindPhysicsService;                              // 0x800(0x8)
	Class NotificationMessagesDataAsset*                         NotificationMessagesDataAsset;                     // 0x808(0x8)
	Class ProjectileCooldownService*                             ProjectileCooldownService;                         // 0x810(0x8)
	Class IslandReservationService*                              IslandReservationService;                          // 0x818(0x8)
	Class PortalService*                                         PortalService;                                     // 0x820(0x8)
	Class MeshMemoryConstraintService*                           MeshMemoryConstraintService;                       // 0x828(0x8)
	Class BootyStorageService*                                   BootyStorageService;                               // 0x830(0x8)
	Class LoadoutCostService*                                    LoadoutCostService;                                // 0x838(0x8)
	Class SpireService*                                          SpireService;                                      // 0x840(0x8)
	Class FireworkService*                                       FireworkService;                                   // 0x848(0x8)
	Class InvasionService*                                       InvasionService;                                   // 0x850(0x8)
	Class AirGivingService*                                      AirGivingService;                                  // 0x858(0x8)
	Class CutsceneService*                                       CutsceneService;                                   // 0x860(0x8)
	Class CargoRunService*                                       CargoRunService;                                   // 0x868(0x8)
	Class CommodityDemandService*                                CommodityDemandService;                            // 0x870(0x8)
	Class DebugTeleportationDestinationService*                  DebugTeleportationDestinationService;              // 0x878(0x8)
	Class SeasonProgressionUIService*                            SeasonProgressionUIService;                        // 0x880(0x8)
	Class TransientActorService*                                 TransientActorService;                             // 0x888(0x8)
	Class TunnelsOfTheDamnedService*                             TunnelsOfTheDamnedService;                         // 0x890(0x8)
	Class WorldSequenceService*                                  WorldSequenceService;                              // 0x898(0x8)
	Class ItemLifetimeManagerService*                            ItemLifetimeManagerService;                        // 0x8a0(0x8)
	Class ShipStorageJettisonService*                            ShipStorageJettisonService;                        // 0x8a8(0x8)
	Class SeaFortsService*                                       SeaFortsService;                                   // 0x8b0(0x8)
	Class CustomServerLocalisationService*                       CustomServerLocalisationService;                   // 0x8b8(0x8)
	Class BeckonService*                                         BeckonService;                                     // 0x8c0(0x8)
	Class VolcanoService*                                        VolcanoService;                                    // 0x8c8(0x8)
	Class ShipAnnouncementService*                               ShipAnnouncementService;                           // 0x8d0(0x8)
	Class ShipsLogService*                                       ShipsLogService;                                   // 0x8d8(0x8)
	Class AsyncLoadingMonitoringService*                         AsyncLoadingMonitoringService;                     // 0x8e0(0x8)
	Class ActorOfInterestService*                                ActorOfInterestService;                            // 0x8e8(0x8)
	Class EnemyAIOnShipService*                                  EnemyAIOnShipService;                              // 0x8f0(0x8)
	Class UserSettingsService*                                   UserSettingsService;                               // 0x8f8(0x8)
	Class GuildService*                                          GuildService;                                      // 0x900(0x8)
	Class GuildChroniclesService*                                GuildChroniclesService;                            // 0x908(0x8)
	Class PlayerLootMarkerService*                               PlayerLootMarkerService;                           // 0x910(0x8)
	Class AdventureOnDemandService*                              AdventureOnDemandService;                          // 0x918(0x8)
	char                                                         pad0x1c0_RDXBG[0x1c0];                             // 0x920(0x1c0)
	Struct GameServiceCoordinator                                ServiceCoordinator;                                // 0xae0(0x20)
	char                                                         pad0x28_YO3OY[0x28];                               // 0xb00(0x28)
	TArray<Interface ChatComponents>                             ChatComponents;                                    // 0xb28(0x10)
	char                                                         pad0x98_J5QHB[0x98];                               // 0xb38(0x98)
	bool                                                         IsXboxGamePadOnlyServer;                           // 0xbd0(0x1)
	bool                                                         ShouldDisableAsyncOcclusionCheck;                  // 0xbd1(0x1)
	char                                                         pad0x6_8ZVFR[0x6];                                 // 0xbd2(0x6)
	Struct FString                                               SubPlayMode;                                       // 0xbd8(0x10)
	Class CustomVaultService*                                    CustomVaultService;                                // 0xbe8(0x8)
	Class EntityEnumerationService*                              EntityEnumerationService;                          // 0xbf0(0x8)
	Class LevelAssetCachingService*                              LevelAssetCachingService;                          // 0xbf8(0x8)
	Class CrewSkillRatingService*                                CrewSkillRatingService;                            // 0xc00(0x8)
	char                                                         pad0x18_8U15K[0x18];                               // 0xc08(0x18)
};


// Size 0x40 (Full Size[0xb8] - InheritedSize[0x78]
class AthenaGameUserSettings: public GameUserSettings
{
public:
	int                                                          MaxVerticalResolution;                             // 0x78(0x4)
	int                                                          MaxFPS;                                            // 0x7c(0x4)
	int                                                          VSync;                                             // 0x80(0x4)
	int                                                          LightingDetail;                                    // 0x84(0x4)
	int                                                          ModelDetail;                                       // 0x88(0x4)
	int                                                          ShadowDetail;                                      // 0x8c(0x4)
	int                                                          TextureDetail;                                     // 0x90(0x4)
	int                                                          WaterDetail;                                       // 0x94(0x4)
	int                                                          AnimationQuality;                                  // 0x98(0x4)
	int                                                          MMCThresholdScale;                                 // 0x9c(0x4)
	float                                                        ResolutionScaling;                                 // 0xa0(0x4)
	int                                                          ParticleEmitterQuality;                            // 0xa4(0x4)
	int                                                          ParticleResolutionQuality;                         // 0xa8(0x4)
	int                                                          BackBufferCount;                                   // 0xac(0x4)
	int                                                          ShowPerformanceCounters;                           // 0xb0(0x4)
	bool                                                         SmoothFPS;                                         // 0xb4(0x1)
	bool                                                         HDR;                                               // 0xb5(0x1)
	bool                                                         AudioOutputSpatialAudio;                           // 0xb6(0x1)
	bool                                                         Fullscreen;                                        // 0xb7(0x1)
};


// Size 0x10 (Full Size[0x260] - InheritedSize[0x250]
class AthenaGameViewportClient: public GameViewportClient
{
public:
};


// Size 0x318 (Full Size[0x340] - InheritedSize[0x28]
class AthenaLocalPlayerManager: public Object
{
public:
};


// Size 0x150 (Full Size[0x178] - InheritedSize[0x28]
class AthenaLocalPlayerReengage: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaPlayerCharacterTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterAnimaticSettingsInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class CharacterAnimaticSettingsComponent: public ActorComponent
{
public:
	char                                                         pad0x70_5EHN3[0x70];                               // 0xc8(0x70)
	bool                                                         HasPlayedWakeUpAnimation;                          // 0x138(0x1)
	char                                                         pad0x7_A1JK4[0x7];                                 // 0x139(0x7)
};


// Size 0x3b0 (Full Size[0x800] - InheritedSize[0x450]
class AthenaPlayerState: public PlayerState
{
public:
	char                                                         pad0x48_HSWJP[0x48];                               // 0x450(0x48)
	Class VoiceChatComponent*                                    VoiceChatComponent;                                // 0x498(0x8)
	char                                                         pad0x58_AGBIS[0x58];                               // 0x4a0(0x58)
	Struct FString                                               Sandbox;                                           // 0x4f8(0x10)
	Struct FString                                               ClientPlatform;                                    // 0x508(0x10)
	Struct FString                                               DeviceID;                                          // 0x518(0x10)
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x528(0x78)
	char                                                         pad0xa0_932G1[0xa0];                               // 0x5a0(0xa0)
	Struct Guid                                                  PlayerGameId;                                      // 0x640(0x10)
	Struct PirateDescription                                     PirateDesc;                                        // 0x650(0x80)
	int                                                          PlayerIndexOnServer;                               // 0x6d0(0x4)
	char                                                         pad0x3c_8BP6I[0x3c];                               // 0x6d4(0x3c)
	Struct FString                                               PlayerNameDebug;                                   // 0x710(0x10)
	byte                                                         PlayerActivity;                                    // 0x720(0x1)
	char                                                         pad0xdf_JBK43[0xdf];                               // 0x721(0xdf)
};


// Size 0x158 (Full Size[0x180] - InheritedSize[0x28]
class VoyageRecipeDataAsset: public DataAsset
{
public:
	Struct VoyageRecipe                                          Recipe;                                            // 0x28(0x150)
	bool                                                         IsVoyageLocationBound;                             // 0x178(0x1)
	char                                                         pad0x7_NFKRY[0x7];                                 // 0x179(0x7)
};


// Size 0x1c8 (Full Size[0x348] - InheritedSize[0x180]
class EmergentContestVoyageRecipeDataAsset: public VoyageRecipeDataAsset
{
public:
	Struct EmergentContestVoyageRecipe                           ContestVoyageRecipe;                               // 0x180(0x1c8)
};


// Size 0x150 (Full Size[0x178] - InheritedSize[0x28]
class VoyageDescDataAsset: public DataAsset
{
public:
	TArray<struct Chapters>                                      Chapters;                                          // 0x28(0x10)
	TArray<struct FeatureToggledChapters>                        FeatureToggledChapters;                            // 0x38(0x10)
	Struct FText                                                 Title;                                             // 0x48(0x38)
	Struct FText                                                 Description;                                       // 0x80(0x38)
	Struct FText                                                 LockedDescription;                                 // 0xb8(0x38)
	Struct StringAssetReference                                  KeyArtUrl;                                         // 0xf0(0x10)
	Struct StringAssetReference                                  IconUrl;                                           // 0x100(0x10)
	class                                                        Company;                                           // 0x110(0x8)
	bool                                                         IsEmergent;                                        // 0x118(0x1)
	bool                                                         IsTale;                                            // 0x119(0x1)
	bool                                                         IsStarlightTale;                                   // 0x11a(0x1)
	bool                                                         IsUtilityVoyage;                                   // 0x11b(0x1)
	bool                                                         IsAdventure;                                       // 0x11c(0x1)
	bool                                                         IsCrossWorld;                                      // 0x11d(0x1)
	bool                                                         IsAthenaVoyage2;                                   // 0x11e(0x1)
	Struct ViewVoyageBanners                                     ViewVoyageBanners;                                 // 0x11f(0x2)
	bool                                                         DoNotNotifyParticipantsOnVoyageComplete;           // 0x121(0x1)
	bool                                                         DoNotNotifyParticipantsOfQuestPages;               // 0x122(0x1)
	char                                                         pad0x1_ROTM1[0x1];                                 // 0x123(0x1)
	int                                                          Rank;                                              // 0x124(0x4)
	TArray<struct VoyageCompletionStats>                         VoyageCompletionStats;                             // 0x128(0x10)
	TArray<struct ReapersMarkCompletionStats>                    ReapersMarkCompletionStats;                        // 0x138(0x10)
	TArray<struct VoyageCompletionRewards>                       VoyageCompletionRewards;                           // 0x148(0x10)
	struct FName                                                 CampaignId;                                        // 0x158(0x8)
	Struct StringAssetReference                                  TaleCancelVoteMesh;                                // 0x160(0x10)
	byte                                                         EmergentSource;                                    // 0x170(0x1)
	char                                                         pad0x7_SAVBL[0x7];                                 // 0x171(0x7)
};


// Size 0x48 (Full Size[0x1c0] - InheritedSize[0x178]
class TallTaleContestRecipeDataAsset: public VoyageDescDataAsset
{
public:
	Struct ContestZoneDistribution                               WeightedContestZonesToActivate;                    // 0x178(0x10)
	TArray<struct AvailableIslandArchetypes>                     AvailableIslandArchetypes;                         // 0x188(0x10)
	Struct ContestTimerData                                      ContestVoyageTime;                                 // 0x198(0x18)
	Struct StringClassReference                                  ScoreSystemToLoad;                                 // 0x1b0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestManagerServiceInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x168] - InheritedSize[0xc8]
class UIResponceComponent: public ActorComponent
{
public:
	Class AthenaPlayerController*                                OwningPlayerController;                            // 0xc8(0x8)
	char                                                         pad0x98_6I7LW[0x98];                               // 0xd0(0x98)
};


// Size 0x1e8 (Full Size[0x2b0] - InheritedSize[0xc8]
class PlayerTelemetryComponent: public ActorComponent
{
public:
	char                                                         pad0x64_0RYB6[0x64];                               // 0xc8(0x64)
	float                                                        HeartbeatInterval;                                 // 0x12c(0x4)
	char                                                         pad0x150_8JWPY[0x150];                             // 0x130(0x150)
	Struct DateTime                                              SpawnTimestamp;                                    // 0x280(0x8)
	char                                                         pad0x28_N0ETO[0x28];                               // 0x288(0x28)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class IslandEventType: public Object
{
public:
	Struct IslandEventIcons                                      IslandIcons;                                       // 0x28(0x10)
	Struct IslandEventIcons                                      HeaderIcons;                                       // 0x38(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class TallTaleIslandEventType: public IslandEventType
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MapTableCanvasDataAsset: public DataAsset
{
public:
	Struct MapTableCanvasDetails                                 CanvasDetails;                                     // 0x28(0x30)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class IslandEventHUDData: public DataAsset
{
public:
	TArray<class Class*>                                         EventTypes;                                        // 0x28(0x10)
	Struct Vector2D                                              IslandIconSize;                                    // 0x38(0x8)
	Struct Vector2D                                              HeaderIconSize;                                    // 0x40(0x8)
	float                                                        HeaderYOffset;                                     // 0x48(0x4)
	float                                                        TriggerLerpAtZoomLevel;                            // 0x4c(0x4)
	Struct CanvasLerpData                                        LerpData;                                          // 0x50(0x10)
	Struct CanvasLerpData                                        HighlightLerpData;                                 // 0x60(0x10)
	Struct CanvasLerpData                                        FadeInOutData;                                     // 0x70(0x10)
	float                                                        MarkerHighlightRadiusAdjuster;                     // 0x80(0x4)
	Struct Vector2D                                              MarkerHighlightCentreOffset;                       // 0x84(0x8)
	float                                                        MarkerHighlightScale;                              // 0x8c(0x4)
};


// Size 0x90 (Full Size[0x158] - InheritedSize[0xc8]
class IslandEventTrackerComponent: public ActorComponent
{
public:
	TArray<struct EventData>                                     EventData;                                         // 0xc8(0x10)
	char                                                         pad0x80_MWTJZ[0x80];                               // 0xd8(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandEventTrackerInterface: public Interface
{
public:
};


// Size 0xfb0 (Full Size[0x1720] - InheritedSize[0x770]
class AthenaPlayerController: public PlayerController
{
public:
	char                                                         pad0x80_F5QMR[0x80];                               // 0x770(0x80)
	Class PioneerComponent*                                      PioneerComponent;                                  // 0x7f0(0x8)
	Class PlayerPermissionsComponent*                            PlayerPermissionsComponent;                        // 0x7f8(0x8)
	Class PlayerTelemetryComponent*                              PlayerTelemetryComponent;                          // 0x800(0x8)
	Class PlayerStatsComponent*                                  PlayerStatsComponent;                              // 0x808(0x8)
	Class PlayerSeasonProgressionComponent*                      PlayerSeasonProgressionComponent;                  // 0x810(0x8)
	Class PlayerHeroStatsComponent*                              PlayerHeroStatsComponent;                          // 0x818(0x8)
	Class PlayerWalletComponent*                                 PlayerWalletComponent;                             // 0x820(0x8)
	Class BoxedRpcDispatcherComponent*                           BoxedRpcDispatcherComponent;                       // 0x828(0x8)
	Class PlayerEntitlementComponent*                            PlayerEntitlementComponent;                        // 0x830(0x8)
	Class PlayerMigratableStatusComponent*                       PlayerMigratableStatusComponent;                   // 0x838(0x8)
	Class EmblemComponent*                                       EmblemComponent;                                   // 0x840(0x8)
	Class PlayerCompanyComponent*                                PlayerCompanyComponent;                            // 0x848(0x8)
	Class LeaderboardComponent*                                  LeaderboardComponent;                              // 0x850(0x8)
	Class RewardComponent*                                       RewardComponent;                                   // 0x858(0x8)
	Class PlayerNonVerbalComponent*                              PlayerNonVerbalComponent;                          // 0x860(0x8)
	Class PlayerCrewComponent*                                   PlayerCrewComponent;                               // 0x868(0x8)
	Class PlayerMuteComponent*                                   PlayerMuteComponent;                               // 0x870(0x8)
	Class UIResponceComponent*                                   PlayerUIReturnedResponceComponent;                 // 0x878(0x8)
	Class PopUpNotificationComponent*                            PopUpNotificationComponent;                        // 0x880(0x8)
	Class EncounterListenerComponent*                            EncounterListenerComponent;                        // 0x888(0x8)
	Class CharacterAnimaticSettingsComponent*                    CharacterAnimaticSettingsComponent;                // 0x890(0x8)
	Class AthenaTutorialComponent*                               TutorialComponent;                                 // 0x898(0x8)
	Class ContextualTutorialComponent*                           ContextualTutorialComponent;                       // 0x8a0(0x8)
	Class ShantySelectionComponent*                              ShantySelectionComponent;                          // 0x8a8(0x8)
	Class TutorialManager*                                       TutorialManagerComponent;                          // 0x8b0(0x8)
	Class EmissaryActionRewardBoostComponent*                    EmissaryActionRewardBoostComponent;                // 0x8b8(0x8)
	Class PlayerMysteriousNoteComponent*                         PlayerMysteriousNoteComponent;                     // 0x8c0(0x8)
	Class EmissaryParticipantComponent*                          EmissaryParticipantComponent;                      // 0x8c8(0x8)
	Class CommodityPurchaseTrackingComponent*                    CommodityPurchaseTrackingComponent;                // 0x8d0(0x8)
	Class PlayerActivityComponent*                               PlayerActivityComponent;                           // 0x8d8(0x8)
	Class IslandEventTrackerComponent*                           IslandEventTrackerComponent;                       // 0x8e0(0x8)
	Class CampaignComponent*                                     CampaignComponent;                                 // 0x8e8(0x8)
	Class TaleQuestQueryableStatesAccessComponent*               TaleQuestQueryableStatesAccessComponent;           // 0x8f0(0x8)
	Class AudioReportingComponent*                               AudioReportingComponent;                           // 0x8f8(0x8)
	float                                                        InputRawYawScale;                                  // 0x900(0x4)
	float                                                        InputRawPitchScale;                                // 0x904(0x4)
	Struct InventoryMemory                                       InventoryMemory;                                   // 0x908(0x50)
	Class CinematicCameraController*                             CinematicCameraController;                         // 0x958(0x8)
	char                                                         pad0xc10_667V8[0xc10];                             // 0x960(0xc10)
	Struct Guid                                                  ClientSessionId;                                   // 0x1570(0x10)
	char                                                         pad0x4_3TQOV[0x4];                                 // 0x1580(0x4)
	Class PromptsLocalService*                                   PromptsLocalService;                               // 0x15f0(0x8)
	Class CurveFloat*                                            AutoCentreCurve;                                   // 0x15f8(0x8)
	char                                                         pad0x40_XMJHV[0x40];                               // 0x1600(0x40)
	Struct Vector                                                CinematicCameraControllerLocation;                 // 0x1640(0xc)
	Struct Rotator                                               CinematicCameraControllerRotation;                 // 0x164c(0xc)
	Struct PirateIdentity                                        PirateIdentity;                                    // 0x1658(0x78)
	byte                                                         DeathFlameOfFateType;                              // 0x16d0(0x1)
	byte                                                         FlameOfFateType;                                   // 0x16d1(0x1)
	char                                                         pad0x6_NLN2A[0x6];                                 // 0x16d2(0x6)
	Class IndividualReplicationChannel*                          IndividualReplicationChannel;                      // 0x16d8(0x8)
	char                                                         pad0x18_1KBE1[0x18];                               // 0x16e0(0x18)
	Struct FString                                               DebugServerMigrationEndpoint;                      // 0x16f8(0x10)
	char                                                         pad0x18_SK7PT[0x18];                               // 0x1708(0x18)
};


// Size 0xe8 (Full Size[0x1808] - InheritedSize[0x1720]
class OnlineAthenaPlayerController: public AthenaPlayerController
{
public:
	char                                                         pad0x8_ZFM0A[0x8];                                 // 0x1720(0x8)
	Struct MysteriousNotesCompletionEventsModelEntry             LogoutNoteCompletionIdent;                         // 0x1728(0x8)
	char                                                         pad0x19_1RCD9[0x19];                               // 0x1730(0x19)
	bool                                                         IdleDisconnectEnabled;                             // 0x1749(0x1)
	char                                                         pad0xbe_D8FLO[0xbe];                               // 0x174a(0xbe)
};


// Size 0x40 (Full Size[0x1760] - InheritedSize[0x1720]
class TestAthenaPlayerController: public AthenaPlayerController
{
public:
	Class ForceFeedbackEffect*                                   LastReceivedForceFeedbackEffect;                   // 0x1720(0x8)
	char                                                         pad0x38_3ZFAL[0x38];                               // 0x1728(0x38)
};


// Size 0x0 (Full Size[0x1760] - InheritedSize[0x1760]
class TestAthenaPlayerControllerWithAthenaPlayerCameraManager: public TestAthenaPlayerController
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerRelevancyServiceInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x1748] - InheritedSize[0x1720]
class TestPlayerRelevancyAthenaPlayerController: public AthenaPlayerController
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaPlayerControllerTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0x818] - InheritedSize[0x800]
class TestAthenaPlayerState: public AthenaPlayerState
{
public:
};


// Size 0xf8 (Full Size[0x1c0] - InheritedSize[0xc8]
class AthenaPlayerZonePenetrationTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NDZOP[0x8];                                 // 0xc8(0x8)
	byte                                                         OverlapType;                                       // 0xd0(0x1)
	char                                                         pad0x3_WDLOZ[0x3];                                 // 0xd1(0x3)
	float                                                        UpdateInterval;                                    // 0xd4(0x4)
	Class ShapeComponent*                                        ShapeComponent;                                    // 0xd8(0x8)
	TArray<class AthenaPlayerCharacter*>                         PlayersInZone;                                     // 0xe0(0x10)
	char                                                         pad0xd0_EYNQ1[0xd0];                               // 0xf0(0xd0)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AthenaServerIdentityManager: public Object
{
public:
};


// Size 0xc8 (Full Size[0x4a0] - InheritedSize[0x3d8]
class AthenaTextRender: public StaticMeshActor
{
public:
	Struct FText                                                 Text;                                              // 0x3d8(0x38)
	Struct TreasureMapWidgetText                                 TextDesc;                                          // 0x410(0x3c)
	int                                                          CanvasWidth;                                       // 0x44c(0x4)
	int                                                          CanvasHeight;                                      // 0x450(0x4)
	char                                                         pad0x4_W0UBS[0x4];                                 // 0x454(0x4)
	Class Font*                                                  Font;                                              // 0x458(0x8)
	Struct Vector2D                                              FontScale;                                         // 0x460(0x8)
	float                                                        FontLineSpacingScale;                              // 0x468(0x4)
	char                                                         pad0xc_ZBNG1[0xc];                                 // 0x46c(0xc)
	Class CanvasRenderTarget2D*                                  AthenaTextRenderTarget;                            // 0x478(0x8)
	char                                                         pad0x20_7DMYK[0x20];                               // 0x480(0x20)
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class VoyageProposalDesc: public EntitlementDesc
{
public:
	class                                                        TradingCompany;                                    // 0xc8(0x8)
	int                                                          Rank;                                              // 0xd0(0x4)
	bool                                                         UseDifficultyAsRank;                               // 0xd4(0x1)
	bool                                                         UnlockedForAnyRank;                                // 0xd5(0x1)
	bool                                                         AvailableEvenIfRecentlySeen;                       // 0xd6(0x1)
	char                                                         pad0x1_U7VBD[0x1];                                 // 0xd7(0x1)
	int                                                          Difficulty;                                        // 0xd8(0x4)
	char                                                         pad0x4_BOGL5[0x4];                                 // 0xdc(0x4)
	Struct StringAssetReference                                  TooltipBackgroundImageUrl;                         // 0xe0(0x10)
	Class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0xf0(0x8)
	Class VoyageDescDataAsset*                                   VoyageDesc;                                        // 0xf8(0x8)
	Struct StringAssetReference                                  OverrideVotingTableVoyageProposalMesh;             // 0x100(0x10)
	Struct StringAssetReference                                  OverrideOpenVoyageProposalMesh;                    // 0x110(0x10)
	char                                                         pad0x8_CCOLA[0x8];                                 // 0x120(0x8)
};


// Size 0x8 (Full Size[0x130] - InheritedSize[0x128]
class VoyageCheckpointProposalDesc: public VoyageProposalDesc
{
public:
	int                                                          TaleIndex;                                         // 0x128(0x4)
	bool                                                         DoConsumeOnUse;                                    // 0x12c(0x1)
	bool                                                         DoCountAsInventoryVoyage;                          // 0x12d(0x1)
	char                                                         pad0x2_PKTZ3[0x2];                                 // 0x12e(0x2)
};


// Size 0x8 (Full Size[0x408] - InheritedSize[0x400]
class WorldSafeRegion: public BlockingVolume
{
public:
	char                                                         pad0x1_86KOW[0x1];                                 // 0x400(0x1)
	bool                                                         RequiresShroudBreaker;                             // 0x401(0x1)
	bool                                                         IsMainWorldSafeZone;                               // 0x402(0x1)
	char                                                         pad0x5_WXX10[0x5];                                 // 0x403(0x5)
};


// Size 0x1c8 (Full Size[0x748] - InheritedSize[0x580]
class AthenaWorldSettings: public WorldSettings
{
public:
	char                                                         pad0x60_34NQT[0x60];                               // 0x580(0x60)
	Struct Vector2D                                              WorldMax;                                          // 0x5e0(0x8)
	Struct Vector2D                                              WorldMapMin;                                       // 0x5e8(0x8)
	Struct Vector2D                                              WorldMapMax;                                       // 0x5f0(0x8)
	char                                                         pad0x4_N5HVR[0x4];                                 // 0x5f8(0x4)
	float                                                        AdventureDistanceFromWorldSafeRegionEdgeToKillZone; // 0x5fc(0x4)
	float                                                        ArenaDistanceFromWorldSafeRegionEdgeToKillZone;    // 0x600(0x4)
	float                                                        EndOfWorldWarningOffset;                           // 0x604(0x4)
	char                                                         pad0x4_EQ9YV[0x4];                                 // 0x608(0x4)
	float                                                        AdventureDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting; // 0x60c(0x4)
	float                                                        ArenaDistanceFromWorldSafeRegionEdgeToFullStrainAndLighting; // 0x610(0x4)
	int                                                          EndOfWorldWarningLightingIndex;                    // 0x614(0x4)
	Class BuoyantObjectSpawnParamsDataAsset*                     BuoyantObjectSpawnParams;                          // 0x618(0x8)
	Class SeaFortsWorldDataAsset*                                SeaFortsData;                                      // 0x620(0x8)
	Class SeaRockDataAsset*                                      SeaRockLocations;                                  // 0x628(0x8)
	Struct StringAssetReference                                  TradeRoutes;                                       // 0x630(0x10)
	TArray<struct ManuallyStreamedLevels>                        ManuallyStreamedLevels;                            // 0x640(0x10)
	Class TunnelWorldConfig*                                     TunnelWorldConfig;                                 // 0x650(0x8)
	Class SpireStreamedLevelDataAsset*                           SpireLevels;                                       // 0x658(0x8)
	Struct KrakenWorldSettingsParams                             KrakenParams;                                      // 0x660(0x1)
	Struct TinySharkWorldSettingsParams                          TinySharkParams;                                   // 0x661(0x1)
	char                                                         pad0x6_DQS8U[0x6];                                 // 0x662(0x6)
	Struct AIShipWorldSettings                                   AIShipParams;                                      // 0x668(0x18)
	Class InvasionLocationsDataAsset*                            InvasionLocationsDataAsset;                        // 0x680(0x8)
	Class IslandDataAsset*                                       IslandDataAsset;                                   // 0x688(0x8)
	Class PrebakedIslandAsset*                                   PrebakedIslandData;                                // 0x690(0x8)
	Class MapTableCanvasDataAsset*                               MapTableCanvasData;                                // 0x698(0x8)
	Class VoyageDescDataAsset*                                   TutorialTale;                                      // 0x6a0(0x8)
	Class VoyageDescDataAsset*                                   ScuttleShipVoyageDescAsset;                        // 0x6a8(0x8)
	float                                                        DevilsShroudPlayerDamageMaxDamage;                 // 0x6b0(0x4)
	bool                                                         AllowCompanyOnboardingTutorial;                    // 0x6b4(0x1)
	bool                                                         AllowContextualTutorial;                           // 0x6b5(0x1)
	bool                                                         ShowMapTable;                                      // 0x6b6(0x1)
	bool                                                         UseDevDefinition;                                  // 0x6b7(0x1)
	bool                                                         EnableGlobalVoyages;                               // 0x6b8(0x1)
	char                                                         pad0x7_M5ML0[0x7];                                 // 0x6b9(0x7)
	Class GlobalVoyageOverrideAsset*                             GlobalVoyageOverrideAsset;                         // 0x6c0(0x8)
	TArray<class Class*>                                         NPCOnBeachVoyageCheckpoints;                       // 0x6c8(0x10)
	bool                                                         UseGameEventSchedulerRemoteServices;               // 0x6d8(0x1)
	char                                                         pad0x7_N5BXC[0x7];                                 // 0x6d9(0x7)
	Class GameEventSchedulerSettingsAsset*                       DefaultGameEventSchedulerSettings;                 // 0x6e0(0x8)
	TArray<struct GameEventSchedulerSettingsConfigurations>      GameEventSchedulerSettingsConfigurations;          // 0x6e8(0x10)
	Class StormServiceAsset*                                     StormServiceSettings;                              // 0x6f8(0x8)
	TArray<struct SafeZonesIncludingRequiresShroudBreaker>       SafeZonesIncludingRequiresShroudBreaker;           // 0x700(0x10)
	TArray<struct SafeZonesExcludingRequiresShroudBreaker>       SafeZonesExcludingRequiresShroudBreaker;           // 0x710(0x10)
	TArray<struct MainWorldSafeZones>                            MainWorldSafeZones;                                // 0x720(0x10)
	TArray<struct OverridingSafeZones>                           OverridingSafeZones;                               // 0x730(0x10)
	char                                                         pad0x8_OSUEQ[0x8];                                 // 0x740(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AtmosphericPressureService: public Object
{
public:
	char                                                         pad0x8_0V106[0x8];                                 // 0x28(0x8)
	TArray<Interface RegisteredAtmosphericPressureZones>         RegisteredAtmosphericPressureZones;                // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AudioEmitterPoolSourceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AudioUtilities: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AudioVisualiserHudComponentInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x138] - InheritedSize[0xc8]
class AudioVisualiserHudComponent: public ActorComponent
{
public:
	char                                                         pad0x10_I8NOW[0x10];                               // 0xc8(0x10)
	TArray<struct Hoops>                                         Hoops;                                             // 0xd8(0x10)
	char                                                         pad0x50_SBUIF[0x50];                               // 0xe8(0x50)
};


// Size 0xb0 (Full Size[0x148] - InheritedSize[0x98]
class AwaitCrewShipToSailAwayFromCurrentLocationStep: public TaleQuestStep
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class AwaitCrewShipToSailAwayFromCurrentLocationStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        MinShipDistanceToTravel;                           // 0x80(0x4)
	bool                                                         CompleteStepIfShipIsDestroyed;                     // 0x84(0x1)
	char                                                         pad0x3_Q3HBL[0x3];                                 // 0x85(0x3)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class RadialContentRule: public Object
{
public:
	Struct FText                                                 RadialTitle;                                       // 0x28(0x38)
	char                                                         pad0x8_UAP0Z[0x8];                                 // 0x60(0x8)
	TArray<class Class*>                                         NotificationInputsToBlock;                         // 0x68(0x10)
};


// Size 0x98 (Full Size[0x110] - InheritedSize[0x78]
class BaitRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_KVX4W[0x58];                               // 0x78(0x58)
	float                                                        RadialIconScale;                                   // 0xd0(0x4)
	Struct Vector2D                                              RadialIconOffset;                                  // 0xd4(0x8)
	char                                                         pad0x4_C241H[0x4];                                 // 0xdc(0x4)
	Class InventoryItemDescToSlotRemappingPolicyAsset*           RemappingAsset;                                    // 0xe0(0x8)
	TArray<class ItemInfo*>                                      MappedSlots;                                       // 0xe8(0x10)
	class                                                        BaitItemCategory;                                  // 0xf8(0x8)
	char                                                         pad0x10_VP962[0x10];                               // 0x100(0x10)
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class BakedDecalComponent: public ActorComponent
{
public:
	int                                                          TargetTextureSize;                                 // 0xc8(0x4)
	Struct LinearColor                                           ClearColour;                                       // 0xcc(0x10)
	int                                                          MaxDeferredDecals;                                 // 0xdc(0x4)
	Class TextureRenderTarget2D*                                 TargetTexture;                                     // 0xe0(0x8)
	TArray<class StaticMeshComponent*>                           StaticMeshes;                                      // 0xe8(0x10)
	TArray<struct DeferredDecals>                                DeferredDecals;                                    // 0xf8(0x10)
	char                                                         pad0x8_9EUQV[0x8];                                 // 0x108(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BallastStatus: public StatusBase
{
public:
};


// Size 0x130 (Full Size[0x530] - InheritedSize[0x400]
class PickupableObject: public InteractableBase
{
public:
	char                                                         pad0x10_RZY0W[0x10];                               // 0x400(0x10)
	Struct StartPickupObjectActionRuleParams                     StartPickupObjectActionRuleParams;                 // 0x410(0x10)
	float                                                        PickupTime;                                        // 0x420(0x4)
	char                                                         pad0x10c_M2E0X[0x10c];                             // 0x424(0x10c)
};


// Size 0x110 (Full Size[0x640] - InheritedSize[0x530]
class ItemProxy: public PickupableObject
{
public:
	char                                                         pad0x30_SKJZK[0x30];                               // 0x530(0x30)
	float                                                        InteractionPointRadius;                            // 0x560(0x4)
	char                                                         pad0x4_YYSYM[0x4];                                 // 0x564(0x4)
	Class WwiseEvent*                                            GroundImpactSfx;                                   // 0x568(0x8)
	TArray<struct VFXParams>                                     VFXParams;                                         // 0x570(0x10)
	float                                                        ZOffsetWhenPlacingWorldProxy;                      // 0x580(0x4)
	Struct Rotator                                               RotationWhenPlacingWorldProxy;                     // 0x584(0xc)
	byte                                                         DropOnSurfaceClientTraceChannel;                   // 0x590(0x1)
	char                                                         pad0x7_FU5EP[0x7];                                 // 0x591(0x7)
	Class PrimitiveComponent*                                    ThirdPersonMesh;                                   // 0x598(0x8)
	float                                                        TTL;                                               // 0x5a0(0x4)
	char                                                         pad0x4_YA7R7[0x4];                                 // 0x5a4(0x4)
	Class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x5a8(0x8)
	Class BuoyancyComponent*                                     BuoyancyComponent;                                 // 0x5b0(0x8)
	char                                                         pad0x1_BQGY0[0x1];                                 // 0x5b8(0x1)
	byte                                                         CachedProxySurfaceType;                            // 0x5b9(0x1)
	bool                                                         CachedOnTopOfExistingBuriable;                     // 0x5ba(0x1)
	bool                                                         DroppedInDeepWater;                                // 0x5bb(0x1)
	char                                                         pad0x4_ETEVD[0x4];                                 // 0x5bc(0x4)
	Class ItemInfo*                                              ItemInfo;                                          // 0x5c0(0x8)
	char                                                         pad0x6c_BLM06[0x6c];                               // 0x5c8(0x6c)
	float                                                        TTLPlayerProximityCutoff;                          // 0x634(0x4)
	float                                                        TTLRecheckPeriod;                                  // 0x638(0x4)
	char                                                         pad0x4_D3QNZ[0x4];                                 // 0x63c(0x4)
};


// Size 0x1a8 (Full Size[0x7e8] - InheritedSize[0x640]
class FloatingItemProxy: public ItemProxy
{
public:
	char                                                         pad0x8_8LLFF[0x8];                                 // 0x640(0x8)
	Struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x648(0x1c)
	char                                                         pad0x4_ZYDCM[0x4];                                 // 0x664(0x4)
	Class BoxComponent*                                          BaseComponent;                                     // 0x668(0x8)
	char                                                         pad0x38_ZFTA8[0x38];                               // 0x670(0x38)
	Struct NetTimeStampCalculator                                MovementTimeStamp;                                 // 0x6a8(0x70)
	Class Actor*                                                 TutorialOwner;                                     // 0x718(0x8)
	bool                                                         IsTutorialProxy;                                   // 0x720(0x1)
	char                                                         pad0x7_PUKLO[0x7];                                 // 0x721(0x7)
	Struct ReplicatedPhysicsState                                ReplicatedPhysicsState;                            // 0x728(0x50)
	Class RetractableComponent*                                  RetractableComponent;                              // 0x778(0x8)
	bool                                                         ForceKeepTickActive;                               // 0x780(0x1)
	char                                                         pad0x5f_TRBOF[0x5f];                               // 0x781(0x5f)
	byte                                                         CachedAutoAimCollisionChannel;                     // 0x7e0(0x1)
	byte                                                         CachedVehicleCollisionResponse;                    // 0x7e1(0x1)
	char                                                         pad0x6_35I4P[0x6];                                 // 0x7e2(0x6)
};


// Size 0x20 (Full Size[0x808] - InheritedSize[0x7e8]
class BootyProxy: public FloatingItemProxy
{
public:
	char                                                         pad0x18_JMTH7[0x18];                               // 0x7e8(0x18)
	Class ItemProxyShipTrackerComponent*                         ItemProxyShipTrackerComponent;                     // 0x800(0x8)
};


// Size 0x20 (Full Size[0x828] - InheritedSize[0x808]
class BaseMerchantCrateItemProxy: public BootyProxy
{
public:
	Class RewindComponent*                                       RewindComponent;                                   // 0x808(0x8)
	Class WwiseEvent*                                            FullGroundImpactSfx;                               // 0x820(0x8)
};


// Size 0x0 (Full Size[0x828] - InheritedSize[0x828]
class MerchantCrateItemProxy: public BaseMerchantCrateItemProxy
{
public:
};


// Size 0x0 (Full Size[0x828] - InheritedSize[0x828]
class StaticMerchantCrateItemProxy: public BaseMerchantCrateItemProxy
{
public:
};


// Size 0x10 (Full Size[0x838] - InheritedSize[0x828]
class CargoRunCrateItemProxy: public MerchantCrateItemProxy
{
public:
	Class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x828(0x8)
	Class NPCDialogComponent*                                    NPCDialogComponent;                                // 0x830(0x8)
};


// Size 0x10 (Full Size[0x838] - InheritedSize[0x828]
class StaticCargoRunCrateItemProxy: public StaticMerchantCrateItemProxy
{
public:
	Class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x828(0x8)
	Class NPCDialogComponent*                                    NPCDialogComponent;                                // 0x830(0x8)
};


// Size 0x28 (Full Size[0x860] - InheritedSize[0x838]
class DamageableCargoRunCrateItemProxy: public CargoRunCrateItemProxy
{
public:
	bool                                                         ProjectileCollisionsEnabledAboveMinimumHealthGate; // 0x838(0x1)
	char                                                         pad0x7_RYLMJ[0x7];                                 // 0x839(0x7)
	Class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x840(0x8)
	char                                                         pad0x8_OWHK3[0x8];                                 // 0x848(0x8)
	Class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x850(0x8)
	Class LightWeightStatusEffectManagerComponent*               LightweightStatusEffectComponent;                  // 0x858(0x8)
};


// Size 0x28 (Full Size[0x860] - InheritedSize[0x838]
class StaticDamageableCargoRunCrateItemProxy: public StaticCargoRunCrateItemProxy
{
public:
	bool                                                         ProjectileCollisionsEnabledAboveMinimumHealthGate; // 0x838(0x1)
	char                                                         pad0x7_C8CCP[0x7];                                 // 0x839(0x7)
	Class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x840(0x8)
	char                                                         pad0x8_NV7F2[0x8];                                 // 0x848(0x8)
	Class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x850(0x8)
	Class LightWeightStatusEffectManagerComponent*               LightweightStatusEffectComponent;                  // 0x858(0x8)
};


// Size 0x148 (Full Size[0x510] - InheritedSize[0x3c8]
class ItemInfo: public Actor
{
public:
	char                                                         pad0x20_O9HVE[0x20];                               // 0x3c8(0x20)
	bool                                                         CanBeStoredInInventory;                            // 0x3e8(0x1)
	char                                                         pad0x7_0RNGZ[0x7];                                 // 0x3e9(0x7)
	class                                                        WieldableType;                                     // 0x428(0x8)
	class                                                        ProxyType;                                         // 0x430(0x8)
	Class WieldableItemPersistentCooldownComponent*              WieldableItemPersistenceCooldownComponent;         // 0x438(0x8)
	Class ItemDesc*                                              Desc;                                              // 0x440(0x8)
	byte                                                         CurrentRepresentation;                             // 0x448(0x1)
	char                                                         pad0x7_WYRO5[0x7];                                 // 0x449(0x7)
	Class Actor*                                                 CurrentRepresentationInstance;                     // 0x450(0x8)
	Class Actor*                                                 CurrentOwner;                                      // 0x458(0x8)
	Class Actor*                                                 TutorialOwner;                                     // 0x460(0x8)
	char                                                         pad0xa1_F0SEB[0xa1];                               // 0x468(0xa1)
	bool                                                         DoNotConsiderForMigrationGather;                   // 0x509(0x1)
	char                                                         pad0x6_K24L8[0x6];                                 // 0x50a(0x6)
};


// Size 0x0 (Full Size[0x510] - InheritedSize[0x510]
class NonStorableItemInfo: public ItemInfo
{
public:
};


// Size 0x218 (Full Size[0x728] - InheritedSize[0x510]
class BootyItemInfo: public NonStorableItemInfo
{
public:
	char                                                         pad0x30_PI5Q4[0x30];                               // 0x510(0x30)
	byte                                                         BootyType;                                         // 0x540(0x1)
	char                                                         pad0x3_NUHPO[0x3];                                 // 0x541(0x3)
	Struct Guid                                                  Id;                                                // 0x544(0x10)
	bool                                                         PlayedFirstTimeEquipSfx;                           // 0x554(0x1)
	char                                                         pad0x3_SR7SM[0x3];                                 // 0x555(0x3)
	TArray<struct HandInPlayerStats>                             HandInPlayerStats;                                 // 0x558(0x10)
	TArray<struct HandInStolenPlayerStats>                       HandInStolenPlayerStats;                           // 0x568(0x10)
	TArray<struct HandInStolenFromPlayerStats>                   HandInStolenFromPlayerStats;                       // 0x578(0x10)
	TArray<struct HandInGiftPlayerStats>                         HandInGiftPlayerStats;                             // 0x588(0x10)
	TArray<struct HandInAsPirateLegendPlayerStats>               HandInAsPirateLegendPlayerStats;                   // 0x598(0x10)
	TArray<struct HandInOnSchedulePlayerStats>                   HandInOnSchedulePlayerStats;                       // 0x5a8(0x10)
	TArray<struct HandInAsPirateLegendOnSchedulePlayerStats>     HandInAsPirateLegendOnSchedulePlayerStats;         // 0x5b8(0x10)
	TArray<struct HandInAsEmissaryPlayerStats>                   HandInAsEmissaryPlayerStats;                       // 0x5c8(0x10)
	TArray<struct HandInAsMaxLevelEmissaryPlayerStats>           HandInAsMaxLevelEmissaryPlayerStats;               // 0x5d8(0x10)
	TArray<struct HandInStolenAsEmissaryPlayerStats>             HandInStolenAsEmissaryPlayerStats;                 // 0x5e8(0x10)
	TArray<struct HandInStolenAsMaxLevelEmissaryPlayerStats>     HandInStolenAsMaxLevelEmissaryPlayerStats;         // 0x5f8(0x10)
	TArray<struct UsePlayerStats>                                UsePlayerStats;                                    // 0x608(0x10)
	TArray<struct UseStolenPlayerStats>                          UseStolenPlayerStats;                              // 0x618(0x10)
	Struct CompanyBootyStatList                                  CompanySpecificStats;                              // 0x628(0x10)
	Struct ConditionalHandInStat                                 ConditionalHandInStat;                             // 0x638(0x20)
	Class PopUpMessageDesc*                                      DiscoveredPopupDesc;                               // 0x658(0x8)
	Struct BootyItemSellPrerequisites                            SellPrerequisites;                                 // 0x660(0x10)
	Class TrackedOwnerComponent*                                 TrackedOwnerComponent;                             // 0x670(0x8)
	Class ItemQualityComponent*                                  ItemQualityComponent;                              // 0x678(0x8)
	byte                                                         ItemQualityLevel;                                  // 0x680(0x1)
	char                                                         pad0x7_3XGTA[0x7];                                 // 0x681(0x7)
	TArray<struct CompanySpecificItemQualityLevel>               CompanySpecificItemQualityLevel;                   // 0x688(0x10)
	Struct RewardId                                              HandInRewardId;                                    // 0x698(0x8)
	TArray<struct HandInRewardIdCompanySpecific>                 HandInRewardIdCompanySpecific;                     // 0x6a0(0x10)
	bool                                                         RewardToOwnCrewOnly;                               // 0x6b0(0x1)
	char                                                         pad0x3_PN6Z4[0x3];                                 // 0x6b1(0x3)
	struct FName                                                 Rarity;                                            // 0x6b4(0x8)
	char                                                         pad0x4_1R6NX[0x4];                                 // 0x6bc(0x4)
	class                                                        AwardAllegianceToFaction;                          // 0x6c0(0x8)
	char                                                         pad0x18_UMC1K[0x18];                               // 0x6c8(0x18)
	Class DeliverableComponent*                                  DeliverableComponent;                              // 0x6e0(0x8)
	Class CrewOwnershipTrackingComponent*                        CrewOwnershipTrackingComponent;                    // 0x6e8(0x8)
	Class BootyItemShipOwnershipComponent*                       BootyItemShipOwnershipComponent;                   // 0x6f0(0x8)
	byte                                                         SpawnSource;                                       // 0x6f8(0x1)
	char                                                         pad0x2f_6Z6TI[0x2f];                               // 0x6f9(0x2f)
};


// Size 0x88 (Full Size[0x7b0] - InheritedSize[0x728]
class MerchantCrateItemInfo: public BootyItemInfo
{
public:
	char                                                         pad0x8_UZM7M[0x8];                                 // 0x728(0x8)
	TArray<struct FaunaBreedRarity>                              FaunaBreedRarity;                                  // 0x730(0x10)
	char                                                         pad0x68_6SG04[0x68];                               // 0x740(0x68)
	Class Actor*                                                 CurrentShip;                                       // 0x7a8(0x8)
};


// Size 0x418 (Full Size[0x7e0] - InheritedSize[0x3c8]
class WieldableItem: public Actor
{
public:
	char                                                         pad0x60_0VQMZ[0x60];                               // 0x3c8(0x60)
	Class PrimitiveComponent*                                    FirstPersonMesh;                                   // 0x428(0x8)
	Class PrimitiveComponent*                                    ThirdPersonMesh;                                   // 0x430(0x8)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x438(0x8)
	class                                                        AnimationKey;                                      // 0x440(0x8)
	Struct ObjectMessagingDispatcher                             MessagingDispatcher;                               // 0x448(0xa0)
	char                                                         pad0x8_BKRQN[0x8];                                 // 0x4e8(0x8)
	Struct Transform                                             AnimationOffset;                                   // 0x4f0(0x30)
	Class WwiseEvent*                                            EquipSfx;                                          // 0x520(0x8)
	Class WwiseEvent*                                            UnequipSfx;                                        // 0x528(0x8)
	Class WwiseEvent*                                            WielderLandedJumpSfx;                              // 0x530(0x8)
	Class WwiseEvent*                                            WielderFootstepLayerOneshot;                       // 0x538(0x8)
	struct FName                                                 PlayerWalkSpeedRtpc;                               // 0x540(0x8)
	Class WwiseEvent*                                            FirstTimeEquipSfx;                                 // 0x548(0x8)
	bool                                                         ForceUnequipSfx;                                   // 0x550(0x1)
	byte                                                         ItemSize;                                          // 0x551(0x1)
	char                                                         pad0x6_K4MSX[0x6];                                 // 0x552(0x6)
	Struct DetailAppearenceDesc                                  DetailAppearence;                                  // 0x558(0x30)
	bool                                                         PropagateVisibilityToChildren;                     // 0x588(0x1)
	char                                                         pad0x3_U7AOV[0x3];                                 // 0x589(0x3)
	struct FName                                                 AINoiseTag;                                        // 0x58c(0x8)
	char                                                         pad0x4_3NJ9W[0x4];                                 // 0x594(0x4)
	TArray<struct FName>                                         ThirdPersonExtraMeshNames;                         // 0x598(0x10)
	TArray<struct FName>                                         StashedExtraMeshNames;                             // 0x5a8(0x10)
	Class MeshComponent*                                         StashedMeshComponent;                              // 0x5b8(0x8)
	struct FName                                                 StashedMeshAttachSocket;                           // 0x5c0(0x8)
	struct FName                                                 ServerWieldAttachSocket;                           // 0x5c8(0x8)
	Class PhrasesRadialDataAsset*                                Phrases;                                           // 0x5d0(0x8)
	Class Object*                                                CachedFirstPersonProxyMesh;                        // 0x5d8(0x8)
	Class Object*                                                CachedThirdPersonProxyMesh;                        // 0x5e0(0x8)
	char                                                         pad0x168_RM6XN[0x168];                             // 0x5e8(0x168)
	class                                                        ItemCategory;                                      // 0x750(0x8)
	Class ItemInfo*                                              ItemInfo;                                          // 0x758(0x8)
	Class InterpolatingItem*                                     InterpolatingItem;                                 // 0x760(0x8)
	char                                                         pad0x18_0G5GV[0x18];                               // 0x768(0x18)
	Class WieldableItemVfxComponent*                             WieldableItemVfxComponent;                         // 0x788(0x8)
	TArray<class MeshComponent*>                                 ThirdPersonExtraMeshes;                            // 0x790(0x10)
	TArray<class MeshComponent*>                                 StashedExtraMeshes;                                // 0x7a0(0x10)
	char                                                         pad0x19_W0CX3[0x19];                               // 0x7b0(0x19)
	bool                                                         OfferingEnabled;                                   // 0x7c9(0x1)
	char                                                         pad0x2_TL717[0x2];                                 // 0x7ca(0x2)
	Struct Guid                                                  QuestId;                                           // 0x7cc(0x10)
	char                                                         pad0x4_C57M3[0x4];                                 // 0x7dc(0x4)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class SkeletalMeshWieldableItem: public WieldableItem
{
public:
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class LargeSkeletalMeshWieldableItem: public SkeletalMeshWieldableItem
{
public:
};


// Size 0x30 (Full Size[0x810] - InheritedSize[0x7e0]
class MerchantCrate: public LargeSkeletalMeshWieldableItem
{
public:
	Struct MerchantCrateSfx                                      FullCrateSfx;                                      // 0x7e0(0x20)
	char                                                         pad0x10_4I59B[0x10];                               // 0x800(0x10)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class StaticMeshWieldableItem: public WieldableItem
{
public:
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class LargeStaticMeshWieldableItem: public StaticMeshWieldableItem
{
public:
};


// Size 0x60 (Full Size[0x840] - InheritedSize[0x7e0]
class StaticMerchantCrate: public LargeStaticMeshWieldableItem
{
public:
	Class RewindComponent*                                       RewindComponent;                                   // 0x7e0(0x8)
	Struct MerchantCrateSfx                                      FullCrateSfx;                                      // 0x7e8(0x20)
	Class HitRegSnapshotRedirectImpactToReplicatedMovementAttachParentComponent* HitRegSnapshotRedirectComponent;                   // 0x818(0x8)
	char                                                         pad0x10_0HLYY[0x10];                               // 0x820(0x10)
	bool                                                         RequiresRewindComponent;                           // 0x830(0x1)
	char                                                         pad0xf_3DUYL[0xf];                                 // 0x831(0xf)
};


// Size 0x0 (Full Size[0x828] - InheritedSize[0x828]
class MockMerchantCrateItemProxy: public BaseMerchantCrateItemProxy
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class CategoryBase: public Object
{
public:
	Struct FText                                                 Name;                                              // 0x28(0x38)
	struct FName                                                 UniqueTextIdentifier;                              // 0x60(0x8)
	Struct StringAssetReference                                  IconPath;                                          // 0x68(0x10)
};


// Size 0x8 (Full Size[0x80] - InheritedSize[0x78]
class ItemCategory: public CategoryBase
{
public:
	class                                                        NotificationInputId;                               // 0x78(0x8)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class MerchantCrateCategoryMock: public ItemCategory
{
public:
};


// Size 0x8 (Full Size[0x7b8] - InheritedSize[0x7b0]
class MerchantCrateItemInfoMock: public MerchantCrateItemInfo
{
public:
};


// Size 0x0 (Full Size[0x7b8] - InheritedSize[0x7b8]
class CommonMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x0 (Full Size[0x7b8] - InheritedSize[0x7b8]
class RareMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x0 (Full Size[0x7b8] - InheritedSize[0x7b8]
class LegendaryMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x0 (Full Size[0x7b8] - InheritedSize[0x7b8]
class MythicalMerchantCrateItemInfoMock: public MerchantCrateItemInfoMock
{
public:
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class ItemDesc: public EntitlementDesc
{
public:
	bool                                                         CanBeAddedToLoadout;                               // 0xc8(0x1)
	bool                                                         IsTransient;                                       // 0xc8(0x1)
	char                                                         pad0x7_EHJ3I[0x7];                                 // 0xc9(0x7)
	Struct FString                                               PreviousItem;                                      // 0xd0(0x10)
	Struct FString                                               NextItem;                                          // 0xe0(0x10)
	Struct StringAssetReference                                  IconRadPath;                                       // 0xf0(0x10)
	Struct StringClassReference                                  InstanceClassType;                                 // 0x100(0x10)
	TArray<struct ItemInfoOverrides>                             ItemInfoOverrides;                                 // 0x110(0x10)
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class ItemWithoutIconsDesc: public ItemDesc
{
public:
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class BootyItemDesc: public ItemWithoutIconsDesc
{
public:
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class MerchantCrateItemDescMock: public BootyItemDesc
{
public:
};


// Size 0x18 (Full Size[0x840] - InheritedSize[0x828]
class MerchantCrateFilledItemProxy: public StaticMerchantCrateItemProxy
{
public:
	Class StorageContainerComponent*                             StorageContainerComponent;                         // 0x828(0x8)
	bool                                                         FillCrateToCapacity;                               // 0x830(0x1)
	char                                                         pad0xf_N5GWE[0xf];                                 // 0x831(0xf)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ClientNotificationsService: public Object
{
public:
};


// Size 0x58 (Full Size[0xf0] - InheritedSize[0x98]
class PlayNpcAnimationStep: public TaleQuestStep
{
public:
	Class BasePlayNpcAnimationStepDesc*                          StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x10_WHP10[0x10];                               // 0xa0(0x10)
	Class NPCDialogComponent*                                    NPCDialogComponent;                                // 0xb0(0x8)
	Class CutSceneActor*                                         CutSceneActor;                                     // 0xb8(0x8)
	char                                                         pad0x30_BHYI5[0x30];                               // 0xc0(0x30)
};


// Size 0x88 (Full Size[0x108] - InheritedSize[0x80]
class BasePlayNpcAnimationStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    PlaceableReaction;                                 // 0x80(0x30)
	Struct QuestVariableActor                                    CutSceneActor;                                     // 0xb0(0x30)
	struct FName                                                 AnimationNameToPlay;                               // 0xe0(0x8)
	float                                                        SubtitleMaxDistance;                               // 0xe8(0x4)
	bool                                                         UseServerDrivenDialogue;                           // 0xec(0x1)
	char                                                         pad0x3_YCQGW[0x3];                                 // 0xed(0x3)
	Class SceneDialogueData*                                     DialogueData;                                      // 0xf0(0x8)
	class                                                        LocalMusicZone;                                    // 0xf8(0x8)
	bool                                                         PreventServerMigration;                            // 0x100(0x1)
	char                                                         pad0x7_BZVZ4[0x7];                                 // 0x101(0x7)
};


// Size 0x68 (Full Size[0x170] - InheritedSize[0x108]
class PlayNpcAnimationStepDesc: public BasePlayNpcAnimationStepDesc
{
public:
	Struct QuestVariableActor                                    TargetNpc;                                         // 0x108(0x30)
	Struct FText                                                 SpeakingActorLocalisableName;                      // 0x138(0x38)
};


// Size 0xa0 (Full Size[0x1a8] - InheritedSize[0x108]
class PlayGroupNpcAnimationStepDesc: public BasePlayNpcAnimationStepDesc
{
public:
	Struct QuestVariableActor                                    TargetNpc1;                                        // 0x108(0x30)
	Struct QuestVariableActor                                    TargetNpc2;                                        // 0x138(0x30)
	Struct QuestVariableActor                                    TargetNpc3;                                        // 0x168(0x30)
	TArray<struct FText>                                         SpeakingActorLocalisableNames;                     // 0x198(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamesOfFateSettingsServiceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x468] - InheritedSize[0x400]
class InteractableObject: public InteractableBase
{
public:
	char                                                         pad0x18_VZWMT[0x18];                               // 0x400(0x18)
	Class OneShotInteractableFilterDesc*                         FilterDesc;                                        // 0x418(0x8)
	Struct FText                                                 Verb;                                              // 0x420(0x38)
	char                                                         pad0x10_I9E5C[0x10];                               // 0x458(0x10)
};


// Size 0x390 (Full Size[0x7f8] - InheritedSize[0x468]
class Beacon: public InteractableObject
{
public:
	char                                                         pad0x10_ZVWOS[0x10];                               // 0x468(0x10)
	Class StaticMeshComponent*                                   Mesh;                                              // 0x478(0x8)
	Class ParticleSystemComponent*                               BeaconActiveParticleSystem;                        // 0x480(0x8)
	Class PointLightComponent*                                   PointLight;                                        // 0x488(0x8)
	bool                                                         EnableParticleSystemTint;                          // 0x490(0x1)
	char                                                         pad0x7_KPGDW[0x7];                                 // 0x491(0x7)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x498(0x8)
	Class Object*                                                ExtinguishedVFX;                                   // 0x4a0(0x8)
	struct FName                                                 WwiseEmitterName;                                  // 0x4a8(0x8)
	Class WwiseEvent*                                            StartLoopFlameSfx;                                 // 0x4b0(0x8)
	Class WwiseEvent*                                            StopLoopFlameSfx;                                  // 0x4b8(0x8)
	Class WwiseEvent*                                            FlameTransferSfx;                                  // 0x4c0(0x8)
	Class WwiseEvent*                                            ExtinguishedSfx;                                   // 0x4c8(0x8)
	Class WwiseObjectPoolWrapper*                                BeaconWwisePool;                                   // 0x4d0(0x8)
	float                                                        InteractionRadius;                                 // 0x4d8(0x4)
	char                                                         pad0x4_YZCRU[0x4];                                 // 0x4dc(0x4)
	Struct FText                                                 TakeFlameTooltipText;                              // 0x4e0(0x38)
	Struct FText                                                 CannotTakeFlameTooltipText;                        // 0x518(0x38)
	Struct FText                                                 LanternNotRaisedToolTipText;                       // 0x550(0x38)
	Struct FText                                                 NotWieldingFlameTooltipText;                       // 0x588(0x38)
	Struct FText                                                 SetFlameTooltipText;                               // 0x5c0(0x38)
	bool                                                         CanTakeFlameFromBeacon;                            // 0x5f8(0x1)
	bool                                                         CanSetFlameOnBeacon;                               // 0x5f9(0x1)
	bool                                                         StartLit;                                          // 0x5fa(0x1)
	byte                                                         StartingType;                                      // 0x5fb(0x1)
	Struct PlayerStat                                            StatToFire;                                        // 0x5fc(0x4)
	TArray<struct StatMap>                                       StatMap;                                           // 0x600(0x10)
	Class CurveLinearColor*                                      ColourChangeCurveFX;                               // 0x610(0x8)
	Class CurveLinearColor*                                      ColourChangeCurveLight;                            // 0x618(0x8)
	bool                                                         CanExtinguish;                                     // 0x620(0x1)
	char                                                         pad0x3_18C6O[0x3];                                 // 0x621(0x3)
	float                                                        ExtinguishFadeTime;                                // 0x624(0x4)
	Struct BeaconData                                            BeaconData;                                        // 0x628(0x2)
	char                                                         pad0x6_ODNR1[0x6];                                 // 0x62a(0x6)
	Class ParticleSystemComponent*                               ExtinguishFXComponent;                             // 0x630(0x8)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x638(0xa0)
	char                                                         pad0x120_475LU[0x120];                             // 0x6d8(0x120)
};


// Size 0xb8 (Full Size[0x8b0] - InheritedSize[0x7f8]
class BrazierMechanismTrigger: public Beacon
{
public:
	Class MechanismTriggerComponent*                             MechanismTrigger;                                  // 0x7f8(0x8)
	byte                                                         FlameTypeToActivate;                               // 0x800(0x1)
	bool                                                         ActivateWithSpecificLantern;                       // 0x801(0x1)
	char                                                         pad0x6_2N8GN[0x6];                                 // 0x802(0x6)
	class                                                        LanternToActivate;                                 // 0x808(0x8)
	Struct FText                                                 LanternNotLitToolTipText;                          // 0x810(0x38)
	Struct FText                                                 CannotSetBeaconToolTipText;                        // 0x848(0x38)
	class                                                        TakeFlameOfFateNotificationID;                     // 0x880(0x8)
	class                                                        SetFlameOfFateNotificationID;                      // 0x888(0x8)
	float                                                        LanternSwingAmmount;                               // 0x890(0x4)
	float                                                        LanternEmissiveAmmount;                            // 0x894(0x4)
	float                                                        LanternMegaEmmisiveAmount;                         // 0x898(0x4)
	char                                                         pad0x4_UVTK6[0x4];                                 // 0x89c(0x4)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x8a0(0x10)
};


// Size 0x10 (Full Size[0x8c0] - InheritedSize[0x8b0]
class FortOfTheDamnedBrazierMechanismTrigger: public BrazierMechanismTrigger
{
public:
	Class ParticleSystemComponent*                               FOTDBeaconActiveParticleSystem;                    // 0x8b0(0x8)
	bool                                                         IsActiveWaveBrazier;                               // 0x8b8(0x1)
	char                                                         pad0x7_U508Z[0x7];                                 // 0x8b9(0x7)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class Bed: public Actor
{
public:
	Class StaticMeshComponent*                                   BedMeshComponent;                                  // 0x3c8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3d0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPartDescAsset: public DataAsset
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BedPartDescAsset: public ShipPartDescAsset
{
public:
	Struct BedPartDesc                                           BedPartDesc;                                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class BeginBullRushUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class EelSlapNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LungeBeginAshenLordUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SweepLeftAshenLordUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SweepRightAshenLordUnarmedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeingRetractedActionStateId: public ActionStateId
{
public:
};


// Size 0x108 (Full Size[0x570] - InheritedSize[0x468]
class Bell: public InteractableObject
{
public:
	Class ReplicatedShipPartCustomizationComponent*              CustomisationComponent;                            // 0x468(0x8)
	Struct BellPlayerStats                                       PlayerStats;                                       // 0x470(0x10)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x480(0x8)
	Class StaticMeshComponent*                                   BellMeshComponent;                                 // 0x488(0x8)
	Class WwiseEvent*                                            BellRingSFX;                                       // 0x490(0x8)
	Class WwiseEvent*                                            BellRingSfxStorm;                                  // 0x498(0x8)
	Struct FText                                                 BellName;                                          // 0x4a0(0x38)
	float                                                        TimeBetweenTurbulenceChecks;                       // 0x4d8(0x4)
	float                                                        MinIntervalBetweenRingsLowerBound;                 // 0x4dc(0x4)
	float                                                        MinIntervalBetweenRingsUpperBound;                 // 0x4e0(0x4)
	float                                                        MaxIntervalBetweenRingsLowerBound;                 // 0x4e4(0x4)
	float                                                        MaxIntervalBetweenRingsUpperBound;                 // 0x4e8(0x4)
	char                                                         pad0x4_D3ER9[0x4];                                 // 0x4ec(0x4)
	Class WwiseObjectPoolWrapper*                                BellPool;                                          // 0x4f0(0x8)
	Struct Vector                                                EmitterOffset;                                     // 0x4f8(0xc)
	char                                                         pad0x4_V2X5H[0x4];                                 // 0x504(0x4)
	Class MaterialInstanceDynamic*                               BellDynamicMaterial;                               // 0x508(0x8)
	int                                                          BellMaterialIndex;                                 // 0x510(0x4)
	char                                                         pad0x5c_5TKGX[0x5c];                               // 0x514(0x5c)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BellDescAsset: public ShipPartDescAsset
{
public:
	Struct BellDesc                                              BellDesc;                                          // 0x28(0x18)
};


// Size 0x20 (Full Size[0x300] - InheritedSize[0x2e0]
class AtmosphericPressureZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_PJTE2[0x8];                                 // 0x2e0(0x8)
	Struct AtmosphericPressureZoneParameters                     PressureZoneParameters;                            // 0x2e8(0x14)
	char                                                         pad0x4_S1RSW[0x4];                                 // 0x2fc(0x4)
};


// Size 0x20 (Full Size[0x320] - InheritedSize[0x300]
class BlendedAtmosphericPressureZoneComponent: public AtmosphericPressureZoneComponent
{
public:
	Class CurveFloat*                                            WeightFadeCurveNormalised;                         // 0x300(0x8)
	Class CurveFloat*                                            RadiusFadeCurveNormalised;                         // 0x308(0x8)
	char                                                         pad0x10_AREPD[0x10];                               // 0x310(0x10)
};


// Size 0xf0 (Full Size[0x930] - InheritedSize[0x840]
class BlendedPostProcessingZoneComponentBase: public PostProcessComponent
{
public:
	char                                                         pad0x10_X451J[0x10];                               // 0x840(0x10)
	Class CurveFloat*                                            FadeCurveNormalised;                               // 0x850(0x8)
	float                                                        BlendDistance;                                     // 0x858(0x4)
	char                                                         pad0xd4_PIWBO[0xd4];                               // 0x85c(0xd4)
};


// Size 0x0 (Full Size[0x930] - InheritedSize[0x930]
class BlendedPostProcessingRainZoneComponent: public BlendedPostProcessingZoneComponentBase
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class BlinkStrafeComponent: public ActorComponent
{
public:
	Class AthenaAICharacter*                                     Character;                                         // 0xc8(0x8)
	Class AthenaAIControllerBase*                                OwnerAIController;                                 // 0xd0(0x8)
	char                                                         pad0x8_M094M[0x8];                                 // 0xd8(0x8)
	bool                                                         ShouldBlink;                                       // 0xe0(0x1)
	char                                                         pad0x7_VT3ZL[0x7];                                 // 0xe1(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BloatingStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BlockEarthquakeTaleQuestService: public TaleQuestService
{
public:
	Class BlockEarthquakeTaleQuestServiceDesc*                   Desc;                                              // 0x60(0x8)
	char                                                         pad0x8_UTEC0[0x8];                                 // 0x68(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class BlockEarthquakeTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	Struct QuestVariableActor                                    ActorNearIsland;                                   // 0x28(0x30)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BlockGeysersTaleQuestService: public TaleQuestService
{
public:
	Class BlockGeysersTaleQuestServiceDesc*                      Desc;                                              // 0x60(0x8)
	char                                                         pad0x8_HYI9B[0x8];                                 // 0x68(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class BlockGeysersTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	Struct QuestVariableActor                                    ActorNearIsland;                                   // 0x28(0x30)
};


// Size 0x28 (Full Size[0xc0] - InheritedSize[0x98]
class BlockMigrationForCrewTaskStep: public TaleQuestStep
{
public:
	Class BlockMigrationForCrewTaskStepDesc*                     Desc;                                              // 0x98(0x8)
	char                                                         pad0x20_8CDL9[0x20];                               // 0xa0(0x20)
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class BlockMigrationForCrewTaskStepDesc: public TaleQuestStepDesc
{
public:
	Class TaleQuestStepDesc*                                     TaskDesc;                                          // 0x80(0x8)
	struct FName                                                 RemoteConfigKeyBlockServerMigration;               // 0x88(0x8)
	Struct FString                                               Reason;                                            // 0x90(0x10)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class BlockVolcanoTaleQuestService: public TaleQuestService
{
public:
	Class BlockVolcanoTaleQuestServiceDesc*                      Desc;                                              // 0x60(0x8)
	char                                                         pad0x8_92WEW[0x8];                                 // 0x68(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class BlockVolcanoTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	Struct QuestVariableActor                                    ActorNearIsland;                                   // 0x28(0x30)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class BlueprintStepBase: public Object
{
public:
	byte                                                         BeginMode;                                         // 0x28(0x1)
	char                                                         pad0x7_LN3XL[0x7];                                 // 0x29(0x7)
	Class TaleQuestBlueprintStepDesc*                            Desc;                                              // 0x30(0x8)
	char                                                         pad0x58_NOHIT[0x58];                               // 0x38(0x58)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BlueprintMechanismStepBase: public BlueprintStepBase
{
public:
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class BlueprintSpawnAIStepBase: public BlueprintStepBase
{
public:
};


// Size 0x0 (Full Size[0xa8] - InheritedSize[0xa8]
class BlueprintSpawnAIStepDefault: public BlueprintSpawnAIStepBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamagerType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlunderbussDamagerType: public DamagerType
{
public:
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class BodyLightControllerComponent: public ActorComponent
{
public:
	Class CurveFloat*                                            HourOfDayToIntensityMultiplierCurve;               // 0xc8(0x8)
	float                                                        BaseLightIntensity;                                // 0xd0(0x4)
	float                                                        IntensitySpringAccel;                              // 0xd4(0x4)
	char                                                         pad0xa8_CG9AL[0xa8];                               // 0xd8(0xa8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BoilingStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x148] - InheritedSize[0x148]
class BoneAIFormComponent: public AthenaAIFormComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BoogieStatus: public StatusBase
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class QuestBookPageLayout: public DataAsset
{
public:
	TArray<struct Images>                                        Images;                                            // 0x28(0x10)
	TArray<struct GeneralText>                                   GeneralText;                                       // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TurnablePageInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class QuestBookPageList: public DataAsset
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x28(0x10)
	TArray<struct InitialPages>                                  InitialPages;                                      // 0x38(0x10)
};


// Size 0x3a0 (Full Size[0xb80] - InheritedSize[0x7e0]
class QuestBook: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x18_W2R4T[0x18];                               // 0x7e0(0x18)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	char                                                         pad0x10_JG3W4[0x10];                               // 0x800(0x10)
	Struct QuestBookMaterialHandler                              MaterialHandler;                                   // 0x860(0x140)
	float                                                        ExtraPageTurnDurationForForceRedraw;               // 0x9a0(0x4)
	char                                                         pad0x4_I1O7S[0x4];                                 // 0x9a4(0x4)
	Struct QuestBookRepInfo                                      ReplicationInfo;                                   // 0x9a8(0x28)
	Class QuestBookPageList*                                     PageList;                                          // 0x9d0(0x8)
	class                                                        RemapperClass;                                     // 0x9d8(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x9e0(0x8)
	Class DirectionalLightComponent*                             DirectionalLightComponent;                         // 0x9e8(0x8)
	float                                                        ShadowCascadeDistributionExponentWhenUsing;        // 0x9f0(0x4)
	float                                                        ShadowCascadeDistributionExponentTransitionTime;   // 0x9f4(0x4)
	char                                                         pad0x8_JTFU1[0x8];                                 // 0x9f8(0x8)
	float                                                        PageTurnDuration;                                  // 0xa00(0x4)
	float                                                        PageTurnForceRedrawDuration;                       // 0xa04(0x4)
	char                                                         pad0x150_2RX6E[0x150];                             // 0xa08(0x150)
	int                                                          PageWidth;                                         // 0xb58(0x4)
	int                                                          PageHeight;                                        // 0xb5c(0x4)
	Struct QuestBookPageRenderer                                 PageTextRenderer;                                  // 0xb60(0x18)
	char                                                         pad0x8_N29ZK[0x8];                                 // 0xb78(0x8)
};


// Size 0x8 (Full Size[0x128] - InheritedSize[0x120]
class QuestBookItemDesc: public ItemDesc
{
public:
	Class QuestBookPageList*                                     PageList;                                          // 0x120(0x8)
};


// Size 0x110 (Full Size[0x170] - InheritedSize[0x60]
class TaleQuestToolService: public TaleQuestService
{
public:
	Class TaleQuestToolServiceDesc*                              ServiceDesc;                                       // 0x60(0x8)
	TArray<class ItemDesc*>                                      WieldableDescs;                                    // 0x68(0x10)
	char                                                         pad0xf8_K3MEV[0xf8];                               // 0x78(0xf8)
};


// Size 0x50 (Full Size[0x1c0] - InheritedSize[0x170]
class BookTaleQuestService: public TaleQuestToolService
{
public:
	Class BookTaleQuestServiceDesc*                              Desc;                                              // 0x170(0x8)
	TArray<Int BookContents>                                     BookContents;                                      // 0x178(0x10)
	TArray<struct ProcBookContents>                              ProcBookContents;                                  // 0x188(0x10)
	TArray<Int CurrentBookContents>                              CurrentBookContents;                               // 0x198(0x10)
	Class QuestBookItemDesc*                                     QuestBookDesc;                                     // 0x1a8(0x8)
	class                                                        RemapperClass;                                     // 0x1b0(0x8)
	char                                                         pad0x8_Y8R5L[0x8];                                 // 0x1b8(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleQuestToolServiceDesc: public TaleQuestServiceDesc
{
public:
	bool                                                         GiveToolsOnStart;                                  // 0x28(0x1)
	char                                                         pad0x7_6188Z[0x7];                                 // 0x29(0x7)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class BookTaleQuestServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class                                                        QuestBookDesc;                                     // 0x30(0x8)
	class                                                        RemapperClass;                                     // 0x38(0x8)
};


// Size 0x50 (Full Size[0x830] - InheritedSize[0x7e0]
class TreasureMap: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x10_0EUU0[0x10];                               // 0x7e0(0x10)
	Class WieldableItemCanvasRenderingComponent*                 WieldableCanvasRenderingComponent;                 // 0x7f0(0x8)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x800(0x8)
	Class ZoomInOnWieldableItemComponent*                        ZoomInOnWieldableComponent;                        // 0x808(0x8)
	char                                                         pad0x11_7DFS7[0x11];                               // 0x810(0x11)
	byte                                                         QuestMapIcon;                                      // 0x821(0x1)
	char                                                         pad0xe_PC1YC[0xe];                                 // 0x822(0xe)
};


// Size 0xf0 (Full Size[0x920] - InheritedSize[0x830]
class BountyMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x828(0x4)
	int                                                          CanvasHeight;                                      // 0x82c(0x4)
	Class Font*                                                  Font;                                              // 0x830(0x8)
	float                                                        FontScale;                                         // 0x838(0x4)
	float                                                        FontLineSpacingScale;                              // 0x83c(0x4)
	char                                                         pad0x8_S0007[0x8];                                 // 0x840(0x8)
	Class BountyMapLayout*                                       BountyMapLayout;                                   // 0x848(0x8)
	Struct BountyMapContents                                     Contents;                                          // 0x850(0x68)
	Struct StringAssetReference                                  MapInventoryTexturePath;                           // 0x8b8(0x10)
	float                                                        Rotation;                                          // 0x8c8(0x4)
	char                                                         pad0x54_LRKJD[0x54];                               // 0x8cc(0x54)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class NonDisplaceableLargeStaticMeshWieldableItem: public LargeStaticMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class BountyReward: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PuzzleStatueBaseAudioParamsDataAsset: public DataAsset
{
public:
	Class WwiseEvent*                                            StatueActivated;                                   // 0x28(0x8)
	Class WwiseObjectPoolWrapper*                                PuzzleStatueAudioPool;                             // 0x30(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class BroadcasterPuzzleStatueAudioParamsDataAsset: public DataAsset
{
public:
	Class WwiseEvent*                                            BroadcasterInitiateReactionSequence;               // 0x28(0x8)
	Class WwiseEvent*                                            SuccessHumStart;                                   // 0x30(0x8)
	Class WwiseEvent*                                            SuccessHumStop;                                    // 0x38(0x8)
	Class WwiseEvent*                                            SuccessWaterLevelUp;                               // 0x40(0x8)
	Class WwiseEvent*                                            SuccessWaterLevelDown;                             // 0x48(0x8)
	Class WwiseEvent*                                            SuccessGeneralActivation;                          // 0x50(0x8)
	Class WwiseEvent*                                            UnsuccessfulSequence;                              // 0x58(0x8)
	Class WwiseEvent*                                            ShockwaveEffect;                                   // 0x60(0x8)
};


// Size 0x50 (Full Size[0xb8] - InheritedSize[0x68]
class BTDecorator_ActorWieldedItemCategory: public BTDecorator_BaseConditional
{
public:
	float                                                        Interval;                                          // 0x68(0x4)
	char                                                         pad0x4_3V39M[0x4];                                 // 0x6c(0x4)
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x70(0x28)
	char                                                         pad0x20_GJ70N[0x20];                               // 0x98(0x20)
};


// Size 0x28 (Full Size[0xb8] - InheritedSize[0x90]
class BTDecorator_ActorWieldedItemClass: public BTDecorator_BlackboardBase
{
public:
	float                                                        Interval;                                          // 0x90(0x4)
	char                                                         pad0x4_RKBWB[0x4];                                 // 0x94(0x4)
	char                                                         pad0x20_TQYUZ[0x20];                               // 0x98(0x20)
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_CanBlock: public BTDecorator_BaseConditional
{
public:
};


// Size 0x28 (Full Size[0x90] - InheritedSize[0x68]
class BTDecorator_CanRepair: public BTDecorator_BaseConditional
{
public:
	Struct BlackboardKeySelector                                 RepairActor;                                       // 0x68(0x28)
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_ShouldCheatPauseBehavior: public BTDecorator_BaseConditional
{
public:
};


// Size 0x0 (Full Size[0x68] - InheritedSize[0x68]
class BTDecorator_ShouldCurrentActionStatePauseBehavior: public BTDecorator_BaseConditional
{
public:
};


// Size 0x38 (Full Size[0xa8] - InheritedSize[0x70]
class BTService_DetermineEngageTarget: public BTService
{
public:
	Struct BlackboardKeySelector                                 BlockChangeEngageOptionKey;                        // 0x70(0x28)
	char                                                         pad0x10_CSVZO[0x10];                               // 0x98(0x10)
};


// Size 0x70 (Full Size[0xe0] - InheritedSize[0x70]
class BTService_DetermineRecoveryMethod: public BTService
{
public:
	float                                                        TimeToForgetAfterSuccessfulFlee;                   // 0x70(0x4)
	char                                                         pad0x4_LW4UN[0x4];                                 // 0x74(0x4)
	Class AthenaAICharacterController*                           CachedAICharacterController;                       // 0x78(0x8)
	char                                                         pad0x60_2M8P1[0x60];                               // 0x80(0x60)
};


// Size 0x118 (Full Size[0x188] - InheritedSize[0x70]
class BTService_ObserveTargetMeleeAttacks: public BTService
{
public:
	Struct BlackboardKeySelector                                 TargetActorKey;                                    // 0x70(0x28)
	Struct BlackboardKeySelector                                 IsTargetAttackingResultKey;                        // 0x98(0x28)
	char                                                         pad0xc8_6OGIR[0xc8];                               // 0xc0(0xc8)
};


// Size 0xf8 (Full Size[0x168] - InheritedSize[0x70]
class BTService_ObserveTargetReceivedDamage: public BTService
{
public:
	Struct BlackboardKeySelector                                 ObservedActorKey;                                  // 0x70(0x28)
	Struct BlackboardKeySelector                                 HasObservedActorReceivedSufficientDamageResultKey; // 0x98(0x28)
	Struct AIDataProviderFloatValue                              ObservedActorDamageThreshold;                      // 0xc0(0x30)
	char                                                         pad0x78_I26AP[0x78];                               // 0xf0(0x78)
};


// Size 0x108 (Full Size[0x178] - InheritedSize[0x70]
class BTService_RunLoopingCustomAnimation: public BTService
{
public:
	bool                                                         UseFixedLoopingCustomAnimationName;                // 0x70(0x1)
	char                                                         pad0x3_1V252[0x3];                                 // 0x71(0x3)
	struct FName                                                 FixedLoopingCustomAnimationName;                   // 0x74(0x8)
	char                                                         pad0x4_QYKX9[0x4];                                 // 0x7c(0x4)
	Struct BlackboardKeySelector                                 LoopingCustomAnimationNameKey;                     // 0x80(0x28)
	bool                                                         GetAnimationDurations;                             // 0xa8(0x1)
	char                                                         pad0x7_W249P[0x7];                                 // 0xa9(0x7)
	Struct BlackboardKeySelector                                 IntoAnimationEffectTime;                           // 0xb0(0x28)
	Struct BlackboardKeySelector                                 IntoAnimationDuration;                             // 0xd8(0x28)
	Struct BlackboardKeySelector                                 OutOfUndockTime;                                   // 0x100(0x28)
	Struct BlackboardKeySelector                                 OutOfAnimationDuration;                            // 0x128(0x28)
	Struct BlackboardKeySelector                                 AlternateOutOfAnimationIndex;                      // 0x150(0x28)
};


// Size 0x58 (Full Size[0x100] - InheritedSize[0xa8]
class BTTask_AthenaRunEQSQuery: public BTTask_RunEQSQuery
{
public:
	Struct BlackboardKeySelector                                 KeyToSetToTrueIfNoValidLocationFound;              // 0xa8(0x28)
	Struct BlackboardKeySelector                                 ReasonStringKeyIfNoValidLocationFound;             // 0xd0(0x28)
	bool                                                         ThrottleQueryTimePerFrame;                         // 0xf8(0x1)
	char                                                         pad0x3_9RRB5[0x3];                                 // 0xf9(0x3)
	float                                                        MaxSecondsToSpendOnQueryPerFrame;                  // 0xfc(0x4)
};


// Size 0x28 (Full Size[0x128] - InheritedSize[0x100]
class BTTask_AthenaRunEQSQueryFromBlackboard: public BTTask_AthenaRunEQSQuery
{
public:
	Struct BlackboardKeySelector                                 EQSBlackboardKey;                                  // 0x100(0x28)
};


// Size 0x0 (Full Size[0x100] - InheritedSize[0x100]
class BTTask_DoesEQSQuerySucceed: public BTTask_AthenaRunEQSQuery
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class BTTask_CharacterRotateToFaceBBEntry: public BTTask_RotateToFaceBBEntry
{
public:
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_FlushQueuedAIAbility: public BTTaskNode
{
public:
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class BTTask_FlushQueuedEngageEnemyMethod: public BTTaskNode
{
public:
};


// Size 0x8 (Full Size[0x98] - InheritedSize[0x90]
class BTTask_RotateToFaceBBEntryWithTime: public BTTask_RotateToFaceBBEntry
{
public:
	float                                                        Delay;                                             // 0x90(0x4)
	float                                                        RotationTime;                                      // 0x94(0x4)
};


// Size 0x98 (Full Size[0xf8] - InheritedSize[0x60]
class BTTask_RunOneShotCustomAnimation: public BTTaskNode
{
public:
	bool                                                         UseFixedOneShotCustomAnimationName;                // 0x60(0x1)
	char                                                         pad0x3_NLM2Z[0x3];                                 // 0x61(0x3)
	struct FName                                                 FixedOneShotCustomAnimationName;                   // 0x64(0x8)
	char                                                         pad0x4_AL06Q[0x4];                                 // 0x6c(0x4)
	Struct BlackboardKeySelector                                 OneShotCustomAnimationNameKey;                     // 0x70(0x28)
	bool                                                         GetDurationAndEffectTime;                          // 0x98(0x1)
	char                                                         pad0x7_XN738[0x7];                                 // 0x99(0x7)
	Struct BlackboardKeySelector                                 AnimationDuration;                                 // 0xa0(0x28)
	Struct BlackboardKeySelector                                 AnimationEffectTime;                               // 0xc8(0x28)
	bool                                                         StopCurrentLoopingAnimation;                       // 0xf0(0x1)
	char                                                         pad0x7_K3VTQ[0x7];                                 // 0xf1(0x7)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_SetRecoveryMethod: public BTTaskNode
{
public:
	class                                                        RecoveryMethod;                                    // 0x60(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FuseTargetInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class CannonDescAsset: public ShipPartDescAsset
{
public:
	Struct CannonDesc                                            CannonDesc;                                        // 0x28(0x30)
};


// Size 0x898 (Full Size[0xda8] - InheritedSize[0x510]
class Cannon: public ControllableObject
{
public:
	char                                                         pad0x30_WJLY4[0x30];                               // 0x510(0x30)
	Class SkeletalMeshMemoryConstraintComponent*                 BaseMeshComponent;                                 // 0x540(0x8)
	Class StaticMeshMemoryConstraintComponent*                   BarrelMeshComponent;                               // 0x548(0x8)
	Class StaticMeshComponent*                                   FuseMeshComponent;                                 // 0x550(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x558(0x8)
	Class LoadableComponent*                                     LoadableComponent;                                 // 0x560(0x8)
	Class LoadingPointComponent*                                 LoadingPointComponent;                             // 0x568(0x8)
	Class ChildActorComponent*                                   CannonBarrelInteractionComponent;                  // 0x570(0x8)
	Class FuseComponent*                                         FuseComponent;                                     // 0x578(0x8)
	struct FName                                                 CameraSocket;                                      // 0x580(0x8)
	struct FName                                                 CameraInsideCannonSocket;                          // 0x588(0x8)
	struct FName                                                 LaunchSocket;                                      // 0x590(0x8)
	struct FName                                                 TooltipSocket;                                     // 0x598(0x8)
	struct FName                                                 AudioAimRTPCName;                                  // 0x5a0(0x8)
	struct FName                                                 InsideCannonRTPCName;                              // 0x5a8(0x8)
	class                                                        ProjectileClass;                                   // 0x5b0(0x8)
	float                                                        TimePerFire;                                       // 0x5b8(0x4)
	float                                                        ProjectileSpeed;                                   // 0x5bc(0x4)
	float                                                        ProjectileGravityScale;                            // 0x5c0(0x4)
	Struct FloatRange                                            PitchRange;                                        // 0x5c4(0x10)
	Struct FloatRange                                            YawRange;                                          // 0x5d4(0x10)
	float                                                        PitchSpeed;                                        // 0x5e4(0x4)
	float                                                        YawSpeed;                                          // 0x5e8(0x4)
	char                                                         pad0x4_8S4E2[0x4];                                 // 0x5ec(0x4)
	class                                                        CameraShake;                                       // 0x5f0(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x5f8(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x5fc(0x4)
	float                                                        CannonFiredAINoiseRange;                           // 0x600(0x4)
	struct FName                                                 AINoiseTag;                                        // 0x604(0x8)
	char                                                         pad0x4_0J2H3[0x4];                                 // 0x60c(0x4)
	Struct FText                                                 CannonDisabledToolTipText;                         // 0x610(0x38)
	Struct FText                                                 LoadingDisabledToolTipText;                        // 0x648(0x38)
	class                                                        UseCannonInputId;                                  // 0x680(0x8)
	class                                                        StartLoadingCannonInputId;                         // 0x688(0x8)
	class                                                        StopLoadingCannonInputId;                          // 0x690(0x8)
	float                                                        DefaultFOV;                                        // 0x698(0x4)
	float                                                        AimFOV;                                            // 0x69c(0x4)
	float                                                        IntoAimBlendSpeed;                                 // 0x6a0(0x4)
	float                                                        OutOfAimBlendSpeed;                                // 0x6a4(0x4)
	Class WwiseEvent*                                            FireSfx;                                           // 0x6a8(0x8)
	Class WwiseEvent*                                            DryFireSfx;                                        // 0x6b0(0x8)
	Class WwiseEvent*                                            LoadingSfx_Play;                                   // 0x6b8(0x8)
	Class WwiseEvent*                                            LoadingSfx_Stop;                                   // 0x6c0(0x8)
	Class WwiseEvent*                                            UnloadingSfx_Play;                                 // 0x6c8(0x8)
	Class WwiseEvent*                                            UnloadingSfx_Stop;                                 // 0x6d0(0x8)
	Class WwiseEvent*                                            LoadedPlayerSfx;                                   // 0x6d8(0x8)
	Class WwiseEvent*                                            UnloadedPlayerSfx;                                 // 0x6e0(0x8)
	Class WwiseEvent*                                            FiredPlayerSfx;                                    // 0x6e8(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x6f0(0x8)
	Class WwiseEvent*                                            StartPitchMovement;                                // 0x6f8(0x8)
	Class WwiseEvent*                                            StopPitchMovement;                                 // 0x700(0x8)
	Class WwiseEvent*                                            StartYawMovement;                                  // 0x708(0x8)
	Class WwiseEvent*                                            StopYawMovement;                                   // 0x710(0x8)
	Class WwiseEvent*                                            StopMovementAtEnd;                                 // 0x718(0x8)
	Class WwiseObjectPoolWrapper*                                SfxMovementPool;                                   // 0x720(0x8)
	Class Object*                                                FuseVfxFirstPerson;                                // 0x728(0x8)
	Class Object*                                                FuseVfxThirdPerson;                                // 0x730(0x8)
	Class Object*                                                MuzzleFlashVfxFirstPerson;                         // 0x738(0x8)
	Class Object*                                                MuzzleFlashVfxThirdPerson;                         // 0x740(0x8)
	struct FName                                                 FuseSocketName;                                    // 0x748(0x8)
	struct FName                                                 BarrelSocketName;                                  // 0x750(0x8)
	class                                                        RadialCategoryFilter;                              // 0x758(0x8)
	class                                                        DefaultLoadedItemDesc;                             // 0x760(0x8)
	float                                                        ClientRotationBlendTime;                           // 0x768(0x4)
	char                                                         pad0x4_DHBP0[0x4];                                 // 0x76c(0x4)
	Class ItemInfo*                                              LoadedItemInfo;                                    // 0x770(0x8)
	bool                                                         FiringDisabled;                                    // 0x778(0x1)
	char                                                         pad0x1f_7MAP0[0x1f];                               // 0x779(0x1f)
	Class MemoryConstrainedMeshInitializer*                      BaseMMCMeshInitializer;                            // 0x798(0x8)
	Class MemoryConstrainedMeshInitializer*                      BarrelMMCMeshInitializer;                          // 0x7a0(0x8)
	Class CannonDescAsset*                                       DescToSetWhenSafe;                                 // 0x7a8(0x8)
	Class CannonDescAsset*                                       CurrentCannonDesc;                                 // 0x7b0(0x8)
	float                                                        ServerPitch;                                       // 0x7b8(0x4)
	float                                                        ServerYaw;                                         // 0x7bc(0x4)
	Class ParticleSystemComponent*                               LoadedItemVFXComp;                                 // 0x7c0(0x8)
	Class StaticMesh*                                            DefaultFuseMesh;                                   // 0x7c8(0x8)
	char                                                         pad0x5d0_G6ZBD[0x5d0];                             // 0x7d0(0x5d0)
	byte                                                         InteractionState;                                  // 0xda0(0x1)
	char                                                         pad0x7_FK4LL[0x7];                                 // 0xda1(0x7)
};


// Size 0xf0 (Full Size[0x1b8] - InheritedSize[0xc8]
class ShipCurseComponent: public ActorComponent
{
public:
	TArray<class Actor*>                                         CachedShipAttachedActors;                          // 0xc8(0x10)
	TArray<class Mast*>                                          FoundMasts;                                        // 0xd8(0x10)
	Class Capstan*                                               ShipCapstan;                                       // 0xe8(0x8)
	TArray<class Cannon*>                                        ShipCannons;                                       // 0xf0(0x10)
	Class Wheel*                                                 ShipWheel;                                         // 0x100(0x8)
	TArray<class FixedIntentComponent*>                          SailFixedIntentComponents;                         // 0x108(0x10)
	char                                                         pad0x6c_6JAFW[0x6c];                               // 0x118(0x6c)
	float                                                        ShipCapstanTargetRatio;                            // 0x184(0x4)
	TArray<struct ActiveCurseFX>                                 ActiveCurseFX;                                     // 0x188(0x10)
	TArray<class Actor*>                                         ActorsAffectedByToggleInteractionsCurse;           // 0x198(0x10)
	TArray<struct SpawnedFXForCurses>                            SpawnedFXForCurses;                                // 0x1a8(0x10)
};


// Size 0x88 (Full Size[0x150] - InheritedSize[0xc8]
class SinkingComponent: public ActorComponent
{
public:
	char                                                         pad0x10_JAGCF[0x10];                               // 0xc8(0x10)
	Struct SinkingShipParams                                     SinkingParams;                                     // 0xd8(0x38)
	Class Ship*                                                  Ship;                                              // 0x110(0x8)
	byte                                                         ShipState;                                         // 0x118(0x1)
	char                                                         pad0x3_Z9DXV[0x3];                                 // 0x119(0x3)
	int                                                          KeelOverConfigIndex;                               // 0x11c(0x4)
	char                                                         pad0x30_ID8AJ[0x30];                               // 0x120(0x30)
};


// Size 0x1478 (Full Size[0x1840] - InheritedSize[0x3c8]
class Ship: public Actor
{
public:
	char                                                         pad0xf0_QBFXO[0xf0];                               // 0x3c8(0xf0)
	Struct ShipPartConnections                                   PartConnections;                                   // 0x4b8(0x98)
	Class StaticMeshComponent*                                   BoatCollision;                                     // 0x550(0x8)
	Class BasisComponent*                                        BoatBasis;                                         // 0x558(0x8)
	Class StaticMeshComponent*                                   OverlapHit;                                        // 0x560(0x8)
	Class StaticMeshComponent*                                   BelowDeckVolume;                                   // 0x568(0x8)
	Class StaticMeshComponent*                                   CabinVolume;                                       // 0x570(0x8)
	Struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x578(0xa0)
	Class TeleportLocationRetrievalComponent*                    TeleportLocationRetrievalComponent;                // 0x618(0x8)
	Class ChildActorComponent*                                   ShipInternalWaterComponent;                        // 0x620(0x8)
	Class SinkingComponent*                                      SinkingComponent;                                  // 0x628(0x8)
	Class ShipHullCollisionComponent*                            HullCollisionComponent;                            // 0x630(0x8)
	Class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x638(0x8)
	Class ShipStuckDetectionComponent*                           StuckDetectionComponent;                           // 0x640(0x8)
	Class StatusEffectManagerComponent*                          StatusEffectManagerComponent;                      // 0x648(0x8)
	Class StatusEffectPersistenceComponent*                      StatusEffectPersistenceComponent;                  // 0x650(0x8)
	Class ShipCurseComponent*                                    ShipCurseComponent;                                // 0x658(0x8)
	Class AIOnShipManagerComponent*                              AIOnShipManagerComponent;                          // 0x660(0x8)
	Class InstancedNavMeshComponent*                             InstancedNavMeshComponent;                         // 0x668(0x8)
	Class DockableComponent*                                     DockableComponent;                                 // 0x670(0x8)
	Class InvasionBattleBoundsComponent*                         InvasionBattleBoundsComponent;                     // 0x678(0x8)
	Struct WaterBuoyancy                                         Buoyancy;                                          // 0x680(0x130)
	Class CrewOwnershipComponent*                                CrewOwnershipComponent;                            // 0x7b0(0x8)
	Class OnboardCharacterTrackerComponent*                      OnboardCharacterTrackerComponent;                  // 0x7b8(0x8)
	Class RewindComponent*                                       RewindComponent;                                   // 0x7c0(0x8)
	Class ShipLiveryComponent*                                   LiveryComponent;                                   // 0x7c8(0x8)
	Class ShipAnnouncementComponent*                             ShipAnnouncementComponent;                         // 0x7d0(0x8)
	Class ReplicatedShipPartCustomizationComponent*              HullLiveryCustomizationComponent;                  // 0x7d8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              SailsLiveryCustomizationComponent;                 // 0x7e0(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CannonEnchantmentCustomizationComponent;           // 0x7e8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              ShipAnnouncementPartCustomizationComponent;        // 0x7f0(0x8)
	class                                                        RammerType;                                        // 0x7f8(0x8)
	Class GroupedInteractableAreaComponent*                      GroupedInteractableAreaComponent;                  // 0x800(0x8)
	Struct ShipConfigurationSettings                             ShipConfigurationSettings;                         // 0x808(0x18)
	float                                                        RainFillRate;                                      // 0x820(0x4)
	float                                                        RainTimePerDrop;                                   // 0x824(0x4)
	float                                                        RainDropScale;                                     // 0x828(0x4)
	float                                                        RainDropRadius;                                    // 0x82c(0x4)
	float                                                        RainStrengthMinimumToFillShip;                     // 0x830(0x4)
	char                                                         pad0x4_LIJTR[0x4];                                 // 0x834(0x4)
	TArray<struct AITargetVisibilityPoints>                      AITargetVisibilityPoints;                          // 0x838(0x10)
	Struct AchievementSailThroughStormAtNightWithLightsOff       AchievementSailThroughStormAtNightWithLightsOff;   // 0x848(0x90)
	Struct AchievementSailCloseToShipWithoutFiring               AchievementSailCloseToShipWithoutFiring;           // 0x8d8(0x18)
	Struct AchievementSailFullyWithTheWind                       AchievementSailFullyIntoTheWind;                   // 0x8f0(0x8)
	Struct AchievementSailWithFlameOfFateColoursAboard           AchievementSailWithFlameOfFateColoursAboard;       // 0x8f8(0x118)
	Class ShipSunkTrackingComponent*                             ShipSunkTracker;                                   // 0xa10(0x8)
	Class ImpulseThrottlerComponent*                             ImpulseThrottlerComponent;                         // 0xa18(0x8)
	Class SphereComponent*                                       ReturnToShipVolume;                                // 0xa20(0x8)
	float                                                        ReturnToShipVolumeRadius;                          // 0xa28(0x4)
	byte                                                         BowSplashReturnType;                               // 0xa2c(0x1)
	char                                                         pad0x3_364A7[0x3];                                 // 0xa2d(0x3)
	Struct ShipDynamics                                          ShipDynamics;                                      // 0xa30(0xa0)
	Struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0xad0(0x1c)
	char                                                         pad0x4_3KXY9[0x4];                                 // 0xaec(0x4)
	Class ShipSinkingParametersDataAsset*                        AdventureSinkingData;                              // 0xaf0(0x8)
	Class ShipSinkingParametersDataAsset*                        ArenaSinkingData;                                  // 0xaf8(0x8)
	Struct BuoyancySampleMovement                                BuoyancySampleMovement;                            // 0xb00(0x68)
	Struct BuoyancySampleMovement                                SurfacingBuoyancySampleMovement;                   // 0xb68(0x68)
	bool                                                         AttachPlayersToShipWhenSurfacing;                  // 0xbd0(0x1)
	char                                                         pad0x3_092PM[0x3];                                 // 0xbd1(0x3)
	float                                                        SurfacingAttachDuration;                           // 0xbd4(0x4)
	Struct BuoyancySampleMovement                                DivingBuoyancySampleMovement;                      // 0xbd8(0x68)
	bool                                                         AttachPlayersToShipWhenDiving;                     // 0xc40(0x1)
	char                                                         pad0x3_RJMS2[0x3];                                 // 0xc41(0x3)
	float                                                        DivingAttachDuration;                              // 0xc44(0x4)
	Class ShipNosediveBrake*                                     NosediveBrake;                                     // 0xc48(0x8)
	Class ShipRolloverCorrector*                                 RolloverCorrector;                                 // 0xc50(0x8)
	Class BowSplashContainer*                                    BowSplashContainer;                                // 0xc58(0x8)
	Class BowSplashContainer*                                    SurfacingBowSplashContainer;                       // 0xc60(0x8)
	Class BowSplashContainer*                                    DivingBowSplashContainer;                          // 0xc68(0x8)
	Class ShipResurfaceWetnessContainer*                         ShipResurfaceWetnessContainer;                     // 0xc70(0x8)
	bool                                                         DisableSailingBowSplashesWhenDiving;               // 0xc78(0x1)
	char                                                         pad0x7_XVL4K[0x7];                                 // 0xc79(0x7)
	Class LocatorContainer*                                      ShipLocators;                                      // 0xc80(0x8)
	Struct Vector                                                LocalSailForceApplicationOffset;                   // 0xc88(0xc)
	char                                                         pad0x4_2XS88[0x4];                                 // 0xc94(0x4)
	Class CurveFloat*                                            ShipSpeedToChoppinessScalarCurve;                  // 0xc98(0x8)
	Class CurveFloat*                                            HullSubmergedValueRemapping;                       // 0xca0(0x8)
	float                                                        FakeBuoyancyZOffsetScalarSpringAccel;              // 0xca8(0x4)
	float                                                        ResurfacingFinishedSubmergedHullPercentageThreshold; // 0xcac(0x4)
	float                                                        PositionSamplerTimeWindow;                         // 0xcb0(0x4)
	struct FName                                                 ClientConvexHullCollisionProfile;                  // 0xcb4(0x8)
	float                                                        EmpiricalMaxSpeedInMPS;                            // 0xcbc(0x4)
	Struct Transform                                             BrigSpawnLocation;                                 // 0xcc0(0x30)
	float                                                        WaterStrengthThresholdForStormDamage;              // 0xcf0(0x4)
	char                                                         pad0x4_UV25M[0x4];                                 // 0xcf4(0x4)
	class                                                        FirePropagationBlueprint;                          // 0xcf8(0x8)
	Class ShipFirePropagationComponent*                          FirePropagationComponent;                          // 0xd00(0x8)
	char                                                         pad0xa0_DBYVJ[0xa0];                               // 0xd08(0xa0)
	Struct EncounterParams                                       SightingEncounterParams;                           // 0xda8(0xc)
	Struct EncounterParams                                       CloseProximityEncounterParams;                     // 0xdb4(0xc)
	char                                                         pad0x10_SZUIC[0x10];                               // 0xdc0(0x10)
	class                                                        ShipCategoryObject;                                // 0xdd0(0x8)
	class                                                        ShipSizeObject;                                    // 0xdd8(0x8)
	class                                                        ShipTypeObject;                                    // 0xde0(0x8)
	TArray<class Actor*>                                         DamageableChildActors;                             // 0xde8(0x10)
	Class ShipPartsDamageTrackerComponent*                       ShipPartsDamageTrackerComponent;                   // 0xdf8(0x8)
	Class CrewShipManifest*                                      CrewShipManifest;                                  // 0xe00(0x8)
	Struct ShipIdentity                                          ShipIdentity;                                      // 0xe08(0x28)
	bool                                                         IsInCaptainedCrew;                                 // 0xe30(0x1)
	char                                                         pad0x6f_P4ZBA[0x6f];                               // 0xe31(0x6f)
	Class Object*                                                HullDamage;                                        // 0xea0(0x8)
	Class VoyageProposalContainer*                               QuestTable;                                        // 0xea8(0x8)
	Class SurfaceWaterComponent*                                 DeckWater;                                         // 0xeb0(0x8)
	Class WaterExposureComponent*                                WaterExposureComponent;                            // 0xeb8(0x8)
	Class ShroudBreakerTrackerComponent*                         ShroudBreakerTrackerComponent;                     // 0xec0(0x8)
	Class FlotsamItemSpawnComponent*                             FlotsamComponent;                                  // 0xec8(0x8)
	Struct NetTimeStampCalculator                                MovementTimeStamp;                                 // 0xed0(0x70)
	char                                                         pad0xf8_E9K58[0xf8];                               // 0xf40(0xf8)
	float                                                        StormStrainWeight;                                 // 0x1038(0x4)
	float                                                        WorldEdgeWeight;                                   // 0x103c(0x4)
	float                                                        TetherMassInertiaScaleWhenAnchored;                // 0x1040(0x4)
	char                                                         pad0x4_4GRST[0x4];                                 // 0x1044(0x4)
	Struct StrainDamage                                          StormStrainDamage;                                 // 0x1048(0x28)
	Struct StrainDamage                                          WorldEdgeDamage;                                   // 0x1070(0x28)
	Struct StrainDamage                                          ScuttleDamage;                                     // 0x1098(0x28)
	Struct Vector2D                                              WorldEdgeDamageRange;                              // 0x10c0(0x8)
	float                                                        ScuttleForceSinkTime;                              // 0x10c8(0x4)
	char                                                         pad0x4_C5TXE[0x4];                                 // 0x10cc(0x4)
	class                                                        ProxyClass;                                        // 0x10d0(0x8)
	Class ShipEntitlementProcessingPolicyDataAsset*              ShipEntitlementProcessingPolicyDataAsset;          // 0x10d8(0x8)
	char                                                         pad0x1_KXF01[0x1];                                 // 0x10e0(0x1)
	bool                                                         HasEverStartedSailing;                             // 0x10e1(0x1)
	bool                                                         EmissaryFlagActive;                                // 0x10e2(0x1)
	bool                                                         InTunnelOfTheDamned;                               // 0x10e3(0x1)
	byte                                                         SurfacingState;                                    // 0x10e4(0x1)
	char                                                         pad0x3_EL3PU[0x3];                                 // 0x10e5(0x3)
	double                                                       FinishedResurfacingTimeStamp;                      // 0x10e8(0x8)
	bool                                                         Scuttled;                                          // 0x10f0(0x1)
	char                                                         pad0x7_II172[0x7];                                 // 0x10f1(0x7)
	TArray<class MobileInstancedStaticMeshComponent*>            InstancedMeshes;                                   // 0x10f8(0x10)
	class                                                        ConstraintBudget;                                  // 0x1108(0x8)
	char                                                         pad0x6ac_9323C[0x6ac];                             // 0x1110(0x6ac)
	float                                                        ScuttleTime;                                       // 0x17bc(0x4)
	char                                                         pad0x80_FXI0H[0x80];                               // 0x17c0(0x80)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class BTTask_WaitForWieldBase: public BTTaskNode
{
public:
	bool                                                         WaitForUnstashed;                                  // 0x60(0x1)
	char                                                         pad0x7_QL0SH[0x7];                                 // 0x61(0x7)
};


// Size 0x20 (Full Size[0x88] - InheritedSize[0x68]
class BTTask_SpawnAndWieldItem: public BTTask_WaitForWieldBase
{
public:
	class                                                        ItemDesc;                                          // 0x68(0x8)
	char                                                         pad0x18_ZOJW7[0x18];                               // 0x70(0x18)
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class BTTask_SpawnAmmoItemForAI: public BTTask_SpawnAndWieldItem
{
public:
};


// Size 0x38 (Full Size[0xc0] - InheritedSize[0x88]
class BTTask_SpawnItemForCategory: public BTTask_SpawnAndWieldItem
{
public:
	bool                                                         EnableOverrideItemCategory;                        // 0x88(0x1)
	char                                                         pad0x7_UQ3GC[0x7];                                 // 0x89(0x7)
	class                                                        OverrideItemCategory;                              // 0x90(0x8)
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x98(0x28)
};


// Size 0x40 (Full Size[0xa8] - InheritedSize[0x68]
class BTTask_WieldItemByCategory: public BTTask_WaitForWieldBase
{
public:
	bool                                                         EnableOverrideItemCategory;                        // 0x68(0x1)
	char                                                         pad0x7_PH1I3[0x7];                                 // 0x69(0x7)
	class                                                        OverrideItemCategory;                              // 0x70(0x8)
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x78(0x28)
	bool                                                         AllowWieldNoneWhenNoItemOfCategory;                // 0xa0(0x1)
	char                                                         pad0x7_QDEFI[0x7];                                 // 0xa1(0x7)
};


// Size 0x60 (Full Size[0xc0] - InheritedSize[0x60]
class BTTask_WaitWeighted: public BTTaskNode
{
public:
	Struct AIDataProviderStructValue                             WeightedRangesFromParams;                          // 0x60(0x30)
	Struct WeightedProbabilityRangeOfRanges                      WeightedRanges;                                    // 0x90(0x30)
};


// Size 0x238 (Full Size[0x600] - InheritedSize[0x3c8]
class LaunchableProjectile: public Actor
{
public:
	char                                                         pad0x20_F18E6[0x20];                               // 0x3c8(0x20)
	Class WaterSplashComponent*                                  WaterSplashComponent;                              // 0x3e8(0x8)
	Class ProjectileMovementComponent*                           ProjectileComponent;                               // 0x3f0(0x8)
	float                                                        LaunchLerpTime;                                    // 0x3f8(0x4)
	char                                                         pad0x4_FZ6AZ[0x4];                                 // 0x3fc(0x4)
	class                                                        ImpactProjectileId;                                // 0x400(0x8)
	Class Object*                                                TrailEffectAboveWater;                             // 0x408(0x8)
	Class Object*                                                TrailEffectBelowWater;                             // 0x410(0x8)
	byte                                                         TrailVfxRegion;                                    // 0x418(0x1)
	char                                                         pad0x3_KUXSF[0x3];                                 // 0x419(0x3)
	Struct Vector                                                TrailVFXScale;                                     // 0x41c(0xc)
	struct FName                                                 TrailSocketName;                                   // 0x428(0x8)
	struct FName                                                 TrailEmitterName;                                  // 0x430(0x8)
	Class WwiseEvent*                                            TrailSfxPlay;                                      // 0x438(0x8)
	Class WwiseEvent*                                            TrailSfxStop;                                      // 0x440(0x8)
	Class WwiseObjectPoolWrapper*                                TrailSfxPool;                                      // 0x448(0x8)
	bool                                                         DisableStandardCannonFireSfx;                      // 0x450(0x1)
	char                                                         pad0x7_IYXNY[0x7];                                 // 0x451(0x7)
	Class WwiseEvent*                                            CannonFireSfx;                                     // 0x458(0x8)
	Class WwiseObjectPoolWrapper*                                CannonFireSfxPool;                                 // 0x460(0x8)
	bool                                                         DestroyWhenEnteringWater;                          // 0x468(0x1)
	bool                                                         AutoTriggerTrailEffects;                           // 0x469(0x1)
	char                                                         pad0x3e_V29YR[0x3e];                               // 0x46a(0x3e)
	Class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x4a8(0x8)
	Class ParticleSystemComponent*                               TrailEffect;                                       // 0x4b0(0x8)
	char                                                         pad0x28_6UDCW[0x28];                               // 0x4b8(0x28)
	float                                                        LaunchSpeed;                                       // 0x4e0(0x4)
	float                                                        GravityScale;                                      // 0x4e4(0x4)
	char                                                         pad0x118_SB2VB[0x118];                             // 0x4e8(0x118)
};


// Size 0x148 (Full Size[0x748] - InheritedSize[0x600]
class LiquidProjectile: public LaunchableProjectile
{
public:
	byte                                                         ObjectTypeChannelToEnableInShip;                   // 0x600(0x1)
	char                                                         pad0x7_2R1P0[0x7];                                 // 0x601(0x7)
	Class FireGridCellSelectionParamsDataAsset*                  DousingParameters;                                 // 0x608(0x8)
	TArray<struct StatusesToApply>                               StatusesToApply;                                   // 0x610(0x10)
	struct FName                                                 LiquidProjectileNoiseTag;                          // 0x620(0x8)
	float                                                        LiquidProjectileNoiseRadius;                       // 0x628(0x4)
	char                                                         pad0x4_73H9A[0x4];                                 // 0x62c(0x4)
	Struct LiquidContents                                        Contents;                                          // 0x630(0x40)
	char                                                         pad0xd8_1XZE0[0xd8];                               // 0x670(0xd8)
};


// Size 0x170 (Full Size[0x950] - InheritedSize[0x7e0]
class Bucket: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x8_P2IH3[0x8];                                 // 0x7e0(0x8)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7e8(0x8)
	TArray<struct BucketContentsInfos>                           BucketContentsInfos;                               // 0x7f0(0x10)
	Class WwiseEvent*                                            ScoopSfx;                                          // 0x800(0x8)
	struct FName                                                 ThrowSocketName;                                   // 0x808(0x8)
	struct FName                                                 DrenchWielderSocketName;                           // 0x810(0x8)
	float                                                        ScoopActionTime;                                   // 0x818(0x4)
	float                                                        ScoopCompleteTime;                                 // 0x81c(0x4)
	float                                                        ThrowActionTime;                                   // 0x820(0x4)
	float                                                        ThrowCompleteTime;                                 // 0x824(0x4)
	float                                                        DrenchWielderActionTime;                           // 0x828(0x4)
	float                                                        DrenchWielderCompleteTime;                         // 0x82c(0x4)
	float                                                        RequestToleranceTimeOnServer;                      // 0x830(0x4)
	float                                                        ProjectileSpeed;                                   // 0x834(0x4)
	float                                                        ProjectileAdditionalLiftAngle;                     // 0x838(0x4)
	float                                                        WaterFillFromShip;                                 // 0x83c(0x4)
	float                                                        WaterFillFromSea;                                  // 0x840(0x4)
	float                                                        WaterTransferFillAmountModifier;                   // 0x844(0x4)
	float                                                        ScoopBufferDistance;                               // 0x848(0x4)
	byte                                                         ScoopHitTestTraceChannel;                          // 0x84c(0x1)
	char                                                         pad0x3_DODNJ[0x3];                                 // 0x84d(0x3)
	class                                                        BucketScoopCooldownType;                           // 0x850(0x8)
	class                                                        BucketThrowCooldownType;                           // 0x858(0x8)
	class                                                        BucketDouseCooldownType;                           // 0x860(0x8)
	float                                                        ThrowLiquidAINoiseRange;                           // 0x868(0x4)
	char                                                         pad0x4_TPGLB[0x4];                                 // 0x86c(0x4)
	Class LiquidContainerComponent*                              LiquidContainer;                                   // 0x870(0x8)
	Struct LiquidContents                                        Contents;                                          // 0x878(0x40)
	char                                                         pad0x78_RWI7S[0x78];                               // 0x8b8(0x78)
	byte                                                         FillState;                                         // 0x930(0x1)
	char                                                         pad0x7_6K44T[0x7];                                 // 0x931(0x7)
	Class ParticleSystemComponent*                               BucketContentsEffect;                              // 0x938(0x8)
	char                                                         pad0x10_5KKUE[0x10];                               // 0x940(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class BuriedItemStep: public TaleQuestStep
{
public:
	Class BuriedItemStepDesc*                                    StepDesc;                                          // 0x98(0x8)
};


// Size 0x28 (Full Size[0x88] - InheritedSize[0x60]
class BuryingTaleQuestService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuryingTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x168 (Full Size[0x1e8] - InheritedSize[0x80]
class BuriedItemStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableClass                                    ItemType;                                          // 0x80(0x30)
	Struct QuestVariableItemSpawnDataType                        ItemSpawnData;                                     // 0xb0(0x30)
	Struct QuestVariableGuid                                     ItemId;                                            // 0xe0(0x30)
	float                                                        DigRadius;                                         // 0x110(0x4)
	char                                                         pad0x4_8QSD1[0x4];                                 // 0x114(0x4)
	Struct QuestVariableActor                                    SpawnedItemInfo;                                   // 0x118(0x30)
	Struct QuestVariablePlayerActor                              DiscoveringCharacter;                              // 0x148(0x30)
	bool                                                         TrackBuriedItem;                                   // 0x178(0x1)
	bool                                                         MarkBuriedItemAsCritical;                          // 0x179(0x1)
	bool                                                         MarkActorAsPhased;                                 // 0x17a(0x1)
	char                                                         pad0x5_U116C[0x5];                                 // 0x17b(0x5)
	Struct FText                                                 CriticalActorLostMessage;                          // 0x180(0x38)
	Struct QuestVariableClass                                    MarkerClass;                                       // 0x1b8(0x30)
};


// Size 0x30 (Full Size[0x218] - InheritedSize[0x1e8]
class BuriedItemStepFromLocationDesc: public BuriedItemStepDesc
{
public:
	Struct QuestVariableVector                                   ItemLocation;                                      // 0x1e8(0x30)
};


// Size 0x30 (Full Size[0x218] - InheritedSize[0x1e8]
class BuriedItemStepFromActorDesc: public BuriedItemStepDesc
{
public:
	Struct QuestVariableActor                                    PlaceableActor;                                    // 0x1e8(0x30)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GeneratedLocationsDataAsset: public DataAsset
{
public:
	TArray<struct Locations>                                     Locations;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class BuriedTreasureDataAsset: public GeneratedLocationsDataAsset
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuriedTreasureLocationValidator: public Object
{
public:
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class BuriedTreasureLocation: public Actor
{
public:
	Class SphereComponent*                                       BaseComponent;                                     // 0x3c8(0x8)
	TArray<class PhysicalMaterial*>                              DiggableSurfaceTypes;                              // 0x3d0(0x10)
	bool                                                         StopVerification;                                  // 0x3e0(0x1)
	char                                                         pad0xf_6KVJ3[0xf];                                 // 0x3e1(0xf)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class BurpComponent: public ActorComponent
{
public:
	float                                                        MinGasToTriggerBurp;                               // 0xc8(0x4)
	float                                                        MinRandomBurpDelay;                                // 0xcc(0x4)
	float                                                        MaxRandomBurpDelay;                                // 0xd0(0x4)
	float                                                        GasDecayPerSecond;                                 // 0xd4(0x4)
	Class WwiseEvent*                                            BurpSfx;                                           // 0xd8(0x8)
	struct FName                                                 BurpStrengthRTPCName;                              // 0xe0(0x8)
	char                                                         pad0x18_YD5XV[0x18];                               // 0xe8(0x18)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class BurrowEruptArea: public BurrowEruptBase
{
public:
	byte                                                         BurrowState;                                       // 0x3c8(0x1)
	char                                                         pad0x7_BNATT[0x7];                                 // 0x3c9(0x7)
	Class ExplosionComponent*                                    ExplosionComponent;                                // 0x3d0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CalmAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraFadeManagerTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0xa8 (Full Size[0x170] - InheritedSize[0xc8]
class CampaignComponent: public ActorComponent
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CampaignPopUpNotificationDataAsset: public DataAsset
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
	TArray<struct CampaignPopUpNotifications>                    CampaignPopUpNotifications;                        // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OneShotInteractableFilterDesc: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanBeReloadedOneShotInteractableFilterDesc: public OneShotInteractableFilterDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonAnimInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x460] - InheritedSize[0x440]
class CannonAnimInstance: public AnimInstance
{
public:
	char                                                         pad0x8_CK4PM[0x8];                                 // 0x440(0x8)
	bool                                                         CannonIsFiring;                                    // 0x448(0x1)
	char                                                         pad0x3_0UVRD[0x3];                                 // 0x449(0x3)
	float                                                        CannonFiringAnimBlend;                             // 0x44c(0x4)
	float                                                        Pitch;                                             // 0x450(0x4)
	float                                                        YawRangeMapped;                                    // 0x454(0x4)
	char                                                         pad0x8_QV65N[0x8];                                 // 0x458(0x8)
};


// Size 0x10 (Full Size[0x7f0] - InheritedSize[0x7e0]
class CannonBall: public StaticMeshWieldableItem
{
public:
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7e0(0x8)
	Class ConsumableWieldableComponent*                          ConsumableWieldable;                               // 0x7e8(0x8)
};


// Size 0xf0 (Full Size[0x8e0] - InheritedSize[0x7f0]
class Grenade: public CannonBall
{
public:
	char                                                         pad0x8_CMOG6[0x8];                                 // 0x7f0(0x8)
	Class GrenadeSetupDataAsset*                                 GrenadeSetupDataAsset;                             // 0x7f8(0x8)
	Struct WeightedProbabilityRangeOfRanges                      RotationRatePitch;                                 // 0x800(0x30)
	Struct WeightedProbabilityRangeOfRanges                      RotationRateRoll;                                  // 0x830(0x30)
	Struct WeightedProbabilityRangeOfRanges                      RotationRateYaw;                                   // 0x860(0x30)
	class                                                        ThrownProjectileType;                              // 0x890(0x8)
	char                                                         pad0x48_DL7MV[0x48];                               // 0x898(0x48)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CannonballStatus: public StatusBase
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CannonEnchantmentDescAsset: public ShipPartDescAsset
{
public:
	Struct CannonEnchantmentDesc                                 CannonEnchantmentDesc;                             // 0x28(0x18)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonPitchRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonPitchRateRightStickAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class CannonRecoilComponent: public ActorComponent
{
public:
	float                                                        RecoilForce;                                       // 0xc8(0x4)
	char                                                         pad0x4_XSX8X[0x4];                                 // 0xcc(0x4)
	Class CurveFloat*                                            YawToRecoilForceModifierCurve;                     // 0xd0(0x8)
	bool                                                         IgnoreRecoilIfAttachedToParent;                    // 0xd8(0x1)
	char                                                         pad0x67_LO51Y[0x67];                               // 0xd9(0x67)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CannonRotationStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonSplashDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonYawRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CannonYawRateRightStickAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanPerformEmoteRadialContext: public RadialContextBase
{
public:
};


// Size 0x18 (Full Size[0x180] - InheritedSize[0x168]
class IterativeCanvasRenderTarget2D: public TextureRenderTarget2D
{
public:
};


// Size 0x3d8 (Full Size[0x4a0] - InheritedSize[0xc8]
class CanvasWorldMapComponent: public ActorComponent
{
public:
	int                                                          CanvasWidth;                                       // 0xc8(0x4)
	int                                                          CanvasHeight;                                      // 0xcc(0x4)
	class                                                        MapClass;                                          // 0xd0(0x8)
	int                                                          NumGridSquares;                                    // 0xd8(0x4)
	int                                                          MaxUpdateDist;                                     // 0xdc(0x4)
	float                                                        SquareShipUpdateDist;                              // 0xe0(0x4)
	float                                                        ShipUpdateRot;                                     // 0xe4(0x4)
	TArray<struct ShipIcons>                                     ShipIcons;                                         // 0xe8(0x10)
	Class Texture*                                               OffscreenArrowTexture;                             // 0xf8(0x8)
	Class Texture*                                               CompassTexture;                                    // 0x100(0x8)
	Struct Vector2D                                              CompassPosition;                                   // 0x108(0x8)
	Class Font*                                                  Font;                                              // 0x110(0x8)
	Struct Vector2D                                              GridLabelScreenMin;                                // 0x118(0x8)
	Struct Vector2D                                              GridLabelEdgeOffset;                               // 0x120(0x8)
	float                                                        GridLabelSize;                                     // 0x128(0x4)
	float                                                        IslandLabelSize;                                   // 0x12c(0x4)
	float                                                        IslandLabelFadeoutZoom;                            // 0x130(0x4)
	Struct CanvasLerpData                                        IslandLabelFadeData;                               // 0x134(0x10)
	Struct CanvasLerpData                                        OffscreenIndicatorFadeData;                        // 0x144(0x10)
	Struct Box2D                                                 OffscreenIndicatorSafe;                            // 0x154(0x14)
	Struct Box2D                                                 OffscreenIndicatorBounds;                          // 0x168(0x14)
	float                                                        OffscreenArrowOffset;                              // 0x17c(0x4)
	Struct LinearColor                                           BackgroundColour;                                  // 0x180(0x10)
	TArray<struct ReapersMarkBootyItemIcons>                     ReapersMarkBootyItemIcons;                         // 0x190(0x10)
	Struct Vector2D                                              ReapersMarkBootyItemOffset;                        // 0x1a0(0x8)
	Class Texture*                                               CrosshairTexture;                                  // 0x1a8(0x8)
	Class Texture*                                               CrosshairEmptyTexture;                             // 0x1b0(0x8)
	Class Texture*                                               PinTexture;                                        // 0x1b8(0x8)
	Class Texture*                                               PinTextureHighlight;                               // 0x1c0(0x8)
	Class Texture*                                               PathDropTexture;                                   // 0x1c8(0x8)
	float                                                        LineTextureWidth;                                  // 0x1d0(0x4)
	float                                                        LineTextureLength;                                 // 0x1d4(0x4)
	TArray<struct TrackedShipIcons>                              TrackedShipIcons;                                  // 0x1d8(0x10)
	Class Texture*                                               AllianceFlagIcon;                                  // 0x1e8(0x8)
	TArray<class Texture*>                                       ReapersMarkFlagIcons;                              // 0x1f0(0x10)
	TArray<class Texture*>                                       ReapersBonesIcons;                                 // 0x200(0x10)
	Class Texture*                                               ReapersMarkShipIcon;                               // 0x210(0x8)
	Struct Vector2D                                              ShipFlagOverlayOffset;                             // 0x218(0x8)
	Struct Vector2D                                              SecondaryShipFlagOverlayOffset;                    // 0x220(0x8)
	float                                                        ShipFlagOverlayScale;                              // 0x228(0x4)
	Struct Vector2D                                              MarkerFlagOverlayOffset;                           // 0x22c(0x8)
	float                                                        MarkerFlagOverlayScale;                            // 0x234(0x4)
	Struct Vector2D                                              FactionIconOverlayOffset;                          // 0x238(0x8)
	Struct Vector2D                                              SecondaryFactionIconOverlayOffset;                 // 0x240(0x8)
	Class IslandEventHUDData*                                    IslandEventHUDData;                                // 0x248(0x8)
	TArray<struct MaxStreakFactionsIconInfo>                     MaxStreakFactionsIconInfo;                         // 0x250(0x10)
	TArray<struct FactionsIconInfo>                              FactionsIconInfo;                                  // 0x260(0x10)
	TArray<struct TrackedShips>                                  TrackedShips;                                      // 0x270(0x10)
	TArray<struct TrackedBootyItemInfos>                         TrackedBootyItemInfos;                             // 0x280(0x10)
	Class IterativeCanvasRenderTarget2D*                         RenderTarget;                                      // 0x290(0x8)
	char                                                         pad0x98_QHUM7[0x98];                               // 0x298(0x98)
	Class MapTableCanvasDataAsset*                               CanvasDataAsset;                                   // 0x330(0x8)
	char                                                         pad0x168_60FOB[0x168];                             // 0x338(0x168)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class CapstanDescAsset: public ShipPartDescAsset
{
public:
	Struct CapstanDesc                                           CapstanDesc;                                       // 0x28(0x48)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class DamageableShipPartAudioParams: public DataAsset
{
public:
	Class WwiseEvent*                                            DamageLevelEvent;                                  // 0x28(0x8)
	Class WwiseObjectPoolWrapper*                                DamageLevelAudioPool;                              // 0x30(0x8)
	struct FName                                                 DamageLevelAudioSwitchName;                        // 0x38(0x8)
	TArray<struct FName>                                         DamageLevelAudioSwitchValues;                      // 0x40(0x10)
};


// Size 0x4e8 (Full Size[0x8b0] - InheritedSize[0x3c8]
class Capstan: public Actor
{
public:
	char                                                         pad0x40_GHWQZ[0x40];                               // 0x3c8(0x40)
	Struct CapstanParams                                         Parameters;                                        // 0x408(0x14)
	float                                                        MaxReleaseAngle;                                   // 0x41c(0x4)
	float                                                        MaxReleaseHeight;                                  // 0x420(0x4)
	float                                                        MaxAngle;                                          // 0x424(0x4)
	bool                                                         StartRaised;                                       // 0x428(0x1)
	char                                                         pad0x7_GB7PL[0x7];                                 // 0x429(0x7)
	Class ControllableIntentCombinerComponent*                   IntentCombinerComponent;                           // 0x430(0x8)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x438(0x8)
	Class StaticMeshMemoryConstraintComponent*                   MeshComponent;                                     // 0x440(0x8)
	Class ChildActorComponent*                                   CapstanReleaseComponent;                           // 0x448(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x450(0x8)
	Class CircularItemDropRedirectorComponent*                   ItemDropRedirector;                                // 0x458(0x8)
	TArray<class CapstanArm*>                                    CapstanArms;                                       // 0x460(0x10)
	Struct CapstanAudioParams                                    AudioParameters;                                   // 0x470(0x68)
	bool                                                         CanSpinInfinitely;                                 // 0x4d8(0x1)
	char                                                         pad0x17_FU179[0x17];                               // 0x4d9(0x17)
	Class ShipDamageableComponent*                               CapstanDamageComponent;                            // 0x4f0(0x8)
	float                                                        ChanceToDropTheAnchorOnDamage;                     // 0x4f8(0x4)
	Struct Vector                                                ShipPartFireCellActorSpaceLocation;                // 0x4fc(0xc)
	char                                                         pad0x50_1P453[0x50];                               // 0x508(0x50)
	Struct CapstanNetState                                       NetState;                                          // 0x558(0x8)
	Struct WwiseEmitter                                          CapstanEmitter;                                    // 0x560(0x20)
	Class DamageableShipPartAudioParams*                         CapstanDamageLevelAudio;                           // 0x580(0x8)
	Class ParticleSystem*                                        CapstanDamageParticleSystem;                       // 0x588(0x8)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x590(0xa0)
	char                                                         pad0x230_7KJ3B[0x230];                             // 0x630(0x230)
	Class CapstanDescAsset*                                      DescToSetWhenSafe;                                 // 0x860(0x8)
	Class CapstanDescAsset*                                      CurrentCapstanDesc;                                // 0x868(0x8)
	char                                                         pad0x2_9UMM1[0x2];                                 // 0x870(0x2)
	bool                                                         IsCursed;                                          // 0x872(0x1)
	char                                                         pad0x1_LB8T0[0x1];                                 // 0x873(0x1)
	float                                                        CursedIntent;                                      // 0x874(0x4)
	char                                                         pad0x28_YGAWI[0x28];                               // 0x878(0x28)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x8a0(0x8)
	char                                                         pad0x8_EOWE9[0x8];                                 // 0x8a8(0x8)
};


// Size 0x18 (Full Size[0x8c8] - InheritedSize[0x8b0]
class SpectacleCapstan: public Capstan
{
public:
	char                                                         pad0x8_61JTJ[0x8];                                 // 0x8b0(0x8)
	float                                                        DisengagedRotationSpeed;                           // 0x8b8(0x4)
	float                                                        DisengagedDropSpeed;                               // 0x8bc(0x4)
	bool                                                         IsEngaged;                                         // 0x8c0(0x1)
	char                                                         pad0x7_LBVPP[0x7];                                 // 0x8c1(0x7)
};


// Size 0x178 (Full Size[0x2a0] - InheritedSize[0x128]
class RepairableComponent: public InteractableComponent
{
public:
	char                                                         pad0x48_JGQKG[0x48];                               // 0x128(0x48)
	float                                                        InteractionPointDepthOffset;                       // 0x170(0x4)
	float                                                        MaximumRepairAngleToRepairer;                      // 0x174(0x4)
	float                                                        MaximumRepairDistance;                             // 0x178(0x4)
	float                                                        RepairTime;                                        // 0x17c(0x4)
	class                                                        RepairType;                                        // 0x180(0x8)
	Class SceneComponent*                                        RepairMountParent;                                 // 0x188(0x8)
	Struct Transform                                             RepairMountOffset;                                 // 0x190(0x30)
	struct FName                                                 RepairMountSocket;                                 // 0x1c0(0x8)
	class                                                        AIInteractionType;                                 // 0x1c8(0x8)
	Struct Vector                                                AIInteractionOffset;                               // 0x1d0(0xc)
	int                                                          MaxDamageLevel;                                    // 0x1dc(0x4)
	TArray<struct MaxDamageLevelOverrides>                       MaxDamageLevelOverrides;                           // 0x1e0(0x10)
	Struct RepairableAuthoritiveRepairState                      AuthorityRepairableState;                          // 0x1f0(0x18)
	byte                                                         RepairableState;                                   // 0x208(0x1)
	char                                                         pad0x3_S1TT1[0x3];                                 // 0x209(0x3)
	int                                                          DamageLevel;                                       // 0x20c(0x4)
	byte                                                         InteractionState;                                  // 0x210(0x1)
	char                                                         pad0x8f_0SDLA[0x8f];                               // 0x211(0x8f)
};


// Size 0x50 (Full Size[0x560] - InheritedSize[0x510]
class CapstanArm: public ControllableObject
{
public:
	char                                                         pad0x8_IJVR7[0x8];                                 // 0x510(0x8)
	Class StaticMeshMemoryConstraintComponent*                   MeshComponent;                                     // 0x518(0x8)
	Class ControllableIntentComponent*                           IntentComponent;                                   // 0x520(0x8)
	Class RepairableComponent*                                   RepairableComponent;                               // 0x528(0x8)
	Struct StringAssetReference                                  IntactHandleMesh;                                  // 0x530(0x10)
	Class StaticMesh*                                            BrokenHandleMesh;                                  // 0x540(0x8)
	Class StaticMesh*                                            RepairedHandleMesh;                                // 0x548(0x8)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x550(0x8)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializerForIntactArm;                    // 0x558(0x8)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class CapstanEventDispatcherMock: public Object
{
public:
	char                                                         pad0x8_BPLO2[0x8];                                 // 0x28(0x8)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x30(0xa0)
};


// Size 0x50 (Full Size[0x450] - InheritedSize[0x400]
class CapstanMock: public InteractableBase
{
public:
	char                                                         pad0x18_SDB9Z[0x18];                               // 0x400(0x18)
	float                                                        State;                                             // 0x418(0x4)
	float                                                        RatioVelocity;                                     // 0x41c(0x4)
	float                                                        MaxRatioVelocity;                                  // 0x420(0x4)
	float                                                        MaxVelocityPerPlayer;                              // 0x424(0x4)
	int                                                          NumCurrentUsers;                                   // 0x428(0x4)
	bool                                                         Locked;                                            // 0x42c(0x1)
	char                                                         pad0x23_6U0NQ[0x23];                               // 0x42d(0x23)
};


// Size 0x60 (Full Size[0x4c8] - InheritedSize[0x468]
class CapstanRelease: public InteractableObject
{
public:
	Class StaticMeshMemoryConstraintComponent*                   MeshComponent;                                     // 0x468(0x8)
	struct FName                                                 TooltipSocket;                                     // 0x470(0x8)
	float                                                        ReleaseTime;                                       // 0x478(0x4)
	char                                                         pad0x44_4KL55[0x44];                               // 0x47c(0x44)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x4c0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapstanTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x98 (Full Size[0x460] - InheritedSize[0x3c8]
class CaptainCurtains: public Actor
{
public:
	char                                                         pad0x8_57JG0[0x8];                                 // 0x3c8(0x8)
	Class StaticMeshMemoryConstraintComponent*                   PrimaryCurtainMeshComponent;                       // 0x3d0(0x8)
	Class StaticMeshComponent*                                   SecondaryCurtainMeshComponent;                     // 0x3d8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3e0(0x8)
	Class CaptainCurtainsPartDescAsset*                          DescToSetWhenSafe;                                 // 0x3e8(0x8)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x3f0(0x8)
	char                                                         pad0x68_BZIWX[0x68];                               // 0x3f8(0x68)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CaptainCurtainsPartDescAsset: public ShipPartDescAsset
{
public:
	Struct CaptainCurtainsPartDesc                               CaptainCurtainsPartDesc;                           // 0x28(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainRammingAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class CaptainsVoyageRecipesDebugMenuGenerator: public DebugMenuEntryGenerator
{
public:
	bool                                                         Regenerate;                                        // 0x28(0x1)
	char                                                         pad0x7_EDGPF[0x7];                                 // 0x29(0x7)
	TArray<struct Proposals>                                     Proposals;                                         // 0x30(0x10)
	TArray<Str AssetNames>                                       AssetNames;                                        // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainTauntAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapturedByKrakenActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x298] - InheritedSize[0x298]
class CapturedByKrakenInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x138 (Full Size[0x200] - InheritedSize[0xc8]
class CargoRunCrateComponent: public ActorComponent
{
public:
	char                                                         pad0x10_1EYAL[0x10];                               // 0xc8(0x10)
	Class CargoRunCrateData*                                     CargoRunCrateData;                                 // 0xd8(0x8)
	Class CargoRunCrateCustomData*                               CargoRunCrateCustomData;                           // 0xe0(0x8)
	Struct CargoRunItemDropOffData                               DropOffData;                                       // 0xe8(0x28)
	byte                                                         WieldedState;                                      // 0x118(0x1)
	char                                                         pad0xe7_M11H3[0xe7];                               // 0x119(0xe7)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class CargoRunCrateCustomData: public DataAsset
{
public:
	TArray<struct FText>                                         CrateNames;                                        // 0x28(0x10)
	Struct CargoRunReward                                        DefaultRewards;                                    // 0x38(0x20)
	TArray<struct CompanyRewards>                                CompanyRewards;                                    // 0x58(0x10)
	TArray<struct FName>                                         StatsSubStrings;                                   // 0x68(0x10)
	TArray<struct DefaultStatsToFireUponPerfectOnTimeHandIn>     DefaultStatsToFireUponPerfectOnTimeHandIn;         // 0x78(0x10)
	TArray<struct CompanyOverrideStatsToFireUponPerfectOnTimeHandIn> CompanyOverrideStatsToFireUponPerfectOnTimeHandIn; // 0x88(0x10)
	TArray<struct CompanyHandInStats>                            CompanyHandInStats;                                // 0x98(0x10)
};


// Size 0x220 (Full Size[0xa50] - InheritedSize[0x830]
class CargoRunMap: public TreasureMap
{
public:
	char                                                         pad0x28_GF118[0x28];                               // 0x830(0x28)
	int                                                          CanvasWidth;                                       // 0x858(0x4)
	int                                                          CanvasHeight;                                      // 0x85c(0x4)
	Class Font*                                                  Font;                                              // 0x860(0x8)
	float                                                        FontScale;                                         // 0x868(0x4)
	float                                                        FontLineSpacingScale;                              // 0x86c(0x4)
	char                                                         pad0x20_RLHZJ[0x20];                               // 0x870(0x20)
	Class CargoRunMapLayout*                                     CargoRunMapLayout;                                 // 0x890(0x8)
	Struct CargoRunMapContents                                   Contents;                                          // 0x898(0x18)
	char                                                         pad0x1a0_MX23M[0x1a0];                             // 0x8b0(0x1a0)
};


// Size 0x148 (Full Size[0x210] - InheritedSize[0xc8]
class CargoRunParticipantComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NZWZL[0x8];                                 // 0xc8(0x8)
	class                                                        ConditionalStatForBootyHandIn;                     // 0xd0(0x8)
	class                                                        Company;                                           // 0xd8(0x8)
	char                                                         pad0x130_K9GML[0x130];                             // 0xe0(0x130)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CarouselPirateDescConversion: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CarouselPirateGenerator: public BlueprintFunctionLibrary
{
public:
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class CarouselPirateGeneratorParamsAsset: public DataAsset
{
public:
	Struct CarouselPirateGeneratorParams                         Params;                                            // 0x28(0xc8)
};


// Size 0xd0 (Full Size[0x8b0] - InheritedSize[0x7e0]
class CarvedWoodenPlank: public StaticMeshWieldableItem
{
public:
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7e0(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7e8(0x8)
	float                                                        FOVBlendSpeed;                                     // 0x7f0(0x4)
	float                                                        TargetFOV;                                         // 0x7f4(0x4)
	Struct ItemUseSpeedParams                                    AimSpeedParams;                                    // 0x7f8(0x8)
	char                                                         pad0xb0_35JNQ[0xb0];                               // 0x800(0xb0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CatalogOfferDataAsset: public DataAsset
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class CatalogDiscountDataAsset: public DataAsset
{
public:
	Struct Guid                                                  DiscountId;                                        // 0x28(0x10)
	Struct FText                                                 DisplayName;                                       // 0x38(0x38)
	byte                                                         CurrencyType;                                      // 0x70(0x1)
	char                                                         pad0x3_D38P2[0x3];                                 // 0x71(0x3)
	char                                                         pad0x4_KIQB7[0x4];                                 // 0x74(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CatalogDataAsset: public DataAsset
{
public:
	Struct Guid                                                  CatalogId;                                         // 0x28(0x10)
	bool                                                         ExportAsRewardIds;                                 // 0x38(0x1)
	char                                                         pad0x7_40VGS[0x7];                                 // 0x39(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CatalogListDataAsset: public DataAsset
{
public:
	TArray<class CatalogDataAsset*>                              Catalogs;                                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CategoryDefaults: public DataAsset
{
public:
	TArray<struct CategoryDefaults>                              CategoryDefaults;                                  // 0x28(0x10)
};


// Size 0x110 (Full Size[0x4d8] - InheritedSize[0x3c8]
class ChaliceStatue: public Actor
{
public:
	Class StaticMeshComponent*                                   Mesh;                                              // 0x3c8(0x8)
	TArray<class ParticleSystemComponent*>                       PhaseParticleSystems;                              // 0x3d0(0x10)
	char                                                         pad0x58_SBAZ7[0x58];                               // 0x3e0(0x58)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x438(0xa0)
};


// Size 0x98 (Full Size[0x460] - InheritedSize[0x3c8]
class Chandelier: public Actor
{
public:
	char                                                         pad0x8_HHKR3[0x8];                                 // 0x3c8(0x8)
	Class StaticMeshMemoryConstraintComponent*                   ChandelierMeshComponent;                           // 0x3d0(0x8)
	Class StaticMeshMemoryConstraintComponent*                   FlamesMeshComponent;                               // 0x3d8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3e0(0x8)
	Class ChandelierPartDescAsset*                               DescToSetWhenSafe;                                 // 0x3e8(0x8)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x3f0(0x8)
	char                                                         pad0x68_IDGUY[0x68];                               // 0x3f8(0x68)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ChandelierPartDescAsset: public ShipPartDescAsset
{
public:
	Struct ChandelierPartDesc                                    ChandelierPartDesc;                                // 0x28(0x30)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class CharacterMovementAINoiseEventComponentParams: public DataAsset
{
public:
	struct FName                                                 MovementTag;                                       // 0x28(0x8)
	Class CurveFloat*                                            WalkingSpeedToNoiseRange;                          // 0x30(0x8)
	float                                                        CrouchedWalkingNoiseRange;                         // 0x38(0x4)
	float                                                        MovingInWaterNoiseRange;                           // 0x3c(0x4)
	float                                                        JumpNoiseRange;                                    // 0x40(0x4)
	float                                                        LandNoiseRange;                                    // 0x44(0x4)
	float                                                        MinSpeedToTriggerLandedEvent;                      // 0x48(0x4)
	char                                                         pad0x4_WYLXU[0x4];                                 // 0x4c(0x4)
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class CharacterAINoiseEventComponent: public ActorComponent
{
public:
	Class CharacterMovementAINoiseEventComponentParams*          Params;                                            // 0xc8(0x8)
	Class AthenaCharacter*                                       AthenaCharacter;                                   // 0xd0(0x8)
	Class AthenaCharacterMovementComponent*                      CharacterMovementComponent;                        // 0xd8(0x8)
	char                                                         pad0x38_ESIBL[0x38];                               // 0xe0(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterAudioInterface: public Interface
{
public:
};


// Size 0x19a0 (Full Size[0x1a68] - InheritedSize[0xc8]
class CharacterAudioComponent: public ActorComponent
{
public:
	char                                                         pad0x10_JFNSQ[0x10];                               // 0xc8(0x10)
	Class CharacterAudioComponentParams*                         Params;                                            // 0xd8(0x8)
	Class WwiseEvent*                                            MonsterCallEvent;                                  // 0xe0(0x8)
	int                                                          MonsterCallHourToPlay;                             // 0xe8(0x4)
	struct FName                                                 TimeOfDayRtpc;                                     // 0xec(0x8)
	char                                                         pad0x4_X16A0[0x4];                                 // 0xf4(0x4)
	Struct PlayerMusicController                                 PlayerMusicController;                             // 0xf8(0x210)
	Class CharacterAudioFootfallControllerParams*                FootfallParams;                                    // 0x308(0x8)
	Class CharacterAudioEventControllerParams*                   EventParams;                                       // 0x310(0x8)
	class                                                        PegLegCategory;                                    // 0x318(0x8)
	class                                                        BootsCategory;                                     // 0x320(0x8)
	char                                                         pad0x38_4Y4AI[0x38];                               // 0x328(0x38)
	Class AudioSpaceTrackerComponent*                            AudioSpaceTracker;                                 // 0x360(0x8)
	Class AthenaPlayerCharacter*                                 AthenaPlayerCharacter;                             // 0x368(0x8)
	char                                                         pad0x16a0_JLALY[0x16a0];                           // 0x370(0x16a0)
	Class AudioSpaceDataAsset*                                   CurrentSpace;                                      // 0x1a10(0x8)
	char                                                         pad0x18_WG4F5[0x18];                               // 0x1a18(0x18)
	Class Ship*                                                  CurrentShip;                                       // 0x1a30(0x8)
	char                                                         pad0x30_3DU2X[0x30];                               // 0x1a38(0x30)
};


// Size 0x2c8 (Full Size[0x2f0] - InheritedSize[0x28]
class CharacterAudioComponentParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                CharacterAudioPool;                                // 0x28(0x8)
	Class WwiseEvent*                                            CausedDamageAudioEvent;                            // 0x30(0x8)
	Class WwiseEvent*                                            CausedDamageAudioEventNonMusic;                    // 0x38(0x8)
	Class WwiseEvent*                                            CausedAIShipDamageAudioEvent;                      // 0x40(0x8)
	Class WwiseEvent*                                            CausedAggressiveGhostShipDamageAudioEvent;         // 0x48(0x8)
	Class WwiseEvent*                                            CharacterDeadAudioEvent;                           // 0x50(0x8)
	Class WwiseEvent*                                            KilledCharacterAudioEvent;                         // 0x58(0x8)
	Class WwiseEvent*                                            KilledCharacterSfxEvent;                           // 0x60(0x8)
	Class WwiseEvent*                                            LocalPlayerFireStart;                              // 0x68(0x8)
	Class WwiseEvent*                                            LocalPlayerFireStop;                               // 0x70(0x8)
	Class WwiseEvent*                                            RemotePlayerFireStart;                             // 0x78(0x8)
	Class WwiseEvent*                                            RemotePlayerFireStop;                              // 0x80(0x8)
	Class WwiseEvent*                                            LocalPlayerExtinguished;                           // 0x88(0x8)
	Class WwiseEvent*                                            RemotePlayerExtinguished;                          // 0x90(0x8)
	Struct StateCategoryGroup                                    CharacterState;                                    // 0x98(0x20)
	Class WwiseEvent*                                            PlayCharacterRespawn;                              // 0xb8(0x8)
	struct FName                                                 CharacterStateDead;                                // 0xc0(0x8)
	struct FName                                                 CharacterStateFall;                                // 0xc8(0x8)
	struct FName                                                 CharacterStateStun;                                // 0xd0(0x8)
	struct FName                                                 CharacterStateFire;                                // 0xd8(0x8)
	struct FName                                                 CharacterStateDefault;                             // 0xe0(0x8)
	struct FName                                                 CharacterStateTeleporting;                         // 0xe8(0x8)
	struct FName                                                 CharacterStateSleeping;                            // 0xf0(0x8)
	Class WwiseEvent*                                            PlayPlayerVengeance;                               // 0xf8(0x8)
	Class WwiseEvent*                                            StopPlayerVengeance;                               // 0x100(0x8)
	Class WwiseEvent*                                            PlayPlayerVengeanceFinished;                       // 0x108(0x8)
	struct FName                                                 PlayerVengeanceRTPC;                               // 0x110(0x8)
	float                                                        PlayerVengeanceMaxRtpc;                            // 0x118(0x4)
	char                                                         pad0x4_HXQPY[0x4];                                 // 0x11c(0x4)
	TArray<struct ExplosionSoundEvents>                          ExplosionSoundEvents;                              // 0x120(0x10)
	Class WwiseEvent*                                            PlayPlayerSlidingDownLadder;                       // 0x130(0x8)
	Class WwiseEvent*                                            StopPlayerSlidingDownLadder;                       // 0x138(0x8)
	struct FName                                                 LadderSlideSpeedRtpc;                              // 0x140(0x8)
	Class WwiseEvent*                                            LadderUse;                                         // 0x148(0x8)
	Class WwiseEvent*                                            CannonUse;                                         // 0x150(0x8)
	Class WwiseEvent*                                            WheelUse;                                          // 0x158(0x8)
	Class WwiseEvent*                                            SailManipulatorUse;                                // 0x160(0x8)
	Class WwiseEvent*                                            CharacterTorsoEnteredWater;                        // 0x168(0x8)
	Class WwiseEvent*                                            CharacterTorsoExitedWater;                         // 0x170(0x8)
	Class WwiseEvent*                                            CharacterLeftWaterToBoatLadder;                    // 0x178(0x8)
	struct FName                                                 PlayerSpeedRtpc;                                   // 0x180(0x8)
	float                                                        PlayerSpeedRtpcMin;                                // 0x188(0x4)
	float                                                        PlayerSpeedRtpcMax;                                // 0x18c(0x4)
	struct FName                                                 PlayerLadderWaterExitSpeedRtpc;                    // 0x190(0x8)
	float                                                        PlayerLadderWaterExitSpeedMin;                     // 0x198(0x4)
	float                                                        PlayerLadderWaterExitSpeedMax;                     // 0x19c(0x4)
	struct FName                                                 BoatSpeedForSeaRocksAmplificationRtpc;             // 0x1a0(0x8)
	float                                                        BoatSpeedForSeaRocksMax;                           // 0x1a8(0x4)
	struct FName                                                 BrokeLegSwitchGroupName;                           // 0x1ac(0x8)
	struct FName                                                 BrokeLegSwitch;                                    // 0x1b4(0x8)
	struct FName                                                 HealedLegSwitch;                                   // 0x1bc(0x8)
	struct FName                                                 FallDamageRTPC;                                    // 0x1c4(0x8)
	char                                                         pad0x4_QPIM9[0x4];                                 // 0x1cc(0x4)
	TArray<struct HealthChangeSfx>                               HealthChangeSfx;                                   // 0x1d0(0x10)
	Class WwiseEvent*                                            LocalPlayerTeleportPlay;                           // 0x1e0(0x8)
	Class WwiseEvent*                                            LocalPlayerTeleportStop;                           // 0x1e8(0x8)
	Class AudioSpaceDataAsset*                                   LargeShipMapDeck;                                  // 0x1f0(0x8)
	Class AudioSpaceDataAsset*                                   LargeShipBrigDeck;                                 // 0x1f8(0x8)
	Class AudioSpaceDataAsset*                                   LargeShipCaptainsCabin;                            // 0x200(0x8)
	Class AudioSpaceDataAsset*                                   IslandTavern;                                      // 0x208(0x8)
	Class AudioSpaceDataAsset*                                   IslandCave;                                        // 0x210(0x8)
	float                                                        SmallestEnclosedRatioToTriggerCave;                // 0x218(0x4)
	byte                                                         PredominantCaveSurface;                            // 0x21c(0x1)
	char                                                         pad0x3_QRY5Z[0x3];                                 // 0x21d(0x3)
	float                                                        LargestCaveSizeMetersSquared;                      // 0x220(0x4)
	float                                                        SmallestCaveSizeMetersSquared;                     // 0x224(0x4)
	struct FName                                                 CaveSizeRtpcName;                                  // 0x228(0x8)
	float                                                        SmallestEnclosedRatioToTriggerCaveMusicNode;       // 0x230(0x4)
	float                                                        LandingEventCooldownTime;                          // 0x234(0x4)
	float                                                        FogPenetrationAudioThresholdMin;                   // 0x238(0x4)
	float                                                        FogPenetrationAudioThresholdMax;                   // 0x23c(0x4)
	struct FName                                                 FogDensityRTPC;                                    // 0x240(0x8)
	TArray<struct FogTypeSfx>                                    FogTypeSfx;                                        // 0x248(0x10)
	Class WwiseEvent*                                            TrapTriggeredEvent;                                // 0x258(0x8)
	Class WwiseEvent*                                            EmoteCameraStart;                                  // 0x260(0x8)
	Class WwiseEvent*                                            EmoteCameraStop;                                   // 0x268(0x8)
	Class WwiseEvent*                                            ReviveSuccessful;                                  // 0x270(0x8)
	Class WwiseEvent*                                            OtherPlayers_BodyEvaporates;                       // 0x278(0x8)
	Class WwiseEvent*                                            StartSleepingEvent;                                // 0x280(0x8)
	Class WwiseEvent*                                            StopSleepingEvent;                                 // 0x288(0x8)
	Class WwiseEvent*                                            StartSleepingWithoutFartingEvent;                  // 0x290(0x8)
	Class WwiseEvent*                                            StopSleepingWithoutFartingEvent;                   // 0x298(0x8)
	struct FName                                                 GenderSwitchGroupName;                             // 0x2a0(0x8)
	struct FName                                                 GenderSwitchFemale;                                // 0x2a8(0x8)
	struct FName                                                 GenderSwitchMale;                                  // 0x2b0(0x8)
	Class WwiseEvent*                                            AimAssistDirectlyOverTargetStart;                  // 0x2b8(0x8)
	Class WwiseEvent*                                            AimAssistDirectlyOverTargetStop;                   // 0x2c0(0x8)
	Class WwiseEvent*                                            AimAssistNearTargetStart;                          // 0x2c8(0x8)
	Class WwiseEvent*                                            AimAssistNearTargetStop;                           // 0x2d0(0x8)
	struct FName                                                 AimAssistPercentageAwayFromTargetRTPC;             // 0x2d8(0x8)
	struct FName                                                 AimAssistPercentageXOffsetRTPC;                    // 0x2e0(0x8)
	struct FName                                                 AimAssistPercentageYOffsetRTPC;                    // 0x2e8(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CharacterAudioEventControllerParams: public DataAsset
{
public:
	Class WwiseEvent*                                            WieldEvent;                                        // 0x28(0x8)
	Class WwiseEvent*                                            StowEvent;                                         // 0x30(0x8)
	Class WwiseEvent*                                            EnemyHitNotifyEvent;                               // 0x38(0x8)
	Class WwiseObjectPoolWrapper*                                EnemyHitNotifyPool;                                // 0x40(0x8)
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class CharacterAudioFootfallControllerParams: public DataAsset
{
public:
	struct FName                                                 PlayerSpeedRtpcName;                               // 0x28(0x8)
	float                                                        MinPlayerSpeedRtpcValue;                           // 0x30(0x4)
	float                                                        MaxPlayerSpeedRtpcValue;                           // 0x34(0x4)
	struct FName                                                 WadingRtpcName;                                    // 0x38(0x8)
	float                                                        MinWadingWwiseRtpcValue;                           // 0x40(0x4)
	float                                                        MaxWadingWwiseRtpcValue;                           // 0x44(0x4)
	struct FName                                                 FootstepSquelchRtpcName;                           // 0x48(0x8)
	struct FName                                                 PlayerPerspectiveRtpcName;                         // 0x50(0x8)
	float                                                        PlayerPerspectiveRtpcValue;                        // 0x58(0x4)
	float                                                        RemotePlayerPerspectiveRtpcValue;                  // 0x5c(0x4)
	Class WwiseEvent*                                            FootfallEvent;                                     // 0x60(0x8)
	Class WwiseEvent*                                            FootfallPacingEvent;                               // 0x68(0x8)
	Class WwiseEvent*                                            CharacterCleanLandEvent;                           // 0x70(0x8)
	Class WwiseEvent*                                            CharacterJumpEvent;                                // 0x78(0x8)
	Class WwiseEvent*                                            CharacterSplashEvent;                              // 0x80(0x8)
	Class WwiseObjectPoolWrapper*                                FootfallsPool;                                     // 0x88(0x8)
	struct FName                                                 VerticalSpeedRtpcName;                             // 0x90(0x8)
	float                                                        MinVerticalSpeedRtpcValue;                         // 0x98(0x4)
	float                                                        MaxVerticalSpeedRtpcValue;                         // 0x9c(0x4)
	struct FName                                                 BrokenLegSwitchGroup;                              // 0xa0(0x8)
	struct FName                                                 BrokenLegSwitchBroken;                             // 0xa8(0x8)
	struct FName                                                 FootwareCategorySwitchGroup;                       // 0xb0(0x8)
	struct FName                                                 FootwareCategoryBoots;                             // 0xb8(0x8)
	struct FName                                                 FootwareCategoryBarefoot;                          // 0xc0(0x8)
	struct FName                                                 FootwareCategoryPegleg;                            // 0xc8(0x8)
	struct FName                                                 FootfallEmoteSwitchGroup;                          // 0xd0(0x8)
	struct FName                                                 PlayingEmoteSwitch;                                // 0xd8(0x8)
	struct FName                                                 HotFloorSwitchGroup;                               // 0xe0(0x8)
	struct FName                                                 HotFloorActive;                                    // 0xe8(0x8)
	struct FName                                                 FootfallBuriedTreasureRTPCName;                    // 0xf0(0x8)
	float                                                        DecalOverlapRadius;                                // 0xf8(0x4)
	float                                                        SteppingOnDecalRTPCValue;                          // 0xfc(0x4)
	float                                                        NotSteppingOnDecalRTPCValue;                       // 0x100(0x4)
	struct FName                                                 PirateTypeSwitchGroup;                             // 0x104(0x8)
	struct FName                                                 PirateTypeGhost;                                   // 0x10c(0x8)
	struct FName                                                 PirateTypeSkeleton;                                // 0x114(0x8)
	char                                                         pad0x4_MYGTN[0x4];                                 // 0x11c(0x4)
};


// Size 0x8 (Full Size[0x128] - InheritedSize[0x120]
class SkeletonAudioFootfallControllerParams: public CharacterAudioFootfallControllerParams
{
public:
	Class WwiseEvent*                                            SkeletonLayerFootfallEvent;                        // 0x120(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterFootImpactInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSocketCollisionDelegate: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSocketCollisionServiceInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x1a8] - InheritedSize[0xc8]
class CharacterFootImpactComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NERIF[0x8];                                 // 0xc8(0x8)
	TArray<struct SocketCollisionDesc>                           SocketCollisionDesc;                               // 0xd0(0x10)
	float                                                        SocketOffsetTolerance;                             // 0xe0(0x4)
	float                                                        CapsuleOffsetTolerance;                            // 0xe4(0x4)
	char                                                         pad0xc0_OS4ZV[0xc0];                               // 0xe8(0xc0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterInteractionComponentTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class CharacterPossessedEventTestComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSocketCollisionFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x1138 (Full Size[0x1500] - InheritedSize[0x3c8]
class CharacterSocketCollisionService: public Actor
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class CharacterVfxComponent: public ActorComponent
{
public:
	Class ParticleSystemComponent*                               WindVFX;                                           // 0xc8(0x8)
	Class AthenaPlayerCharacter*                                 OwnerCharacter;                                    // 0xd0(0x8)
	char                                                         pad0x8_XVFS1[0x8];                                 // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChargedProjectileDamagerType: public DamagerType
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class CheckIsActorCriticalStep: public TaleQuestStep
{
public:
	Class CheckIsActorCriticalStepDesc*                          StepDesc;                                          // 0x98(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveCriticalActorStep: public TaleQuestStep
{
public:
	Class RemoveCriticalActorStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class CheckIsActorCriticalStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    ActorToCheck;                                      // 0x80(0x30)
	Struct QuestVariableBool                                     IsCritical;                                        // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CheerAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CheerAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0x138 (Full Size[0x200] - InheritedSize[0xc8]
class ChestOfRageComponent: public ActorComponent
{
public:
	char                                                         pad0x8_TR9GC[0x8];                                 // 0xc8(0x8)
	Class ChestOfRageDataAsset*                                  ChestOfRageDataAsset;                              // 0xd0(0x8)
	Struct ChestOfRageReplicatedData                             ReplicatedData;                                    // 0xd8(0xc)
	char                                                         pad0x8c_8Z0II[0x8c];                               // 0xe4(0x8c)
	Class ParticleSystemComponent*                               RageBuildingVfxEmitter;                            // 0x170(0x8)
	Class ParticleSystemComponent*                               SteamingVfxEmitter;                                // 0x178(0x8)
	Class ParticleSystemComponent*                               OnFireVfxEmitter;                                  // 0x180(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x188(0x10)
	TArray<class Actor*>                                         RageContributors;                                  // 0x198(0x10)
	char                                                         pad0x58_LHM6L[0x58];                               // 0x1a8(0x58)
};


// Size 0xd0 (Full Size[0xf8] - InheritedSize[0x28]
class ChestOfRageDataAsset: public DataAsset
{
public:
	float                                                        DormantDuration;                                   // 0x28(0x4)
	float                                                        RageBuildingDuration;                              // 0x2c(0x4)
	float                                                        TimeInToRageBuildingToAbsorbWater;                 // 0x30(0x4)
	float                                                        SteamingDuration;                                  // 0x34(0x4)
	float                                                        TimeInToSteamingStateWhereHitWillCauseInstantExplosion; // 0x38(0x4)
	float                                                        OnFireDuration;                                    // 0x3c(0x4)
	float                                                        InWaterCoolingRate;                                // 0x40(0x4)
	float                                                        ForcedInWaterCoolingRate;                          // 0x44(0x4)
	float                                                        InRainCoolingRate;                                 // 0x48(0x4)
	float                                                        WaterHeightCheckOffset;                            // 0x4c(0x4)
	Class CurveFloat*                                            TimeToRemovePerSplash;                             // 0x50(0x8)
	float                                                        HealthChangePerSecondWhilstCarryingASteamingChest; // 0x58(0x4)
	float                                                        PercentageToHeatHullWaterPerSecond;                // 0x5c(0x4)
	float                                                        ChestInSuperheatedWaterSteadyStatePercentage;      // 0x60(0x4)
	char                                                         pad0x4_RKOGX[0x4];                                 // 0x64(0x4)
	Class Object*                                                RageBuildingVfx;                                   // 0x68(0x8)
	float                                                        MinimumRageValueToTriggerRageBuildingVfx;          // 0x70(0x4)
	char                                                         pad0x4_XHUBF[0x4];                                 // 0x74(0x4)
	Class Object*                                                SteamingVfx;                                       // 0x78(0x8)
	Class Object*                                                OnFireVfx;                                         // 0x80(0x8)
	Class Object*                                                ExplosionVfx;                                      // 0x88(0x8)
	Class Object*                                                CooledDownSteamBlast;                              // 0x90(0x8)
	Class Object*                                                OnTakingDamageVfx;                                 // 0x98(0x8)
	Class WwiseEvent*                                            OnTakingDamageSfx;                                 // 0xa0(0x8)
	Class WwiseEvent*                                            StartWhistlingOneShotSfx;                          // 0xa8(0x8)
	Class WwiseEvent*                                            StartWhistlingSfx;                                 // 0xb0(0x8)
	Class WwiseEvent*                                            StopWhistlingSfx;                                  // 0xb8(0x8)
	Class WwiseEvent*                                            StartRageBuildingSfx;                              // 0xc0(0x8)
	Class WwiseEvent*                                            StopRageBuildingSfx;                               // 0xc8(0x8)
	Class WwiseEvent*                                            ExplosionSfx;                                      // 0xd0(0x8)
	Class WwiseEvent*                                            ExtinguishedSfx;                                   // 0xd8(0x8)
	Class WwiseObjectPoolWrapper*                                AudioSFXPool;                                      // 0xe0(0x8)
	TArray<struct DamageTable>                                   DamageTable;                                       // 0xe8(0x10)
};


// Size 0x30 (Full Size[0xc8] - InheritedSize[0x98]
class ChooseIslandStep: public TaleQuestStep
{
public:
};


// Size 0xf0 (Full Size[0x170] - InheritedSize[0x80]
class ChooseIslandStepDesc: public TaleQuestStepDesc
{
public:
	bool                                                         UseVoyageRecipeIslandIfAvailable;                  // 0x80(0x1)
	char                                                         pad0x7_9LDPX[0x7];                                 // 0x81(0x7)
	Struct QuestVariableVector                                   SourceLocation;                                    // 0x88(0x30)
	Struct QuestVariableNameArray                                IslandsToIgnore;                                   // 0xb8(0x30)
	Struct VoyageLocationParams                                  LocationParams;                                    // 0xe8(0x58)
	Struct QuestVariableName                                     IslandName;                                        // 0x140(0x30)
};


// Size 0x30 (Full Size[0x7f0] - InheritedSize[0x7c0]
class CinematicCameraController: public DebugCameraController
{
public:
	Class AthenaPlayerController*                                AthenaPlayerController;                            // 0x7c0(0x8)
	TArray<struct FName>                                         BindingsToRemove;                                  // 0x7c8(0x10)
	char                                                         pad0x18_W6BCA[0x18];                               // 0x7d8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClawPummelAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ClawPummelStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ClearProgressSpawnStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ClearProgressSpawnStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ClearSpawnProgressStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ClearSpawnProgressStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ClearTaleProgressStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ClearTaleProgressStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ClimbLadderAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClothingLoadoutViewInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x208] - InheritedSize[0x170]
class ClothingChestViewModelComponent: public PossessionsChestViewModel
{
public:
	TArray<struct RandomFilters>                                 RandomFilters;                                     // 0x170(0x10)
	Struct StringAssetReference                                  RandomiseIcon;                                     // 0x180(0x10)
	Struct StringAssetReference                                  ClearIcon;                                         // 0x190(0x10)
	bool                                                         WithRandomiseButtons;                              // 0x1a0(0x1)
	bool                                                         WithClearButtons;                                  // 0x1a1(0x1)
	char                                                         pad0x6_89YLZ[0x6];                                 // 0x1a2(0x6)
	TArray<class Class*>                                         CategoriesWithClearButtonDisabled;                 // 0x1a8(0x10)
	TArray<class Class*>                                         CategoriesWithRandomiseButtonDisabled;             // 0x1b8(0x10)
	char                                                         pad0x20_OU2WD[0x20];                               // 0x1c8(0x20)
	TArray<class Class*>                                         Categories;                                        // 0x1e8(0x10)
	bool                                                         IncludeAllCategory;                                // 0x1f8(0x1)
	char                                                         pad0xf_BCQ44[0xf];                                 // 0x1f9(0xf)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClothingLoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmoteLoadoutControlInterface: public Interface
{
public:
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class EmoteInfo: public DataAsset
{
public:
	Struct EmoteData                                             EmoteData;                                         // 0x28(0xa0)
	Struct StringAssetReference                                  RadialIconPath;                                    // 0xc8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmoteLoadoutViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TitleLoadoutControlInterface: public Interface
{
public:
};


// Size 0x1c8 (Full Size[0x290] - InheritedSize[0xc8]
class ClothingLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x30_N7076[0x30];                               // 0xc8(0x30)
	Struct ClothingLoadoutContainer                              LoadoutContainer;                                  // 0xf8(0x18)
	Class Actor*                                                 OwningPlayer;                                      // 0x110(0x8)
	Class EmoteSettings*                                         EmoteSettings;                                     // 0x118(0x8)
	char                                                         pad0x78_8P75C[0x78];                               // 0x120(0x78)
	TArray<struct CustomEmotes>                                  CustomEmotes;                                      // 0x198(0x10)
	TArray<struct CustomCostumeEmotes>                           CustomCostumeEmotes;                               // 0x1a8(0x10)
	TArray<struct CustomCurseEmotes>                             CustomCurseEmotes;                                 // 0x1b8(0x10)
	char                                                         pad0xc8_LQKZI[0xc8];                               // 0x1c8(0xc8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ClothingLoadoutContainsItemRadialContext: public RadialContextBase
{
public:
	class                                                        TargetItem;                                        // 0x28(0x8)
	TArray<class Class*>                                         MustAlsoBeWearing;                                 // 0x30(0x10)
	TArray<class Class*>                                         MustNotBeWearing;                                  // 0x40(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CloudDomeService: public Object
{
public:
	char                                                         pad0x8_HAXVJ[0x8];                                 // 0x28(0x8)
	TArray<class Object*>                                        RegisteredCloudDomes;                              // 0x30(0x10)
};


// Size 0x1c0 (Full Size[0x588] - InheritedSize[0x3c8]
class CloudSystem: public Actor
{
public:
	Struct CloudDomeParameters                                   CloudDome;                                         // 0x3c8(0x28)
	Struct CloudVisualParameters                                 CloudVisuals;                                      // 0x3f0(0x70)
	Struct CloudTileParameters                                   CloudTileGeneration;                               // 0x460(0x20)
	Struct CloudWeatherParameters                                CloudWeather;                                      // 0x480(0x28)
	TArray<struct NormalizedCloudWeights>                        NormalizedCloudWeights;                            // 0x4a8(0x10)
	Struct Vector2D                                              CurrentWindAngleAndSpeed;                          // 0x4b8(0x8)
	float                                                        CloudSystemMaxActiveHeight;                        // 0x4c0(0x4)
	float                                                        CloudSystemMinActiveHeight;                        // 0x4c4(0x4)
	int                                                          CloudTileGeneratedNumber;                          // 0x4c8(0x4)
	bool                                                         CloudSystemIsActive;                               // 0x4cc(0x1)
	char                                                         pad0xb_WO7F9[0xb];                                 // 0x4cd(0xb)
	TArray<struct CloudTile>                                     CloudTile;                                         // 0x4d8(0x10)
	Struct Vector2D                                              GlobalCloudTileDisplacement;                       // 0x4e8(0x8)
	Struct Vector2D                                              TileOffsets;                                       // 0x4f0(0x8)
	char                                                         pad0x18_T1OM4[0x18];                               // 0x4f8(0x18)
	float                                                        CloudTileScale;                                    // 0x510(0x4)
	bool                                                         AreCloudsPossible;                                 // 0x514(0x1)
	char                                                         pad0x73_D0S5Z[0x73];                               // 0x515(0x73)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoastInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class CoastService: public Object
{
public:
};


// Size 0x18 (Full Size[0x4d8] - InheritedSize[0x4c0]
class CoherentBaseHUD: public HUD
{
public:
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class HttpClientComponent: public ActorComponent
{
public:
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class QuickInventoryComponent: public ActorComponent
{
public:
	char                                                         pad0x18_2YW1G[0x18];                               // 0xc8(0x18)
	class                                                        CannonballItemCategory;                            // 0xe0(0x8)
	class                                                        CursedCannonballItemCategory;                      // 0xe8(0x8)
	class                                                        FoodItemCategory;                                  // 0xf0(0x8)
	class                                                        RepairablesItemCategory;                           // 0xf8(0x8)
	class                                                        BaitItemCategory;                                  // 0x100(0x8)
	class                                                        FireBombCategory;                                  // 0x108(0x8)
	class                                                        ChainShotCategory;                                 // 0x110(0x8)
	class                                                        FireworkCategory;                                  // 0x118(0x8)
	char                                                         pad0x10_K9FDW[0x10];                               // 0x120(0x10)
};


// Size 0x328 (Full Size[0x800] - InheritedSize[0x4d8]
class AthenaHUD: public CoherentBaseHUD
{
public:
	char                                                         pad0x10_DUBWX[0x10];                               // 0x4d8(0x10)
	bool                                                         PhotoModeEnabled;                                  // 0x4e8(0x1)
	char                                                         pad0x7_LTU0Z[0x7];                                 // 0x4e9(0x7)
	TArray<struct FName>                                         InputActionsToPropagate;                           // 0x4f0(0x10)
	Struct PlayerTalkingSettings                                 PlayerTalkingSettings;                             // 0x500(0x30)
	bool                                                         VirtualKeyboardEnabled;                            // 0x530(0x1)
	char                                                         pad0x7_VJL7S[0x7];                                 // 0x531(0x7)
	Class CoherentUIGTTooltipComponent*                          CoherentTooltipsComponent;                         // 0x538(0x8)
	Class CoherentUIGTTooltipDetailedComponent*                  CoherentTooltipsDetailedComponent;                 // 0x540(0x8)
	Class CoherentUIGTNameplateComponent*                        CoherentNameplatesComponent;                       // 0x548(0x8)
	Class CoherentUIGTHUDComponent*                              CoherentHUDComponent;                              // 0x550(0x8)
	Class CoherentUIGTInGameMenusComponent*                      CoherentInGameMenusComponent;                      // 0x558(0x8)
	Class IslandEventTooltipComponent*                           IslandEventTooltipComponent;                       // 0x560(0x8)
	Class CoherentToWwiseEventComponent*                         CoherentToWwiseEventComponent;                     // 0x568(0x8)
	Class UIInputForwardComponent*                               InputForwardComponent;                             // 0x570(0x8)
	Class UITelemetryComponent*                                  TelemetryComponent;                                // 0x578(0x8)
	Class CanvasWorldMapComponent*                               CanvasWorldMapComponent;                           // 0x580(0x8)
	Class WatermarkComponent*                                    WatermarkComponent;                                // 0x588(0x8)
	Class ShopViewModelComponent*                                ShopViewModelComponent;                            // 0x590(0x8)
	Class InGamePremiumShopViewModelComponent*                   PremiumShopViewModelComponent;                     // 0x598(0x8)
	Class MigrationUIComponent*                                  MigrationUIComponent;                              // 0x5a0(0x8)
	Struct HUDBlurParams                                         BlurParameters;                                    // 0x5a8(0x18)
	Class EquipmentChestViewModelComponent*                      EquipmentChestViewModelComponent;                  // 0x5c0(0x8)
	Class ClothingChestViewModelComponent*                       ClothingChestViewModelComponent;                   // 0x5c8(0x8)
	Class ArmoryChestViewModelComponent*                         ArmoryChestViewModelComponent;                     // 0x5d0(0x8)
	Class ShipCustomizationChestViewModelComponent*              ShipCustomizationChestViewModelComponent;          // 0x5d8(0x8)
	Class VoyageInventoryViewModelComponent*                     VoyageInventoryViewModelComponent;                 // 0x5e0(0x8)
	Class PiratePreviewComponent*                                PiratePreviewComponent;                            // 0x5e8(0x8)
	Class PetChestViewModelComponent*                            PetChestViewModelComponent;                        // 0x5f0(0x8)
	Class TrinketBoxViewModelComponent*                          TrinketBoxViewModelComponent;                      // 0x5f8(0x8)
	Class ItemPreviewComponent*                                  ItemPreviewComponent;                              // 0x600(0x8)
	Class EntitlementInformationComponent*                       EntitlementInformationComponent;                   // 0x608(0x8)
	Class HttpClientComponent*                                   HttpClientComponent;                               // 0x610(0x8)
	Class AimAssistDebugComponent*                               AimAssistDebugComponent;                           // 0x618(0x8)
	Class GamertagProviderHudComponent*                          GamerTagProviderComponent;                         // 0x620(0x8)
	Class Font*                                                  PerfCounterFont;                                   // 0x628(0x8)
	Class AudioVisualiserHudComponent*                           AudioVisualiserComponent;                          // 0x630(0x8)
	Class PiratePreviewComponentPirateProfileRTT*                PirateProfileRTTComponent;                         // 0x638(0x8)
	Class FrontendGuildComponent*                                FrontendGuildComponent;                            // 0x640(0x8)
	char                                                         pad0x28_S11E8[0x28];                               // 0x648(0x28)
	Struct HUDBlur                                               Blur;                                              // 0x670(0x18)
	Class AthenaDebugMenuComponent*                              AthenaDebugMenuComponent;                          // 0x688(0x8)
	char                                                         pad0xc0_DCN7T[0xc0];                               // 0x690(0xc0)
	TArray<class CoherentUIGTInstancedComponent*>                CoherentComponents;                                // 0x750(0x10)
	char                                                         pad0xa0_H4RJ4[0xa0];                               // 0x760(0xa0)
};


// Size 0x60 (Full Size[0x370] - InheritedSize[0x310]
class CoherentUIGTInstancedComponent: public CoherentUIGTBaseComponent
{
public:
	Struct FString                                               URL;                                               // 0x310(0x10)
	char                                                         pad0x8_V4X88[0x8];                                 // 0x320(0x8)
	Class MaterialInstanceDynamic*                               HUDMaterialInstance;                               // 0x328(0x8)
	Class PlayerController*                                      PlayerController;                                  // 0x330(0x8)
	char                                                         pad0x38_Z9OI0[0x38];                               // 0x338(0x38)
};


// Size 0x270 (Full Size[0x5e0] - InheritedSize[0x370]
class CoherentBaseHUDComponent: public CoherentUIGTInstancedComponent
{
public:
	Class Pawn*                                                  CurrentPawn;                                       // 0x370(0x8)
	char                                                         pad0x258_1IFVL[0x258];                             // 0x378(0x258)
	Class CoherentToWwiseEventComponent*                         AudioComponent;                                    // 0x5d0(0x8)
	char                                                         pad0x8_5HSAI[0x8];                                 // 0x5d8(0x8)
};


// Size 0x1c0 (Full Size[0x7a0] - InheritedSize[0x5e0]
class FrontendHudComponent: public CoherentBaseHUDComponent
{
public:
};


// Size 0x118 (Full Size[0x4e0] - InheritedSize[0x3c8]
class ShipPreviewActor: public Actor
{
public:
	char                                                         pad0x8_PZ6JY[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	Class ShipCustomizationLoadoutComponent*                     ShipCustomizationLoadoutComponent;                 // 0x3d8(0x8)
	Class ChildActorComponent*                                   LargeShip;                                         // 0x3e0(0x8)
	Class ChildActorComponent*                                   MediumShip;                                        // 0x3e8(0x8)
	Class ChildActorComponent*                                   SmallShip;                                         // 0x3f0(0x8)
	class                                                        BeginPlayShipVisibility;                           // 0x408(0x8)
	TArray<class Class*>                                         DefaultShipLiveryEntitlements;                     // 0x410(0x10)
	char                                                         pad0xc0_L2A5X[0xc0];                               // 0x420(0xc0)
};


// Size 0x130 (Full Size[0x230] - InheritedSize[0x100]
class ShipPreviewComponent: public CoherentUIGTRenderToTextureLiveView
{
public:
	char                                                         pad0x20_ZJSR1[0x20];                               // 0x100(0x20)
	Struct IntPoint                                              DefaultResolution;                                 // 0x120(0x8)
	Class RenderToTextureSceneDetails*                           Details;                                           // 0x128(0x8)
	char                                                         pad0x100_8HCOU[0x100];                             // 0x130(0x100)
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class UIInputForwardComponent: public ActorComponent
{
public:
	Class CoherentUIGTBaseComponent*                             TargetView;                                        // 0xc8(0x8)
	char                                                         pad0x60_R2HUB[0x60];                               // 0xd0(0x60)
};


// Size 0x178 (Full Size[0x650] - InheritedSize[0x4d8]
class FrontendHUD: public CoherentBaseHUD
{
public:
	char                                                         pad0x8_KX1U1[0x8];                                 // 0x4d8(0x8)
	Struct ObjectMessagingDispatcher                             ObjectMessagingDispatcher;                         // 0x4e0(0xa0)
	Class FrontendHudComponent*                                  FrontendHudComponent;                              // 0x580(0x8)
	Class UITelemetryComponent*                                  FrontendTelemetryComponent;                        // 0x588(0x8)
	Class UIInputForwardComponent*                               InputForwardComponent;                             // 0x590(0x8)
	Class FrontendCameraComponent*                               FrontendCameraComponent;                           // 0x598(0x8)
	Class PirateSelector*                                        PirateSelectorComponent;                           // 0x5a0(0x8)
	Class FrontendPremiumShopViewModelComponent*                 PremiumShopViewModelComponent;                     // 0x5a8(0x8)
	Class PiratePreviewComponentFrontend*                        PiratePreviewComponent;                            // 0x5b0(0x8)
	Class ItemPreviewComponent*                                  ItemPreviewComponent;                              // 0x5b8(0x8)
	Class ShipPreviewComponent*                                  ShipPreviewComponent;                              // 0x5c0(0x8)
	Class HttpClientComponent*                                   HttpClientComponent;                               // 0x5c8(0x8)
	Class UIDataRequestComponent*                                UIDataRequestComponent;                            // 0x5d0(0x8)
	Class FrontendEntitlementInformationComponent*               FrontendEntitlementInformationComponent;           // 0x5d8(0x8)
	Class GamertagProviderHudComponent*                          GamerTagProviderComponent;                         // 0x5e0(0x8)
	Class FrontendGuildComponent*                                FrontendGuildComponent;                            // 0x5e8(0x8)
	char                                                         pad0x8_MTTFW[0x8];                                 // 0x5f0(0x8)
	Class CoherentToWwiseEventComponent*                         CoherentToWwiseEventComponent;                     // 0x5f8(0x8)
	Class WwiseEvent*                                            PressAnyButtonSFX;                                 // 0x600(0x8)
	char                                                         pad0x48_7TEAA[0x48];                               // 0x608(0x48)
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class CoherentContentEngagementMessage: public FeatureToggledStringAssetReference
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CoherentToWwiseEventDataAsset: public DataAsset
{
public:
	TArray<struct CoherentToWwiseEventEntries>                   CoherentToWwiseEventEntries;                       // 0x28(0x10)
};


// Size 0x1b8 (Full Size[0x280] - InheritedSize[0xc8]
class CoherentToWwiseEventComponent: public ActorComponent
{
public:
	Struct StringAssetReference                                  UIAudioCuesTableLocation;                          // 0xc8(0x10)
	Class CoherentToWwiseEventDataAsset*                         UIAudioCuesAsset;                                  // 0xd8(0x8)
	struct FName                                                 AudioGameStateGroup;                               // 0xe0(0x8)
	struct FName                                                 AudioGameStateIngame;                              // 0xe8(0x8)
	struct FName                                                 AudioGameStateInMenu;                              // 0xf0(0x8)
	struct FName                                                 AudioGameStateLoading;                             // 0xf8(0x8)
	struct FName                                                 AudioGameStateInFrontEnd;                          // 0x100(0x8)
	char                                                         pad0x178_162EE[0x178];                             // 0x108(0x178)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CoherentUIGTAssetContainer: public DataAsset
{
public:
	TArray<class Texture2D*>                                     TextureAssets;                                     // 0x28(0x10)
};


// Size 0xc10 (Full Size[0x11f0] - InheritedSize[0x5e0]
class CoherentUIGTHUDComponent: public CoherentBaseHUDComponent
{
public:
	Class ShipNamesDataAsset*                                    ShipNames;                                         // 0x5e0(0x8)
	char                                                         pad0x40_1D8ZF[0x40];                               // 0x5e8(0x40)
	Struct HealthUI                                              HealthUI;                                          // 0x628(0x1b0)
	char                                                         pad0xa18_NPAKF[0xa18];                             // 0x7d8(0xa18)
};


// Size 0xb0 (Full Size[0x690] - InheritedSize[0x5e0]
class CoherentUIGTInGameMenusComponent: public CoherentBaseHUDComponent
{
public:
};


// Size 0x58 (Full Size[0x3c8] - InheritedSize[0x370]
class CoherentUIGTAtlasComponent: public CoherentUIGTInstancedComponent
{
public:
	char                                                         pad0x18_NP5MY[0x18];                               // 0x370(0x18)
	Class Canvas*                                                CurrentCanvas;                                     // 0x388(0x8)
	char                                                         pad0x38_KHBSK[0x38];                               // 0x390(0x38)
};


// Size 0xa0 (Full Size[0x468] - InheritedSize[0x3c8]
class CoherentUIGTNameplateComponent: public CoherentUIGTAtlasComponent
{
public:
	int                                                          MaxElements;                                       // 0x3c8(0x4)
	float                                                        NormalizedScreenSpaceVisibilityMargin;             // 0x3cc(0x4)
	Class CurveFloat*                                            DistanceScalingCurve;                              // 0x3d0(0x8)
	float                                                        TitleFadeDistance;                                 // 0x3d8(0x4)
	Struct NameplateVisibilityFactors                            VisibilityFactors;                                 // 0x3dc(0x14)
	char                                                         pad0x78_8Y71M[0x78];                               // 0x3f0(0x78)
};


// Size 0x270 (Full Size[0x638] - InheritedSize[0x3c8]
class CoherentUIGTTooltipComponent: public CoherentUIGTAtlasComponent
{
public:
	int                                                          TooltipSpacing;                                    // 0x3c8(0x4)
	float                                                        NormalisedScreenSpaceTooltipPositionY;             // 0x3cc(0x4)
	char                                                         pad0x268_3KL15[0x268];                             // 0x3d0(0x268)
};


// Size 0xb0 (Full Size[0x478] - InheritedSize[0x3c8]
class CoherentUIGTTooltipDetailedComponent: public CoherentUIGTAtlasComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CoherentUIGTPersistentDataAsset: public DataAsset
{
public:
	TArray<class Texture2D*>                                     AlwaysLoadedTextures;                              // 0x28(0x10)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class CoherentUIGTRootDataAsset: public DataAsset
{
public:
	TArray<class CoherentUIGTAssetContainer*>                    SharedContainers;                                  // 0x28(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    HUDContainers;                                     // 0x38(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    MenuContainers;                                    // 0x48(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    ShopContainers;                                    // 0x58(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    CompanyContainers;                                 // 0x68(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    FrontendContainers;                                // 0x78(0x10)
	TArray<class CoherentUIGTAssetContainer*>                    InGameContainers;                                  // 0x88(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CollectableQuestObjectInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CollectableQuestObjectStepInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractableQuestObjectInterface: public Interface
{
public:
};


// Size 0x140 (Full Size[0x5a8] - InheritedSize[0x468]
class CollectableQuestObject: public InteractableObject
{
public:
	char                                                         pad0x18_FT7I9[0x18];                               // 0x468(0x18)
	Class WwiseEvent*                                            PickupSFX;                                         // 0x480(0x8)
	char                                                         pad0x10_ZOST4[0x10];                               // 0x488(0x10)
	float                                                        InteractionPointRadius;                            // 0x498(0x4)
	struct FName                                                 InteractionPointSocketName;                        // 0x49c(0x8)
	char                                                         pad0x4_1N0ER[0x4];                                 // 0x4a4(0x4)
	Struct FText                                                 InteractableObjectPickupName;                      // 0x4a8(0x38)
	Class SceneComponent*                                        ThirdPersonMesh;                                   // 0x4e0(0x8)
	char                                                         pad0xc0_UTIV1[0xc0];                               // 0x4e8(0xc0)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class CollectableQuestObjectProvider: public Actor
{
public:
};


// Size 0x88 (Full Size[0x150] - InheritedSize[0xc8]
class CollectorsChestPickUpFromSlotRewardComponent: public ActorComponent
{
public:
	class                                                        Company;                                           // 0xc8(0x8)
	char                                                         pad0x80_FWZEW[0x80];                               // 0xd0(0x80)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NPCDialogConditional: public Object
{
public:
	bool                                                         ConditionalExpected;                               // 0x28(0x1)
	char                                                         pad0x7_G7T3I[0x7];                                 // 0x29(0x7)
};


// Size 0x28 (Full Size[0x58] - InheritedSize[0x30]
class CommodityHasDemandNPCDialogConditional: public NPCDialogConditional
{
public:
	struct FName                                                 CompanyNPCName;                                    // 0x30(0x8)
	Struct CommoditySelectionType                                CommodityType;                                     // 0x38(0x8)
	byte                                                         RequiredCommodityDemand;                           // 0x40(0x1)
	char                                                         pad0x17_T12Z7[0x17];                               // 0x41(0x17)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class CommonShipSettings: public DeveloperSettings
{
public:
	class                                                        TrinketMMCBudget;                                  // 0x38(0x8)
};


// Size 0x298 (Full Size[0x2c0] - InheritedSize[0x28]
class CompanyData: public DataAsset
{
public:
	class                                                        Company;                                           // 0x28(0x8)
	bool                                                         ShouldHaveLevels;                                  // 0x30(0x1)
	bool                                                         ShouldHaveEmblems;                                 // 0x31(0x1)
	bool                                                         ShouldHaveVoyages;                                 // 0x32(0x1)
	bool                                                         ShouldBeOnCompanySummaryScreen;                    // 0x33(0x1)
	Struct FeatureFlag                                           CompanySummaryScreenFeatureFlag;                   // 0x34(0xc)
	bool                                                         ShouldBeHiddenWhenNothingUnlocked;                 // 0x40(0x1)
	char                                                         pad0x3_C6ZXT[0x3];                                 // 0x41(0x3)
	struct FName                                                 ShouldBeHiddenWhenNothingUnlockedWhenToggleEnabled; // 0x44(0x8)
	struct FName                                                 IsRetired;                                         // 0x4c(0x8)
	char                                                         pad0x4_VE90Y[0x4];                                 // 0x54(0x4)
	Struct CompanySkin                                           Skin;                                              // 0x58(0xb8)
	Struct CompanyShopSkin                                       ShopSkin;                                          // 0x110(0x20)
	Struct CompanyShopInfo                                       ShopInfo;                                          // 0x130(0x60)
	Struct CompanyProgressIcons                                  ProgressIcons;                                     // 0x190(0x18)
	Struct CompanyRankData                                       RankData;                                          // 0x1a8(0x10)
	Struct FText                                                 Motto;                                             // 0x1b8(0x38)
	Struct FText                                                 CompanyFlavourText1;                               // 0x1f0(0x38)
	Struct FText                                                 CompanyFlavourText2;                               // 0x228(0x38)
	Struct StringAssetReference                                  MapsDiscoveredBackgroundImage;                     // 0x270(0x10)
	TArray<struct MapsDiscoveredImages>                          MapsDiscoveredImages;                              // 0x280(0x10)
	Struct FString                                               VoyageAudioSwitchName;                             // 0x290(0x10)
	Struct FString                                               VoyageAudioSwitchValue;                            // 0x2a0(0x10)
	TArray<Byte BootyBought>                                     BootyBought;                                       // 0x2b0(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CompanyDataList: public DataAsset
{
public:
	TArray<class CompanyData*>                                   ClientCompanyData;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyEventsFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CompanyLevelData: public DataAsset
{
public:
	class                                                        Company;                                           // 0x28(0x8)
	Struct DataTableRowHandle                                    DataTable;                                         // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CompanyLevelDataList: public DataAsset
{
public:
	TArray<class CompanyLevelData*>                              CompanyLevelData;                                  // 0x28(0x10)
};


// Size 0x1a8 (Full Size[0x270] - InheritedSize[0xc8]
class CompanyNPCComponent: public ActorComponent
{
public:
	char                                                         pad0x38_8AQ3G[0x38];                               // 0xc8(0x38)
	class                                                        Company;                                           // 0x100(0x8)
	bool                                                         OverrideCompanyForRewards;                         // 0x108(0x1)
	char                                                         pad0x7_ZANM5[0x7];                                 // 0x109(0x7)
	class                                                        OverrideRewardCompany;                             // 0x110(0x8)
	Struct FText                                                 SellSpecificItemText;                              // 0x118(0x38)
	struct FName                                                 NPCName;                                           // 0x150(0x8)
	float                                                        HoldToHandInBootyDuration;                         // 0x158(0x4)
	char                                                         pad0x4_M7JOR[0x4];                                 // 0x15c(0x4)
	class                                                        ConditionalStatForBootyHandIn;                     // 0x160(0x8)
	char                                                         pad0xf0_IZ32F[0xf0];                               // 0x168(0xf0)
	TArray<class Class*>                                         SpecifiedItemsToPurchase;                          // 0x258(0x10)
	char                                                         pad0x8_F2GJD[0x8];                                 // 0x268(0x8)
};


// Size 0x30 (Full Size[0x2a0] - InheritedSize[0x270]
class SovereignNPCComponent: public CompanyNPCComponent
{
public:
	char                                                         pad0x8_R2VD5[0x8];                                 // 0x270(0x8)
	TArray<struct AssociatedCompanies>                           AssociatedCompanies;                               // 0x278(0x10)
	Class SovereignData*                                         SovereignData;                                     // 0x288(0x8)
	TArray<class Class*>                                         FeatureFilteredAssociatedCompanies;                // 0x290(0x10)
};


// Size 0x40 (Full Size[0x320] - InheritedSize[0x2e0]
class WorldRegionComponent: public SceneComponent
{
public:
	struct FName                                                 WorldRegionName;                                   // 0x2e0(0x8)
	class                                                        RegionShanty;                                      // 0x2e8(0x8)
	float                                                        WorldRegionRadius;                                 // 0x2f0(0x4)
	char                                                         pad0x2c_PCPOK[0x2c];                               // 0x2f4(0x2c)
};


// Size 0x0 (Full Size[0x320] - InheritedSize[0x320]
class CompanyRegionComponent: public WorldRegionComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyServiceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class CompanyService: public Object
{
public:
	char                                                         pad0x8_7ZHPJ[0x8];                                 // 0x28(0x8)
	TArray<class CompanyData*>                                   CompanyData;                                       // 0x30(0x10)
	char                                                         pad0x50_884BW[0x50];                               // 0x40(0x50)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CompanyValidationAsset: public DataAsset
{
public:
	TArray<struct CompaniesToValidate>                           CompaniesToValidate;                               // 0x28(0x10)
};


// Size 0x158 (Full Size[0x520] - InheritedSize[0x3c8]
class WieldableReplica: public Actor
{
public:
	char                                                         pad0x8_KRS3L[0x8];                                 // 0x3c8(0x8)
	Class PrimitiveComponent*                                    MeshComponent;                                     // 0x3d0(0x8)
	Class CosmeticItemAnimationSetDataAsset*                     CachedAnimationSet;                                // 0x3d8(0x8)
	class                                                        ReplicaCategory;                                   // 0x3e0(0x8)
	char                                                         pad0x138_AWFIZ[0x138];                             // 0x3e8(0x138)
};


// Size 0x0 (Full Size[0x520] - InheritedSize[0x520]
class PoseableMeshWieldableReplica: public WieldableReplica
{
public:
};


// Size 0x20 (Full Size[0x540] - InheritedSize[0x520]
class CompassWieldableReplica: public PoseableMeshWieldableReplica
{
public:
	Class CompassSpinComponent*                                  SpinComponent;                                     // 0x520(0x8)
	char                                                         pad0x18_FMVAO[0x18];                               // 0x528(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ConstellationAudioEventsDataAsset: public DataAsset
{
public:
	TArray<struct ConstellationAudioEventsMap>                   ConstellationAudioEventsMap;                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConstellationInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x460] - InheritedSize[0x3c8]
class Constellation: public Actor
{
public:
	char                                                         pad0xc_FGXEP[0xc];                                 // 0x3c8(0xc)
	float                                                        ShaderFadeIn;                                      // 0x3d4(0x4)
	float                                                        ShaderFadeOut;                                     // 0x3d8(0x4)
	float                                                        ConstellationEffectSpeed;                          // 0x3dc(0x4)
	float                                                        InitialRevealAudioThreshold;                       // 0x3e0(0x4)
	float                                                        FullyRevealedAudioThreshold;                       // 0x3e4(0x4)
	Class StaticMeshComponent*                                   ConstellationMesh;                                 // 0x3e8(0x8)
	Class WwiseEvent*                                            StartBespokeSFX;                                   // 0x3f0(0x8)
	Class WwiseEvent*                                            StopBespokeSFX;                                    // 0x3f8(0x8)
	char                                                         pad0x8_TPOHX[0x8];                                 // 0x400(0x8)
	Class WwiseEvent*                                            StartInitialRevealSFX;                             // 0x408(0x8)
	Class WwiseEvent*                                            StopInitialRevealSFX;                              // 0x410(0x8)
	char                                                         pad0x8_NNXC5[0x8];                                 // 0x418(0x8)
	Class WwiseEvent*                                            StartFullyRevealedSFX;                             // 0x420(0x8)
	Class WwiseEvent*                                            StopFullyRevealedSFX;                              // 0x428(0x8)
	char                                                         pad0x8_ATMHI[0x8];                                 // 0x430(0x8)
	Class WwiseEvent*                                            StartInitialRevealMusic;                           // 0x438(0x8)
	Class WwiseEvent*                                            StopInitialRevealMusic;                            // 0x440(0x8)
	char                                                         pad0x8_S9TSC[0x8];                                 // 0x448(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x450(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConstellationsServiceInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x450] - InheritedSize[0x3c8]
class ConstellationsService: public Actor
{
public:
	char                                                         pad0x8_ORT9J[0x8];                                 // 0x3c8(0x8)
	float                                                        ViewBoundaryDegrees;                               // 0x3d0(0x4)
	char                                                         pad0x4c_56UGX[0x4c];                               // 0x3d4(0x4c)
	Struct StringAssetReference                                  ConstellationsBespokeAudioEventsAssetRef;          // 0x420(0x10)
	Class MaterialParameterCollectionInstance*                   AtmosphericMaterialParamsInstance;                 // 0x430(0x8)
	Class ConstellationAudioEventsDataAsset*                     ConstellationBespokeAudioEventsListInstance;       // 0x438(0x8)
	Struct StringAssetReference                                  AtmosphericMaterialParamsAssetRef;                 // 0x440(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContendedResourcesProvider: public Interface
{
public:
};


// Size 0xe8 (Full Size[0x110] - InheritedSize[0x28]
class ContendedResourceService: public Object
{
public:
	char                                                         pad0x10_DF1T4[0x10];                               // 0x28(0x10)
	Class World*                                                 World;                                             // 0x38(0x8)
	char                                                         pad0xd0_U9312[0xd0];                               // 0x40(0xd0)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class ContentEngagementMessageParams: public DataAsset
{
public:
	Struct FText                                                 Title;                                             // 0x28(0x38)
	Struct FText                                                 Body;                                              // 0x60(0x38)
	Struct StringAssetReference                                  KeyArt;                                            // 0x98(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContentTypeSelectionConditional: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageContrainerAllowedAdventure: public ContentTypeSelectionConditional
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageContrainerAllowedContest: public ContentTypeSelectionConditional
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ContestAddItemToHandInListStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class ContestTaleQuestService: public TaleQuestService
{
public:
	TArray<struct NPCPurchaseLists>                              NPCPurchaseLists;                                  // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class ContestAddItemToHandInListStepDesc: public TaleQuestStepDesc
{
public:
	class                                                        Item;                                              // 0x80(0x8)
	Struct QuestVariableActor                                    NPC;                                               // 0x88(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ContestAwardScoreForItemDugUpStep: public TaleQuestStep
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class ContestAwardScoreForItemDugUpStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariablePlayerActor                              DiscoveringCharacter;                              // 0x80(0x30)
	Struct QuestVariableActor                                    ItemDugUp;                                         // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TavernCeremonyInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ContestCeremonyEventsDataAsset: public DataAsset
{
public:
	TArray<struct ContestEvents>                                 ContestEvents;                                     // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipLiveryCatalogueDataAsset: public DataAsset
{
public:
	Struct ShipLiveryCatalogue                                   Catalogue;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewServiceCostumeInterface: public Interface
{
public:
};


// Size 0x210 (Full Size[0x5d8] - InheritedSize[0x3c8]
class CrewService: public Actor
{
public:
	char                                                         pad0xd8_T6OZ4[0xd8];                               // 0x3c8(0xd8)
	TArray<struct Crews>                                         Crews;                                             // 0x4a0(0x10)
	char                                                         pad0x128_RK469[0x128];                             // 0x4b0(0x128)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerNotificationsServiceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class ServerNotificationsService: public Object
{
public:
};


// Size 0x110 (Full Size[0x1d8] - InheritedSize[0xc8]
class ContestCeremoniesComponent: public ActorComponent
{
public:
	byte                                                         CurrentContestStage;                               // 0xc8(0x1)
	char                                                         pad0x37_MEBD5[0x37];                               // 0xc9(0x37)
	TArray<struct ContestCeremonyTimedActions>                   ContestCeremonyTimedActions;                       // 0x100(0x10)
	TArray<class WwiseEvent*>                                    PlayedAudio;                                       // 0x110(0x10)
	Class ContestCeremonyEventsDataAsset*                        ContestEventsDataAsset;                            // 0x120(0x8)
	char                                                         pad0xb0_409IE[0xb0];                               // 0x128(0xb0)
};


// Size 0x158 (Full Size[0x180] - InheritedSize[0x28]
class ContestMapLayout: public DataAsset
{
public:
	Struct TreasureMapWidgetText                                 CompanyName;                                       // 0x28(0x3c)
	Struct TreasureMapWidgetText                                 VoyageName;                                        // 0x64(0x3c)
	Struct TreasureMapWidgetText                                 ScoreboardTitle;                                   // 0xa0(0x3c)
	Struct TreasureMapWidgetText                                 ScoreId;                                           // 0xdc(0x3c)
	TArray<struct Crews>                                         Crews;                                             // 0x118(0x10)
	TArray<struct ScoreInfo>                                     ScoreInfo;                                         // 0x128(0x10)
	bool                                                         AutogenerateScoreboard;                            // 0x138(0x1)
	char                                                         pad0x3_HYCUI[0x3];                                 // 0x139(0x3)
	float                                                        ScoreboardTopOffset;                               // 0x13c(0x4)
	float                                                        IconLeftOffset;                                    // 0x140(0x4)
	float                                                        IconWidth;                                         // 0x144(0x4)
	float                                                        NameLeftOffset;                                    // 0x148(0x4)
	float                                                        NameScale;                                         // 0x14c(0x4)
	float                                                        ScoreLeftOffset;                                   // 0x150(0x4)
	float                                                        ScoreScale;                                        // 0x154(0x4)
	float                                                        ScoreboardSpacing;                                 // 0x158(0x4)
	float                                                        UnderlineVerticalOffset;                           // 0x15c(0x4)
	float                                                        UnderlineScale;                                    // 0x160(0x4)
	float                                                        ScoreReasonScale;                                  // 0x164(0x4)
	float                                                        ScoreReasonTopOffset;                              // 0x168(0x4)
	float                                                        ScoreReasonLineStart;                              // 0x16c(0x4)
	float                                                        ScoreReasonLineEnd;                                // 0x170(0x4)
	float                                                        ScoreReasonTextRelativeTopOffset;                  // 0x174(0x4)
	float                                                        ScoreReasonTextScale;                              // 0x178(0x4)
	char                                                         pad0x4_5VRW7[0x4];                                 // 0x17c(0x4)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class ModalInteraction: public Actor
{
public:
};


// Size 0x120 (Full Size[0x520] - InheritedSize[0x400]
class ModalInteractionProxy: public InteractableBase
{
public:
	char                                                         pad0x8_NTR7Q[0x8];                                 // 0x400(0x8)
	Class PrimitiveComponent*                                    Mesh;                                              // 0x408(0x8)
	Class InteractableComponent*                                 InteractionRegion;                                 // 0x430(0x8)
	class                                                        InteractionType;                                   // 0x438(0x8)
	Struct FText                                                 DefaultTooltip;                                    // 0x440(0x38)
	Struct FText                                                 DefaultDisplayName;                                // 0x478(0x38)
	class                                                        NotificationInputId;                               // 0x4b0(0x8)
	byte                                                         DisplayPriority;                                   // 0x4b8(0x1)
	char                                                         pad0x67_HV7ZW[0x67];                               // 0x4b9(0x67)
};


// Size 0x188 (Full Size[0x6a8] - InheritedSize[0x520]
class NPC: public ModalInteractionProxy
{
public:
	char                                                         pad0x40_T648C[0x40];                               // 0x520(0x40)
	float                                                        AggressiveNetCullDistanceSquared;                  // 0x560(0x4)
	Struct Guid                                                  Id;                                                // 0x564(0x10)
	bool                                                         UseCustomInteractionRotation;                      // 0x574(0x1)
	bool                                                         HasRedirectionToolip;                              // 0x575(0x1)
	char                                                         pad0x2_THQ6B[0x2];                                 // 0x576(0x2)
	Class InteractableGrammaticalGenderComponent*                InteractableGrammaticalGenderComponent;            // 0x578(0x8)
	Class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x580(0x8)
	Class BeckonComponent*                                       BeckonComponent;                                   // 0x588(0x8)
	char                                                         pad0x118_K21G3[0x118];                             // 0x590(0x118)
};


// Size 0x8 (Full Size[0x6b0] - InheritedSize[0x6a8]
class CompanyShopkeeper: public NPC
{
public:
	Class CompanyNPCComponent*                                   CompanyNPCComponent;                               // 0x6a8(0x8)
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class ContestMerchantSpawnerComponent: public ActorComponent
{
public:
	char                                                         pad0x30_DRWD3[0x30];                               // 0xc8(0x30)
	TArray<class CompanyShopkeeper*>                             SpawnedMerchantsArray;                             // 0xf8(0x10)
	TArray<struct MerchantSpawnDataArray>                        MerchantSpawnDataArray;                            // 0x108(0x10)
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class ContestOutOfBoundsComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StatCondition: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ContestPlacedFinishStatCondition: public StatCondition
{
public:
	Struct Int32Range                                            ContestPlacesRange;                                // 0x28(0x10)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class ContestSelectIslandForItemStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_I2BOE[0x8];                                 // 0x98(0x8)
	TArray<struct FName>                                         SelectedIslands;                                   // 0xa0(0x10)
};


// Size 0xc0 (Full Size[0x140] - InheritedSize[0x80]
class ContestSelectIslandForItemStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableContestIslandArchetype                   IslandArchetype;                                   // 0x80(0x30)
	Struct QuestVariableInt                                      NumberOfChests;                                    // 0xb0(0x30)
	Struct QuestVariableNameArray                                PreviousIslands;                                   // 0xe0(0x30)
	Struct QuestVariableNameArray                                SelectedIslands;                                   // 0x110(0x30)
};


// Size 0x268 (Full Size[0x290] - InheritedSize[0x28]
class ContestSettingsDataAsset: public DataAsset
{
public:
	Struct ContestTimerData                                      MatchmakingTimeoutTime;                            // 0x28(0x18)
	Struct ContestTimerData                                      AttemptToMigrateFailSafeTime;                      // 0x40(0x18)
	Struct ContestTimerData                                      ContestStartTime;                                  // 0x58(0x18)
	Struct ContestTimerData                                      PostContestTimeBeforeReturningToACT;               // 0x70(0x18)
	Struct ContestTimerData                                      StartBlindsDisplayTime;                            // 0x88(0x18)
	Struct ContestTimerData                                      LeaderboardDisplayTime;                            // 0xa0(0x18)
	Struct ContestTimerData                                      ContestRewardTime;                                 // 0xb8(0x18)
	Struct ContestTimerData                                      ServerShutdownMinutes;                             // 0xd0(0x18)
	Struct ContestTimerData                                      ServerRecruitingTime;                              // 0xe8(0x18)
	Struct ContestCrewRequirementData                            StagingRequirements;                               // 0x100(0x28)
	Struct ContestCrewRequirementData                            FallbackStagingRequirements;                       // 0x128(0x28)
	Struct ContestCrewRequirementData                            ContestRequirements;                               // 0x150(0x28)
	Class ContestVoyagesSelectorDataAsset*                       VoyageDataAsset;                                   // 0x178(0x8)
	Class MatchmakingVoyageRecipeDesc*                           OverarchingVoyageAsset;                            // 0x180(0x8)
	class                                                        ArenaCompany;                                      // 0x188(0x8)
	Class ContestShipCatalogueDataAsset*                         ShipCatalogueDataAsset;                            // 0x190(0x8)
	class                                                        ArenaTavernPawnClass;                              // 0x198(0x8)
	Struct ContestUIDescriptions                                 ContestUIDescriptions;                             // 0x1a0(0x80)
	TArray<struct FText>                                         LeaderboardMessagesInOrder;                        // 0x220(0x10)
	float                                                        StagingNotificationFrequency;                      // 0x230(0x4)
	char                                                         pad0x4_85IK3[0x4];                                 // 0x234(0x4)
	TArray<class Class*>                                         ItemsToReset;                                      // 0x238(0x10)
	Class CurveFloat*                                            ContestLightingZoneWeightCurve;                    // 0x248(0x8)
	float                                                        ContestForceSinkThreshold;                         // 0x250(0x4)
	char                                                         pad0x4_2VJHJ[0x4];                                 // 0x254(0x4)
	class                                                        ScoreScroll;                                       // 0x258(0x8)
	Struct FString                                               NumOfPeriodsRetrievalString;                       // 0x260(0x10)
	Struct FString                                               PeriodEndInMinutesRetrievalStringPrefix;           // 0x270(0x10)
	class                                                        ConditionalStatForCompletingAContest;              // 0x280(0x8)
	class                                                        ConditionalStatForCompletingContestWithShip;       // 0x288(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ContestShipCatalogueDataAsset: public DataAsset
{
public:
	TArray<struct ArenaShipTeamSets>                             ArenaShipTeamSets;                                 // 0x28(0x10)
	TArray<struct UniqueLiverySets>                              UniqueLiverySets;                                  // 0x38(0x10)
	float                                                        ChanceOfUniqueShipSwap;                            // 0x48(0x4)
	char                                                         pad0x4_HB4R2[0x4];                                 // 0x4c(0x4)
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class ContestSpawnLocationsComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipLiveryCatalogueServiceInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class ContestTeamAssignmentComponent: public ActorComponent
{
public:
	char                                                         pad0x30_Q45N6[0x30];                               // 0xc8(0x30)
	Class ContestShipCatalogueDataAsset*                         ArenaShipCatalogue;                                // 0xf8(0x8)
	char                                                         pad0x8_3VVVH[0x8];                                 // 0x100(0x8)
	TArray<struct CachedTeamSets>                                CachedTeamSets;                                    // 0x108(0x10)
	TArray<struct CachedUniqueTeamSets>                          CachedUniqueTeamSets;                              // 0x118(0x10)
	TArray<struct LiverySets>                                    LiverySets;                                        // 0x128(0x10)
	TArray<struct CurrentlyAvaliableLiverySets>                  CurrentlyAvaliableLiverySets;                      // 0x138(0x10)
	char                                                         pad0x18_JTIRK[0x18];                               // 0x148(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerMuteInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class ContestUIComponent: public ActorComponent
{
public:
	char                                                         pad0x58_OG637[0x58];                               // 0xc8(0x58)
	Class AthenaPlayerController*                                ClientPlayerController;                            // 0x120(0x8)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class ContestVoyagesDataAsset: public DataAsset
{
public:
	TArray<struct Contests>                                      Contests;                                          // 0x28(0x10)
	TArray<struct TallTaleContests>                              TallTaleContests;                                  // 0x38(0x10)
	char                                                         pad0x50_EUL1N[0x50];                               // 0x48(0x50)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ContestVoyagesSelectorDataAsset: public DataAsset
{
public:
	Class ContestVoyagesDataAsset*                               DefaultContestVoyages;                             // 0x28(0x8)
	TArray<struct FeatureToggledContestVoyages>                  FeatureToggledContestVoyages;                      // 0x30(0x10)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class ContestWaitForItemHandInStep: public TaleQuestStep
{
public:
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class ContestWaitForItemHandInStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Item;                                              // 0x80(0x30)
	Struct QuestVariableItemDescType                             ItemDesc;                                          // 0xb0(0x30)
	Struct QuestVariableActor                                    NPC;                                               // 0xe0(0x30)
};


// Size 0x220 (Full Size[0x5e8] - InheritedSize[0x3c8]
class ContestZone: public Actor
{
public:
	char                                                         pad0x10_ZVPKZ[0x10];                               // 0x3c8(0x10)
	TArray<struct VendorShipsToSpawnInContest>                   VendorShipsToSpawnInContest;                       // 0x3d8(0x10)
	Class SphereComponent*                                       ContestZoneBoundaryComponent;                      // 0x3e8(0x8)
	struct FName                                                 ContestZoneName;                                   // 0x3f0(0x8)
	float                                                        ContestZoneRadius;                                 // 0x3f8(0x4)
	float                                                        RespawnSafeZoneRadius;                             // 0x3fc(0x4)
	float                                                        RespawnDistanceThreshold;                          // 0x400(0x4)
	bool                                                         IsFullyActivated;                                  // 0x404(0x1)
	char                                                         pad0x3_C8DAZ[0x3];                                 // 0x405(0x3)
	Struct ObjectMessagingDispatcher                             ContestZoneObjectMessagingDispatcher;              // 0x408(0xa0)
	TArray<struct InitialSpawnLocations>                         InitialSpawnLocations;                             // 0x4a8(0x10)
	TArray<class IslandData*>                                    IslandsWithinContestZone;                          // 0x4b8(0x10)
	Struct StringAssetReference                                  RespawnPointAsset;                                 // 0x4c8(0x10)
	Class ContestSafeRegion*                                     ContestSafeRegion;                                 // 0x4d8(0x8)
	float                                                        ContestZoneRadiusSquared;                          // 0x4e0(0x4)
	float                                                        ContestZoneDiameter;                               // 0x4e4(0x4)
	float                                                        ContestZoneArea;                                   // 0x4e8(0x4)
	char                                                         pad0x4_O7JS4[0x4];                                 // 0x4ec(0x4)
	TArray<class ArenaVendorShip*>                               VendorShips;                                       // 0x4f0(0x10)
	TArray<struct RespawnLocations>                              RespawnLocations;                                  // 0x500(0x10)
	Class ShipSpawnLocation*                                     PooledRespawnLocation;                             // 0x510(0x8)
	TArray<class ShipSpawnLocation*>                             ShipSpawnLocationsForContest;                      // 0x518(0x10)
	char                                                         pad0x88_Y1YOE[0x88];                               // 0x528(0x88)
	int                                                          NumberOfSpawnPointsToGenerate;                     // 0x5b0(0x4)
	float                                                        MinimumDistanceFromBounds;                         // 0x5b4(0x4)
	byte                                                         ContestZoneRespawnLocationOrientation;             // 0x5b8(0x1)
	char                                                         pad0x3_TOQT7[0x3];                                 // 0x5b9(0x3)
	float                                                        RadiusForStaticObjectCheck;                        // 0x5bc(0x4)
	char                                                         pad0x18_FR59U[0x18];                               // 0x5c0(0x18)
	TArray<class CalmWaterComponent*>                            CalmWaters;                                        // 0x5d8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlCapstanArmActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class LookAtOffsetInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
};


// Size 0x20 (Full Size[0x2c0] - InheritedSize[0x2a0]
class ControlIntentInputComponent: public LookAtOffsetInputComponent
{
public:
};


// Size 0x18 (Full Size[0x4a8] - InheritedSize[0x490]
class ControllableJIPTestFixture: public TestLevelScriptActor
{
public:
	class                                                        ObjectToSpawn;                                     // 0x490(0x8)
	class                                                        ExpectedActionState;                               // 0x498(0x8)
	Class Actor*                                                 ControlledActor;                                   // 0x4a0(0x8)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class ControllableMock: public Object
{
public:
	char                                                         pad0x10_R0Z71[0x10];                               // 0x28(0x10)
	Class Actor*                                                 ActorThatRequestedStateChange;                     // 0x38(0x8)
	Struct FText                                                 ObjectDisplayName;                                 // 0x40(0x38)
	Struct ControlObjectActionRuleParams                         ControlObjectActionRuleParams;                     // 0x78(0x10)
	byte                                                         Role;                                              // 0x88(0x1)
	bool                                                         HasAController;                                    // 0x89(0x1)
	bool                                                         CanBeControlledByActorValue;                       // 0x8a(0x1)
	char                                                         pad0x5_MRD5F[0x5];                                 // 0x8b(0x5)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllableObjectFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RadialAction: public Object
{
public:
	class                                                        InputID;                                           // 0x28(0x8)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class OpenRadialAction: public RadialAction
{
public:
	TArray<struct RadialContexts>                                RadialContexts;                                    // 0x30(0x10)
	Class RadialCreationRuleAsset*                               CanExecuteRadial;                                  // 0x40(0x8)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class ControllableObjectNamedContextualOpenRadialAction: public OpenRadialAction
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SailManipulatorAudioParams: public DataAsset
{
public:
	Class WwiseEvent*                                            PlaySailManipulator;                               // 0x28(0x8)
	Class WwiseEvent*                                            StopSailManipulator;                               // 0x30(0x8)
	Class WwiseEvent*                                            PlaySailManipulatorEndExtremity;                   // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlPulleyActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlWheelActionStateId: public ActionStateId
{
public:
};


// Size 0x18 (Full Size[0x2b8] - InheritedSize[0x2a0]
class ControlWheelInputComponent: public LookAtOffsetInputComponent
{
public:
	Class IntentComponent*                                       IntentComponent;                                   // 0x2a0(0x8)
	Class Wheel*                                                 Wheel;                                             // 0x2a8(0x8)
	char                                                         pad0x8_DJ042[0x8];                                 // 0x2b0(0x8)
};


// Size 0xd8 (Full Size[0x4a0] - InheritedSize[0x3c8]
class CoordinatedKraken: public Actor
{
public:
	char                                                         pad0x18_2FCAO[0x18];                               // 0x3c8(0x18)
	class                                                        TentacleType;                                      // 0x3e0(0x8)
	class                                                        HeadType;                                          // 0x3e8(0x8)
	Class SceneComponent*                                        KrakenRoot;                                        // 0x3f0(0x8)
	Class KrakenActionCoordinatorComponent*                      KrakenActionCoordinator;                           // 0x3f8(0x8)
	TArray<struct PhaseAssets>                                   PhaseAssets;                                       // 0x400(0x10)
	char                                                         pad0x30_MTYQR[0x30];                               // 0x410(0x30)
	Struct Transform                                             HeadSpawnTransform;                                // 0x440(0x30)
	Class KrakenHead*                                            SpawnedHead;                                       // 0x470(0x8)
	Class NetworkClusterEventRoom*                               NetworkClusterEventRoom;                           // 0x478(0x8)
	Class Actor*                                                 TargetActor;                                       // 0x480(0x8)
	TArray<struct TentacleSpawnInfo>                             TentacleSpawnInfo;                                 // 0x488(0x10)
	byte                                                         ReplicatedTargetActorOverride;                     // 0x498(0x1)
	char                                                         pad0x7_9LJ8J[0x7];                                 // 0x499(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoordinatedKrakenTentacleSpawnInfoBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CosmeticVfxInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class CosmeticVfxComponent: public ActorComponent
{
public:
};


// Size 0x28 (Full Size[0xa0] - InheritedSize[0x78]
class ClothingCategory: public CategoryBase
{
public:
	TArray<class Class*>                                         PiratePreviewRemovals;                             // 0x78(0x10)
	Class AnimationAsset*                                        PiratePreviewAnim;                                 // 0x88(0x8)
	struct FName                                                 PiratePreviewCamera;                               // 0x90(0x8)
	bool                                                         PiratePreviewSpin;                                 // 0x98(0x1)
	char                                                         pad0x7_O9AGU[0x7];                                 // 0x99(0x7)
};


// Size 0x0 (Full Size[0xa0] - InheritedSize[0xa0]
class CostumeCategory: public ClothingCategory
{
public:
};


// Size 0x8 (Full Size[0xd8] - InheritedSize[0xd0]
class CostumeDesc: public ClothingDesc
{
public:
	bool                                                         CrewCostume;                                       // 0xd0(0x1)
	char                                                         pad0x7_3FZB9[0x7];                                 // 0xd1(0x7)
};


// Size 0x10 (Full Size[0xe8] - InheritedSize[0xd8]
class CostumeWithEmoteDesc: public CostumeDesc
{
public:
	TArray<class Class*>                                         CostumeEmotes;                                     // 0xd8(0x10)
};


// Size 0x20 (Full Size[0xf8] - InheritedSize[0xd8]
class EvolvingCostumeDesc: public CostumeDesc
{
public:
	Struct StringAssetReference                                  PreviousCostumeLevel;                              // 0xd8(0x10)
	Struct StringAssetReference                                  NextCostumeLevel;                                  // 0xe8(0x10)
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class Crest: public Actor
{
public:
	Class StaticMeshComponent*                                   FrontCrestMeshComponent;                           // 0x3c8(0x8)
	Class StaticMeshComponent*                                   BackCrestMeshComponent;                            // 0x3d0(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3d8(0x8)
	bool                                                         FeatureToggleFrontCrest;                           // 0x3e0(0x1)
	char                                                         pad0x17_TINJZ[0x17];                               // 0x3e1(0x17)
	bool                                                         IsTextHidden;                                      // 0x3f8(0x1)
	char                                                         pad0x3_W5JG6[0x3];                                 // 0x3f9(0x3)
	Struct Guid                                                  ReplicatedCrewId;                                  // 0x3fc(0x10)
	char                                                         pad0x2c_7THXZ[0x2c];                               // 0x40c(0x2c)
	Struct FString                                               ShipNameToRender;                                  // 0x438(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CrestPartDescAsset: public ShipPartDescAsset
{
public:
	Struct CrestPartDesc                                         CrestPartDesc;                                     // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CrewManifestTrinketLoadoutFinderPolicy: public TrinketLoadoutFinderPolicyBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CrewNameplatesToggleInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class CrewNotificationSettings: public DataAsset
{
public:
	Class PopUpMessageDesc*                                      PlayerJoiningPopup;                                // 0x28(0x8)
	Class PopUpMessageDesc*                                      PlayerLeavingPopup;                                // 0x30(0x8)
	float                                                        HoldDurationOverride;                              // 0x38(0x4)
	char                                                         pad0x4_2EDJ8[0x4];                                 // 0x3c(0x4)
	Class PopUpMessageDesc*                                      TinSessionEndedPopup;                              // 0x40(0x8)
	Class PopUpMessageDesc*                                      ShipRestoredPopup;                                 // 0x48(0x8)
	Class PopUpMessageDesc*                                      GuildSessionEndedPopup;                            // 0x50(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugCrewServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x5e0] - InheritedSize[0x5d8]
class DebugCrewService: public CrewService
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CrewSessionConfig: public Object
{
public:
	TArray<struct SessionTemplates>                              SessionTemplates;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TallTaleServiceInterface: public Interface
{
public:
};


// Size 0x120 (Full Size[0x1e8] - InheritedSize[0xc8]
class ShipCustomizationLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x20_0PQ9Y[0x20];                               // 0xc8(0x20)
	Struct ShipCustomizationLoadout                              Loadout;                                           // 0xe8(0x38)
	bool                                                         SavedCustomizationsPreviouslyApplied;              // 0x120(0x1)
	char                                                         pad0x7_X85YC[0x7];                                 // 0x121(0x7)
	Class Actor*                                                 Ship;                                              // 0x128(0x8)
	class                                                        ShipSize;                                          // 0x130(0x8)
	char                                                         pad0x50_ZGMEK[0x50];                               // 0x138(0x50)
	Struct ShipCustomizationLoadoutPartCustomizations            ActivePartCustomizations;                          // 0x188(0x10)
	char                                                         pad0x30_71ZPK[0x30];                               // 0x198(0x30)
	Class ShipCustomizationSettings*                             ShipCustomizationSettings;                         // 0x1c8(0x8)
	char                                                         pad0x18_LLZ3V[0x18];                               // 0x1d0(0x18)
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class TrinketLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x18_IRKVM[0x18];                               // 0xc8(0x18)
	Struct TrinketLoadout                                        Loadout;                                           // 0xe0(0x48)
	Struct Guid                                                  CrewId;                                            // 0x130(0x10)
	char                                                         pad0x40_6OLX6[0x40];                               // 0x140(0x40)
};


// Size 0x570 (Full Size[0x938] - InheritedSize[0x3c8]
class CrewShipManifest: public Actor
{
public:
	char                                                         pad0x28_6V7R4[0x28];                               // 0x3c8(0x28)
	Class NPCIdAsset*                                            NPCIdList;                                         // 0x3f0(0x8)
	char                                                         pad0x270_SBKH8[0x270];                             // 0x3f8(0x270)
	class                                                        AssociatedShipSize;                                // 0x668(0x8)
	char                                                         pad0x10_YLPXA[0x10];                               // 0x670(0x10)
	TArray<Interface VoyageVoteUpdaters>                         VoyageVoteUpdaters;                                // 0x680(0x10)
	TArray<Interface VoyageCancellers>                           VoyageCancellers;                                  // 0x690(0x10)
	char                                                         pad0x10_C7XWR[0x10];                               // 0x6a0(0x10)
	TArray<Interface TaleVoteUpdaters>                           TaleVoteUpdaters;                                  // 0x6b0(0x10)
	TArray<Interface TaleCancellers>                             TaleCancellers;                                    // 0x6c0(0x10)
	Class ShipCustomizationLoadoutComponent*                     ShipCustomizationLoadoutComponent;                 // 0x6d0(0x8)
	Class TrinketLoadoutComponent*                               TrinketLoadoutComponent;                           // 0x6d8(0x8)
	Class ShipEntitlementComponent*                              ShipEntitlementComponent;                          // 0x6e0(0x8)
	Class ShipMilestoneEntitlementComponent*                     ShipMilestoneEntitlementComponent;                 // 0x6e8(0x8)
	char                                                         pad0xa8_43THM[0xa8];                               // 0x6f0(0xa8)
	bool                                                         EmissaryMaxRankQuestBeenRedeemed;                  // 0x798(0x1)
	bool                                                         IsShipAssociated;                                  // 0x799(0x1)
	bool                                                         IsPendingExCaptainedShipDissociation;              // 0x79a(0x1)
	bool                                                         ShouldForceSpawnOnShip;                            // 0x79b(0x1)
	char                                                         pad0x2c_0K9BJ[0x2c];                               // 0x79c(0x2c)
	TArray<struct CommodityPurchases>                            CommodityPurchases;                                // 0x7c8(0x10)
	TArray<struct CommodityRedemptions>                          CommodityRedemptions;                              // 0x7d8(0x10)
	Struct VoteSessionData                                       VoyageSelectionVoteData;                           // 0x7e8(0x28)
	Struct VoteSessionData                                       VoyageCancelVoteData;                              // 0x810(0x28)
	Struct VoteSessionData                                       TaleSelectionVoteData;                             // 0x838(0x28)
	Struct VoteSessionData                                       TaleCancelVoteData;                                // 0x860(0x28)
	Struct Guid                                                  AssociatedCrew;                                    // 0x888(0x10)
	TArray<struct ProposedVoyages>                               ProposedVoyages;                                   // 0x898(0x10)
	Struct ProposedVoyageEntry                                   CurrentActiveVoyage;                               // 0x8a8(0x30)
	TArray<struct CrewBeckonTags>                                CrewBeckonTags;                                    // 0x8d8(0x10)
	TArray<struct ProposedTales>                                 ProposedTales;                                     // 0x8e8(0x10)
	Class VoyageDescDataAsset*                                   CurrentActiveTale;                                 // 0x8f8(0x8)
	int                                                          ReapersVoyageCount;                                // 0x900(0x4)
	char                                                         pad0x4_QTXL8[0x4];                                 // 0x904(0x4)
	Class ShipPersistenceComponent*                              ShipPersistenceComponent;                          // 0x908(0x8)
	Class Company*                                               CurrentActiveEmissaryCompany;                      // 0x910(0x8)
	Struct Guid                                                  CurrentActiveEmissarySessionId;                    // 0x918(0x10)
	int                                                          CurrentEmissaryTotal;                              // 0x930(0x4)
	bool                                                         IsCaptained;                                       // 0x934(0x1)
	char                                                         pad0x3_UCHMZ[0x3];                                 // 0x935(0x3)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class CrewSpawnLocationVariablesListAsset: public DataAsset
{
public:
	float                                                        MinimumSafeShipDistance;                           // 0x28(0x4)
	float                                                        MaximumSafeShipDistance;                           // 0x2c(0x4)
	float                                                        SafeShipDistanceScore;                             // 0x30(0x4)
	float                                                        SpawnIsNotOccupiedPenalty;                         // 0x34(0x4)
	int                                                          PenaltyResourceIsland;                             // 0x38(0x4)
	int                                                          PenaltyOutpostIsland;                              // 0x3c(0x4)
	int                                                          PenaltySmallIsland;                                // 0x40(0x4)
	int                                                          PenaltyMediumIsland;                               // 0x44(0x4)
	int                                                          PenaltyLargeIsland;                                // 0x48(0x4)
	int                                                          PenaltyFort;                                       // 0x4c(0x4)
	int                                                          PenaltySeaPost;                                    // 0x50(0x4)
	int                                                          PenaltyFortOfTheDamned;                            // 0x54(0x4)
	TArray<struct FName>                                         IslandsToAddAdditionalPenaltiesTo;                 // 0x58(0x10)
};


// Size 0x4f0 (Full Size[0x8b8] - InheritedSize[0x3c8]
class CrewSpawnLocations: public Actor
{
public:
	char                                                         pad0x128_A2VP0[0x128];                             // 0x3c8(0x128)
	TArray<class ShipSpawnLocation*>                             AvailableSpawnLocations;                           // 0x4f0(0x10)
	TArray<class ProgressSpawnLocation*>                         AvailableNamedSpawnLocations;                      // 0x500(0x10)
	TArray<class ShipSpawnLocation*>                             PendingUnavailableSpawnLocations;                  // 0x510(0x10)
	char                                                         pad0x318_4OHJR[0x318];                             // 0x520(0x318)
	Class CrewSpawnLocationVariablesListAsset*                   SpawnVariablesAsset;                               // 0x838(0x8)
	char                                                         pad0x78_B6BOS[0x78];                               // 0x840(0x78)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CursedCannonballData: public DataAsset
{
public:
	TArray<class Class*>                                         AllCursedCannonballs;                              // 0x28(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CurseStatus: public StatusBase
{
public:
};


// Size 0x10 (Full Size[0xe0] - InheritedSize[0xd0]
class CurseWithEmoteDesc: public ClothingDesc
{
public:
	TArray<class Class*>                                         CurseEmotes;                                       // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomInactivityDetectionInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x430] - InheritedSize[0x3c8]
class CustomisationPreviewShip: public Actor
{
public:
	Class ShipCustomizationInfo*                                 ShipCustomizationInfo;                             // 0x3c8(0x8)
	struct FName                                                 Category;                                          // 0x3d0(0x8)
	Class ShipLiveryComponent*                                   LiveryComponent;                                   // 0x3d8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              HullLiveryCustomizationComponent;                  // 0x3e0(0x8)
	Class ReplicatedShipPartCustomizationComponent*              SailsLiveryCustomizationComponent;                 // 0x3e8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CannonEnchantmentCustomizationComponent;           // 0x3f0(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3f8(0x8)
	Class ChildActorComponent*                                   MastChildActorComponent;                           // 0x400(0x8)
	Class ChildActorComponent*                                   WheelChildActorComponent;                          // 0x408(0x8)
	Class ChildActorComponent*                                   CapstanChildActorComponent;                        // 0x410(0x8)
	Class ChildActorComponent*                                   CannonChildActorComponent;                         // 0x418(0x8)
	bool                                                         ShowParticles;                                     // 0x420(0x1)
	char                                                         pad0x3_LKX7U[0x3];                                 // 0x421(0x3)
	float                                                        ParticleWarmUpTime;                                // 0x424(0x4)
	char                                                         pad0x8_WNBBJ[0x8];                                 // 0x428(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableShipServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableTriggerInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class TriggerCollisionHelper: public Object
{
public:
	int                                                          TriggerId;                                         // 0x28(0x4)
	char                                                         pad0x1c_RUIQ0[0x1c];                               // 0x2c(0x1c)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class CustomizableTriggerService: public Object
{
public:
	char                                                         pad0x58_BMLEZ[0x58];                               // 0x28(0x58)
	Class World*                                                 World;                                             // 0x80(0x8)
	char                                                         pad0x8_1SPSP[0x8];                                 // 0x88(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutlassDamagerType: public DamagerType
{
public:
};


// Size 0x88 (Full Size[0x450] - InheritedSize[0x3c8]
class CutSceneActor: public Actor
{
public:
	char                                                         pad0x8_VPP1W[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        DefaultSceneRoot;                                  // 0x3d0(0x8)
	Class CutSceneSubtitlesComponent*                            CutSceneSubtitlesComponent;                        // 0x3d8(0x8)
	double                                                       StartTimeInSeconds;                                // 0x3e0(0x8)
	bool                                                         CutsceneActivated;                                 // 0x3e8(0x1)
	char                                                         pad0x7_17997[0x7];                                 // 0x3e9(0x7)
	TArray<class Actor*>                                         TargetActors;                                      // 0x3f0(0x10)
	struct FName                                                 AnimationNameToPlay;                               // 0x400(0x8)
	class                                                        LocalMusicZone;                                    // 0x408(0x8)
	Class PlaceableReaction*                                     PlaceableReaction;                                 // 0x410(0x8)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x418(0x8)
	TArray<struct FText>                                         LocalisableNames;                                  // 0x420(0x10)
	char                                                         pad0x20_AFPT8[0x20];                               // 0x430(0x20)
};


// Size 0x50 (Full Size[0x650] - InheritedSize[0x600]
class CannonProjectile: public LaunchableProjectile
{
public:
	char                                                         pad0x8_2Z96R[0x8];                                 // 0x600(0x8)
	Class ExplosionComponent*                                    ExplosionComponent;                                // 0x608(0x8)
	bool                                                         ApplyKnockbackOnDirectHit;                         // 0x610(0x1)
	bool                                                         AllowFriendlyFireOnDirectHit;                      // 0x611(0x1)
	byte                                                         DirectHitHealthChangeReason;                       // 0x612(0x1)
	char                                                         pad0x5_AE38T[0x5];                                 // 0x613(0x5)
	class                                                        ImpactDamagerType;                                 // 0x618(0x8)
	Class Actor*                                                 FiredFrom;                                         // 0x620(0x8)
	char                                                         pad0x10_1K878[0x10];                               // 0x628(0x10)
	class                                                        StatTriggerForCannonballsHittingShips;             // 0x638(0x8)
	class                                                        StatTriggerForCannonballsHittingPlayers;           // 0x640(0x8)
	class                                                        StatTriggerForCannonballsHittingReactingActors;    // 0x648(0x8)
};


// Size 0x20 (Full Size[0x670] - InheritedSize[0x650]
class DamageableCannonProjectile: public CannonProjectile
{
public:
	char                                                         pad0x8_S5G9T[0x8];                                 // 0x650(0x8)
	float                                                        ImpactExplosionDelayOverride;                      // 0x658(0x4)
	char                                                         pad0x14_DVXXZ[0x14];                               // 0x65c(0x14)
};


// Size 0xa8 (Full Size[0x718] - InheritedSize[0x670]
class ChainLightningProjectile: public DamageableCannonProjectile
{
public:
	TArray<Byte TriggerChainLightningHealthChangeReasons>        TriggerChainLightningHealthChangeReasons;          // 0x670(0x10)
	Class ChainLightningSourceComponent*                         ChainLightningSource;                              // 0x680(0x8)
	Struct Vector                                                PostFireProjectileScale;                           // 0x688(0xc)
	float                                                        PostFireScaleSpeed;                                // 0x694(0x4)
	char                                                         pad0x80_77MMB[0x80];                               // 0x698(0x80)
};


// Size 0x18 (Full Size[0x688] - InheritedSize[0x670]
class DamageableCannonProjectileTest: public DamageableCannonProjectile
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindableLaunchableProjectileInterface: public Interface
{
public:
};


// Size 0x1b8 (Full Size[0x1e0] - InheritedSize[0x28]
class SirenTridentProjectileParams: public DataAsset
{
public:
	byte                                                         ParameterState;                                    // 0x28(0x1)
	char                                                         pad0x7_1THQF[0x7];                                 // 0x29(0x7)
	Struct ExplosionInfo                                         ExplosionParams;                                   // 0x30(0x160)
	float                                                        CollisionRadius;                                   // 0x190(0x4)
	float                                                        MaterialScale;                                     // 0x194(0x4)
	float                                                        MaterialScaleChangeDuration;                       // 0x198(0x4)
	float                                                        LaunchSpeed;                                       // 0x19c(0x4)
	float                                                        ChargeTime;                                        // 0x1a0(0x4)
	float                                                        LifeSpan;                                          // 0x1a4(0x4)
	int                                                          AmmoCost;                                          // 0x1a8(0x4)
	float                                                        VfxCustomParameterValue;                           // 0x1ac(0x4)
	struct FName                                                 ProjectileAudioSwitchState;                        // 0x1b0(0x8)
	Class WwiseEvent*                                            TrailSfxEventStart;                                // 0x1b8(0x8)
	Class WwiseEvent*                                            TrailSfxEventStop;                                 // 0x1c0(0x8)
	class                                                        ImpactId;                                          // 0x1c8(0x8)
	Class ForceFeedbackEffect*                                   FireForceFeedback;                                 // 0x1d0(0x8)
	Class ForceFeedbackEffect*                                   SizeChangeForceFeedback;                           // 0x1d8(0x8)
};


// Size 0x1a8 (Full Size[0x818] - InheritedSize[0x670]
class SirenTridentProjectile: public DamageableCannonProjectile
{
public:
	char                                                         pad0x10_GEKZA[0x10];                               // 0x670(0x10)
	TArray<class SirenTridentProjectileParams*>                  ProjectileParameters;                              // 0x680(0x10)
	float                                                        CurrentMaterialScale;                              // 0x690(0x4)
	struct FName                                                 MaterialScaleParameterName;                        // 0x694(0x8)
	char                                                         pad0x4_2QDQE[0x4];                                 // 0x69c(0x4)
	Class MaterialInstanceDynamic*                               DynamicMaterialInstance;                           // 0x6a0(0x8)
	Class SirenTridentProjectileParams*                          CurrentProjectileParameters;                       // 0x6a8(0x8)
	char                                                         pad0x8_J4RHR[0x8];                                 // 0x6b0(0x8)
	Class SphereComponent*                                       CollisionSphere;                                   // 0x6b8(0x8)
	Class RewindComponent*                                       RewindComponent;                                   // 0x6c0(0x8)
	char                                                         pad0x150_N76DC[0x150];                             // 0x6c8(0x150)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileLauncherMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileLauncherMechanismSourceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class ProjectileLauncherMechanismSourceDataAsset: public DataAsset
{
public:
	float                                                        CannonRangeInMetres;                               // 0x28(0x4)
	float                                                        CannonAngle;                                       // 0x2c(0x4)
	TArray<struct ShipParams>                                    ShipParams;                                        // 0x30(0x10)
	Struct ProjectileLauncherMechanismSourceWatercraftParams     WatercraftParams;                                  // 0x40(0x38)
};


// Size 0x110 (Full Size[0x6e0] - InheritedSize[0x5d0]
class ProjectileLauncherMechanismSourceComponent: public ArrowComponent
{
public:
	char                                                         pad0x8_390MV[0x8];                                 // 0x5d0(0x8)
	Struct FloatRange                                            InitialLaunchDelay;                                // 0x5d8(0x10)
	Struct FloatRange                                            RepeatedLaunchDelay;                               // 0x5e8(0x10)
	byte                                                         Mode;                                              // 0x5f8(0x1)
	char                                                         pad0x7_YTP9W[0x7];                                 // 0x5f9(0x7)
	TArray<struct TargetLocations>                               TargetLocations;                                   // 0x600(0x10)
	Class ProjectileLauncherMechanismSourceDataAsset*            Params;                                            // 0x610(0x8)
	class                                                        ProjectileType;                                    // 0x618(0x8)
	float                                                        ProjectileSpeed;                                   // 0x620(0x4)
	float                                                        Gravity;                                           // 0x624(0x4)
	float                                                        GravityScalar;                                     // 0x628(0x4)
	bool                                                         PreferHigherAngles;                                // 0x62c(0x1)
	char                                                         pad0x3_G59L4[0x3];                                 // 0x62d(0x3)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x630(0x8)
	Class WwiseEvent*                                            LaunchSfx;                                         // 0x638(0x8)
	Class Object*                                                LaunchVFX;                                         // 0x640(0x8)
	bool                                                         Enabled;                                           // 0x678(0x1)
	char                                                         pad0x67_9IFII[0x67];                               // 0x679(0x67)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class DamageableProjectileLauncherMechanism: public Actor
{
public:
	char                                                         pad0x8_WNONF[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	Class ProjectileLauncherMechanismSourceComponent*            ProjectileLauncher;                                // 0x3d8(0x8)
	Class DamageableComponent*                                   DamageableComponent;                               // 0x3e0(0x8)
	char                                                         pad0x10_H9DYK[0x10];                               // 0x3e8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LeakableInterface: public Interface
{
public:
};


// Size 0x420 (Full Size[0x820] - InheritedSize[0x400]
class DamageZone: public InteractableBase
{
public:
	char                                                         pad0x30_9IM98[0x30];                               // 0x400(0x30)
	float                                                        InteractionPointDepthOffset;                       // 0x430(0x4)
	float                                                        MaximumRepairAngleToRepairer;                      // 0x434(0x4)
	float                                                        MaximumRepairDistance;                             // 0x438(0x4)
	float                                                        HullFloodedPercentageToShiftWaterSamplingPos;      // 0x43c(0x4)
	float                                                        WaterSampleOffsetBelowHullFloodThreshold;          // 0x440(0x4)
	float                                                        WaterSampleOffsetAboveHullFloodThreshold;          // 0x444(0x4)
	float                                                        InternalWaterHeightDeltaForVFXUpdate;              // 0x448(0x4)
	Struct Vector                                                InternalWaterSamplePositionTop;                    // 0x44c(0xc)
	Struct Vector                                                InternalWaterSamplePositionBottom;                 // 0x458(0xc)
	Struct Vector                                                InternalWaterSamplePositionCurrent;                // 0x464(0xc)
	float                                                        WaterSplashDelayMax;                               // 0x470(0x4)
	float                                                        WaterSplashDelayMin;                               // 0x474(0x4)
	Class SceneComponent*                                        SceneRootComponent;                                // 0x478(0x8)
	Class InteractableComponent*                                 InteractionComponent;                              // 0x480(0x8)
	byte                                                         LocationOnShip;                                    // 0x488(0x1)
	char                                                         pad0x3_2Z0D7[0x3];                                 // 0x489(0x3)
	Struct Vector                                                AIInteractionOffset;                               // 0x48c(0xc)
	class                                                        UndoRepairItemDesc;                                // 0x498(0x8)
	Struct FText                                                 UndoRepairTooltipText;                             // 0x4a0(0x38)
	Struct FText                                                 UndoRepairInventoryFullTooltipText;                // 0x4d8(0x38)
	char                                                         pad0x8_7H8CH[0x8];                                 // 0x510(0x8)
	TArray<struct LevelOfDamageProperties>                       LevelOfDamageProperties;                           // 0x518(0x10)
	bool                                                         IsUnderExternalWater;                              // 0x528(0x1)
	bool                                                         IsUnderInternalWater;                              // 0x529(0x1)
	char                                                         pad0x6_8EXEM[0x6];                                 // 0x52a(0x6)
	class                                                        RepairType;                                        // 0x530(0x8)
	Class ShipInternalWater*                                     InternalWater;                                     // 0x538(0x8)
	char                                                         pad0x8_QHWJ1[0x8];                                 // 0x540(0x8)
	Class DecalComponent*                                        HoleDecalComponent;                                // 0x548(0x8)
	Class ParticleSystemComponent*                               WaterLeakParticleSystem;                           // 0x550(0x8)
	Class ParticleSystemComponent*                               WaterLeakParticleSystemRepairing;                  // 0x558(0x8)
	Class ParticleSystemComponent*                               BubbleLeakParticleSystem;                          // 0x560(0x8)
	Class ParticleSystemComponent*                               BubbleLeakParticleSystemRepairing;                 // 0x568(0x8)
	Class ParticleSystemComponent*                               SplashParticleSystem;                              // 0x570(0x8)
	Class ParticleSystem*                                        InternalHitVfx;                                    // 0x578(0x8)
	char                                                         pad0x8_IRFAN[0x8];                                 // 0x580(0x8)
	Struct WwiseEmitter                                          WaterLeakEmitter;                                  // 0x588(0x20)
	Class WwiseEvent*                                            WaterLeakSfx_Play;                                 // 0x5a8(0x8)
	Class WwiseEvent*                                            WaterLeakSfx_Stop;                                 // 0x5b0(0x8)
	Class WwiseEvent*                                            WaterLeakRepairSfx_Play;                           // 0x5b8(0x8)
	Class WwiseEvent*                                            WaterLeakRepairSfx_Stop;                           // 0x5c0(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchGroup;                    // 0x5c8(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchDefaultAboveWater;        // 0x5d0(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchUnderwater;               // 0x5d8(0x8)
	struct FName                                                 LeakDamageSwitchGroup;                             // 0x5e0(0x8)
	struct FName                                                 WaterLevelRTPC;                                    // 0x5e8(0x8)
	float                                                        WaterLeakFadeTime;                                 // 0x5f0(0x4)
	char                                                         pad0x4_COGH6[0x4];                                 // 0x5f4(0x4)
	Class WwiseObjectPoolWrapper*                                WaterLeakWisePool;                                 // 0x5f8(0x8)
	Class WwiseEvent*                                            Strain_DamageSfx;                                  // 0x600(0x8)
	Class WwiseObjectPoolWrapper*                                StrainDamagePool;                                  // 0x608(0x8)
	struct FName                                                 WaterLeakEmitterName;                              // 0x610(0x8)
	char                                                         pad0x8_O4JVK[0x8];                                 // 0x618(0x8)
	TArray<struct ExternalHitList>                               ExternalHitList;                                   // 0x620(0x10)
	int                                                          Rep_ServerUpdateEventCount;                        // 0x630(0x4)
	char                                                         pad0x4_69RK3[0x4];                                 // 0x634(0x4)
	Struct AuthorityRepairableState                              AuthorityRepairableState;                          // 0x638(0x18)
	char                                                         pad0x4_98O1M[0x4];                                 // 0x650(0x4)
	int                                                          DamageLevel;                                       // 0x654(0x4)
	int                                                          RepairedDamageLevel;                               // 0x658(0x4)
	bool                                                         AboutToBlow;                                       // 0x65c(0x1)
	char                                                         pad0x1c3_YLYNK[0x1c3];                             // 0x65d(0x1c3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageZoneAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x50 (Full Size[0xe8] - InheritedSize[0x98]
class DebugCreateAndPlayNpcAnimationStep: public TaleQuestStep
{
public:
	Class DebugCreateAndPlayNpcAnimationStepDesc*                StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x10_NFZ20[0x10];                               // 0xa0(0x10)
	Class NPCDialogComponent*                                    NPCDialogComponent;                                // 0xb0(0x8)
	Class CutSceneActor*                                         CutSceneActor;                                     // 0xb8(0x8)
	Class Actor*                                                 SpawnedActor;                                      // 0xc0(0x8)
	Class PlaceableReaction*                                     PlaceableReactionActor;                            // 0xc8(0x8)
	char                                                         pad0x18_8FMX2[0x18];                               // 0xd0(0x18)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class DebugCreateAndPlayNpcAnimationStepDesc: public TaleQuestStepDesc
{
public:
	class                                                        NpcToSpawn;                                        // 0x80(0x8)
	Struct StringAssetReference                                  SpawnLocation;                                     // 0x88(0x10)
	Struct StringAssetReference                                  PlaceableReaction;                                 // 0x98(0x10)
	Class PlayNpcAnimationResource*                              AnimationParameters;                               // 0xa8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugFlyingActionStateId: public ActionStateId
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class DebugLandmarkLocation: public Actor
{
public:
	float                                                        Radius;                                            // 0x3c8(0x4)
	float                                                        Height;                                            // 0x3cc(0x4)
	Struct Vector                                                Pos;                                               // 0x3d0(0xc)
	char                                                         pad0x4_JVFIQ[0x4];                                 // 0x3dc(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DebugMoveUpAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugShipFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugShipInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class DebugShipService: public Object
{
public:
	char                                                         pad0x18_VOOTN[0x18];                               // 0x28(0x18)
	Class Ship*                                                  PlayerShip;                                        // 0x40(0x8)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class DebugSkipToStep: public TaleQuestStep
{
public:
	Class DebugSkipToStepDesc*                                   Desc;                                              // 0x98(0x8)
	char                                                         pad0x10_SHLJ2[0x10];                               // 0xa0(0x10)
};


// Size 0x18 (Full Size[0x98] - InheritedSize[0x80]
class DebugSkipToStepDesc: public TaleQuestStepDesc
{
public:
	Class TaleQuestStepDesc*                                     NextDesc;                                          // 0x80(0x8)
	Struct FString                                               SkipName;                                          // 0x88(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DebugSuperSailorActionStateId: public ActionStateId
{
public:
};


// Size 0x18 (Full Size[0x2b0] - InheritedSize[0x298]
class DebugSuperSailorInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class DebugTeleportCrewStep: public TaleQuestStep
{
public:
	Class DebugTeleportCrewStepDesc*                             Desc;                                              // 0x98(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class DebugTeleportCrewStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    LocatorVar;                                        // 0x80(0x30)
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class DebugTreasureLocation: public Actor
{
public:
	float                                                        DigRadius;                                         // 0x3c8(0x4)
	Struct Vector                                                Pos;                                               // 0x3cc(0xc)
	char                                                         pad0x8_T0TZY[0x8];                                 // 0x3d8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DebugWieldablesData: public DataAsset
{
public:
	TArray<class Class*>                                         AllDebugWieldables;                                // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DeferralReasonPopUpNotificationDataAsset: public DataAsset
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
	TArray<struct DeferralReasonPopUpNotifications>              DeferralReasonPopUpNotifications;                  // 0x30(0x10)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class OpinionatedNameplateAttitudeTestActor: public Actor
{
public:
	byte                                                         DesiredAttitude;                                   // 0x3c8(0x1)
	char                                                         pad0x7_36S96[0x7];                                 // 0x3c9(0x7)
};


// Size 0x8 (Full Size[0x448] - InheritedSize[0x440]
class DeferredNameplateAttitudeTestActor: public Pawn
{
public:
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class DelayLoadService: public Object
{
public:
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class DelayStep: public TaleQuestStep
{
public:
	Class DelayStepDesc*                                         Desc;                                              // 0x98(0x8)
	char                                                         pad0x10_OFAOR[0x10];                               // 0xa0(0x10)
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class DelayStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        Delay;                                             // 0x80(0x4)
	char                                                         pad0x4_6NU1B[0x4];                                 // 0x84(0x4)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableCompanyRequirement: public DeliverableRequirementBase
{
public:
	TArray<class Class*>                                         AcceptedCompanies;                                 // 0x30(0x10)
};


// Size 0x148 (Full Size[0x170] - InheritedSize[0x28]
class DeliverableRedirectionActionDataAsset: public DataAsset
{
public:
	TArray<class DeliverableRedirectionContextHandlerBase*>      Handlers;                                          // 0x28(0x10)
	Struct FText                                                 RedirectionTooltip;                                // 0x38(0x38)
	Struct FText                                                 VisitSingleFemaleNPCTooltip;                       // 0x70(0x38)
	Struct FText                                                 VisitSingleMaleNPCTooltip;                         // 0xa8(0x38)
	Struct FText                                                 VisitSingleCompanyNPCTooltip;                      // 0xe0(0x38)
	TArray<struct VisitSingleCompanyNPCTooltipOverride>          VisitSingleCompanyNPCTooltipOverride;              // 0x118(0x10)
	TArray<struct VisitMultipleNPCCompaniesTooltip>              VisitMultipleNPCCompaniesTooltip;                  // 0x128(0x10)
	Struct FText                                                 GoToOutpostTooltip;                                // 0x138(0x38)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class DeliverableRedirectionSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  DeliverableRedirectionActionDataAssetLocation;     // 0x38(0x10)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DeliverableToNPCRequirement: public DeliverableRequirementBase
{
public:
	class                                                        TargetNPCClass;                                    // 0x30(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableVoyageRequirement: public DeliverableRequirementBase
{
public:
	TArray<Assetclass AllowedVoyages>                            AllowedVoyages;                                    // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DiggableParentInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingAnimationDataAsset: public DataAsset
{
public:
	TArray<struct AnimationOverrides>                            AnimationOverrides;                                // 0x28(0x10)
	Class ItemDiggingAnimationConfig*                            Default;                                           // 0x38(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class DiggingAudioDataAsset: public DataAsset
{
public:
	TArray<struct AudioOverrides>                                AudioOverrides;                                    // 0x28(0x10)
	Class ItemDiggingAudioConfig*                                Default;                                           // 0x38(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x40(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingBaseParamsDataAsset: public DataAsset
{
public:
	TArray<struct BaseOverrides>                                 BaseOverrides;                                     // 0x28(0x10)
	Class ItemDiggingBaseConfig*                                 Default;                                           // 0x38(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingBuryParamsDataAsset: public DataAsset
{
public:
	TArray<struct Overrides>                                     Overrides;                                         // 0x28(0x10)
	Class ItemDiggingBuryConfig*                                 Default;                                           // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExhumableInterface: public Interface
{
public:
};


// Size 0x148 (Full Size[0x210] - InheritedSize[0xc8]
class DiggingComponent: public ActorComponent
{
public:
	char                                                         pad0x28_0NDO4[0x28];                               // 0xc8(0x28)
	Class Actor*                                                 Discoverer;                                        // 0xf0(0x8)
	Struct BuriedFactor                                          BuriedFactor;                                      // 0xf8(0x14)
	byte                                                         State;                                             // 0x10c(0x1)
	char                                                         pad0x3_A25VY[0x3];                                 // 0x10d(0x3)
	Struct Vector                                                StartingLocation;                                  // 0x110(0xc)
	Struct Rotator                                               StartingRotation;                                  // 0x11c(0xc)
	Class MaterialInstanceDynamic*                               ItemDynamicMaterial;                               // 0x128(0x8)
	Struct ItemDiggingMergedConfig                               DiggingConfig;                                     // 0x130(0x28)
	Class DiggingSettings*                                       DiggingSettings;                                   // 0x158(0x8)
	Class WwiseObjectPoolWrapper*                                CachedSfxPool;                                     // 0x160(0x8)
	char                                                         pad0xa8_6Q1AZ[0xa8];                               // 0x168(0xa8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class DiggingEffectsDataAsset: public DataAsset
{
public:
	TArray<struct EffectsOverrides>                              EffectsOverrides;                                  // 0x28(0x10)
	Class ItemDiggingEffectsConfig*                              Default;                                           // 0x38(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class DiggingConfigResolverDataAsset: public DataAsset
{
public:
	Class DiggingAudioDataAsset*                                 AudioDataAsset;                                    // 0x28(0x8)
	Class DiggingAnimationDataAsset*                             AnimationDataAsset;                                // 0x30(0x8)
	Class DiggingEffectsDataAsset*                               EffectsDataAsset;                                  // 0x38(0x8)
	Class DiggingBaseParamsDataAsset*                            BaseParamsDataAsset;                               // 0x40(0x8)
	Class DiggingBuryParamsDataAsset*                            BuryingParamsDataAsset;                            // 0x48(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DioramaDebugMenuEntries: public DataAsset
{
public:
	TArray<struct Dioramas>                                      Dioramas;                                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DisableShipContainersStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DivingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableCutsceneInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x5b8] - InheritedSize[0x510]
class DockableCutscene: public ControllableObject
{
public:
	char                                                         pad0x8_58XZB[0x8];                                 // 0x510(0x8)
	Class AnimSequence*                                          FirstPersonAnimToPlay;                             // 0x518(0x8)
	Class AnimMontage*                                           DockableAnimToPlay;                                // 0x520(0x8)
	Class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x528(0x8)
	float                                                        DetachCutOffTime;                                  // 0x530(0x4)
	char                                                         pad0x4_I9IZ5[0x4];                                 // 0x534(0x4)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x538(0x8)
	Struct FText                                                 DockableCutsceneName;                              // 0x540(0x38)
	Struct FText                                                 InteractWithCutsceneText;                          // 0x578(0x38)
	struct FName                                                 DockingSocketName;                                 // 0x5b0(0x8)
};


// Size 0x8 (Full Size[0x5c0] - InheritedSize[0x5b8]
class TestDockableCutscene: public DockableCutscene
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableCutsceneActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class DockableCutsceneInputComponent: public LookAtOffsetInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockedToInteractableAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x1f0 (Full Size[0x9d0] - InheritedSize[0x7e0]
class DoubleActionItem: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x18_P99KB[0x18];                               // 0x7e0(0x18)
	Class ItemActionComponent*                                   PrimaryAction;                                     // 0x7f8(0x8)
	Class ItemActionComponent*                                   SecondaryAction;                                   // 0x800(0x8)
	byte                                                         ActionPriority;                                    // 0x808(0x1)
	bool                                                         IsDisplaceable;                                    // 0x809(0x1)
	bool                                                         ShouldBlockPickup;                                 // 0x80a(0x1)
	char                                                         pad0x1_F7E7S[0x1];                                 // 0x80b(0x1)
	float                                                        ActionMoveSpeedScalar;                             // 0x80c(0x4)
	byte                                                         ActionSensitivitySettingCategory;                  // 0x810(0x1)
	char                                                         pad0x1bf_1RVOK[0x1bf];                             // 0x811(0x1bf)
};


// Size 0x20 (Full Size[0x9f0] - InheritedSize[0x9d0]
class DoubleActionItemWithAmmo: public DoubleActionItem
{
public:
	char                                                         pad0x10_V7NXR[0x10];                               // 0x9d0(0x10)
	bool                                                         bShouldShowAmmoUI;                                 // 0x9e0(0x1)
	char                                                         pad0x3_MO7BA[0x3];                                 // 0x9e1(0x3)
	int                                                          AmmoMax;                                           // 0x9e4(0x4)
	int                                                          AmmoLeft;                                          // 0x9e8(0x4)
	char                                                         pad0x4_J6DT1[0x4];                                 // 0x9ec(0x4)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class Drapes: public Actor
{
public:
	Class StaticMeshComponent*                                   DrapesMeshComponent;                               // 0x3c8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3d0(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class DrapesPartDescAsset: public ShipPartDescAsset
{
public:
	Struct DrapesPartDesc                                        DrapesPartDesc;                                    // 0x28(0x8)
};


// Size 0x58 (Full Size[0x840] - InheritedSize[0x7e8]
class DroppedPouchItemProxy: public FloatingItemProxy
{
public:
	char                                                         pad0x8_IZTZI[0x8];                                 // 0x7e8(0x8)
	Class WwiseEvent*                                            OnPouchOpenedSfx;                                  // 0x7f0(0x8)
	Struct WwiseEmitter                                          OpenPouchEmitter;                                  // 0x7f8(0x20)
	byte                                                         TrackedActorType;                                  // 0x818(0x1)
	char                                                         pad0x7_N7HBY[0x7];                                 // 0x819(0x7)
	Class DitherComponent*                                       DitherComponent;                                   // 0x820(0x8)
	float                                                        FadeDuration;                                      // 0x828(0x4)
	char                                                         pad0x14_RP2KA[0x14];                               // 0x82c(0x14)
};


// Size 0x0 (Full Size[0x840] - InheritedSize[0x840]
class AmmoPouchItemProxy: public DroppedPouchItemProxy
{
public:
};


// Size 0x8 (Full Size[0x848] - InheritedSize[0x840]
class RewardPouchItemProxy: public DroppedPouchItemProxy
{
public:
	class                                                        Company;                                           // 0x840(0x8)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class DrunkennessComponentPublicData: public DataAsset
{
public:
	TArray<struct DrunkennessSetupData>                          DrunkennessSetupData;                              // 0x28(0x10)
	float                                                        VomitingThresholdWhenGettingDrunker;               // 0x38(0x4)
	float                                                        VomitingThresholdWhenSobering;                     // 0x3c(0x4)
	float                                                        MinTimeBetweenVomitSpews;                          // 0x40(0x4)
	float                                                        MaxTimeBetweenVomitSpews;                          // 0x44(0x4)
	float                                                        MinVomitSpewDuration;                              // 0x48(0x4)
	float                                                        MaxVomitSpewDuration;                              // 0x4c(0x4)
	float                                                        WaterSplashSoberingAmount;                         // 0x50(0x4)
	float                                                        WaterSplashSoberingRate;                           // 0x54(0x4)
	Class CurveFloat*                                            DrunkennessRemappingCurveForScreenVfx;             // 0x58(0x8)
	Class CurveFloat*                                            DrunkennessRemappingCurveForStaggering;            // 0x60(0x8)
	float                                                        CameraRollAmp;                                     // 0x68(0x4)
	float                                                        CameraRollAccel;                                   // 0x6c(0x4)
	Class WwiseObjectPoolWrapper*                                DrunkennessComponentPool;                          // 0x70(0x8)
	Class WwiseEvent*                                            StartDrunkennessSfx;                               // 0x78(0x8)
	Class WwiseEvent*                                            StopDrunkennessSfx;                                // 0x80(0x8)
	Class WwiseEvent*                                            StartDrunkennessSfxRemotePlayer;                   // 0x88(0x8)
	Class WwiseEvent*                                            StopDrunkennessSfxRemotePlayer;                    // 0x90(0x8)
	struct FName                                                 PlayerDrunkennessAmountRtpc;                       // 0x98(0x8)
	struct FName                                                 RemotePlayerDrunkennessAmountRtpc;                 // 0xa0(0x8)
	float                                                        MinDrunkennessToToggleLocomotionAnimType;          // 0xa8(0x4)
	char                                                         pad0x4_G3GGC[0x4];                                 // 0xac(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DrunkennessInterface: public Interface
{
public:
};


// Size 0x1c0 (Full Size[0x288] - InheritedSize[0xc8]
class DrunkennessComponent: public ActorComponent
{
public:
	char                                                         pad0x8_UWXW0[0x8];                                 // 0xc8(0x8)
	Class DrunkennessComponentPublicData*                        PublicData;                                        // 0xd0(0x8)
	char                                                         pad0x170_EVY6H[0x170];                             // 0xd8(0x170)
	float                                                        TargetDrunkenness;                                 // 0x248(0x4)
	char                                                         pad0x4_ADIGZ[0x4];                                 // 0x24c(0x4)
	float                                                        CurrentDrunkenness;                                // 0x250(0x4)
	char                                                         pad0x4_P7TBN[0x4];                                 // 0x254(0x4)
	float                                                        RemainingAmountToSoberUpDueToWaterSplash;          // 0x258(0x4)
	char                                                         pad0xc_QO2JL[0xc];                                 // 0x25c(0xc)
	Struct Status                                                AlcoholDrunkennessStatus;                          // 0x268(0x18)
	struct FName                                                 VomitVFXType;                                      // 0x280(0x8)
};


// Size 0xd0 (Full Size[0x198] - InheritedSize[0xc8]
class DrunkenChestComponent: public ActorComponent
{
public:
	Class WwiseEvent*                                            OnPickedUpLocalPlayerOnlyEvent;                    // 0xc8(0x8)
	Class DrunkennessComponent*                                  DrunkennessComponent;                              // 0xd0(0x8)
	Class Actor*                                                 Wielder;                                           // 0xd8(0x8)
	float                                                        TargetDrunkenness;                                 // 0xe0(0x4)
	char                                                         pad0xb4_CFDGA[0xb4];                               // 0xe4(0xb4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DrunkStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DuringAbilityAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x90 (Full Size[0x6b0] - InheritedSize[0x620]
class DynamicFlowComponent: public StaticMeshComponent
{
public:
	Class Texture2D*                                             FlowTexture;                                       // 0x620(0x8)
	int                                                          TextureSizeX;                                      // 0x628(0x4)
	int                                                          TextureSizeY;                                      // 0x62c(0x4)
	float                                                        UpdateCullDistance;                                // 0x630(0x4)
	Struct Vector2D                                              FlowUVScrollSpeed;                                 // 0x634(0x8)
	char                                                         pad0x4_Y52U4[0x4];                                 // 0x63c(0x4)
	Struct Vector4                                               WaterDepthDistances;                               // 0x640(0x10)
	float                                                        NearFadeStart;                                     // 0x650(0x4)
	float                                                        NearFadeRange;                                     // 0x654(0x4)
	Struct Vector2D                                              FlowScale;                                         // 0x658(0x8)
	Struct Vector2D                                              FlowBias;                                          // 0x660(0x8)
	char                                                         pad0x8_IZ2MT[0x8];                                 // 0x668(0x8)
	Struct Vector4                                               BlurCentreWeights;                                 // 0x670(0x10)
	Struct Vector4                                               BlurEdgeWeights;                                   // 0x680(0x10)
	Struct Vector4                                               FadeWeights;                                       // 0x690(0x10)
	Class TextureRenderTarget2D*                                 RenderTargetTexture;                               // 0x6a0(0x8)
	Class TextureRenderTarget2D*                                 RenderTargetTexturePingPong;                       // 0x6a8(0x8)
};


// Size 0x190 (Full Size[0x258] - InheritedSize[0xc8]
class EmblemComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmblemServiceInterface: public Interface
{
public:
};


// Size 0x1f0 (Full Size[0x218] - InheritedSize[0x28]
class EmblemService: public Object
{
public:
	char                                                         pad0x8_CP5LB[0x8];                                 // 0x28(0x8)
	TArray<class PopUpMessageDesc*>                              GarbageCollectorVisiblePopups;                     // 0x30(0x10)
	TArray<class PopUpAudioDesc*>                                GarbageCollectorPopupAudioOverrides;               // 0x40(0x10)
	char                                                         pad0x1c8_WYYV3[0x1c8];                             // 0x50(0x1c8)
};


// Size 0xb0 (Full Size[0x478] - InheritedSize[0x3c8]
class EmissaryFlag: public Actor
{
public:
	char                                                         pad0x8_I0SLL[0x8];                                 // 0x3c8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3d0(0x8)
	Class WwiseEvent*                                            StartAmbientFlagSfx;                               // 0x3d8(0x8)
	Class WwiseEvent*                                            StopAmbientFlagSfx;                                // 0x3e0(0x8)
	Class WwiseEvent*                                            AttachFlagSfx;                                     // 0x3e8(0x8)
	Class WwiseEvent*                                            DetachFlagSfx;                                     // 0x3f0(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x3f8(0x8)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x400(0x8)
	Class StaticMeshComponent*                                   EmissaryFlagStaticMeshComponent;                   // 0x408(0x8)
	char                                                         pad0x28_ECYF4[0x28];                               // 0x410(0x28)
	Struct StringAssetReference                                  CurrentEmissaryFlagMesh;                           // 0x438(0x10)
	char                                                         pad0x30_DVOPB[0x30];                               // 0x448(0x30)
};


// Size 0x0 (Full Size[0x478] - InheritedSize[0x478]
class MastEmissaryFlag: public EmissaryFlag
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmissaryRewardMultiplierModelDataAsset: public DataAsset
{
public:
	TArray<struct EmissaryRewardMultiplierModels>                EmissaryRewardMultiplierModels;                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TooltipDetailedEventProviderInterface: public Interface
{
public:
};


// Size 0x218 (Full Size[0x5e0] - InheritedSize[0x3c8]
class EmissaryVoteInteractionActor: public Actor
{
public:
	char                                                         pad0x10_4CHM6[0x10];                               // 0x3c8(0x10)
	float                                                        FadeDuration;                                      // 0x3d8(0x4)
	char                                                         pad0x4_SPOTL[0x4];                                 // 0x3dc(0x4)
	Struct EmissaryDisplayInformation                            EmissaryActiveInfo;                                // 0x3e0(0x90)
	Struct EmissaryDisplayInformation                            EmissaryInactiveInfo;                              // 0x470(0x90)
	char                                                         pad0xe0_WA4M0[0xe0];                               // 0x500(0xe0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EmoteActionStateId: public ActionStateId
{
public:
};


// Size 0x30 (Full Size[0x100] - InheritedSize[0xd0]
class EmoteDesc: public ClothingDesc
{
public:
	Struct StringAssetReference                                  EmoteInfo;                                         // 0xd0(0x10)
	Struct StringAssetReference                                  BackgroundPath;                                    // 0xe0(0x10)
	struct FName                                                 LookAtSocketName;                                  // 0xf0(0x8)
	struct FName                                                 OverridePreviewCameraName;                         // 0xf8(0x8)
};


// Size 0x18 (Full Size[0x118] - InheritedSize[0x100]
class EmoteFlourishDesc: public EmoteDesc
{
public:
	TArray<struct FlourishMappings>                              FlourishMappings;                                  // 0x100(0x10)
	byte                                                         FlourishType;                                      // 0x110(0x1)
	char                                                         pad0x7_V1D2J[0x7];                                 // 0x111(0x7)
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class EmoteInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmoteItemCategoriesListingAsset: public DataAsset
{
public:
	TArray<class Class*>                                         EmoteItemCategories;                               // 0x28(0x10)
};


// Size 0x60 (Full Size[0xd8] - InheritedSize[0x78]
class EmoteRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_HBQMX[0x58];                               // 0x78(0x58)
	Class EmoteSettings*                                         EmoteSettings;                                     // 0xd0(0x8)
};


// Size 0x0 (Full Size[0xd8] - InheritedSize[0xd8]
class CostumeEmoteRadialContentRule: public EmoteRadialContentRule
{
public:
};


// Size 0x0 (Full Size[0xd8] - InheritedSize[0xd8]
class CurseEmoteRadialContentRule: public EmoteRadialContentRule
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmotesRadialDataAsset: public DataAsset
{
public:
	TArray<struct Emotes>                                        Emotes;                                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class EnchantedSpyglassItemInfo: public Actor
{
public:
};


// Size 0xb0 (Full Size[0x178] - InheritedSize[0xc8]
class EntitlementInformationComponent: public ActorComponent
{
public:
};


// Size 0x60 (Full Size[0x1d8] - InheritedSize[0x178]
class FrontendEntitlementInformationComponent: public EntitlementInformationComponent
{
public:
	TArray<class Object*>                                        CachedLoadedAssets;                                // 0x178(0x10)
	char                                                         pad0x50_OIXIQ[0x50];                               // 0x188(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_AllMermaidsInWorld: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_AllPlayerCharactersOnIsland: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_MembersOfNamedCrewOnIsland: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_NamedActor: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_NamedActorOnIsland: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_OccupiedLocationsInRegion: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_OccupiedPositionsOnIsland: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_TargetPosition: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnvQueryContext_TargetRotation: public EnvQueryContext
{
public:
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class EnvQueryGenerator_IslandAISpawnLocations: public EnvQueryGenerator
{
public:
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class EnvQueryGenerator_IslandTreasureLocations: public EnvQueryGenerator
{
public:
};


// Size 0xb0 (Full Size[0x220] - InheritedSize[0x170]
class EnvQueryTest_FacingAwayFromActor: public EnvQueryTest
{
public:
	class                                                        CentreContext;                                     // 0x170(0x8)
	class                                                        ActorContext;                                      // 0x178(0x8)
	byte                                                         ConeType;                                          // 0x180(0x1)
	char                                                         pad0x7_EZHOL[0x7];                                 // 0x181(0x7)
	Struct AIDataProviderFloatValue                              ConeThreshold;                                     // 0x188(0x30)
	Struct AIDataProviderFloatValue                              DistanceFromQuerierToValidBandOfPoints;            // 0x1b8(0x30)
	bool                                                         UseOriginAsThreat;                                 // 0x1e8(0x1)
	char                                                         pad0x7_H9806[0x7];                                 // 0x1e9(0x7)
	Struct AIDataProviderFloatValue                              AngleBias;                                         // 0x1f0(0x30)
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class EnvQueryTest_InAIShipEncounterZone: public EnvQueryTest
{
public:
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InIslandSafeZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_X5MPJ[0x4];                                 // 0x174(0x4)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InIslandShipDiveAndResurfaceExclusionZoneRadius: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_LJNQ1[0x4];                                 // 0x174(0x4)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InKrakenZone: public EnvQueryTest
{
public:
	float                                                        BufferRadius;                                      // 0x170(0x4)
	char                                                         pad0x4_FDHCM[0x4];                                 // 0x174(0x4)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InSeaRockZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_DMJ79[0x4];                                 // 0x174(0x4)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InShipwreckZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_PNCSO[0x4];                                 // 0x174(0x4)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InsideTinySharkExperience: public EnvQueryTest
{
public:
	float                                                        BufferRadius;                                      // 0x170(0x4)
	char                                                         pad0x4_AJHQ2[0x4];                                 // 0x174(0x4)
};


// Size 0x30 (Full Size[0x1a0] - InheritedSize[0x170]
class EnvQueryTest_InsideWorldBounds: public EnvQueryTest
{
public:
	Struct AIDataProviderFloatValue                              Radius;                                            // 0x170(0x30)
};


// Size 0x10 (Full Size[0x180] - InheritedSize[0x170]
class EnvQueryTest_InSpecificIslandZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	struct FName                                                 IslandName;                                        // 0x174(0x8)
	char                                                         pad0x4_X9NQ0[0x4];                                 // 0x17c(0x4)
};


// Size 0x30 (Full Size[0x1a0] - InheritedSize[0x170]
class EnvQueryTest_InStorm: public EnvQueryTest
{
public:
	Struct AIDataProviderFloatValue                              Radius;                                            // 0x170(0x30)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InSunkenIslandSurfaceZone: public EnvQueryTest
{
public:
	class                                                        ExclusionType;                                     // 0x170(0x8)
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InTemporaryStaticObstacle: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_RN1Q0[0x4];                                 // 0x174(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldEventZoneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldEventZoneServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x178] - InheritedSize[0x170]
class EnvQueryTest_InWorldEventZone: public EnvQueryTest
{
public:
	float                                                        Radius;                                            // 0x170(0x4)
	char                                                         pad0x4_O5ODL[0x4];                                 // 0x174(0x4)
};


// Size 0x48 (Full Size[0x1b8] - InheritedSize[0x170]
class EnvQueryTest_TraceByProfile: public EnvQueryTest
{
public:
	struct FName                                                 CollisionProfileName;                              // 0x170(0x8)
	Struct AIDataProviderFloatValue                              Radius;                                            // 0x178(0x30)
	class                                                        Context;                                           // 0x1a8(0x8)
	float                                                        ContextZOffset;                                    // 0x1b0(0x4)
	bool                                                         OnlyUseContextZ;                                   // 0x1b4(0x1)
	bool                                                         OffsetContextInwardsByRadius;                      // 0x1b5(0x1)
	char                                                         pad0x2_JCDHK[0x2];                                 // 0x1b6(0x2)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EquipClothingInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class EquipClothingComponent: public ActorComponent
{
public:
};


// Size 0x28 (Full Size[0x198] - InheritedSize[0x170]
class EquipmentChestViewModelComponent: public PossessionsChestViewModel
{
public:
	char                                                         pad0x10_24SOK[0x10];                               // 0x170(0x10)
	TArray<class Class*>                                         Categories;                                        // 0x180(0x10)
	bool                                                         IncludeAllCategory;                                // 0x190(0x1)
	char                                                         pad0x7_BHCD9[0x7];                                 // 0x191(0x7)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class EquippedWithClothingStatCondition: public StatCondition
{
public:
	Struct RequiredClothingData                                  RequiredClothingData;                              // 0x28(0x18)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class EquippedWithItemStatCondition: public StatCondition
{
public:
	Struct ItemRequirementData                                   RequiredItemsData;                                 // 0x28(0x18)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class EventBroadcastStep: public TaleQuestStep
{
public:
};


// Size 0x60 (Full Size[0xc0] - InheritedSize[0x60]
class EventTaleQuestService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EventTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class EventBroadcastStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 EventName;                                         // 0x80(0x8)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class EventCatchStep: public TaleQuestStep
{
public:
	Class EventCatchStepDesc*                                    Desc;                                              // 0x98(0x8)
	char                                                         pad0x8_Q04IW[0x8];                                 // 0xa0(0x8)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class EventCatchStepDesc: public TaleQuestStepDesc
{
public:
	bool                                                         AllowOutOfOrder;                                   // 0x80(0x1)
	char                                                         pad0x3_MZEIJ[0x3];                                 // 0x81(0x3)
	struct FName                                                 EventName;                                         // 0x84(0x8)
	char                                                         pad0x4_YN8CT[0x4];                                 // 0x8c(0x4)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class ExitOnAllCrewsDestroyedStep: public TaleQuestStep
{
public:
	Class ExitOnAllCrewsDestroyedStepDesc*                       Desc;                                              // 0x98(0x8)
	char                                                         pad0x8_FVTMW[0x8];                                 // 0xa0(0x8)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ExitOnAllCrewsDestroyedStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExplosionDamagerType: public DamagerType
{
public:
};


// Size 0x140 (Full Size[0x208] - InheritedSize[0xc8]
class ExplosiveComponent: public ActorComponent
{
public:
	char                                                         pad0x18_WGAEW[0x18];                               // 0xc8(0x18)
	float                                                        ExplosionDelayPerMetre;                            // 0xe0(0x4)
	char                                                         pad0x4_P06XU[0x4];                                 // 0xe4(0x4)
	Class Object*                                                ExplosionParticleSystem;                           // 0xe8(0x8)
	Class Object*                                                ExplosionOnSandParticleSystem;                     // 0xf0(0x8)
	Class Object*                                                ExplosionOnWaterSurfaceParticleSystem;             // 0xf8(0x8)
	Class Object*                                                ExplosionUnderWaterParticleSystem;                 // 0x100(0x8)
	Class Object*                                                SplashParticles;                                   // 0x108(0x8)
	float                                                        NearToSurfaceDistance;                             // 0x110(0x4)
	char                                                         pad0x4_ZU319[0x4];                                 // 0x114(0x4)
	Class WwiseEvent*                                            ExplosionSoundCue;                                 // 0x118(0x8)
	struct FName                                                 ExplosionSoundCueSwitchName;                       // 0x120(0x8)
	struct FName                                                 ExplosionSoundCueSwitchValueForOnLand;             // 0x128(0x8)
	struct FName                                                 ExplosionSoundCueSwitchValueForOnSand;             // 0x130(0x8)
	struct FName                                                 ExplosionSoundCueSwitchValueForOnWaterSurface;     // 0x138(0x8)
	struct FName                                                 ExplosionSoundCueIsObjectUnderWaterSwitchName;     // 0x140(0x8)
	struct FName                                                 ExplosionSoundCueIsObjectUnderWaterSwitchValueForAboveWater; // 0x148(0x8)
	struct FName                                                 ExplosionSoundCueIsObjectUnderWaterSwitchValueForBelowWater; // 0x150(0x8)
	Class WwiseObjectPoolWrapper*                                ExplosionSfxPool;                                  // 0x158(0x8)
	Class ParticleSystem*                                        HitReactParticleSystem;                            // 0x160(0x8)
	Class WwiseEvent*                                            HitReactSoundCue;                                  // 0x168(0x8)
	float                                                        MaxDepthForSplash;                                 // 0x170(0x4)
	byte                                                         HitTestTraceChannel;                               // 0x174(0x1)
	byte                                                         SandSurfaceType;                                   // 0x175(0x1)
	bool                                                         MakeOwnerInvisibleOnExplosion;                     // 0x176(0x1)
	char                                                         pad0x1_JK48L[0x1];                                 // 0x177(0x1)
	Class Actor*                                                 RootExplosionInstigator;                           // 0x178(0x8)
	Class HealthComponent*                                       HealthComponent;                                   // 0x180(0x8)
	char                                                         pad0x18_IX8NB[0x18];                               // 0x188(0x18)
	bool                                                         IsExploding;                                       // 0x1a0(0x1)
	char                                                         pad0x67_CWHJB[0x67];                               // 0x1a1(0x67)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipHullDamageDataAsset: public DataAsset
{
public:
	Struct ShipHullDamageParams                                  DamageParams;                                      // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RammableExplosiveDataAsset: public DataAsset
{
public:
	TArray<struct ExplosiveSpeedParams>                          ExplosiveSpeedParams;                              // 0x28(0x10)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class ExplosiveTriggerRammableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_YDUME[0x8];                                 // 0xc8(0x8)
	Class RammableExplosiveDataAsset*                            ExplosiveSettings;                                 // 0xd0(0x8)
	char                                                         pad0x10_BEQI6[0x10];                               // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EyeOfReachDamagerType: public DamagerType
{
public:
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class FaceTargetComponent: public ActorComponent
{
public:
	float                                                        BlendRotationInterpSpeed;                          // 0xc8(0x4)
	bool                                                         BlendRotationUseConstantInterp;                    // 0xcc(0x1)
	char                                                         pad0x1b_MC6VF[0x1b];                               // 0xcd(0x1b)
	Class Actor*                                                 TargetActorToFace;                                 // 0xe8(0x8)
	char                                                         pad0x48_Z0M9V[0x48];                               // 0xf0(0x48)
	float                                                        ClampYawRange;                                     // 0x138(0x4)
	float                                                        ClampYawCentre;                                    // 0x13c(0x4)
	float                                                        ClampYawRate;                                      // 0x140(0x4)
	char                                                         pad0x4_RMPTQ[0x4];                                 // 0x144(0x4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FeatureToggleStatCondition: public StatCondition
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FireBreathAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class FireBreathAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        FireBreathDurationMultiplier;                      // 0x40(0x4)
	char                                                         pad0x4_GIV9D[0x4];                                 // 0x44(0x4)
};


// Size 0x28 (Full Size[0xa0] - InheritedSize[0x78]
class FireBreathAIAbility: public AthenaAIAbility
{
public:
	Class Pawn*                                                  Owner;                                             // 0x78(0x8)
	Class FireBreathAIAbilityParams*                             SetupAbilityParams;                                // 0x80(0x8)
	Class StatusEffectOverlapZone*                               FireBreathEmitter;                                 // 0x88(0x8)
	Class VFXSpawnerComponent*                                   FireVFX;                                           // 0x90(0x8)
	char                                                         pad0x8_MD8LB[0x8];                                 // 0x98(0x8)
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class FireBreathAIAbilityParams: public AthenaAIAbilityParams
{
public:
	Struct AthenaAIAbilityPlayerBasedRanges                      FireBreathDuration;                                // 0xc8(0x10)
	class                                                        FireBreathObject;                                  // 0xd8(0x8)
	Struct VFXHandlerComponentParams                             FireBreathVFXParams;                               // 0xe0(0x40)
	Struct Vector                                                FireCollisionVolumeSize;                           // 0x120(0xc)
	float                                                        FireBreathZoneStartOffset;                         // 0x12c(0x4)
	float                                                        FireStartDelay;                                    // 0x130(0x4)
	float                                                        FireEndPreWarn;                                    // 0x134(0x4)
	class                                                        VfxSpawner;                                        // 0x138(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FireCannonNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0x80] - InheritedSize[0x78]
class FireChargedAttackAIAbility: public AthenaAIAbility
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class FireChargedAttackAIAbilityParams: public AthenaAIAbilityParams
{
public:
	TArray<struct ProjectileParams>                              ProjectileParams;                                  // 0xc8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FireChargedAttackAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FiredFromCannonActionStateId: public ActionStateId
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class FireStatStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariablePlayerStat                               Stat;                                              // 0x80(0x30)
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class FireworksDebugSpawnItemsDataAsset: public DataAsset
{
public:
	Struct ClassicFireworkDebugList                              ClassicFireworks;                                  // 0x28(0x70)
	Struct FireworkDebugListByFireworkType                       ThemedFireworks;                                   // 0x98(0x20)
	TArray<class ItemDescSpawnData*>                             Flares;                                            // 0xb8(0x10)
	TArray<class ItemDescSpawnData*>                             AllFireworks;                                      // 0xc8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FirstPersonAnimaticActionStateId: public ActionStateId
{
public:
};


// Size 0xc0 (Full Size[0x188] - InheritedSize[0xc8]
class IntentComponent: public ActorComponent
{
public:
	char                                                         pad0x10_85PVP[0x10];                               // 0xc8(0x10)
	byte                                                         AckToken;                                          // 0xd8(0x1)
	bool                                                         RequiresHandshake;                                 // 0xd9(0x1)
	char                                                         pad0x2_M4GGW[0x2];                                 // 0xda(0x2)
	float                                                        ServerIntent;                                      // 0xdc(0x4)
	float                                                        LocalIntent;                                       // 0xe0(0x4)
	char                                                         pad0xa4_YY89K[0xa4];                               // 0xe4(0xa4)
};


// Size 0x18 (Full Size[0x1a0] - InheritedSize[0x188]
class ControllableIntentComponent: public IntentComponent
{
public:
};


// Size 0x8 (Full Size[0x1a8] - InheritedSize[0x1a0]
class FixedIntentComponent: public ControllableIntentComponent
{
public:
	float                                                        Intent;                                            // 0x1a0(0x4)
	char                                                         pad0x4_FBEOC[0x4];                                 // 0x1a4(0x4)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class FixedWaterHeightShipComponent: public ActorComponent
{
public:
	char                                                         pad0x8_6O5HV[0x8];                                 // 0xc8(0x8)
	float                                                        RequiredWaterHeight;                               // 0xd0(0x4)
	char                                                         pad0x4_0V5D2[0x4];                                 // 0xd4(0x4)
};


// Size 0x208 (Full Size[0x2d0] - InheritedSize[0xc8]
class FlamesOfFateContainerComponent: public ActorComponent
{
public:
	char                                                         pad0x18_9Y7AH[0x18];                               // 0xc8(0x18)
	Struct TakeFlameOfFateParams                                 TakeFlameOfFateParams;                             // 0xe0(0xf8)
	Struct CycleFlameOfFateParams                                CycleFlameOfFateParams;                            // 0x1d8(0x78)
	Struct FlameOfFateAudioParams                                FlameOfFateAudioParams;                            // 0x250(0x10)
	byte                                                         DefaultFlameType;                                  // 0x260(0x1)
	bool                                                         CanAcceptFlameFromOtherObjects;                    // 0x261(0x1)
	Struct FlameData                                             CurrentFlameData;                                  // 0x262(0x2)
	Struct FlameOfFateEffectParams                               FlameOfFateEffectParams;                           // 0x264(0xc)
	Class ForceFeedbackEffect*                                   CycleFlameForceFeedback;                           // 0x270(0x8)
	char                                                         pad0x58_7KK9V[0x58];                               // 0x278(0x58)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamesOfFateHelpers: public BlueprintFunctionLibrary
{
public:
};


// Size 0x148 (Full Size[0x270] - InheritedSize[0x128]
class FlamesOfFateInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x18_8OBJ0[0x18];                               // 0x128(0x18)
	Struct FText                                                 DisplayName;                                       // 0x140(0x38)
	Struct FText                                                 TakeFlameTooltipText;                              // 0x178(0x38)
	Struct FText                                                 LanternNotRaisedToolTipText;                       // 0x1b0(0x38)
	Struct FText                                                 NotWieldingFlameTooltipText;                       // 0x1e8(0x38)
	Struct FText                                                 CannotSetFlameTooltipText;                         // 0x220(0x38)
	byte                                                         FlameColour;                                       // 0x258(0x1)
	char                                                         pad0x17_NCDQD[0x17];                               // 0x259(0x17)
};


// Size 0x18 (Full Size[0x288] - InheritedSize[0x270]
class FlamesOfFateQuestInteractableComponent: public FlamesOfFateInteractableComponent
{
public:
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class FlamesOfFateLantern: public Actor
{
public:
	byte                                                         FlameOfFateType;                                   // 0x3c8(0x1)
	char                                                         pad0x1f_SY8T0[0x1f];                               // 0x3c9(0x1f)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class FlamesOfFateSettingsAsset: public DataAsset
{
public:
	TArray<struct FlameInfo>                                     FlameInfo;                                         // 0x28(0x10)
	TArray<struct ShipInfo>                                      ShipInfo;                                          // 0x38(0x10)
	TArray<Byte SailWithFlamesAboardFlameTypesToIgnore>          SailWithFlamesAboardFlameTypesToIgnore;            // 0x48(0x10)
	TArray<struct SailWithFlamesAboardStatDataArray>             SailWithFlamesAboardStatDataArray;                 // 0x58(0x10)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class FlamesOfFateSettingsService: public Actor
{
public:
	char                                                         pad0x8_EWMIE[0x8];                                 // 0x3c8(0x8)
	Class FlamesOfFateSettingsAsset*                             Settings;                                          // 0x3d0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlintlockDamagerType: public DamagerType
{
public:
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class FlyingCreature: public Actor
{
public:
	Class WwiseObjectPoolWrapper*                                CreatureSoundPool;                                 // 0x3c8(0x8)
	Class WwiseEvent*                                            CreatureSoundToPlay;                               // 0x3d0(0x8)
	Class WwiseEvent*                                            CreatureSoundToStop;                               // 0x3d8(0x8)
	struct FName                                                 CreatureSwitchGroup;                               // 0x3e0(0x8)
	struct FName                                                 CreatureSwitch;                                    // 0x3e8(0x8)
	struct FName                                                 FlyingCreatureFactorRtpc;                          // 0x3f0(0x8)
	float                                                        FlyingCreatureFactorRtpcValue;                     // 0x3f8(0x4)
	char                                                         pad0x4_ZWYPT[0x4];                                 // 0x3fc(0x4)
	Struct WwiseEmitter                                          CreatureEmitter;                                   // 0x400(0x20)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class StoryDrivenFogBankDataAsset: public DataAsset
{
public:
	Struct FeatureFlag                                           Feature;                                           // 0x28(0xc)
	char                                                         pad0x4_BA6C4[0x4];                                 // 0x34(0x4)
	TArray<struct StoryResponses>                                StoryResponses;                                    // 0x38(0x10)
	TArray<class StoryDrivenFogBankDataAsset*>                   AssetsList;                                        // 0x48(0x10)
};


// Size 0x1b8 (Full Size[0x590] - InheritedSize[0x3d8]
class FogBank: public FogVolume
{
public:
	char                                                         pad0x18_7OZG7[0x18];                               // 0x3d8(0x18)
	TArray<struct FeatureToggledFogBankAssetsArray>              FeatureToggledFogBankAssetsArray;                  // 0x3f0(0x10)
	Class FogBankDataAsset*                                      DefaultFogBankDataAsset;                           // 0x400(0x8)
	Class FogBankDataAsset*                                      ActiveFogBankDataAsset;                            // 0x408(0x8)
	Class StoryDrivenFogBankDataAsset*                           StoryDrivenFogBankAssetsCollection;                // 0x410(0x8)
	Struct FogBankSettings                                       Settings;                                          // 0x418(0x4c)
	char                                                         pad0x12c_LOGLB[0x12c];                             // 0x464(0x12c)
};


// Size 0x1b8 (Full Size[0x1e0] - InheritedSize[0x28]
class FogBankDataAsset: public DataAsset
{
public:
	byte                                                         FogBankType;                                       // 0x28(0x1)
	char                                                         pad0x7_IOO2B[0x7];                                 // 0x29(0x7)
	Struct WeightedProbabilityRangeOfRanges                      Density;                                           // 0x30(0x30)
	Struct WeightedProbabilityRangeOfRanges                      RadiusXInKm;                                       // 0x60(0x30)
	Struct WeightedProbabilityRangeOfRanges                      RadiusYInKm;                                       // 0x90(0x30)
	Struct WeightedProbabilityRangeOfRanges                      HeightInKm;                                        // 0xc0(0x30)
	Struct LinearColor                                           DefaultColour;                                     // 0xf0(0x10)
	TArray<struct FogColourForSea>                               FogColourForSea;                                   // 0x100(0x10)
	Struct WeightedProbabilityRangeOfRanges                      FadeInDuration;                                    // 0x110(0x30)
	Struct WeightedProbabilityRangeOfRanges                      ActiveDuration;                                    // 0x140(0x30)
	Struct WeightedProbabilityRangeOfRanges                      FadeOutDuration;                                   // 0x170(0x30)
	Struct WeightedProbabilityRangeOfRanges                      EmergencyFadeOutDuration;                          // 0x1a0(0x30)
	bool                                                         Persistent;                                        // 0x1d0(0x1)
	char                                                         pad0x3_7BQQ0[0x3];                                 // 0x1d1(0x3)
	float                                                        TimeBetweenLocalPlayerDensityModifierUpdate;       // 0x1d4(0x4)
	float                                                        NotCulledDistanceFromPlayerInKm;                   // 0x1d8(0x4)
	float                                                        FullyCulledDistanceFromPlayerInKm;                 // 0x1dc(0x4)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class FogBankManagerDataAsset: public DataAsset
{
public:
	TArray<struct FogBankTemplates>                              FogBankTemplates;                                  // 0x28(0x10)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenFogBanks;                               // 0x38(0x30)
	float                                                        CheckForNearbyStormsInterval;                      // 0x68(0x4)
	float                                                        FailureRetryTime;                                  // 0x6c(0x4)
	float                                                        MinIslandDistanceFromStormToSpawnInKm;             // 0x70(0x4)
	float                                                        DistanceFromStormToEmergencyFadeOutInKm;           // 0x74(0x4)
	TArray<Byte InvalidIslandTypes>                              InvalidIslandTypes;                                // 0x78(0x10)
	TArray<struct FName>                                         InvalidIslandNames;                                // 0x88(0x10)
	TArray<struct IslandTypesToKeepAwayFrom>                     IslandTypesToKeepAwayFrom;                         // 0x98(0x10)
	TArray<struct IslandNamesToKeepAwayFrom>                     IslandNamesToKeepAwayFrom;                         // 0xa8(0x10)
	TArray<Byte IslandTypesThatCannotSupportStormsAndFog>        IslandTypesThatCannotSupportStormsAndFog;          // 0xb8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FogPresenceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class FogTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_33F26[0x8];                                 // 0xc8(0x8)
	float                                                        FogDensityThreshold;                               // 0xd0(0x4)
	char                                                         pad0x5c_NL5EY[0x5c];                               // 0xd4(0x5c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FollowShipAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FoodPoisoningStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ForceFeedbackCondition_IsOwnerLocalPlayer: public ForceFeedbackCondition
{
public:
};


// Size 0x20 (Full Size[0x460] - InheritedSize[0x440]
class FortItemSpawnComponent: public ItemSpawnComponent
{
public:
	TArray<class Class*>                                         AllowedGameEventTypes;                             // 0x440(0x10)
	Struct PlayerStat                                            StatToFireOnPlayerPickUp;                          // 0x450(0x4)
	char                                                         pad0xc_Y7ZUO[0xc];                                 // 0x454(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FOVHandlerFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemActionEffect: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FOVHandlerItemActionEffect: public ItemActionEffect
{
public:
	float                                                        BlendSpeed;                                        // 0x28(0x4)
	float                                                        AimFOV;                                            // 0x2c(0x4)
};


// Size 0xa8 (Full Size[0x170] - InheritedSize[0xc8]
class FragileComponent: public ActorComponent
{
public:
	Class FragileComponentDataAsset*                             FragileComponentDataAsset;                         // 0xc8(0x8)
	char                                                         pad0xa0_I9FYB[0xa0];                               // 0xd0(0xa0)
};


// Size 0x160 (Full Size[0x188] - InheritedSize[0x28]
class FragileComponentDataAsset: public DataAsset
{
public:
	float                                                        DefaultDamageScalar;                               // 0x28(0x4)
	char                                                         pad0x4_U6FM0[0x4];                                 // 0x2c(0x4)
	Class CurveFloat*                                            DropDistanceToDamageCurve;                         // 0x30(0x8)
	Class CurveFloat*                                            FallSpeedToDamageCurve;                            // 0x38(0x8)
	Class WwiseEvent*                                            DamageSound;                                       // 0x40(0x8)
	struct FName                                                 ObjectDamageRTPCName;                              // 0x48(0x8)
	Class Object*                                                DamageVfx;                                         // 0x50(0x8)
	struct FName                                                 DamageVfxSocketName;                               // 0x58(0x8)
	float                                                        SignificantHealthChangeAbsolute;                   // 0x60(0x4)
	char                                                         pad0x4_AK8T4[0x4];                                 // 0x64(0x4)
	TArray<struct ShipDamageTypeValues>                          ShipDamageTypeValues;                              // 0x158(0x10)
	TArray<struct DamageTypeScalars>                             DamageTypeScalars;                                 // 0x168(0x10)
	TArray<Byte BlockedHealthChangedReasons>                     BlockedHealthChangedReasons;                       // 0x178(0x10)
};


// Size 0xb0 (Full Size[0x178] - InheritedSize[0xc8]
class FrontendCameraComponent: public ActorComponent
{
public:
};


// Size 0x10 (Full Size[0x4d0] - InheritedSize[0x4c0]
class FrontendGameMode: public GameMode
{
public:
};


// Size 0xf8 (Full Size[0x1c0] - InheritedSize[0xc8]
class FrontendGuildComponent: public ActorComponent
{
public:
	char                                                         pad0xb8_QZL5G[0xb8];                               // 0xc8(0xb8)
	Class ScrambledGuildNamesDataAsset*                          ScrambledGuildNamesDataAsset;                      // 0x180(0x8)
	Class ScrambledShipNamesDataAsset*                           ScrambledShipNamesDataAsset;                       // 0x188(0x8)
	char                                                         pad0x30_JIXFT[0x30];                               // 0x190(0x30)
};


// Size 0xf8 (Full Size[0x1c0] - InheritedSize[0xc8]
class FuseComponent: public ActorComponent
{
public:
	char                                                         pad0x18_JKGTB[0x18];                               // 0xc8(0x18)
	class                                                        EnableInputNotification;                           // 0xe0(0x8)
	class                                                        DisableInputNotification;                          // 0xe8(0x8)
	float                                                        DefaultFuseTime;                                   // 0xf0(0x4)
	char                                                         pad0x4_94OQ5[0x4];                                 // 0xf4(0x4)
	Class WwiseObjectPoolWrapper*                                FuseSoundWisePool;                                 // 0xf8(0x8)
	Class WwiseEvent*                                            FuseActivateSoundPlayEvent;                        // 0x100(0x8)
	Class WwiseEvent*                                            FuseSoundPlayEvent;                                // 0x108(0x8)
	Class WwiseEvent*                                            FuseSoundStopEvent;                                // 0x110(0x8)
	Class Object*                                                FuseParticleSystem;                                // 0x118(0x8)
	struct FName                                                 FuseParticleSystemSocketName;                      // 0x120(0x8)
	struct FName                                                 FuseNoiseEventName;                                // 0x128(0x8)
	float                                                        FuseNoiseRadius;                                   // 0x130(0x4)
	float                                                        FuseNoiseEventRate;                                // 0x134(0x4)
	Class Actor*                                                 FuseInstigator;                                    // 0x138(0x8)
	bool                                                         FuseEnabled;                                       // 0x140(0x1)
	char                                                         pad0x77_IJ6L8[0x77];                               // 0x141(0x77)
	Class ParticleSystemComponent*                               FuseParticleSystemComponent;                       // 0x1b8(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ItemSnapshotMetaGenerator: public Object
{
public:
	Class ScriptStruct*                                          MetaWrapper;                                       // 0x28(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FuseComponentMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameAudioInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class GameAudioService: public Object
{
public:
	char                                                         pad0x8_KLMIH[0x8];                                 // 0x28(0x8)
	TArray<class Ship*>                                          ClientRegisteredShips;                             // 0x30(0x10)
	char                                                         pad0x18_WNUUA[0x18];                               // 0x40(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameCustomizationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InactivityDetectionServiceInterface: public Interface
{
public:
};


// Size 0x100 (Full Size[0x128] - InheritedSize[0x28]
class InactivityDetectionService: public Object
{
public:
};


// Size 0x8 (Full Size[0x130] - InheritedSize[0x128]
class CustomInactivityDetectionService: public InactivityDetectionService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipServiceInterface: public Interface
{
public:
};


// Size 0x110 (Full Size[0x4d8] - InheritedSize[0x3c8]
class GameCustomizationService: public Actor
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GameplayLODSettings: public Object
{
public:
	Struct AnimationLODParameters                                AnimationLODSettings;                              // 0x28(0x10)
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class GamertagProviderHudComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameStateFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class GarbageGenerator: public Actor
{
public:
	int                                                          GarbageGenerationRatePerFrame;                     // 0x3c8(0x4)
	int                                                          SizeOfPersistentSet;                               // 0x3cc(0x4)
	TArray<class Object*>                                        StronglyReferencedObjects;                         // 0x3d0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GarbageObject: public Object
{
public:
};


// Size 0x180 (Full Size[0x248] - InheritedSize[0xc8]
class HealthComponent: public ActorComponent
{
public:
	char                                                         pad0x10_0R4C0[0x10];                               // 0xc8(0x10)
	float                                                        MinTimeSinceLastPredictedHealthChangeToFireChangedEventAgain; // 0xd8(0x4)
	bool                                                         PreventDamageFromAllSourcesExceptWhitelistedSources; // 0xdc(0x1)
	char                                                         pad0x3_GTM4B[0x3];                                 // 0xdd(0x3)
	float                                                        MaxHealth;                                         // 0xe0(0x4)
	Struct CurrentHealthInfo                                     CurrentHealthInfo;                                 // 0xe4(0x18)
	char                                                         pad0x4_8DN83[0x4];                                 // 0xfc(0x4)
	TArray<struct ContinuousHealthChangeSources>                 ContinuousHealthChangeSources;                     // 0x100(0x10)
	bool                                                         IsHealthAdjustLocked;                              // 0x110(0x1)
	char                                                         pad0x137_OQWGZ[0x137];                             // 0x111(0x137)
};


// Size 0x0 (Full Size[0x248] - InheritedSize[0x248]
class ItemHealthComponent: public HealthComponent
{
public:
};


// Size 0x58 (Full Size[0x2a0] - InheritedSize[0x248]
class GatedHealthComponent: public ItemHealthComponent
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GenerateDigLocationStep: public TaleQuestStep
{
public:
};


// Size 0x70 (Full Size[0xf0] - InheritedSize[0x80]
class GenerateDigLocationStepDesc: public TaleQuestStepDesc
{
public:
	Class Actor*                                                 IgnoredBuryLocation;                               // 0x80(0x8)
	float                                                        IgnoredBuryRadius;                                 // 0x88(0x4)
	char                                                         pad0x4_WCZZD[0x4];                                 // 0x8c(0x4)
	Struct QuestVariableName                                     IslandName;                                        // 0x90(0x30)
	Struct QuestVariableVector                                   DigLocation;                                       // 0xc0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GenericMarkerInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class GenericMarkerService: public Actor
{
public:
	char                                                         pad0x28_9BN3K[0x28];                               // 0x3c8(0x28)
	TArray<struct GenericMarkers>                                GenericMarkers;                                    // 0x3f0(0x10)
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class GenericPart: public Actor
{
public:
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3c8(0x8)
	char                                                         pad0x18_UCZPA[0x18];                               // 0x3d0(0x18)
};


// Size 0x88 (Full Size[0x470] - InheritedSize[0x3e8]
class GenericPartWithMMC: public GenericPart
{
public:
	char                                                         pad0x8_S735V[0x8];                                 // 0x3e8(0x8)
	Class StaticMeshMemoryConstraintComponent*                   MeshMemoryConstraintComponent;                     // 0x3f0(0x8)
	Class GenericPartDescAsset*                                  DescToSetWhenSafe;                                 // 0x3f8(0x8)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x400(0x8)
	char                                                         pad0x68_D597E[0x68];                               // 0x408(0x68)
};


// Size 0x0 (Full Size[0x3e8] - InheritedSize[0x3e8]
class GenericPartWithVFX: public GenericPart
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GenericPartDescAsset: public ShipPartDescAsset
{
public:
	Struct GenericPartDesc                                       GenericPartDesc;                                   // 0x28(0x18)
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class GenericPartWithVFXDescAsset: public GenericPartDescAsset
{
public:
	Class ParticleSystem*                                        VFX;                                               // 0x40(0x8)
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class GenericWorldMapMarker: public ActorComponent
{
public:
	char                                                         pad0x8_UXDEU[0x8];                                 // 0xc8(0x8)
	Struct CanvasWorldMapGeneric                                 Marker;                                            // 0xd0(0x20)
	bool                                                         RegisterOnSpawn;                                   // 0xf0(0x1)
	char                                                         pad0x1f_S0PBC[0x1f];                               // 0xf1(0x1f)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class PLQuestLocationDataAsset: public DataAsset
{
public:
	char                                                         pad0x40_GHDN9[0x40];                               // 0x28(0x40)
	struct FName                                                 PageAuthorName;                                    // 0x68(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PLQuestLocationDataBundle: public DataAsset
{
public:
	TArray<class PLQuestLocationDataAsset*>                      ActiveLocations;                                   // 0x28(0x10)
};


// Size 0x98 (Full Size[0xf8] - InheritedSize[0x60]
class TaleQuestStructGenService: public TaleQuestService
{
public:
	Struct TQStructGenParams                                     Params;                                            // 0x60(0x78)
	TArray<struct QuestChain>                                    QuestChain;                                        // 0xd8(0x10)
	Class TaleResourceBrokerService*                             ResourceBroker;                                    // 0xe8(0x8)
	Class GameEventExclusionZoneTaleService*                     GameEventExclusionZoneService;                     // 0xf0(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetCurrentLocationDataStep: public TaleQuestStep
{
public:
	Class GetCurrentLocationDataStepDesc*                        Desc;                                              // 0x98(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class GetCurrentLocationDataStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVarLocationData                                  OutLocationData;                                   // 0x80(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetCurrentQuestInfoStep: public TaleQuestStep
{
public:
	Class GetCurrentQuestInfoStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0xc0 (Full Size[0x140] - InheritedSize[0x80]
class GetCurrentQuestInfoStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableInt                                      CurrentQuestIndex;                                 // 0x80(0x30)
	Struct QuestVariableInt                                      CurrentModuleIndex;                                // 0xb0(0x30)
	Struct QuestVariableInt                                      LastCompletedModuleIndex;                          // 0xe0(0x30)
	Struct QuestVariableName                                     CurrentPageAuthorName;                             // 0x110(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GetIntoAttackPositionAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GetIsShipAloneStep: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class GetIsShipAloneStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        DetectionRadiusInMetres;                           // 0x80(0x4)
	bool                                                         ConsiderShipAloneWhenOnlyAlliedShipsAreNearby;     // 0x84(0x1)
	char                                                         pad0x3_UCC8U[0x3];                                 // 0x85(0x3)
	Struct QuestVariableBool                                     Result;                                            // 0x88(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GetIsShipInOpenWaterStep: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class GetIsShipInOpenWaterStepDesc: public TaleQuestStepDesc
{
public:
	float                                                        BufferRadiusInMetres;                              // 0x80(0x4)
	char                                                         pad0x4_XRTBX[0x4];                                 // 0x84(0x4)
	Struct QuestVariableBool                                     Result;                                            // 0x88(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class GetNextQuestInChainStep: public TaleQuestStep
{
public:
	Class GetNextQuestInChainStepDesc*                           Desc;                                              // 0x98(0x8)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class GetNextQuestInChainStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVarTaleQuest                                     OutQuest;                                          // 0x80(0x30)
	Struct QuestVariableBool                                     QuestChainFinished;                                // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x148] - InheritedSize[0x148]
class GhostAIFormComponent: public AthenaAIFormComponent
{
public:
};


// Size 0x10 (Full Size[0xa0] - InheritedSize[0x90]
class GhostAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	Class StaticMesh*                                            GhostShroudStaticMesh;                             // 0x90(0x8)
	struct FName                                                 GhostShroudAttachSocketName;                       // 0x98(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GhostCharacterAudioComponentParams: public DataAsset
{
public:
	struct FName                                                 PlayerStateName;                                   // 0x28(0x8)
	struct FName                                                 PlayerStateGhostShip;                              // 0x30(0x8)
	struct FName                                                 PlayerStateDefault;                                // 0x38(0x8)
};


// Size 0xd8 (Full Size[0x1a0] - InheritedSize[0xc8]
class GhostCharacterAudioComponent: public ActorComponent
{
public:
	TArray<class WwiseEvent*>                                    GhostShipPlayEvents;                               // 0xc8(0x10)
	Class WwiseEvent*                                            GhostShipWaterphonePlay;                           // 0xd8(0x8)
	Class WwiseEvent*                                            GhostShipMusicStopAll;                             // 0xe0(0x8)
	Class WwiseEvent*                                            GhostShipAmbiencePlay;                             // 0xe8(0x8)
	Class WwiseEvent*                                            GhostShipAmbienceStop;                             // 0xf0(0x8)
	float                                                        GhostShipEventChangeMinTriggerTime;                // 0xf8(0x4)
	float                                                        GhostShipEventChangeMaxTriggerTime;                // 0xfc(0x4)
	Class GhostCharacterAudioComponentParams*                    GhostCharacterAudioParams;                         // 0x100(0x8)
	Class CharacterAudioFootfallControllerParams*                FootfallParams;                                    // 0x108(0x8)
	char                                                         pad0x90_T426M[0x90];                               // 0x110(0x90)
};


// Size 0xc8 (Full Size[0x190] - InheritedSize[0xc8]
class RewardHandInComponent: public ActorComponent
{
public:
	char                                                         pad0x8_BYMGB[0x8];                                 // 0xc8(0x8)
	class                                                        Company;                                           // 0xd0(0x8)
	struct FName                                                 NPCName;                                           // 0xd8(0x8)
	TArray<class Class*>                                         ConditionalStatsForHandIn;                         // 0xe0(0x10)
	char                                                         pad0xa0_WS19J[0xa0];                               // 0xf0(0xa0)
};


// Size 0x90 (Full Size[0x158] - InheritedSize[0xc8]
class GiveVoyageOnItemHandInRewardComponent: public ActorComponent
{
public:
	char                                                         pad0x8_TDSY4[0x8];                                 // 0xc8(0x8)
	class                                                        Company;                                           // 0xd0(0x8)
	TArray<struct VoyageEntries>                                 VoyageEntries;                                     // 0xd8(0x10)
	char                                                         pad0x70_J6CQV[0x70];                               // 0xe8(0x70)
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class OnItemWieldedComponent: public ActorComponent
{
public:
};


// Size 0x28 (Full Size[0x170] - InheritedSize[0x148]
class GiveVoyageOnWieldItemComponent: public OnItemWieldedComponent
{
public:
	char                                                         pad0x18_ZHSWZ[0x18];                               // 0x148(0x18)
	Class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0x160(0x8)
	byte                                                         SourceType;                                        // 0x168(0x1)
	char                                                         pad0x7_W2OLC[0x7];                                 // 0x169(0x7)
};


// Size 0x30 (Full Size[0x650] - InheritedSize[0x620]
class GlintComponent: public StaticMeshComponent
{
public:
	Class GlintComponentDataAsset*                               GlintComponentDataAsset;                           // 0x620(0x8)
	TArray<class Actor*>                                         CurrentEnteredShips;                               // 0x628(0x10)
	Struct GlintVisibilityLock                                   GlintVisibilityLock;                               // 0x638(0x1)
	char                                                         pad0x17_3RJ3Y[0x17];                               // 0x639(0x17)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class GlintComponentDataAsset: public DataAsset
{
public:
	TArray<Byte ToggleConditions>                                ToggleConditions;                                  // 0x28(0x10)
	bool                                                         VisibleByDefault;                                  // 0x38(0x1)
	char                                                         pad0x7_MUFIU[0x7];                                 // 0x39(0x7)
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class GlobalEmitterService: public Actor
{
public:
	char                                                         pad0x18_RK7AY[0x18];                               // 0x3c8(0x18)
	Class ImpactListDataAsset*                                   ImpactListDataAsset;                               // 0x3e0(0x8)
};


// Size 0xb8 (Full Size[0xe0] - InheritedSize[0x28]
class GlobalVoyageDirectorService: public Object
{
public:
	char                                                         pad0x8_SJKAU[0x8];                                 // 0x28(0x8)
	Class World*                                                 World;                                             // 0x30(0x8)
	TArray<class CrewVoyageParticipant*>                         Participants;                                      // 0x38(0x10)
	Class GlobalVoyageDirectorServiceSettings*                   Settings;                                          // 0x48(0x8)
	Class AthenaWorldSettings*                                   WorldSettings;                                     // 0x50(0x8)
	char                                                         pad0x88_MIO3C[0x88];                               // 0x58(0x88)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class GlobalVoyageDirectorServiceSettings: public DeveloperSettings
{
public:
	TArray<struct DefaultGlobalVoyages>                          DefaultGlobalVoyages;                              // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GlobalVoyageOverrideAsset: public DataAsset
{
public:
	TArray<struct GlobalVoyageOverrideEntries>                   GlobalVoyageOverrideEntries;                       // 0x28(0x10)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class GoalDrivenCharacterActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	Struct ControlObjectActionStateParams                        ControlObjectParams;                               // 0x3c8(0x18)
	char                                                         pad0x18_BCW0S[0x18];                               // 0x3e0(0x18)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class GrantPagesStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ReplacePagesStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class GrantPagesStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class GrantPagesStepFromLayoutsDesc: public GrantPagesStepDesc
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x80(0x10)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class GrantPagesStepFromBundleDesc: public GrantPagesStepDesc
{
public:
	Struct QuestVariablePageBundle                               Bundle;                                            // 0x80(0x30)
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class ReplacePagesStepDesc: public TaleQuestStepDesc
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x80(0x10)
	TArray<struct PagesToReplace>                                PagesToReplace;                                    // 0x90(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class GreatFallStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GrenadeDamagerType: public DamagerType
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class GrenadeSetupDataAsset: public DataAsset
{
public:
	Struct Vector                                                ServerThrowOffset;                                 // 0x28(0xc)
	Struct Vector                                                FirstPersonThrowOffset;                            // 0x34(0xc)
	Class CurveFloat*                                            PitchToProjectileSpeedCurve;                       // 0x40(0x8)
	Class CurveFloat*                                            ProjectileSpeedToAngleVarianceCurve;               // 0x48(0x8)
	float                                                        ProjectileGravityScale;                            // 0x50(0x4)
	char                                                         pad0x4_6QWR9[0x4];                                 // 0x54(0x4)
	Class CurveFloat*                                            ExtraPitchCurve;                                   // 0x58(0x8)
	float                                                        MinPitch;                                          // 0x60(0x4)
	float                                                        MaxPitch;                                          // 0x64(0x4)
	float                                                        PlayerSpeedModifier;                               // 0x68(0x4)
	float                                                        FirstPersonScaleModifier;                          // 0x6c(0x4)
	float                                                        TimeToPreventThrowingAfterLeavingConcealment;      // 0x70(0x4)
	float                                                        TimeToEquip;                                       // 0x74(0x4)
	float                                                        MinTimeBetweenOfferingAndThrowing;                 // 0x78(0x4)
	float                                                        TimeToConsumePostThrow;                            // 0x7c(0x4)
	bool                                                         UseVisualThrowOffset;                              // 0x80(0x1)
	char                                                         pad0x3_OG3VR[0x3];                                 // 0x81(0x3)
	float                                                        AIThrowDelayTime;                                  // 0x84(0x4)
	float                                                        AIThrowProjectileSpeed;                            // 0x88(0x4)
	bool                                                         AIThrowPreferHigherAngles;                         // 0x8c(0x1)
	char                                                         pad0x3_8G0YP[0x3];                                 // 0x8d(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GrenadeSplashDamagerType: public DamagerType
{
public:
};


// Size 0x20 (Full Size[0x98] - InheritedSize[0x78]
class GuildEmoteRadialContentRule: public RadialContentRule
{
public:
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class GuildPlaque: public Actor
{
public:
	char                                                         pad0x8_KMY3R[0x8];                                 // 0x3c8(0x8)
	Class StaticMeshComponent*                                   GuildPlaqueMeshComponent;                          // 0x3d0(0x8)
	Struct FString                                               GuildName;                                         // 0x3d8(0x10)
	Struct FString                                               GuildNameToRender;                                 // 0x3f0(0x10)
	TArray<class MaterialInstanceDynamic*>                       OverridenMaterials;                                // 0x400(0x10)
	char                                                         pad0x10_D8KL4[0x10];                               // 0x410(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildShip: public ShipType
{
public:
};


// Size 0x50 (Full Size[0x4b8] - InheritedSize[0x468]
class HalfSkellyInteractableObject: public InteractableObject
{
public:
	Class InteractableComponent*                                 InteractableComponent;                             // 0x468(0x8)
	Class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x470(0x8)
	Struct FText                                                 HalfSkellyName;                                    // 0x478(0x38)
	char                                                         pad0x8_570QL[0x8];                                 // 0x4b0(0x8)
};


// Size 0x148 (Full Size[0x510] - InheritedSize[0x3c8]
class HandHatch: public Actor
{
public:
	char                                                         pad0x8_FYINX[0x8];                                 // 0x3c8(0x8)
	Class StaticMeshComponent*                                   Mesh;                                              // 0x3d0(0x8)
	Class StaticMeshComponent*                                   GlowMesh;                                          // 0x3d8(0x8)
	TArray<class AnimSequence*>                                  HandAnimations;                                    // 0x3e0(0x10)
	Class PointLightComponent*                                   HatchLight;                                        // 0x3f0(0x8)
	byte                                                         FlameOfFateType;                                   // 0x3f8(0x1)
	char                                                         pad0x7_MB8J2[0x7];                                 // 0x3f9(0x7)
	TArray<class ClientSkeletalMeshComponent*>                   HandsMeshes;                                       // 0x400(0x10)
	TArray<struct HandsMeshesInvisibleRelativeLocations>         HandsMeshesInvisibleRelativeLocations;             // 0x410(0x10)
	TArray<struct HandsMeshesVisibleRelativeLocations>           HandsMeshesVisibleRelativeLocations;               // 0x420(0x10)
	Struct Vector                                                HandsMoveDistance;                                 // 0x430(0xc)
	float                                                        HandsMoveTime;                                     // 0x43c(0x4)
	bool                                                         HatchRespondsToSpawns;                             // 0x440(0x1)
	char                                                         pad0x3_XUGEX[0x3];                                 // 0x441(0x3)
	struct FName                                                 ActivationID;                                      // 0x444(0x8)
	bool                                                         IsHatchActive;                                     // 0x44c(0x1)
	char                                                         pad0x3_5K2W1[0x3];                                 // 0x44d(0x3)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x450(0xa0)
	Class MaterialInstanceDynamic*                               GlowDynamicMaterialInstance;                       // 0x4f0(0x8)
	char                                                         pad0x18_LH7GM[0x18];                               // 0x4f8(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HandlesFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x40 (Full Size[0x320] - InheritedSize[0x2e0]
class HangerComponent: public SceneComponent
{
public:
	float                                                        Mass;                                              // 0x2e0(0x4)
	float                                                        LimitConeAngle;                                    // 0x2e4(0x4)
	float                                                        XAxisMotionScale;                                  // 0x2e8(0x4)
	float                                                        YAxisMotionScale;                                  // 0x2ec(0x4)
	char                                                         pad0x30_Z5T5N[0x30];                               // 0x2f0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HarpoonDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonFireNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonRetractNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelInPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelInReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelLockPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HarpoonReelLockReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class HarpoonItemLocationComponent: public ActorComponent
{
public:
	byte                                                         Id;                                                // 0xc8(0x1)
	char                                                         pad0x7_R9R3P[0x7];                                 // 0xc9(0x7)
	TArray<struct ItemLocationsForHarpoon>                       ItemLocationsForHarpoon;                           // 0xd0(0x10)
};


// Size 0x7a0 (Full Size[0xcb0] - InheritedSize[0x510]
class HarpoonLauncher: public ControllableObject
{
public:
	char                                                         pad0x1d0_Y40XP[0x1d0];                             // 0x510(0x1d0)
	Struct FText                                                 InteractionDisplayUseVerb;                         // 0x6e0(0x38)
	Struct FText                                                 InteractionDisplayName;                            // 0x718(0x38)
	struct FName                                                 CameraDockSocket;                                  // 0x750(0x8)
	struct FName                                                 CharacterDockSocket;                               // 0x758(0x8)
	struct FName                                                 TooltipSocket;                                     // 0x760(0x8)
	struct FName                                                 ProjectileLaunchSocket;                            // 0x768(0x8)
	struct FName                                                 TetherAttachSocket;                                // 0x770(0x8)
	struct FName                                                 RetractedCharacterTargetPositionSocket;            // 0x778(0x8)
	Struct ActorComponentSelector                                RetractedCharacterTargetPositionSourceMesh;        // 0x780(0x10)
	Struct FloatRange                                            PitchRange;                                        // 0x790(0x10)
	Struct FloatRange                                            YawRange;                                          // 0x7a0(0x10)
	struct FName                                                 FireAINoiseTag;                                    // 0x7b0(0x8)
	float                                                        FireAINoiseRange;                                  // 0x7b8(0x4)
	char                                                         pad0x4_AACM7[0x4];                                 // 0x7bc(0x4)
	Class ChildActorComponent*                                   TetherChildActorComponent;                         // 0x7c0(0x8)
	Class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x7c8(0x8)
	Class StaticMeshComponent*                                   MountMeshComponent;                                // 0x7d0(0x8)
	Class StaticMeshComponent*                                   BarrelMeshComponent;                               // 0x7d8(0x8)
	Class StaticMeshComponent*                                   LeftSpinnerMeshComponent;                          // 0x7e0(0x8)
	Class StaticMeshComponent*                                   RightSpinnerMeshComponent;                         // 0x7e8(0x8)
	Class StaticMeshComponent*                                   RopeSpoolMeshComponent;                            // 0x7f0(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x7f8(0x8)
	Class RetractorComponent*                                    RetractorComponent;                                // 0x800(0x8)
	Class ChildActorComponent*                                   ProjectileChildActorComponent;                     // 0x808(0x8)
	Class DamageableComponent*                                   LauncherDamageComponent;                           // 0x810(0x8)
	Class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x818(0x8)
	TArray<class Class*>                                         ItemTypesToExclude;                                // 0x8f0(0x10)
	TArray<struct ItemInfosToIgnore>                             ItemInfosToIgnore;                                 // 0x900(0x10)
	TArray<struct ItemLocationsForHarpoon>                       ItemLocationsForHarpoon;                           // 0x910(0x10)
	Class HarpoonLauncherAudioParamsDataAsset*                   AudioParams;                                       // 0x920(0x8)
	Class HarpoonLauncherVFXDataAsset*                           VFXParams;                                         // 0x928(0x8)
	Class ForceFeedbackEffect*                                   HarpoonImpactRumble;                               // 0x930(0x8)
	Class ForceFeedbackEffect*                                   HarpoonDockedRumble;                               // 0x938(0x8)
	class                                                        HarpoonDockedCameraShake;                          // 0x940(0x8)
	Class CurveFloat*                                            EstimatedRetractionTimeScalarCurve;                // 0x948(0x8)
	class                                                        StartControllingNotificationInputId;               // 0x950(0x8)
	float                                                        ProjectileSpeed;                                   // 0x958(0x4)
	float                                                        RetractionSpeed;                                   // 0x95c(0x4)
	float                                                        SpinnerPitchScalar;                                // 0x960(0x4)
	float                                                        RopeSpoolPitchScalar;                              // 0x964(0x4)
	float                                                        SpinnerMaxSlideDistance;                           // 0x968(0x4)
	float                                                        MaximumTetherLengthCm;                             // 0x96c(0x4)
	Struct Rotator                                               AimRelativeAngularLimitsDegrees;                   // 0x970(0xc)
	float                                                        PositionRelativeOutOfWaterPitchLimitDegrees;       // 0x97c(0x4)
	float                                                        ShipSubmersionProportionRetractThreshold;          // 0x980(0x4)
	char                                                         pad0x2ac_X90CW[0x2ac];                             // 0x984(0x2ac)
	float                                                        ShipOutOfWaterRetractTimeSecs;                     // 0xc30(0x4)
	char                                                         pad0x4_CWB9F[0x4];                                 // 0xc34(0x4)
	float                                                        PitchSpeed;                                        // 0xc38(0x4)
	float                                                        YawSpeed;                                          // 0xc3c(0x4)
	float                                                        ClientToServerAimBlendSpeed;                       // 0xc40(0x4)
	float                                                        OrientateBarrelTowardsTetherSpeedDistanceMultiplier; // 0xc44(0x4)
	float                                                        MaxReelInSpeedCmPerSec;                            // 0xc48(0x4)
	float                                                        MaxWeightReelableAtMaxSpeedKg;                     // 0xc4c(0x4)
	float                                                        ReplicatedPitch;                                   // 0xc50(0x4)
	float                                                        ReplicatedYaw;                                     // 0xc54(0x4)
	bool                                                         IsMigrating;                                       // 0xc58(0x1)
	char                                                         pad0x1c_JOHSZ[0x1c];                               // 0xc59(0x1c)
	bool                                                         AlwaysRetractAtMaxLength;                          // 0xc75(0x1)
	char                                                         pad0x2_20Q0W[0x2];                                 // 0xc76(0x2)
	TArray<class Class*>                                         ForwardedDamagerTypes;                             // 0xc78(0x10)
	char                                                         pad0x28_YE66C[0x28];                               // 0xc88(0x28)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class HarpoonLauncherAudioParamsDataAsset: public DataAsset
{
public:
	Struct Vector                                                AudioEmitterOffset;                                // 0x28(0xc)
	struct FName                                                 MoveYawRateRTPCName;                               // 0x34(0x8)
	struct FName                                                 MovePitchRateRTPCName;                             // 0x3c(0x8)
	struct FName                                                 SpoolingSpeedRTPCName;                             // 0x44(0x8)
	char                                                         pad0x4_HJHSK[0x4];                                 // 0x4c(0x4)
	Class WwiseEvent*                                            StartMovePitchAudioLoopEvent;                      // 0x50(0x8)
	Class WwiseEvent*                                            StopMovePitchAudioLoopEvent;                       // 0x58(0x8)
	Class WwiseEvent*                                            StartMoveYawAudioLoopEvent;                        // 0x60(0x8)
	Class WwiseEvent*                                            StopMoveYawAudioLoopEvent;                         // 0x68(0x8)
	Class WwiseEvent*                                            StoppedAimAtEdgeOfRangeAudioEvent;                 // 0x70(0x8)
	Class WwiseEvent*                                            FireAudioEvent;                                    // 0x78(0x8)
	Class WwiseEvent*                                            RetractTriggeredAudioEvent;                        // 0x80(0x8)
	Class WwiseEvent*                                            RetractFinishedAudioEvent;                         // 0x88(0x8)
	Class WwiseEvent*                                            ReleaseRetractableAudioEvent;                      // 0x90(0x8)
	Class WwiseEvent*                                            StartSpoolingAudioEvent;                           // 0x98(0x8)
	Class WwiseEvent*                                            StopSpoolingAudioEvent;                            // 0xa0(0x8)
	Class WwiseEvent*                                            TetherExtentReachedAudioEvent;                     // 0xa8(0x8)
	Class WwiseEvent*                                            ReelLockInputPressedAudioEvent;                    // 0xb0(0x8)
	Class WwiseEvent*                                            ReelLockInputReleasedAudioEvent;                   // 0xb8(0x8)
	Class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0xc0(0x8)
	float                                                        SpoolingSpeedClampValue;                           // 0xc8(0x4)
	float                                                        AttachedSpoolingSpeedClampValue;                   // 0xcc(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class HarpoonLauncherItemExclusionDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         ItemTypesToExclude;                                // 0x28(0x10)
	TArray<struct ItemsToIgnore>                                 ItemsToIgnore;                                     // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class HarpoonLauncherVFXDataAsset: public DataAsset
{
public:
	Class Object*                                                MuzzleFlashVfxFirstPerson;                         // 0x28(0x8)
	Class Object*                                                MuzzleFlashVfxThirdPerson;                         // 0x30(0x8)
};


// Size 0x118 (Full Size[0x718] - InheritedSize[0x600]
class HarpoonProjectile: public LaunchableProjectile
{
public:
	char                                                         pad0x8_U108K[0x8];                                 // 0x600(0x8)
	Struct ReplicatedTransformState                              ReplicatedTransformState;                          // 0x608(0x30)
	Struct NetTimeStampCalculator                                NetMovementTimeStamp;                              // 0x638(0x70)
	char                                                         pad0x20_FQVYN[0x20];                               // 0x6a8(0x20)
	Class ShapeComponent*                                        CollisionComponent;                                // 0x6c8(0x8)
	Class StaticMeshComponent*                                   MeshComponent;                                     // 0x6d0(0x8)
	Class HarpoonRenderComponent*                                HarpoonRenderComponent;                            // 0x6d8(0x8)
	Class SceneComponent*                                        MovementBase;                                      // 0x6e0(0x8)
	char                                                         pad0x18_VRY5Z[0x18];                               // 0x6e8(0x18)
	struct FName                                                 TetherAttachSocketName;                            // 0x700(0x8)
	char                                                         pad0x8_WHKLK[0x8];                                 // 0x708(0x8)
	float                                                        DamageAmount;                                      // 0x710(0x4)
	byte                                                         ProjectileState;                                   // 0x714(0x1)
	char                                                         pad0x3_MW8ZJ[0x3];                                 // 0x715(0x3)
};


// Size 0x28 (Full Size[0x58] - InheritedSize[0x30]
class HasEmblemNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<struct FName>                                         RequiredEmblemNames;                               // 0x30(0x10)
	char                                                         pad0x18_SV6QQ[0x18];                               // 0x40(0x18)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class HasEntitlementStatCondition: public StatCondition
{
public:
	int                                                          RequiredNumberToMatch;                             // 0x28(0x4)
	char                                                         pad0x4_SCK4I[0x4];                                 // 0x2c(0x4)
	TArray<class Class*>                                         RequiredEntitlements;                              // 0x30(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class HasJustFiredConditionalStatStatCondition: public StatCondition
{
public:
	Struct PlayerStat                                            Stat;                                              // 0x28(0x4)
	char                                                         pad0x4_BLSYK[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HealStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x2a8] - InheritedSize[0x298]
class HideInObjectInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x78 (Full Size[0x440] - InheritedSize[0x3c8]
class Hideout: public Actor
{
public:
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3c8(0x10)
	Class PrimitiveComponent*                                    RevealTriggerVolume;                               // 0x3d8(0x8)
	Struct FText                                                 HideoutName;                                       // 0x3e0(0x38)
	TArray<struct Players>                                       Players;                                           // 0x418(0x10)
	char                                                         pad0x18_P5AAV[0x18];                               // 0x428(0x18)
};


// Size 0x48 (Full Size[0x410] - InheritedSize[0x3c8]
class HideoutEntrance: public Actor
{
public:
	Class BoxComponent*                                          TriggerZoneComponent;                              // 0x3c8(0x8)
	TArray<class SpawnLocation*>                                 HideoutExitSpawnPoints;                            // 0x3d0(0x10)
	char                                                         pad0x30_RLT9P[0x30];                               // 0x3e0(0x30)
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class HideoutExit: public Actor
{
public:
	Class BoxComponent*                                          TriggerZoneComponent;                              // 0x3c8(0x8)
	char                                                         pad0x30_RO733[0x30];                               // 0x3d0(0x30)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class HideoutService: public Object
{
public:
	char                                                         pad0x8_YW4C6[0x8];                                 // 0x28(0x8)
	TArray<class Hideout*>                                       Hideouts;                                          // 0x30(0x10)
	char                                                         pad0x18_YBYKG[0x18];                               // 0x40(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HighFlyAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitDetectionInterface: public Interface
{
public:
};


// Size 0xb0 (Full Size[0x178] - InheritedSize[0xc8]
class HitDetectionComponent: public ActorComponent
{
public:
	char                                                         pad0x8_QSZHG[0x8];                                 // 0xc8(0x8)
	float                                                        MaxTimedSweepWaitTime;                             // 0xd0(0x4)
	char                                                         pad0xa4_A1O7X[0xa4];                               // 0xd4(0xa4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitReactionDisableInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class HitReactionComponent: public ActorComponent
{
public:
	char                                                         pad0x30_8DBSY[0x30];                               // 0xc8(0x30)
	bool                                                         ServerAuthoritiveReactions;                        // 0xf8(0x1)
	char                                                         pad0x7_6ZRMQ[0x7];                                 // 0xf9(0x7)
};


// Size 0x8 (Full Size[0x108] - InheritedSize[0x100]
class CharacterHitReactionComponent: public HitReactionComponent
{
public:
	Class CharacterHitReactionDamagerTypeToAnimTypeLayer*        DamagerTypeToAnimTypeLayer;                        // 0x100(0x8)
};


// Size 0x8 (Full Size[0x108] - InheritedSize[0x100]
class MockHitReactionComponent: public HitReactionComponent
{
public:
	bool                                                         CalledServerProcessHitReactionImpl;                // 0x100(0x1)
	bool                                                         CalledClientProcessHitReactionImpl;                // 0x101(0x1)
	char                                                         pad0x6_3TN77[0x6];                                 // 0x102(0x6)
};


// Size 0xc0 (Full Size[0x488] - InheritedSize[0x3c8]
class MockHitReactionActor: public Actor
{
public:
	char                                                         pad0x10_131FB[0x10];                               // 0x3c8(0x10)
	Class MockHitReactionComponent*                              MockHitReactionComponent;                          // 0x3d8(0x8)
	char                                                         pad0xa8_N1C1A[0xa8];                               // 0x3e0(0xa8)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class Hole: public Actor
{
public:
	float                                                        BoundsScaleFactor;                                 // 0x3c8(0x4)
	float                                                        LifeTimeSpan;                                      // 0x3cc(0x4)
	float                                                        DestroyTimeSpan;                                   // 0x3d0(0x4)
	float                                                        ChanceOfSpawningAnItem;                            // 0x3d4(0x4)
	TArray<struct ItemsToSpawn>                                  ItemsToSpawn;                                      // 0x3d8(0x10)
	char                                                         pad0x8_NQM5D[0x8];                                 // 0x3e8(0x8)
	byte                                                         State;                                             // 0x3f0(0x1)
	char                                                         pad0x7_M506W[0x7];                                 // 0x3f1(0x7)
};


// Size 0x40 (Full Size[0x438] - InheritedSize[0x3f8]
class ShovelHole: public Hole
{
public:
	struct FName                                                 ParallaxParameterName;                             // 0x3f8(0x8)
	Class DecalComponent*                                        Decal;                                             // 0x400(0x8)
	float                                                        ParallaxValue;                                     // 0x408(0x4)
	char                                                         pad0x4_QK8BB[0x4];                                 // 0x40c(0x4)
	Class Actor*                                                 ContainedActor;                                    // 0x410(0x8)
	char                                                         pad0x8_CLB97[0x8];                                 // 0x418(0x8)
	Class DiggingComponent*                                      DiggingComponent;                                  // 0x420(0x8)
	char                                                         pad0x8_P09ZM[0x8];                                 // 0x428(0x8)
	class                                                        StatTriggerForDiggingItems;                        // 0x430(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class HoleDataAsset: public DataAsset
{
public:
	TArray<struct MaxHolePerIslandData>                          MaxHolePerIslandData;                              // 0x28(0x10)
	int                                                          DefaultMaxHoles;                                   // 0x38(0x4)
	int                                                          MaxNumOverlappingHolesAllowed;                     // 0x3c(0x4)
	bool                                                         AllowHoleOverlapping;                              // 0x40(0x1)
	char                                                         pad0x7_R3Q83[0x7];                                 // 0x41(0x7)
};


// Size 0x48 (Full Size[0x410] - InheritedSize[0x3c8]
class HoleService: public Actor
{
public:
	char                                                         pad0x8_3MMGP[0x8];                                 // 0x3c8(0x8)
	TArray<Weakclass Holes>                                      Holes;                                             // 0x3d0(0x10)
	TArray<struct HoleContainers>                                HoleContainers;                                    // 0x3e0(0x10)
	Class HoleDataAsset*                                         HoleDataAsset;                                     // 0x3f0(0x8)
	char                                                         pad0x18_ROEJS[0x18];                               // 0x3f8(0x18)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class HorizontalPulleyAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HotFootStatus: public StatusBase
{
public:
};


// Size 0x78 (Full Size[0x440] - InheritedSize[0x3c8]
class HotTub: public Actor
{
public:
	char                                                         pad0x8_P61ZC[0x8];                                 // 0x3c8(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x3d0(0x8)
	float                                                        LiquidCollectionAmount;                            // 0x3d8(0x4)
	char                                                         pad0x4_CCFY7[0x4];                                 // 0x3dc(0x4)
	Class SceneComponent*                                        Root;                                              // 0x3e0(0x8)
	Class ShapeComponent*                                        CollisionComponent;                                // 0x3e8(0x8)
	char                                                         pad0x30_RDUTP[0x30];                               // 0x3f0(0x30)
	TArray<class AthenaPlayerState*>                             PlayersInHotTub;                                   // 0x420(0x10)
	char                                                         pad0x10_QY9FA[0x10];                               // 0x430(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HudIconAudioReaction: public AudioReportReaction
{
public:
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class Hull: public Actor
{
public:
	char                                                         pad0x8_E2FUL[0x8];                                 // 0x3c8(0x8)
	Class BaseHullDragDynamicsDesc*                              HullDragDynamicsDesc;                              // 0x3d0(0x8)
	char                                                         pad0x18_TJGAV[0x18];                               // 0x3d8(0x18)
};


// Size 0x208 (Full Size[0x5d0] - InheritedSize[0x3c8]
class HullDamage: public Actor
{
public:
	char                                                         pad0x20_ORK4Z[0x20];                               // 0x3c8(0x20)
	Class SceneComponent*                                        Root;                                              // 0x3e8(0x8)
	Class MobileInstancedStaticMeshComponent*                    RepairPlanksMesh;                                  // 0x3f0(0x8)
	Class ShipDamageableComponent*                               ShipDamageComponent;                               // 0x3f8(0x8)
	int                                                          DamageZoneTickInterval;                            // 0x400(0x4)
	char                                                         pad0x4_YXSFG[0x4];                                 // 0x404(0x4)
	Class ShipInternalWater*                                     InternalWater;                                     // 0x408(0x8)
	TArray<class DamageZone*>                                    DamageZones;                                       // 0x410(0x10)
	TArray<class DamageZone*>                                    ActiveHullDamageZones;                             // 0x420(0x10)
	TArray<class DamageZone*>                                    BottomDeckDamageZones;                             // 0x430(0x10)
	TArray<class DamageZone*>                                    MiddleDeckDamageZones;                             // 0x440(0x10)
	Struct WeightedProbabilityRange                              DamageZoneDeckDistribution;                        // 0x450(0x20)
	Class PersistenceIdentifierSettingsAsset*                    PersistenceIdentifierSettingsAsset;                // 0x470(0x8)
	char                                                         pad0x120_XTDH0[0x120];                             // 0x478(0x120)
	TArray<class RepairableComponent*>                           RepairablePoints;                                  // 0x598(0x10)
	char                                                         pad0x28_9TMP4[0x28];                               // 0x5a8(0x28)
};


// Size 0xb0 (Full Size[0x390] - InheritedSize[0x2e0]
class LeakerComponent: public SceneComponent
{
public:
	char                                                         pad0x8_V9H9T[0x8];                                 // 0x2e0(0x8)
	Class ParticleSystem*                                        ParticleSystem_WaterLeakAboveWater;                // 0x2e8(0x8)
	Class ParticleSystem*                                        ParticleSystem_WaterLeakBelowWater;                // 0x2f0(0x8)
	Class ParticleSystem*                                        ParticleSystem_RepairLeakAboveWater;               // 0x2f8(0x8)
	Class ParticleSystem*                                        ParticleSystem_RepairLeakBelowWater;               // 0x300(0x8)
	Class WwiseEvent*                                            WaterLeakSfx_Play;                                 // 0x308(0x8)
	Class WwiseEvent*                                            WaterLeakSfx_Stop;                                 // 0x310(0x8)
	Class WwiseEvent*                                            WaterLeakRepairSfx_Play;                           // 0x318(0x8)
	Class WwiseEvent*                                            WaterLeakRepairSfx_Stop;                           // 0x320(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchGroup;                    // 0x328(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchDefaultAboveWater;        // 0x330(0x8)
	struct FName                                                 WaterLeakUnderwaterSwitchUnderwater;               // 0x338(0x8)
	float                                                        WaterLeakFadeTime;                                 // 0x340(0x4)
	struct FName                                                 WaterLeakEmitterName;                              // 0x344(0x8)
	char                                                         pad0x4_LH9P7[0x4];                                 // 0x34c(0x4)
	Class WwiseObjectPoolWrapper*                                WaterLeakWisePool;                                 // 0x350(0x8)
	TArray<struct Leaks>                                         Leaks;                                             // 0x358(0x10)
	char                                                         pad0x28_F9AE3[0x28];                               // 0x368(0x28)
};


// Size 0x100 (Full Size[0x490] - InheritedSize[0x390]
class ShipLeakerComponent: public LeakerComponent
{
public:
	Class ParticleSystem*                                        ParticleSystem_SplashOnInternalWaterSurface;       // 0x388(0x8)
	int                                                          TickInterval;                                      // 0x390(0x4)
	char                                                         pad0x4_QZKAD[0x4];                                 // 0x394(0x4)
	Class Ship*                                                  Ship;                                              // 0x398(0x8)
	Class ShipInternalWater*                                     InternalWater;                                     // 0x3a0(0x8)
	TArray<struct ShipLeaks>                                     ShipLeaks;                                         // 0x3a8(0x10)
	char                                                         pad0xd8_L5VIJ[0xd8];                               // 0x3b8(0xd8)
};


// Size 0x378 (Full Size[0x740] - InheritedSize[0x3c8]
class HullDamage2: public Actor
{
public:
	char                                                         pad0x18_ZOA88[0x18];                               // 0x3c8(0x18)
	float                                                        ExternalScarDecalMinSize;                          // 0x3e0(0x4)
	float                                                        ExternalScarDecalMaxSize;                          // 0x3e4(0x4)
	TArray<class Texture2D*>                                     ExternalScarDecals;                                // 0x3e8(0x10)
	float                                                        ExternalHoleDecalMinSize;                          // 0x3f8(0x4)
	float                                                        ExternalHoleDecalMaxSize;                          // 0x3fc(0x4)
	TArray<class MaterialInstance*>                              ExternalHoleDecals;                                // 0x400(0x10)
	Class MaterialInstance*                                      InternalHoleDecal;                                 // 0x410(0x8)
	Struct WeightedProbabilityRange                              DamageZoneDeckDistribution;                        // 0x418(0x20)
	Class ParticleSystem*                                        InternalHitVfx;                                    // 0x438(0x8)
	Class WwiseEvent*                                            Strain_DamageSfx;                                  // 0x440(0x8)
	Class WwiseObjectPoolWrapper*                                StrainDamagePool;                                  // 0x448(0x8)
	Struct HullDamageParamSet                                    InternalParamDefaults;                             // 0x450(0x60)
	TArray<struct InternalParamNamedSets>                        InternalParamNamedSets;                            // 0x4b0(0x10)
	Class BakedDecalComponent*                                   ImpactDecalComponent;                              // 0x4c0(0x8)
	Class ShipDamageableComponent*                               ShipDamageComponent;                               // 0x4c8(0x8)
	Class TetherCustomisationComponent*                          TetherCustomisationComponent;                      // 0x4d0(0x8)
	Class ShipLeakerComponent*                                   ShipLeakerComponent;                               // 0x4d8(0x8)
	Class MobileInstancedStaticMeshComponent*                    InstancedPlanksComponent;                          // 0x4e0(0x8)
	char                                                         pad0x8_2ZHZM[0x8];                                 // 0x4e8(0x8)
	Struct Transform                                             HiddenPlankLocation;                               // 0x4f0(0x30)
	TArray<class HullDamagePointProxy*>                          Points;                                            // 0x520(0x10)
	char                                                         pad0x88_P9C34[0x88];                               // 0x530(0x88)
	TArray<struct HitsCircularBuffer>                            HitsCircularBuffer;                                // 0x5b8(0x10)
	TArray<class RepairableComponent*>                           RepairComponents;                                  // 0x5c8(0x10)
	TArray<class DecalComponent*>                                ExternalHoleDecalComponents;                       // 0x5d8(0x10)
	TArray<class DecalComponent*>                                InternalHoleDecalComponents;                       // 0x5e8(0x10)
	char                                                         pad0x68_QAKBZ[0x68];                               // 0x5f8(0x68)
	int                                                          ServerHitCount;                                    // 0x660(0x4)
	char                                                         pad0xdc_X27KX[0xdc];                               // 0x664(0xdc)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class HullDamagePointProxy: public Object
{
public:
	char                                                         pad0x8_W4REK[0x8];                                 // 0x28(0x8)
	Class RepairableComponent*                                   Repairable;                                        // 0x30(0x8)
	char                                                         pad0x80_VFJ7R[0x80];                               // 0x38(0x80)
};


// Size 0x698 (Full Size[0xa60] - InheritedSize[0x3c8]
class HumanoidActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	Struct DebugSuperSailorActionStateParams                     DebugSuperSailorParams;                            // 0x3c8(0x10)
	Struct ControlWheelActionStateParams                         ControlWheelParams;                                // 0x3d8(0x34)
	Struct ControlCapstanArmActionStateParams                    ControlCapstanArmParams;                           // 0x40c(0x34)
	Struct ControlPulleyActionStateParams                        ControlPulleyParams;                               // 0x440(0x34)
	Struct UseLadderActionStateParams                            UseLadderParams;                                   // 0x474(0x4c)
	Struct ClamberActionStateParams                              ClamberParams;                                     // 0x4c0(0x30)
	Struct UseCannonActionStateParams                            UseCannonParams;                                   // 0x4f0(0x60)
	Struct UseMountedWeaponActionStateParams                     UseHarpoonLauncherParams;                          // 0x550(0x58)
	Struct UseMapTableActionStateParams                          UseMapTableParams;                                 // 0x5a8(0x1c)
	Struct LinearTransitionLadderActionStateParams               OffBottomTransitionLadderParams;                   // 0x5c4(0x14)
	Struct LinearTransitionLadderActionStateParams               OnBottomTransitionLadderParams;                    // 0x5d8(0x14)
	Struct SplineTransitionLadderActionStateParams               OffTopTransitionLadderParams;                      // 0x5ec(0x10)
	Struct SplineTransitionLadderActionStateParams               OnTopTransitionLadderParams;                       // 0x5fc(0x10)
	Struct TeleportActionStateParams                             TeleportParams;                                    // 0x60c(0x30)
	Struct WaitingToSpawnActionStateParams                       WaitingToSpawnParams;                              // 0x63c(0x14)
	Struct RepairObjectActionStateParams                         RepairObjectParams;                                // 0x650(0x4)
	Struct UndoRepairActionStateParams                           UndoRepairParams;                                  // 0x654(0x4)
	Struct UseItemActionStateParams                              UseItemParams;                                     // 0x658(0x1)
	char                                                         pad0x7_IXZQ3[0x7];                                 // 0x659(0x7)
	Struct DeadActionStateParams                                 DeadParams;                                        // 0x660(0x58)
	Struct RevivedActionStateParams                              PostReviveParameters;                              // 0x6b8(0x10)
	Struct HideInObjectActionStateParams                         HideInObjectParams;                                // 0x6c8(0x28)
	Struct LeaveGhostShipActionStateParams                       LeaveGhostShipParams;                              // 0x6f0(0x24)
	char                                                         pad0x4_IQEYF[0x4];                                 // 0x714(0x4)
	Struct ShovelDigActionStateParams                            ShovelDigParams;                                   // 0x718(0x10)
	Struct MigrationActionStateParams                            MigrationParams;                                   // 0x728(0x4)
	Struct FiredFromActorActionStateParams                       FiredFromCannonParams;                             // 0x72c(0x28)
	Struct FiredFromActorActionStateParams                       LaunchedFromKrakenParams;                          // 0x754(0x28)
	Struct FiredFromActorActionStateParams                       LaunchedFromGeyserParams;                          // 0x77c(0x28)
	Struct WaitForDemoResetActionStateParams                     WaitForDemoResetParams;                            // 0x7a4(0x1)
	char                                                         pad0x3_7B7A7[0x3];                                 // 0x7a5(0x3)
	Struct WaterBarrelActionStateParams                          WaterBarrelParams;                                 // 0x7a8(0x34)
	Struct DockableCutsceneActionStateParams                     DockableCutsceneParams;                            // 0x7dc(0x34)
	Struct DockableBaseActionStateParams                         DockableBaseParams;                                // 0x810(0x34)
	Struct PlayDockableKeyedInstrumentActionStateParams          DockableMusicalInstrumentParams;                   // 0x844(0x1c)
	Struct CombinationLockMechanismActionStateParams             CombinationLockMechanismParams;                    // 0x860(0x1c)
	Struct ControlObjectActionStateParams                        TavernPianoParams;                                 // 0x87c(0x18)
	char                                                         pad0x4_0V17P[0x4];                                 // 0x894(0x4)
	Struct CapturedByKrakenActionStateParams                     CapturedByKrakenParams;                            // 0x898(0x40)
	Struct IngestedByKrakenActionStateParams                     IngestedByKrakenParams;                            // 0x8d8(0x4)
	Struct SwallowedByKrakenActionStateParams                    SwallowedByKrakenParams;                           // 0x8dc(0x8)
	Struct LinearTransitionActionStateParams                     LinearTransitionParams;                            // 0x8e4(0x14)
	Struct WaterSlideActionStateParams                           WaterSlideParams;                                  // 0x8f8(0x24)
	Struct ZipLineActionStateParams                              ZipLineParams;                                     // 0x91c(0x1c)
	Struct EnterTunnelOfTheDamnedActionStateParams               EnterTunnelOfTheDamnedParams;                      // 0x938(0x1c)
	Struct EjectFromTunnelOfTheDamnedActionStateParams           EjectFromTunnelOfTheDamnedParams;                  // 0x954(0x20)
	Struct ExitTunnelOfTheDamnedActionStateParams                ExitTunnelOfTheDamnedParams;                       // 0x974(0x14)
	Struct ArrivalTunnelOfTheDamnedActionStateParams             ArrivalTunnelOfTheDamnedParams;                    // 0x988(0x24)
	Struct SinkingTunnelOfTheDamnedActionStateParams             SinkingTunnelOfTheDamnedParams;                    // 0x9ac(0x3c)
	Struct CaptainsLogInteractableActionStateParams              CaptainsLogParams;                                 // 0x9e8(0x28)
	Struct AttachedToObjectActionStateParams                     AttachedToObjectParams;                            // 0xa10(0x2c)
	char                                                         pad0x24_2QF1T[0x24];                               // 0xa3c(0x24)
};


// Size 0x70 (Full Size[0x438] - InheritedSize[0x3c8]
class HungeringDeep: public Actor
{
public:
	char                                                         pad0x8_JI5G8[0x8];                                 // 0x3c8(0x8)
	float                                                        TickDelay;                                         // 0x3d0(0x4)
	int                                                          RequiredShantyCount;                               // 0x3d4(0x4)
	Class SphereComponent*                                       SpawnableVolume;                                   // 0x3d8(0x8)
	class                                                        RequiredTattoo;                                    // 0x3e0(0x8)
	struct FName                                                 RequiredShanty;                                    // 0x3e8(0x8)
	char                                                         pad0x48_ECC2K[0x48];                               // 0x3f0(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IdleCircleAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdAshenLordVolcanoRockMedium: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdAshenLordVolcanoRockMini: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdAshenLordVolcanoRockSmall: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBlunderbomb: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBlunderbomb_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBoilingWater: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdBoilingWaterNoSplash: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Boogie: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Boogie_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Fire: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Fire_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_FireRock: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_FireRock_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Grog: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Grog_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Limp: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Limp_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_MoltenFireball: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_MoltenFireball_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Anchor: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Anchor_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Ballast: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Ballast_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Barrel: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Barrel_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Passive: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Passive_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rigging: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rigging_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rudder: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_Rudder_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Ship_SkullOfTheArgonauts: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Silence: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snake: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snake_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snooze: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Cur_Snooze_Thrown: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Phantom: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonball_Wraith: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdCannonballFirePhantom: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdChainShot: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdEelThrow: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdGrenade: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdHarpoonProjectile: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdLightning: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdScatterGhostly: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSirenTridentLarge: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSirenTridentMedium: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSirenTridentSmall: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSmallShot: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSmallShotGhostly: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdSmallShotScatter: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockLarge: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockMedium: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockMini: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVolcanoRockSmall: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVomit: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdVomitNoSplash: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdWater: public ImpactProjectileId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactProjectileIdWaterNoSplash: public ImpactProjectileId
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class ImpulseThrottlerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_3EX7C[0x8];                                 // 0xc8(0x8)
	float                                                        MinimumTimeBetweenImpulses;                        // 0xd0(0x4)
	float                                                        ImpulseMultiplier;                                 // 0xd4(0x4)
	char                                                         pad0x10_U6BXC[0x10];                               // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IngestedByKrakenActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x298] - InheritedSize[0x298]
class IngestedByKrakenInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class InitialisePuzzleVaultStep: public TaleQuestStep
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class PuzzleVaultAudioParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                PuzzleVaultPool;                                   // 0x28(0x8)
	Class WwiseObjectPoolWrapper*                                PuzzleVaultWaterFillPool;                          // 0x30(0x8)
	Class WwiseEvent*                                            PuzzleVaultDoorOpening;                            // 0x38(0x8)
	Class WwiseEvent*                                            PuzzleVaultDoorClosing;                            // 0x40(0x8)
	Class WwiseEvent*                                            PuzzleVaultTriggered;                              // 0x48(0x8)
	Class WwiseEvent*                                            PuzzleVaultComplete;                               // 0x50(0x8)
	Class WwiseEvent*                                            PuzzleVaultCorrectSolution;                        // 0x58(0x8)
	Class WwiseEvent*                                            PuzzleVaultIncorrectSolution;                      // 0x60(0x8)
	Class WwiseEvent*                                            PuzzleVaultIncorrectSolutionDelayStart;            // 0x68(0x8)
	Class WwiseEvent*                                            PuzzleVaultIncorrectSolutionDelayEnd;              // 0x70(0x8)
	Class WwiseEvent*                                            PuzzleVaultTurnBlock;                              // 0x78(0x8)
	Class WwiseEvent*                                            WaterLeakStart;                                    // 0x80(0x8)
	Class WwiseEvent*                                            WaterLeakStop;                                     // 0x88(0x8)
	Class WwiseEvent*                                            WaterLeakEndClunk;                                 // 0x90(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class VaultPuzzleDataAsset: public DataAsset
{
public:
	TArray<struct SolutionSets>                                  SolutionSets;                                      // 0x28(0x10)
	byte                                                         AudioSetting;                                      // 0x38(0x1)
	bool                                                         RequiresOpenDoor;                                  // 0x39(0x1)
	bool                                                         ShouldFillWithWater;                               // 0x3a(0x1)
	bool                                                         RequiresPuzzleSolution;                            // 0x3b(0x1)
	bool                                                         ShouldExtinguishBraziersOnComplete;                // 0x3c(0x1)
	bool                                                         ShouldOpenRewardDoorOnComplete;                    // 0x3d(0x1)
	char                                                         pad0x2_6H7JP[0x2];                                 // 0x3e(0x2)
	TArray<Float FillRateOverrides>                              FillRateOverrides;                                 // 0x40(0x10)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class InitialisePuzzleVaultStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
	Struct QuestVariableDataAsset                                SolutionAsset;                                     // 0xb0(0x30)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class IntentCombinerComponent: public ActorComponent
{
public:
	float                                                        CooperationMultiplier;                             // 0xc8(0x4)
	float                                                        StartMovingThreshold;                              // 0xcc(0x4)
	float                                                        StopMovingThreshold;                               // 0xd0(0x4)
	float                                                        ConflictedStartMovingThreshold;                    // 0xd4(0x4)
	float                                                        ConflictedStopMovingThreshold;                     // 0xd8(0x4)
	char                                                         pad0x4_JQ6QY[0x4];                                 // 0xdc(0x4)
	TArray<class Object*>                                        IntentProviders;                                   // 0xe0(0x10)
};


// Size 0x0 (Full Size[0xf0] - InheritedSize[0xf0]
class ControllableIntentCombinerComponent: public IntentCombinerComponent
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InteractableLightParameters: public DataAsset
{
public:
	bool                                                         LiveUpdate;                                        // 0x28(0x1)
	bool                                                         StartLit;                                          // 0x29(0x1)
	char                                                         pad0x6_INNBK[0x6];                                 // 0x2a(0x6)
	TArray<struct LightParams>                                   LightParams;                                       // 0x30(0x10)
};


// Size 0x170 (Full Size[0x5d8] - InheritedSize[0x468]
class InteractableLight: public InteractableObject
{
public:
	char                                                         pad0x10_7KE2Q[0x10];                               // 0x468(0x10)
	Class InteractableLightParameters*                           InteractableLightParameters;                       // 0x478(0x8)
	Class WwiseEvent*                                            SfxSwitchOn;                                       // 0x480(0x8)
	Class WwiseEvent*                                            SfxSwitchOff;                                      // 0x488(0x8)
	Class WwiseEvent*                                            SfxSetFlame;                                       // 0x490(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x498(0x8)
	struct FName                                                 SfxEmitterName;                                    // 0x4a0(0x8)
	float                                                        InteractionRadius;                                 // 0x4a8(0x4)
	Struct LightData                                             LightData;                                         // 0x4ac(0x3)
	char                                                         pad0x1_ZDWJB[0x1];                                 // 0x4af(0x1)
	Struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x4b0(0xa0)
	char                                                         pad0x88_27DLP[0x88];                               // 0x550(0x88)
};


// Size 0x0 (Full Size[0x5d8] - InheritedSize[0x5d8]
class InteractableLightMock: public InteractableLight
{
public:
};


// Size 0x130 (Full Size[0x708] - InheritedSize[0x5d8]
class ShipInteractableLight: public InteractableLight
{
public:
	char                                                         pad0x8_5ARMP[0x8];                                 // 0x5d8(0x8)
	TArray<Byte DormantShipRegions>                              DormantShipRegions;                                // 0x5e0(0x10)
	bool                                                         IsBrigLight;                                       // 0x5f0(0x1)
	bool                                                         ExposeToNetProxy;                                  // 0x5f1(0x1)
	char                                                         pad0x2_R7H04[0x2];                                 // 0x5f2(0x2)
	int                                                          NetProxyBitIndex;                                  // 0x5f4(0x4)
	char                                                         pad0x18_SRKDU[0x18];                               // 0x5f8(0x18)
	TArray<class ShipInteractableLight*>                         SiblingLights;                                     // 0x610(0x10)
	char                                                         pad0xe8_DLXZ3[0xe8];                               // 0x620(0xe8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class InteractableMock: public Object
{
public:
	char                                                         pad0x10_FEPJ6[0x10];                               // 0x28(0x10)
	Class Actor*                                                 ActorThatInteracted;                               // 0x38(0x8)
	char                                                         pad0x8_TDDI6[0x8];                                 // 0x40(0x8)
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class InteractableMockActor: public Actor
{
public:
	char                                                         pad0x18_N9B4H[0x18];                               // 0x3c8(0x18)
	Class Actor*                                                 ActorThatInteracted;                               // 0x3e0(0x8)
	char                                                         pad0x8_OH3UN[0x8];                                 // 0x3e8(0x8)
	TArray<class Class*>                                         CanInteractNotifications;                          // 0x3f0(0x10)
	Class CapsuleComponent*                                      PrimitiveComponent;                                // 0x400(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x408(0x8)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x410(0x8)
	byte                                                         CurrentInteractionState;                           // 0x418(0x1)
	char                                                         pad0x7_H55RL[0x7];                                 // 0x419(0x7)
	TArray<class InteractionPrerequisiteBase*>                   Prerequisites;                                     // 0x420(0x10)
	bool                                                         CanSetInteractionState;                            // 0x430(0x1)
	char                                                         pad0x17_IBRPV[0x17];                               // 0x431(0x17)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractionPoliciesTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class InteractorTestProxyObject: public Actor
{
public:
	Struct FString                                               InteractableAttachParentCompName;                  // 0x3c8(0x10)
	Struct FString                                               InteractablesServiceComponentName;                 // 0x3d8(0x10)
	TArray<Str PreTestConsoleCommands>                           PreTestConsoleCommands;                            // 0x3e8(0x10)
	class                                                        WieldableItemForTest;                              // 0x3f8(0x8)
};


// Size 0x30 (Full Size[0xa00] - InheritedSize[0x9d0]
class InterruptibleProjectileActionItem: public DoubleActionItem
{
public:
	Struct Status                                                OnInterruptionStatus;                              // 0x9d0(0x18)
	bool                                                         IsOneShotStatus;                                   // 0x9e8(0x1)
	char                                                         pad0x3_WZJYM[0x3];                                 // 0x9e9(0x3)
	float                                                        StatusDuration;                                    // 0x9ec(0x4)
	char                                                         pad0x10_FFOK9[0x10];                               // 0x9f0(0x10)
};


// Size 0xd8 (Full Size[0x1a0] - InheritedSize[0xc8]
class InvasionBattleBoundsComponent: public ActorComponent
{
public:
	char                                                         pad0x48_4M19H[0x48];                               // 0xc8(0x48)
	Class PostProcessComponent*                                  BattleBoundsPostProcessComponent;                  // 0x110(0x8)
	Class Actor*                                                 HourglassOfFate;                                   // 0x118(0x8)
	Class MaterialManipulationComponent*                         HourglassOfFateMaterialManipulationComponent;      // 0x120(0x8)
	Class ParticleSystemComponent*                               HourglassOfFateParticleSystemComponent;            // 0x128(0x8)
	float                                                        MaxEffectsT;                                       // 0x130(0x4)
	char                                                         pad0x4_P978H[0x4];                                 // 0x134(0x4)
	Class Object*                                                ExplosionParticleSystem;                           // 0x138(0x8)
	Class Object*                                                HourglassOfFateParticleSystemReaper;               // 0x140(0x8)
	Class Object*                                                HourglassOfFateParticleSystemAthena;               // 0x148(0x8)
	float                                                        HourglassOfFateParticleSystemStartT;               // 0x150(0x4)
	Struct Vector                                                HourglassOfFateParticleSystemOffset;               // 0x154(0xc)
	class                                                        AthenaFaction;                                     // 0x160(0x8)
	Class WwiseObjectPoolWrapper*                                HourglassEmitterPool;                              // 0x168(0x8)
	Class WwiseEvent*                                            InitialBoundaryTellSfx;                            // 0x170(0x8)
	Class WwiseEvent*                                            FinalBoundaryExplosionSfx;                         // 0x178(0x8)
	Class WwiseEvent*                                            BoundaryBuildUpLoopStart;                          // 0x180(0x8)
	Class WwiseEvent*                                            BoundaryBuildUpLoopEnd;                            // 0x188(0x8)
	char                                                         pad0x10_NPS9R[0x10];                               // 0x190(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InventoryItemCategoryToSlotRemappingAsset: public DataAsset
{
public:
	TArray<struct Slots>                                         Slots;                                             // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InventoryItemDescToSlotRemappingPolicyAsset: public DataAsset
{
public:
	TArray<class Class*>                                         Slots;                                             // 0x28(0x10)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class InventoryListenerMock: public Object
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class WieldableMock: public Object
{
public:
};


// Size 0x2a8 (Full Size[0x370] - InheritedSize[0xc8]
class InventoryManipulatorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7FZPP[0x8];                                 // 0xc8(0x8)
	float                                                        StashItemTimeout;                                  // 0xd0(0x4)
	float                                                        SlowStashItemTimeout;                              // 0xd4(0x4)
	float                                                        WieldItemTimeout;                                  // 0xd8(0x4)
	char                                                         pad0x4_NHV23[0x4];                                 // 0xdc(0x4)
	Class WwiseEvent*                                            PickupSFX;                                         // 0xe0(0x8)
	TArray<struct AutoEquipPolicies>                             AutoEquipPolicies;                                 // 0xe8(0x10)
	Class DataTable*                                             ItemWieldingParamsLookup;                          // 0xf8(0x8)
	Struct InventoryMemory                                       InventoryMemory;                                   // 0x100(0x50)
	Class WieldingParamsAsset*                                   CachedWieldParamsAsset;                            // 0x350(0x8)
	char                                                         pad0x18_4VW2W[0x18];                               // 0x358(0x18)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class InviteReceivedPopUpSettings: public Object
{
public:
	Struct StringAssetReference                                  SteamSingleInvitePopUpAssetLocation;               // 0x28(0x10)
	Struct StringAssetReference                                  SteamMultipleInvitesPopUpAssetLocation;            // 0x38(0x10)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsCampaignActiveNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<struct FName>                                         RequiredCampaigns;                                 // 0x30(0x10)
	char                                                         pad0x10_P5YXD[0x10];                               // 0x40(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsCaptainedSessionNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsCaptainNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsCrewWithinProximityNPCDialogConditional: public NPCDialogConditional
{
public:
	float                                                        ProximityFromNPC;                                  // 0x30(0x4)
	char                                                         pad0x1c_R7DBU[0x1c];                               // 0x34(0x1c)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TargetedStatCondition: public StatCondition
{
public:
	Class StatConditionTargetSelector*                           TargetSelector;                                    // 0x28(0x8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsDrunkStatCondition: public TargetedStatCondition
{
public:
	float                                                        MinimumDrunkennessRequired;                        // 0x30(0x4)
	char                                                         pad0x4_J93EU[0x4];                                 // 0x34(0x4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsGuildDistinctionLevelMetStatCondition: public StatCondition
{
public:
	int                                                          GuildDistinctionLevel;                             // 0x28(0x4)
	char                                                         pad0x4_5YQ1F[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsGuildShipNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsGuildShipOrCaptainNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class IslandEventComponent: public ActorComponent
{
public:
	class                                                        EventType;                                         // 0xc8(0x8)
	Struct Guid                                                  Id;                                                // 0xd0(0x10)
	char                                                         pad0x28_GWQFT[0x28];                               // 0xe0(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandEventDataInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandEventTooltipProviderInterface: public Interface
{
public:
};


// Size 0x270 (Full Size[0x338] - InheritedSize[0xc8]
class IslandEventTooltipComponent: public ActorComponent
{
public:
	char                                                         pad0x10_ZRN9W[0x10];                               // 0xc8(0x10)
	TArray<struct CachedTooltipData>                             CachedTooltipData;                                 // 0xd8(0x10)
	Struct Vector2D                                              TooltipOffsetRatio;                                // 0xe8(0x8)
	float                                                        FadeDuration;                                      // 0xf0(0x4)
	char                                                         pad0x4_01B39[0x4];                                 // 0xf4(0x4)
	Struct FText                                                 ShowTooltipText;                                   // 0xf8(0x38)
	Struct FText                                                 HideTooltipText;                                   // 0x130(0x38)
	char                                                         pad0x1d0_B38KJ[0x1d0];                             // 0x168(0x1d0)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class IslandFaunaSettings: public DataAsset
{
public:
	int                                                          IslandPopulatedChance;                             // 0x28(0x4)
	char                                                         pad0x4_G103W[0x4];                                 // 0x2c(0x4)
	TArray<struct IslandPopulatedChanceOverride>                 IslandPopulatedChanceOverride;                     // 0x30(0x10)
	Struct WeightedProbabilityRange                              NumberOfFaunaTypes;                                // 0x40(0x20)
	TArray<struct FaunaTypeSettings>                             FaunaTypeSettings;                                 // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandFaunaSpawnComponentInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x520] - InheritedSize[0x440]
class IslandItemSpawnComponent: public ItemSpawnComponent
{
public:
	float                                                        RespawnTime;                                       // 0x440(0x4)
	char                                                         pad0x4_UH693[0x4];                                 // 0x444(0x4)
	Class IslandData*                                            IslandData;                                        // 0x448(0x8)
	char                                                         pad0xd0_JRQ4U[0xd0];                               // 0x450(0xd0)
};


// Size 0xa0 (Full Size[0x5c0] - InheritedSize[0x520]
class IslandFaunaSpawnComponent: public IslandItemSpawnComponent
{
public:
	Class IslandFaunaSettings*                                   FaunaSettings;                                     // 0x520(0x8)
	TArray<class AIFaunaSpawner*>                                FaunaSpawners;                                     // 0x528(0x10)
	TArray<class Class*>                                         SpawnedFaunaSpecies;                               // 0x538(0x10)
	char                                                         pad0x78_A6P4G[0x78];                               // 0x548(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x520] - InheritedSize[0x520]
class IslandItemSpawnComponentMock: public IslandItemSpawnComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandLocationVerifierInterface: public Interface
{
public:
};


// Size 0x220 (Full Size[0x5e8] - InheritedSize[0x3c8]
class IslandService: public Actor
{
public:
	char                                                         pad0x88_314A0[0x88];                               // 0x3c8(0x88)
	Class IslandFrameworkSettings*                               IslandFrameworkSettings;                           // 0x450(0x8)
	Class IslandDataAsset*                                       IslandDataAsset;                                   // 0x458(0x8)
	Class SunkenIslandSettingsDataAsset*                         SunkenIslandSettingsDataAsset;                     // 0x460(0x8)
	char                                                         pad0x18_VAPST[0x18];                               // 0x468(0x18)
	TArray<struct IslandArray>                                   IslandArray;                                       // 0x480(0x10)
	char                                                         pad0x120_ZTFBP[0x120];                             // 0x490(0x120)
	TArray<struct CannonAISpawnerZoneDebugArray>                 CannonAISpawnerZoneDebugArray;                     // 0x5b0(0x10)
	TArray<struct CannonAILocationDebugArray>                    CannonAILocationDebugArray;                        // 0x5c0(0x10)
	TArray<class AIProximityPlayerTracker*>                      PlayerTrackers;                                    // 0x5d0(0x10)
	char                                                         pad0x8_YDBF2[0x8];                                 // 0x5e0(0x8)
};


// Size 0x0 (Full Size[0x5e8] - InheritedSize[0x5e8]
class PerfTestIslandService: public IslandService
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsOnActiveVoyageNPCDialogConditional: public NPCDialogConditional
{
public:
	byte                                                         VoyageType;                                        // 0x30(0x1)
	char                                                         pad0x7_MGEM6[0x7];                                 // 0x31(0x7)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsOnFerryRadialContext: public RadialContextBase
{
public:
	bool                                                         InvertContext;                                     // 0x28(0x1)
	char                                                         pad0x7_B51O5[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsPirateLegendNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsPirateLegendStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsPlayerAMemberOfTheGuildThatTheCrewIsCurrentlyRepresentingStatCondition: public StatCondition
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsPlayerInIslandBoundsStatCondition: public StatCondition
{
public:
	struct FName                                                 IslandName;                                        // 0x28(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsPlayingOnCustomServerNPCDialogConditional: public NPCDialogConditional
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsPlayModeStatCondition: public StatCondition
{
public:
	byte                                                         PlayMode;                                          // 0x28(0x1)
	char                                                         pad0x7_QRAZD[0x7];                                 // 0x29(0x7)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class IsProjectileOfGivenImpactProjectileId: public StatCondition
{
public:
	class                                                        ImpactProjectileId;                                // 0x28(0x8)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsRunningReapersFlagStatCondition: public TargetedStatCondition
{
public:
	bool                                                         ShouldFlagBeRaised;                                // 0x30(0x1)
	char                                                         pad0x1f_PMZ9P[0x1f];                               // 0x31(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsSailingForGuildRadialContext: public RadialContextBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsShipCaptainedStatCondition: public StatCondition
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsShipCustomizedWithStatCondition: public StatCondition
{
public:
	Struct RequiredShipCustomizationData                         RequiredShipCustomizationData;                     // 0x28(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsShipPlayersOwnShipCondition: public StatCondition
{
public:
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class IsShipWithinProximityNPCDialogConditional: public NPCDialogConditional
{
public:
	float                                                        ProximityFromNPC;                                  // 0x30(0x4)
	char                                                         pad0x1c_4I0DW[0x1c];                               // 0x34(0x1c)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsVoyageOfCompanyTypeStatCondition: public TargetedStatCondition
{
public:
	class                                                        VoyageCompanyType;                                 // 0x30(0x8)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class IsWearingClothingNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         Clothes;                                           // 0x30(0x10)
	int                                                          MinimumRequiredItems;                              // 0x40(0x4)
	char                                                         pad0x4_RJ6OQ[0x4];                                 // 0x44(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsWearingClothingStatConditional: public StatCondition
{
public:
	TArray<class Class*>                                         Clothes;                                           // 0x28(0x10)
	int                                                          MinimumRequiredItems;                              // 0x38(0x4)
	char                                                         pad0x4_RTNOI[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsWearingGhostCurseStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsWearingSkeletonCurseStatCondition: public StatCondition
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class IsWieldingItemCategoryRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         TargetItemCategories;                              // 0x28(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingItemNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         TargetItems;                                       // 0x30(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsWieldingItemRadialContext: public RadialContextBase
{
public:
	bool                                                         TargetsAllWieldables;                              // 0x28(0x1)
	char                                                         pad0x7_6P1AS[0x7];                                 // 0x29(0x7)
	TArray<class Class*>                                         TargetItems;                                       // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemDescList: public DataAsset
{
public:
	TArray<class Class*>                                         Items;                                             // 0x28(0x10)
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class ItemLoaderComponent: public ActorComponent
{
public:
};


// Size 0x108 (Full Size[0x1d0] - InheritedSize[0xc8]
class ItemLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x10_SVEVG[0x10];                               // 0xc8(0x10)
	int                                                          MaxWeaponSlots;                                    // 0xd8(0x4)
	char                                                         pad0x4_U9TRT[0x4];                                 // 0xdc(0x4)
	Struct ItemLoadout                                           ItemLoadout;                                       // 0xe0(0x20)
	Struct ItemLoadoutComponentSlots                             LoadoutSlots;                                      // 0x100(0x20)
	TArray<class Class*>                                         WeaponSlots_ClientPredicted;                       // 0x120(0x10)
	char                                                         pad0xa0_JV3KZ[0xa0];                               // 0x130(0xa0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPreviewInterface: public Interface
{
public:
};


// Size 0x1e0 (Full Size[0x5a8] - InheritedSize[0x3c8]
class ItemPreviewActor: public Actor
{
public:
	char                                                         pad0x10_DC0RI[0x10];                               // 0x3c8(0x10)
	Struct ItemPreviewView                                       CurrentView;                                       // 0x3d8(0x18)
	char                                                         pad0xa0_A1MLJ[0xa0];                               // 0x3f0(0xa0)
	TArray<class SceneComponent*>                                CameraLocations;                                   // 0x490(0x10)
	Class AnimationAsset*                                        PendingAnim;                                       // 0x4a0(0x8)
	char                                                         pad0x20_WBOLC[0x20];                               // 0x4a8(0x20)
	Class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x4c8(0x8)
	Class AnimationAsset*                                        DefaultAnimation;                                  // 0x4d0(0x8)
	Struct ObjectMessagingHandle                                 PreviewReadyEventHandle;                           // 0x4f0(0x58)
	Struct ObjectMessagingHandle                                 PreviewBusyEventHandle;                            // 0x548(0x58)
	float                                                        SpinItemRate;                                      // 0x5a0(0x4)
	char                                                         pad0x4_FCZAL[0x4];                                 // 0x5a4(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPreviewDataInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class ItemPreviewDataObject: public Object
{
public:
	char                                                         pad0x8_I3FD0[0x8];                                 // 0x28(0x8)
	Struct StringAssetReference                                  RequestedAssetReference;                           // 0x30(0x10)
	Struct StringAssetReference                                  CurrentPreviewAssetReference;                      // 0x48(0x10)
	char                                                         pad0x78_HMDH0[0x78];                               // 0x58(0x78)
};


// Size 0x198 (Full Size[0x298] - InheritedSize[0x100]
class ItemPreviewComponent: public CoherentUIGTRenderToTextureLiveView
{
public:
	char                                                         pad0x8_4LOFK[0x8];                                 // 0x100(0x8)
	Struct StringAssetReference                                  FallbackPreviewIconAsset;                          // 0x108(0x10)
	class                                                        RequiredPreviewObjectClass;                        // 0x118(0x8)
	struct FName                                                 DefaultCamera;                                     // 0x120(0x8)
	class                                                        ClassToSpawn;                                      // 0x128(0x8)
	Struct IntPoint                                              DefaultResolution;                                 // 0x130(0x8)
	Class RenderToTextureSceneDetails*                           Details;                                           // 0x138(0x8)
	Struct StringAssetReference                                  RequestedAssetReference;                           // 0x140(0x10)
	Struct StringAssetReference                                  ActiveAssetReference;                              // 0x150(0x10)
	Class Actor*                                                 InteractionActor;                                  // 0x160(0x8)
	Struct ItemPreviewView                                       CurrentView;                                       // 0x1d0(0x18)
	char                                                         pad0xa0_FD9WE[0xa0];                               // 0x1e8(0xa0)
	TArray<struct CategoryReplacementMap>                        CategoryReplacementMap;                            // 0x288(0x10)
};


// Size 0x128 (Full Size[0x1f8] - InheritedSize[0xd0]
class PetPreviewDataObject: public ItemPreviewDataObject
{
public:
	char                                                         pad0x110_9ERNT[0x110];                             // 0xd0(0x110)
	class                                                        CurrentPetDesc;                                    // 0x1e0(0x8)
	char                                                         pad0x10_I73VY[0x10];                               // 0x1e8(0x10)
};


// Size 0xb0 (Full Size[0x128] - InheritedSize[0x78]
class ItemRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x58_DHZN8[0x58];                               // 0x78(0x58)
	float                                                        RadialIconScale;                                   // 0xd0(0x4)
	Struct Vector2D                                              RadialIconOffset;                                  // 0xd4(0x8)
	char                                                         pad0x4_BG36N[0x4];                                 // 0xdc(0x4)
	Class InventoryItemCategoryToSlotRemappingAsset*             RemappingAsset;                                    // 0xe0(0x8)
	TArray<class ItemInfo*>                                      RemappedSlots;                                     // 0xe8(0x10)
	char                                                         pad0x30_56MVV[0x30];                               // 0xf8(0x30)
};


// Size 0x20 (Full Size[0x148] - InheritedSize[0x128]
class ItemsByCategoryRadialContentRule: public ItemRadialContentRule
{
public:
	Class InventoryItemDescToSlotRemappingPolicyAsset*           ItemDescRemappingAsset;                            // 0x128(0x8)
	class                                                        CustomItemCategory;                                // 0x130(0x8)
	TArray<class Class*>                                         CustomItemCategories;                              // 0x138(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemTypeHighlightedRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         ItemTypes;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KeepStillAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KnockbackAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x160 (Full Size[0x1a0] - InheritedSize[0x40]
class KnockbackAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	Struct ExplosionInfo                                         ExplosionInfo;                                     // 0x40(0x160)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class KnockbackAIAbilityTriggerComponent: public ActorComponent
{
public:
};


// Size 0x38 (Full Size[0xb0] - InheritedSize[0x78]
class KnockbackAIAbility: public AthenaAIAbility
{
public:
	char                                                         pad0x8_OFZPX[0x8];                                 // 0x78(0x8)
	Struct ExplosionForceFeedbackInfo                            ForceFeedbackInfo;                                 // 0x80(0x28)
	Class ExplosionComponent*                                    PawnExplosion;                                     // 0xa8(0x8)
};


// Size 0x10 (Full Size[0xc0] - InheritedSize[0xb0]
class ClawPummelAIAbility: public KnockbackAIAbility
{
public:
};


// Size 0x160 (Full Size[0x228] - InheritedSize[0xc8]
class KnockbackAIAbilityParams: public AthenaAIAbilityParams
{
public:
	Struct ExplosionInfo                                         ExplosionInfo;                                     // 0xc8(0x160)
};


// Size 0x8 (Full Size[0x230] - InheritedSize[0x228]
class ClawPummelAIAbilityParams: public KnockbackAIAbilityParams
{
public:
	float                                                        WarmUpTime;                                        // 0x228(0x4)
	char                                                         pad0x4_0QKKC[0x4];                                 // 0x22c(0x4)
};


// Size 0x4d8 (Full Size[0x5a0] - InheritedSize[0xc8]
class KrakenActionCoordinatorComponent: public ActorComponent
{
public:
	char                                                         pad0x18_FO1EQ[0x18];                               // 0xc8(0x18)
	Struct CoordinatedKrakenPhaseAssetEntry                      CurrentPhaseEntry;                                 // 0xe0(0x40)
	Struct ProcessableActions                                    CurrentAction;                                     // 0x120(0x18)
	Struct ProcessableActions                                    NextAction;                                        // 0x138(0x18)
	Struct ProcessableActions                                    CurrentActionReplicated;                           // 0x150(0x18)
	Struct ProcessableActions                                    NextActionReplicated;                              // 0x168(0x18)
	Struct CoordinatedKrakenAction                               CurrentlyRunningAction;                            // 0x180(0x330)
	char                                                         pad0x34_XPLAE[0x34];                               // 0x4b0(0x34)
	bool                                                         HasCurrentlyActiveAsset;                           // 0x4e4(0x1)
	char                                                         pad0xbb_VH4JM[0xbb];                               // 0x4e5(0xbb)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class KrakenAICharacterAudioComponentParams: public DataAsset
{
public:
	Class WwiseEvent*                                            PlayKrakenAmbience;                                // 0x28(0x8)
	Class WwiseEvent*                                            StopKrakenAmbience;                                // 0x30(0x8)
	Class WwiseEvent*                                            PlayKrakenTell;                                    // 0x38(0x8)
	float                                                        PlayKrakenTellCooldownMax;                         // 0x40(0x4)
	float                                                        PlayKrakenTellCooldownMin;                         // 0x44(0x4)
};


// Size 0x0 (Full Size[0x310] - InheritedSize[0x310]
class AICharacterAudioComponent: public WwiseEmitterComponent
{
public:
};


// Size 0x30 (Full Size[0x340] - InheritedSize[0x310]
class KrakenAICharacterAudioComponent: public AICharacterAudioComponent
{
public:
	Class KrakenAICharacterAudioComponentParams*                 AICharacterAudioParams;                            // 0x310(0x8)
	Struct WwiseEmitter                                          KrakenBodyEmitter;                                 // 0x318(0x20)
	char                                                         pad0x8_4W0YT[0x8];                                 // 0x338(0x8)
};


// Size 0x580 (Full Size[0xa90] - InheritedSize[0x510]
class KrakenAnimatedTentacle: public KrakenTentacle
{
public:
	char                                                         pad0x20_DVYZW[0x20];                               // 0x510(0x20)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x530(0x8)
	Class CapsuleComponent*                                      BaseShipCollision;                                 // 0x538(0x8)
	Class SceneComponent*                                        MeshOffsetComponent;                               // 0x540(0x8)
	Class SkeletalMeshComponent*                                 TentacleMeshComponent;                             // 0x548(0x8)
	Class KrakenTentacleAIAudioComponent*                        KrakenTentacleAudioComponent;                      // 0x550(0x8)
	struct FName                                                 AttachSocketNameFirstPerson;                       // 0x558(0x8)
	struct FName                                                 AttachSocketNameThirdPerson;                       // 0x560(0x8)
	Struct CollisionProfileName                                  TentacleCollisionProfile;                          // 0x568(0x8)
	TArray<struct CollisionSegments>                             CollisionSegments;                                 // 0x570(0x10)
	bool                                                         EnabledShipCollision;                              // 0x580(0x1)
	bool                                                         DisableHeadCollisionsDuringHoldingState;           // 0x581(0x1)
	char                                                         pad0x2_7SW9O[0x2];                                 // 0x582(0x2)
	int                                                          CollisionBoneToUseForShipCollision;                // 0x584(0x4)
	byte                                                         SegmentsCollisionEnableType;                       // 0x588(0x1)
	byte                                                         BaseShipCollisionEnableType;                       // 0x589(0x1)
	char                                                         pad0x6_JFZK8[0x6];                                 // 0x58a(0x6)
	Class KrakenAnimatedTentacleAnimationSpecDataAsset*          AnimationSpec;                                     // 0x590(0x8)
	Class KrakenAnimatedTentacleAnimationMappingDataAsset*       AnimationMapping;                                  // 0x598(0x8)
	Class KrakenAnimatedTentacleStateAnimationsDataAsset*        StateAnimationMapping;                             // 0x5a0(0x8)
	float                                                        AnimationPlayRate;                                 // 0x5a8(0x4)
	float                                                        RequestedAnimationPlayRateBlendTime;               // 0x5ac(0x4)
	float                                                        PlayRateAdjustMaxTimeDelta;                        // 0x5b0(0x4)
	float                                                        PlayRateAdjustMaxPercentageToSpeedUpPlayRate;      // 0x5b4(0x4)
	float                                                        PlayRateAdjustMaxPercentageToSlowDownPlayRate;     // 0x5b8(0x4)
	float                                                        ServerAnimationTimeOffsetLatencyMultiplierForSynchronisation; // 0x5bc(0x4)
	float                                                        DebugDrawBoneLocationRadius;                       // 0x5c0(0x4)
	float                                                        DebugDrawTargetRadius;                             // 0x5c4(0x4)
	float                                                        DebugDrawBoneRotationEndPointRadius;               // 0x5c8(0x4)
	float                                                        DebugDrawBoneRotationLength;                       // 0x5cc(0x4)
	float                                                        DebugDrawSuckingTargetRadius;                      // 0x5d0(0x4)
	float                                                        MinAnimationPlayedTimeToSetPendingStateChange;     // 0x5d4(0x4)
	float                                                        MinAnimationLeftTimeToSetPendingStateChange;       // 0x5d8(0x4)
	float                                                        AnimationOffsetTimeLeftForOptimalPendingStateChange; // 0x5dc(0x4)
	float                                                        SmoothNetUpdateLocationTime;                       // 0x5e0(0x4)
	float                                                        SmoothNetUpdateRotationTime;                       // 0x5e4(0x4)
	float                                                        MinDotToTargetToTryAndRotate;                      // 0x5e8(0x4)
	float                                                        MaxDotToTargetToTryAndRotate;                      // 0x5ec(0x4)
	float                                                        MinYawTurnRate;                                    // 0x5f0(0x4)
	float                                                        MaxYawTurnRate;                                    // 0x5f4(0x4)
	float                                                        MinInvisibleTime;                                  // 0x5f8(0x4)
	float                                                        MinSuckingTellTime;                                // 0x5fc(0x4)
	float                                                        MaxSuckingTellTime;                                // 0x600(0x4)
	float                                                        MaxSuckingPlayerDistance;                          // 0x604(0x4)
	float                                                        MinHealthLossRequiredToAvoidAbortSuck;             // 0x608(0x4)
	char                                                         pad0x4_MJ29D[0x4];                                 // 0x60c(0x4)
	Class Object*                                                TentacleSuckingTellVFX;                            // 0x610(0x8)
	struct FName                                                 TargetVFXAttachSocketName;                         // 0x618(0x8)
	Class Object*                                                TargetFirstPersonSuckingTellVFX;                   // 0x620(0x8)
	Class Object*                                                TargetThirdPersonSuckingTellVFX;                   // 0x628(0x8)
	float                                                        MaxHealthLossRequiredToAvoidAbortSuck;             // 0x630(0x4)
	float                                                        SuckingVelocity;                                   // 0x634(0x4)
	float                                                        SuckingPlayerAttachDistance;                       // 0x638(0x4)
	float                                                        MinHealthLossRequiredToDropPlayer;                 // 0x63c(0x4)
	float                                                        MaxHealthLossRequiredToDropPlayer;                 // 0x640(0x4)
	float                                                        MinDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x644(0x4)
	float                                                        MaxDamageDealtByCurrentTargetRequiredToDropPlayer; // 0x648(0x4)
	float                                                        MinHoldingTime;                                    // 0x64c(0x4)
	float                                                        MaxHoldingTime;                                    // 0x650(0x4)
	float                                                        MinWaterDunkTime;                                  // 0x654(0x4)
	float                                                        MaxWaterDunkTime;                                  // 0x658(0x4)
	float                                                        PowerSlamDamageTime;                               // 0x65c(0x4)
	float                                                        PowerSlamDamage;                                   // 0x660(0x4)
	struct FName                                                 IngestTargetSocketName;                            // 0x664(0x8)
	int                                                          IngestTargetBoneIndexOffset;                       // 0x66c(0x4)
	float                                                        MinIngestingTime;                                  // 0x670(0x4)
	float                                                        MaxIngestingTime;                                  // 0x674(0x4)
	float                                                        IngestingDamageAmountPerSecond;                    // 0x678(0x4)
	float                                                        RegurgitatingSpeed;                                // 0x67c(0x4)
	float                                                        RegurgitatingLaunchTime;                           // 0x680(0x4)
	float                                                        ThrowTargetLaunchTime;                             // 0x684(0x4)
	float                                                        ThrowTargetVisibleTime;                            // 0x688(0x4)
	float                                                        ThrowingSpeed;                                     // 0x68c(0x4)
	Class Object*                                                TentacleFirstPersonThrowingVFX;                    // 0x690(0x8)
	Class Object*                                                TentacleThirdPersonThrowingVFX;                    // 0x698(0x8)
	float                                                        MinTargetVomitingDelay;                            // 0x6a0(0x4)
	float                                                        MaxTargetVomitingDelay;                            // 0x6a4(0x4)
	float                                                        MinTargetVomitingDuration;                         // 0x6a8(0x4)
	float                                                        MaxTargetVomitingDuration;                         // 0x6ac(0x4)
	TArray<struct TargetVomitingChances>                         TargetVomitingChances;                             // 0x6b0(0x10)
	struct FName                                                 VomitVFXType;                                      // 0x6c0(0x8)
	TArray<struct WaterTriggerableFX>                            WaterTriggerableFX;                                // 0x6c8(0x10)
	int                                                          WaterQueryBoneIndex;                               // 0x6d8(0x4)
	char                                                         pad0x4_V9KZ9[0x4];                                 // 0x6dc(0x4)
	Class PhysicalMaterial*                                      TentaclePhysicalMaterial;                          // 0x6e0(0x8)
	float                                                        VisualLoggerUpdateTime;                            // 0x6e8(0x4)
	float                                                        ServerTimeToStartPlayingIdle;                      // 0x6ec(0x4)
	TArray<struct AITargetVisibilityPoints>                      AITargetVisibilityPoints;                          // 0x6f0(0x10)
	Struct Vector                                                TargetBoxOffset;                                   // 0x700(0xc)
	Struct Vector                                                TargetBoxScale;                                    // 0x70c(0xc)
	char                                                         pad0x14_XE1JC[0x14];                               // 0x718(0x14)
	float                                                        ReplicatedAnimationProgression;                    // 0x72c(0x4)
	bool                                                         IsHitReactionsEnabled;                             // 0x730(0x1)
	char                                                         pad0x27_A0LKD[0x27];                               // 0x731(0x27)
	class                                                        PendingState;                                      // 0x758(0x8)
	char                                                         pad0x8_88AUQ[0x8];                                 // 0x760(0x8)
	class                                                        ReplicatedCurrentState;                            // 0x768(0x8)
	char                                                         pad0x8_FC9RW[0x8];                                 // 0x770(0x8)
	class                                                        PreviousState;                                     // 0x778(0x8)
	char                                                         pad0x30_AQ64S[0x30];                               // 0x780(0x30)
	float                                                        IngestingProgress;                                 // 0x7b0(0x4)
	char                                                         pad0x4_EFD3I[0x4];                                 // 0x7b4(0x4)
	Class KrakenAnimatedTentacleAnimationDataAsset*              AuthoritativeAnimation;                            // 0x7b8(0x8)
	float                                                        TentacleYaw;                                       // 0x7c0(0x4)
	Struct Vector                                                TentacleWorldLocation;                             // 0x7c4(0xc)
	Class AthenaCharacter*                                       CurrentTarget;                                     // 0x7d0(0x8)
	bool                                                         HasPlayedIntroAnim;                                // 0x7d8(0x1)
	char                                                         pad0x177_6SD9A[0x177];                             // 0x7d9(0x177)
	Class SceneComponent*                                        DockedToSceneComponent;                            // 0x950(0x8)
	Struct Vector                                                DockedLocalSpaceOffset;                            // 0x958(0xc)
	char                                                         pad0xc_UQNMW[0xc];                                 // 0x964(0xc)
	Struct Quat                                                  DockedLocalSpaceRotation;                          // 0x970(0x10)
	char                                                         pad0x48_XBTED[0x48];                               // 0x980(0x48)
	Class ParticleSystemComponent*                               TentacleSuckingTellParticleSystem;                 // 0x9c8(0x8)
	Class ParticleSystemComponent*                               TargetFirstPersonSuckingTellParticleSystem;        // 0x9d0(0x8)
	Class ParticleSystemComponent*                               TargetThirdPersonSuckingTellParticleSystem;        // 0x9d8(0x8)
	char                                                         pad0xb0_RGSBA[0xb0];                               // 0x9e0(0xb0)
};


// Size 0x10 (Full Size[0xaa0] - InheritedSize[0xa90]
class KrakenShipWrappingTellAnimatedTentacle: public KrakenAnimatedTentacle
{
public:
};


// Size 0x160 (Full Size[0x5a0] - InheritedSize[0x440]
class KrakenAnimatedTentacleAnimationInstance: public AnimInstance
{
public:
	float                                                        AnimationStopBlendOutTime;                         // 0x440(0x4)
	float                                                        MidAnimationBranchBlendTime;                       // 0x444(0x4)
	TArray<struct HitReactAnimations>                            HitReactAnimations;                                // 0x448(0x10)
	Class KrakenAnimatedTentacleStateAnimationsDataAsset*        StateAnimationsAsset;                              // 0x458(0x8)
	Class AnimMontage*                                           PlayingMontage;                                    // 0x460(0x8)
	char                                                         pad0x20_BKLRA[0x20];                               // 0x468(0x20)
	Class KrakenAnimatedTentacle*                                OwningKrakenAnimatedTentacle;                      // 0x488(0x8)
	char                                                         pad0x110_GW3J0[0x110];                             // 0x490(0x110)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenDebugFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadBiteDamagerType: public DamagerType
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class KrakenShipWrappingTentacleAIAudioComponentParams: public DataAsset
{
public:
	Class WwiseEvent*                                            PlayWrapping;                                      // 0x28(0x8)
	Class WwiseEvent*                                            StopWrapping;                                      // 0x30(0x8)
	Class WwiseEvent*                                            PlayWrappedLoop;                                   // 0x38(0x8)
	Class WwiseEvent*                                            StopWrappedLoop;                                   // 0x40(0x8)
	Class WwiseEvent*                                            PlayUnwrapping;                                    // 0x48(0x8)
	Class WwiseEvent*                                            StopUnwrapping;                                    // 0x50(0x8)
};


// Size 0x80 (Full Size[0x390] - InheritedSize[0x310]
class KrakenShipWrappingTentacleAIAudioComponent: public AICharacterAudioComponent
{
public:
	Class KrakenShipWrappingTentacleAIAudioComponentParams*      Params;                                            // 0x310(0x8)
	Struct WwiseEmitter                                          KrakenTentacleEmitter;                             // 0x318(0x20)
	char                                                         pad0x58_BSG40[0x58];                               // 0x338(0x58)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class KrakenTentacleAIAudioComponentParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                TentacleEmitterPool;                               // 0x28(0x8)
	Class WwiseObjectPoolWrapper*                                MouthEmitterPool;                                  // 0x30(0x8)
	Class WwiseEvent*                                            PlayKrakenTentacleEmerge;                          // 0x38(0x8)
	Class WwiseEvent*                                            PlayKrakenTentacleSubmerge;                        // 0x40(0x8)
	Class WwiseEvent*                                            PlayKrakenTentacleSuckTell;                        // 0x48(0x8)
	Class WwiseEvent*                                            StopKrakenTentacleSuckTell;                        // 0x50(0x8)
	Class WwiseEvent*                                            PlayKrakenTentacleSuck;                            // 0x58(0x8)
	Class WwiseEvent*                                            StopKrakenTentacleSuck;                            // 0x60(0x8)
	Class WwiseEvent*                                            PlayKrakenTentacleMouthAmbience;                   // 0x68(0x8)
	Class WwiseEvent*                                            StopKrakenTentacleMouthAmbience;                   // 0x70(0x8)
	Class WwiseEvent*                                            PlayPlayerInAirWind;                               // 0x78(0x8)
	Class WwiseEvent*                                            StopPlayerInAirWind;                               // 0x80(0x8)
	Class WwiseEvent*                                            PlayKrakenCatchPlayer;                             // 0x88(0x8)
	Class WwiseEvent*                                            PlayKrakenSpitPlayer;                              // 0x90(0x8)
	struct FName                                                 KrakenSuckFactorRtpc;                              // 0x98(0x8)
	Class WwiseEvent*                                            PlayKrakenTentacleWrapTell;                        // 0xa0(0x8)
	Class WwiseEvent*                                            StopKrakenTentacleWrapTell;                        // 0xa8(0x8)
};


// Size 0x2f0 (Full Size[0x600] - InheritedSize[0x310]
class KrakenTentacleAIAudioComponent: public AICharacterAudioComponent
{
public:
	float                                                        MouthHeightOffset;                                 // 0x310(0x4)
	char                                                         pad0x4_74GU0[0x4];                                 // 0x314(0x4)
	Class KrakenTentacleAIAudioComponentParams*                  KrakenTentacleAudioParams;                         // 0x318(0x8)
	Struct WwiseEmitter                                          KrakenTentacleMouthEmitter;                        // 0x320(0x20)
	char                                                         pad0x2c0_8FUHR[0x2c0];                             // 0x340(0x2c0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenTentacleDamagerType: public DamagerType
{
public:
};


// Size 0x110 (Full Size[0x550] - InheritedSize[0x440]
class KrakenTentacleItemSpawnComponent: public ItemSpawnComponent
{
public:
	Class ShortRangeMarkerDataAsset*                             RewardMarkerParams;                                // 0x440(0x8)
	char                                                         pad0x108_S45HK[0x108];                             // 0x448(0x108)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LadderInterface: public Interface
{
public:
};


// Size 0x1e0 (Full Size[0x5e0] - InheritedSize[0x400]
class Ladder: public InteractableBase
{
public:
	char                                                         pad0x38_2DTQW[0x38];                               // 0x400(0x38)
	Class StaticMeshComponent*                                   MeshComponent;                                     // 0x438(0x8)
	Class SplineComponent*                                       OnTopSplineComponent;                              // 0x440(0x8)
	Class SplineComponent*                                       OffTopSplineComponent;                             // 0x448(0x8)
	float                                                        MaxDistFromLadderTopToClassifyAsTopDocking;        // 0x450(0x4)
	Struct Vector                                                InteractOffset;                                    // 0x454(0xc)
	Struct LadderDefinition                                      LadderDefinition;                                  // 0x460(0x1c)
	char                                                         pad0x4_5XDFM[0x4];                                 // 0x47c(0x4)
	Class PhysicalMaterial*                                      LadderPhysicsMaterial;                             // 0x480(0x8)
	Class PhrasesRadialDataAsset*                                Phrases;                                           // 0x488(0x8)
	float                                                        RepeatExecutionThreshold;                          // 0x490(0x4)
	char                                                         pad0x14c_9W85W[0x14c];                             // 0x494(0x14c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LadderBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x2a8] - InheritedSize[0x2a0]
class LadderInputComponent: public LookAtOffsetInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class LandmarkReactionActor: public Actor
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class LandmarkReactionEvent: public Object
{
public:
	char                                                         pad0x20_8PFHW[0x20];                               // 0x28(0x20)
	bool                                                         UseDefaultTarget;                                  // 0x48(0x1)
	char                                                         pad0x7_YSXP1[0x7];                                 // 0x49(0x7)
	Class Actor*                                                 ResolvedTarget;                                    // 0x50(0x8)
};


// Size 0x40 (Full Size[0x98] - InheritedSize[0x58]
class LandmarkReactionEventCallFunction: public LandmarkReactionEvent
{
public:
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventCallInterfaceStartReaction: public LandmarkReactionEvent
{
public:
	byte                                                         RunLocation;                                       // 0x58(0x1)
	char                                                         pad0x7_8S9Q3[0x7];                                 // 0x59(0x7)
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventCallInterfaceStopReaction: public LandmarkReactionEvent
{
public:
	byte                                                         RunLocation;                                       // 0x58(0x1)
	char                                                         pad0x7_VP7L7[0x7];                                 // 0x59(0x7)
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventPlayAudio: public LandmarkReactionEvent
{
public:
	Class WwiseEvent*                                            AudioCue;                                          // 0x58(0x8)
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventPlayForceFeedback: public LandmarkReactionEvent
{
public:
	TArray<struct ForceFeedbackEntries>                          ForceFeedbackEntries;                              // 0x58(0x10)
	Class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x8 (Full Size[0x60] - InheritedSize[0x58]
class LandmarkReactionEventPlayReactionFromAnotherLandmark: public LandmarkReactionEvent
{
public:
	int                                                          ReactionIndex;                                     // 0x58(0x4)
	char                                                         pad0x4_13RPM[0x4];                                 // 0x5c(0x4)
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventStartCameraShake: public LandmarkReactionEvent
{
public:
	class                                                        CameraShake;                                       // 0x58(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x60(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x64(0x4)
	Class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventStartParticleSystem: public LandmarkReactionEvent
{
public:
	struct FName                                                 ComponentName;                                     // 0x58(0x8)
	int                                                          ComponentIndex;                                    // 0x60(0x4)
	char                                                         pad0x4_REAGV[0x4];                                 // 0x64(0x4)
	Class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x18 (Full Size[0x70] - InheritedSize[0x58]
class LandmarkReactionEventStopParticleSystem: public LandmarkReactionEvent
{
public:
	struct FName                                                 ComponentName;                                     // 0x58(0x8)
	int                                                          ComponentIndex;                                    // 0x60(0x4)
	char                                                         pad0x4_HL1P2[0x4];                                 // 0x64(0x4)
	Class WwiseEvent*                                            AudioCue;                                          // 0x68(0x8)
};


// Size 0x1c0 (Full Size[0x9a0] - InheritedSize[0x7e0]
class Lantern: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x20_GVQMZ[0x20];                               // 0x7e0(0x20)
	float                                                        LightRaisedBlendSpringAccel;                       // 0x800(0x4)
	float                                                        LightActiveBlendSpringAccel;                       // 0x804(0x4)
	Class WwiseEvent*                                            TurnOnSfx;                                         // 0x808(0x8)
	Class WwiseEvent*                                            TurnOffSfx;                                        // 0x810(0x8)
	Class WwiseEvent*                                            FlameTransferSfx;                                  // 0x818(0x8)
	Class CurveFloat*                                            ThirdPersonLanternDistanceInMetresMultiplier;      // 0x820(0x8)
	Class CurveFloat*                                            ThirdPersonLanternTimeOfDayMultiplier;             // 0x828(0x8)
	float                                                        CurrentThirdPersonMultiplier;                      // 0x830(0x4)
	float                                                        CurrentExternalLightFactor;                        // 0x834(0x4)
	Struct FlameData                                             FlameData;                                         // 0x838(0x2)
	char                                                         pad0x6_04YR0[0x6];                                 // 0x83a(0x6)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x840(0x8)
	char                                                         pad0x48_J0DZM[0x48];                               // 0x848(0x48)
	bool                                                         LightOn;                                           // 0x890(0x1)
	bool                                                         bRaised;                                           // 0x891(0x1)
	bool                                                         CanApplyFlameOfFate;                               // 0x892(0x1)
	char                                                         pad0xfd_F0K0O[0xfd];                               // 0x893(0xfd)
	bool                                                         FlameOfFateLocked;                                 // 0x990(0x1)
	char                                                         pad0xf_F0HGT[0xf];                                 // 0x991(0xf)
};


// Size 0x0 (Full Size[0x520] - InheritedSize[0x520]
class StaticMeshWieldableReplica: public WieldableReplica
{
public:
};


// Size 0x58 (Full Size[0x578] - InheritedSize[0x520]
class LanternWieldableReplica: public StaticMeshWieldableReplica
{
public:
	Struct LinearColor                                           LanternLightColour;                                // 0x520(0x10)
	Struct LinearColor                                           LanternGlowColour;                                 // 0x530(0x10)
	Struct LinearColor                                           LanternFlameColour;                                // 0x540(0x10)
	Class SpotLightComponent*                                    LightComponent;                                    // 0x550(0x8)
	Class AmbientLightSourceComponent*                           AmbientLightSourceComponent;                       // 0x558(0x8)
	char                                                         pad0x18_RZ746[0x18];                               // 0x560(0x18)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class LastHealthChangeReasonStatCondition: public StatCondition
{
public:
	byte                                                         LastHealthChangeReason;                            // 0x28(0x1)
	char                                                         pad0x7_G93XD[0x7];                                 // 0x29(0x7)
};


// Size 0x0 (Full Size[0x2e0] - InheritedSize[0x2e0]
class LaunchableAttachPointComponent: public SceneComponent
{
public:
};


// Size 0x218 (Full Size[0x2e0] - InheritedSize[0xc8]
class ItemActionComponent: public ActorComponent
{
public:
	byte                                                         ActionType;                                        // 0xc8(0x1)
	bool                                                         ShouldFireEventOnActionStart;                      // 0xc9(0x1)
	bool                                                         ShouldFireEventOnActionStop;                       // 0xca(0x1)
	bool                                                         ShouldApplyAimAndMovementSlowdown;                 // 0xcb(0x1)
	float                                                        ActionCooldown;                                    // 0xcc(0x4)
	char                                                         pad0x58_UMZ0T[0x58];                               // 0xd0(0x58)
	Struct WwiseEmitterCreationParams                            ActionStartSfxParams;                              // 0x128(0x28)
	Struct WwiseEmitterCreationParams                            ActionStopSfxParams;                               // 0x150(0x28)
	char                                                         pad0x88_JZJVV[0x88];                               // 0x178(0x88)
	class                                                        StartInputId;                                      // 0x200(0x8)
	class                                                        StopInputId;                                       // 0x208(0x8)
	char                                                         pad0x18_06M1L[0x18];                               // 0x210(0x18)
	TArray<class ItemActionEffect*>                              ActionEffects;                                     // 0x228(0x10)
	char                                                         pad0x50_S3XPT[0x50];                               // 0x238(0x50)
	Class ItemActionComponentAudioParams*                        ItemActionAudio;                                   // 0x288(0x8)
	Class ForceFeedbackEffect*                                   ActionForceFeedback;                               // 0x290(0x8)
	struct FName                                                 ActionForceFeedbackTag;                            // 0x298(0x8)
	char                                                         pad0x28_1VL4Q[0x28];                               // 0x2a0(0x28)
	Class Pawn*                                                  Wielder;                                           // 0x2c8(0x8)
	Class WieldableItem*                                         ItemOwner;                                         // 0x2d0(0x8)
	byte                                                         ActionState;                                       // 0x2d8(0x1)
	char                                                         pad0x7_M3TIS[0x7];                                 // 0x2d9(0x7)
};


// Size 0x1a0 (Full Size[0x480] - InheritedSize[0x2e0]
class LaunchableShotActionComponent: public ItemActionComponent
{
public:
	bool                                                         InterruptActionOnProjectileDestroyed;              // 0x2e0(0x1)
	char                                                         pad0x7_4R93T[0x7];                                 // 0x2e1(0x7)
	Class LaunchableProjectile*                                  CurrentProjectile;                                 // 0x2e8(0x8)
	char                                                         pad0x4_9XQBL[0x4];                                 // 0x2f0(0x4)
	bool                                                         OverrideProjectileCollisionBeforeFiring;           // 0x2f4(0x1)
	char                                                         pad0x3_LP5QD[0x3];                                 // 0x2f5(0x3)
	Struct CollisionProfileName                                  ProjectileCollisionProfileOverride;                // 0x2f8(0x8)
	Struct CollisionProfileName                                  ProjectileCollisionProfile;                        // 0x300(0x8)
	class                                                        ProjectileType;                                    // 0x308(0x8)
	int                                                          AmmoCost;                                          // 0x310(0x4)
	bool                                                         ShouldProjectileAttachToWeaponOnSpawn;             // 0x314(0x1)
	bool                                                         ShouldConsumeAmmoWhenUsedByAI;                     // 0x315(0x1)
	bool                                                         ShouldConsumeAmmoWhenUsedByPlayers;                // 0x316(0x1)
	char                                                         pad0x1_K49A6[0x1];                                 // 0x317(0x1)
	Struct Vector                                                ProjectileRelativeAimOffset;                       // 0x318(0xc)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0x324(0x4)
	char                                                         pad0x40_04FQY[0x40];                               // 0x328(0x40)
	Class LaunchableShotComponentAudioParams*                    LaunchableAudioParams;                             // 0x368(0x8)
	Struct WwiseEmitterCreationParams                            FireProjectileSfxParams;                           // 0x370(0x28)
	struct FName                                                 MuzzleFireVFXSocketName;                           // 0x398(0x8)
	Class Object*                                                MuzzleFireVfxFirst;                                // 0x3a0(0x8)
	Class Object*                                                MuzzleFireVfxThird;                                // 0x3a8(0x8)
	Class Object*                                                MuzzleFireVfxLocal;                                // 0x3b0(0x8)
	Class ForceFeedbackEffect*                                   ActionFireForceFeedback;                           // 0x3b8(0x8)
	struct FName                                                 ActionFireForceFeedbackTag;                        // 0x3c0(0x8)
	char                                                         pad0x58_NM48L[0x58];                               // 0x3c8(0x58)
	Struct LaunchableProjectileState                             LaunchableProjectileState;                         // 0x420(0x40)
	char                                                         pad0x20_CMF72[0x20];                               // 0x460(0x20)
};


// Size 0x40 (Full Size[0x4c0] - InheritedSize[0x480]
class SirenTridentShotActionComponent: public LaunchableShotActionComponent
{
public:
	char                                                         pad0x4_578V2[0x4];                                 // 0x480(0x4)
	float                                                        MaxAcceptableChargeTimeStampDelta;                 // 0x484(0x4)
	TArray<class SirenTridentProjectileParams*>                  ProjectileParameters;                              // 0x488(0x10)
	Class SirenTridentProjectileParams*                          CurrentProjectileParameters;                       // 0x498(0x8)
	struct FName                                                 ActionSizeChangeForceFeedbackTag;                  // 0x4a0(0x8)
	Class SirenTridentProjectile*                                TridentProjectile;                                 // 0x4a8(0x8)
	Class SirenTridentShotComponentAudioParams*                  SirenShotActionAudio;                              // 0x4b0(0x8)
	byte                                                         CurrentShotState;                                  // 0x4b8(0x1)
	char                                                         pad0x7_12R6H[0x7];                                 // 0x4b9(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchedFromKrakenActionStateId: public ActionStateId
{
public:
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class LauncherParentMock: public Actor
{
public:
	char                                                         pad0x18_M0GZ0[0x18];                               // 0x3c8(0x18)
	TArray<class Actor*>                                         IgnoreActors;                                      // 0x3e0(0x10)
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class LeaderboardComponent: public ActorComponent
{
public:
};


// Size 0x20 (Full Size[0x3b0] - InheritedSize[0x390]
class SimpleLeakerComponent: public LeakerComponent
{
public:
};


// Size 0x300 (Full Size[0x328] - InheritedSize[0x28]
class LightingControllerSettings: public DataAsset
{
public:
	Class CurveFloat*                                            FogDensityCurve;                                   // 0x28(0x8)
	Class CurveFloat*                                            FogStartDistanceCurve;                             // 0x30(0x8)
	Class CurveFloat*                                            LightIntensityCurve;                               // 0x38(0x8)
	Class CurveFloat*                                            SkyDomeBrightnessCurve;                            // 0x40(0x8)
	Class CurveFloat*                                            SkyDomeMoonVisibilityCurve;                        // 0x48(0x8)
	Class CurveFloat*                                            SkyDomeStarBrightnessCurve;                        // 0x50(0x8)
	Class CurveFloat*                                            SkyDomeSunBrightnessCurve;                         // 0x58(0x8)
	Class CurveFloat*                                            PostLPVIntensityCurve;                             // 0x60(0x8)
	Class CurveFloat*                                            PostExposureBiasCurve;                             // 0x68(0x8)
	Class CurveFloat*                                            PostLPVOcclusionIntensityCurve;                    // 0x70(0x8)
	Class CurveFloat*                                            SkyLightIntensityCurve;                            // 0x78(0x8)
	Class CurveFloat*                                            FogBrightnessNearCurve;                            // 0x80(0x8)
	Class CurveFloat*                                            FogBrightnessFarCurve;                             // 0x88(0x8)
	Class CurveFloat*                                            PostBloomIntensityCurve;                           // 0x90(0x8)
	Class CurveFloat*                                            PostBloomThresholdCurve;                           // 0x98(0x8)
	Class CurveFloat*                                            SkyDomeAuraBrightnessCurve;                        // 0xa0(0x8)
	Class CurveFloat*                                            PostReflectionProbeBrightnessCurve;                // 0xa8(0x8)
	Class CurveFloat*                                            PostReflectionProbeShadowBrightnessCurve;          // 0xb0(0x8)
	Class CurveFloat*                                            VfxControllerCurve;                                // 0xb8(0x8)
	Class CurveFloat*                                            FogMaxOpacityCurve;                                // 0xc0(0x8)
	Class CurveFloat*                                            FogScatterExpCurve;                                // 0xc8(0x8)
	Class CurveFloat*                                            FogUnderwaterDensityCurve;                         // 0xd0(0x8)
	Class CurveFloat*                                            PostLensFlareIntensityCurve;                       // 0xd8(0x8)
	Class CurveFloat*                                            EmissiveFoliageCurve;                              // 0xe0(0x8)
	Class CurveFloat*                                            EmissiveLightsCurve;                               // 0xe8(0x8)
	Class CurveFloat*                                            PostExposureMinBrightnessCurve;                    // 0xf0(0x8)
	Class CurveFloat*                                            PostExposureMaxBrightnessCurve;                    // 0xf8(0x8)
	Class CurveFloat*                                            SkyDomeMoonBrightnessCurve;                        // 0x100(0x8)
	Class CurveFloat*                                            SkyDomeHorizonCloudBrightnessCurve;                // 0x108(0x8)
	Class CurveFloat*                                            SkyDomeGreenFlashStrengthCurve;                    // 0x110(0x8)
	Class CurveFloat*                                            PostSaturationCurve;                               // 0x118(0x8)
	Class CurveFloat*                                            PostContrastCurve;                                 // 0x120(0x8)
	Class CurveFloat*                                            CloudRimlightScaleCurve;                           // 0x128(0x8)
	Class CurveFloat*                                            CloudSkylightScaleCurve;                           // 0x130(0x8)
	Class CurveFloat*                                            CloudSunlightScaleCurve;                           // 0x138(0x8)
	Class CurveFloat*                                            CloudGlobalPressureCurve;                          // 0x140(0x8)
	Class CurveFloat*                                            PostUnderWaterBrightnessCurve;                     // 0x148(0x8)
	Class CurveFloat*                                            VfxCloudBrightnessCurve;                           // 0x150(0x8)
	Class CurveFloat*                                            LightGodRayIntensityCurve;                         // 0x158(0x8)
	Class CurveFloat*                                            CloudBottomBrightnessCurve;                        // 0x160(0x8)
	Class CurveFloat*                                            CloudSunlightShadowingCurve;                       // 0x168(0x8)
	Class CurveFloat*                                            SunDiscScaleCurve;                                 // 0x170(0x8)
	Class CurveFloat*                                            WaterSpecularBrightnessCurve;                      // 0x178(0x8)
	Class CurveFloat*                                            VfxAmbientScaleCurve;                              // 0x180(0x8)
	Class CurveFloat*                                            CloudShadowBrightnessCurve;                        // 0x188(0x8)
	Class CurveFloat*                                            StormCloudShadowBrightnessCurve;                   // 0x190(0x8)
	Class CurveFloat*                                            StormPostBloomIntensityCurve;                      // 0x198(0x8)
	Class CurveFloat*                                            StormPostBloomThresholdCurve;                      // 0x1a0(0x8)
	Class CurveFloat*                                            DirectionalLightShadowSteppingRateCurve;           // 0x1a8(0x8)
	Class CurveFloat*                                            SkullBrightnessCurve;                              // 0x1b0(0x8)
	Class CurveLinearColor*                                      FogColourAwayCurve;                                // 0x1b8(0x8)
	Class CurveLinearColor*                                      FogColourTowardsCurve;                             // 0x1c0(0x8)
	Class CurveLinearColor*                                      LightSunColourCurve;                               // 0x1c8(0x8)
	Class CurveLinearColor*                                      SkyDomeHorizonColourCurve;                         // 0x1d0(0x8)
	Class CurveLinearColor*                                      SkyDomeZenithColourCurve;                          // 0x1d8(0x8)
	Class CurveLinearColor*                                      SkyLightColourCurve;                               // 0x1e0(0x8)
	Class CurveLinearColor*                                      PostAmbientShadowColourCurve;                      // 0x1e8(0x8)
	Class CurveLinearColor*                                      FogColourAwayFarCurve;                             // 0x1f0(0x8)
	Class CurveLinearColor*                                      FogColourUnderwaterCurve;                          // 0x1f8(0x8)
	Class CurveLinearColor*                                      FogColourAwayUnderwaterCurve;                      // 0x200(0x8)
	Class CurveLinearColor*                                      WaterColourCurve;                                  // 0x208(0x8)
	Class CurveLinearColor*                                      WaterColourShallowCurve;                           // 0x210(0x8)
	Class CurveLinearColor*                                      WaterBackLitColourCurve;                           // 0x218(0x8)
	Class CurveLinearColor*                                      WaterFoamColourCurve;                              // 0x220(0x8)
	Class CurveLinearColor*                                      WaterFoamHighlightColourCurve;                     // 0x228(0x8)
	Class CurveLinearColor*                                      WaterAmbientColourCurve;                           // 0x230(0x8)
	Class CurveLinearColor*                                      PostReflectionProbeTintCurve;                      // 0x238(0x8)
	Class CurveLinearColor*                                      CloudRimlightColourCurve;                          // 0x240(0x8)
	Class CurveLinearColor*                                      CloudSkylightColourCurve;                          // 0x248(0x8)
	Class CurveLinearColor*                                      CloudSunlightColourCurve;                          // 0x250(0x8)
	Class CurveLinearColor*                                      PostUnderWaterTintCurve;                           // 0x258(0x8)
	Class CurveLinearColor*                                      SkyDomeMoonColourCurve;                            // 0x260(0x8)
	Class CurveLinearColor*                                      PostGammaCurve;                                    // 0x268(0x8)
	Class CurveLinearColor*                                      SkyDomeSunColourCurve;                             // 0x270(0x8)
	Class CurveLinearColor*                                      VFXFoamColourCurve;                                // 0x278(0x8)
	Class CurveLinearColor*                                      VFXWindColourCurve;                                // 0x280(0x8)
	Class CurveLinearColor*                                      VFXUnderwaterTintCurve;                            // 0x288(0x8)
	Class CurveLinearColor*                                      StormRainColourCurve;                              // 0x290(0x8)
	Class CurveLinearColor*                                      StormSkyLightColourCurve;                          // 0x298(0x8)
	Class CurveLinearColor*                                      StormPostGammaCurve;                               // 0x2a0(0x8)
	Class CurveLinearColor*                                      StormFogColourUnderwaterCurve;                     // 0x2a8(0x8)
	Class CurveLinearColor*                                      StormFogColourAwayUnderwaterCurve;                 // 0x2b0(0x8)
	Class CurveLinearColor*                                      StormWaterColourCurve;                             // 0x2b8(0x8)
	Class CurveLinearColor*                                      StormWaterColourShallowCurve;                      // 0x2c0(0x8)
	Class CurveLinearColor*                                      StormWaterBackLitColourCurve;                      // 0x2c8(0x8)
	Class CurveLinearColor*                                      StormWaterFoamColourCurve;                         // 0x2d0(0x8)
	Class CurveLinearColor*                                      StormWaterFoamHighlightColourCurve;                // 0x2d8(0x8)
	Class CurveLinearColor*                                      StormWaterAmbientColourCurve;                      // 0x2e0(0x8)
	Class CurveLinearColor*                                      StormPostReflectionProbeTintCurve;                 // 0x2e8(0x8)
	Class CurveLinearColor*                                      SkullEyeColourCurve;                               // 0x2f0(0x8)
	Struct LinearColor                                           SandColourStatic;                                  // 0x2f8(0x10)
	float                                                        FogUnderwaterMaxOpacityStatic;                     // 0x308(0x4)
	float                                                        FogUnderwaterScatterExpStatic;                     // 0x30c(0x4)
	float                                                        FogUnderwaterStartDistanceStatic;                  // 0x310(0x4)
	float                                                        FogUnderwaterBrightnessNearStatic;                 // 0x314(0x4)
	float                                                        FogUnderwaterBrightnessFarStatic;                  // 0x318(0x4)
	float                                                        FogDirectionalInscatteringStartStatic;             // 0x31c(0x4)
	float                                                        FogUnderwaterDirectionalInscatteringStartStatic;   // 0x320(0x4)
	float                                                        UnderwaterDirectionalLightMinBrightnessStatic;     // 0x324(0x4)
};


// Size 0xaa8 (Full Size[0xe70] - InheritedSize[0x3c8]
class LightingController: public ThreadedActor
{
public:
	char                                                         pad0x8_UOIXJ[0x8];                                 // 0x3c8(0x8)
	Struct LightingControllerPostProcessParams                   PostProcessParams;                                 // 0x3d0(0x1a0)
	Struct LightingControllerRainParams                          RainParams;                                        // 0x570(0x18)
	Struct LightingControllerLightningParams                     LightningParams;                                   // 0x588(0x40)
	Struct LightingControllerLightingParams                      LightingParams;                                    // 0x5c8(0x44)
	char                                                         pad0x4_PNTEI[0x4];                                 // 0x60c(0x4)
	Struct LightingControllerMoonParams                          MoonParams;                                        // 0x610(0x38)
	char                                                         pad0x8_IIPOY[0x8];                                 // 0x648(0x8)
	Struct LightingControllerTransformParams                     TransformParams;                                   // 0x650(0x90)
	Struct LightingControllerTimeParams                          TimeParams;                                        // 0x6e0(0x20)
	Struct LightingControllerIslandDangerParams                  DangerLevelParams;                                 // 0x700(0x8)
	TArray<class LightingControllerSettings*>                    LightingSettings;                                  // 0x708(0x10)
	Class StaticMeshActor*                                       OverworldFarQuad;                                  // 0x718(0x8)
	Class StaticMeshActor*                                       UnderworldFarQuad;                                 // 0x720(0x8)
	float                                                        FixedTimeOfDay;                                    // 0x728(0x4)
	int                                                          FixedDay;                                          // 0x72c(0x4)
	bool                                                         IsFixedTimeOfDay;                                  // 0x730(0x1)
	char                                                         pad0x7_POPYP[0x7];                                 // 0x731(0x7)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x738(0x8)
	Struct LightingControllerAssetParams                         AssetParams;                                       // 0x740(0x50)
	Class DirectionalLightComponent*                             DirectionalLight;                                  // 0x790(0x8)
	Class StaticMeshComponent*                                   SkyDome;                                           // 0x798(0x8)
	Class StaticMeshComponent*                                   NorthStar;                                         // 0x7a0(0x8)
	Class ExponentialHeightFogComponent*                         Fog;                                               // 0x7a8(0x8)
	Class ExponentialHeightFogComponent*                         UnderwaterFog;                                     // 0x7b0(0x8)
	Class PostProcessComponent*                                  GlobalPostProcess;                                 // 0x7b8(0x8)
	Class DirectionalLightComponent*                             RainLight;                                         // 0x7c0(0x8)
	Class StaticMeshComponent*                                   Moon;                                              // 0x7c8(0x8)
	Class SkyLightComponent*                                     SkyLight;                                          // 0x7d0(0x8)
	float                                                        DebugTimeOfDay;                                    // 0x7d8(0x4)
	float                                                        DebugRain;                                         // 0x7dc(0x4)
	float                                                        DebugMurk;                                         // 0x7e0(0x4)
	int                                                          DebugDay;                                          // 0x7e4(0x4)
	bool                                                         IsDebugFixedTimeOfDay;                             // 0x7e8(0x1)
	bool                                                         ShowDebugSunHeightInfo;                            // 0x7e8(0x1)
	bool                                                         ShowDebugLightingZoneInfo;                         // 0x7e8(0x1)
	bool                                                         ShowDebugUnderwater;                               // 0x7e8(0x1)
	char                                                         pad0x27_0PD2X[0x27];                               // 0x7e9(0x27)
	Struct LightingControllerLightingVars                        LightingVars;                                      // 0x810(0x460)
	Struct LightingControllerMaterialInstances                   MaterialInstances;                                 // 0xc70(0x20)
	TArray<class Actor*>                                         ReflectionProbes;                                  // 0xc90(0x10)
	char                                                         pad0x20_P6Z44[0x20];                               // 0xca0(0x20)
	TArray<struct MurkZones>                                     MurkZones;                                         // 0xcc0(0x10)
	char                                                         pad0xa8_81EUE[0xa8];                               // 0xcd0(0xa8)
	Class CurveFloat*                                            EndOfWorldLightingZoneWeightCurve;                 // 0xd78(0x8)
	char                                                         pad0xf0_FADVV[0xf0];                               // 0xd80(0xf0)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class LightingZoneService: public Object
{
public:
	char                                                         pad0x8_5N26Z[0x8];                                 // 0x28(0x8)
	TArray<Interface RegisteredLightingZones>                    RegisteredLightingZones;                           // 0x30(0x10)
};


// Size 0x250 (Full Size[0x318] - InheritedSize[0xc8]
class LightningComponent: public ActorComponent
{
public:
	Class LightningDataAsset*                                    LightningDataAsset;                                // 0xc8(0x8)
	Class ExplosionComponent*                                    CachedExplosionComponent;                          // 0xd0(0x8)
	Class StaticMeshComponent*                                   BaseCloudMeshComponent;                            // 0xd8(0x8)
	Struct ActiveLightning                                       ActiveLightning;                                   // 0xe0(0xc8)
	char                                                         pad0xc8_GZ67A[0xc8];                               // 0x1a8(0xc8)
	TArray<class StaticMeshComponent*>                           LightningMeshComponents;                           // 0x270(0x10)
	char                                                         pad0x98_30CMF[0x98];                               // 0x280(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightningDamagerType: public DamagerType
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class LightningDataAsset: public DataAsset
{
public:
	float                                                        StrikeHitTime;                                     // 0x28(0x4)
	float                                                        StrikeCompleteTime;                                // 0x2c(0x4)
	float                                                        StormHeight;                                       // 0x30(0x4)
	float                                                        StandardLightningBaseDamage;                       // 0x34(0x4)
	float                                                        HighPriorityLightningBaseDamage;                   // 0x38(0x4)
	char                                                         pad0x4_B3S8H[0x4];                                 // 0x3c(0x4)
	Class WwiseEvent*                                            LightningStrikeEvent;                              // 0x40(0x8)
	Class WwiseObjectPoolWrapper*                                LightningStrikePool;                               // 0x48(0x8)
	Class Material*                                              LightningMaterial;                                 // 0x50(0x8)
	struct FName                                                 LightningTimingParam;                              // 0x58(0x8)
	struct FName                                                 LightningSourcePosParam;                           // 0x60(0x8)
	struct FName                                                 LightningTag;                                      // 0x68(0x8)
	byte                                                         CollisionChannel;                                  // 0x70(0x1)
	char                                                         pad0x7_7CD52[0x7];                                 // 0x71(0x7)
	Class Object*                                                StrikeWaterParticleSystem;                         // 0x78(0x8)
	Class WwiseEvent*                                            StrikeWaterEvent;                                  // 0x80(0x8)
	Class WwiseObjectPoolWrapper*                                StrikeWaterPool;                                   // 0x88(0x8)
	bool                                                         DisableStrikeGroundDecal;                          // 0x90(0x1)
	bool                                                         DisableStrikeGroundSFX;                            // 0x91(0x1)
	char                                                         pad0x6_C7P6R[0x6];                                 // 0x92(0x6)
	Class WwiseEvent*                                            OverrideStrikeGroundEvent;                         // 0x98(0x8)
	Class WwiseObjectPoolWrapper*                                OverrideStrikeGroundPool;                          // 0xa0(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LightningManagerDataAsset: public DataAsset
{
public:
	float                                                        LightningTargetHeightThreshold;                    // 0x28(0x4)
	float                                                        ShipNearMissMaxX;                                  // 0x2c(0x4)
	float                                                        ShipNearMissMaxY;                                  // 0x30(0x4)
	float                                                        NearPlayerMinRadius;                               // 0x34(0x4)
	float                                                        NearPlayerMaxRadius;                               // 0x38(0x4)
	float                                                        InactiveTimePerTest;                               // 0x3c(0x4)
	float                                                        NearbyGhostShipEncounterRadiusInMetres;            // 0x40(0x4)
	char                                                         pad0x4_YB7C5[0x4];                                 // 0x44(0x4)
	TArray<struct LightningStrikeFrequency>                      LightningStrikeFrequency;                          // 0x48(0x10)
	Struct LightningTargetSelector                               TargetSelector;                                    // 0x58(0x10)
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class LightningManagerComponent: public ActorComponent
{
public:
	bool                                                         QueueLightningStrikeOnStart;                       // 0xc8(0x1)
	char                                                         pad0x7_V41VS[0x7];                                 // 0xc9(0x7)
	Class LightningManagerDataAsset*                             LightningManagerDataAsset;                         // 0xd0(0x8)
	float                                                        Radius;                                            // 0xd8(0x4)
	char                                                         pad0x4_73WJ2[0x4];                                 // 0xdc(0x4)
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class LimpingComponent: public ActorComponent
{
public:
	Class CurveFloat*                                            LimpStickDeflectionCurve;                          // 0xc8(0x8)
	Class CurveFloat*                                            LimpCameraCurve;                                   // 0xd0(0x8)
	int                                                          NumAntiCheatSamplesOnServer;                       // 0xd8(0x4)
	float                                                        MaxAveragePlayerSpeedServerTolerance;              // 0xdc(0x4)
	float                                                        MinLimpStrengthToCrossToPlayRumbleAndSfx;          // 0xe0(0x4)
	float                                                        PredictionValidityTime;                            // 0xe4(0x4)
	float                                                        MinStickDeflectionToLimp;                          // 0xe8(0x4)
	char                                                         pad0x4_4EBZO[0x4];                                 // 0xec(0x4)
	Class ForceFeedbackEffect*                                   LimpCrunchRumble;                                  // 0xf0(0x8)
	float                                                        CameraSpringAccel;                                 // 0xf8(0x4)
	float                                                        CamPitchScalar;                                    // 0xfc(0x4)
	float                                                        CamRollScalar;                                     // 0x100(0x4)
	char                                                         pad0x4_M8CFD[0x4];                                 // 0x104(0x4)
	Class WwiseEvent*                                            LocalBrokenLegAudioStateEvent;                     // 0x108(0x8)
	float                                                        DelayUntilStartCheatDetection;                     // 0x110(0x4)
	float                                                        CheatTimeThresholdToApplyServerPenalty;            // 0x114(0x4)
	float                                                        MoveSpeedScalarIfCheating;                         // 0x118(0x4)
	float                                                        CheatTimerDecaySpeed;                              // 0x11c(0x4)
	float                                                        CheatPenaltyTime;                                  // 0x120(0x4)
	int                                                          CheatPunishmentIncreasePerViolation;               // 0x124(0x4)
	char                                                         pad0x20_ZCM55[0x20];                               // 0x128(0x20)
	Class AthenaPlayerCharacter*                                 Player;                                            // 0x148(0x8)
	char                                                         pad0x2e_T2SVG[0x2e];                               // 0x150(0x2e)
	bool                                                         bIsLimping;                                        // 0x17e(0x1)
	char                                                         pad0x1_FNYK8[0x1];                                 // 0x17f(0x1)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class LimpingTestActor: public Actor
{
public:
	Class LimpingComponent*                                      Limping;                                           // 0x3c8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LimpStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0xa18] - InheritedSize[0xa18]
class LiquidContainerTestMaterial: public Material
{
public:
};


// Size 0x18 (Full Size[0x760] - InheritedSize[0x748]
class VomitProjectile: public LiquidProjectile
{
public:
	char                                                         pad0x10_U009Y[0x10];                               // 0x748(0x10)
	bool                                                         CallParentFunctionalityOnImpactEffects;            // 0x758(0x1)
	char                                                         pad0x7_K5Q01[0x7];                                 // 0x759(0x7)
};


// Size 0x128 (Full Size[0x1f0] - InheritedSize[0xc8]
class LoadableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_TO1VF[0x8];                                 // 0xc8(0x8)
	float                                                        LoadTime;                                          // 0xd0(0x4)
	float                                                        UnloadTime;                                        // 0xd4(0x4)
	TArray<struct TimerOverrides>                                TimerOverrides;                                    // 0xd8(0x10)
	class                                                        DefaultObjectToLoad;                               // 0xe8(0x8)
	char                                                         pad0x50_HJ8XE[0x50];                               // 0xf0(0x50)
	Struct Transform                                             UnloadingPoint;                                    // 0x140(0x30)
	char                                                         pad0x18_XYZ22[0x18];                               // 0x170(0x18)
	Struct LoadableComponentState                                LoadableComponentState;                            // 0x188(0x10)
	bool                                                         AlwaysLoaded;                                      // 0x198(0x1)
	char                                                         pad0x57_A2YRO[0x57];                               // 0x199(0x57)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class LoadingPointComponent: public ActorComponent
{
public:
	char                                                         pad0x8_UUOLK[0x8];                                 // 0xc8(0x8)
	TArray<struct CanLoadItemCategories>                         CanLoadItemCategories;                             // 0xd0(0x10)
	TArray<struct CanUnloadItemCategories>                       CanUnloadItemCategories;                           // 0xe0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadItemActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutServiceInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class LoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x30_QOTJG[0x30];                               // 0xc8(0x30)
	bool                                                         HaveSourcedLoadout;                                // 0xf8(0x1)
	byte                                                         LoadoutPersistence;                                // 0xf9(0x1)
	char                                                         pad0x6_LATQ5[0x6];                                 // 0xfa(0x6)
	Struct Loadout                                               SupplementalLoadout;                               // 0x100(0x48)
};


// Size 0x40 (Full Size[0x408] - InheritedSize[0x3c8]
class LoadoutCostService: public Actor
{
public:
	char                                                         pad0x20_W2CQS[0x20];                               // 0x3c8(0x20)
	Struct SaveToLoadoutCosts                                    SaveToLoadoutCosts;                                // 0x3e8(0x20)
};


// Size 0x1230 (Full Size[0x1258] - InheritedSize[0x28]
class LoadoutService: public Object
{
public:
	char                                                         pad0x1180_N7E17[0x1180];                           // 0x28(0x1180)
	TArray<struct LoadoutEntries>                                LoadoutEntries;                                    // 0x11a8(0x10)
	char                                                         pad0xa0_O8XI9[0xa0];                               // 0x11b8(0xa0)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class LoadoutSettings: public Object
{
public:
	Struct StringAssetReference                                  DefaultLoadoutAsset;                               // 0x28(0x10)
	Struct StringAssetReference                                  InitialLoadoutAsset;                               // 0x38(0x10)
	Struct StringAssetReference                                  FallbackLoadoutAsset;                              // 0x48(0x10)
	Struct StringAssetReference                                  ContestLoadoutAsset;                               // 0x58(0x10)
	TArray<struct SupplementalLoadouts>                          SupplementalLoadouts;                              // 0x68(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadPlayerActionStateId: public ActionStateId
{
public:
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class LockOnCameraModifier: public CameraModifier
{
public:
	Class LockOnCameraModifierSettings*                          Settings;                                          // 0x48(0x8)
	bool                                                         IsYawLocked;                                       // 0x50(0x1)
	bool                                                         OwnerInputsIgnored;                                // 0x51(0x1)
	char                                                         pad0x6_CJUPX[0x6];                                 // 0x52(0x6)
	Class Actor*                                                 TargetActor;                                       // 0x58(0x8)
	char                                                         pad0x18_Y7MLL[0x18];                               // 0x60(0x18)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LockOnCameraModifierSettings: public DataAsset
{
public:
	bool                                                         BlockLowerPriorityCameraModifiers;                 // 0x28(0x1)
	bool                                                         DisablePlayerInputDuringLockOn;                    // 0x29(0x1)
	char                                                         pad0x2_OH1X1[0x2];                                 // 0x2a(0x2)
	struct FName                                                 TargetSocketName;                                  // 0x2c(0x8)
	float                                                        YawSnapStrength;                                   // 0x34(0x4)
	float                                                        PitchSnapStrength;                                 // 0x38(0x4)
	float                                                        MinYawLerpSpeed;                                   // 0x3c(0x4)
	bool                                                         LockOnScaledByInput;                               // 0x40(0x1)
	char                                                         pad0x3_W7CJO[0x3];                                 // 0x41(0x3)
	float                                                        InputYawToScaleTo;                                 // 0x44(0x4)
	float                                                        InputTowardsTarget_LockOnScale;                    // 0x48(0x4)
	float                                                        ZeroInput_LockOnScale;                             // 0x4c(0x4)
	float                                                        InputAwayFromTarget_LockOnScale;                   // 0x50(0x4)
	bool                                                         AutoLockAllowed;                                   // 0x54(0x1)
	bool                                                         LimitLockOnByInput;                                // 0x55(0x1)
	char                                                         pad0x2_GSMC0[0x2];                                 // 0x56(0x2)
	float                                                        InputAwayFromTarget_LockOnClampMultiplier;         // 0x58(0x4)
	bool                                                         FadeOutEnabled;                                    // 0x5c(0x1)
	char                                                         pad0x3_V04DS[0x3];                                 // 0x5d(0x3)
	float                                                        FullLockDuration;                                  // 0x60(0x4)
	float                                                        FadeOutDuration;                                   // 0x64(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LockWheelStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocomotionInitialStateCreatorDefinition: public ActionStateInitialStateCreatorDefinition
{
public:
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class LookAtEmoteCameraComponent: public ActorComponent
{
public:
	Class AthenaCameraComponent*                                 TargetCamera;                                      // 0xc8(0x8)
	float                                                        BlendInTime;                                       // 0xd0(0x4)
	float                                                        AttachedTargetLerpFactor;                          // 0xd4(0x4)
	char                                                         pad0x38_64T56[0x38];                               // 0xd8(0x38)
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class LookingAtQuestBookInputComponent: public LookingAtWieldableInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LostTargetAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LowFlyAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LPVReferenceFrameAdaptationFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x98 (Full Size[0x110] - InheritedSize[0x78]
class MapRadialContentRule: public RadialContentRule
{
public:
	float                                                        RadialIconScale;                                   // 0x78(0x4)
	Struct Vector2D                                              RadialIconOffset;                                  // 0x7c(0x8)
	char                                                         pad0x54_OL6HV[0x54];                               // 0x84(0x54)
	TArray<class Actor*>                                         MappedSlots;                                       // 0xd8(0x10)
	char                                                         pad0x28_VCW0D[0x28];                               // 0xe8(0x28)
};


// Size 0x0 (Full Size[0x110] - InheritedSize[0x110]
class StashedMapRadialContentRule: public MapRadialContentRule
{
public:
};


// Size 0x3e8 (Full Size[0x7b0] - InheritedSize[0x3c8]
class MapTable: public Actor
{
public:
	char                                                         pad0x18_1WE84[0x18];                               // 0x3c8(0x18)
	Class StaticMeshComponent*                                   TableMeshComponent;                                // 0x3e0(0x8)
	float                                                        MousePanSpeed;                                     // 0x3e8(0x4)
	float                                                        MouseZoomSpeed;                                    // 0x3ec(0x4)
	float                                                        PanSpeedMinZoom;                                   // 0x3f0(0x4)
	float                                                        PanSpeedMaxZoom;                                   // 0x3f4(0x4)
	float                                                        ZoomSpeed;                                         // 0x3f8(0x4)
	float                                                        MinZoom;                                           // 0x3fc(0x4)
	float                                                        MaxZoom;                                           // 0x400(0x4)
	float                                                        InitialZoom;                                       // 0x404(0x4)
	float                                                        RemoteBlendTime;                                   // 0x408(0x4)
	float                                                        RemotePanSettleRange;                              // 0x40c(0x4)
	float                                                        RemoteZoomSettleRange;                             // 0x410(0x4)
	float                                                        DrunknessStaggerScalarWhileUsing;                  // 0x414(0x4)
	int                                                          MaxPins;                                           // 0x418(0x4)
	float                                                        PinToggleDist;                                     // 0x41c(0x4)
	int                                                          MaxTrail;                                          // 0x420(0x4)
	float                                                        MinDistPerTrailDrop;                               // 0x424(0x4)
	float                                                        TimePerTrailUpdate;                                // 0x428(0x4)
	char                                                         pad0x4_TUX4H[0x4];                                 // 0x42c(0x4)
	Class WwiseObjectPoolWrapper*                                MapTablePool;                                      // 0x430(0x8)
	Class WwiseEvent*                                            JoinTableSfx;                                      // 0x438(0x8)
	Class WwiseEvent*                                            LeaveTableSfx;                                     // 0x440(0x8)
	Class WwiseEvent*                                            PlayMoveMapSfx;                                    // 0x448(0x8)
	Class WwiseEvent*                                            StopMoveMapSfx;                                    // 0x450(0x8)
	Class WwiseEvent*                                            PlacePinSfx;                                       // 0x458(0x8)
	Class WwiseEvent*                                            RemovePinSfx;                                      // 0x460(0x8)
	Class WwiseEvent*                                            ShowTaleSfx;                                       // 0x468(0x8)
	Class WwiseEvent*                                            HideTaleSfx;                                       // 0x470(0x8)
	Class WwiseEvent*                                            HighlightTaleMarkerSfx;                            // 0x478(0x8)
	float                                                        TrackedBootyItemsUpdateInterval;                   // 0x480(0x4)
	float                                                        TrackedShipsUpdateInterval;                        // 0x484(0x4)
	float                                                        TrackedShipDistanceThreshold;                      // 0x488(0x4)
	char                                                         pad0x4_C0BAR[0x4];                                 // 0x48c(0x4)
	class                                                        ReapersMarkFlag;                                   // 0x490(0x8)
	bool                                                         DisplayFactionShips;                               // 0x498(0x1)
	bool                                                         DisplayTallTaleIcons;                              // 0x499(0x1)
	char                                                         pad0x6_UXDCN[0x6];                                 // 0x49a(0x6)
	Class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0x4a0(0x8)
	Class MaterialInterface*                                     ExpandedMapMaterial;                               // 0x4a8(0x8)
	Class MaterialInterface*                                     BaseMapMaterial;                                   // 0x4b0(0x8)
	float                                                        TopMargin;                                         // 0x4b8(0x4)
	float                                                        RightMargin;                                       // 0x4bc(0x4)
	float                                                        BottomMargin;                                      // 0x4c0(0x4)
	float                                                        LeftMargin;                                        // 0x4c4(0x4)
	Struct Vector2D                                              ServerCentreLocation;                              // 0x4c8(0x8)
	float                                                        ServerZoomLevel;                                   // 0x4d0(0x4)
	char                                                         pad0x4_NGH26[0x4];                                 // 0x4d4(0x4)
	TArray<class Actor*>                                         ControllerQueue;                                   // 0x4d8(0x10)
	TArray<struct MapPins>                                       MapPins;                                           // 0x4e8(0x10)
	TArray<struct TrackedShips>                                  TrackedShips;                                      // 0x4f8(0x10)
	TArray<struct TrackedBootyItemInfos>                         TrackedBootyItemInfos;                             // 0x508(0x10)
	Struct LinearColor                                           BoundaryData;                                      // 0x518(0x10)
	Class Texture*                                               AllianceOverlayIcon;                               // 0x528(0x8)
	char                                                         pad0x258_CZSU2[0x258];                             // 0x530(0x258)
	byte                                                         CachedPlaymode;                                    // 0x788(0x1)
	char                                                         pad0x17_64RIW[0x17];                               // 0x789(0x17)
	Struct MapTableTutorialHandler                               MapTableTutorialHandler;                           // 0x7a0(0x10)
};


// Size 0x20 (Full Size[0x530] - InheritedSize[0x510]
class MapTableControlPoint: public ControllableObject
{
public:
	Class SceneComponent*                                        SceneRootComponent;                                // 0x510(0x8)
	Class InteractableComponent*                                 MyInteractable;                                    // 0x518(0x8)
	struct FName                                                 CameraSocketName;                                  // 0x520(0x8)
	bool                                                         InvertControls;                                    // 0x528(0x1)
	char                                                         pad0x7_G38N2[0x7];                                 // 0x529(0x7)
};


// Size 0x8 (Full Size[0x2a8] - InheritedSize[0x2a0]
class MapTableInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
	Class MapTable*                                              MapTable;                                          // 0x2a0(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableZoomInAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableZoomOutAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanXMouseInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTablePanYMouseInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableZoomMouseInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapTableTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableTogglePinNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapTableToggleTooltipNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class MastRepairableComponent: public RepairableComponent
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class MastHinge: public Object
{
public:
};


// Size 0x158 (Full Size[0x2d8] - InheritedSize[0x180]
class MatchmakingVoyageRecipeDesc: public VoyageRecipeDataAsset
{
public:
	Struct MatchmakingVoyageRecipe                               MatchmakingRecipe;                                 // 0x180(0x158)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialInformationServiceBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x110 (Full Size[0x4d8] - InheritedSize[0x3c8]
class MatineeUtility: public Actor
{
public:
	char                                                         pad0x108_LVZUR[0x108];                             // 0x3c8(0x108)
	Class AthenaPlayerCharacter*                                 BoundCharacter;                                    // 0x4d0(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class SpawnRequirement: public Object
{
public:
	char                                                         pad0x18_VGDL1[0x18];                               // 0x28(0x18)
	TArray<class SpawnRequirement*>                              OR_Requirements;                                   // 0x40(0x10)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class MaximumTrackedActorTypePopulationSpawnRequirement: public SpawnRequirement
{
public:
	byte                                                         TrackedActorType;                                  // 0x50(0x1)
	char                                                         pad0x3_PWXO4[0x3];                                 // 0x51(0x3)
	int                                                          MaximumPopulation;                                 // 0x54(0x4)
	char                                                         pad0x10_1FHM2[0x10];                               // 0x58(0x10)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class MegalodonSoulActor: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
	float                                                        TargetSoulHeight;                                  // 0x3d0(0x4)
	float                                                        RiseVelocity;                                      // 0x3d4(0x4)
};


// Size 0x170 (Full Size[0x298] - InheritedSize[0x128]
class MegalodonSoulInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x10_NZC6Y[0x10];                               // 0x128(0x10)
	Struct FText                                                 DisplayName;                                       // 0x138(0x38)
	Struct FText                                                 TakeSoulTooltipText;                               // 0x170(0x38)
	Struct FText                                                 EffigyNotRaisedToolTipText;                        // 0x1a8(0x38)
	Struct FText                                                 NotWieldingEffigyTooltipText;                      // 0x1e0(0x38)
	Struct FText                                                 CannotEnchantEffigyTooltipText;                    // 0x218(0x38)
	byte                                                         MegalodonSoulType;                                 // 0x250(0x1)
	char                                                         pad0x7_GYEWM[0x7];                                 // 0x251(0x7)
	class                                                        ActivationInput;                                   // 0x258(0x8)
	class                                                        ReleaseInput;                                      // 0x260(0x8)
	bool                                                         RequiresRaisedEffigy;                              // 0x268(0x1)
	char                                                         pad0x3_OGJHC[0x3];                                 // 0x269(0x3)
	float                                                        HoldDuration;                                      // 0x26c(0x4)
	float                                                        SoulVFXReturnModifier;                             // 0x270(0x4)
	float                                                        SoulVFXClientPredictionModifier;                   // 0x274(0x4)
	char                                                         pad0x18_TJD3L[0x18];                               // 0x278(0x18)
	Class ParticleSystemComponent*                               ParticleSystem;                                    // 0x290(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeAttackFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class MeleeAttackLockOnComponentSettings: public DataAsset
{
public:
	Class LockOnCameraModifierSettings*                          CameraModifierSettings;                            // 0x28(0x8)
	float                                                        BreakDistance;                                     // 0x30(0x4)
	bool                                                         DelayTargetEvaluationUntilEndOfStrike;             // 0x34(0x1)
	bool                                                         AllowTargetSwitching;                              // 0x35(0x1)
	char                                                         pad0x2_RP1EJ[0x2];                                 // 0x36(0x2)
	float                                                        MaxLockOnAngle;                                    // 0x38(0x4)
	float                                                        MaxLockOnDistance;                                 // 0x3c(0x4)
};


// Size 0x1e0 (Full Size[0x2a8] - InheritedSize[0xc8]
class MeleeAttackLockOnComponent: public ActorComponent
{
public:
	Class MeleeAttackLockOnComponentSettings*                    ComponentSettings;                                 // 0xc8(0x8)
	char                                                         pad0x1b8_YF3RM[0x1b8];                             // 0xd0(0x1b8)
	Class LockOnCameraModifier*                                  LockOnCameraModifier;                              // 0x288(0x8)
	TArray<Weakclass PotentialTargets>                           PotentialTargets;                                  // 0x298(0x10)
};


// Size 0x1d8 (Full Size[0x2a0] - InheritedSize[0xc8]
class MeleeAttackProcessorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_G9TII[0x8];                                 // 0xc8(0x8)
	int                                                          MaxPlayerHitResponsesBroadcastPerAttack;           // 0xd0(0x4)
	int                                                          MaxNonPlayerPawnHitResponsesBroadcastPerAttack;    // 0xd4(0x4)
	int                                                          MaxOtherHitResponsesBroadcastPerAttack;            // 0xd8(0x4)
	float                                                        RewindInstigatorEstimationMaxSearchTime;           // 0xdc(0x4)
	float                                                        RewindInstigatorEstimationStepSize;                // 0xe0(0x4)
	char                                                         pad0x44_WR8EX[0x44];                               // 0xe4(0x44)
	Struct MeleeAttackHitResponses                               PredictiveHitResponses;                            // 0x128(0x1)
	Struct MeleeAttackHitResponses                               ValidatedHitResponses;                             // 0x129(0x1)
	Struct MeleeAttackHitResponses                               AuthoritativeHitResponses;                         // 0x12a(0x1)
	Struct MeleeAttackHitResponses                               ServerHitResponses;                                // 0x12b(0x1)
	char                                                         pad0x174_ZCUFC[0x174];                             // 0x12c(0x174)
};


// Size 0x8 (Full Size[0x2a8] - InheritedSize[0x2a0]
class MeleeAttackProcessorComponentMock: public MeleeAttackProcessorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeBlockingActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x298] - InheritedSize[0x298]
class MeleeBlockingInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class MeleeChargeAfterEndStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class MeleeChargeEndStatus: public StatusBase
{
public:
};


// Size 0x2d0 (Full Size[0x5b0] - InheritedSize[0x2e0]
class MeleeItemActionComponent: public ItemActionComponent
{
public:
	Class ParticleSystemComponent*                               TrailParticleSystem_FP;                            // 0x2e0(0x8)
	Class ParticleSystemComponent*                               TrailParticleSystem_TP;                            // 0x2e8(0x8)
	bool                                                         PreventCombosOnHealthChange;                       // 0x2f0(0x1)
	char                                                         pad0x1f_WR9AX[0x1f];                               // 0x2f1(0x1f)
	Class MeleeWeaponDataAsset*                                  WeaponData;                                        // 0x310(0x8)
	Class MeleeAttackProcessorComponent*                         WieldersAttackProcessor;                           // 0x318(0x8)
	Class InventoryManipulatorComponent*                         WieldersInventoryManipulator;                      // 0x320(0x8)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0x328(0x4)
	float                                                        MaxAcceptableAttackLocationDelta;                  // 0x32c(0x4)
	float                                                        MaxAcceptableAttackLocationOnShipDelta;            // 0x330(0x4)
	float                                                        MaxAcceptableAttackShipSpeedForLocation;           // 0x334(0x4)
	char                                                         pad0x278_SKW8W[0x278];                             // 0x338(0x278)
};


// Size 0x350 (Full Size[0xb30] - InheritedSize[0x7e0]
class MeleeWeapon: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x10_M70V1[0x10];                               // 0x7e0(0x10)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f0(0x8)
	Class ParticleSystemComponent*                               TrailParticleSystem_FP;                            // 0x7f8(0x8)
	Class ParticleSystemComponent*                               TrailParticleSystem_TP;                            // 0x800(0x8)
	Class MeleeWeaponDataAsset*                                  DataAsset;                                         // 0x808(0x8)
	Class InventoryManipulatorComponent*                         InventoryManipulator;                              // 0x810(0x8)
	bool                                                         CanUseWeaponToBlock;                               // 0x818(0x1)
	bool                                                         PreventCombosOnHealthChange;                       // 0x819(0x1)
	char                                                         pad0x76_NQM6Q[0x76];                               // 0x81a(0x76)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0x890(0x4)
	float                                                        MaxAcceptableAttackLocationDelta;                  // 0x894(0x4)
	float                                                        MaxAcceptableAttackLocationOnShipDelta;            // 0x898(0x4)
	float                                                        MaxAcceptableAttackShipVelocityForLocation;        // 0x89c(0x4)
	char                                                         pad0x10_U96ZG[0x10];                               // 0x8a0(0x10)
	Class MeleeAttackProcessorComponent*                         WieldersAttackProcessor;                           // 0x8b0(0x8)
	char                                                         pad0x278_6TTYV[0x278];                             // 0x8b8(0x278)
};


// Size 0x10 (Full Size[0xb40] - InheritedSize[0xb30]
class PlayerMeleeWeapon: public MeleeWeapon
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MeleeWeaponMovementSpeedConfig: public DataAsset
{
public:
	TArray<struct MovementSpeeds>                                MovementSpeeds;                                    // 0x28(0x10)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class MeleeWeaponDataAsset: public DataAsset
{
public:
	float                                                        PlayerAttackSelectionTime;                         // 0x28(0x4)
	char                                                         pad0x4_HN8EB[0x4];                                 // 0x2c(0x4)
	Class MeleeWeaponMovementSpeedConfig*                        MovementSpeedConfig;                               // 0x30(0x8)
	TArray<class MeleeAttackDataAsset*>                          ComboAttacks;                                      // 0x38(0x10)
	Class MeleeAttackDataAsset*                                  HeavyAttack;                                       // 0x48(0x8)
	float                                                        HeavyAttackChargeDuration;                         // 0x50(0x4)
	char                                                         pad0x4_ZWR4O[0x4];                                 // 0x54(0x4)
	TArray<struct SpecialAttacks>                                SpecialAttacks;                                    // 0x58(0x10)
	Struct ItemBlockingParameters                                BlockingParameters;                                // 0x68(0x4)
	char                                                         pad0x4_CLLO0[0x4];                                 // 0x6c(0x4)
	Class PhysicalMaterial*                                      BlockingPhysicalMaterial;                          // 0x70(0x8)
	byte                                                         BlockingMovementSpeed;                             // 0x78(0x1)
	char                                                         pad0x3_XK3IX[0x3];                                 // 0x79(0x3)
	float                                                        HitBlockingMovementDisableTime;                    // 0x7c(0x4)
	Class ParticleSystem*                                        TrailParticleSystem_FP;                            // 0x80(0x8)
	Class ParticleSystem*                                        TrailParticleSystem_TP;                            // 0x88(0x8)
	struct FName                                                 TrailStartSocketName;                              // 0x90(0x8)
	struct FName                                                 TrailEndSocketName;                                // 0x98(0x8)
	byte                                                         TrailWidthMode;                                    // 0xa0(0x1)
	char                                                         pad0x3_PXJRR[0x3];                                 // 0xa1(0x3)
	float                                                        TrailWidth;                                        // 0xa4(0x4)
	float                                                        PerceptionHearingRange;                            // 0xa8(0x4)
	char                                                         pad0x4_AKI7L[0x4];                                 // 0xac(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeWeaponFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x30 (Full Size[0x470] - InheritedSize[0x440]
class MemoryTestPawn: public Pawn
{
public:
	float                                                        Speed;                                             // 0x440(0x4)
	char                                                         pad0x4_YOPQP[0x4];                                 // 0x444(0x4)
	char                                                         pad0x28_M7FVD[0x28];                               // 0x448(0x28)
};


// Size 0x70 (Full Size[0x308] - InheritedSize[0x298]
class MenuInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x10 (Full Size[0x820] - InheritedSize[0x810]
class CargoRunCrate: public MerchantCrate
{
public:
	Class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x810(0x8)
	char                                                         pad0x8_54JF9[0x8];                                 // 0x818(0x8)
};


// Size 0x0 (Full Size[0x840] - InheritedSize[0x840]
class StaticCargoRunCrate: public StaticMerchantCrate
{
public:
	Class CargoRunCrateComponent*                                CargoRunCrateComponent;                            // 0x838(0x8)
};


// Size 0x10 (Full Size[0x830] - InheritedSize[0x820]
class DamageableCargoRunCrate: public CargoRunCrate
{
public:
	Class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x818(0x8)
	Class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x820(0x8)
	char                                                         pad0x8_5Y49J[0x8];                                 // 0x828(0x8)
};


// Size 0x10 (Full Size[0x850] - InheritedSize[0x840]
class StaticDamageableCargoRunCrate: public StaticCargoRunCrate
{
public:
	Class GatedHealthComponent*                                  GatedHealthComponent;                              // 0x840(0x8)
	Class VisualHealthResponseComponent*                         VisualHealthResponseComponent;                     // 0x848(0x8)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class MerchantCrateProviderComponent: public ActorComponent
{
public:
};


// Size 0x1c0 (Full Size[0x9f0] - InheritedSize[0x830]
class MerchantMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x828(0x4)
	int                                                          CanvasHeight;                                      // 0x82c(0x4)
	Class Font*                                                  Font;                                              // 0x830(0x8)
	float                                                        FontScale;                                         // 0x838(0x4)
	float                                                        FontLineSpacingScale;                              // 0x83c(0x4)
	char                                                         pad0x8_YI059[0x8];                                 // 0x840(0x8)
	Class MerchantMapLayout*                                     MerchantMapLayout;                                 // 0x848(0x8)
	Struct MerchantMapContents                                   Contents;                                          // 0x850(0x138)
	char                                                         pad0x68_4B8XH[0x68];                               // 0x988(0x68)
};


// Size 0x538 (Full Size[0x9a0] - InheritedSize[0x468]
class Mermaid: public InteractableObject
{
public:
	char                                                         pad0x20_ZG8RY[0x20];                               // 0x468(0x20)
	Class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0x488(0x8)
	Struct WaterBuoyancy                                         Buoyancy;                                          // 0x490(0x130)
	Class CurveFloat*                                            BuoyancyScalarWhenDisappearing;                    // 0x5c0(0x8)
	struct FName                                                 InteractionSocket;                                 // 0x5c8(0x8)
	struct FName                                                 ClientWorldHitsCollisionProfile;                   // 0x5d0(0x8)
	struct FName                                                 TorchVfxSocketName;                                // 0x5d8(0x8)
	Struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x5e0(0x1c)
	char                                                         pad0x4_MWBAR[0x4];                                 // 0x5fc(0x4)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x600(0x8)
	Class Object*                                                BeaconVfx;                                         // 0x608(0x8)
	Class Object*                                                BeaconVfxUnderwater;                               // 0x610(0x8)
	Class Object*                                                SurfacingSplash;                                   // 0x618(0x8)
	Class Object*                                                DiveSplash;                                        // 0x620(0x8)
	Class Object*                                                TorchVfx;                                          // 0x628(0x8)
	Class WwiseEvent*                                            PlaySongEvent;                                     // 0x630(0x8)
	Class WwiseEvent*                                            StopSongEvent;                                     // 0x638(0x8)
	Class WwiseEvent*                                            PlayTorchCrackleFx;                                // 0x640(0x8)
	Class WwiseEvent*                                            StopTorchCrackleFx;                                // 0x648(0x8)
	Class WwiseEvent*                                            SurfacingAudioEvent;                               // 0x650(0x8)
	Class WwiseEvent*                                            DiveAudioEvent;                                    // 0x658(0x8)
	Class WwiseEvent*                                            TeleportSfxEvent;                                  // 0x660(0x8)
	TArray<struct AnimMap>                                       AnimMap;                                           // 0x668(0x10)
	float                                                        ChoppinessScalar;                                  // 0x678(0x4)
	float                                                        MinProximityToWaterSurfaceToConsiderSurfaced;      // 0x67c(0x4)
	float                                                        MinDistanceFromEdgeOfWorld;                        // 0x680(0x4)
	float                                                        LowestZToDestroySelf;                              // 0x684(0x4)
	float                                                        MaxDisappearTime;                                  // 0x688(0x4)
	float                                                        TimeIntoDiveToPlayFx;                              // 0x68c(0x4)
	float                                                        FacePlayerSpringAccel;                             // 0x690(0x4)
	float                                                        GlueToWaterSurfaceSpringAccel;                     // 0x694(0x4)
	float                                                        BlendToWaterSurfaceTimeWhenSurfacing;              // 0x698(0x4)
	float                                                        BlendAwayFromWaterSurfaceTimeWhenDiving;           // 0x69c(0x4)
	float                                                        PreferredWaterSubmersionOfModel;                   // 0x6a0(0x4)
	float                                                        CollisionRetainTime;                               // 0x6a4(0x4)
	float                                                        MaxTimeCollidingWithLandUntilDestroy;              // 0x6a8(0x4)
	float                                                        MaxTimeCollidingWithShipUntilDestroy;              // 0x6ac(0x4)
	float                                                        MaxZOutOfWaterToCountAsOutOfWaterWhenHittingShip;  // 0x6b0(0x4)
	char                                                         pad0x4_OVAE4[0x4];                                 // 0x6b4(0x4)
	Class SkeletalMeshMemoryConstraintComponent*                 Mesh;                                              // 0x6b8(0x8)
	bool                                                         bGlueToSurface;                                    // 0x6c0(0x1)
	char                                                         pad0x1f_B1E36[0x1f];                               // 0x6c1(0x1f)
	Class PrimitiveComponent*                                    PrimitiveRootComponent;                            // 0x6e0(0x8)
	char                                                         pad0x50_T1IFE[0x50];                               // 0x6e8(0x50)
	Class ParticleSystemComponent*                               BeaconParticleSystem;                              // 0x738(0x8)
	Class ParticleSystemComponent*                               UnderwaterBeaconParticleSystem;                    // 0x740(0x8)
	Class ParticleSystemComponent*                               TorchParticleSystem;                               // 0x748(0x8)
	Struct NetTimeStampCalculator                                MovementTimeStamp;                                 // 0x750(0x70)
	byte                                                         MermaidState;                                      // 0x7c0(0x1)
	char                                                         pad0x1df_1NJIB[0x1df];                             // 0x7c1(0x1df)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MermaidServiceInterface: public Interface
{
public:
};


// Size 0x190 (Full Size[0x558] - InheritedSize[0x3c8]
class MermaidService: public Actor
{
public:
	char                                                         pad0x8_JROXN[0x8];                                 // 0x3c8(0x8)
	class                                                        MermaidBP;                                         // 0x3d0(0x8)
	Class AIPartsCategory*                                       MermaidPartsCategory;                              // 0x3d8(0x8)
	char                                                         pad0x178_Y5Q7T[0x178];                             // 0x3e0(0x178)
};


// Size 0x58 (Full Size[0x840] - InheritedSize[0x7e8]
class MessageInABottleItemProxy: public FloatingItemProxy
{
public:
	char                                                         pad0x8_XWN1L[0x8];                                 // 0x7e8(0x8)
	TArray<struct VoyageRecipeList>                              VoyageRecipeList;                                  // 0x7f0(0x10)
	bool                                                         UsePremadeVoyages;                                 // 0x800(0x1)
	char                                                         pad0x7_EB5OM[0x7];                                 // 0x801(0x7)
	TArray<class VoyageDescDataAsset*>                           PremadeVoyages;                                    // 0x808(0x10)
	byte                                                         EmergentSource;                                    // 0x818(0x1)
	char                                                         pad0x7_IBB25[0x7];                                 // 0x819(0x7)
	Class WwiseEvent*                                            OnBottleOpenedSfx;                                 // 0x820(0x8)
	char                                                         pad0x18_U90VI[0x18];                               // 0x828(0x18)
};


// Size 0x20 (Full Size[0xb0] - InheritedSize[0x90]
class MetalAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	float                                                        WetCooldown;                                       // 0x90(0x4)
	float                                                        WetMovementSpeedMultiplier;                        // 0x94(0x4)
	float                                                        RelativeWaterLevelToGetWet;                        // 0x98(0x4)
	float                                                        RainStrengthToGetWet;                              // 0x9c(0x4)
	TArray<struct RustyDamageResponses>                          RustyDamageResponses;                              // 0xa0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MigrationActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x298] - InheritedSize[0x298]
class MigrationInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x470 (Full Size[0x498] - InheritedSize[0x28]
class MigrationService: public Object
{
public:
	char                                                         pad0x20_XRVYV[0x20];                               // 0x28(0x20)
	float                                                        BeaconRange;                                       // 0x48(0x4)
	float                                                        TunnelOfTheDamnedBeaconRange;                      // 0x4c(0x4)
	float                                                        MigrationSetupRequestTimeoutInSeconds;             // 0x50(0x4)
	char                                                         pad0x4_BALE7[0x4];                                 // 0x54(0x4)
	TArray<class Class*>                                         BeaconActorClasses;                                // 0x58(0x10)
	TArray<class Class*>                                         CollectedActorClasses;                             // 0x68(0x10)
	char                                                         pad0x420_KUACB[0x420];                             // 0x78(0x420)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class MigrationUIContentsDataAsset: public DataAsset
{
public:
	Class Font*                                                  Font;                                              // 0x28(0x8)
	bool                                                         ShowBanner;                                        // 0x30(0x1)
	char                                                         pad0x7_L1K4Z[0x7];                                 // 0x31(0x7)
	Struct FText                                                 BannerText;                                        // 0x38(0x38)
	float                                                        BannerTextFontScale;                               // 0x70(0x4)
	int                                                          BannerTextPostSpacing;                             // 0x74(0x4)
	float                                                        PoemTextFontScale;                                 // 0x78(0x4)
	int                                                          PoemTextSpacing;                                   // 0x7c(0x4)
	Struct Vector2D                                              MaskBorderSize;                                    // 0x80(0x8)
	TArray<struct Poems>                                         Poems;                                             // 0x88(0x10)
	float                                                        RevealDuration;                                    // 0x98(0x4)
	float                                                        FadeOutDuration;                                   // 0x9c(0x4)
	Struct StringAssetReference                                  MigrationUIMaterialFileLocation;                   // 0xa0(0x10)
};


// Size 0x120 (Full Size[0x1e8] - InheritedSize[0xc8]
class MigrationUIComponent: public ActorComponent
{
public:
	char                                                         pad0x10_KN9G1[0x10];                               // 0xc8(0x10)
	Class MigrationUIContentsDataAsset*                          UIContentsDataAsset;                               // 0xd8(0x8)
	Class CanvasRenderTarget2D*                                  TextRenderTarget;                                  // 0xe0(0x8)
	Class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0xe8(0x8)
	char                                                         pad0xf8_3Z734[0xf8];                               // 0xf0(0xf8)
};


// Size 0x18 (Full Size[0x68] - InheritedSize[0x50]
class MinimumCrewCountSpawnRequirement: public SpawnRequirement
{
public:
	int                                                          MinimumCrewCount;                                  // 0x50(0x4)
	char                                                         pad0x14_CL03H[0x14];                               // 0x54(0x14)
};


// Size 0xb0 (Full Size[0x690] - InheritedSize[0x5e0]
class MockCharacterWithAthenaPlayerCharacterMovementComponent: public Character
{
public:
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class MockInventoryItem: public Actor
{
public:
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x3c8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WalletComponentInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class MockPlayerWalletComponent: public ActorComponent
{
public:
};


// Size 0x70 (Full Size[0x448] - InheritedSize[0x3d8]
class CaptaincyShipCustomizationChestInteraction: public ModalInteraction
{
public:
	TArray<struct ShipLiveryCategories>                          ShipLiveryCategories;                              // 0x3d8(0x10)
	TArray<struct ShipDecorationCategories>                      ShipDecorationCategories;                          // 0x3e8(0x10)
	bool                                                         AllTab;                                            // 0x3f8(0x1)
	bool                                                         SwapAllToSavedLoadout;                             // 0x3f9(0x1)
	char                                                         pad0x3e_XJN90[0x3e];                               // 0x3fa(0x3e)
	TArray<class Class*>                                         PreviousLoadout;                                   // 0x438(0x10)
};


// Size 0x68 (Full Size[0x440] - InheritedSize[0x3d8]
class PossessionsChestInteraction: public ModalInteraction
{
public:
	byte                                                         PossessionsChestType;                              // 0x3d8(0x1)
	char                                                         pad0x67_WCKVV[0x67];                               // 0x3d9(0x67)
};


// Size 0x70 (Full Size[0x4b0] - InheritedSize[0x440]
class ArmoryChestInteraction: public PossessionsChestInteraction
{
public:
	TArray<class Class*>                                         Categories;                                        // 0x440(0x10)
	bool                                                         AllTab;                                            // 0x450(0x1)
	char                                                         pad0x5f_87UGW[0x5f];                               // 0x451(0x5f)
};


// Size 0x2b8 (Full Size[0x6f8] - InheritedSize[0x440]
class ClothingChestInteraction: public PossessionsChestInteraction
{
public:
	char                                                         pad0x10_8ZUK7[0x10];                               // 0x440(0x10)
	TArray<struct Categories>                                    Categories;                                        // 0x450(0x10)
	TArray<struct SpecialisedCategories>                         SpecialisedCategories;                             // 0x460(0x10)
	bool                                                         AllTab;                                            // 0x470(0x1)
	char                                                         pad0x25f_ZZI26[0x25f];                             // 0x471(0x25f)
	Struct ClothingLoadout                                       OriginalLoadout;                                   // 0x6d0(0x10)
	Struct ClothingLoadout                                       Loadout;                                           // 0x6e0(0x10)
	class                                                        CurrentSpecialisedClothingCategory;                // 0x6f0(0x8)
};


// Size 0x70 (Full Size[0x4b0] - InheritedSize[0x440]
class EquipmentChestInteraction: public PossessionsChestInteraction
{
public:
	TArray<class Class*>                                         Categories;                                        // 0x440(0x10)
	bool                                                         AllTab;                                            // 0x450(0x1)
	char                                                         pad0x5f_NLR7U[0x5f];                               // 0x451(0x5f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetLoadoutViewInterface: public Interface
{
public:
};


// Size 0x280 (Full Size[0x6c0] - InheritedSize[0x440]
class PetChestInteraction: public PossessionsChestInteraction
{
public:
	char                                                         pad0x10_Q7COH[0x10];                               // 0x440(0x10)
	TArray<struct Categories>                                    Categories;                                        // 0x450(0x10)
	bool                                                         AllTab;                                            // 0x460(0x1)
	char                                                         pad0x7_LRSII[0x7];                                 // 0x461(0x7)
	TArray<Str ForbiddenNameTokens>                              ForbiddenNameTokens;                               // 0x468(0x10)
	char                                                         pad0x218_CV4PN[0x218];                             // 0x478(0x218)
	Struct PetLoadout                                            OriginalLoadout;                                   // 0x690(0x18)
	Struct PetLoadout                                            Loadout;                                           // 0x6a8(0x18)
};


// Size 0xd8 (Full Size[0x518] - InheritedSize[0x440]
class ShipCustomizationChestInteraction: public PossessionsChestInteraction
{
public:
	TArray<struct Categories>                                    Categories;                                        // 0x440(0x10)
	bool                                                         AllTab;                                            // 0x450(0x1)
	char                                                         pad0xc7_NHMEK[0xc7];                               // 0x451(0xc7)
};


// Size 0x38 (Full Size[0x550] - InheritedSize[0x518]
class ShipFlagCustomizationChestInteraction: public ShipCustomizationChestInteraction
{
public:
	TArray<class Class*>                                         CategoriesToSave;                                  // 0x518(0x10)
	char                                                         pad0x28_V8PT3[0x28];                               // 0x528(0x28)
};


// Size 0x28 (Full Size[0x400] - InheritedSize[0x3d8]
class ShipVoyageProposalContainerInteraction: public ModalInteraction
{
public:
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class ShipwrightInteractionProxy: public ModalInteraction
{
public:
};


// Size 0xb0 (Full Size[0x488] - InheritedSize[0x3d8]
class ShopkeeperInteractionProxy: public ModalInteraction
{
public:
	Class ShopDesc*                                              ShopDesc;                                          // 0x3d8(0x8)
	char                                                         pad0xa8_S74BQ[0xa8];                               // 0x3e0(0xa8)
};


// Size 0x28 (Full Size[0x400] - InheritedSize[0x3d8]
class VoyageProposalContainerInteraction: public ModalInteraction
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ModalInteractionActionStateId: public ActionStateId
{
public:
};


// Size 0x188 (Full Size[0x6a8] - InheritedSize[0x520]
class CaptainsBookcase: public ModalInteractionProxy
{
public:
	char                                                         pad0x8_4ZJW3[0x8];                                 // 0x520(0x8)
	struct FName                                                 IndicatorMaterialParamName;                        // 0x528(0x8)
	TArray<struct IndicatorSettings>                             IndicatorSettings;                                 // 0x530(0x10)
	TArray<struct FullnessData>                                  FullnessData;                                      // 0x540(0x10)
	char                                                         pad0x158_CJY18[0x158];                             // 0x550(0x158)
};


// Size 0x0 (Full Size[0x520] - InheritedSize[0x520]
class MermaidInteractionProxy: public ModalInteractionProxy
{
public:
};


// Size 0x0 (Full Size[0x6b0] - InheritedSize[0x6b0]
class Sovereign: public CompanyShopkeeper
{
public:
};


// Size 0xd0 (Full Size[0x780] - InheritedSize[0x6b0]
class TavernStrangerNPC: public CompanyShopkeeper
{
public:
	Class TavernStrangersBarrel*                                 OwnedBarrelMeshActor;                              // 0x6b0(0x8)
	bool                                                         StrangerControlsBarrelVisibility;                  // 0x6b8(0x1)
	char                                                         pad0x7_2LL1V[0x7];                                 // 0x6b9(0x7)
	Class AthenaPlayerController*                                RegisteredController;                              // 0x6c0(0x8)
	char                                                         pad0x8_7V7K0[0x8];                                 // 0x6c8(0x8)
	Struct ObjectMessagingHandle                                 ShowNPCEventHandle;                                // 0x6d0(0x58)
	Struct ObjectMessagingHandle                                 ResetNPCEventHandle;                               // 0x728(0x58)
};


// Size 0xb8 (Full Size[0x838] - InheritedSize[0x780]
class TutorialTavernStrangerNPC: public TavernStrangerNPC
{
public:
	char                                                         pad0x18_KBOFO[0x18];                               // 0x780(0x18)
	Struct StringAssetReference                                  AnimationData;                                     // 0x798(0x10)
	Class WwiseObjectPoolWrapper*                                SummonSFXPool;                                     // 0x7a8(0x8)
	Class WwiseEvent*                                            SummonSFX;                                         // 0x7b0(0x8)
	Struct WwiseEmitter                                          SummonEmitter;                                     // 0x7b8(0x20)
	Struct ObjectMessagingHandle                                 PlaySummonSFXEventHandle;                          // 0x7d8(0x58)
	char                                                         pad0x8_376SE[0x8];                                 // 0x830(0x8)
};


// Size 0x120 (Full Size[0x7c8] - InheritedSize[0x6a8]
class CutsceneLockNPC: public NPC
{
public:
	char                                                         pad0x8_5CGID[0x8];                                 // 0x6a8(0x8)
	Class LockComponent*                                         LockComponent;                                     // 0x6b0(0x8)
	Class CutsceneComponent*                                     CutsceneComponent;                                 // 0x6b8(0x8)
	Class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x6c0(0x8)
	struct FName                                                 OnLockOpenedCutscene;                              // 0x6c8(0x8)
	Struct FText                                                 TakeKeyInteractionText;                            // 0x6d0(0x38)
	bool                                                         KeyTaken;                                          // 0x708(0x1)
	char                                                         pad0x7_VZ2HV[0x7];                                 // 0x709(0x7)
	TArray<struct SetHiddenData>                                 SetHiddenData;                                     // 0x710(0x10)
	char                                                         pad0xa8_PI3Z3[0xa8];                               // 0x720(0xa8)
};


// Size 0x8 (Full Size[0x6b0] - InheritedSize[0x6a8]
class Shipwright: public NPC
{
public:
	struct FName                                                 InteractionSocket;                                 // 0x6a8(0x8)
};


// Size 0x0 (Full Size[0x6a8] - InheritedSize[0x6a8]
class Shopkeeper: public NPC
{
public:
};


// Size 0x80 (Full Size[0x5a0] - InheritedSize[0x520]
class PossessionsChest: public ModalInteractionProxy
{
public:
	Struct FText                                                 Name;                                              // 0x520(0x38)
	struct FName                                                 InteractionFeatureGuard;                           // 0x558(0x8)
	Class WwiseEvent*                                            BeginInteractionSfx;                               // 0x560(0x8)
	Class WwiseEvent*                                            EndInteractionSfx;                                 // 0x568(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x570(0x8)
	char                                                         pad0x28_7OGA9[0x28];                               // 0x578(0x28)
};


// Size 0x68 (Full Size[0x608] - InheritedSize[0x5a0]
class ShipCustomizationChest: public PossessionsChest
{
public:
	Class SphereComponent*                                       ShipInteractionRadius;                             // 0x5a0(0x8)
	float                                                        MaxShipSpeedXY;                                    // 0x5a8(0x4)
	char                                                         pad0x3c_X1S5S[0x3c];                               // 0x5ac(0x3c)
	bool                                                         DisableShipCheckRestrictions;                      // 0x5e8(0x1)
	char                                                         pad0x7_ATP32[0x7];                                 // 0x5e9(0x7)
	TArray<struct CrewMembersInteracting>                        CrewMembersInteracting;                            // 0x5f0(0x10)
	class                                                        CaptaincyInteractionType;                          // 0x600(0x8)
};


// Size 0x18 (Full Size[0x620] - InheritedSize[0x608]
class ShipFlagCustomizationChest: public ShipCustomizationChest
{
public:
	Class Actor*                                                 ParentActor;                                       // 0x608(0x8)
	char                                                         pad0x10_D6GUK[0x10];                               // 0x610(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageProposalContainerInterface: public Interface
{
public:
};


// Size 0x2a0 (Full Size[0x7c0] - InheritedSize[0x520]
class VoyageProposalContainer: public ModalInteractionProxy
{
public:
	char                                                         pad0x20_NE9A0[0x20];                               // 0x520(0x20)
	struct FName                                                 VoyageSelectionVoteTag;                            // 0x540(0x8)
	struct FName                                                 VoyageCancelVoteTag;                               // 0x548(0x8)
	struct FName                                                 TaleSelectionVoteTag;                              // 0x550(0x8)
	struct FName                                                 TaleCancelVoteTag;                                 // 0x558(0x8)
	struct FName                                                 AdventureCancelVoteTag;                            // 0x560(0x8)
	bool                                                         CancelExistingPrimaryVoyages;                      // 0x568(0x1)
	char                                                         pad0x7_3SBE3[0x7];                                 // 0x569(0x7)
	Struct FString                                               VoyageDescAssetString;                             // 0x570(0x10)
	Struct FString                                               OptionalMapTableVoyageDescOverride;                // 0x580(0x10)
	Class VoyageDescDataAsset*                                   VoyageDescAsset;                                   // 0x590(0x8)
	Class IslandEventComponent*                                  IslandEventComponent;                              // 0x598(0x8)
	Class CrewShipManifest*                                      CrewShipManifest;                                  // 0x5a0(0x8)
	char                                                         pad0x10_TB0L3[0x10];                               // 0x5a8(0x10)
	TArray<class Actor*>                                         VoyageSelectionVotableObjectViews;                 // 0x5b8(0x10)
	Class Actor*                                                 VoyageCancelVotableObjectView;                     // 0x5c8(0x8)
	TArray<class CrewShipManifest*>                              TaleManifests;                                     // 0x5d0(0x10)
	Class Actor*                                                 TaleCancelVotableObjectView;                       // 0x630(0x8)
	Class Actor*                                                 AdventureCancelVotableObjectView;                  // 0x638(0x8)
	char                                                         pad0x180_TVXMS[0x180];                             // 0x640(0x180)
};


// Size 0x108 (Full Size[0x8c8] - InheritedSize[0x7c0]
class VoyageTable: public VoyageProposalContainer
{
public:
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x7c0(0x8)
	Class GenericPartDescAsset*                                  DescToSetWhenSafe;                                 // 0x7c8(0x8)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x7d0(0x8)
	Class StaticMeshMemoryConstraintComponent*                   CachedMeshMemoryConstraintComponent;               // 0x7d8(0x8)
	char                                                         pad0xe8_UQXT1[0xe8];                               // 0x7e0(0xe8)
};


// Size 0xf0 (Full Size[0x4b8] - InheritedSize[0x3c8]
class ModifyPlayerMovementOverlapActor: public Actor
{
public:
	char                                                         pad0x8_8WS7N[0x8];                                 // 0x3c8(0x8)
	Class StaticMeshComponent*                                   MeshOverlapVolume;                                 // 0x3d0(0x8)
	Class BoxComponent*                                          BoxOverlapVolume;                                  // 0x3d8(0x8)
	byte                                                         OverlapToUse;                                      // 0x3e0(0x1)
	char                                                         pad0x3_M9EEQ[0x3];                                 // 0x3e1(0x3)
	float                                                        MaxSpeedScalar;                                    // 0x3e4(0x4)
	bool                                                         DisableSprint;                                     // 0x3e8(0x1)
	bool                                                         DisableJump;                                       // 0x3e9(0x1)
	bool                                                         DisableSwimming;                                   // 0x3ea(0x1)
	char                                                         pad0x5_ZGGUH[0x5];                                 // 0x3eb(0x5)
	Class SceneComponent*                                        Root;                                              // 0x3f0(0x8)
	Class PrimitiveComponent*                                    OverlapVolume;                                     // 0x3f8(0x8)
	char                                                         pad0xb8_S5MZQ[0xb8];                               // 0x400(0xb8)
};


// Size 0x10 (Full Size[0x2b0] - InheritedSize[0x2a0]
class MountedWeaponAimAndFireInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
};


// Size 0x30 (Full Size[0x2e0] - InheritedSize[0x2b0]
class CannonInputComponent: public MountedWeaponAimAndFireInputComponent
{
public:
};


// Size 0x8 (Full Size[0x2b8] - InheritedSize[0x2b0]
class HarpoonInputComponent: public MountedWeaponAimAndFireInputComponent
{
public:
	Class HarpoonLauncher*                                       HarpoonLauncher;                                   // 0x2b0(0x8)
};


// Size 0x200 (Full Size[0x668] - InheritedSize[0x468]
class MountpointActor: public InteractableObject
{
public:
	char                                                         pad0x10_0GPU6[0x10];                               // 0x468(0x10)
	Class InterpolatingMountpointComponent*                      MountpointComponent;                               // 0x478(0x8)
	Class CapsuleComponent*                                      OverlapBroadcasterShapeComponent;                  // 0x480(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x488(0x8)
	Class StaticMeshComponent*                                   MountedMeshComponent;                              // 0x490(0x8)
	Class StaticMeshComponent*                                   ExtraRotationMountedMeshComponent;                 // 0x498(0x8)
	class                                                        PressedNotificationInputId;                        // 0x4a0(0x8)
	class                                                        ReleasedNotificationInputId;                       // 0x4a8(0x8)
	float                                                        InputHoldTime;                                     // 0x4b0(0x4)
	char                                                         pad0x4_FGAUZ[0x4];                                 // 0x4b4(0x4)
	Struct FText                                                 MountVerb;                                         // 0x4b8(0x38)
	Struct FText                                                 UnmountVerb;                                       // 0x4f0(0x38)
	bool                                                         IsNothingToMountTooltipEnabled;                    // 0x528(0x1)
	char                                                         pad0x7_UK1S9[0x7];                                 // 0x529(0x7)
	Struct FText                                                 NothingToMountDescription;                         // 0x530(0x38)
	TArray<struct DetachInteractionPoints>                       DetachInteractionPoints;                           // 0x568(0x10)
	float                                                        DetachInteractionPointRadius;                      // 0x578(0x4)
	float                                                        DetachInteractionMaxDistance;                      // 0x57c(0x4)
	float                                                        AttachInteractionMaxDistance;                      // 0x580(0x4)
	bool                                                         UnmountIfOwnerShipSinks;                           // 0x584(0x1)
	bool                                                         UseClosestMountableToInteractor;                   // 0x585(0x1)
	char                                                         pad0xe2_DHURY[0xe2];                               // 0x586(0xe2)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MoveToLocationActionStateId: public ActionStateId
{
public:
};


// Size 0x150 (Full Size[0x930] - InheritedSize[0x7e0]
class MusicalInstrument: public WieldableItem
{
public:
	char                                                         pad0x10_YMVUS[0x10];                               // 0x7e0(0x10)
	byte                                                         InstrumentType;                                    // 0x7f0(0x1)
	char                                                         pad0x7_G7537[0x7];                                 // 0x7f1(0x7)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	float                                                        PlayingCoolDownTime;                               // 0x800(0x4)
	struct FName                                                 InstrumentDrunkennessRtpc;                         // 0x804(0x8)
	struct FName                                                 InstrumentUnderwaterRtpc;                          // 0x80c(0x8)
	float                                                        MaxUnderwaterRtpcFactor;                           // 0x814(0x4)
	float                                                        MinUnderwaterRtpcFactor;                           // 0x818(0x4)
	float                                                        PlayingAINoiseRange;                               // 0x81c(0x4)
	float                                                        AINoiseEventInterval;                              // 0x820(0x4)
	char                                                         pad0x4_BUZNE[0x4];                                 // 0x824(0x4)
	class                                                        TriggerEffectActor;                                // 0x828(0x8)
	char                                                         pad0x8_CN29K[0x8];                                 // 0x830(0x8)
	Class AthenaPlayerCharacter*                                 AthenaPlayerCharacter;                             // 0x838(0x8)
	char                                                         pad0xf0_SD25O[0xf0];                               // 0x840(0xf0)
};


// Size 0x0 (Full Size[0x930] - InheritedSize[0x930]
class MusicalInstrumentStaticMesh: public MusicalInstrument
{
public:
};


// Size 0x0 (Full Size[0x930] - InheritedSize[0x930]
class MusicalInstrumentSkeletalMesh: public MusicalInstrument
{
public:
};


// Size 0x120 (Full Size[0x4e8] - InheritedSize[0x3c8]
class MusicalTrigger: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
	Class SphereComponent*                                       InnerRadiusTriggerComponent;                       // 0x3d0(0x8)
	Class SphereComponent*                                       OuterRadiusTriggerComponent;                       // 0x3d8(0x8)
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3e0(0x8)
	TArray<struct ReactionEventsPreparingToTriggerMechanism>     ReactionEventsPreparingToTriggerMechanism;         // 0x3e8(0x10)
	TArray<struct ReactionEventsCancel>                          ReactionEventsCancel;                              // 0x3f8(0x10)
	Class WorldRegionComponent*                                  ShantyWorldRegionComponent;                        // 0x408(0x8)
	Class WwiseEvent*                                            PlayMagicEvent;                                    // 0x410(0x8)
	Class WwiseEvent*                                            StopMagicEvent;                                    // 0x418(0x8)
	bool                                                         PlayEmitterOnMechanism;                            // 0x420(0x1)
	char                                                         pad0x7_CHEX8[0x7];                                 // 0x421(0x7)
	Struct WwiseEmitter                                          ShantyMagicEmitter;                                // 0x428(0x20)
	float                                                        DelayBeforeMechanismTrigger;                       // 0x448(0x4)
	char                                                         pad0x4_QNMJJ[0x4];                                 // 0x44c(0x4)
	TArray<class SwitchMechanismTrigger*>                        SwitchesToSyncTo;                                  // 0x450(0x10)
	Class LandmarkReactionPlayer*                                ReactionEventPlayer;                               // 0x460(0x8)
	TArray<class Actor*>                                         ActorsPlayingInstruments;                          // 0x468(0x10)
	TArray<Interface AssociatedMechanismActions>                 AssociatedMechanismActions;                        // 0x478(0x10)
	char                                                         pad0x48_5LOC6[0x48];                               // 0x488(0x48)
	byte                                                         MusicalTriggerState;                               // 0x4d0(0x1)
	char                                                         pad0x7_NYVK0[0x7];                                 // 0x4d1(0x7)
	TArray<class Actor*>                                         AssociatedMechanismActionActors;                   // 0x4d8(0x10)
};


// Size 0x68 (Full Size[0x4d0] - InheritedSize[0x468]
class MusicBox: public InteractableObject
{
public:
	Class InteractableComponent*                                 InteractableComponent;                             // 0x468(0x8)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x470(0x8)
	Class SkeletalMeshComponent*                                 MeshComponent;                                     // 0x478(0x8)
	Class WwiseEvent*                                            SfxMusic;                                          // 0x480(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x488(0x8)
	struct FName                                                 SfxEmitterName;                                    // 0x490(0x8)
	bool                                                         IsPlaying;                                         // 0x498(0x1)
	char                                                         pad0x37_XLSA6[0x37];                               // 0x499(0x37)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class MutateCollectorsChestStep: public TaleQuestStep
{
public:
};


// Size 0x68 (Full Size[0x100] - InheritedSize[0x98]
class AddItemsToCollectorsChestStep: public MutateCollectorsChestStep
{
public:
	Class MutateCollectorsChestStepDesc*                         Desc;                                              // 0x98(0x8)
	Class FillCollectorsChestWithItemsDataAsset*                 ItemData;                                          // 0xa0(0x8)
	char                                                         pad0x58_HICBW[0x58];                               // 0xa8(0x58)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class AddItemToCollectorsChestStep: public MutateCollectorsChestStep
{
public:
	Class AddItemToCollectorsChestStepDesc*                      Desc;                                              // 0x98(0x8)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class WaitForCrewToCollectCollectorsChestPagesStep: public MutateCollectorsChestStep
{
public:
	Class WaitForCrewToCollectCollectorsChestPagesStepDesc*      StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x8_10UMM[0x8];                                 // 0xa0(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class MutateCollectorsChestStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    CollectorsChest;                                   // 0x80(0x30)
};


// Size 0x40 (Full Size[0xf0] - InheritedSize[0xb0]
class AddItemsFromDataToCollectorsChestStepBaseDesc: public MutateCollectorsChestStepDesc
{
public:
	bool                                                         TrackItems;                                        // 0xb0(0x1)
	bool                                                         MarkItemsAsCritical;                               // 0xb1(0x1)
	char                                                         pad0x6_IXKD7[0x6];                                 // 0xb2(0x6)
	Struct FText                                                 CriticalActorLostMessage;                          // 0xb8(0x38)
};


// Size 0x30 (Full Size[0x120] - InheritedSize[0xf0]
class AddItemsFromDataToCollectorsChestStepDesc: public AddItemsFromDataToCollectorsChestStepBaseDesc
{
public:
	Struct QuestVariableDataAsset                                ItemData;                                          // 0xf0(0x30)
};


// Size 0xa0 (Full Size[0x150] - InheritedSize[0xb0]
class AddItemToCollectorsChestStepDesc: public MutateCollectorsChestStepDesc
{
public:
	Struct QuestVariableClass                                    ItemToStore;                                       // 0xb0(0x30)
	Struct QuestVariableActor                                    SpawnedItemInStorage;                              // 0xe0(0x30)
	bool                                                         TrackItem;                                         // 0x110(0x1)
	bool                                                         MarkItemAsCritical;                                // 0x111(0x1)
	char                                                         pad0x6_A5G6G[0x6];                                 // 0x112(0x6)
	Struct FText                                                 CriticalActorLostMessage;                          // 0x118(0x38)
};


// Size 0x30 (Full Size[0xe0] - InheritedSize[0xb0]
class WaitForCrewToCollectCollectorsChestPagesStepDesc: public MutateCollectorsChestStepDesc
{
public:
	Struct QuestVariablePlayerActor                              CollectingPlayer;                                  // 0xb0(0x30)
};


// Size 0x88 (Full Size[0x100] - InheritedSize[0x78]
class MysteriousNotesRadialContentRule: public RadialContentRule
{
public:
	float                                                        RadialIconScale;                                   // 0x78(0x4)
	Struct Vector2D                                              RadialIconOffset;                                  // 0x7c(0x8)
	char                                                         pad0x54_3TLIR[0x54];                               // 0x84(0x54)
	TArray<struct MappedNoteIDs>                                 MappedNoteIDs;                                     // 0xd8(0x10)
	char                                                         pad0x18_95X5H[0x18];                               // 0xe8(0x18)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class NamedContextualOpenRadialAction: public OpenRadialAction
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NervousAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class NoiseMakerComponentParams: public DataAsset
{
public:
	float                                                        TriggerRadiusAroundNoiseMaker;                     // 0x28(0x4)
	char                                                         pad0x4_6XTJ9[0x4];                                 // 0x2c(0x4)
	Class WwiseEvent*                                            LocalNoiseMakerFoliagePlay;                        // 0x30(0x8)
	Class WwiseEvent*                                            LocalNoiseMakerFoliageStop;                        // 0x38(0x8)
	struct FName                                                 LocalSpeedRtpc;                                    // 0x40(0x8)
	Class WwiseEvent*                                            SimulatedCharacterFoliagePlay;                     // 0x48(0x8)
	Class WwiseEvent*                                            SimulatedCharacterFoliageStop;                     // 0x50(0x8)
	struct FName                                                 SimulatedCharacterSpeedRtpc;                       // 0x58(0x8)
	struct FName                                                 ProximityRtpc;                                     // 0x60(0x8)
};


// Size 0x40 (Full Size[0x350] - InheritedSize[0x310]
class NoiseMakerComponent: public WwiseEmitterComponent
{
public:
	Class NoiseMakerComponentParams*                             NoiseMakerComponentParams;                         // 0x310(0x8)
	char                                                         pad0x38_FDST8[0x38];                               // 0x318(0x38)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NoiseMakerControllerParams: public DataAsset
{
public:
	float                                                        LookupRadiusAroundListener;                        // 0x28(0x4)
	int                                                          MaxAmountOfRemoteNoiseMakers;                      // 0x2c(0x4)
	TArray<class WwiseObjectPoolWrapper*>                        WwiseFoliagePoolWrappers;                          // 0x30(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NonCrewVoiceMuteStateToggleNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x30 (Full Size[0xa8] - InheritedSize[0x78]
class NonVerbalRadialContentRule: public RadialContentRule
{
public:
	Class RadialAction*                                          PrimaryActionSlot;                                 // 0x78(0x8)
	Class RadialAction*                                          SecondaryActionSlot;                               // 0x80(0x8)
	Class RadialAction*                                          TertiaryActionSlot;                                // 0x88(0x8)
	Class RadialAction*                                          QuaternaryActionSlot;                              // 0x90(0x8)
	char                                                         pad0x4_ESLZL[0x4];                                 // 0x98(0x4)
	float                                                        RadialTextScale;                                   // 0x9c(0x4)
	Struct Vector2D                                              RadialTextOffset;                                  // 0xa0(0x8)
};


// Size 0x20 (Full Size[0xc8] - InheritedSize[0xa8]
class ControllableObjectNonVerbalContentRule: public NonVerbalRadialContentRule
{
public:
	Class PhrasesRadialDataAsset*                                CurrentPhrases;                                    // 0xa8(0x8)
	char                                                         pad0x10_KIFW9[0x10];                               // 0xb0(0x10)
	Class Object*                                                ControlledObject;                                  // 0xc0(0x8)
};


// Size 0x8 (Full Size[0xb0] - InheritedSize[0xa8]
class QuickAccessNonVerbalRadialContentRule: public NonVerbalRadialContentRule
{
public:
	Class NonVerbalRadialDataAsset*                              CurrentPhrases;                                    // 0xa8(0x8)
};


// Size 0x8 (Full Size[0xb0] - InheritedSize[0xa8]
class StrategyNonVerbalRadialContentRule: public NonVerbalRadialContentRule
{
public:
	Class NonVerbalRadialDataAsset*                              CurrentPhrases;                                    // 0xa8(0x8)
};


// Size 0x8 (Full Size[0xb0] - InheritedSize[0xa8]
class WieldedItemNonVerbalRadialContentRule: public NonVerbalRadialContentRule
{
public:
	Class PhrasesRadialDataAsset*                                CurrentPhrases;                                    // 0xa8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NotificationMessagesDataAsset: public DataAsset
{
public:
	TArray<struct FText>                                         NotificationMessages;                              // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NotInActionStateRadialContext: public RadialContextBase
{
public:
	TArray<class Class*>                                         TargetActionStates;                                // 0x28(0x10)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class NPCCustomAnimationDataAsset: public DataAsset
{
public:
	char                                                         pad0x8_JOE2L[0x8];                                 // 0x28(0x8)
	Struct NPCCustomAnimationDataStructure                       NPCCustomAnimationData;                            // 0x30(0x38)
};


// Size 0x220 (Full Size[0x660] - InheritedSize[0x440]
class NPCAnimInstance: public AnimInstance
{
public:
	char                                                         pad0x30_H9P2N[0x30];                               // 0x440(0x30)
	Class Actor*                                                 LeftHandObject;                                    // 0x470(0x8)
	Class Actor*                                                 RightHandObject;                                   // 0x478(0x8)
	Class NPCHeldObjectData*                                     HeldObjectList;                                    // 0x480(0x8)
	Class SkeletalMeshComponent*                                 NPCSkeletalMesh;                                   // 0x488(0x8)
	TArray<class Actor*>                                         InitialSpawnedCosmeticItems;                       // 0x490(0x10)
	Struct HitReactionAnimationState                             HitReactionState;                                  // 0x4a0(0x28)
	Struct HitReactionAnimationData                              HitReactionData;                                   // 0x4c8(0x8)
	bool                                                         LookAtActive;                                      // 0x4d0(0x1)
	bool                                                         CustomAnimationLookAtActive;                       // 0x4d1(0x1)
	char                                                         pad0x2_GMJ13[0x2];                                 // 0x4d2(0x2)
	float                                                        LookAtIKAlpha;                                     // 0x4d4(0x4)
	float                                                        LookAtEnabledInterpolationTime;                    // 0x4d8(0x4)
	float                                                        LookAtDisabledInterpolationTime;                   // 0x4dc(0x4)
	bool                                                         DisableLookAt;                                     // 0x4e0(0x1)
	char                                                         pad0x7_8F8CU[0x7];                                 // 0x4e1(0x7)
	Class NPCCustomAnimationDataAsset*                           NPCCustomAnimationData;                            // 0x4e8(0x8)
	Struct NPCCustomAnimationBlueprintData                       NPCCustomAnimationBlueprintData;                   // 0x4f0(0x68)
	bool                                                         InitialSpawnedCosmeticItemsActive;                 // 0x558(0x1)
	char                                                         pad0x7_FGXCD[0x7];                                 // 0x559(0x7)
	Class AnimMontage*                                           NPCCustomAnimationCurrentMontage;                  // 0x560(0x8)
	Class AnimMontage*                                           NPCCustomAnimationCurrentFacialAdditiveMontage;    // 0x568(0x8)
	TArray<class AnimSequence*>                                  IdleVariantAnims;                                  // 0x570(0x10)
	TArray<class AnimSequence*>                                  InactiveVariantAnims;                              // 0x580(0x10)
	TArray<class AnimSequence*>                                  InteractVariantAnims;                              // 0x590(0x10)
	Struct NPCAnimationIdlesVariantStruct                        NPCAllocatedIdleAnimations;                        // 0x5a0(0x20)
	Struct NPCAnimationResponseIdlesVariantStruct                NPCAllocatedInteractResponseAnimations;            // 0x5c0(0x10)
	Class NPCInteractAnimResponseDataAsset*                      NPCInteractAnimResponseDataAsset;                  // 0x5d0(0x8)
	class                                                        CurrentInteractResponse;                           // 0x5d8(0x8)
	float                                                        InteractResponseEntryTime;                         // 0x5e0(0x4)
	bool                                                         ResetInteractResponse;                             // 0x5e4(0x1)
	bool                                                         IsReacting;                                        // 0x5e5(0x1)
	bool                                                         Active;                                            // 0x5e6(0x1)
	bool                                                         Interacting;                                       // 0x5e7(0x1)
	float                                                        DotProductFOV;                                     // 0x5e8(0x4)
	byte                                                         PreviousCustomAnimationState;                      // 0x5ec(0x1)
	bool                                                         UseLookAt;                                         // 0x5ed(0x1)
	bool                                                         SafeUseLookAt;                                     // 0x5ee(0x1)
	char                                                         pad0x1_JRDBX[0x1];                                 // 0x5ef(0x1)
	Struct Vector                                                LookAtPlayerPosition;                              // 0x5f0(0xc)
	bool                                                         PlayerCharacterIsValid;                            // 0x5fc(0x1)
	bool                                                         IsPlayingSequencerAnim;                            // 0x5fd(0x1)
	bool                                                         IsOffering;                                        // 0x5fe(0x1)
	bool                                                         IsPlayingDialogAudio;                              // 0x5ff(0x1)
	char                                                         pad0x34_PPQ8F[0x34];                               // 0x600(0x34)
	float                                                        InteractionRange;                                  // 0x634(0x4)
	Class Character*                                             PlayerCharacter;                                   // 0x638(0x8)
	char                                                         pad0x20_OS5QG[0x20];                               // 0x640(0x20)
};


// Size 0x2d8 (Full Size[0x3a0] - InheritedSize[0xc8]
class NPCDialogComponent: public ActorComponent
{
public:
	char                                                         pad0x8_UB0N3[0x8];                                 // 0xc8(0x8)
	Struct FText                                                 WelcomeMessage;                                    // 0xd0(0x38)
	Class NPCDialogTreeData*                                     Data;                                              // 0x108(0x8)
	Class NPCDialogTreeDataOptions*                              OverrideDialogData;                                // 0x110(0x8)
	Class ScriptStruct*                                          DialogBlackboardSchema;                            // 0x118(0x8)
	class                                                        InputID;                                           // 0x120(0x8)
	byte                                                         ActionDisplayPriority;                             // 0x128(0x1)
	char                                                         pad0x7_KYJQF[0x7];                                 // 0x129(0x7)
	Class WwiseObjectPoolWrapper*                                NpcDialoguePool;                                   // 0x130(0x8)
	Class WwiseEvent*                                            NpcDialogueWelcome;                                // 0x138(0x8)
	Class WwiseEvent*                                            NpcDialogueBridge;                                 // 0x140(0x8)
	Class WwiseEvent*                                            NpcDialogueGoodbye;                                // 0x148(0x8)
	bool                                                         CreateInteractionRules;                            // 0x150(0x1)
	char                                                         pad0x3_BI9WO[0x3];                                 // 0x151(0x3)
	float                                                        DialogueInputFocusTimeout;                         // 0x154(0x4)
	Struct FString                                               TelemetryKey;                                      // 0x158(0x10)
	TArray<struct NoteCompletionIdents>                          NoteCompletionIdents;                              // 0x168(0x10)
	TArray<struct StatsToFireOnDialogStart>                      StatsToFireOnDialogStart;                          // 0x178(0x10)
	TArray<class Class*>                                         ConditionalStatsToFireOnDialogStart;               // 0x188(0x10)
	char                                                         pad0x138_GDRFB[0x138];                             // 0x198(0x138)
	Class Controller*                                            InteractingController;                             // 0x2d0(0x8)
	TArray<struct DialogOptionUsageCounters>                     DialogOptionUsageCounters;                         // 0x2d8(0x10)
	TArray<Byte DialogBlackboard>                                DialogBlackboard;                                  // 0x2e8(0x10)
	char                                                         pad0x34_9459J[0x34];                               // 0x2f8(0x34)
	bool                                                         Disabled;                                          // 0x32c(0x1)
	char                                                         pad0x3_VWY3J[0x3];                                 // 0x32d(0x3)
	Struct Guid                                                  CurrentInteractionSessionId;                       // 0x330(0x10)
	int                                                          ActiveOverrideDataIndex;                           // 0x340(0x4)
	char                                                         pad0x4_OWJ99[0x4];                                 // 0x344(0x4)
	Class NPCDialogTreeData*                                     ActiveData;                                        // 0x348(0x8)
	char                                                         pad0x50_ELBKQ[0x50];                               // 0x350(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogHeader: public Object
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class NPCDialogHeaderSimple: public NPCDialogHeader
{
public:
	char                                                         pad0x8_GH57I[0x8];                                 // 0x28(0x8)
	Struct FText                                                 Text;                                              // 0x30(0x38)
	class                                                        InteractResponse;                                  // 0x68(0x8)
	Class WwiseEvent*                                            InteractAudioEvent;                                // 0x70(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class NPCDialogConditionalText: public Object
{
public:
	Struct FText                                                 Text;                                              // 0x28(0x38)
	Class NPCDialogExpression*                                   Expression;                                        // 0x60(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class NPCDialogConditionalTextHeader: public NPCDialogHeader
{
public:
	TArray<class NPCDialogConditionalText*>                      Text;                                              // 0x28(0x10)
	Struct FText                                                 DefaultText;                                       // 0x38(0x38)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class NPCDialogFormattedHeaderByCondition: public NPCDialogHeader
{
public:
	TArray<struct Substitutes>                                   Substitutes;                                       // 0x28(0x10)
	TArray<Str ExpectedParameters>                               ExpectedParameters;                                // 0x38(0x10)
	Struct FText                                                 FormattedText;                                     // 0x48(0x38)
	Struct FText                                                 DefaultText;                                       // 0x80(0x38)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class NPCDialogHeaderByCondition: public NPCDialogHeader
{
public:
	char                                                         pad0x8_4HBBM[0x8];                                 // 0x28(0x8)
	TArray<struct Text>                                          Text;                                              // 0x30(0x10)
	Struct FText                                                 DefaultText;                                       // 0x40(0x38)
	class                                                        DefaultInteractResponse;                           // 0x78(0x8)
	Class WwiseEvent*                                            DefaultInteractionAudioEvent;                      // 0x80(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class NPCDialogHeaderByRank: public NPCDialogHeader
{
public:
	TArray<struct Text>                                          Text;                                              // 0x28(0x10)
	Struct FText                                                 DefaultText;                                       // 0x38(0x38)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class NPCDialogHeaderDynamic: public NPCDialogHeader
{
public:
	Struct FText                                                 Text;                                              // 0x28(0x38)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class NPCDialogHeaderStorageContainer: public NPCDialogHeader
{
public:
	Struct FText                                                 Text;                                              // 0x28(0x38)
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class NPCDialogOption: public Object
{
public:
	bool                                                         IsEnabled;                                         // 0x28(0x1)
	char                                                         pad0x7_3JY7L[0x7];                                 // 0x29(0x7)
	Struct FString                                               TelemetryKey;                                      // 0x30(0x10)
	TArray<struct StatsToFire>                                   StatsToFire;                                       // 0x40(0x10)
	TArray<class Class*>                                         ConditionalStatsToFire;                            // 0x50(0x10)
	TArray<class NPCDialogConditional*>                          Conditions;                                        // 0x60(0x10)
	TArray<class Class*>                                         ClientRunnables;                                   // 0x70(0x10)
	Struct StringAssetReference                                  OptionIcon;                                        // 0x80(0x10)
	Struct FText                                                 OptionIconNarrationText;                           // 0x90(0x38)
	Class WwiseEvent*                                            DialogEvent;                                       // 0xc8(0x8)
	bool                                                         ShouldIgnoreGoodbyeDialogue;                       // 0xd0(0x1)
	char                                                         pad0x7_LL986[0x7];                                 // 0xd1(0x7)
};


// Size 0x38 (Full Size[0x110] - InheritedSize[0xd8]
class NPCDialogOptionClose: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionDialogSelect: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	int                                                          LinkedDialog;                                      // 0x110(0x4)
	byte                                                         ReactionSuppression;                               // 0x114(0x1)
	char                                                         pad0x3_4POIJ[0x3];                                 // 0x115(0x3)
};


// Size 0x0 (Full Size[0x118] - InheritedSize[0x118]
class NPCDialogOptionDialogSelectDynamic: public NPCDialogOptionDialogSelect
{
public:
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionFireEvent: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	struct FName                                                 EventName;                                         // 0x110(0x8)
	bool                                                         CloseOnExecuted;                                   // 0x118(0x1)
	char                                                         pad0x3_Q942Z[0x3];                                 // 0x119(0x3)
	int                                                          LinkedDialog;                                      // 0x11c(0x4)
	bool                                                         RelevantOnServer;                                  // 0x120(0x1)
	char                                                         pad0x7_JD0K5[0x7];                                 // 0x121(0x7)
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionFireNPCDialogInteraction: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	bool                                                         CloseOnExecuted;                                   // 0x110(0x1)
	char                                                         pad0x7_9395X[0x7];                                 // 0x111(0x7)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionFireTutorialDialogOptionSelectedEvent: public NPCDialogOption
{
public:
	byte                                                         TutorialDialogOption;                              // 0xd8(0x1)
	char                                                         pad0x7_3KFJI[0x7];                                 // 0xd9(0x7)
	Struct FText                                                 Text;                                              // 0xe0(0x38)
	bool                                                         CloseOnExectuted;                                  // 0x118(0x1)
	char                                                         pad0x3_3O0S2[0x3];                                 // 0x119(0x3)
	int                                                          LinkedDialog;                                      // 0x11c(0x4)
	bool                                                         RelevantOnServer;                                  // 0x120(0x1)
	char                                                         pad0x7_ZOF82[0x7];                                 // 0x121(0x7)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionFireTutorialEvent: public NPCDialogOption
{
public:
	byte                                                         TutorialStep;                                      // 0xd8(0x1)
	char                                                         pad0x7_7ANLE[0x7];                                 // 0xd9(0x7)
	Struct FText                                                 Text;                                              // 0xe0(0x38)
	bool                                                         CloseOnExectuted;                                  // 0x118(0x1)
	char                                                         pad0x3_VSKUG[0x3];                                 // 0x119(0x3)
	int                                                          LinkedDialog;                                      // 0x11c(0x4)
	bool                                                         RelevantOnServer;                                  // 0x120(0x1)
	char                                                         pad0x7_P1CJG[0x7];                                 // 0x121(0x7)
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionGiveClue: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	int                                                          LinkedDialog;                                      // 0x110(0x4)
	char                                                         pad0x4_X2D4Q[0x4];                                 // 0x114(0x4)
};


// Size 0x68 (Full Size[0x140] - InheritedSize[0xd8]
class NPCDialogOptionGiveItem: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	class                                                        ItemClassToBeGiven;                                // 0x110(0x8)
	int                                                          LinkedDialog;                                      // 0x118(0x4)
	char                                                         pad0x24_KVAPZ[0x24];                               // 0x11c(0x24)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionGiveMap: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	Class VoyageRecipeDataAsset*                                 VoyageRecipe;                                      // 0x110(0x8)
	int                                                          LinkedDialog;                                      // 0x118(0x4)
	int                                                          NumberOfUses;                                      // 0x11c(0x4)
	int                                                          NumTimesUsed;                                      // 0x120(0x4)
	char                                                         pad0x4_980I3[0x4];                                 // 0x124(0x4)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionGiveReward: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	Struct RewardId                                              RewardId;                                          // 0x110(0x8)
	class                                                        Company;                                           // 0x118(0x8)
	int                                                          LinkedDialog;                                      // 0x120(0x4)
	char                                                         pad0x4_ZAIOD[0x4];                                 // 0x124(0x4)
};


// Size 0x180 (Full Size[0x258] - InheritedSize[0xd8]
class NPCDialogOptionMultiShop: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	byte                                                         MultiShopTypeValue;                                // 0x110(0x1)
	char                                                         pad0x7_BS56V[0x7];                                 // 0x111(0x7)
	Class NPCDialogOptionMultiShopResponseListDataAsset*         UIShopDescResponseList;                            // 0x118(0x8)
	Class Controller*                                            Interactor;                                        // 0x120(0x8)
	char                                                         pad0x130_9D7KD[0x130];                             // 0x128(0x130)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TalkToNPCActionStateId: public ActionStateId
{
public:
};


// Size 0x70 (Full Size[0x148] - InheritedSize[0xd8]
class NPCDialogOptionNoUIPurchase: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	Struct Guid                                                  CatalogId;                                         // 0x110(0x10)
	Struct Guid                                                  OfferId;                                           // 0x120(0x10)
	Class PopUpMessageDesc*                                      OfferTriggeredPopupDesc;                           // 0x130(0x8)
	Class Controller*                                            Interactor;                                        // 0x138(0x8)
	char                                                         pad0x8_5E9B0[0x8];                                 // 0x140(0x8)
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class NPCDialogOptionRefillTankard: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	int                                                          LinkedDialog;                                      // 0x110(0x4)
	char                                                         pad0x4_WTKZ7[0x4];                                 // 0x114(0x4)
};


// Size 0xc8 (Full Size[0x1a0] - InheritedSize[0xd8]
class NPCDialogOptionReputationMenu: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	byte                                                         NavigationAction;                                  // 0x110(0x1)
	char                                                         pad0x7_DS0EP[0x7];                                 // 0x111(0x7)
	Struct FString                                               CompanyId;                                         // 0x118(0x10)
	Class Controller*                                            Interactor;                                        // 0x128(0x8)
	char                                                         pad0x70_THT2D[0x70];                               // 0x130(0x70)
};


// Size 0x10 (Full Size[0xe8] - InheritedSize[0xd8]
class NPCDialogOptionRestoreShip: public NPCDialogOption
{
public:
	float                                                        RestorationDistance;                               // 0xd8(0x4)
	char                                                         pad0x4_N3ZWU[0x4];                                 // 0xdc(0x4)
	Class ShipRestorationSettings*                               RestorationSettings;                               // 0xe0(0x8)
};


// Size 0x38 (Full Size[0x110] - InheritedSize[0xd8]
class NPCDialogOptionSellBooty: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
};


// Size 0xb8 (Full Size[0x190] - InheritedSize[0xd8]
class NPCDialogOptionShop: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	Class ShopDesc*                                              ShopDesc;                                          // 0x110(0x8)
	Class Controller*                                            Interactor;                                        // 0x118(0x8)
	char                                                         pad0x70_YFP03[0x70];                               // 0x120(0x70)
};


// Size 0xc0 (Full Size[0x198] - InheritedSize[0xd8]
class NPCDialogOptionShops: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	TArray<class ShopDesc*>                                      ShopDescArray;                                     // 0x110(0x10)
	Class Controller*                                            Interactor;                                        // 0x120(0x8)
	char                                                         pad0x70_BRQNM[0x70];                               // 0x128(0x70)
};


// Size 0x50 (Full Size[0x128] - InheritedSize[0xd8]
class NPCDialogOptionStartVoyageFromDesc: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	bool                                                         CloseOnExecuted;                                   // 0x110(0x1)
	char                                                         pad0x3_VM2EJ[0x3];                                 // 0x111(0x3)
	int                                                          LinkedDialog;                                      // 0x114(0x4)
	Class VoyageDescDataAsset*                                   VoyageDesc;                                        // 0x118(0x8)
	bool                                                         TrySetTaleAsCurrentlyActive;                       // 0x120(0x1)
	char                                                         pad0x7_VVR6J[0x7];                                 // 0x121(0x7)
};


// Size 0xa8 (Full Size[0x180] - InheritedSize[0xd8]
class NPCDialogOptionStorageContainerStore: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	Struct FText                                                 FullText;                                          // 0x110(0x38)
	Struct FText                                                 NoItemInInventoryText;                             // 0x148(0x38)
};


// Size 0xa8 (Full Size[0x180] - InheritedSize[0xd8]
class NPCDialogOptionStorageContainerTake: public NPCDialogOption
{
public:
	Struct FText                                                 Text;                                              // 0xd8(0x38)
	Struct FText                                                 EmptyText;                                         // 0x110(0x38)
	Struct FText                                                 NoInventorySpaceText;                              // 0x148(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PiratePreviewInterface: public Interface
{
public:
};


// Size 0xd0 (Full Size[0xf8] - InheritedSize[0x28]
class ShopDesc: public DataAsset
{
public:
	Struct FText                                                 ShopName;                                          // 0x28(0x38)
	Class CatalogDataAsset*                                      Catalog;                                           // 0x60(0x8)
	Struct ShopCatalogDesc                                       CatalogData;                                       // 0x68(0x1)
	char                                                         pad0x7_GEAQG[0x7];                                 // 0x69(0x7)
	TArray<struct Catalogs>                                      Catalogs;                                          // 0x70(0x10)
	Class PremiumCatalogDataAsset*                               PremiumCatalog;                                    // 0x80(0x8)
	TArray<struct FeatureToggledPremiumCatalogs>                 FeatureToggledPremiumCatalogs;                     // 0x88(0x10)
	Struct FString                                               Storefront;                                        // 0x98(0x10)
	Struct FString                                               OpenAudioCue;                                      // 0xa8(0x10)
	bool                                                         EnablePiratePreview;                               // 0xb8(0x1)
	bool                                                         IsPremiumShop;                                     // 0xb9(0x1)
	char                                                         pad0x6_UO9AQ[0x6];                                 // 0xba(0x6)
	Class ShopDialogue*                                          Dialogue;                                          // 0xc0(0x8)
	class                                                        Company;                                           // 0xc8(0x8)
	TArray<class Class*>                                         Categories;                                        // 0xd0(0x10)
	Struct StringAssetReference                                  AllTabIcon;                                        // 0xe0(0x10)
	byte                                                         PiratePreviewSkeletonCurseMode;                    // 0xf0(0x1)
	char                                                         pad0x7_2ESK8[0x7];                                 // 0xf1(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogOptionMultiShopResponseListDataAsset: public DataAsset
{
public:
	TArray<struct ShopTypeResponses>                             ShopTypeResponses;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogExpression: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogPredicate: public NPCDialogExpression
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateIsTrue: public NPCDialogPredicate
{
public:
	struct FName                                                 ParameterName;                                     // 0x38(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateIntEquals: public NPCDialogPredicate
{
public:
	struct FName                                                 ParameterName;                                     // 0x38(0x8)
	int                                                          Value;                                             // 0x40(0x4)
	char                                                         pad0x4_S2XEF[0x4];                                 // 0x44(0x4)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class NPCDialogPredicateEquals: public NPCDialogPredicate
{
public:
	struct FName                                                 ParameterName;                                     // 0x38(0x8)
	Struct FString                                               Value;                                             // 0x40(0x10)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class NPCDialogPredicateHasEmblem: public NPCDialogPredicate
{
public:
	struct FName                                                 EmblemName;                                        // 0x38(0x8)
	char                                                         pad0x18_D67SB[0x18];                               // 0x40(0x18)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateHasEntitlement: public NPCDialogPredicate
{
public:
	class                                                        Entitlement;                                       // 0x38(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateHasFeature: public NPCDialogPredicate
{
public:
	struct FName                                                 FeatureName;                                       // 0x38(0x8)
	char                                                         pad0x8_U2H92[0x8];                                 // 0x40(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateHasRank: public NPCDialogPredicate
{
public:
	class                                                        Rank;                                              // 0x38(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class NPCDialogPredicateHasSubsetOfEntitlements: public NPCDialogPredicate
{
public:
	TArray<class Class*>                                         EntitlementsSet;                                   // 0x38(0x10)
	int                                                          MinimumNumberSatisfied;                            // 0x48(0x4)
	char                                                         pad0x4_KNUJI[0x4];                                 // 0x4c(0x4)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateIsWearingAny: public NPCDialogPredicate
{
public:
	TArray<class Class*>                                         ClothingItems;                                     // 0x38(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class NPCDialogPredicateIsWearingAll: public NPCDialogPredicateIsWearingAny
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateOnTutorialStep: public NPCDialogPredicate
{
public:
	struct FName                                                 TutorialStepName;                                  // 0x38(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateReadAllOf: public NPCDialogPredicate
{
public:
	Struct FString                                               SectionName;                                       // 0x38(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class NPCDialogTreeData: public DataAsset
{
public:
	TArray<struct Dialogs>                                       Dialogs;                                           // 0x28(0x10)
	Struct FString                                               SourceText;                                        // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogTreeDataOptions: public DataAsset
{
public:
	TArray<struct OverrideDataForCondition>                      OverrideDataForCondition;                          // 0x28(0x10)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class NPCService: public Actor
{
public:
	char                                                         pad0x8_ZF0P0[0x8];                                 // 0x3c8(0x8)
	TArray<struct NPCData>                                       NPCData;                                           // 0x3d0(0x10)
	char                                                         pad0x18_H3FYV[0x18];                               // 0x3e0(0x18)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class NullEntitlementDesc: public EntitlementDesc
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class ObjectProximityResetComponent: public ActorComponent
{
public:
	TArray<class Actor*>                                         ResetTargets;                                      // 0xc8(0x10)
	float                                                        ObjectResetTimeout;                                // 0xf8(0x4)
	char                                                         pad0x4_H30ZW[0x4];                                 // 0xfc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObjectUtilities: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OffBottomTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OffTopTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OffworldStrainDamagerType: public DamagerType
{
public:
};


// Size 0xc8 (Full Size[0x190] - InheritedSize[0xc8]
class OnboardCharacterTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0xb8_T9STB[0xb8];                               // 0xc8(0xb8)
	TArray<Weakclass OnboardCharacters>                          OnboardCharacters;                                 // 0x180(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnboardingFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnBottomTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnBuryStrategy: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class OnBuryAdjustFuseTimeScale: public OnBuryStrategy
{
public:
	float                                                        FuseTimeScaleOnBury;                               // 0x28(0x4)
	char                                                         pad0x4_8TXM6[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnDigStrategy: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class OnDigAdjustFuseTimeScale: public OnDigStrategy
{
public:
	float                                                        FuseTimeScaleOnDigUp;                              // 0x28(0x4)
	char                                                         pad0x4_D8RUW[0x4];                                 // 0x2c(0x4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class OnDigTriggerFuse: public OnDigStrategy
{
public:
	bool                                                         OnlyIfBuriedByPlayer;                              // 0x28(0x1)
	char                                                         pad0x7_PZHAU[0x7];                                 // 0x29(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class OneShotUsableMock: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnTopTransitionLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class OnTutorialStepNPCDialogConditional: public NPCDialogConditional
{
public:
	struct FName                                                 TutorialStepName;                                  // 0x30(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class OpenChatboxNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class OpenQuickMenuNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class OtherCrewNameplatesToggleInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class OverrideProgressSpawnStep: public TaleQuestStep
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class OverrideProgressSpawnStepDesc: public TaleQuestStepDesc
{
public:
	class                                                        ProgressId;                                        // 0x80(0x8)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class PacingComponentPublicData: public DataAsset
{
public:
	Class CurveFloat*                                            PacingCameraCurve;                                 // 0x28(0x8)
	float                                                        PacingMovementSpeedModifier;                       // 0x30(0x4)
	float                                                        CameraCurveTToPlayRumble;                          // 0x34(0x4)
	float                                                        CameraCurveTToPlayFootstepSFX;                     // 0x38(0x4)
	float                                                        MinStickDeflectionToMove;                          // 0x3c(0x4)
	float                                                        CameraSpringAccel;                                 // 0x40(0x4)
	float                                                        CamPitchScalar;                                    // 0x44(0x4)
	Class ForceFeedbackEffect*                                   TakingAStepRumble;                                 // 0x48(0x8)
	Class WwiseEvent*                                            TakingAStepAudioStateEvent;                        // 0x50(0x8)
	byte                                                         HitTestTraceChannel;                               // 0x58(0x1)
	char                                                         pad0x7_K0LS2[0x7];                                 // 0x59(0x7)
};


// Size 0x128 (Full Size[0x1f0] - InheritedSize[0xc8]
class PacingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_6EZ8N[0x8];                                 // 0xc8(0x8)
	Class PacingComponentPublicData*                             PublicData;                                        // 0xd0(0x8)
	char                                                         pad0x10_I9CIS[0x10];                               // 0xd8(0x10)
	Class AthenaPlayerCharacter*                                 Player;                                            // 0xe8(0x8)
	char                                                         pad0x100_F2INN[0x100];                             // 0xf0(0x100)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class PanicTeleportVolume: public Actor
{
public:
	Class BoxComponent*                                          AreaComponent;                                     // 0x3c8(0x8)
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3d0(0x10)
	TArray<Weakclass PlayersInVolume>                            PlayersInVolume;                                   // 0x3e0(0x10)
	char                                                         pad0x8_BM7L1[0x8];                                 // 0x3f0(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PartConnectionMock: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PerformActionStatCondition: public StatCondition
{
public:
	byte                                                         RequiredTrackId;                                   // 0x28(0x1)
	char                                                         pad0x7_KR2J4[0x7];                                 // 0x29(0x7)
	class                                                        RequiredAction;                                    // 0x30(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class PerformancePetSpawnDefinitionsDataAsset: public DataAsset
{
public:
	TArray<struct PetSpawnDefinitions>                           PetSpawnDefinitions;                               // 0x28(0x10)
	Class EnvQuery*                                              SpawnQuery;                                        // 0x38(0x8)
	Class EnvQuery*                                              ShipSpawnQuery;                                    // 0x40(0x8)
	int                                                          PetCount;                                          // 0x48(0x4)
	bool                                                         SpawnPetsOnStart;                                  // 0x4c(0x1)
	char                                                         pad0x3_ZMKK8[0x3];                                 // 0x4d(0x3)
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class PerformancePetSpawnerActor: public Actor
{
public:
	Class PerformancePetSpawnDefinitionsDataAsset*               PerformancePetSpawnDefinitionsDataAsset;           // 0x3c8(0x8)
	Class Actor*                                                 ShipActor;                                         // 0x3d0(0x8)
	TArray<struct SpawnedPets>                                   SpawnedPets;                                       // 0x3d8(0x10)
	Class AIPetsOnDemandSpawner*                                 Spawner;                                           // 0x3e8(0x8)
	Class Actor*                                                 OverridePetOwner;                                  // 0x3f0(0x8)
	char                                                         pad0x8_AX7RC[0x8];                                 // 0x3f8(0x8)
};


// Size 0x60 (Full Size[0x580] - InheritedSize[0x520]
class SalvageItemSpawnComponent: public IslandItemSpawnComponent
{
public:
	TArray<struct IslandSalvageLocationData>                     IslandSalvageLocationData;                         // 0x518(0x10)
	float                                                        GlobalIslandChanceToSpawn;                         // 0x528(0x4)
	float                                                        MinimumZOffSet;                                    // 0x52c(0x4)
	float                                                        MaximumZOffset;                                    // 0x530(0x4)
	float                                                        MinimumRoll;                                       // 0x534(0x4)
	float                                                        MaximumRoll;                                       // 0x538(0x4)
	float                                                        MinimumPitch;                                      // 0x53c(0x4)
	float                                                        MaximumPitch;                                      // 0x540(0x4)
	bool                                                         SunkenItem;                                        // 0x544(0x1)
	char                                                         pad0x3_HPMKL[0x3];                                 // 0x545(0x3)
	class                                                        SpawnLocationType;                                 // 0x548(0x8)
	Struct WeightedProbabilityRangeOfRanges                      SpawnedContainerContents;                          // 0x550(0x30)
};


// Size 0x30 (Full Size[0x5b0] - InheritedSize[0x580]
class PersistentSalvageItemSpawnComponent: public SalvageItemSpawnComponent
{
public:
	float                                                        RefreshItemsRate;                                  // 0x580(0x4)
	char                                                         pad0x4_E8HV0[0x4];                                 // 0x584(0x4)
	TArray<struct CachedActors>                                  CachedActors;                                      // 0x588(0x10)
	char                                                         pad0x18_43WQ9[0x18];                               // 0x598(0x18)
};


// Size 0x0 (Full Size[0x5b0] - InheritedSize[0x5b0]
class PersistentSalvageItemSpawnComponentMock: public PersistentSalvageItemSpawnComponent
{
public:
};


// Size 0xe8 (Full Size[0x4b0] - InheritedSize[0x3c8]
class PetActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	Struct PetSpawnActionStateParams                             SpawnParams;                                       // 0x3c8(0x40)
	Struct PetDespawnActionStateParams                           DespawnParams;                                     // 0x408(0x40)
	Struct HideInObjectActionStateParams                         HideInObjectParams;                                // 0x448(0x28)
	Struct FiredFromActorActionStateParams                       FiredFromActorParams;                              // 0x470(0x28)
	char                                                         pad0x18_THH31[0x18];                               // 0x498(0x18)
};


// Size 0x1f8 (Full Size[0x5f8] - InheritedSize[0x400]
class SwitchMechanismTrigger: public InteractableBase
{
public:
	char                                                         pad0x20_T1DQH[0x20];                               // 0x400(0x20)
	Class SceneComponent*                                        Root;                                              // 0x420(0x8)
	Class SceneComponent*                                        Pivot;                                             // 0x428(0x8)
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x430(0x8)
	bool                                                         ShowSwitchInteractionPrompt;                       // 0x438(0x1)
	char                                                         pad0x7_Y6YA7[0x7];                                 // 0x439(0x7)
	Struct FText                                                 SwitchInteractionPromptText;                       // 0x440(0x38)
	Struct FText                                                 SwitchInteractionBackwardsPromptText;              // 0x478(0x38)
	Struct FText                                                 SwitchNameText;                                    // 0x4b0(0x38)
	TArray<class SwitchMechanismTrigger*>                        SwitchesToSyncTo;                                  // 0x4e8(0x10)
	bool                                                         DisableWhenActivated;                              // 0x4f8(0x1)
	bool                                                         AutoDeactivateAfterActivation;                     // 0x4f9(0x1)
	char                                                         pad0x2_E8EWO[0x2];                                 // 0x4fa(0x2)
	float                                                        TimeAfterActivationBeforeAutoDeactivating;         // 0x4fc(0x4)
	bool                                                         SelectRandomStartPositionOnSpawn;                  // 0x500(0x1)
	byte                                                         RandomStartPositionSelectionMode;                  // 0x501(0x1)
	byte                                                         SwitchMechanismTriggerRotationMode;                // 0x502(0x1)
	bool                                                         WrapSwitchAtEndPosition;                           // 0x503(0x1)
	int                                                          FixedStartPositionIndex;                           // 0x504(0x4)
	Struct MechanismFloatAnimationCurve                          PositionTransitionAnimationCurve;                  // 0x508(0x8)
	TArray<struct Positions>                                     Positions;                                         // 0x510(0x10)
	Class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x520(0x8)
	class                                                        MaterialGroup;                                     // 0x528(0x8)
	int                                                          CurrentPositionIndex;                              // 0x530(0x4)
	char                                                         pad0x74_SN9FE[0x74];                               // 0x534(0x74)
	Struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x5a8(0x50)
};


// Size 0x20 (Full Size[0x618] - InheritedSize[0x5f8]
class PetCageSwitchMechanismTrigger: public SwitchMechanismTrigger
{
public:
	char                                                         pad0x8_1M074[0x8];                                 // 0x5f8(0x8)
	Struct HangoutSpotId                                         LinkedPerchHangoutId;                              // 0x600(0x8)
	char                                                         pad0x10_RZYQV[0x10];                               // 0x608(0x10)
};


// Size 0x40 (Full Size[0x1b0] - InheritedSize[0x170]
class PetChestViewModelComponent: public PossessionsChestViewModel
{
public:
	Struct StringAssetReference                                  ClearIcon;                                         // 0x170(0x10)
	bool                                                         WithClearButtons;                                  // 0x180(0x1)
	char                                                         pad0x17_7VBOW[0x17];                               // 0x181(0x17)
	TArray<class Class*>                                         Categories;                                        // 0x198(0x10)
	bool                                                         IncludeAllCategory;                                // 0x1a8(0x1)
	char                                                         pad0x7_5U2RW[0x7];                                 // 0x1a9(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetLoadoutControlInterface: public Interface
{
public:
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class PetLoadoutComponent: public ActorComponent
{
public:
	char                                                         pad0x10_C5DQ2[0x10];                               // 0xc8(0x10)
	Struct PetLoadoutContainer                                   LoadoutContainer;                                  // 0xd8(0x20)
	Class Actor*                                                 OwningPlayer;                                      // 0xf8(0x8)
	char                                                         pad0x60_0ZMLK[0x60];                               // 0x100(0x60)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PetShopDataAsset: public DataAsset
{
public:
	TArray<struct Species>                                       Species;                                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PhotoModeToggleInputId: public NotificationInputId
{
public:
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class PhrasesRadialComponent: public ActorComponent
{
public:
	char                                                         pad0x8_EEOO2[0x8];                                 // 0xc8(0x8)
	TArray<struct DefaultPhrasesByPlayMode>                      DefaultPhrasesByPlayMode;                          // 0xd0(0x10)
	Class PhrasesRadialDataAsset*                                DefaultPhrasesRadialDataAsset;                     // 0xe0(0x8)
	Class PhrasesRadialDataAsset*                                DockablePhrasesRadialDataAsset;                    // 0xe8(0x8)
	Class PhrasesRadialDataAsset*                                WieldedItemPhrasesRadialDataAsset;                 // 0xf0(0x8)
	char                                                         pad0x38_C3CCB[0x38];                               // 0xf8(0x38)
};


// Size 0x90 (Full Size[0x670] - InheritedSize[0x5e0]
class PickupActorMock: public Character
{
public:
};


// Size 0xc0 (Full Size[0x188] - InheritedSize[0xc8]
class PioneerComponent: public ActorComponent
{
public:
	float                                                        PioneerPeriodicUpdateInterval;                     // 0xc8(0x4)
	char                                                         pad0x4_42AJF[0x4];                                 // 0xcc(0x4)
	char                                                         pad0xb8_O9Y6Z[0xb8];                               // 0xd0(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateGeneratorServiceInterface: public Interface
{
public:
};


// Size 0x688 (Full Size[0xa50] - InheritedSize[0x3c8]
class PirateGeneratorService: public Actor
{
public:
	char                                                         pad0x8_UWE1O[0x8];                                 // 0x3c8(0x8)
	int                                                          MaxConcurrent;                                     // 0x3d0(0x4)
	char                                                         pad0x4_CV5C3[0x4];                                 // 0x3d4(0x4)
	Struct StringAssetReference                                  RandomOutfitDataAssetPath;                         // 0x3d8(0x10)
	int                                                          MaxCachedMeshes;                                   // 0x3e8(0x4)
	char                                                         pad0x644_K7KBH[0x644];                             // 0x3ec(0x644)
	Class WardrobeOutfitDataAsset*                               RandomOutfitDataAsset;                             // 0xa30(0x8)
	char                                                         pad0x18_8YIXH[0x18];                               // 0xa38(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateIdentityBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class PirateLegendCategory: public CategoryBase
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class PirateLegendDesc: public EntitlementDesc
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PirateLegendSection: public DataAsset
{
public:
	byte                                                         SectionType;                                       // 0x28(0x1)
	char                                                         pad0x7_JAUG2[0x7];                                 // 0x29(0x7)
	Class TaleQuestDescAsset*                                    QuestDescription;                                  // 0x30(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class PirateLegendSectionBundle: public DataAsset
{
public:
	struct FName                                                 FeatureName;                                       // 0x28(0x8)
	TArray<struct Entries>                                       Entries;                                           // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateLegendSectionFilter: public DataAsset
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PirateLegendTypeFilter: public PirateLegendSectionFilter
{
public:
	byte                                                         AllowedType;                                       // 0x28(0x1)
	char                                                         pad0x7_ZR94F[0x7];                                 // 0x29(0x7)
};


// Size 0x448 (Full Size[0x810] - InheritedSize[0x3c8]
class PiratePreviewActor: public Actor
{
public:
	char                                                         pad0x18_0AUGS[0x18];                               // 0x3c8(0x18)
	Class CosmeticItemAnimationComponent*                        CosmeticItemAnimationComponent;                    // 0x3e0(0x8)
	Class CosmeticVfxComponent*                                  CosmeticVfxComponent;                              // 0x3e8(0x8)
	char                                                         pad0x258_IRY80[0x258];                             // 0x3f0(0x258)
	Struct PiratePreviewView                                     DelayedGenerationView;                             // 0x648(0x20)
	char                                                         pad0x88_IQVHW[0x88];                               // 0x668(0x88)
	TArray<class SceneComponent*>                                CameraLocations;                                   // 0x6f0(0x10)
	Class AnimationAsset*                                        PendingAnim;                                       // 0x700(0x8)
	Class DataAsset*                                             EmotePropData;                                     // 0x708(0x8)
	char                                                         pad0x18_6XL6K[0x18];                               // 0x710(0x18)
	TArray<class ParticleSystemComponent*>                       ParticleComponents;                                // 0x728(0x10)
	Class AnimationAsset*                                        DefaultAnimation;                                  // 0x738(0x8)
	Struct ObjectMessagingHandle                                 PreviewReadyEventHandle;                           // 0x750(0x58)
	Struct ObjectMessagingHandle                                 PreviewBusyEventHandle;                            // 0x7a8(0x58)
	float                                                        SpinPirateRate;                                    // 0x800(0x4)
	char                                                         pad0x4_9PYI0[0x4];                                 // 0x804(0x4)
	Class SkeletalMeshSocket*                                    LookAtSocket;                                      // 0x808(0x8)
};


// Size 0x1a0 (Full Size[0x2a0] - InheritedSize[0x100]
class PiratePreviewComponent: public CoherentUIGTRenderToTextureLiveView
{
public:
	char                                                         pad0x68_KE2WL[0x68];                               // 0x100(0x68)
	struct FName                                                 DefaultCamera;                                     // 0x168(0x8)
	Struct IntPoint                                              DefaultResolution;                                 // 0x190(0x8)
	Struct PiratePreviewView                                     CurrentView;                                       // 0x198(0x20)
	TArray<class Class*>                                         CurrentlySuppressedCategories;                     // 0x1b8(0x10)
	char                                                         pad0x18_RVJ6N[0x18];                               // 0x1c8(0x18)
	Class RenderToTextureSceneDetails*                           Details;                                           // 0x1e0(0x8)
	Struct ClothingLoadout                                       ClothingLoadout;                                   // 0x1e8(0x10)
	char                                                         pad0xa8_NSC04[0xa8];                               // 0x1f8(0xa8)
};


// Size 0xe0 (Full Size[0x380] - InheritedSize[0x2a0]
class PiratePreviewComponentFrontend: public PiratePreviewComponent
{
public:
	Class AnimationDataStore*                                    AnimationDataStore;                                // 0x2a0(0x8)
	TArray<struct EmoteAnimData>                                 EmoteAnimData;                                     // 0x2c8(0x10)
	Struct PirateDescription                                     CurrentPirateDescription;                          // 0x2d8(0x80)
	TArray<class Class*>                                         CurrentPirateOutfit;                               // 0x358(0x10)
	class                                                        ThirdPersonAnimSetDataId;                          // 0x368(0x8)
	Class PirateSelector*                                        PirateSelectorComponent;                           // 0x370(0x8)
	char                                                         pad0x8_AZ9PZ[0x8];                                 // 0x378(0x8)
};


// Size 0x118 (Full Size[0x3b8] - InheritedSize[0x2a0]
class PiratePreviewComponentPirateProfileRTT: public PiratePreviewComponent
{
public:
	char                                                         pad0x18_VW0O2[0x18];                               // 0x2a0(0x18)
	Class Controller*                                            OwningPlayerController;                            // 0x2b8(0x8)
	char                                                         pad0xf8_FKIWC[0xf8];                               // 0x2c0(0xf8)
};


// Size 0x178 (Full Size[0x240] - InheritedSize[0xc8]
class PirateSelector: public ActorComponent
{
public:
	TArray<class PosablePirate*>                                 QueuedPiratesToSpawn;                              // 0xc8(0x10)
	char                                                         pad0x168_DTO0P[0x168];                             // 0xd8(0x168)
};


// Size 0x0 (Full Size[0x2e0] - InheritedSize[0x2e0]
class PlanarReflectionPlaneComponent: public SceneComponent
{
public:
};


// Size 0x18 (Full Size[0xa8] - InheritedSize[0x90]
class PlantAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	float                                                        WetCooldown;                                       // 0x90(0x4)
	float                                                        WetHealPerSecond;                                  // 0x94(0x4)
	float                                                        RelativeWaterLevelToGetWet;                        // 0x98(0x4)
	float                                                        RainStrengthToGetWet;                              // 0x9c(0x4)
	float                                                        WeakMovementSpeedMultiplier;                       // 0xa0(0x4)
	char                                                         pad0x4_BVF57[0x4];                                 // 0xa4(0x4)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class PlayerAtmosphericsAudioComponentParams: public DataAsset
{
public:
	Class WwiseEvent*                                            WindStartEvent;                                    // 0x28(0x8)
	Class WwiseEvent*                                            WindStopEvent;                                     // 0x30(0x8)
	Class WwiseEvent*                                            RainStartEvent;                                    // 0x38(0x8)
	Class WwiseEvent*                                            RainStopEvent;                                     // 0x40(0x8)
	struct FName                                                 GlobalWindSpeedRtpc;                               // 0x48(0x8)
	struct FName                                                 PlayerWindAngleRtpc;                               // 0x50(0x8)
	struct FName                                                 PlayerVerticalSpeedRtpc;                           // 0x58(0x8)
	struct FName                                                 AtmosphericPressureFreqRtpc;                       // 0x60(0x8)
	struct FName                                                 AtmosphericPressureVolRtpc;                        // 0x68(0x8)
	float                                                        AtmosphericPressureFreqTimebase;                   // 0x70(0x4)
	float                                                        AtmosphericPressureVolTimebase;                    // 0x74(0x4)
	TArray<struct PoolDensityWrapperData>                        PoolDensityWrapperData;                            // 0x78(0x10)
};


// Size 0x150 (Full Size[0x430] - InheritedSize[0x2e0]
class PlayerAtmosphericsAudioComponent: public SceneComponent
{
public:
	Class PlayerAtmosphericsAudioComponentParams*                AtmosphericParams;                                 // 0x2e0(0x8)
	Struct NoiseMakerController                                  NoiseMakerController;                              // 0x2e8(0x40)
	char                                                         pad0x10_8UKTV[0x10];                               // 0x328(0x10)
	Class AthenaPlayerCharacter*                                 AthenaPlayerCharacter;                             // 0x338(0x8)
	char                                                         pad0xf0_E76WD[0xf0];                               // 0x340(0xf0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCompanyControlInterface: public Interface
{
public:
};


// Size 0x318 (Full Size[0x3e0] - InheritedSize[0xc8]
class PlayerCompanyComponent: public ActorComponent
{
public:
	char                                                         pad0x2a8_V6BHC[0x2a8];                             // 0xc8(0x2a8)
	Struct PlayerCompanyProgressCache                            CompanyProgressCache;                              // 0x370(0x58)
	Class GuildSettings*                                         GuildSettings;                                     // 0x3c8(0x8)
	char                                                         pad0x10_5ZJGV[0x10];                               // 0x3d0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProgressSpawnLocationProviderInterface: public Interface
{
public:
};


// Size 0x1d0 (Full Size[0x298] - InheritedSize[0xc8]
class PlayerCrewComponent: public ActorComponent
{
public:
	char                                                         pad0x28_ZPX1K[0x28];                               // 0xc8(0x28)
	Struct ObjectMessagingHandle                                 OnCrewSessionChangedEventHandle;                   // 0xf0(0x58)
	char                                                         pad0xa8_128PR[0xa8];                               // 0x148(0xa8)
	TArray<struct CrewMembers>                                   CrewMembers;                                       // 0x1f0(0x10)
	Struct CrewShipData                                          CrewShip;                                          // 0x200(0x5)
	Struct CrewMatchmakingVisibilityData                         CrewMatchmakingVisibility;                         // 0x205(0x3)
	Struct CrewArenaRivalVotingData                              CrewRivalVotingData;                               // 0x208(0x2)
	char                                                         pad0x6_XM96N[0x6];                                 // 0x20a(0x6)
	bool                                                         HasValidSpawnProgress;                             // 0x220(0x1)
	char                                                         pad0x7_R9DBT[0x7];                                 // 0x221(0x7)
	int                                                          TaleProgressLevel;                                 // 0x238(0x4)
	bool                                                         IsCaptainedSession;                                // 0x23c(0x1)
	bool                                                         IsCaptain;                                         // 0x23d(0x1)
	bool                                                         IsShipCustomizationCaptainOnly;                    // 0x23e(0x1)
	char                                                         pad0x1_YMTMO[0x1];                                 // 0x23f(0x1)
	Struct Guid                                                  CrewShipId;                                        // 0x240(0x10)
	char                                                         pad0x38_SJW45[0x38];                               // 0x250(0x38)
	TArray<struct StashedMaps>                                   StashedMaps;                                       // 0x288(0x10)
};


// Size 0xc0 (Full Size[0x188] - InheritedSize[0xc8]
class PlayerCurseComponent: public ActorComponent
{
public:
	Class ParticleSystem*                                        TemplateVFX;                                       // 0xc8(0x8)
	class                                                        AudioComponentClass;                               // 0xd0(0x8)
	Class WwiseEvent*                                            PlayCurseActiveAudioLoopEvent;                     // 0xd8(0x8)
	Class WwiseEvent*                                            StopCurseActiveAudioLoopEvent;                     // 0xe0(0x8)
	struct FName                                                 CurseAudioSwitchGroup;                             // 0xe8(0x8)
	TArray<struct CurseToAudioSwitchValues>                      CurseToAudioSwitchValues;                          // 0xf0(0x10)
	char                                                         pad0x18_T8XN3[0x18];                               // 0x100(0x18)
	Class ParticleSystemComponent*                               CurseVFX;                                          // 0x118(0x8)
	char                                                         pad0x50_9MHRS[0x50];                               // 0x120(0x50)
	byte                                                         ActiveCurseForFX;                                  // 0x170(0x1)
	char                                                         pad0x17_48WKI[0x17];                               // 0x171(0x17)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerEntitlementBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x3e0 (Full Size[0x4a8] - InheritedSize[0xc8]
class PlayerEntitlementComponent: public ActorComponent
{
public:
	char                                                         pad0x20_AAZFU[0x20];                               // 0xc8(0x20)
	Struct PlayerEntitlementsCompact                             ReplicatedEntitlements;                            // 0xe8(0x38)
	Struct PlayerEntitlements                                    Entitlements;                                      // 0x120(0x80)
	char                                                         pad0x28_E82Y5[0x28];                               // 0x1a0(0x28)
	TArray<class Class*>                                         AlreadyLoadedEntitlements;                         // 0x1c8(0x10)
	TArray<struct InstanceIds>                                   InstanceIds;                                       // 0x1d8(0x10)
	char                                                         pad0x238_BZDKI[0x238];                             // 0x1e8(0x238)
	TArray<Assetclass CrewTemporaryEntitlements>                 CrewTemporaryEntitlements;                         // 0x420(0x10)
	char                                                         pad0x8_GW398[0x8];                                 // 0x430(0x8)
	Class ShipMilestoneDescriptions*                             ShipMilestoneDescriptions;                         // 0x438(0x8)
	Class GuildEntitlementDescriptions*                          GuildEntitlementDescriptions;                      // 0x440(0x8)
	char                                                         pad0x60_EMZ0J[0x60];                               // 0x448(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class PlayerHeroStatsComponent: public ActorComponent
{
public:
	TArray<struct HeroStats>                                     HeroStats;                                         // 0xc8(0x10)
	TArray<Int64 ServerValues>                                   ServerValues;                                      // 0xd8(0x10)
	char                                                         pad0x58_WC1MJ[0x58];                               // 0xe8(0x58)
};


// Size 0xc8 (Full Size[0x5d8] - InheritedSize[0x510]
class PlayerLoadingInteractionPoint: public ControllableObject
{
public:
	char                                                         pad0x8_UVE0A[0x8];                                 // 0x510(0x8)
	Struct Vector                                                InteractionBounds;                                 // 0x518(0xc)
	struct FName                                                 ThirdPersonMeshSocketAttachName;                   // 0x524(0x8)
	char                                                         pad0x4_Z5G98[0x4];                                 // 0x52c(0x4)
	Struct FText                                                 LoadPlayerDisabledToolTipText;                     // 0x530(0x38)
	Struct FText                                                 LoadingDisabledToolTipText;                        // 0x568(0x38)
	class                                                        StartLoadPlayerInputId;                            // 0x5a0(0x8)
	class                                                        StartLoadItemInputId;                              // 0x5a8(0x8)
	Class LoadingPointComponent*                                 LoadingPointComponent;                             // 0x5b0(0x8)
	Class InteractableComponent*                                 InteractionRegion;                                 // 0x5b8(0x8)
	Class SceneComponent*                                        SceneComponent;                                    // 0x5c0(0x8)
	Class PlayerNameplateLocationOverrideComponent*              PlayerNameplateLocationOverrideComponent;          // 0x5c8(0x8)
	char                                                         pad0x8_E0PHD[0x8];                                 // 0x5d0(0x8)
};


// Size 0x28 (Full Size[0x78] - InheritedSize[0x50]
class PlayerLoadoutAsset: public LoadoutAsset
{
public:
	Struct ClothingLoadout                                       ClothingLoadout;                                   // 0x50(0x10)
	Struct PetLoadout                                            PetLoadout;                                        // 0x60(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerModerationServiceInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class PlayerModerationService: public Object
{
public:
};


// Size 0x168 (Full Size[0x530] - InheritedSize[0x3c8]
class PlayerManagerService: public Actor
{
public:
	char                                                         pad0x18_XNVMP[0x18];                               // 0x3c8(0x18)
	TArray<struct AllPlayerControllers>                          AllPlayerControllers;                              // 0x3e0(0x10)
	char                                                         pad0x140_95PI1[0x140];                             // 0x3f0(0x140)
};


// Size 0x1a8 (Full Size[0x270] - InheritedSize[0xc8]
class PlayerMigratableStatusComponent: public ActorComponent
{
public:
	char                                                         pad0x188_7N5I1[0x188];                             // 0xc8(0x188)
	Class Actor*                                                 CurrentShip;                                       // 0x250(0x8)
	char                                                         pad0x18_Y84Y3[0x18];                               // 0x258(0x18)
};


// Size 0x508 (Full Size[0x530] - InheritedSize[0x28]
class PlayerMusicControllerParams: public DataAsset
{
public:
	struct FName                                                 WorldRegionStateGroup;                             // 0x28(0x8)
	TArray<struct FName>                                         WorldRegionStateNames;                             // 0x30(0x10)
	Class WwiseEvent*                                            PlayerOnIslandStart;                               // 0x40(0x8)
	Class WwiseEvent*                                            PlayerOnIslandStop;                                // 0x48(0x8)
	Class WwiseEvent*                                            PlayerAtSeaStart;                                  // 0x50(0x8)
	Class WwiseEvent*                                            PlayerAtSeaStop;                                   // 0x58(0x8)
	Class WwiseEvent*                                            PlayerInCaveStart;                                 // 0x60(0x8)
	Class WwiseEvent*                                            PlayerInCaveStop;                                  // 0x68(0x8)
	Class WwiseEvent*                                            PlayerUnderwaterStart;                             // 0x70(0x8)
	Class WwiseEvent*                                            PlayerUnderwaterStop;                              // 0x78(0x8)
	float                                                        FactorForSwitchingAtSeaMoodMusicOn;                // 0x80(0x4)
	struct FName                                                 PlayerHeightRtpc;                                  // 0x84(0x8)
	char                                                         pad0x4_JOSQC[0x4];                                 // 0x8c(0x4)
	Class WwiseEvent*                                            PlayerSittingStart;                                // 0x90(0x8)
	Class WwiseEvent*                                            PlayerSittingStop;                                 // 0x98(0x8)
	TArray<struct InvasionFactionDiveEvents>                     InvasionFactionDiveEvents;                         // 0xa0(0x10)
	TArray<struct InvasionFactionEmergeEvents>                   InvasionFactionEmergeEvents;                       // 0xb0(0x10)
	struct FName                                                 BoatSpeedRtpc;                                     // 0xc0(0x8)
	float                                                        BoatSpeedRtpcMin;                                  // 0xc8(0x4)
	float                                                        BoatSpeedRtpcMax;                                  // 0xcc(0x4)
	float                                                        AtSeaAtSpeedStingCooldownMax;                      // 0xd0(0x4)
	float                                                        AtSeaAtSpeedStingCooldownMin;                      // 0xd4(0x4)
	Class WwiseEvent*                                            AtSeaAtSpeedPlay;                                  // 0xd8(0x8)
	float                                                        SailBillowStingCooldown;                           // 0xe0(0x4)
	char                                                         pad0x4_REZ11[0x4];                                 // 0xe4(0x4)
	Class WwiseEvent*                                            SailBillowOneshotPlay;                             // 0xe8(0x8)
	Class WwiseEvent*                                            SailBillowOneshotPlayMediumShip;                   // 0xf0(0x8)
	Class WwiseEvent*                                            AtSeaWildHarpaPlay;                                // 0xf8(0x8)
	Class WwiseEvent*                                            AtSeaWildHarpaStop;                                // 0x100(0x8)
	struct FName                                                 IslandRevealStateGroup;                            // 0x108(0x8)
	struct FName                                                 IslandRevealStateInitial;                          // 0x110(0x8)
	float                                                        SmallestCaveEnclosedRatio;                         // 0x118(0x4)
	float                                                        SmallestCaveSize;                                  // 0x11c(0x4)
	byte                                                         PredominantCaveSurface;                            // 0x120(0x1)
	char                                                         pad0x3_N6VIC[0x3];                                 // 0x121(0x3)
	float                                                        SkellyProximityDistance;                           // 0x124(0x4)
	int                                                          MinSkellies;                                       // 0x128(0x4)
	int                                                          MaxSkellies;                                       // 0x12c(0x4)
	Class WwiseEvent*                                            SkeletonProximityMusicStart;                       // 0x130(0x8)
	Class WwiseEvent*                                            SkeletonProximityMusicStop;                        // 0x138(0x8)
	Class WwiseEvent*                                            SkeletonPursuitMusicStart;                         // 0x140(0x8)
	Class WwiseEvent*                                            SkeletonPursuitMusicStop;                          // 0x148(0x8)
	Class WwiseEvent*                                            OceanCrawlersPursuitMusicStart;                    // 0x150(0x8)
	Class WwiseEvent*                                            OceanCrawlersPursuitMusicStop;                     // 0x158(0x8)
	Class WwiseEvent*                                            PhantomsPursuitMusicStart;                         // 0x160(0x8)
	Class WwiseEvent*                                            PhantomsPursuitMusicStop;                          // 0x168(0x8)
	struct FName                                                 ThreatAmountRtpc;                                  // 0x170(0x8)
	Class WwiseEvent*                                            AncientSkellyMusicPlay;                            // 0x178(0x8)
	Class WwiseEvent*                                            AncientSkellyMusicStop;                            // 0x180(0x8)
	Class WwiseEvent*                                            AncientSkellyDespawned;                            // 0x188(0x8)
	Class WwiseEvent*                                            AncientSkellyKilled;                               // 0x190(0x8)
	struct FName                                                 BountyQuestProgressFactor;                         // 0x198(0x8)
	Class WwiseEvent*                                            BountyQuestAnticipationStart;                      // 0x1a0(0x8)
	Class WwiseEvent*                                            BountyQuestAnticipationStop;                       // 0x1a8(0x8)
	Class WwiseEvent*                                            BountyQuestActionStart;                            // 0x1b0(0x8)
	Class WwiseEvent*                                            BountyQuestActionStop;                             // 0x1b8(0x8)
	float                                                        MinDistanceMaxVolumeCms;                           // 0x1c0(0x4)
	float                                                        MaxDistanceMinVolumeCms;                           // 0x1c4(0x4)
	struct FName                                                 BountyQuestDistanceRtpc;                           // 0x1c8(0x8)
	float                                                        FactorForChangingBountyToActionState;              // 0x1d0(0x4)
	float                                                        CooldownForAnticipationMusicRetrigger;             // 0x1d4(0x4)
	Class WwiseEvent*                                            BountyFortAnticipationStart;                       // 0x1d8(0x8)
	Class WwiseEvent*                                            BountyFortAnticipationStop;                        // 0x1e0(0x8)
	Class WwiseEvent*                                            BountyFortAnticipationStopHighString;              // 0x1e8(0x8)
	Class WwiseEvent*                                            BountyFortActionStart;                             // 0x1f0(0x8)
	Class WwiseEvent*                                            BountyFortActionStop;                              // 0x1f8(0x8)
	float                                                        FactorForChangingFortToActionState;                // 0x200(0x4)
	struct FName                                                 BountyFortSkellyProximityRtpc;                     // 0x204(0x8)
	float                                                        BountyFortSkellyProximityMax;                      // 0x20c(0x4)
	Class WwiseEvent*                                            BountyFortSkellyProximityClose;                    // 0x210(0x8)
	Class WwiseEvent*                                            SeaFortAnticipationStart;                          // 0x218(0x8)
	Class WwiseEvent*                                            SeaFortAnticipationStop;                           // 0x220(0x8)
	Class WwiseEvent*                                            SeaFortAnticipationStopHighString;                 // 0x228(0x8)
	Class WwiseEvent*                                            SeaFortActionStart;                                // 0x230(0x8)
	Class WwiseEvent*                                            SeaFortActionStop;                                 // 0x238(0x8)
	float                                                        FactorForChangingSeaFortToActionState;             // 0x240(0x4)
	char                                                         pad0x4_QW8P1[0x4];                                 // 0x244(0x4)
	Class WwiseEvent*                                            SeaFortHostileForceProximityClose;                 // 0x248(0x8)
	struct FName                                                 GlobalMusicRtpc;                                   // 0x250(0x8)
	float                                                        GlobalMusicRtpcMax;                                // 0x258(0x4)
	float                                                        GlobalMusicRtpcMin;                                // 0x25c(0x4)
	float                                                        ShipwreckProximityDistance;                        // 0x260(0x4)
	char                                                         pad0x4_HL4BG[0x4];                                 // 0x264(0x4)
	Class WwiseEvent*                                            PlayerNearShipwreckStart;                          // 0x268(0x8)
	Class WwiseEvent*                                            PlayerNearShipwreckStop;                           // 0x270(0x8)
	Class WwiseObjectPoolWrapper*                                SharkPoolForCollection;                            // 0x278(0x8)
	float                                                        SharkProximity;                                    // 0x280(0x4)
	char                                                         pad0x4_5TIQD[0x4];                                 // 0x284(0x4)
	Class WwiseEvent*                                            PlaySharkProximity;                                // 0x288(0x8)
	Class WwiseEvent*                                            StopSharkProximity;                                // 0x290(0x8)
	Class WwiseEvent*                                            PlaySharkAttackOneShot;                            // 0x298(0x8)
	struct FName                                                 SharkAttackStateGroupName;                         // 0x2a0(0x8)
	struct FName                                                 SharkAttackStatePreAttack;                         // 0x2a8(0x8)
	struct FName                                                 SharkAttackStatePostAttack;                        // 0x2b0(0x8)
	float                                                        MaxSharkHeightDelta;                               // 0x2b8(0x4)
	char                                                         pad0x4_M8FWO[0x4];                                 // 0x2bc(0x4)
	Class WwiseEvent*                                            ServerMigrationStart;                              // 0x2c0(0x8)
	Class WwiseEvent*                                            ServerMigrationStop;                               // 0x2c8(0x8)
	struct FName                                                 PotentialThreatFactorRtpc;                         // 0x2d0(0x8)
	float                                                        PotentialThreatMinDistance;                        // 0x2d8(0x4)
	float                                                        PotentialThreatMaxDistance;                        // 0x2dc(0x4)
	Class WwiseEvent*                                            PlayEdgeOfTheWorldMusic;                           // 0x2e0(0x8)
	Class WwiseEvent*                                            StopEdgeOfTheWorldMusic;                           // 0x2e8(0x8)
	struct FName                                                 EdgeOfTheWorldProximityFactorRtpc;                 // 0x2f0(0x8)
	float                                                        MaxDistanceToPlayEdgeOfTheWorldMusic;              // 0x2f8(0x4)
	float                                                        MinDistanceToPlayEdgeOfTheWorldMusic;              // 0x2fc(0x4)
	struct FName                                                 CompanyRegionStateGroup;                           // 0x300(0x8)
	TArray<struct FName>                                         CompanyRegionNames;                                // 0x308(0x10)
	Class WwiseEvent*                                            CompanyMoodStart;                                  // 0x318(0x8)
	Class WwiseEvent*                                            CompanyMoodStop;                                   // 0x320(0x8)
	TArray<struct KrakenMusicEvents>                             KrakenMusicEvents;                                 // 0x328(0x10)
	TArray<class WwiseEvent*>                                    KrakenTentacleTakeHitEvents;                       // 0x338(0x10)
	TArray<class WwiseEvent*>                                    KrakenTentacleKilledEvents;                        // 0x348(0x10)
	Class WwiseEvent*                                            KrakenHeadHitEvent;                                // 0x358(0x8)
	Struct TinySharkMusicEvent                                   TinySharkExperienceMusic;                          // 0x360(0x10)
	TArray<class Class*>                                         TinySharkPursuitStrategies;                        // 0x370(0x10)
	struct FName                                                 TinySharkAttackStateGroup;                         // 0x380(0x8)
	struct FName                                                 TinySharkAttackState;                              // 0x388(0x8)
	struct FName                                                 TinySharkCircleState;                              // 0x390(0x8)
	float                                                        TinySharkEmergeHeight;                             // 0x398(0x4)
	struct FName                                                 TinySharkSubmergedRtpc;                            // 0x39c(0x8)
	float                                                        SubmergeRtpcMin;                                   // 0x3a4(0x4)
	float                                                        SubmergeRtpcMax;                                   // 0x3a8(0x4)
	float                                                        TinySharkHealthChangeAmoutForSting;                // 0x3ac(0x4)
	Class WwiseEvent*                                            TinySharkHitSting;                                 // 0x3b0(0x8)
	Class WwiseEvent*                                            TinySharkDeathSting;                               // 0x3b8(0x8)
	Class WwiseEvent*                                            TinySharkSummonSting;                              // 0x3c0(0x8)
	float                                                        TinySharkMusicStartDelay;                          // 0x3c8(0x4)
	float                                                        TinySharkMusicProximity;                           // 0x3cc(0x4)
	Class WwiseEvent*                                            TinySharkAttackStingStart;                         // 0x3d0(0x8)
	Class WwiseEvent*                                            TinySharkAttackStingStop;                          // 0x3d8(0x8)
	Class WwiseEvent*                                            TinySharkAttackMusicSpecialStart;                  // 0x3e0(0x8)
	Class WwiseEvent*                                            TinySharkAttackMusicSpecialStop;                   // 0x3e8(0x8)
	float                                                        EnemyAIOnShipEncounterProximity;                   // 0x3f0(0x4)
	char                                                         pad0x4_63P8D[0x4];                                 // 0x3f4(0x4)
	Class WwiseEvent*                                            EnemyAIOnShipEncounterStingStart;                  // 0x3f8(0x8)
	Class WwiseEvent*                                            EnemyAIOnShipEncounterStingStop;                   // 0x400(0x8)
	Class WwiseEvent*                                            EnemyAIOnShipEncounterMusicStart;                  // 0x408(0x8)
	Class WwiseEvent*                                            EnemyAIOnShipEncounterMusicStop;                   // 0x410(0x8)
	Class WwiseEvent*                                            SkellyShipEncounterStarted;                        // 0x418(0x8)
	Class WwiseEvent*                                            SkellyShipEmergentEncounterStarted;                // 0x420(0x8)
	Class WwiseEvent*                                            SkellyShipEncounterFinished;                       // 0x428(0x8)
	Class WwiseEvent*                                            SkellyShipEmergentEncounterFinished;               // 0x430(0x8)
	Class WwiseEvent*                                            SkellyShipEncounterFinishedAfterFinalWave;         // 0x438(0x8)
	Class WwiseEvent*                                            SkellyShipFinalWaveSunk;                           // 0x440(0x8)
	struct FName                                                 SkellyShipProgressFactorRtpc;                      // 0x448(0x8)
	Class WwiseEvent*                                            SkellyShipSpawned;                                 // 0x450(0x8)
	Class WwiseEvent*                                            FinalSkellyShipSpawned;                            // 0x458(0x8)
	Class WwiseEvent*                                            SkellyShipSunk;                                    // 0x460(0x8)
	float                                                        SkellyShipMinProximity;                            // 0x468(0x4)
	float                                                        SkellyShipMaxProximity;                            // 0x46c(0x4)
	struct FName                                                 SkellyProximityRtpc;                               // 0x470(0x8)
	Class WwiseEvent*                                            PlayerInPuzzleVaultPlay;                           // 0x478(0x8)
	Class WwiseEvent*                                            PlayerInPuzzleVaultStop;                           // 0x480(0x8)
	Class WwiseEvent*                                            PuzzleVaultCompleteMusic;                          // 0x488(0x8)
	Class WwiseEvent*                                            PuzzleVaultIncorrectMusic;                         // 0x490(0x8)
	struct FName                                                 PuzzleVaultWaterFillRtpc;                          // 0x498(0x8)
	Class WwiseEvent*                                            FishingMoodMusicPlay;                              // 0x4a0(0x8)
	Class WwiseEvent*                                            FishingMoodMusicStop;                              // 0x4a8(0x8)
	Class WwiseEvent*                                            FishingMoodMusicCaughtFish;                        // 0x4b0(0x8)
	struct FName                                                 FishOnLineStateGroup;                              // 0x4b8(0x8)
	struct FName                                                 FishNotOnLine;                                     // 0x4c0(0x8)
	struct FName                                                 FishOnLine;                                        // 0x4c8(0x8)
	float                                                        MaxDistanceOfSpyglassShipSting;                    // 0x4d0(0x4)
	float                                                        MinDistanceOfSpyglassShipSting;                    // 0x4d4(0x4)
	int                                                          SpottedStingCooldownTime;                          // 0x4d8(0x4)
	char                                                         pad0x4_EVPZJ[0x4];                                 // 0x4dc(0x4)
	Class WwiseEvent*                                            SpyglassAIShipSting;                               // 0x4e0(0x8)
	Class WwiseEvent*                                            SpyglassEmissaryShipSting;                         // 0x4e8(0x8)
	Class WwiseEvent*                                            SpyglassCaptainShipSting;                          // 0x4f0(0x8)
	Class WwiseEvent*                                            SpyglassCaptainEmissaryShipSting;                  // 0x4f8(0x8)
	float                                                        SpyglassShipAngleTolerance;                        // 0x500(0x4)
	float                                                        SpyglassInitialAnimationTime;                      // 0x504(0x4)
	float                                                        ExtraDistanceToAddToShipRay;                       // 0x508(0x4)
	byte                                                         TraceChannel;                                      // 0x50c(0x1)
	char                                                         pad0x3_J5IGB[0x3];                                 // 0x50d(0x3)
	Class WwiseEvent*                                            ProximityCaptainShipSting;                         // 0x510(0x8)
	struct FName                                                 SirenMusicUnderwaterStateGroup;                    // 0x518(0x8)
	struct FName                                                 SirenMusicUnderwaterStateValue;                    // 0x520(0x8)
	struct FName                                                 SirenMusicAboveWaterStateValue;                    // 0x528(0x8)
};


// Size 0x300 (Full Size[0x3c8] - InheritedSize[0xc8]
class PlayerMuteComponent: public ActorComponent
{
public:
	char                                                         pad0x8_NRGQS[0x8];                                 // 0xc8(0x8)
	TArray<class PlayerState*>                                   PlayerStatesPendingCrewMuting;                     // 0xd0(0x10)
	char                                                         pad0x2e8_DXK4L[0x2e8];                             // 0xe0(0x2e8)
};


// Size 0xa0 (Full Size[0x168] - InheritedSize[0xc8]
class PlayerNonVerbalComponent: public ActorComponent
{
public:
};


// Size 0x230 (Full Size[0x510] - InheritedSize[0x2e0]
class PlayerOceanAudioComponent: public SceneComponent
{
public:
	Class WwiseEvent*                                            WaterAudioEvent;                                   // 0x2e0(0x8)
	Class WwiseEvent*                                            WaterAudioStopEvent;                               // 0x2e8(0x8)
	Class WwiseEvent*                                            WaterEmergeAudioEvent;                             // 0x2f0(0x8)
	Class WwiseEvent*                                            WaterSubmergeAudioEvent;                           // 0x2f8(0x8)
	Struct DeepSeaRegionAmbienceAudio                            DeepSeaRegionAmbienceAudio;                        // 0x300(0x18)
	struct FName                                                 ShorelineRtpc;                                     // 0x318(0x8)
	struct FName                                                 StateUnderwater;                                   // 0x320(0x8)
	struct FName                                                 ChoppinessRtpc;                                    // 0x328(0x8)
	struct FName                                                 CoastlineStormynessRtpc;                           // 0x330(0x8)
	float                                                        MaxValidDistanceBetweenCoastAndInnerSpline;        // 0x338(0x4)
	float                                                        MaxCoastAttenuation;                               // 0x33c(0x4)
	float                                                        MaxDistanceForAccurateSplineCheck;                 // 0x340(0x4)
	struct FName                                                 SuperheatedWaterStateGroup;                        // 0x344(0x8)
	struct FName                                                 SwitchSuperheatedWaterOff;                         // 0x34c(0x8)
	struct FName                                                 SwitchSuperheatedWaterOn;                          // 0x354(0x8)
	float                                                        MinStormDistCms;                                   // 0x35c(0x4)
	float                                                        MaxStormDistCms;                                   // 0x360(0x4)
	char                                                         pad0x24_2U89U[0x24];                               // 0x364(0x24)
	Class AthenaPlayerCharacter*                                 PlayerCharacter;                                   // 0x388(0x8)
	char                                                         pad0x180_0VBZD[0x180];                             // 0x390(0x180)
};


// Size 0x28 (Full Size[0x58] - InheritedSize[0x30]
class PlayerOnIslandTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Byte IslandTypes>                                     IslandTypes;                                       // 0x30(0x10)
	char                                                         pad0x18_X5MVZ[0x18];                               // 0x40(0x18)
};


// Size 0x0 (Full Size[0xd0] - InheritedSize[0xd0]
class TestPlayerPermissionsComponent: public PlayerPermissionsComponent
{
public:
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class PlayerPermissionsTestActor: public Actor
{
public:
	Class PlayerPermissionsComponent*                            PlayerPermissionsComponent;                        // 0x3c8(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PlayerRelevancyService: public Object
{
public:
	char                                                         pad0x10_LFM30[0x10];                               // 0x28(0x10)
	TArray<struct PendingRequests>                               PendingRequests;                                   // 0x38(0x10)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class ShroudBreakerTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_1Z4PV[0x8];                                 // 0xc8(0x8)
	bool                                                         ShroudBreakerActive;                               // 0xd0(0x1)
	char                                                         pad0x7_7ZN6T[0x7];                                 // 0xd1(0x7)
};


// Size 0x0 (Full Size[0xd8] - InheritedSize[0xd8]
class PlayerShroudBreakerTrackerComponent: public ShroudBreakerTrackerComponent
{
public:
};


// Size 0x230 (Full Size[0x2f8] - InheritedSize[0xc8]
class PlayerStatsComponent: public ActorComponent
{
public:
};


// Size 0x18 (Full Size[0x2c8] - InheritedSize[0x2b0]
class TestPlayerTelemetryComponent: public PlayerTelemetryComponent
{
public:
};


// Size 0x0 (Full Size[0x2b0] - InheritedSize[0x2b0]
class TestPlayerTelemetryComponentNoEvents: public PlayerTelemetryComponent
{
public:
};


// Size 0x180 (Full Size[0x248] - InheritedSize[0xc8]
class PlayerWalletComponent: public ActorComponent
{
public:
	char                                                         pad0x8_0RZB9[0x8];                                 // 0xc8(0x8)
	Struct WalletBalance                                         LastKnownBalance;                                  // 0xd0(0x10)
	char                                                         pad0x168_C0L19[0x168];                             // 0xe0(0x168)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class PlayerWorldLocationComponent: public ActorComponent
{
public:
	struct FName                                                 CurrentWorldLocation;                              // 0xc8(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class PlayNpcAnimationResource: public DataAsset
{
public:
	struct FName                                                 AnimationNameToPlay;                               // 0x28(0x8)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x30(0x8)
	class                                                        LocalMusicZone;                                    // 0x38(0x8)
	TArray<struct FText>                                         SpeakingActorLocalisableNames;                     // 0x40(0x10)
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class PlayNpcAnimationResourceStep: public TaleQuestStep
{
public:
	Class PlayNpcAnimationResourceStepDesc*                      StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x10_PLHET[0x10];                               // 0xa0(0x10)
	Class NPCDialogComponent*                                    NPCDialogComponent;                                // 0xb0(0x8)
	Class CutSceneActor*                                         CutSceneActor;                                     // 0xb8(0x8)
	char                                                         pad0x10_DDYO5[0x10];                               // 0xc0(0x10)
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class PlayNpcAnimationResourceStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    TargetNpc;                                         // 0x80(0x30)
	Struct QuestVariableActor                                    PlaceableReaction;                                 // 0xb0(0x30)
	Class PlayNpcAnimationResource*                              PlayNpcAnimationResource;                          // 0xe0(0x8)
};


// Size 0x28 (Full Size[0x150] - InheritedSize[0x128]
class PlinthInteractableComponent: public InteractableComponent
{
public:
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x128(0x8)
	char                                                         pad0x20_NR9FN[0x20];                               // 0x130(0x20)
};


// Size 0x158 (Full Size[0x520] - InheritedSize[0x3c8]
class AnimatedMechanismAction: public Actor
{
public:
	char                                                         pad0x18_2FMYK[0x18];                               // 0x3c8(0x18)
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3e0(0x8)
	float                                                        Delay;                                             // 0x3e8(0x4)
	float                                                        NetDelay;                                          // 0x3ec(0x4)
	bool                                                         AnimateOnServer;                                   // 0x3f0(0x1)
	bool                                                         OnlyAnimateOnServerWhenActorsOverlapInteractionZone; // 0x3f1(0x1)
	char                                                         pad0x6_NCELN[0x6];                                 // 0x3f2(0x6)
	class                                                        MaterialGroup;                                     // 0x3f8(0x8)
	Struct AnimatedMechanismActionState                          State;                                             // 0x428(0x18)
	Struct WwiseEmitter                                          Emitter;                                           // 0x440(0x20)
	char                                                         pad0xc0_9QD6H[0xc0];                               // 0x460(0xc0)
};


// Size 0x40 (Full Size[0x560] - InheritedSize[0x520]
class BaseToggleAnimatedMechanismAction: public AnimatedMechanismAction
{
public:
	char                                                         pad0x8_6KVCY[0x8];                                 // 0x520(0x8)
	Class SceneComponent*                                        Root;                                              // 0x528(0x8)
	Class SceneComponent*                                        Pivot;                                             // 0x530(0x8)
	Class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x538(0x8)
	char                                                         pad0x10_C605Z[0x10];                               // 0x540(0x10)
	TArray<struct AnimationEvents>                               AnimationEvents;                                   // 0x550(0x10)
};


// Size 0x10 (Full Size[0x570] - InheritedSize[0x560]
class ToggleAnimatedMechanismAction: public BaseToggleAnimatedMechanismAction
{
public:
	Struct MechanismTransformAnimationCurve                      InactiveToActiveAnimation;                         // 0x560(0x8)
	Struct MechanismTransformAnimationCurve                      ActiveToInactiveAnimation;                         // 0x568(0x8)
};


// Size 0xd8 (Full Size[0x648] - InheritedSize[0x570]
class PlinthMechanismAction: public ToggleAnimatedMechanismAction
{
public:
	Class MechanismTriggerComponent*                             MechanismTrigger;                                  // 0x570(0x8)
	Class LockComponent*                                         LockComponent;                                     // 0x578(0x8)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x580(0x8)
	Class PlinthInteractableComponent*                           InteractableComponent;                             // 0x588(0x8)
	bool                                                         CanLockComponentAcceptKey;                         // 0x590(0x1)
	char                                                         pad0xb7_Z4PQV[0xb7];                               // 0x591(0xb7)
};


// Size 0x2f0 (Full Size[0xad0] - InheritedSize[0x7e0]
class PocketWatch: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x8_E2B0H[0x8];                                 // 0x7e0(0x8)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7e8(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7f0(0x8)
	Class WwiseEmitterComponent*                                 AudioEmitter;                                      // 0x7f8(0x8)
	Struct PocketWatchHandParams                                 MinuteHandParams;                                  // 0x800(0x68)
	Struct PocketWatchHandParams                                 HourHandParams;                                    // 0x868(0x68)
	Struct PocketWatchDateDisplay                                DateDisplay;                                       // 0x8d0(0x20)
	char                                                         pad0x18_LE4JE[0x18];                               // 0x8f0(0x18)
	Class MaterialInstanceDynamic*                               FirstPersonMeshDynamicMaterialInstance;            // 0x908(0x8)
	Class MaterialInstanceDynamic*                               ThirdPersonMeshDynamicMaterialInstance;            // 0x910(0x8)
	Class WwiseEvent*                                            DateSwitchSFX;                                     // 0x918(0x8)
	Class WwiseEvent*                                            MinuteHandTickSFX;                                 // 0x920(0x8)
	char                                                         pad0x10_003KE[0x10];                               // 0x928(0x10)
	Class PocketWatchAnimationInstance*                          FirstPersonMeshAnimator;                           // 0x938(0x8)
	Class PocketWatchAnimationInstance*                          ThirdPersonMeshAnimator;                           // 0x940(0x8)
	Class PocketWatchAnimationInstance*                          CurrentMeshAnimator;                               // 0x948(0x8)
	char                                                         pad0x180_H9DJ8[0x180];                             // 0x950(0x180)
};


// Size 0x220 (Full Size[0x660] - InheritedSize[0x440]
class WieldableItemAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x10_RMLQ7[0x10];                               // 0x440(0x10)
	Struct ObjectMessagingDispatcher                             MessagingDispatcher;                               // 0x450(0xa0)
	TArray<struct OneShotAnimationSequence>                      OneShotAnimationSequence;                          // 0x4f0(0x10)
	TArray<struct OneShotAnimationAlternateSequence>             OneShotAnimationAlternateSequence;                 // 0x500(0x10)
	TArray<struct ContinuousUseAnimationSequence>                ContinuousUseAnimationSequence;                    // 0x510(0x10)
	TArray<struct ContinuousUseAnimationAlternateSequence>       ContinuousUseAnimationAlternateSequence;           // 0x520(0x10)
	Class AnimSequenceBase*                                      EquipItemAnimationSequence;                        // 0x530(0x8)
	Class AnimSequenceBase*                                      UnequipItemAnimationSequence;                      // 0x538(0x8)
	bool                                                         OneShotIsAlternate;                                // 0x540(0x1)
	bool                                                         ContinuousIsAlternate;                             // 0x541(0x1)
	bool                                                         DisableBlending;                                   // 0x542(0x1)
	bool                                                         Idling;                                            // 0x543(0x1)
	char                                                         pad0x10c_GV02Q[0x10c];                             // 0x544(0x10c)
	Class AnimMontage*                                           CurrentMontage;                                    // 0x650(0x8)
	char                                                         pad0x8_V8TOO[0x8];                                 // 0x658(0x8)
};


// Size 0x20 (Full Size[0x680] - InheritedSize[0x660]
class PocketWatchAnimationInstance: public WieldableItemAnimationInstance
{
public:
	Struct Rotator                                               MinuteHandRotation;                                // 0x660(0xc)
	Struct Rotator                                               HourHandRotation;                                  // 0x66c(0xc)
	char                                                         pad0x8_09SA6[0x8];                                 // 0x678(0x8)
};


// Size 0x2f0 (Full Size[0x3b8] - InheritedSize[0xc8]
class PopUpNotificationComponent: public ActorComponent
{
public:
	Class RewardPopUpNotificationCollectionDataAsset*            RewardPopUpNotificationCollection;                 // 0xc8(0x8)
	TArray<class DeferralReasonPopUpNotificationDataAsset*>      DeferralReasonPopUpNotifications;                  // 0xd0(0x10)
	TArray<class CampaignPopUpNotificationDataAsset*>            CampaignPopUpNotifications;                        // 0xe0(0x10)
	Class PopUpMessageDesc*                                      PeriodicObjectiveCompletePopUp;                    // 0xf0(0x8)
	Class PopUpMessageDesc*                                      PeriodicObjectiveIncompletePopUp;                  // 0xf8(0x8)
	Class PopUpMessageDesc*                                      NPCOnBeachFlowPopUpNoTaleCheckpointVoyage;         // 0x100(0x8)
	Class PopUpMessageDesc*                                      NPCOnBeachFlowPopUpHasTaleCheckpointVoyage;        // 0x108(0x8)
	Class PopUpMessageDesc*                                      GuildCosmeticEntitlementRemovedPopup;              // 0x110(0x8)
	TArray<struct AlignmentOfTypePopUpInformation>               AlignmentOfTypePopUpInformation;                   // 0x118(0x10)
	Class CrewNotificationSettings*                              CrewNotificationDataAsset;                         // 0x128(0x8)
	Class CaptainsLogbookAccoladeLocalisedTextDefinitionAsset*   AccoladeLocalisedTextDefinitionAsset;              // 0x130(0x8)
	TArray<class Class*>                                         Factions;                                          // 0x138(0x10)
	Struct EmissaryNotificationState                             EmissaryState;                                     // 0x148(0xc)
	char                                                         pad0x4_0A0ZC[0x4];                                 // 0x154(0x4)
	Class PopUpMessageDesc*                                      NewTitlesAvailableToBuyPopUp;                      // 0x158(0x8)
	Class PrioritisedPromptsManager*                             PrioritisedPrompts;                                // 0x160(0x8)
	Class EmissaryLevelSettingsAsset*                            EmissaryLevelSettings;                             // 0x168(0x8)
	char                                                         pad0x248_SCDLX[0x248];                             // 0x170(0x248)
};


// Size 0xc0 (Full Size[0x488] - InheritedSize[0x3c8]
class PosablePirate: public Actor
{
public:
	Class SkeletalMeshComponent*                                 PirateMeshComponent;                               // 0x3c8(0x8)
	byte                                                         Gender;                                            // 0x3d0(0x1)
	bool                                                         UseIPG;                                            // 0x3d1(0x1)
	char                                                         pad0x6_93TXG[0x6];                                 // 0x3d2(0x6)
	Class PirateGeneratorService*                                GeneratorServiceActor;                             // 0x3d8(0x8)
	char                                                         pad0x88_WNC4C[0x88];                               // 0x3e0(0x88)
	TArray<class Class*>                                         Outfit;                                            // 0x468(0x10)
	TArray<class ParticleSystemComponent*>                       ParticleComponents;                                // 0x478(0x10)
};


// Size 0xe0 (Full Size[0x108] - InheritedSize[0x28]
class PremiumCatalogLandingPageItemDataAsset: public DataAsset
{
public:
	Struct Guid                                                  Id;                                                // 0x28(0x10)
	TArray<struct Images>                                        Images;                                            // 0x38(0x10)
	Struct FText                                                 Title;                                             // 0x48(0x38)
	Struct FText                                                 Description;                                       // 0x80(0x38)
	bool                                                         TimeLimited;                                       // 0xb8(0x1)
	bool                                                         TimeLimitedPrice;                                  // 0xb9(0x1)
	char                                                         pad0x2_1QGM8[0x2];                                 // 0xba(0x2)
	struct FName                                                 FeatureToggle;                                     // 0xc0(0x8)
	Struct StringAssetReference                                  AccentImage;                                       // 0xc8(0x10)
	Struct StringAssetReference                                  TopBannerImage;                                    // 0xd8(0x10)
	Struct StringAssetReference                                  BottomBannerImage;                                 // 0xe8(0x10)
	struct FName                                                 IncludeForPromotion;                               // 0xf8(0x8)
	struct FName                                                 ExcludeFromPromotion;                              // 0x100(0x8)
};


// Size 0x110 (Full Size[0x218] - InheritedSize[0x108]
class PremiumCatalogBundleSetDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
	Struct FText                                                 PageTitle;                                         // 0x108(0x38)
	Struct StringAssetReference                                  PageIcon;                                          // 0x140(0x10)
	Struct FText                                                 BundleTitle;                                       // 0x150(0x38)
	Struct FText                                                 Saving;                                            // 0x188(0x38)
	TArray<struct BundleItems>                                   BundleItems;                                       // 0x1c0(0x10)
	Struct PremiumCatalogItemSet                                 AdditionalItems;                                   // 0x1d0(0x48)
};


// Size 0x58 (Full Size[0x160] - InheritedSize[0x108]
class PremiumCatalogItemSetDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
	Struct FText                                                 PageTitle;                                         // 0x108(0x38)
	Struct StringAssetReference                                  PageIcon;                                          // 0x140(0x10)
	TArray<struct ItemSets>                                      ItemSets;                                          // 0x150(0x10)
};


// Size 0x58 (Full Size[0x160] - InheritedSize[0x108]
class PremiumCatalogCardsDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
	Struct FText                                                 PageTitle;                                         // 0x108(0x38)
	Struct StringAssetReference                                  PageIcon;                                          // 0x140(0x10)
	TArray<class PremiumCatalogItemSetDataAsset*>                Cards;                                             // 0x150(0x10)
};


// Size 0x0 (Full Size[0x108] - InheritedSize[0x108]
class PremiumCatalogOfferDataAsset: public PremiumCatalogLandingPageItemDataAsset
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class PremiumCatalogDataAsset: public DataAsset
{
public:
	Struct Guid                                                  CatalogId;                                         // 0x28(0x10)
	Struct FText                                                 DisplayName;                                       // 0x38(0x38)
	TArray<struct Tabs>                                          Tabs;                                              // 0x70(0x10)
	bool                                                         Archive;                                           // 0x80(0x1)
	char                                                         pad0x7_W4YXO[0x7];                                 // 0x81(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PremiumCatalogListDataAsset: public DataAsset
{
public:
	TArray<class PremiumCatalogDataAsset*>                       Catalogs;                                          // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PremiumShopSettings: public Object
{
public:
	Struct StringAssetReference                                  PetShopDataAsset;                                  // 0x28(0x10)
};


// Size 0x220 (Full Size[0x2e8] - InheritedSize[0xc8]
class PremiumShopViewModelComponentBase: public ActorComponent
{
public:
	char                                                         pad0x1a8_IP7LD[0x1a8];                             // 0xc8(0x1a8)
	Class PetShopDataAsset*                                      PetShopDataAsset;                                  // 0x270(0x8)
	char                                                         pad0x70_TJID9[0x70];                               // 0x278(0x70)
};


// Size 0x78 (Full Size[0x360] - InheritedSize[0x2e8]
class FrontendPremiumShopViewModelComponent: public PremiumShopViewModelComponentBase
{
public:
};


// Size 0x30 (Full Size[0x318] - InheritedSize[0x2e8]
class InGamePremiumShopViewModelComponent: public PremiumShopViewModelComponentBase
{
public:
};


// Size 0x50 (Full Size[0x98] - InheritedSize[0x48]
class PreSpawnMusicZoneSpawnerStrategy: public SpawnerBehaviourStrategy
{
public:
	class                                                        PreSpawnMusicZoneActor;                            // 0x48(0x8)
	class                                                        PostSpawnMusicZoneActor;                           // 0x50(0x8)
	bool                                                         ShouldPlayBattleWonSting;                          // 0x58(0x1)
	bool                                                         ShouldStopMusicZoneWhenWaveCompleted;              // 0x59(0x1)
	char                                                         pad0x6_A2WHW[0x6];                                 // 0x5a(0x6)
	Class Actor*                                                 SpawnedActor;                                      // 0x60(0x8)
	Class MusicZoneComponent*                                    MusicZoneComponent;                                // 0x68(0x8)
	char                                                         pad0x28_4K1HD[0x28];                               // 0x70(0x28)
};


// Size 0x100 (Full Size[0x4c8] - InheritedSize[0x3c8]
class PreviewShip: public Actor
{
public:
	char                                                         pad0x8_WTUVY[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	Class ShipLiveryComponent*                                   LiveryComponent;                                   // 0x3d8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              HullLiveryCustomizationComponent;                  // 0x3e0(0x8)
	Class ReplicatedShipPartCustomizationComponent*              SailsLiveryCustomizationComponent;                 // 0x3e8(0x8)
	class                                                        FirePropagationBlueprint;                          // 0x3f0(0x8)
	Struct StringAssetReference                                  ShipPersistenceIdentifier;                         // 0x3f8(0x10)
	Class ShipFirePropagationComponent*                          FirePropagationComponent;                          // 0x408(0x8)
	char                                                         pad0xb8_VT5G1[0xb8];                               // 0x410(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PrimitiveComponentTestFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x50 (Full Size[0x418] - InheritedSize[0x3c8]
class ShipSpawnLocation: public Actor
{
public:
	TArray<class ShipSpawnLocation*>                             LinkedShipSpawnLocations;                          // 0x3c8(0x10)
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x3d8(0x10)
	class                                                        ShipSize;                                          // 0x3e8(0x8)
	Struct FString                                               Description;                                       // 0x3f0(0x10)
	Class BoxComponent*                                          BoxComponent;                                      // 0x400(0x8)
	char                                                         pad0x10_XAB0Q[0x10];                               // 0x408(0x10)
};


// Size 0x0 (Full Size[0x418] - InheritedSize[0x418]
class ProgressShipSpawnLocation: public ShipSpawnLocation
{
public:
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class ProjectileLauncherMechanismAction: public Actor
{
public:
	char                                                         pad0x10_J1XJA[0x10];                               // 0x3c8(0x10)
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3d8(0x8)
	byte                                                         Mode;                                              // 0x3e0(0x1)
	char                                                         pad0x7_9JTE8[0x7];                                 // 0x3e1(0x7)
	Struct PoolableCollectionMapConfiguration                    ProjectilePoolConfiguration;                       // 0x3e8(0x18)
	TArray<class Actor*>                                         IndependentProjectileLaunchers;                    // 0x400(0x10)
	char                                                         pad0x10_CS0KM[0x10];                               // 0x410(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileServiceInterface: public Interface
{
public:
};


// Size 0x198 (Full Size[0x560] - InheritedSize[0x3c8]
class ProjectileService: public Actor
{
public:
	char                                                         pad0x20_L8QY6[0x20];                               // 0x3c8(0x20)
	TArray<struct DeadProjectiles>                               DeadProjectiles;                                   // 0x3e8(0x10)
	char                                                         pad0x60_ATVJ6[0x60];                               // 0x3f8(0x60)
	TArray<struct ProjectileAttackGroups>                        ProjectileAttackGroups;                            // 0x458(0x10)
	char                                                         pad0x88_V5PIV[0x88];                               // 0x468(0x88)
	Class AthenaProjectilesThrottledTickCollectionAsset*         ProjectileThrottledTickData;                       // 0x4f0(0x8)
	char                                                         pad0x68_VI9SE[0x68];                               // 0x4f8(0x68)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ProjectileServiceDataAsset: public DataAsset
{
public:
	byte                                                         MaxTrails;                                         // 0x28(0x1)
	char                                                         pad0x3_OQPM7[0x3];                                 // 0x29(0x3)
	float                                                        DefaultTrailDistance;                              // 0x2c(0x4)
	float                                                        DefaultTrailFalloff;                               // 0x30(0x4)
	char                                                         pad0x4_HL19P[0x4];                                 // 0x34(0x4)
	Class StaticMesh*                                            TrailsMesh;                                        // 0x38(0x8)
	Class MaterialInterface*                                     Material;                                          // 0x40(0x8)
	TArray<struct HitScanPerWeaponMeshPairings>                  HitScanPerWeaponMeshPairings;                      // 0x48(0x10)
};


// Size 0x310 (Full Size[0xaf0] - InheritedSize[0x7e0]
class ProjectileWeapon: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x30_9G9Q1[0x30];                               // 0x7e0(0x30)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x810(0x8)
	Struct ProjectileWeaponParameters                            WeaponParameters;                                  // 0x828(0x1f8)
	byte                                                         State;                                             // 0xa20(0x1)
	char                                                         pad0x3_2C0JK[0x3];                                 // 0xa21(0x3)
	int                                                          AmmoLeft;                                          // 0xa24(0x4)
	Class AimSensitivityComponent*                               AimSensitivityComponent;                           // 0xa28(0x8)
	char                                                         pad0x10_W34N3[0x10];                               // 0xa30(0x10)
	byte                                                         ProjectileWeaponType;                              // 0xa40(0x1)
	char                                                         pad0x3_CBBNR[0x3];                                 // 0xa41(0x3)
	float                                                        MaxAcceptableAttackTimeStampDelta;                 // 0xa44(0x4)
	bool                                                         ShouldSendHitScanTelemetry;                        // 0xa48(0x1)
	char                                                         pad0x7_PT5U2[0x7];                                 // 0xa49(0x7)
	float                                                        DistanceBeforeGravity;                             // 0xa50(0x4)
	float                                                        NameplateVisibilityRangeExtensionFactorWhileAiming; // 0xa54(0x4)
	char                                                         pad0x58_UJ7EW[0x58];                               // 0xa58(0x58)
	bool                                                         ShouldShowAmmoUI;                                  // 0xab0(0x1)
	char                                                         pad0x3f_LHMXU[0x3f];                               // 0xab1(0x3f)
};


// Size 0xe0 (Full Size[0xbd0] - InheritedSize[0xaf0]
class TestProjectileWeapon: public ProjectileWeapon
{
public:
	Struct TestProjectileWeaponParameters                        TestProjectileWeaponParameters;                    // 0xaf0(0x1)
	char                                                         pad0x3_CAY08[0x3];                                 // 0xaf1(0x3)
	int                                                          RequestDeniedCount;                                // 0xaf4(0x4)
	int                                                          FireProjectilesCallCount;                          // 0xaf8(0x4)
	int                                                          HitPredictedCount;                                 // 0xafc(0x4)
	int                                                          HitAuthorityCount;                                 // 0xb00(0x4)
	int                                                          ProcessHitsAuthorityCallCount;                     // 0xb04(0x4)
	bool                                                         OnWeaponFiredCalled;                               // 0xb08(0x1)
	char                                                         pad0x3_UUM81[0x3];                                 // 0xb09(0x3)
	Struct Guid                                                  AttackId;                                          // 0xb0c(0x10)
	char                                                         pad0x4_NBCO4[0x4];                                 // 0xb1c(0x4)
	TArray<class Actor*>                                         ActorsHits;                                        // 0xb20(0x10)
	TArray<class PhysicalMaterial*>                              PhysicsMaterials;                                  // 0xb30(0x10)
	Struct ProjectileAim                                         LastProjectileAim;                                 // 0xb40(0x50)
	char                                                         pad0x40_OS06O[0x40];                               // 0xb90(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileWeaponFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ProjectileWeaponValidationFunctionLibrary: public BlueprintFunctionLibrary
{
public:
	float                                                        AimPositionValidationTolerance;                    // 0x28(0x4)
	char                                                         pad0x4_KLOBD[0x4];                                 // 0x2c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PursuitCircleAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PuzzleConfigurationInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x478] - InheritedSize[0x468]
class PuzzleMechanism: public InteractableObject
{
public:
	char                                                         pad0x8_HBLJP[0x8];                                 // 0x468(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x470(0x8)
};


// Size 0x100 (Full Size[0x578] - InheritedSize[0x478]
class RotatingBlockPuzzle: public PuzzleMechanism
{
public:
	Class PrimitiveComponent*                                    StaticMesh;                                        // 0x478(0x8)
	Class DecalComponent*                                        Position1Decal;                                    // 0x480(0x8)
	Class DecalComponent*                                        Position2Decal;                                    // 0x488(0x8)
	Class DecalComponent*                                        Position3Decal;                                    // 0x490(0x8)
	Class DecalComponent*                                        Position4Decal;                                    // 0x498(0x8)
	TArray<struct InteractVFXLocations>                          InteractVFXLocations;                              // 0x4a0(0x10)
	Class Object*                                                InteractVFX;                                       // 0x4b0(0x8)
	Struct FText                                                 BlockName;                                         // 0x4b8(0x38)
	Class MaterialInterface*                                     DefaultMaterialInstance;                           // 0x4f0(0x8)
	float                                                        MaterialBlendInTime;                               // 0x4f8(0x4)
	float                                                        MaterialBlendOutTime;                              // 0x4fc(0x4)
	float                                                        IncorrectPulseDuration;                            // 0x500(0x4)
	char                                                         pad0x4_XXWJ0[0x4];                                 // 0x504(0x4)
	Class PuzzleVaultAudioParams*                                PuzzleVaultAudioParams;                            // 0x508(0x8)
	int                                                          CorrectPostion;                                    // 0x510(0x4)
	float                                                        RotationSpeed;                                     // 0x514(0x4)
	int                                                          CurrentPosition;                                   // 0x518(0x4)
	char                                                         pad0x5c_IY00Z[0x5c];                               // 0x51c(0x5c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PuzzleObjectInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class PuzzleStatueBase: public Actor
{
public:
	char                                                         pad0x10_P2CTQ[0x10];                               // 0x3c8(0x10)
	Class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3d8(0x8)
	Class PuzzleStatueInteractableComponent*                     InteractableComponent;                             // 0x3e0(0x8)
	Class LockComponent*                                         LockComponent;                                     // 0x3e8(0x8)
	bool                                                         IsStatueDisabled;                                  // 0x3f0(0x1)
	bool                                                         IsStatueActive;                                    // 0x3f1(0x1)
	char                                                         pad0x2_O3BZC[0x2];                                 // 0x3f2(0x2)
	float                                                        MinDamageToTriggerStatue;                          // 0x3f4(0x4)
	char                                                         pad0x8_SGSW2[0x8];                                 // 0x3f8(0x8)
	Class PuzzleStatueBaseAudioParamsDataAsset*                  PuzzleStatueBaseAudioParams;                       // 0x400(0x8)
	Class PuzzleStatueVFXComponent*                              PuzzleStatueVFXComponent;                          // 0x408(0x8)
	Class ParticleSystemComponent*                               LockPositionParticleSystem;                        // 0x410(0x8)
	Class ParticleSystemComponent*                               OneShotLockPositionParticleSystem;                 // 0x418(0x8)
	char                                                         pad0x28_OA5MK[0x28];                               // 0x420(0x28)
};


// Size 0x178 (Full Size[0x5c0] - InheritedSize[0x448]
class BroadcasterPuzzleStatue: public PuzzleStatueBase
{
public:
	char                                                         pad0x8_BT7K0[0x8];                                 // 0x448(0x8)
	Class StaticMeshComponent*                                   ArmStaticMesh;                                     // 0x450(0x8)
	TArray<class Actor*>                                         ReceiverStatues;                                   // 0x458(0x10)
	TArray<struct ValidConfigurationCombos>                      ValidConfigurationCombos;                          // 0x468(0x10)
	Struct ReactionSequenceStateInfo                             ReactionSequenceState;                             // 0x478(0x10)
	char                                                         pad0x48_AD92A[0x48];                               // 0x488(0x48)
	Class IslandVisitorCallbackComponent*                        IslandVisitorCallbackComponent;                    // 0x4d0(0x8)
	float                                                        DelayBeforeReactionSequenceCheck;                  // 0x4d8(0x4)
	float                                                        DelayPerStatueDuringReactionSequenceCheck;         // 0x4dc(0x4)
	float                                                        DelayAfterReactionSequenceCheck;                   // 0x4e0(0x4)
	float                                                        DelayBeforeActivatingTriggerDuringReactionSequenceSuccess; // 0x4e4(0x4)
	char                                                         pad0x8_4EA9Y[0x8];                                 // 0x4e8(0x8)
	Class ParticleSystemComponent*                               ShockwaveParticleSystem;                           // 0x4f0(0x8)
	Class ParticleSystemComponent*                               HornDustParticleSystem;                            // 0x4f8(0x8)
	Class BroadcasterPuzzleStatueAudioParamsDataAsset*           BroadcasterAudioParams;                            // 0x500(0x8)
	char                                                         pad0xa4_3L2EB[0xa4];                               // 0x508(0xa4)
	float                                                        ShockwaveEffectDelay;                              // 0x5ac(0x4)
	bool                                                         ShouldResetWhenIslandIsEmpty;                      // 0x5b0(0x1)
	char                                                         pad0x3_1A4YE[0x3];                                 // 0x5b1(0x3)
	float                                                        TimeBeforeIslandResetWhenEmpty;                    // 0x5b4(0x4)
	float                                                        StatueResetCooldownInSeconds;                      // 0x5b8(0x4)
	char                                                         pad0x4_HRS5A[0x4];                                 // 0x5bc(0x4)
};


// Size 0x48 (Full Size[0x490] - InheritedSize[0x448]
class ReceiverPuzzleStatue: public PuzzleStatueBase
{
public:
	char                                                         pad0xa_TGU8I[0xa];                                 // 0x448(0xa)
	byte                                                         InitialStatueConfiguration;                        // 0x452(0x1)
	char                                                         pad0x5_Z4YF9[0x5];                                 // 0x453(0x5)
	Class SceneComponent*                                        ConfigurationPositionPivot;                        // 0x458(0x8)
	Class CurveFloat*                                            PositionTransitionCurve;                           // 0x460(0x8)
	TArray<struct Positions>                                     Positions;                                         // 0x468(0x10)
	Class ReceiverPuzzleStatueAudioParamsDataAsset*              ReceiverAudioParams;                               // 0x478(0x8)
	char                                                         pad0x10_TLXTW[0x10];                               // 0x480(0x10)
};


// Size 0x8 (Full Size[0x130] - InheritedSize[0x128]
class PuzzleStatueInteractableComponent: public InteractableComponent
{
public:
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x128(0x8)
};


// Size 0xd0 (Full Size[0x198] - InheritedSize[0xc8]
class PuzzleStatueVFXComponent: public ActorComponent
{
public:
	char                                                         pad0x50_O1EVB[0x50];                               // 0xc8(0x50)
	Class ParticleSystemComponent*                               LockPositionParticleSystem;                        // 0x118(0x8)
	Class ParticleSystemComponent*                               OneShotLockPositionParticleSystem;                 // 0x120(0x8)
	Class ParticleSystemComponent*                               BroadcasterShockwaveParticleSystem;                // 0x128(0x8)
	Class ParticleSystemComponent*                               BroadcasterHornDustParticleSystem;                 // 0x130(0x8)
	Class Object*                                                HornVFXTemplate;                                   // 0x138(0x8)
	Class StaticMeshComponent*                                   BroadcasterArmStaticMesh;                          // 0x140(0x8)
	Class CurveFloat*                                            PulseGlowCurve;                                    // 0x148(0x8)
	float                                                        StatueInactiveIntensityThreshold;                  // 0x150(0x4)
	float                                                        StatueActivatedIntensityThreshold;                 // 0x154(0x4)
	float                                                        ReactionSequenceIntensityThreshold;                // 0x158(0x4)
	float                                                        SingingIntensityThreshold;                         // 0x15c(0x4)
	float                                                        IntensityInterpolationSpeed;                       // 0x160(0x4)
	char                                                         pad0x4_VMMN4[0x4];                                 // 0x164(0x4)
	TArray<struct FName>                                         ScalarParameterNamesToOverride;                    // 0x168(0x10)
	char                                                         pad0x20_KODSO[0x20];                               // 0x178(0x20)
};


// Size 0x1008 (Full Size[0x1470] - InheritedSize[0x468]
class PuzzleVault: public InteractableObject
{
public:
	char                                                         pad0x60_0CS5G[0x60];                               // 0x468(0x60)
	Class SpawnActorComponent*                                   PuzzleMechanism1ActorComponent;                    // 0x4c8(0x8)
	Class SpawnActorComponent*                                   PuzzleMechanism2ActorComponent;                    // 0x4d0(0x8)
	Class SpawnActorComponent*                                   PuzzleMechanism3ActorComponent;                    // 0x4d8(0x8)
	Class SpawnActorComponent*                                   PuzzleMechanism4ActorComponent;                    // 0x4e0(0x8)
	Class SpawnActorComponent*                                   Brazier1ActorComponent;                            // 0x4e8(0x8)
	Class SpawnActorComponent*                                   Brazier2ActorComponent;                            // 0x4f0(0x8)
	Class SpawnActorComponent*                                   Brazier3ActorComponent;                            // 0x4f8(0x8)
	Class SpawnActorComponent*                                   Brazier4ActorComponent;                            // 0x500(0x8)
	Class SpawnActorComponent*                                   WaterActorComponent;                               // 0x508(0x8)
	Class SpawnActorComponent*                                   MainDoorActorComponent;                            // 0x510(0x8)
	Class SpawnActorComponent*                                   TimedMainDoorActorComponent;                       // 0x518(0x8)
	Class SpawnActorComponent*                                   RewardDoorActorComponent;                          // 0x520(0x8)
	Class StaticMeshComponent*                                   PlinthItemSpawnMesh;                               // 0x528(0x8)
	Class StaticMeshComponent*                                   ButtonMesh;                                        // 0x530(0x8)
	Class SceneComponent*                                        DefaultSceneRoot;                                  // 0x538(0x8)
	Class ShapeComponent*                                        VaultPassageOverlapVolume;                         // 0x540(0x8)
	Class ShapeComponent*                                        VaultRoomOverlapVolume;                            // 0x548(0x8)
	Class StoryClaimableResourceComponent*                       StoryClaimableResourceComponent;                   // 0x550(0x8)
	char                                                         pad0x8_9WASJ[0x8];                                 // 0x558(0x8)
	Struct VaultButtonData                                       VaultButtonData;                                   // 0x560(0xa90)
	Class Object*                                                SpoutParticleSystem;                               // 0xff0(0x8)
	Struct FText                                                 VaultName;                                         // 0xff8(0x38)
	Class SlidingDoor*                                           OuterDoor;                                         // 0x1030(0x8)
	Class VaultPuzzleDataAsset*                                  DefaultPuzzleData;                                 // 0x1038(0x8)
	Class VaultPuzzleDataAsset*                                  TreasureVaultPuzzleData;                           // 0x1040(0x8)
	byte                                                         AllocationStrategy;                                // 0x1048(0x1)
	char                                                         pad0x3_MSGEI[0x3];                                 // 0x1049(0x3)
	float                                                        WeightOfBeingChosenByGHVoyage;                     // 0x104c(0x4)
	Class PuzzleVaultAudioParams*                                DefaultVaultAudioParams;                           // 0x1050(0x8)
	Class PuzzleVaultAudioParams*                                NoWaterVaultAudioParams;                           // 0x1058(0x8)
	Class PuzzleVaultAudioParams*                                NoMusicVaultAudioParams;                           // 0x1060(0x8)
	Class PuzzleVaultAudioParams*                                TreasureVaultAudioParams;                          // 0x1068(0x8)
	Struct RuntimeFloatCurve                                     TreasureVaultAudioCurve;                           // 0x1070(0x80)
	float                                                        FillRatePerWaterSpout;                             // 0x10f0(0x4)
	int                                                          MaxNumWaterSpouts;                                 // 0x10f4(0x4)
	float                                                        BrazierExtinguishWaterLevel;                       // 0x10f8(0x4)
	float                                                        SpoutsSubmergedWaterLevel;                         // 0x10fc(0x4)
	float                                                        WaterFillFactorChangeToUpdateAudio;                // 0x1100(0x4)
	float                                                        FailureCheckInterval;                              // 0x1104(0x4)
	float                                                        ResetCheckInterval;                                // 0x1108(0x4)
	Struct Vector                                                VaultDoorHidingPosition;                           // 0x110c(0xc)
	Struct Vector                                                VaultDoorActivePosition;                           // 0x1118(0xc)
	char                                                         pad0x4_BIBSN[0x4];                                 // 0x1124(0x4)
	Class WaterSpoutVFXComponent*                                WaterSpoutVFXComponent;                            // 0x1128(0x8)
	Class VaultKeyMappingDataAsset*                              TreasureVaultKeyTypes;                             // 0x1130(0x8)
	Class WaterModifierZoneComponent*                            WaterModifierZoneComponent;                        // 0x1158(0x8)
	struct FName                                                 TotemLocationTag;                                  // 0x1180(0x8)
	Struct Vector                                                TotemOffset;                                       // 0x1188(0xc)
	Struct VaultReserved                                         TallTaleVaultReservation;                          // 0x1194(0x14)
	char                                                         pad0x18_ZYESO[0x18];                               // 0x11a8(0x18)
	Struct FString                                               SubjectName;                                       // 0x11c0(0x10)
	Struct Guid                                                  VaultUniqueId;                                     // 0x11d0(0x10)
	Class Actor*                                                 ReservationTotem;                                  // 0x11e0(0x8)
	Class SlidingDoor*                                           VaultDoor;                                         // 0x11e8(0x8)
	Class TimedDoorMechanismAction*                              TimedVaultDoor;                                    // 0x11f0(0x8)
	Class SlidingDoor*                                           VaultRewardDoor;                                   // 0x11f8(0x8)
	Class WaterVolume*                                           WaterVolume;                                       // 0x1200(0x8)
	TArray<class RotatingBlockPuzzle*>                           PuzzleMechanisms;                                  // 0x1208(0x10)
	TArray<class Beacon*>                                        Braziers;                                          // 0x1218(0x10)
	Class TreasureVaultTable*                                    VaultTable;                                        // 0x1228(0x8)
	Class VaultPuzzleDataAsset*                                  VaultDataAsset;                                    // 0x1230(0x8)
	byte                                                         VaultAudioSetting;                                 // 0x1238(0x1)
	char                                                         pad0x7_6DD0C[0x7];                                 // 0x1239(0x7)
	Class PuzzleVaultAudioParams*                                VaultAudioParams;                                  // 0x1240(0x8)
	Class TreasureVaultItemSpawnComponent*                       ScaffoldingSpawner;                                // 0x1248(0x8)
	TArray<class TreasureVaultItemSpawnComponent*>               RewardSpawners;                                    // 0x1250(0x10)
	TArray<class TreasureVaultItemSpawnComponent*>               PressurePlateSpawners;                             // 0x1260(0x10)
	TArray<struct Solutions>                                     Solutions;                                         // 0x1270(0x10)
	TArray<class AthenaPlayerCharacter*>                         PlayersInVaultPassage;                             // 0x1280(0x10)
	TArray<struct MaterialSetReferences>                         MaterialSetReferences;                             // 0x1290(0x10)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x12a0(0x8)
	int                                                          CurrentSolution;                                   // 0x12a8(0x4)
	bool                                                         IsActive;                                          // 0x12ac(0x1)
	bool                                                         IsCompleted;                                       // 0x12ad(0x1)
	char                                                         pad0x2_LXFKI[0x2];                                 // 0x12ae(0x2)
	TArray<class VaultMaterialSetDataAsset*>                     MaterialSets;                                      // 0x12b0(0x10)
	int                                                          NumActiveWaterSpouts;                              // 0x12c0(0x4)
	char                                                         pad0x44_M495K[0x44];                               // 0x12c4(0x44)
	int                                                          ActiveActionRule;                                  // 0x1308(0x4)
	char                                                         pad0x14c_FLK4X[0x14c];                             // 0x130c(0x14c)
	float                                                        ServerMigrationExclusionRadius;                    // 0x1458(0x4)
	char                                                         pad0x14_73XOU[0x14];                               // 0x145c(0x14)
};


// Size 0x10 (Full Size[0x670] - InheritedSize[0x660]
class QuestBookAnimationInstance: public WieldableItemAnimationInstance
{
public:
};


// Size 0x0 (Full Size[0x510] - InheritedSize[0x510]
class QuestBookItemInfo: public ItemInfo
{
public:
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class QuestBookDoublePageLayout: public QuestBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class QuestBookSinglePageLayout: public QuestBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class QuestBookRemapper: public Object
{
public:
};


// Size 0x330 (Full Size[0x358] - InheritedSize[0x28]
class QuestsConfig: public DataAsset
{
public:
	TArray<struct CanvasLODs>                                    CanvasLODs;                                        // 0x28(0x10)
	Class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x38(0x8)
	class                                                        XMarksTheSpotMapItemInfoDescClass;                 // 0x40(0x8)
	float                                                        DefaultDigRadius;                                  // 0x48(0x4)
	float                                                        MinDistanceBetweenTreasureLocations;               // 0x4c(0x4)
	float                                                        DefaultRiddleDigRadius;                            // 0x50(0x4)
	char                                                         pad0x4_X62D3[0x4];                                 // 0x54(0x4)
	class                                                        RiddleMapItemInfoDescClass;                        // 0x58(0x8)
	Class RiddleTextPhrasebookDataAsset*                         RiddlePhrasebookDataAsset;                         // 0x60(0x8)
	Class RiddleQuestData*                                       RiddleQuestDataAsset;                              // 0x68(0x8)
	Class RiddleQuestDescGeneratorData*                          RiddleQuestDescGeneratorData;                      // 0x70(0x8)
	Class RiddleQuestValidLocationGeneratorData*                 RiddleQuestValidLocationGeneratorData;             // 0x78(0x8)
	class                                                        BountyMapItemInfoDescClass;                        // 0x80(0x8)
	Class BountyQuestData*                                       BountyQuestData;                                   // 0x88(0x8)
	Class BountyQuestDescData*                                   BountyQuestDescData;                               // 0x90(0x8)
	Class MerchantQuestData*                                     MerchantQuestData;                                 // 0x98(0x8)
	class                                                        MerchantMapItemInfoDescClass;                      // 0xa0(0x8)
	Class CargoRunQuestData*                                     CargoRunQuestData;                                 // 0xa8(0x8)
	class                                                        CargoRunMapItemInfoDescClass;                      // 0xb0(0x8)
	Class VoyageProposalAssetSelector*                           VoyageProposalAssetData;                           // 0xb8(0x8)
	Class WwiseEvent*                                            VoyageSelectionVoteCompletedSound;                 // 0xc0(0x8)
	Struct BuriedTreasureChestParams                             BuriedTreasureChestParams;                         // 0xc8(0x48)
	TArray<struct VoyageProposalOverrides>                       VoyageProposalOverrides;                           // 0x110(0x10)
	class                                                        VoyageProposal;                                    // 0x120(0x8)
	class                                                        VoyageProposal2;                                   // 0x128(0x8)
	class                                                        VoyageProposal3;                                   // 0x130(0x8)
	class                                                        VoyageProposal4;                                   // 0x138(0x8)
	TArray<class Class*>                                         AllTreasureArtifactsItemInfoDescs;                 // 0x140(0x10)
	TArray<class Class*>                                         AllMessageInBottles;                               // 0x150(0x10)
	TArray<class Class*>                                         AllSkeletonOrders;                                 // 0x160(0x10)
	TArray<class Class*>                                         AllCollectorsChests;                               // 0x170(0x10)
	Class GoldInContainerDataAsset*                              GoldInContainerDataAsset;                          // 0x180(0x8)
	TArray<class Class*>                                         AllGoldMounds;                                     // 0x188(0x10)
	TArray<class Class*>                                         DefaultSeas;                                       // 0x198(0x10)
	Struct StringAssetReference                                  MessageInABottleMapsDiscoveredBackgroundImage;     // 0x1a8(0x10)
	TArray<struct MessageInABottleMapsDiscoveredImages>          MessageInABottleMapsDiscoveredImages;              // 0x1b8(0x10)
	Struct StringAssetReference                                  SkeletonOrderMapsDiscoveredBackgroundImage;        // 0x1c8(0x10)
	TArray<struct SkeletonOrderMapsDiscoveredImages>             SkeletonOrderMapsDiscoveredImages;                 // 0x1d8(0x10)
	Struct StringAssetReference                                  CoralMessageInABottleMapsDiscoveredBackgroundImage; // 0x1e8(0x10)
	TArray<struct CoralMessageInABottleMapsDiscoveredImages>     CoralMessageInABottleMapsDiscoveredImages;         // 0x1f8(0x10)
	Class WwiseEvent*                                            TutorialStepStartSfx;                              // 0x208(0x8)
	Struct Rotator                                               TutorialCutsceneSpawnpointRotation;                // 0x210(0xc)
	Struct Vector                                                TutorialCutsceneFirstPersonMeshOffset;             // 0x21c(0xc)
	float                                                        TutorialCutsceneCharacterModelReplacedEventTimeout; // 0x228(0x4)
	float                                                        TutorialCutsceneTimeBeforeFadeIn;                  // 0x22c(0x4)
	float                                                        TutorialCutsceneFadeInDuration;                    // 0x230(0x4)
	char                                                         pad0x4_UGXSK[0x4];                                 // 0x234(0x4)
	class                                                        FoodToAddToInventoryInEatingTutorial;              // 0x238(0x8)
	float                                                        TutorialStartingHealth;                            // 0x240(0x4)
	char                                                         pad0x4_YA13G[0x4];                                 // 0x244(0x4)
	Class PopUpMessageDesc*                                      TutorialEatBananaOpenRadial;                       // 0x248(0x8)
	Class PopUpMessageDesc*                                      TutorialSelectBananaPopupDesc;                     // 0x250(0x8)
	Class PopUpMessageDesc*                                      TutorialEatBananaPopupDesc;                        // 0x258(0x8)
	Class PopUpMessageDesc*                                      TutorialCycleWeaponPopupDesc;                      // 0x260(0x8)
	Class PopUpMessageDesc*                                      TutorialUseMapOpenRadial;                          // 0x268(0x8)
	Class PopUpMessageDesc*                                      TutorialSelectMap;                                 // 0x270(0x8)
	Class PopUpMessageDesc*                                      TutorialUseMapPopupDesc;                           // 0x278(0x8)
	Class PopUpMessageDesc*                                      TutorialShowMapPopupDesc;                          // 0x280(0x8)
	class                                                        MapToAddToInventoryInTutorial;                     // 0x288(0x8)
	Class PopUpMessageDesc*                                      TutorialBuyVoyagePopupDesc;                        // 0x290(0x8)
	Class PopUpMessageDesc*                                      TutorialBuyVoyageNextOptionsDesc;                  // 0x298(0x8)
	Class PopUpMessageDesc*                                      PlaceVoyageOnCaptainTablePopupDesc;                // 0x2a0(0x8)
	Class PopUpMessageDesc*                                      ReturnBootyToTraderPopupDesc;                      // 0x2a8(0x8)
	Class PopUpMessageDesc*                                      TutorialBuyClothesPopupDesc;                       // 0x2b0(0x8)
	Class PopUpMessageDesc*                                      TutorialEquipItemPopupDesc;                        // 0x2b8(0x8)
	Class FootstepIDAsset*                                       GoldHoarderToClothesShopFootstepID;                // 0x2c0(0x8)
	Class FootstepIDAsset*                                       ClothesShopToVanityChestFootstepID;                // 0x2c8(0x8)
	Class PopUpMessageDesc*                                      MermaidTutorialPopupDesc;                          // 0x2d0(0x8)
	Struct RewardId                                              OnTutorialEndedRewardId;                           // 0x2d8(0x8)
	struct FName                                                 OnTutorialEndedRewardCompanyName;                  // 0x2e0(0x8)
	class                                                        ChestInventoryInSellTreasureStep;                  // 0x2e8(0x8)
	TArray<struct FName>                                         IslandNamesWithFemaleStranger;                     // 0x2f0(0x10)
	Class PopUpMessageDesc*                                      TutorialTalkToStrangerPopupDesc;                   // 0x300(0x8)
	Class PopUpMessageDesc*                                      TutorialTalkToFemaleStrangerPopupDesc;             // 0x308(0x8)
	Class PopUpMessageDesc*                                      TutorialSellTreasurePopupDesc;                     // 0x310(0x8)
	Class PopUpMessageDesc*                                      TutorialPickUpChestPopupDesc;                      // 0x318(0x8)
	Class FootstepIDAsset*                                       StrangerToGoldHoarderFootstepID;                   // 0x320(0x8)
	Class PopUpMessageDesc*                                      ReturnToStrangerPopupDesc;                         // 0x328(0x8)
	Class PopUpMessageDesc*                                      ReturnToStrangerFemalePopupDesc;                   // 0x330(0x8)
	Class PopUpMessageDesc*                                      GoItAlonePopupDesc;                                // 0x338(0x8)
	Class PopUpMessageDesc*                                      BeginTallTalePopupDesc;                            // 0x340(0x8)
	TArray<struct EmissaryCompanyIcons>                          EmissaryCompanyIcons;                              // 0x348(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickSwitchPrimaryWeaponNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickSwitchSecondaryWeaponNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class RandomPirateLegendSectionStep: public TaleQuestStep
{
public:
};


// Size 0x70 (Full Size[0xf0] - InheritedSize[0x80]
class RandomPirateLegendSectStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVarPLSectionBundle                               SectionBundle;                                     // 0x80(0x30)
	Struct QuestVarPLSection                                     OutSection;                                        // 0xb0(0x30)
	TArray<class PirateLegendSectionFilter*>                     Filters;                                           // 0xe0(0x10)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class RatManagerComponentDataAsset: public DataAsset
{
public:
	float                                                        TurnBlendInOutPercentage;                          // 0x28(0x4)
	int                                                          NumPseudoRandomValues;                             // 0x2c(0x4)
	int                                                          FixedSeed;                                         // 0x30(0x4)
	Struct Vector                                                RatEmitterOffset;                                  // 0x34(0xc)
	Class WwiseEvent*                                            StartRatSounds;                                    // 0x40(0x8)
	Class WwiseEvent*                                            StopRatSounds;                                     // 0x48(0x8)
	Class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x50(0x8)
	int                                                          MaxNumShipsToDisplayRatsOn;                        // 0x58(0x4)
	char                                                         pad0x4_7APGO[0x4];                                 // 0x5c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      RatScale;                                          // 0x60(0x30)
	TArray<struct RatInfestationLevels>                          RatInfestationLevels;                              // 0x90(0x10)
};


// Size 0x160 (Full Size[0x528] - InheritedSize[0x3c8]
class ReapersMarkService: public Actor
{
public:
	char                                                         pad0x8_WKVEJ[0x8];                                 // 0x3c8(0x8)
	Class ReapersMarkSettingsAsset*                              Settings;                                          // 0x3d0(0x8)
	char                                                         pad0x100_3I3AI[0x100];                             // 0x3d8(0x100)
	char                                                         pad0x50_LFEM1[0x50];                               // 0x4d8(0x50)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class ReapersMarkSettingsAsset: public DataAsset
{
public:
	float                                                        PollIntervalSeconds;                               // 0x28(0x4)
	char                                                         pad0x4_CTZNV[0x4];                                 // 0x2c(0x4)
	class                                                        ReapersMarkFlag;                                   // 0x30(0x8)
	TArray<struct ShipStatusStats>                               ShipStatusStats;                                   // 0x38(0x10)
	TArray<struct SkeletonCurseStats>                            SkeletonCurseStats;                                // 0x48(0x10)
	TArray<struct ReapersMarkLevelData>                          ReapersMarkLevelData;                              // 0x58(0x10)
	Struct PlayerStat                                            StatToFireOnReapersMarkLevelIncrease;              // 0x68(0x4)
	char                                                         pad0x4_N2JDI[0x4];                                 // 0x6c(0x4)
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class ReapersMarkTrackedItemComponent: public ActorComponent
{
public:
	char                                                         pad0x10_8KIDS[0x10];                               // 0xc8(0x10)
	byte                                                         ItemType;                                          // 0xd8(0x1)
	char                                                         pad0x7_LGVK2[0x7];                                 // 0xd9(0x7)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ReceiverPuzzleStatueAudioParamsDataAsset: public DataAsset
{
public:
	Class WwiseEvent*                                            ReceiverChangingPosition;                          // 0x28(0x8)
	Class WwiseEvent*                                            GrindingStart;                                     // 0x30(0x8)
	Class WwiseEvent*                                            GrindingStop;                                      // 0x38(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RegenerationStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RegistrablePartTestInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RegistrablePartTestObject: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RegistrablePartTestObjectWithInterface: public Object
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveCriticalActorStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    ActorVar;                                          // 0x80(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveFogBankAvoidanceAreaStep: public TaleQuestStep
{
public:
	Class RemoveFogBankAvoidanceAreaStepDesc*                    StepDesc;                                          // 0x98(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveFogBankAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveMechanismTriggerStep: public TaleQuestStep
{
public:
	Class RemoveMechanismTriggerStepDesc*                        Desc;                                              // 0x98(0x8)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class RemoveMechanismTriggerStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	Struct QuestVariableActor                                    Trigger;                                           // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RendererSettingsFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RentalShip: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RepairObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class ReplenishableComponent: public ActorComponent
{
public:
	char                                                         pad0x10_A1JYH[0x10];                               // 0xc8(0x10)
	Class StorageContainerContentTypeSelector*                   ContentTypeSelector;                               // 0xd8(0x8)
	TArray<struct ContentTypeSelectors>                          ContentTypeSelectors;                              // 0xe0(0x10)
	bool                                                         ShouldRefresh;                                     // 0xf0(0x1)
	char                                                         pad0x7_9B4JP[0x7];                                 // 0xf1(0x7)
	TArray<struct DefaultStockLevels>                            DefaultStockLevels;                                // 0xf8(0x10)
	char                                                         pad0x8_7FR9Y[0x8];                                 // 0x108(0x8)
	Class Object*                                                Aggregator;                                        // 0x110(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class ResolveActorStringReferenceStep: public TaleQuestStep
{
public:
	Class ResolveActorStringReferenceStepDesc*                   Desc;                                              // 0x98(0x8)
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class ResolveActorStringReferenceStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    ActorVariable;                                     // 0x80(0x30)
	Struct StringAssetReference                                  ActorReference;                                    // 0xb0(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ResourceCache: public Object
{
public:
	TArray<struct Cache>                                         Cache;                                             // 0x28(0x10)
	char                                                         pad0x8_GNZAB[0x8];                                 // 0x38(0x8)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class ResourceProviderComponent: public ActorComponent
{
public:
};


// Size 0x20 (Full Size[0xf0] - InheritedSize[0xd0]
class CachedResourceProviderComponent: public ResourceProviderComponent
{
public:
	char                                                         pad0x18_8JVQF[0x18];                               // 0xd0(0x18)
	Class ResourceCache*                                         Cache;                                             // 0xe8(0x8)
};


// Size 0x18 (Full Size[0xe8] - InheritedSize[0xd0]
class UncachedResourceProviderComponent: public ResourceProviderComponent
{
public:
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class RespawnAndTaleProgressComponent: public ActorComponent
{
public:
	char                                                         pad0x38_67R80[0x38];                               // 0xc8(0x38)
	TArray<class ProgressSpawnLocation*>                         LinkedSpawnLocations;                              // 0x100(0x10)
	int                                                          ProgressLevel;                                     // 0x110(0x4)
	bool                                                         ClearProgress;                                     // 0x114(0x1)
	bool                                                         SetRespawnProgress;                                // 0x115(0x1)
	bool                                                         SetRespawnProgressForWholeCrew;                    // 0x116(0x1)
	bool                                                         SetTaleProgress;                                   // 0x117(0x1)
	bool                                                         SetTaleProgressForWholeCrew;                       // 0x118(0x1)
	char                                                         pad0x7_KL331[0x7];                                 // 0x119(0x7)
};


// Size 0x28 (Full Size[0x438] - InheritedSize[0x410]
class RespawnAndTaleProgressTriggerVolume: public PhysicsVolume
{
public:
	Class RespawnAndTaleProgressComponent*                       Progress;                                          // 0x410(0x8)
	bool                                                         ClearProgress;                                     // 0x418(0x1)
	char                                                         pad0x3_J9CGV[0x3];                                 // 0x419(0x3)
	int                                                          ProgressLevel;                                     // 0x41c(0x4)
	TArray<class ProgressSpawnLocation*>                         LinkedSpawnLocation;                               // 0x420(0x10)
	bool                                                         SetRespawnProgress;                                // 0x430(0x1)
	bool                                                         SetRespawnProgressForWholeCrew;                    // 0x431(0x1)
	bool                                                         SetTaleProgress;                                   // 0x432(0x1)
	bool                                                         SetTaleProgressForWholeCrew;                       // 0x433(0x1)
	char                                                         pad0x4_37DIF[0x4];                                 // 0x434(0x4)
};


// Size 0x18 (Full Size[0x480] - InheritedSize[0x468]
class RespawnStatue: public InteractableObject
{
public:
	Class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x468(0x8)
	struct FName                                                 InteractionSocketName;                             // 0x470(0x8)
	float                                                        HoldTime;                                          // 0x478(0x4)
	byte                                                         TooltipDisplayPriority;                            // 0x47c(0x1)
	char                                                         pad0x3_6W5RM[0x3];                                 // 0x47d(0x3)
};


// Size 0x90 (Full Size[0x510] - InheritedSize[0x480]
class TeleportStatue: public RespawnStatue
{
public:
	char                                                         pad0x20_YNCAP[0x20];                               // 0x480(0x20)
	Struct FText                                                 LinkedCheckpointActionRuleDescription;             // 0x4a0(0x38)
	Struct FText                                                 LinkedCheckpointWithLargeItemActionRuleDescription; // 0x4d8(0x38)
};


// Size 0x0 (Full Size[0x110] - InheritedSize[0x110]
class RetractableCharacterComponent: public RetractableComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReturnToCirclingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x1c0 (Full Size[0x288] - InheritedSize[0xc8]
class RewardComponent: public ActorComponent
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class RewardDistributionModelDataAsset: public DataAsset
{
public:
	Struct RewardDistributionModelData                           RewardDistributionModelData;                       // 0x28(0x20)
};


// Size 0x18 (Full Size[0x1a8] - InheritedSize[0x190]
class SovereignRewardHandInComponent: public RewardHandInComponent
{
public:
	TArray<struct CompanyToBootyTypes>                           CompanyToBootyTypes;                               // 0x190(0x10)
	Class SovereignData*                                         SovereignData;                                     // 0x1a0(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class RewardPopUpNotificationDataAsset: public DataAsset
{
public:
	struct FName                                                 FeatureToggle;                                     // 0x28(0x8)
	TArray<struct RewardPopUpNotifications>                      RewardPopUpNotifications;                          // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RewardPopUpNotificationCollectionDataAsset: public DataAsset
{
public:
	TArray<class RewardPopUpNotificationDataAsset*>              RewardPopUpNotifications;                          // 0x28(0x10)
};


// Size 0x140 (Full Size[0x970] - InheritedSize[0x830]
class RiddleMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x828(0x4)
	int                                                          CanvasHeight;                                      // 0x82c(0x4)
	float                                                        RevealDuration;                                    // 0x830(0x4)
	float                                                        RiddleGateCompleteRampInDuration;                  // 0x834(0x4)
	float                                                        RiddleGateCompleteRampOutDuration;                 // 0x838(0x4)
	char                                                         pad0x4_HK1P1[0x4];                                 // 0x83c(0x4)
	Struct RiddleTextRenderer                                    RiddleTextRenderer;                                // 0x840(0x58)
	Struct RiddleMapContents                                     Contents;                                          // 0x898(0x18)
	Struct StringAssetReference                                  MapInventoryTexturePath;                           // 0x8b0(0x10)
	float                                                        Rotation;                                          // 0x8c0(0x4)
	char                                                         pad0xac_8N9EG[0xac];                               // 0x8c4(0xac)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RightTriggerAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RivalVoteButtonNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x8 (Full Size[0x2a0] - InheritedSize[0x298]
class RivalVotingInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class MeshRotatorComponent: public ActorComponent
{
public:
	Struct Rotator                                               RotationRate;                                      // 0xc8(0xc)
	char                                                         pad0x4_OYDGZ[0x4];                                 // 0xd4(0x4)
	TArray<class MeshComponent*>                                 Meshes;                                            // 0xd8(0x10)
	char                                                         pad0x28_9L3J8[0x28];                               // 0xe8(0x28)
};


// Size 0x58 (Full Size[0x168] - InheritedSize[0x110]
class RotatingAudioSourceComponent: public MeshRotatorComponent
{
public:
	Class WwiseObjectPoolWrapper*                                RotatingObjectPool;                                // 0x110(0x8)
	Class WwiseEvent*                                            PlayWwiseEvent;                                    // 0x118(0x8)
	Class WwiseEvent*                                            StopWwiseEvent;                                    // 0x120(0x8)
	struct FName                                                 PitchRtpcName;                                     // 0x128(0x8)
	struct FName                                                 RollRtpcName;                                      // 0x130(0x8)
	struct FName                                                 YawRtpcName;                                       // 0x138(0x8)
	float                                                        RtpcMax;                                           // 0x140(0x4)
	char                                                         pad0x24_EALD7[0x24];                               // 0x144(0x24)
};


// Size 0x78 (Full Size[0x440] - InheritedSize[0x3c8]
class Rudder: public Actor
{
public:
	char                                                         pad0x8_OHI4O[0x8];                                 // 0x3c8(0x8)
	float                                                        AngleBlend;                                        // 0x3d0(0x4)
	float                                                        MaxAngle;                                          // 0x3d4(0x4)
	Struct Vector                                                PositionForRudderDynamicsRelativeToRudderActor;    // 0x3d8(0xc)
	Struct Vector                                                RelativeRightShipDir;                              // 0x3e4(0xc)
	Class BaseRudderDynamicsDesc*                                RudderDynamicsDesc;                                // 0x3f0(0x8)
	char                                                         pad0x18_3DMDI[0x18];                               // 0x3f8(0x18)
	float                                                        ServerAngleRatio;                                  // 0x410(0x4)
	char                                                         pad0x2c_9EQAB[0x2c];                               // 0x414(0x2c)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class Rugs: public Actor
{
public:
	Class StaticMeshComponent*                                   RugMeshComponent;                                  // 0x3c8(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x3d0(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RugsPartDescAsset: public ShipPartDescAsset
{
public:
	Struct RugsPartDesc                                          RugsPartDesc;                                      // 0x28(0x8)
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class RumbleHandlerComponent: public ActorComponent
{
public:
	TArray<struct RumbleParameters>                              RumbleParameters;                                  // 0xc8(0x10)
	char                                                         pad0x40_C8V3O[0x40];                               // 0xd8(0x40)
};


// Size 0x1a8 (Full Size[0x570] - InheritedSize[0x3c8]
class Sail: public Actor
{
public:
	char                                                         pad0x10_UYWP6[0x10];                               // 0x3c8(0x10)
	Class SkeletalMeshComponent*                                 Mesh;                                              // 0x3d8(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x3e0(0x10)
	Struct Vector                                                PositionForSailDynamicsRelativeToSailActor;        // 0x3f0(0xc)
	char                                                         pad0x4_YKVTX[0x4];                                 // 0x3fc(0x4)
	Class BaseSailDynamicsDesc*                                  SailDynamicsDesc;                                  // 0x400(0x8)
	float                                                        MinRelativeWindSpdForFullVisibleInflation;         // 0x408(0x4)
	float                                                        BaseWindStrength;                                  // 0x40c(0x4)
	Class CurveFloat*                                            WindToSailAngleEfficiencyCurve;                    // 0x410(0x8)
	float                                                        NormalBillowLimit;                                 // 0x418(0x4)
	float                                                        PerfectBillowValue;                                // 0x41c(0x4)
	float                                                        PerfectBillowThreshold;                            // 0x420(0x4)
	float                                                        SailLoweredPerfectWindThreshold;                   // 0x424(0x4)
	float                                                        BlendSpeed;                                        // 0x428(0x4)
	struct FName                                                 FurlMaterialParameterName;                         // 0x42c(0x8)
	float                                                        AnimationSailHeightScalar;                         // 0x434(0x4)
	char                                                         pad0x104_3YXI2[0x104];                             // 0x438(0x104)
	float                                                        DamageScalar;                                      // 0x53c(0x4)
	char                                                         pad0x30_EXFVC[0x30];                               // 0x540(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailAnimInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x4a0] - InheritedSize[0x440]
class SailAnimInstance: public AnimInstance
{
public:
	char                                                         pad0x8_6DV4M[0x8];                                 // 0x440(0x8)
	float                                                        Turning;                                           // 0x448(0x4)
	float                                                        Billow;                                            // 0x44c(0x4)
	float                                                        WindStrength;                                      // 0x450(0x4)
	float                                                        Height;                                            // 0x454(0x4)
	float                                                        Falling;                                           // 0x458(0x4)
	float                                                        BillowedWindStrength;                              // 0x45c(0x4)
	float                                                        BillowedSailHalfwayPoint;                          // 0x460(0x4)
	float                                                        HeightTimesThree;                                  // 0x464(0x4)
	float                                                        MinOneMinusHeightAndOne;                           // 0x468(0x4)
	float                                                        MaximumMainSailDrop;                               // 0x46c(0x4)
	float                                                        LaxAnimationFoldUpwardsExplicitTime;               // 0x470(0x4)
	float                                                        LaxAnimationFoldUpwardsAlpha;                      // 0x474(0x4)
	float                                                        LaxAnimationWithWindAlpha;                         // 0x478(0x4)
	float                                                        LaxAnimationWithWindAlphaUnfurledA;                // 0x47c(0x4)
	float                                                        LaxAnimationWithWindAlphaUnfurledB;                // 0x480(0x4)
	float                                                        BillowedFoldAnimationWithWindModulationBillowedAlphaUnfurled; // 0x484(0x4)
	float                                                        BillowedFoldAnimationWithWindModulationLaxAlphaUnfurled; // 0x488(0x4)
	float                                                        BetweenZeroAndHalfBillowedFoldAnimationWithFullWindBlendAlpha; // 0x48c(0x4)
	float                                                        BetweenZeroAndHalfBillowedFoldAnimationWithFullWindAdditiveAlpha; // 0x490(0x4)
	float                                                        BetweenHalfAndOneBillowedFoldAnimationBlendAlpha;  // 0x494(0x4)
	float                                                        TurningMapRangeUnclamped;                          // 0x498(0x4)
	float                                                        PlayRateMultiplier;                                // 0x49c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SailHeightStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailHoistTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailManipulatorBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x580] - InheritedSize[0x580]
class SalvageItemSpawnComponentMock: public SalvageItemSpawnComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SatiatedStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ScaldedStatus: public StatusBase
{
public:
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class ScoreRewardDataAsset: public DataAsset
{
public:
	Struct ScoreRewardData                                       ScoreRewardData;                                   // 0x28(0xe0)
	TArray<struct ScoreReasonIcons>                              ScoreReasonIcons;                                  // 0x108(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ScrambleGamertagsToggleInputId: public NotificationInputId
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class ScreenSpaceVFXComponentParams: public DataAsset
{
public:
	float                                                        EffectStrengthSpringAcceleration;                  // 0x28(0x4)
	char                                                         pad0x4_2Z886[0x4];                                 // 0x2c(0x4)
	Class CurveFloat*                                            EffectStrengthOverTimeCurve;                       // 0x30(0x8)
	float                                                        ContinuousDamageStrengthSpringAcceleration;        // 0x38(0x4)
	char                                                         pad0x4_UTQ8I[0x4];                                 // 0x3c(0x4)
	Class CurveFloat*                                            ContinuousDamageTimeCurve;                         // 0x40(0x8)
	float                                                        ContinuousDamageMaxDamageValue;                    // 0x48(0x4)
	float                                                        ContinuousDamageMaxDamageStrength;                 // 0x4c(0x4)
	float                                                        ContinuousDamageCycleTime;                         // 0x50(0x4)
	struct FName                                                 VFXNameDamage;                                     // 0x54(0x8)
	char                                                         pad0x4_7RMTO[0x4];                                 // 0x5c(0x4)
	Struct FString                                               DirectionalDamageIndicatorParameterName;           // 0x60(0x10)
	float                                                        DirectionalDamageIndicatorLifetime;                // 0x70(0x4)
	char                                                         pad0x4_39M6A[0x4];                                 // 0x74(0x4)
	Class CurveFloat*                                            DrowningEffectStrengthOverTimeCurve;               // 0x78(0x8)
	struct FName                                                 VFXNameDrowning;                                   // 0x80(0x8)
	struct FName                                                 VFXNameStunned;                                    // 0x88(0x8)
	struct FName                                                 VFXNameBoundsDarkness;                             // 0x90(0x8)
};


// Size 0x588 (Full Size[0x650] - InheritedSize[0xc8]
class ScreenSpaceVfxComponent: public ActorComponent
{
public:
	Class ScreenSpaceVFXComponentParams*                         Params;                                            // 0xc8(0x8)
	char                                                         pad0x8_VS08S[0x8];                                 // 0xd0(0x8)
	TArray<class ParticleSystemComponent*>                       ScreenSpaceParticleSystems;                        // 0xd8(0x10)
	char                                                         pad0x568_RPT4J[0x568];                             // 0xe8(0x568)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ScuttleDamagerType: public DamagerType
{
public:
};


// Size 0x120 (Full Size[0x148] - InheritedSize[0x28]
class SeagullManagerComponentDataAsset: public DataAsset
{
public:
	float                                                        TurnBlendInOutPercentage;                          // 0x28(0x4)
	int                                                          NumPseudoRandomValues;                             // 0x2c(0x4)
	int                                                          FixedSeed;                                         // 0x30(0x4)
	Struct Vector                                                SeagullEmitterOffset;                              // 0x34(0xc)
	Class WwiseEvent*                                            StartSeagullSounds;                                // 0x40(0x8)
	Class WwiseEvent*                                            StopSeagullSounds;                                 // 0x48(0x8)
	Class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x50(0x8)
	int                                                          MaxNumShipsToDisplaySeagullsOn;                    // 0x58(0x4)
	char                                                         pad0x4_55FMD[0x4];                                 // 0x5c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      SeagullScale;                                      // 0x60(0x30)
	Struct WeightedProbabilityRangeOfRanges                      SeagullSpawnFrequency;                             // 0x90(0x30)
	Struct WeightedProbabilityRangeOfRanges                      SeagullSpeed;                                      // 0xc0(0x30)
	TArray<struct Banks>                                         Banks;                                             // 0xf0(0x10)
	Struct WeightedProbabilityRange                              NumInFormation;                                    // 0x100(0x20)
	TArray<struct Formations>                                    Formations;                                        // 0x120(0x10)
	double                                                       Modulo;                                            // 0x130(0x8)
	TArray<struct Intervals>                                     Intervals;                                         // 0x138(0x10)
};


// Size 0x10 (Full Size[0x430] - InheritedSize[0x420]
class Seagulls: public ShortRangeMarker
{
public:
	char                                                         pad0x8_DQGT0[0x8];                                 // 0x420(0x8)
	bool                                                         ShouldMigrate;                                     // 0x428(0x1)
	char                                                         pad0x7_PK4O5[0x7];                                 // 0x429(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SeaIdValidationDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         AllSeaIds;                                         // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SelectionOfSirenStatues: public Object
{
public:
	TArray<Assetclass Statues>                                   Statues;                                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SelectRewardStep: public TaleQuestStep
{
public:
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class SelectRewardStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableItemSpawnDataTypeArray                   ItemSpawnDatas;                                    // 0x80(0x30)
	Struct QuestVariableItemSpawnDataType                        QuestItemSpawnData;                                // 0xb0(0x30)
	int                                                          NumberOfItemsToSpawn;                              // 0xe0(0x4)
	bool                                                         SelectChestsOnly;                                  // 0xe4(0x1)
	char                                                         pad0x3_F3QWU[0x3];                                 // 0xe5(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SenseInitialReactionAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SenseSearchingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x88 (Full Size[0x5c8] - InheritedSize[0x540]
class ServerIslandPerfTestGameState: public ServiceProviderGameState
{
public:
	char                                                         pad0x58_JLM9N[0x58];                               // 0x540(0x58)
	Struct GameServiceCoordinator                                ServiceCoordinator;                                // 0x598(0x20)
	Class PerfTestIslandService*                                 IslandService;                                     // 0x5b8(0x8)
	Class FFTWaterService*                                       WaterService;                                      // 0x5c0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetworkedEventsWhitelistDefinition: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ServerNetworkedEventsWhitelistDefinition: public NetworkedEventsWhitelistDefinition
{
public:
	TArray<class ScriptStruct*>                                  ValidEvents;                                       // 0x28(0x10)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class ServerPerformanceReplicator: public Actor
{
public:
	float                                                        ServerAverageFPS;                                  // 0x3c8(0x4)
	float                                                        ServerAverageMS;                                   // 0x3cc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerUpdateReportingServiceInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class ServerUpdateReportingService: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServiceProviderInterfaceTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServiceStatusNotificationsServiceInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x468] - InheritedSize[0x3c8]
class ServiceStatusNotificationsService: public Actor
{
public:
	char                                                         pad0x8_WN5FM[0x8];                                 // 0x3c8(0x8)
	TArray<struct ActiveNotifications>                           ActiveNotifications;                               // 0x3d0(0x10)
	char                                                         pad0x80_P6A93[0x80];                               // 0x3e0(0x80)
	char                                                         pad0x8_SXJEN[0x8];                                 // 0x460(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetHiddenOnKeyTakenStep: public TaleQuestStep
{
public:
	Class SetHiddenOnKeyTakenStepDesc*                           StepDesc;                                          // 0x98(0x8)
};


// Size 0x80 (Full Size[0x100] - InheritedSize[0x80]
class SetHiddenOnKeyTakenStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    CutsceneLockNPC;                                   // 0x80(0x30)
	Struct QuestVariableActor                                    SequencerCutSceneActor;                            // 0xb0(0x30)
	Class LevelSequence*                                         LevelSequence;                                     // 0xe0(0x8)
	Struct FString                                               ActorName;                                         // 0xe8(0x10)
	bool                                                         Visible;                                           // 0xf8(0x1)
	char                                                         pad0x7_GYE29[0x7];                                 // 0xf9(0x7)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetMechanismActionCutsceneActorStep: public TaleQuestStep
{
public:
	Class SetMechanismActionCutsceneActorStepDesc*               Desc;                                              // 0x98(0x8)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class SetMechanismActionCutsceneActorStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    CutSceneActor;                                     // 0x80(0x30)
	Struct QuestVariableActor                                    MechanismActor;                                    // 0xb0(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetMechanismActionCutsceneNameStep: public TaleQuestStep
{
public:
	Class SetMechanismActionCutsceneNameStepDesc*                Desc;                                              // 0x98(0x8)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetMechanismActionCutsceneNameStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 CutsceneName;                                      // 0x80(0x8)
	Struct QuestVariableActor                                    MechanismActor;                                    // 0x88(0x30)
};


// Size 0x60 (Full Size[0xf8] - InheritedSize[0x98]
class SetMechanismActionStateStep: public TaleQuestStep
{
public:
	char                                                         pad0x48_JGR4C[0x48];                               // 0x98(0x48)
	Class SetMechanismActionStateStepDesc*                       Desc;                                              // 0xe0(0x8)
	byte                                                         TriggerState;                                      // 0xe8(0x1)
	byte                                                         TriggerType;                                       // 0xe9(0x1)
	char                                                         pad0xe_6XEVD[0xe];                                 // 0xea(0xe)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetMechanismActionStateStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    MechanismAction;                                   // 0x80(0x30)
	byte                                                         NewState;                                          // 0xb0(0x1)
	char                                                         pad0x7_T4RDJ[0x7];                                 // 0xb1(0x7)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetMechanismActivationModeStep: public TaleQuestStep
{
public:
	Class SetMechanismActivationModeStepDesc*                    Desc;                                              // 0x98(0x8)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetMechanismActivationModeStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	byte                                                         ActivationMode;                                    // 0xb0(0x1)
	char                                                         pad0x7_A9QRC[0x7];                                 // 0xb1(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SetPuzzleVaultResetOnLeaveStep: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SetPuzzleVaultResetOnLeaveStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
	bool                                                         CanVaultResetOnceAllPlayersLeave;                  // 0xb0(0x1)
	char                                                         pad0x7_FUYEY[0x7];                                 // 0xb1(0x7)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetSpawnProgressStep: public TaleQuestStep
{
public:
	Class SetSpawnProgressStepDesc*                              StepDesc;                                          // 0x98(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class SetSpawnProgressStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    TriggerVolume;                                     // 0x80(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SetTaleProgressStep: public TaleQuestStep
{
public:
	Class SetTaleProgressStepDesc*                               StepDesc;                                          // 0x98(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class SetTaleProgressStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    TriggerVolume;                                     // 0x80(0x30)
};


// Size 0x30 (Full Size[0xc0] - InheritedSize[0x90]
class ShadowAIFormDataAsset: public AthenaAIFormDataAsset
{
public:
	float                                                        LightStateActivationTime;                          // 0x90(0x4)
	float                                                        LightStateCooldown;                                // 0x94(0x4)
	float                                                        PlayerLanternIdleLightRange;                       // 0x98(0x4)
	float                                                        PlayerLanternRaisedLightRange;                     // 0x9c(0x4)
	float                                                        FlareLightRange;                                   // 0xa0(0x4)
	float                                                        LightExposureStunDuration;                         // 0xa4(0x4)
	TArray<Byte FlamePhobias>                                    FlamePhobias;                                      // 0xa8(0x10)
	bool                                                         AfraidOfLight;                                     // 0xb8(0x1)
	char                                                         pad0x7_MR1V2[0x7];                                 // 0xb9(0x7)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ShadowAIFormProximityPlayerTracker: public AIPlayerTracker
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShantyItemDescToSlotRemappingDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         Slots;                                             // 0x28(0x10)
};


// Size 0x98 (Full Size[0x110] - InheritedSize[0x78]
class ShantyRadialContentRule: public RadialContentRule
{
public:
	char                                                         pad0x28_SVZZU[0x28];                               // 0x78(0x28)
	TArray<class ShantyItemDesc*>                                CachedShanties;                                    // 0xa0(0x10)
	Struct FText                                                 ShuffleTitle;                                      // 0xb0(0x38)
	Struct StringAssetReference                                  ShuffleIcon;                                       // 0xe8(0x10)
	Struct StringAssetReference                                  ShuffleBackground;                                 // 0xf8(0x10)
	Class ShantyItemDescToSlotRemappingDataAsset*                RemappingDataAsset;                                // 0x108(0x8)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class ShantyService: public Object
{
public:
	char                                                         pad0x8_IZ287[0x8];                                 // 0x28(0x8)
	TArray<class Ensemble*>                                      EnsembleActors;                                    // 0x30(0x10)
	Class ShantySettings*                                        ShantySettings;                                    // 0x40(0x8)
	char                                                         pad0x60_4UM5L[0x60];                               // 0x48(0x60)
};


// Size 0x40 (Full Size[0x408] - InheritedSize[0x3c8]
class ShantyZone: public Actor
{
public:
	Class OverlapTriggerComponent*                               AudioZone;                                         // 0x3c8(0x8)
	class                                                        BaseInstrument;                                    // 0x3d0(0x8)
	char                                                         pad0x10_4RYFH[0x10];                               // 0x3d8(0x10)
	Class PrimitiveComponent*                                    Root;                                              // 0x3e8(0x8)
	TArray<class Actor*>                                         PlayersInZone;                                     // 0x3f0(0x10)
	Class MusicalInstrument*                                     Instrument;                                        // 0x400(0x8)
};


// Size 0x48 (Full Size[0x410] - InheritedSize[0x3c8]
class SharkActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	Struct AISpawnActionStateParams                              AISpawnParams;                                     // 0x3c8(0x10)
	Struct AISwimmingCreatureDeadActionStateParams               AIDeadParams;                                      // 0x3d8(0x20)
	char                                                         pad0x18_5IFU5[0x18];                               // 0x3f8(0x18)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class SharkAICharacterAudioComponentParams: public DataAsset
{
public:
	Class WwiseEvent*                                            PlaySharkAttackTellLoop;                           // 0x28(0x8)
	Class WwiseEvent*                                            StopSharkAttackTellLoop;                           // 0x30(0x8)
	Class WwiseEvent*                                            PlaySharkDeath;                                    // 0x38(0x8)
	Class WwiseEvent*                                            PlaySharkHit;                                      // 0x40(0x8)
	Class WwiseEvent*                                            PlaySharkFinLoop;                                  // 0x48(0x8)
	Class WwiseEvent*                                            StopSharkFinLoop;                                  // 0x50(0x8)
	struct FName                                                 SharkFinUnderwaterSwitchGroup;                     // 0x58(0x8)
	struct FName                                                 SharkFinUnderwaterSwitchAboveWater;                // 0x60(0x8)
	struct FName                                                 SharkFinUnderwaterSwitchUnderwater;                // 0x68(0x8)
	struct FName                                                 SharkSpeedFactorRtpc;                              // 0x70(0x8)
};


// Size 0x180 (Full Size[0x490] - InheritedSize[0x310]
class SharkAICharacterAudioComponent: public AICharacterAudioComponent
{
public:
	Class SharkAICharacterAudioComponentParams*                  SharkAudioParams;                                  // 0x310(0x8)
	char                                                         pad0x160_60R5P[0x160];                             // 0x318(0x160)
	class                                                        CachedStrategyID;                                  // 0x478(0x8)
	char                                                         pad0x10_M3QWD[0x10];                               // 0x480(0x10)
};


// Size 0x0 (Full Size[0x1840] - InheritedSize[0x1840]
class DebugRegisterDynamicsShip: public Ship
{
public:
};


// Size 0x10 (Full Size[0x1850] - InheritedSize[0x1840]
class FixedWaterHeightShip: public Ship
{
public:
	Class FixedWaterHeightShipComponent*                         FixedWaterHeightComponent;                         // 0x1840(0x8)
	char                                                         pad0x8_UGAEA[0x8];                                 // 0x1848(0x8)
};


// Size 0x20 (Full Size[0x1860] - InheritedSize[0x1840]
class ShipErrorOnNonAuthorityPhysicsChange: public Ship
{
public:
	Class BaseHullDragDynamicsDesc*                              HullDragDynamicsDesc;                              // 0x1840(0x8)
	char                                                         pad0x18_OI1RI[0x18];                               // 0x1848(0x18)
};


// Size 0x10 (Full Size[0x1850] - InheritedSize[0x1840]
class TestShipActorPhysicsErrorCorrection: public Ship
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipAssetClassDatabaseInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipAssetClassDatabaseService: public Object
{
public:
	char                                                         pad0x8_9565V[0x8];                                 // 0x28(0x8)
	Class StringToAssetClassMap*                                 StringToAssetClassMap;                             // 0x30(0x8)
};


// Size 0xa0 (Full Size[0x468] - InheritedSize[0x3c8]
class ShipAudio: public Actor
{
public:
	char                                                         pad0x18_0AKBU[0x18];                               // 0x3c8(0x18)
	Class Ship*                                                  ParentShip;                                        // 0x3e0(0x8)
	char                                                         pad0x80_60EBK[0x80];                               // 0x3e8(0x80)
};


// Size 0x10 (Full Size[0x320] - InheritedSize[0x310]
class ShipAudioEmitterComponent: public WwiseEmitterComponent
{
public:
	Class WwiseEvent*                                            WwiseEvent;                                        // 0x310(0x8)
	bool                                                         SetRTPC_Pitch;                                     // 0x318(0x1)
	bool                                                         SetRTPC_Roll;                                      // 0x319(0x1)
	bool                                                         SetRTPC_Velocity;                                  // 0x31a(0x1)
	char                                                         pad0x5_5D6TR[0x5];                                 // 0x31b(0x5)
};


// Size 0x1d0 (Full Size[0x638] - InheritedSize[0x468]
class ShipHullAudio: public ShipAudio
{
public:
	Class WwiseEvent*                                            WwiseEvent_ShipSinking;                            // 0x468(0x8)
	Class WwiseEvent*                                            WwiseEvent_ShipSinkingExceededRollThreshold;       // 0x470(0x8)
	Class WwiseEvent*                                            WwiseEvent_FloodDamage_Play;                       // 0x478(0x8)
	Class WwiseEvent*                                            WwiseEvent_FloodDamage_Stop;                       // 0x480(0x8)
	Class WwiseEvent*                                            WwiseEvent_ShipStrain_Play;                        // 0x488(0x8)
	Class WwiseEvent*                                            WwiseEvent_ShipStrain_Stop;                        // 0x490(0x8)
	Class WwiseEvent*                                            WwiseEvent_SuperheatedWater_Play;                  // 0x498(0x8)
	Class WwiseEvent*                                            WwiseEvent_SuperheatedWater_Stop;                  // 0x4a0(0x8)
	Class WwiseEvent*                                            WwiseEvent_ShipSinking_Music;                      // 0x4a8(0x8)
	Class WwiseEvent*                                            WwiseEvent_ShroudBreakerShield;                    // 0x4b0(0x8)
	Class WwiseEvent*                                            WwiseEvent_InvasionShipDive;                       // 0x4b8(0x8)
	Class WwiseEvent*                                            WwiseEvent_InvasionShipSurface;                    // 0x4c0(0x8)
	Class WwiseObjectPoolWrapper*                                WwiseEvent_ShipSinking_Music_Pool;                 // 0x4c8(0x8)
	Class WwiseObjectPoolWrapper*                                Emitter_MidShip_Pool;                              // 0x4d0(0x8)
	struct FName                                                 RTPC_ShipRoll;                                     // 0x4d8(0x8)
	struct FName                                                 RTPC_ShipPitch;                                    // 0x4e0(0x8)
	struct FName                                                 RTPC_FloodDamage;                                  // 0x4e8(0x8)
	struct FName                                                 RTPC_ShipVelocity;                                 // 0x4f0(0x8)
	struct FName                                                 RTPC_ShipStrain;                                   // 0x4f8(0x8)
	struct FName                                                 RTPC_SuperheatedWaterIntensity;                    // 0x500(0x8)
	float                                                        PositionTolerance;                                 // 0x508(0x4)
	float                                                        MaxVelocity;                                       // 0x50c(0x4)
	float                                                        SinkingShipRollThreshold;                          // 0x510(0x4)
	char                                                         pad0x4_Z0MT3[0x4];                                 // 0x514(0x4)
	Class SceneComponent*                                        ShipAudioRootComponent;                            // 0x518(0x8)
	TArray<struct ShipHullAudioDataArray>                        ShipHullAudioDataArray;                            // 0x520(0x10)
	char                                                         pad0xc0_0SA2U[0xc0];                               // 0x530(0xc0)
	Class ShipInternalWater*                                     InternalWater;                                     // 0x5f0(0x8)
	Struct WwiseEmitter                                          Emitter_MidShip;                                   // 0x5f8(0x20)
	Struct WwiseEmitter                                          ShipSinkingMusicEmitter;                           // 0x618(0x20)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class ShipBuilder: public Object
{
public:
	char                                                         pad0x30_5I8C8[0x30];                               // 0x28(0x30)
	Class Ship*                                                  Template;                                          // 0x58(0x8)
	char                                                         pad0x28_TLLPX[0x28];                               // 0x60(0x28)
};


// Size 0x70 (Full Size[0x438] - InheritedSize[0x3c8]
class ShipCompass: public Actor
{
public:
	Class PoseableMeshComponent*                                 CompassMesh;                                       // 0x3c8(0x8)
	struct FName                                                 DialBoneName;                                      // 0x3d0(0x8)
	Class CompassSpinComponent*                                  SpinComponent;                                     // 0x3d8(0x8)
	char                                                         pad0x58_ZRU4N[0x58];                               // 0x3e0(0x58)
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class ShipCreatureManagerComponent: public ActorComponent
{
public:
	TArray<struct CreatureMeshComponents>                        CreatureMeshComponents;                            // 0xc8(0x10)
	TArray<struct CreatureInstances>                             CreatureInstances;                                 // 0xd8(0x10)
	Class SceneComponent*                                        CreatureMeshAttachParent;                          // 0xe8(0x8)
	char                                                         pad0x58_H14ZO[0x58];                               // 0xf0(0x58)
};


// Size 0x68 (Full Size[0x1b0] - InheritedSize[0x148]
class RatManagerComponent: public ShipCreatureManagerComponent
{
public:
	Class RatManagerComponentDataAsset*                          DataAsset;                                         // 0x148(0x8)
	char                                                         pad0x60_X3ON9[0x60];                               // 0x150(0x60)
};


// Size 0x40 (Full Size[0x188] - InheritedSize[0x148]
class SeagullManagerComponent: public ShipCreatureManagerComponent
{
public:
	Class SeagullManagerComponentDataAsset*                      DataAsset;                                         // 0x148(0x8)
	char                                                         pad0x38_9P4XN[0x38];                               // 0x150(0x38)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ShipCreatureManagerCreatureInstanceMotionModifierDataAsset: public DataAsset
{
public:
	TArray<class CurveFloat*>                                    SpeedModifierCurves;                               // 0x28(0x10)
	TArray<class CurveFloat*>                                    RollCurves;                                        // 0x38(0x10)
	TArray<class CurveVector*>                                   OffsetCurves;                                      // 0x48(0x10)
};


// Size 0xc8 (Full Size[0x238] - InheritedSize[0x170]
class ShipCustomizationChestViewModelComponent: public PossessionsChestViewModel
{
public:
	class                                                        AllianceFlagCategory;                              // 0x170(0x8)
	class                                                        JoinAllianceDesc;                                  // 0x178(0x8)
	class                                                        LeaveAllianceDesc;                                 // 0x180(0x8)
	class                                                        LastRequestedCategory;                             // 0x188(0x8)
	Class ShipCustomizationSettings*                             ShipCustomizationSettings;                         // 0x190(0x8)
	Struct StringAssetReference                                  ClearIcon;                                         // 0x198(0x10)
	char                                                         pad0x50_Q52Q7[0x50];                               // 0x1a8(0x50)
	TArray<class Class*>                                         Categories;                                        // 0x1f8(0x10)
	bool                                                         IncludeAllCategory;                                // 0x208(0x1)
	char                                                         pad0x7_3YR87[0x7];                                 // 0x209(0x7)
	TArray<struct MutualExclusions>                              MutualExclusions;                                  // 0x210(0x10)
	TArray<class Class*>                                         CategoriesExcludedFromCaptainsPermissions;         // 0x220(0x10)
	char                                                         pad0x8_CGPY6[0x8];                                 // 0x230(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipDescGeneratorTestFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x48 (Full Size[0x410] - InheritedSize[0x3c8]
class ShipDynamicsProviderActor: public Actor
{
public:
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class ShipEmbedToken: public Actor
{
public:
};


// Size 0xb8 (Full Size[0x180] - InheritedSize[0xc8]
class ShipEntitlementComponent: public ActorComponent
{
public:
	char                                                         pad0x10_02IFB[0x10];                               // 0xc8(0x10)
	TArray<struct VoyageInventory>                               VoyageInventory;                                   // 0xd8(0x10)
	char                                                         pad0x98_7W7N8[0x98];                               // 0xe8(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipFactoryInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipFactory: public Object
{
public:
	char                                                         pad0x8_1G54H[0x8];                                 // 0x28(0x8)
	TArray<class ShipBuilder*>                                   Builders;                                          // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0xf8 (Full Size[0x1c0] - InheritedSize[0xc8]
class ShipHullCollisionComponent: public ActorComponent
{
public:
	float                                                        SolidCollisionRetainTime;                          // 0xc8(0x4)
	float                                                        LandCollisionRetainTime;                           // 0xcc(0x4)
	Class CurveFloat*                                            ImpactStrengthToDamageLevelMapping;                // 0xd0(0x8)
	float                                                        MinIntervalBetweenHitDamage;                       // 0xd8(0x4)
	float                                                        MinIntervalBetweenLandscapeHitDamage;              // 0xdc(0x4)
	float                                                        MinIntervalBetweenShipHitDamage;                   // 0xe0(0x4)
	char                                                         pad0x4_AQ7UZ[0x4];                                 // 0xe4(0x4)
	Class ShipHullDamageDataAsset*                               HullDamageDataAsset;                               // 0xe8(0x8)
	Class CurveFloat*                                            ShipFwdSpeedToFeedbackAmplitude;                   // 0xf0(0x8)
	TArray<class ForceFeedbackEffect*>                           HitLandForceFeedbackEffects;                       // 0xf8(0x10)
	Class CurveFloat*                                            FeedbackStrengthToRumbleIndexMapping;              // 0x108(0x8)
	class                                                        CameraShake;                                       // 0x110(0x8)
	float                                                        MinIntervalBetweenHitFeedback;                     // 0x118(0x4)
	char                                                         pad0x4_4F97M[0x4];                                 // 0x11c(0x4)
	Class WwiseEvent*                                            StartScrapingEvent;                                // 0x120(0x8)
	Class WwiseEvent*                                            StopScrapingEvent;                                 // 0x128(0x8)
	Class WwiseEvent*                                            BarrelBumpEvent;                                   // 0x130(0x8)
	Class WwiseObjectPoolWrapper*                                ShipDamagePool;                                    // 0x138(0x8)
	struct FName                                                 ShipDamageImpactRtpc;                              // 0x140(0x8)
	float                                                        MaxIntervalToDetermineAudioScrape;                 // 0x148(0x4)
	float                                                        MinSampledSpeedMagnitudeForMaxScrapeAudio;         // 0x14c(0x4)
	char                                                         pad0x10_EICH8[0x10];                               // 0x150(0x10)
	Class Ship*                                                  Ship;                                              // 0x160(0x8)
	char                                                         pad0x58_ZANJS[0x58];                               // 0x168(0x58)
};


// Size 0x108 (Full Size[0x1d0] - InheritedSize[0xc8]
class ShipLightComponent: public ActorComponent
{
public:
	char                                                         pad0x8_WI6PH[0x8];                                 // 0xc8(0x8)
	TArray<Byte DormantShipRegions>                              DormantShipRegions;                                // 0xd0(0x10)
	bool                                                         ExposeToNetProxy;                                  // 0xe0(0x1)
	char                                                         pad0x3_ENCU3[0x3];                                 // 0xe1(0x3)
	int                                                          NetProxyBitIndex;                                  // 0xe4(0x4)
	Class InteractableLightParameters*                           LightParameters;                                   // 0xe8(0x8)
	char                                                         pad0x1_6V2F6[0x1];                                 // 0xf0(0x1)
	bool                                                         LightIsOn_Server;                                  // 0xf1(0x1)
	char                                                         pad0x16_8GXNG[0x16];                               // 0xf2(0x16)
	TArray<class PointLightComponent*>                           Lights;                                            // 0x108(0x10)
	char                                                         pad0xb8_Q92YR[0xb8];                               // 0x118(0xb8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipLiveryCatalogueService: public Object
{
public:
	char                                                         pad0x8_Q6KBI[0x8];                                 // 0x28(0x8)
	TArray<struct CatalogEntries>                                CatalogEntries;                                    // 0x30(0x10)
};


// Size 0x110 (Full Size[0x1d8] - InheritedSize[0xc8]
class ShipMilestoneEntitlementComponent: public ActorComponent
{
public:
	char                                                         pad0x10_SRDWW[0x10];                               // 0xc8(0x10)
	Struct PlayerEntitlementsCompact                             ReplicatedEntitlements;                            // 0xd8(0x38)
	Struct PlayerEntitlements                                    Entitlements;                                      // 0x110(0x80)
	char                                                         pad0x48_VNMFA[0x48];                               // 0x190(0x48)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipNamesDataAsset: public DataAsset
{
public:
	TArray<struct FText>                                         Names;                                             // 0x28(0x10)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class NetProxy: public Actor
{
public:
	char                                                         pad0x10_H0QRB[0x10];                               // 0x3c8(0x10)
	Class Actor*                                                 OwningActor;                                       // 0x3d8(0x8)
	Class StaticMeshComponent*                                   Mesh;                                              // 0x3e0(0x8)
	float                                                        MinimumNetRelevancyDistanceFraction;               // 0x3e8(0x4)
	float                                                        DepthCutOffForNonReplication;                      // 0x3ec(0x4)
	char                                                         pad0x8_7EOMD[0x8];                                 // 0x3f0(0x8)
};


// Size 0xb8 (Full Size[0x4b0] - InheritedSize[0x3f8]
class ShipNetProxy: public NetProxy
{
public:
	Class MaterialInstanceDynamic*                               EmmissaryFlagMaterial;                             // 0x3f8(0x8)
	char                                                         pad0x8_DEP21[0x8];                                 // 0x400(0x8)
	TArray<class ShipInteractableLight*>                         ShipLanterns;                                      // 0x408(0x10)
	char                                                         pad0x10_M5T5W[0x10];                               // 0x418(0x10)
	bool                                                         EmissaryFlagActive;                                // 0x428(0x1)
	char                                                         pad0x7_G45GU[0x7];                                 // 0x429(0x7)
	Struct StringAssetReference                                  EmmissaryFlagTextureReference;                     // 0x430(0x10)
	int                                                          LanternBits;                                       // 0x440(0x4)
	char                                                         pad0x6c_Q58Y6[0x6c];                               // 0x444(0x6c)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class ShipPartCustomization: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipPartsCatalogueDataAsset: public DataAsset
{
public:
	Struct ShipPartsCatalogue                                    Catalogue;                                         // 0x28(0x10)
};


// Size 0xa0 (Full Size[0x950] - InheritedSize[0x8b0]
class ShipPointParticleComponent: public ParticleSystemComponent
{
public:
	TArray<Byte ValidShipRegions>                                ValidShipRegions;                                  // 0x8a8(0x10)
	TArray<struct SpawnPts>                                      SpawnPts;                                          // 0x8b8(0x10)
	struct FName                                                 SpawnRateParam;                                    // 0x8c8(0x8)
	Struct Vector2D                                              ParamValueRange;                                   // 0x8d0(0x8)
	Struct Vector2D                                              TimePerEmitMin;                                    // 0x8d8(0x8)
	Struct Vector2D                                              TimePerEmitMax;                                    // 0x8e0(0x8)
	byte                                                         ParamType;                                         // 0x8e8(0x1)
	char                                                         pad0x67_XUCXF[0x67];                               // 0x8e9(0x67)
};


// Size 0xc0 (Full Size[0x308] - InheritedSize[0x248]
class ShipRegenerativeHealthComponent: public HealthComponent
{
public:
	char                                                         pad0xb0_18CI0[0xb0];                               // 0x248(0xb0)
	Class Ship*                                                  Ship;                                              // 0x2f8(0x8)
	float                                                        HealingPerSecond;                                  // 0x300(0x4)
	char                                                         pad0x4_O39M0[0x4];                                 // 0x304(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipRolloverCorrector: public DataAsset
{
public:
	Class CurveFloat*                                            TimeRolledOverVSCorrectiveTorque;                  // 0x28(0x8)
	float                                                        RollThresholdToConsiderRolledOver;                 // 0x30(0x4)
	float                                                        HullSubmersedThreshold;                            // 0x34(0x4)
	char                                                         pad0x8_3YKR4[0x8];                                 // 0x38(0x8)
};


// Size 0x2d0 (Full Size[0x698] - InheritedSize[0x3c8]
class ShipService: public Actor
{
public:
	char                                                         pad0x38_5BFFS[0x38];                               // 0x3c8(0x38)
	Struct CrewShipPersistentDataManager                         PersistentCrewShipData;                            // 0x400(0x10)
	TArray<struct ShipList>                                      ShipList;                                          // 0x410(0x10)
	TArray<struct CrewedShips>                                   CrewedShips;                                       // 0x420(0x10)
	char                                                         pad0x268_0RWST[0x268];                             // 0x430(0x268)
};


// Size 0x8 (Full Size[0x6a0] - InheritedSize[0x698]
class CustomizableShipService: public ShipService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipStockServiceInterface: public Interface
{
public:
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class ShipStockService: public Object
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class ShipStuckDetectionComponent: public ActorComponent
{
public:
	float                                                        MaxShipSpeedToConsiderStationary;                  // 0xc8(0x4)
	float                                                        StuckTimeUntilDeletion;                            // 0xcc(0x4)
	float                                                        MaxHullSubmersionToConsiderStuckable;              // 0xd0(0x4)
	float                                                        StuckTimeDecaySpeed;                               // 0xd4(0x4)
	bool                                                         PrintDebug;                                        // 0xd8(0x1)
	char                                                         pad0x7_1A9E7[0x7];                                 // 0xd9(0x7)
	Class Ship*                                                  Ship;                                              // 0xe0(0x8)
	char                                                         pad0x8_9XHVW[0x8];                                 // 0xe8(0x8)
};


// Size 0x2b0 (Full Size[0x378] - InheritedSize[0xc8]
class ShipTelemetryComponent: public ActorComponent
{
public:
};


// Size 0x110 (Full Size[0x1d8] - InheritedSize[0xc8]
class ShipTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0xf0_I50WA[0xf0];                               // 0xc8(0xf0)
	bool                                                         bPlayerIsAbandoned;                                // 0x1b8(0x1)
	byte                                                         PlayerAbandonedReason;                             // 0x1b9(0x1)
	char                                                         pad0x1e_MZR99[0x1e];                               // 0x1ba(0x1e)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ShipEntitlementProcessingPolicy: public Object
{
public:
	char                                                         pad0x8_XHU5R[0x8];                                 // 0x28(0x8)
	TArray<class Class*>                                         AcceptedEntitlements;                              // 0x30(0x10)
	TArray<class Class*>                                         AcceptedCategories;                                // 0x40(0x10)
};


// Size 0x8 (Full Size[0x58] - InheritedSize[0x50]
class ShipVoyageEntitlementProcessingPolicy: public ShipEntitlementProcessingPolicy
{
public:
	Class ShipEntitlementComponent*                              ShipEntitlementComponent;                          // 0x50(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckNameGeneratorAbstract: public Object
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ShipwreckNameGeneratorDefault: public ShipwreckNameGeneratorAbstract
{
public:
	char                                                         pad0x18_3AIEG[0x18];                               // 0x28(0x18)
	TArray<struct FText>                                         ShipwreckNames;                                    // 0x40(0x10)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class ShipwreckSiteGeneratorComponent: public ActorComponent
{
public:
};


// Size 0x160 (Full Size[0x528] - InheritedSize[0x3c8]
class ShipwreckService: public Actor
{
public:
	char                                                         pad0x8_17F54[0x8];                                 // 0x3c8(0x8)
	TArray<Interface ToMoveList>                                 ToMoveList;                                        // 0x3d0(0x10)
	Struct WeightedProbabilityRange                              WreckProbRange;                                    // 0x3e0(0x20)
	class                                                        WreckClass;                                        // 0x400(0x8)
	Class ShipwreckSiteGeneratorComponent*                       SiteGenerator;                                     // 0x408(0x8)
	Class ShipwreckNameGeneratorAbstract*                        NameGenerator;                                     // 0x410(0x8)
	float                                                        ShipwreckLifetime;                                 // 0x418(0x4)
	float                                                        PlayerDistanceMoveThreshold;                       // 0x41c(0x4)
	float                                                        ShipDistanceMoveThreshold;                         // 0x420(0x4)
	char                                                         pad0x64_A5JHD[0x64];                               // 0x424(0x64)
	Struct WreckSpawnQueryPriorityData                           SpawnQueryData;                                    // 0x488(0x10)
	TArray<Interface WreckList>                                  WreckList;                                         // 0x498(0x10)
	char                                                         pad0x10_XL50T[0x10];                               // 0x4a8(0x10)
	TArray<struct ActiveCustomWreckList>                         ActiveCustomWreckList;                             // 0x4b8(0x10)
	char                                                         pad0x60_LNKXT[0x60];                               // 0x4c8(0x60)
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class ShipwreckSiteGeneratorNoneComponent: public ShipwreckSiteGeneratorComponent
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class ShipwreckSiteGeneratorRandom: public DataAsset
{
public:
	float                                                        MinSpawnDistanceFromEndOfWorldZone;                // 0x28(0x4)
	char                                                         pad0x4_VTG2E[0x4];                                 // 0x2c(0x4)
	Class CurveFloat*                                            ShipwreckDepthDistribution;                        // 0x30(0x8)
	float                                                        ClearanceRadius;                                   // 0x38(0x4)
	float                                                        MinDistanceFromClosestShipwreck;                   // 0x3c(0x4)
	float                                                        MinDistanceFromClosestCrewShip;                    // 0x40(0x4)
	float                                                        MinDistanceFromClosestIsland;                      // 0x44(0x4)
	float                                                        MinDistanceFromClosestPlayer;                      // 0x48(0x4)
	float                                                        MinDistanceFromClosestRock;                        // 0x4c(0x4)
	float                                                        MinDistanceFromClosestActiveEncounter;             // 0x50(0x4)
	float                                                        SiteGenerationThrottle;                            // 0x54(0x4)
	int                                                          RequestBatchSize;                                  // 0x58(0x4)
	char                                                         pad0x4_QT7WT[0x4];                                 // 0x5c(0x4)
	TArray<struct Rotations>                                     Rotations;                                         // 0x60(0x10)
	float                                                        IslandConvexHullExpansionDistance;                 // 0x70(0x4)
	char                                                         pad0x4_7ZSS7[0x4];                                 // 0x74(0x4)
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class ShipwreckSiteGeneratorRandomComponent: public ShipwreckSiteGeneratorComponent
{
public:
	Class ShipwreckSiteGeneratorRandom*                          SiteGenAsset;                                      // 0xc8(0x8)
	char                                                         pad0x50_ABKNQ[0x50];                               // 0xd0(0x50)
};


// Size 0x40 (Full Size[0x160] - InheritedSize[0x120]
class ShipwreckSiteGeneratorRandomEditorComponent: public ShipwreckSiteGeneratorRandomComponent
{
public:
	float                                                        ShipwreckSize;                                     // 0x120(0x4)
	int                                                          SphereSegments;                                    // 0x124(0x4)
	Struct Color                                                 ShipwreckColor;                                    // 0x128(0x4)
	Struct Color                                                 EndOfWorldColor;                                   // 0x12c(0x4)
	Struct Color                                                 EndOfWorldWarningColor;                            // 0x130(0x4)
	Struct Color                                                 ValidSpawnZoneColor;                               // 0x134(0x4)
	Struct Color                                                 IslandColor;                                       // 0x138(0x4)
	char                                                         pad0x24_O9STN[0x24];                               // 0x13c(0x24)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class ShipwreckSiteGeneratorSimulator: public Actor
{
public:
	Class ShipwreckSiteGeneratorRandomEditorComponent*           SiteGenerator;                                     // 0x3c8(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ShipwreckTrackerService: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShockwaveDamagerType: public DamagerType
{
public:
};


// Size 0x118 (Full Size[0x140] - InheritedSize[0x28]
class ShopDialogue: public DataAsset
{
public:
	Struct FText                                                 ConfirmPurchaseMessage;                            // 0x28(0x38)
	Struct FText                                                 PurchaseFailedMessage;                             // 0x60(0x38)
	Struct FText                                                 PurchasePendingMessage;                            // 0x98(0x38)
	Struct FText                                                 PurchaseSuccessMessage;                            // 0xd0(0x38)
	Struct FText                                                 GetShopOffersFailedMessage;                        // 0x108(0x38)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShopOfferBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x3d0 (Full Size[0x498] - InheritedSize[0xc8]
class ShopViewModelComponent: public ActorComponent
{
public:
	char                                                         pad0x10_OV5ZW[0x10];                               // 0xc8(0x10)
	TArray<struct MaxVoyagesOwnedOverride>                       MaxVoyagesOwnedOverride;                           // 0xd8(0x10)
	TArray<class Class*>                                         IgnoredCompaniesForMaxVoyagesOwned;                // 0xe8(0x10)
	int                                                          StockRefreshTime;                                  // 0xf8(0x4)
	char                                                         pad0x4_TJ49T[0x4];                                 // 0xfc(0x4)
	TArray<class Class*>                                         PrioritisedVoyages;                                // 0x100(0x10)
	Struct FText                                                 EmissaryLockedCommodityOfferDescription;           // 0x110(0x38)
	Struct FText                                                 OutOfStockLockedCommodityOfferDescription;         // 0x148(0x38)
	Struct FText                                                 ShipCapacityLockedCommodityOfferDescription;       // 0x180(0x38)
	char                                                         pad0x2e0_P5GV4[0x2e0];                             // 0x1b8(0x2e0)
};


// Size 0x90 (Full Size[0xf0] - InheritedSize[0x60]
class ShoresOfGoldTaleService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShoresOfGoldTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0xc0 (Full Size[0x8a0] - InheritedSize[0x7e0]
class Shovel: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x10_ZY4N6[0x10];                               // 0x7e0(0x10)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f0(0x8)
	TArray<struct ExhumeAnimParams>                              ExhumeAnimParams;                                  // 0x7f8(0x10)
	TArray<struct BuryAnimParams>                                BuryAnimParams;                                    // 0x808(0x10)
	Class ShovelSurfaceHoleDataAsset*                            ShovelHoleParams;                                  // 0x818(0x8)
	Class ShovelSurfaceFxDataAsset*                              ShovelHoleFx;                                      // 0x820(0x8)
	Class WwiseEvent*                                            ShovelEnterSurfaceSfx;                             // 0x828(0x8)
	Class WwiseEvent*                                            ShovelBuryingSfx;                                  // 0x830(0x8)
	Class WwiseEvent*                                            ShovelExitSurfaceSfx;                              // 0x838(0x8)
	Class WwiseEvent*                                            HitBuriedChestSfx;                                 // 0x840(0x8)
	class                                                        ShovelDigCooldownType;                             // 0x848(0x8)
	float                                                        DigRequestToleranceTimeOnServer;                   // 0x850(0x4)
	float                                                        CameraPitchAfterSuccessfulDigIfStartedHigh;        // 0x854(0x4)
	float                                                        CameraPitchAfterSuccessfulDigIfStartedLow;         // 0x858(0x4)
	float                                                        CameraPitchAfterDeflectedDigIfStartedHigh;         // 0x85c(0x4)
	float                                                        CameraPitchAfterDeflectedDigIfStartedLow;          // 0x860(0x4)
	struct FName                                                 ShovelHeadSocketName;                              // 0x864(0x8)
	char                                                         pad0xc_06QLQ[0xc];                                 // 0x86c(0xc)
	Class WwiseEvent*                                            PendingRevealSFX;                                  // 0x878(0x8)
	char                                                         pad0x20_2EDWU[0x20];                               // 0x880(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShovelDigActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class ShroudBreakerComponent: public ActorComponent
{
public:
};


// Size 0x90 (Full Size[0x458] - InheritedSize[0x3c8]
class ShroudBreakerOnShip: public Actor
{
public:
	Class AthenaWorldSettings*                                   AthenaWorldSettings;                               // 0x3c8(0x8)
	float                                                        DistanceToSafeZoneInRange;                         // 0x3d0(0x4)
	byte                                                         ShroudBreakerActivationState;                      // 0x3d4(0x1)
	bool                                                         IsShroudBreakerDeactivating;                       // 0x3d5(0x1)
	byte                                                         TargetSafeZone;                                    // 0x3d6(0x1)
	char                                                         pad0x81_AU3IX[0x81];                               // 0x3d7(0x81)
};


// Size 0x20 (Full Size[0x808] - InheritedSize[0x7e8]
class ShroudBreakerProxy: public FloatingItemProxy
{
public:
	Class ShroudBreakerComponent*                                ShroudBreakerComponent;                            // 0x7e8(0x8)
	Class ItemProxyShipTrackerComponent*                         ItemProxyShipTrackerComponent;                     // 0x7f0(0x8)
	Class ItemProxyWatercraftTrackerComponent*                   ItemProxyWatercraftTrackerComponent;               // 0x7f8(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x800(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShroudBreakerServiceInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class ShroudBreakerService: public Actor
{
public:
	char                                                         pad0x78_ODVOJ[0x78];                               // 0x3c8(0x78)
	Class World*                                                 World;                                             // 0x440(0x8)
};


// Size 0x10 (Full Size[0x7f0] - InheritedSize[0x7e0]
class ShroudBreakerWieldable: public LargeStaticMeshWieldableItem
{
public:
	Class ShroudBreakerComponent*                                ShroudBreakerComponent;                            // 0x7e0(0x8)
	char                                                         pad0x8_R1DNJ[0x8];                                 // 0x7e8(0x8)
};


// Size 0x190 (Full Size[0x258] - InheritedSize[0xc8]
class SicknessComponent: public ActorComponent
{
public:
	char                                                         pad0x8_5SLHI[0x8];                                 // 0xc8(0x8)
	Struct WeightedProbabilityRangeOfRanges                      IncubationPeriodDuration;                          // 0xd0(0x30)
	Struct WeightedProbabilityRangeOfRanges                      LatentPeriodDuration;                              // 0x100(0x30)
	Struct WeightedProbabilityRangeOfRanges                      VomitingPeriodDuration;                            // 0x130(0x30)
	Struct WeightedProbabilityRangeOfRanges                      VomitBoutDuration;                                 // 0x160(0x30)
	Struct WeightedProbabilityRangeOfRanges                      DelayBetweenVomitBouts;                            // 0x190(0x30)
	float                                                        ScreenEffectStrengthWhenSicknessActive;            // 0x1c0(0x4)
	float                                                        ScreenEffectStrengthWhileVomiting;                 // 0x1c4(0x4)
	float                                                        MaterialEffectStrengthWhenSicknessActive;          // 0x1c8(0x4)
	float                                                        ScreenEffectSpringAcceleration;                    // 0x1cc(0x4)
	float                                                        MaterialEffectSpringAcceleration;                  // 0x1d0(0x4)
	bool                                                         CanGetSick;                                        // 0x1d4(0x1)
	char                                                         pad0x4b_Z1IP3[0x4b];                               // 0x1d5(0x4b)
	float                                                        TargetScreenEffectStrength;                        // 0x220(0x4)
	float                                                        TargetMaterialEffectStrength;                      // 0x224(0x4)
	char                                                         pad0x30_I3RKX[0x30];                               // 0x228(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SilenceStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SingleBulletGunDamagerType: public DamagerType
{
public:
};


// Size 0x50 (Full Size[0x418] - InheritedSize[0x3c8]
class SirenActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	Struct AISpawnActionStateParams                              AISpawnParams;                                     // 0x3c8(0x10)
	Struct AISwimmingCreatureDeadActionStateParams               AIDeadParams;                                      // 0x3d8(0x20)
	Struct UseItemActionStateParams                              UseItemParams;                                     // 0x3f8(0x1)
	Struct HiddenActionStateParams                               HiddenStateParams;                                 // 0x3f9(0x5)
	char                                                         pad0x1a_TTO8U[0x1a];                               // 0x3fe(0x1a)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SirenStatuesSelector: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class SirenStatuesSelectorConfiguration: public DataAsset
{
public:
	Class SirenStatuesSelector*                                  Selector;                                          // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SirenStatuesSelector_BasedOnShipSize: public SirenStatuesSelector
{
public:
	TArray<struct Entries>                                       Entries;                                           // 0x28(0x10)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class ItemActionComponentAudioParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                ItemActionAudioPool;                               // 0x28(0x8)
	Class WwiseEvent*                                            ActionStartEvent;                                  // 0x30(0x8)
	Class WwiseEvent*                                            ActionStopEvent;                                   // 0x38(0x8)
	bool                                                         ActionStartEventIsLoop;                            // 0x40(0x1)
	char                                                         pad0x3_O7RCG[0x3];                                 // 0x41(0x3)
	float                                                        ActionStartEventFadeTime;                          // 0x44(0x4)
	char                                                         pad0x20_ZG3X4[0x20];                               // 0x48(0x20)
};


// Size 0x8 (Full Size[0x70] - InheritedSize[0x68]
class LaunchableShotComponentAudioParams: public ItemActionComponentAudioParams
{
public:
	Class WwiseEvent*                                            FireProjectileEvent;                               // 0x68(0x8)
};


// Size 0x18 (Full Size[0x88] - InheritedSize[0x70]
class SirenTridentShotComponentAudioParams: public LaunchableShotComponentAudioParams
{
public:
	Class WwiseEvent*                                            ChangeProjectileTierEvent;                         // 0x70(0x8)
	struct FName                                                 DamageLevelAudioSwitchName;                        // 0x78(0x8)
	char                                                         pad0x8_54WXO[0x8];                                 // 0x80(0x8)
};


// Size 0xb8 (Full Size[0x480] - InheritedSize[0x3c8]
class SkeletonActionStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	Struct AISpawnActionStateParams                              AISpawnParams;                                     // 0x3c8(0x10)
	Struct AIDeadActionStateParams                               AIDeadParams;                                      // 0x3d8(0x4)
	Struct UseItemActionStateParams                              UseItemParams;                                     // 0x3dc(0x1)
	char                                                         pad0x3_IP7C9[0x3];                                 // 0x3dd(0x3)
	Struct UseCannonActionStateParams                            UseCannonParams;                                   // 0x3e0(0x60)
	Struct RepairObjectActionStateParams                         RepairObjectParams;                                // 0x440(0x4)
	Struct ControlObjectActionStateParams                        ControlObjectParams;                               // 0x444(0x18)
	Struct HiddenActionStateParams                               HiddenStateParams;                                 // 0x45c(0x5)
	char                                                         pad0x1f_4T6WJ[0x1f];                               // 0x461(0x1f)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SkeletonAICharacterAudioComponentParams: public DataAsset
{
public:
	TArray<struct StrategyAudioEvents>                           StrategyAudioEvents;                               // 0x28(0x10)
};


// Size 0x50 (Full Size[0x360] - InheritedSize[0x310]
class SkeletonAICharacterAudioComponent: public AICharacterAudioComponent
{
public:
	char                                                         pad0x8_RQ6WI[0x8];                                 // 0x310(0x8)
	Class SkeletonAICharacterAudioComponentParams*               AICharacterAudioParams;                            // 0x318(0x8)
	bool                                                         ShouldResetEmitterOnDeath;                         // 0x320(0x1)
	char                                                         pad0x7_0RR9D[0x7];                                 // 0x321(0x7)
	Class SkeletonAudioFootfallControllerParams*                 FootfallParams;                                    // 0x328(0x8)
	class                                                        CachedStrategyID;                                  // 0x330(0x8)
	class                                                        CachedWieldedItemCategory;                         // 0x338(0x8)
	char                                                         pad0x20_QYEDP[0x20];                               // 0x340(0x20)
};


// Size 0xe8 (Full Size[0x550] - InheritedSize[0x468]
class SkeletonFortDoor: public InteractableObject
{
public:
	float                                                        DoorDelayTime;                                     // 0x468(0x4)
	float                                                        AmountDoorOpens;                                   // 0x46c(0x4)
	float                                                        DoorOpeningSpeed;                                  // 0x470(0x4)
	char                                                         pad0x4_H2JZD[0x4];                                 // 0x474(0x4)
	class                                                        ItemToWieldToUnlockDoor;                           // 0x478(0x8)
	Struct PlayerStat                                            PlayerStatToFireOnOpen;                            // 0x480(0x4)
	Struct PlayerStat                                            PlayerAllianceStatToFireOnOpen;                    // 0x484(0x4)
	bool                                                         FireStatToAllNearbyCrews;                          // 0x488(0x1)
	char                                                         pad0x17_VCE3Q[0x17];                               // 0x489(0x17)
	Class StaticMeshComponent*                                   DoorMesh;                                          // 0x4a0(0x8)
	TArray<struct LandmarkReactionsWhenDoorOpens>                LandmarkReactionsWhenDoorOpens;                    // 0x4a8(0x10)
	Class LandmarkReactionPlayer*                                LandmarkReactionPlayer;                            // 0x4b8(0x8)
	Class InteractableComponent*                                 InteractionRegion;                                 // 0x4c0(0x8)
	Class WwiseEvent*                                            DoorUnlockSound;                                   // 0x4c8(0x8)
	Class WwiseObjectPoolWrapper*                                DoorUnlockPool;                                    // 0x4d0(0x8)
	struct FName                                                 KeyMountLocation;                                  // 0x4d8(0x8)
	float                                                        KeyMountTime;                                      // 0x4e0(0x4)
	float                                                        KeyDestroyTime;                                    // 0x4e4(0x4)
	TArray<struct AdditionalPlayerStatsToFireOnOpen>             AdditionalPlayerStatsToFireOnOpen;                 // 0x4e8(0x10)
	byte                                                         ServerDoorState;                                   // 0x4f8(0x1)
	char                                                         pad0x7_5FWH3[0x7];                                 // 0x4f9(0x7)
	class                                                        OverrideItemToWieldToUnlockDoor;                   // 0x500(0x8)
	char                                                         pad0x48_B3TAY[0x48];                               // 0x508(0x48)
};


// Size 0x50 (Full Size[0x418] - InheritedSize[0x3c8]
class SkeletonThrone: public Actor
{
public:
	char                                                         pad0x8_2YPHH[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x3d0(0x8)
	Class StaticMeshComponent*                                   MeshComponent;                                     // 0x3d8(0x8)
	Class ShapeComponent*                                        EmoteCollisionComponent;                           // 0x3e0(0x8)
	TArray<struct FName>                                         EmoteNames;                                        // 0x3e8(0x10)
	Struct PlayerStat                                            ThroneStat;                                        // 0x3f8(0x4)
	char                                                         pad0x4_BW0SM[0x4];                                 // 0x3fc(0x4)
	TArray<struct SatOnStatFiredReactions>                       SatOnStatFiredReactions;                           // 0x400(0x10)
	Class LandmarkReactionPlayer*                                ReactionPlayer;                                    // 0x410(0x8)
};


// Size 0x0 (Full Size[0x418] - InheritedSize[0x418]
class MultiCrewSkeletonThrone: public SkeletonThrone
{
public:
};


// Size 0x3a8 (Full Size[0x770] - InheritedSize[0x3c8]
class SkellyFort: public Actor
{
public:
	char                                                         pad0x20_QH0KZ[0x20];                               // 0x3c8(0x20)
	TArray<class Class*>                                         AllowedGameEventTypes;                             // 0x3e8(0x10)
	TArray<struct StatsToFireOnFortComplete>                     StatsToFireOnFortComplete;                         // 0x3f8(0x10)
	struct FName                                                 IslandName;                                        // 0x408(0x8)
	Class SkeletonFortDoor*                                      FortDoor;                                          // 0x410(0x8)
	Class PanicTeleportVolume*                                   FortVaultTeleportVolume;                           // 0x418(0x8)
	Class AIEncounterGenerationRecipeRankOrderList*              AIEncounterGenerationRecipeRankOrderListOverride;  // 0x420(0x8)
	char                                                         pad0x120_C1VI9[0x120];                             // 0x428(0x120)
	Struct WwiseEmitter                                          SkellyFortEmitter;                                 // 0x548(0x20)
	float                                                        ServerMigrationExclusionRadius;                    // 0x568(0x4)
	Struct Vector                                                SkullCloudLoc;                                     // 0x56c(0xc)
	float                                                        SkullCloudCloseProximityRotation;                  // 0x578(0x4)
	char                                                         pad0x4_GJ4IN[0x4];                                 // 0x57c(0x4)
	Class AIBountySpawner*                                       Spawner;                                           // 0x580(0x8)
	char                                                         pad0x40_NX26S[0x40];                               // 0x588(0x40)
	Class GameplayEventSignal*                                   SkullCloud;                                        // 0x5c8(0x8)
	TArray<class FortItemSpawnComponent*>                        Rewards;                                           // 0x5d0(0x10)
	TArray<struct WaveSpawnerLocations>                          WaveSpawnerLocations;                              // 0x5e0(0x10)
	float                                                        SkullCloudMaxPitch;                                // 0x5f0(0x4)
	Struct EncounterParams                                       SightingEncounterParams;                           // 0x5f4(0xc)
	Struct EncounterParams                                       CloseEncounterParams;                              // 0x600(0xc)
	char                                                         pad0x4_FWRFU[0x4];                                 // 0x60c(0x4)
	Struct FString                                               SubjectName;                                       // 0x610(0x10)
	Struct FString                                               FortUniqueId;                                      // 0x620(0x10)
	Class WwiseEvent*                                            WaveGroupSpawnedEvent;                             // 0x630(0x8)
	Class WwiseEvent*                                            FinalWaveGroupSpawnedEvent;                        // 0x638(0x8)
	Class WwiseEvent*                                            FortCompleteEvent;                                 // 0x640(0x8)
	char                                                         pad0x8_9IEX0[0x8];                                 // 0x648(0x8)
	Class OverlapTriggerComponent*                               ActionAudioZoneComponent;                          // 0x650(0x8)
	Class OverlapTriggerComponent*                               AnticipationAudioZoneComponent;                    // 0x658(0x8)
	Class SeaFortCannonsMechanismTrigger*                        CannonsMechanismTrigger;                           // 0x660(0x8)
	Class Actor*                                                 CannonsMechanismAction;                            // 0x668(0x8)
	class                                                        ActiveFortType;                                    // 0x670(0x8)
	TArray<struct SpawnedAdditionalCaptainsData>                 SpawnedAdditionalCaptainsData;                     // 0x678(0x10)
	char                                                         pad0x10_Q6SO6[0x10];                               // 0x688(0x10)
	Struct SkellyFortUsedCaptainNameData                         UsedCaptainNames;                                  // 0x6a0(0xa0)
	char                                                         pad0x30_8STTS[0x30];                               // 0x740(0x30)
};


// Size 0x50 (Full Size[0x7c0] - InheritedSize[0x770]
class SkellyFortOfTheDamned: public SkellyFort
{
public:
	Class MusicZoneComponent*                                    PreBossMusicZone;                                  // 0x770(0x8)
	Class MusicZoneComponent*                                    BossMusicZone;                                     // 0x778(0x8)
	Class WwiseObjectPoolWrapper*                                FortBellPool;                                      // 0x780(0x8)
	Class WwiseEvent*                                            FortBellOneshot;                                   // 0x788(0x8)
	Struct Vector                                                EmitterOffset;                                     // 0x790(0xc)
	bool                                                         DoorClosesWhenPlayersLeaveVicinity;                // 0x79c(0x1)
	byte                                                         CurrentAudioState;                                 // 0x79d(0x1)
	char                                                         pad0x22_ZQ8JB[0x22];                               // 0x79e(0x22)
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class FortDataAsset: public DataAsset
{
public:
	float                                                        MinActivationDistanceFromPlayers;                  // 0x28(0x4)
	float                                                        MinEngagedDistanceFromPlayers;                     // 0x2c(0x4)
	TArray<class AIBountySpawner*>                               BountySpawners;                                    // 0x30(0x10)
	Class NamedAIDataAsset*                                      NamedAIDataAsset;                                  // 0x40(0x8)
	struct FName                                                 NavMeshOverride;                                   // 0x48(0x8)
	Class AISpawner*                                             AISpawnerWhenFortInactive;                         // 0x50(0x8)
	Class AISpawner*                                             CannonsAISpawnerWhenFortInactive;                  // 0x58(0x8)
	Class AISpawner*                                             AISpawnerWhenFortActive;                           // 0x60(0x8)
	Class AISpawner*                                             CannonsAISpawnerWhenFortActive;                    // 0x68(0x8)
	Class WwiseEvent*                                            WaveSpawnSoundEffect;                              // 0x70(0x8)
	Class WwiseEvent*                                            FinalWaveSpawnSoundEffect;                         // 0x78(0x8)
	Class WwiseEvent*                                            FortCompleteSoundEffect;                           // 0x80(0x8)
	float                                                        WaveSpawnSoundEffectDelay;                         // 0x88(0x4)
	float                                                        AnticipationAudioZoneRadiusMetres;                 // 0x8c(0x4)
	float                                                        ActionAudioZoneRadiusMetres;                       // 0x90(0x4)
	char                                                         pad0x4_ACUIO[0x4];                                 // 0x94(0x4)
	class                                                        KeyItemToUnlockDoor;                               // 0x98(0x8)
	Class ItemDescSpawnData*                                     KeySpawnData;                                      // 0xa0(0x8)
	byte                                                         EncounterSightingType;                             // 0xa8(0x1)
	byte                                                         EncounterCloseType;                                // 0xa9(0x1)
	char                                                         pad0x6_J9JE0[0x6];                                 // 0xaa(0x6)
};


// Size 0x1d8 (Full Size[0x288] - InheritedSize[0xb0]
class SkellyFortDataAsset: public FortDataAsset
{
public:
	class                                                        GameEventType;                                     // 0xb0(0x8)
	float                                                        FindAvailableFortThrottle;                         // 0xb8(0x4)
	char                                                         pad0x4_D2UYJ[0x4];                                 // 0xbc(0x4)
	class                                                        FortSignalClass;                                   // 0xc0(0x8)
	Class BountyQuestDescData*                                   BountyQuestDescData;                               // 0xc8(0x8)
	Struct BountyQuestRandomSpawnGeneratorParams                 BountyQuestRandomSpawnGeneratorParams;             // 0xd0(0x148)
	TArray<struct AdditionalWaves>                               AdditionalWaves;                                   // 0x218(0x10)
	Class AISkillsetRankProgression*                             CrewSkillset;                                      // 0x228(0x8)
	Class AISkillsetRankProgression*                             CaptainSkillset;                                   // 0x230(0x8)
	Class AIItemSpawnRankProgression*                            CrewItemDrops;                                     // 0x238(0x8)
	Class AIItemSpawnRankProgression*                            CaptainItemDrops;                                  // 0x240(0x8)
	Class EnvQuery*                                              FindSpawnPosQuery;                                 // 0x248(0x8)
	Struct WeightedProbabilityRange                              WaveRank;                                          // 0x250(0x20)
	Struct PlayerStat                                            PlayerStatToFireOnOpen;                            // 0x270(0x4)
	char                                                         pad0x4_WPN1D[0x4];                                 // 0x274(0x4)
	TArray<struct AdditionalPlayerStatsToFireOnOpen>             AdditionalPlayerStatsToFireOnOpen;                 // 0x278(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SkellyFortListDataAsset: public DataAsset
{
public:
	TArray<class SkellyFortDataAsset*>                           FortsList;                                         // 0x28(0x10)
};


// Size 0x2c8 (Full Size[0x690] - InheritedSize[0x3c8]
class SkellyFortService: public Actor
{
public:
	char                                                         pad0x10_LM4J6[0x10];                               // 0x3c8(0x10)
	TArray<class SkellyFort*>                                    SkellyForts;                                       // 0x3d8(0x10)
	char                                                         pad0x140_N6UVB[0x140];                             // 0x3e8(0x140)
	Class SkellyFortListDataAsset*                               SkellyFortListDataAsset;                           // 0x528(0x8)
	TArray<class SkellyFortDataAsset*>                           AllFortsData;                                      // 0x530(0x10)
	Class FortAIToggler*                                         FortAIToggler;                                     // 0x540(0x8)
	char                                                         pad0x90_XN52W[0x90];                               // 0x548(0x90)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x5d8(0xa0)
	char                                                         pad0x18_8GOZL[0x18];                               // 0x678(0x18)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SleepStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SoberStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SoloShip: public ShipType
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class SovereignData: public DataAsset
{
public:
	Struct StringAssetReference                                  StampIconAssetRef;                                 // 0x28(0x10)
	TArray<struct CompanyStats>                                  CompanyStats;                                      // 0x38(0x10)
	TArray<struct CompanyConditionalStatsTriggerTypes>           CompanyConditionalStatsTriggerTypes;               // 0x48(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpawnAIOnShipStatus: public StatusBase
{
public:
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class SpawnCollectableQuestObjectStep: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SpawnCollectableQuestObjectStepDesc: public TaleQuestStepDesc
{
public:
	class                                                        CollectableQuestBookPageToSpawn;                   // 0x80(0x8)
	Struct QuestVariablePlayerActor                              CollectingPlayerActor;                             // 0x88(0x30)
};


// Size 0x30 (Full Size[0xe8] - InheritedSize[0xb8]
class SpawnCollectableQuestObjectStepFromLocationDesc: public SpawnCollectableQuestObjectStepDesc
{
public:
	Struct QuestVariableVector                                   ItemLocation;                                      // 0xb8(0x30)
};


// Size 0x40 (Full Size[0xf8] - InheritedSize[0xb8]
class SpawnCollectableQuestObjectStepFromActorDesc: public SpawnCollectableQuestObjectStepDesc
{
public:
	Struct QuestVariableActor                                    PlaceableActor;                                    // 0xb8(0x30)
	struct FName                                                 SocketName;                                        // 0xe8(0x8)
	bool                                                         AttachToSocket;                                    // 0xf0(0x1)
	char                                                         pad0x7_BHVND[0x7];                                 // 0xf1(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SpawnItemStep: public TaleQuestStep
{
public:
};


// Size 0xe0 (Full Size[0x160] - InheritedSize[0x80]
class SpawnItemStepDesc: public TaleQuestStepDesc
{
public:
	class                                                        Item;                                              // 0x80(0x8)
	bool                                                         TrackItem;                                         // 0x88(0x1)
	bool                                                         TrackedProxy;                                      // 0x89(0x1)
	bool                                                         MarkItemAsCritical;                                // 0x8a(0x1)
	char                                                         pad0x5_NEMIW[0x5];                                 // 0x8b(0x5)
	Struct FText                                                 CriticalActorLostMessage;                          // 0x90(0x38)
	struct FName                                                 SocketName;                                        // 0xc8(0x8)
	Struct QuestVariableActor                                    LocatorVar;                                        // 0xd0(0x30)
	Struct QuestVariableOrientedPoint                            SpawnPoint;                                        // 0x100(0x30)
	Struct QuestVariableActor                                    ActorVar;                                          // 0x130(0x30)
};


// Size 0x78 (Full Size[0x488] - InheritedSize[0x410]
class SpawnProgressTriggerVolume: public PhysicsVolume
{
public:
	char                                                         pad0x8_MFVP0[0x8];                                 // 0x410(0x8)
	bool                                                         ClearProgress;                                     // 0x418(0x1)
	char                                                         pad0x4f_CP9RV[0x4f];                               // 0x419(0x4f)
	bool                                                         StartDisabled;                                     // 0x468(0x1)
	char                                                         pad0x7_C2L0H[0x7];                                 // 0x469(0x7)
	TArray<class ProgressSpawnLocation*>                         LinkedSpawnLocation;                               // 0x470(0x10)
	int                                                          ProgressLevel;                                     // 0x480(0x4)
	char                                                         pad0x4_GL2CS[0x4];                                 // 0x484(0x4)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class SpawnRewardStep: public TaleQuestStep
{
public:
};


// Size 0x108 (Full Size[0x188] - InheritedSize[0x80]
class SpawnRewardStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableItemSpawnDataType                        ItemSpawnData;                                     // 0x80(0x30)
	Struct QuestVariableVector                                   SpawnLocationVector;                               // 0xb0(0x30)
	Struct QuestVariableTransform                                SpawnLocationTransform;                            // 0xe0(0x38)
	Struct QuestVariableActor                                    SpawnedActor;                                      // 0x118(0x30)
	bool                                                         Tracked;                                           // 0x148(0x1)
	bool                                                         TrackedProxy;                                      // 0x149(0x1)
	bool                                                         Critical;                                          // 0x14a(0x1)
	bool                                                         DropOnSpawn;                                       // 0x14b(0x1)
	char                                                         pad0x4_7ANCS[0x4];                                 // 0x14c(0x4)
	Struct FText                                                 FailureMessage;                                    // 0x150(0x38)
};


// Size 0x40 (Full Size[0x820] - InheritedSize[0x7e0]
class SpeakingTrumpet: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_QF7OB[0x8];                                 // 0x7e0(0x8)
	float                                                        LoudVoiceAttenuationScaler;                        // 0x7e8(0x4)
	float                                                        QuietVoiceAttenuationScaler;                       // 0x7ec(0x4)
	float                                                        NonVerbalBroadcastRadiusScaler;                    // 0x7f0(0x4)
	float                                                        QuietNonVerbalBroadcastRadiusScaler;               // 0x7f4(0x4)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x800(0x8)
	char                                                         pad0x18_SCIED[0x18];                               // 0x808(0x18)
};


// Size 0x30 (Full Size[0x670] - InheritedSize[0x640]
class SplineWithEmitterComponent: public SplineComponent
{
public:
	Class WwiseObjectPoolWrapper*                                SplineAudioPool;                                   // 0x638(0x8)
	Class WwiseEvent*                                            LoopingSoundPlayEvent;                             // 0x640(0x8)
	Class WwiseEvent*                                            LoopingSoundStopEvent;                             // 0x648(0x8)
	Class WwiseEmitterComponent*                                 WwiseEmitterComponent;                             // 0x650(0x8)
	char                                                         pad0x18_6CF8A[0x18];                               // 0x658(0x18)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SplutterStatus: public StatusBase
{
public:
};


// Size 0xf0 (Full Size[0x8d0] - InheritedSize[0x7e0]
class Spyglass: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x10_VSR7B[0x10];                               // 0x7e0(0x10)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f0(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7f8(0x8)
	Class AimSensitivityComponent*                               AimSensitivityComponent;                           // 0x800(0x8)
	char                                                         pad0x10_FGAWS[0x10];                               // 0x808(0x10)
	float                                                        NameplateVisibilityRangeExtensionFactorWhileZoomed; // 0x818(0x4)
	float                                                        SecondsUntilZoomStarts;                            // 0x81c(0x4)
	float                                                        SecondsUntilPostStarts;                            // 0x820(0x4)
	float                                                        InAimFOV;                                          // 0x824(0x4)
	float                                                        BlendSpeed;                                        // 0x828(0x4)
	Struct ItemUseSpeedParams                                    AimSpeedScaleParameters;                           // 0x82c(0x8)
	char                                                         pad0x4_CJOM8[0x4];                                 // 0x834(0x4)
	Class PostProcessComponent*                                  PostProcessComponent;                              // 0x838(0x8)
	Class CurveFloat*                                            BlurCurve;                                         // 0x840(0x8)
	char                                                         pad0x38_YWBRX[0x38];                               // 0x848(0x38)
	Class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0x880(0x8)
	bool                                                         TurningOn;                                         // 0x888(0x1)
	char                                                         pad0x3_L7T3K[0x3];                                 // 0x889(0x3)
	float                                                        BlurTime;                                          // 0x88c(0x4)
	float                                                        BlurInDuration;                                    // 0x890(0x4)
	float                                                        BlurOutDuration;                                   // 0x894(0x4)
	Class StaticMeshComponent*                                   Glint;                                             // 0x898(0x8)
	Class Material*                                              MaterialParent;                                    // 0x8a0(0x8)
	Class Texture2D*                                             LensNormal;                                        // 0x8a8(0x8)
	Class Texture2D*                                             LensMask;                                          // 0x8b0(0x8)
	Struct LinearColor                                           LensTint;                                          // 0x8b8(0x10)
	char                                                         pad0x8_JEOV5[0x8];                                 // 0x8c8(0x8)
};


// Size 0x10 (Full Size[0x8e0] - InheritedSize[0x8d0]
class EnchantedSpyglass: public Spyglass
{
public:
	Class InventoryItemComponent*                                EnchantedInventoryItem;                            // 0x8d0(0x8)
	Class Actor*                                                 ConstellationVisibilityEventActor;                 // 0x8d8(0x8)
};


// Size 0x0 (Full Size[0x8e0] - InheritedSize[0x8e0]
class TestableEnchantedSpyglass: public EnchantedSpyglass
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SquirtStatus: public StatusBase
{
public:
};


// Size 0x168 (Full Size[0x230] - InheritedSize[0xc8]
class StaggerComponent: public ActorComponent
{
public:
	Class CurveFloat*                                            XStickInputOverloaderAmplitude;                    // 0xc8(0x8)
	Class CurveFloat*                                            YStickInputOverloaderAmplitude;                    // 0xd0(0x8)
	float                                                        MinInputOverloaderSpd;                             // 0xd8(0x4)
	float                                                        MaxInputOverloaderSpd;                             // 0xdc(0x4)
	float                                                        ChanceToChangeDirectionOnSpeedChange;              // 0xe0(0x4)
	float                                                        InputOverloaderSpdChangePerSec;                    // 0xe4(0x4)
	float                                                        MinOverloaderSpdChangeTime;                        // 0xe8(0x4)
	float                                                        MaxOverloaderSpdChangeTime;                        // 0xec(0x4)
	float                                                        StickInputForMaxInterferenceScalar;                // 0xf0(0x4)
	float                                                        InterferenceScalarAtMinStickInput;                 // 0xf4(0x4)
	float                                                        InterferenceScalarOnLadderStationary;              // 0xf8(0x4)
	float                                                        InterferenceScalarOnLadderMoving;                  // 0xfc(0x4)
	float                                                        MaxStickDeflectionOnLadderToConsiderStationary;    // 0x100(0x4)
	float                                                        StickDeflectionForMaxScalingOnLadder;              // 0x104(0x4)
	TArray<struct StaggerModifierEntries>                        StaggerModifierEntries;                            // 0x108(0x10)
	char                                                         pad0x118_73Q4V[0x118];                             // 0x118(0x118)
};


// Size 0xa0 (Full Size[0x138] - InheritedSize[0x98]
class StartAggressiveGhostShipEncounterStep: public TaleQuestStep
{
public:
	Class StartAggressiveGhostShipEncounterStepDesc*             StepDesc;                                          // 0x98(0x8)
	Class OverlapTriggerActor*                                   EncounterIslandOverlapTrigger;                     // 0xa0(0x8)
	char                                                         pad0x90_K2B5Z[0x90];                               // 0xa8(0x90)
};


// Size 0x18 (Full Size[0x78] - InheritedSize[0x60]
class TaleAggressiveGhostShipEncounterService: public TaleQuestService
{
public:
	char                                                         pad0x8_JSUVP[0x8];                                 // 0x60(0x8)
	Class TaleAggressiveGhostShipEncounterServiceDesc*           ServiceDesc;                                       // 0x68(0x8)
	Class AggressiveGhostShipsEncounter*                         ActiveGhostShipEncounter;                          // 0x70(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleAggressiveGhostShipEncounterServiceDesc: public TaleQuestServiceDesc
{
public:
	Class AggressiveGhostShipsEncounterParams*                   AggressiveGhostShipEncounterParams;                // 0x28(0x8)
};


// Size 0x128 (Full Size[0x1a8] - InheritedSize[0x80]
class StartAggressiveGhostShipEncounterStepDesc: public TaleQuestStepDesc
{
public:
	Class AggressiveGhostShipsEncounterParams*                   AggressiveGhostShipEncounterParams;                // 0x80(0x8)
	struct FName                                                 BountyMapName;                                     // 0x88(0x8)
	struct FName                                                 IslandToSpawnEncounter;                            // 0x90(0x8)
	float                                                        EncounterIslandOverlapRadius;                      // 0x98(0x4)
	char                                                         pad0x4_BQTYR[0x4];                                 // 0x9c(0x4)
	Class AggressiveGhostShipNamesDataAsset*                     ShipFleetNamesAsset;                               // 0xa0(0x8)
	Class AggressiveGhostShipNamesDataAsset*                     IslandNamesAsset;                                  // 0xa8(0x8)
	float                                                        CustomEncounterRadiusInMetres;                     // 0xb0(0x4)
	char                                                         pad0x4_OXH7O[0x4];                                 // 0xb4(0x4)
	Struct QuestVariableVector                                   CustomEncounterLocation;                           // 0xb8(0x30)
	Struct QuestVariableName                                     EncounterIslandName;                               // 0xe8(0x30)
	Struct QuestVariableText                                     LocalisedEncounterIslandName;                      // 0x118(0x30)
	Struct QuestVariableBountyTargetArray                        ShipFleetNames;                                    // 0x148(0x30)
	Struct QuestVariableActor                                    AggressiveGhostShipsEncounterActor;                // 0x178(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StashedMapsAvailableContext: public RadialContextBase
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class StatFireOnItemNPCHandinComponent: public ActorComponent
{
public:
};


// Size 0x18 (Full Size[0xe8] - InheritedSize[0xd0]
class SeaFortStatFireOnItemNPCHandinComponent: public StatFireOnItemNPCHandinComponent
{
public:
	class                                                        BewitchingDoll;                                    // 0xd0(0x8)
	class                                                        EnchantedDoll;                                     // 0xd8(0x8)
	byte                                                         SeaFortAlignmentState;                             // 0xe0(0x1)
	char                                                         pad0x7_SVRC3[0x7];                                 // 0xe1(0x7)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class StorageCrateWieldable: public LargeSkeletalMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class StaticStorageCrateWieldable: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class StatProgressStep: public TaleQuestStep
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class StatProgressStepDesc: public TaleQuestStepDesc
{
public:
	Struct PlayerStat                                            Stat;                                              // 0x80(0x4)
	char                                                         pad0x4_EUUHE[0x4];                                 // 0x84(0x4)
};


// Size 0x1a8 (Full Size[0x570] - InheritedSize[0x3c8]
class StatueThreatBase: public Actor
{
public:
	char                                                         pad0x28_0SMPG[0x28];                               // 0x3c8(0x28)
	float                                                        HealingPerSecond;                                  // 0x3f0(0x4)
	float                                                        DespawnDelay;                                      // 0x3f4(0x4)
	bool                                                         EnableRadialDamageOnBeginPlay;                     // 0x3f8(0x1)
	char                                                         pad0x7_T9CCC[0x7];                                 // 0x3f9(0x7)
	Class SceneComponent*                                        Root;                                              // 0x420(0x8)
	Class HealthComponent*                                       HealthComponent;                                   // 0x428(0x8)
	Class RadialDamagerComponent*                                RadialDamageComponent;                             // 0x430(0x8)
	Class SunkenCurseArtefactAudioComponent*                     AudioComponent;                                    // 0x438(0x8)
	Class SunkenCurseArtefactVfxComponent*                       VFXComponent;                                      // 0x440(0x8)
	Class SunkenCurseArtefactDynamicMaterialComponent*           DamageMaterialComponent;                           // 0x448(0x8)
	Class ActorDamageableComponent*                              DamageableComponent;                               // 0x450(0x8)
	char                                                         pad0x118_OSTPZ[0x118];                             // 0x458(0x118)
};


// Size 0x40 (Full Size[0x5b0] - InheritedSize[0x570]
class SirenStatue: public StatueThreatBase
{
public:
	char                                                         pad0x8_2SMBZ[0x8];                                 // 0x570(0x8)
	byte                                                         Team;                                              // 0x578(0x1)
	char                                                         pad0x37_JYFLF[0x37];                               // 0x579(0x37)
};


// Size 0x1b0 (Full Size[0x720] - InheritedSize[0x570]
class SunkenCurseArtefact: public StatueThreatBase
{
public:
	Struct Vector                                                OffsetFromOrigin;                                  // 0x570(0xc)
	Struct PlayerStat                                            DefeatedStat;                                      // 0x57c(0x4)
	Struct Color                                                 ArtefactColour;                                    // 0x580(0x4)
	char                                                         pad0x4_HMNSX[0x4];                                 // 0x584(0x4)
	Class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x588(0x8)
	char                                                         pad0x190_XCJXS[0x190];                             // 0x590(0x190)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseActivateAudioState: public StatusResponse
{
public:
	struct FName                                                 StateName;                                         // 0x30(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponseAINamedControllerParamHealthChange: public StatusResponse
{
public:
	byte                                                         HealthChangedReason;                               // 0x30(0x1)
	char                                                         pad0x3_5KTZP[0x3];                                 // 0x31(0x3)
	struct FName                                                 AINamedControllerParam;                            // 0x34(0x8)
	char                                                         pad0x4_SUDLX[0x4];                                 // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponseAIShipClampMaxTurnAngle: public StatusResponse
{
public:
	float                                                        ClampedMaxTurnAngle;                               // 0x30(0x4)
	char                                                         pad0xc_4AZLD[0xc];                                 // 0x34(0xc)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponseAIShipSetMaxSpeedMultiplier: public StatusResponse
{
public:
	float                                                        MaxSpeedMultiplier;                                // 0x30(0x4)
	char                                                         pad0xc_95R0X[0xc];                                 // 0x34(0xc)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseApplyAlcohol: public StatusResponse
{
public:
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class StatusResponseApplyStatusPlayerCurse: public StatusResponse
{
public:
	byte                                                         CurseTag;                                          // 0x30(0x1)
	char                                                         pad0x7_4F4S2[0x7];                                 // 0x31(0x7)
	Struct Status                                                Status;                                            // 0x38(0x18)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class StatusResponseApplyStatusShipCurse: public StatusResponse
{
public:
	byte                                                         ShipCurseTag;                                      // 0x30(0x1)
	char                                                         pad0x7_9MV96[0x7];                                 // 0x31(0x7)
	Struct Status                                                Status;                                            // 0x38(0x18)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseBallast: public StatusResponse
{
public:
	float                                                        WaterLevel;                                        // 0x30(0x4)
	char                                                         pad0x4_FGTSZ[0x4];                                 // 0x34(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseBoogieCurse: public StatusResponse
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseBurpingGasChange: public StatusResponse
{
public:
	float                                                        IntensityMultiplier;                               // 0x30(0x4)
	char                                                         pad0x4_GPIG9[0x4];                                 // 0x34(0x4)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class StatusResponseCameraShake: public StatusResponse
{
public:
	class                                                        CameraShake;                                       // 0x30(0x8)
	float                                                        InnerRadius;                                       // 0x38(0x4)
	float                                                        OuterRadius;                                       // 0x3c(0x4)
	float                                                        Falloff;                                           // 0x40(0x4)
	bool                                                         OrientShakeTowardsEpicenter;                       // 0x44(0x1)
	bool                                                         ShouldBlendOut;                                    // 0x45(0x1)
	char                                                         pad0x2_Y1783[0x2];                                 // 0x46(0x2)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponseChangeCannonRotation: public StatusResponse
{
public:
	float                                                        TargetPitchAngle;                                  // 0x30(0x4)
	float                                                        TargetYawAngle;                                    // 0x34(0x4)
	float                                                        RotationsBlendTime;                                // 0x38(0x4)
	char                                                         pad0x4_9NWB0[0x4];                                 // 0x3c(0x4)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseChangeSailHeight: public StatusResponse
{
public:
	float                                                        Duration;                                          // 0x30(0x4)
	char                                                         pad0x4_J7EXL[0x4];                                 // 0x34(0x4)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseDrunkCurse: public StatusResponse
{
public:
	float                                                        DrunkennessStrength;                               // 0x30(0x4)
	char                                                         pad0x4_8ALX1[0x4];                                 // 0x34(0x4)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseEmote: public StatusResponse
{
public:
	struct FName                                                 EmoteIdentifier;                                   // 0x30(0x8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseForceFeedback: public StatusResponse
{
public:
	Class ForceFeedbackEffect*                                   ForceFeedbackEffect;                               // 0x30(0x8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseHealthChange: public StatusResponse
{
public:
	float                                                        HealthChangeAmount;                                // 0x30(0x4)
	byte                                                         HealthChangedReason;                               // 0x34(0x1)
	char                                                         pad0x3_8YVGS[0x3];                                 // 0x35(0x3)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponseHealthChangeOverTime: public StatusResponse
{
public:
	float                                                        HealthChangePerSecond;                             // 0x30(0x4)
	byte                                                         HealthChangedReason;                               // 0x34(0x1)
	char                                                         pad0x3_N2CM4[0x3];                                 // 0x35(0x3)
	class                                                        DamagerTypeForDamageModification;                  // 0x38(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseLimping: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseLimpingCurse: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseOCReceiveBuffAudio: public StatusResponse
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponsePlayAudioLoopOnAllClients: public StatusResponse
{
public:
	Class WwiseEvent*                                            StartLoopEvent;                                    // 0x30(0x8)
	Class WwiseEvent*                                            StopLoopEvent;                                     // 0x38(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponsePlayAudioLoopOnLocalClient: public StatusResponse
{
public:
	Class WwiseEvent*                                            StartLoopEvent;                                    // 0x30(0x8)
	Class WwiseEvent*                                            StopLoopEvent;                                     // 0x38(0x8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponsePlayAudioOneShotOnLocalClient: public StatusResponse
{
public:
	Class WwiseEvent*                                            OneShotAudioEvent;                                 // 0x30(0x8)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class StatusResponsePostProcess: public StatusResponse
{
public:
	float                                                        BeginMaterialWeight;                               // 0x30(0x4)
	float                                                        EndMaterialWeight;                                 // 0x34(0x4)
	Class MaterialInterface*                                     MaterialInstance;                                  // 0x38(0x8)
	class                                                        PostProcessComponentClass;                         // 0x40(0x8)
	Class PostProcessComponent*                                  PostProcessComponent;                              // 0x48(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StatusResponseScreenSpaceParticles: public StatusResponse
{
public:
	Class Object*                                                ParticleSystem;                                    // 0x30(0x8)
	bool                                                         DoesVFXTimeOut;                                    // 0x38(0x1)
	char                                                         pad0x7_578VS[0x7];                                 // 0x39(0x7)
};


// Size 0x30 (Full Size[0x60] - InheritedSize[0x30]
class StatusResponseScreenSpaceVFX: public StatusResponse
{
public:
	struct FName                                                 MaterialParamName;                                 // 0x30(0x8)
	struct FName                                                 TintParamName;                                     // 0x38(0x8)
	Struct LinearColor                                           TintColor;                                         // 0x40(0x10)
	float                                                        EffectStrength;                                    // 0x50(0x4)
	float                                                        FadeInAcceleration;                                // 0x54(0x4)
	float                                                        FadeOutAcceleration;                               // 0x58(0x4)
	char                                                         pad0x4_AAWDY[0x4];                                 // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseSendBrokenLegEvent: public StatusResponse
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseSetAICharacterMoveSpeedModifier: public StatusResponse
{
public:
	byte                                                         Reason;                                            // 0x30(0x1)
	char                                                         pad0x3_E5FN8[0x3];                                 // 0x31(0x3)
	float                                                        Multiplier;                                        // 0x34(0x4)
};


// Size 0x50 (Full Size[0x80] - InheritedSize[0x30]
class StatusResponseShipAddAnchor: public StatusResponse
{
public:
	Struct StandardAnchorDynamicsParameters                      Params;                                            // 0x30(0x28)
	Struct Vector                                                AnchorOffsetFromShip;                              // 0x58(0xc)
	char                                                         pad0x1c_HF2Y3[0x1c];                               // 0x64(0x1c)
};


// Size 0x30 (Full Size[0x60] - InheritedSize[0x30]
class StatusResponseShipCurseFX: public StatusResponse
{
public:
	Struct ShipCurseFXData                                       CurseFXData;                                       // 0x30(0x30)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseSicknessInterrupt: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseSleepCurse: public StatusResponse
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseSpawnAIOnShip: public StatusResponse
{
public:
	Class AIFixedWavesSpawner*                                   AISpawner;                                         // 0x30(0x8)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class StatusResponseStun: public StatusResponse
{
public:
	byte                                                         AnimType;                                          // 0x30(0x1)
	byte                                                         IsItemWieldingAllowed;                             // 0x31(0x1)
	char                                                         pad0x2_VYK58[0x2];                                 // 0x32(0x2)
	float                                                        Duration;                                          // 0x34(0x4)
	bool                                                         PlayScreenVfx;                                     // 0x38(0x1)
	char                                                         pad0xf_4IBZV[0xf];                                 // 0x39(0xf)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseToggleCapstan: public StatusResponse
{
public:
	float                                                        DurationToToggleCapstan;                           // 0x30(0x4)
	char                                                         pad0x4_HXRB1[0x4];                                 // 0x34(0x4)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class StatusResponseToggleInteractionPoint: public StatusResponse
{
public:
	TArray<class Class*>                                         InteractionPointClasses;                           // 0x30(0x10)
	byte                                                         ShipCurseTag;                                      // 0x40(0x1)
	byte                                                         CurseTag;                                          // 0x41(0x1)
	char                                                         pad0x6_5EUCV[0x6];                                 // 0x42(0x6)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseToggleWheelLock: public StatusResponse
{
public:
	byte                                                         CurseTag;                                          // 0x30(0x1)
	char                                                         pad0x3_3FBFU[0x3];                                 // 0x31(0x3)
	float                                                        AngleThreshold;                                    // 0x34(0x4)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class StatusResponseTriggerDrunkenness: public StatusResponse
{
public:
	float                                                        TargetDrunkenness;                                 // 0x30(0x4)
	byte                                                         SourceOfDrunkenness;                               // 0x34(0x1)
	char                                                         pad0x3_JWQFW[0x3];                                 // 0x35(0x3)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SteamAchievementPopUpSettings: public Object
{
public:
	Struct StringAssetReference                                  SteamAchievementPopUpAssetLocation;                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SteamImpactStatus: public StatusBase
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class StopAggressiveGhostShipEncounterStep: public TaleQuestStep
{
public:
	Class StopAggressiveGhostShipEncounterStepDesc*              StepDesc;                                          // 0x98(0x8)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class StopAggressiveGhostShipEncounterStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x60 (Full Size[0x4c8] - InheritedSize[0x468]
class StorageContainer: public InteractableObject
{
public:
	char                                                         pad0x8_SVNMU[0x8];                                 // 0x468(0x8)
	Class StaticMeshComponent*                                   Mesh;                                              // 0x470(0x8)
	Class InteractableComponent*                                 InteractionRegion;                                 // 0x478(0x8)
	char                                                         pad0x14_ZWZFF[0x14];                               // 0x480(0x14)
	byte                                                         TrackedActorType;                                  // 0x494(0x1)
	char                                                         pad0x33_ULLNF[0x33];                               // 0x495(0x33)
};


// Size 0x260 (Full Size[0x728] - InheritedSize[0x4c8]
class BuoyantStorageContainer: public StorageContainer
{
public:
	char                                                         pad0x10_47OLP[0x10];                               // 0x4c8(0x10)
	bool                                                         UseSocketForInteractionPoint;                      // 0x4d8(0x1)
	char                                                         pad0x3_MUSCD[0x3];                                 // 0x4d9(0x3)
	struct FName                                                 InteractionSocket;                                 // 0x4dc(0x8)
	char                                                         pad0xa4_Z3BRH[0xa4];                               // 0x4e4(0xa4)
	Class ShapeComponent*                                        BaseComponent;                                     // 0x588(0x8)
	Struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x590(0x1c)
	char                                                         pad0x4_EBQEA[0x4];                                 // 0x5ac(0x4)
	Class BuoyancyComponent*                                     BuoyancyComponent;                                 // 0x5b0(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x5b8(0x8)
	Struct NetTimeStampCalculator                                MovementTimeStamp;                                 // 0x5c0(0x70)
	Struct ReplicatedPhysicsState                                ReplicatedPhysicsState;                            // 0x630(0x50)
	char                                                         pad0x8_26QRW[0x8];                                 // 0x680(0x8)
	Class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x688(0x8)
	Class RetractableFloatingBarrelComponent*                    RetractableComponent;                              // 0x690(0x8)
	char                                                         pad0x90_C7FJA[0x90];                               // 0x698(0x90)
};


// Size 0x0 (Full Size[0x7e8] - InheritedSize[0x7e8]
class StorageCrateItemProxy: public FloatingItemProxy
{
public:
};


// Size 0x260 (Full Size[0x628] - InheritedSize[0x3c8]
class Storm: public Actor
{
public:
	char                                                         pad0x20_9O91F[0x20];                               // 0x3c8(0x20)
	float                                                        PercentageOfStormWhereLightningCanStrike;          // 0x3e8(0x4)
	char                                                         pad0x4_OYTUS[0x4];                                 // 0x3ec(0x4)
	Struct StormScalingParameters                                ScalingParams;                                     // 0x3f0(0xd0)
	Class ExplosionComponent*                                    ExplosionComponent;                                // 0x4c0(0x8)
	Class WindZoneComponent*                                     WindZoneComponent;                                 // 0x4c8(0x8)
	Class RainZoneComponent*                                     RainZoneComponent;                                 // 0x4d0(0x8)
	Class LightningComponent*                                    LightningComponent;                                // 0x4d8(0x8)
	Class LightningManagerComponent*                             LightningManagerComponent;                         // 0x4e0(0x8)
	Class AtmosphericPressureZoneComponent*                      PressureZoneComponent;                             // 0x4e8(0x8)
	Class CalmWaterComponent*                                    AngryWaterZoneComponent;                           // 0x4f0(0x8)
	Struct FString                                               SubjectName;                                       // 0x4f8(0x10)
	float                                                        StormScale;                                        // 0x508(0x4)
	float                                                        Radius;                                            // 0x50c(0x4)
	float                                                        ServerMigrationRadiusMultiplier;                   // 0x510(0x4)
	char                                                         pad0x4_5GHHT[0x4];                                 // 0x514(0x4)
	Class StaticMeshComponent*                                   BaseCloudMeshComponent;                            // 0x518(0x8)
	Class StaticMeshComponent*                                   RainSheetOuterMeshComponent;                       // 0x520(0x8)
	Class StaticMeshComponent*                                   RainSheetInnerMeshComponent;                       // 0x528(0x8)
	Class StaticMeshComponent*                                   RingCloudMeshComponent;                            // 0x530(0x8)
	Class StaticMeshComponent*                                   TopCloudMeshComponent;                             // 0x538(0x8)
	Struct EncounterParams                                       EncounterParams;                                   // 0x540(0xc)
	char                                                         pad0xc_WRVEE[0xc];                                 // 0x54c(0xc)
	Class StormParams*                                           Params;                                            // 0x558(0x8)
	TArray<struct AvoidAreaList>                                 AvoidAreaList;                                     // 0x560(0x10)
	char                                                         pad0x14_YPW3B[0x14];                               // 0x570(0x14)
	Struct Vector2D                                              CustomCentre;                                      // 0x584(0x8)
	float                                                        CustomStrength;                                    // 0x58c(0x4)
	bool                                                         UsingCustomSettings;                               // 0x590(0x1)
	char                                                         pad0x97_FGD8A[0x97];                               // 0x591(0x97)
};


// Size 0x68 (Full Size[0x430] - InheritedSize[0x3c8]
class StormService: public Actor
{
public:
	char                                                         pad0x50_YO23C[0x50];                               // 0x3c8(0x50)
	TArray<class Actor*>                                         StormList;                                         // 0x418(0x10)
	char                                                         pad0x8_FJ590[0x8];                                 // 0x428(0x8)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class StrongholdKey: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StrongholdKeyData: public DataAsset
{
public:
	TArray<struct StrongholdKeys>                                StrongholdKeys;                                    // 0x28(0x10)
};


// Size 0x18 (Full Size[0x528] - InheritedSize[0x510]
class StrongholdKeyItemInfo: public NonStorableItemInfo
{
public:
};


// Size 0x0 (Full Size[0x7e8] - InheritedSize[0x7e8]
class StrongholdKeyProxy: public FloatingItemProxy
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StunnedActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SummonAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class SummonAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        NumToSpawnMultiplier;                              // 0x40(0x4)
	char                                                         pad0x4_QF11A[0x4];                                 // 0x44(0x4)
};


// Size 0x88 (Full Size[0x100] - InheritedSize[0x78]
class SummonAIAbility: public AthenaAIAbility
{
public:
	Class AIIncrementalWaveSpawner*                              SummonSpawner;                                     // 0x78(0x8)
	char                                                         pad0x80_10FKM[0x80];                               // 0x80(0x80)
};


// Size 0x38 (Full Size[0x138] - InheritedSize[0x100]
class AshenLordSummonAIAbility: public SummonAIAbility
{
public:
	Class Pawn*                                                  OwnerPawn;                                         // 0x100(0x8)
	Class VFXSpawnerComponent*                                   FireShroudVFX;                                     // 0x108(0x8)
	Class AshenLordSummonAIAbilityParams*                        SetupAbilityParams;                                // 0x110(0x8)
	Struct AshenLordFireShroud                                   FireShroud;                                        // 0x118(0x20)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class SummonAIAbilityParams: public AthenaAIAbilityParams
{
public:
	Class AIIncrementalWaveSpawner*                              SummonSpawner;                                     // 0xc8(0x8)
	Struct AthenaAIAbilityPlayerBasedRanges                      NumToSpawn;                                        // 0xd0(0x10)
	int                                                          MaxTotalAIFromSummonAbility;                       // 0xe0(0x4)
	bool                                                         DespawnAllOnDeath;                                 // 0xe4(0x1)
	char                                                         pad0x3_4MHUP[0x3];                                 // 0xe5(0x3)
	Class NamedAIDataAsset*                                      NamesAsset;                                        // 0xe8(0x8)
};


// Size 0x60 (Full Size[0x150] - InheritedSize[0xf0]
class AshenLordSummonAIAbilityParams: public SummonAIAbilityParams
{
public:
	Struct VFXHandlerComponentParams                             FireShroudVFXParams;                               // 0xf0(0x40)
	class                                                        FireShroudVFXSpawner;                              // 0x130(0x8)
	Struct AshenLordFireShroudParams                             FireShroudParams;                                  // 0x138(0x18)
};


// Size 0x220 (Full Size[0x5e8] - InheritedSize[0x3c8]
class SummonMegalodonRitualTable: public Actor
{
public:
	char                                                         pad0x8_68YJU[0x8];                                 // 0x3c8(0x8)
	struct FName                                                 MeshName;                                          // 0x3d0(0x8)
	struct FName                                                 MusicGlowParameterName;                            // 0x3d8(0x8)
	float                                                        RitualFailRate;                                    // 0x3e0(0x4)
	float                                                        RitualTime;                                        // 0x3e4(0x4)
	float                                                        PlateVFXTime;                                      // 0x3e8(0x4)
	char                                                         pad0x4_TJROW[0x4];                                 // 0x3ec(0x4)
	TArray<struct PlateData>                                     PlateData;                                         // 0x3f0(0x10)
	float                                                        RitualDisabledScalar;                              // 0x400(0x4)
	float                                                        RitualCompleteScalar;                              // 0x404(0x4)
	Class WwiseEvent*                                            PlayRitualAudioEvent;                              // 0x408(0x8)
	Class WwiseEvent*                                            StopRitualAudioEvent;                              // 0x410(0x8)
	Class WwiseEvent*                                            PlayPrimedAudioLoopEvent;                          // 0x418(0x8)
	Class WwiseEvent*                                            StopPrimedAudioLoopEvent;                          // 0x420(0x8)
	Class WwiseEvent*                                            PlayRitualCompleteAudioEvent;                      // 0x428(0x8)
	Class WwiseObjectPoolWrapper*                                RitualTableAudioPool;                              // 0x430(0x8)
	Struct PlayerStat                                            StatToFireOnShantyPuzzleComplete;                  // 0x438(0x4)
	char                                                         pad0x24_GHOLV[0x24];                               // 0x43c(0x24)
	TArray<class ParticleSystemComponent*>                       RitualParticleSystems;                             // 0x460(0x10)
	TArray<class ParticleSystemComponent*>                       CompleteParticleSystems;                           // 0x470(0x10)
	Class MaterialInstanceDynamic*                               WispsMaterialInstanceDynamic;                      // 0x480(0x8)
	Class MaterialInstanceDynamic*                               TableMaterialInstanceDynamic;                      // 0x488(0x8)
	TArray<Byte ActiveTypes>                                     ActiveTypes;                                       // 0x490(0x10)
	TArray<struct ParticipatingCrews>                            ParticipatingCrews;                                // 0x4a0(0x10)
	byte                                                         RitualState;                                       // 0x4b0(0x1)
	char                                                         pad0x137_1XNSK[0x137];                             // 0x4b1(0x137)
};


// Size 0x100 (Full Size[0x1c8] - InheritedSize[0xc8]
class SunkenCurseArtefactAudioComponent: public ActorComponent
{
public:
	bool                                                         UseParentEmitter;                                  // 0xc8(0x1)
	char                                                         pad0x7_AIQM0[0x7];                                 // 0xc9(0x7)
	Class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0xd0(0x8)
	Class WwiseEvent*                                            PlaySongEvent;                                     // 0xd8(0x8)
	Class WwiseEvent*                                            StopSongEvent;                                     // 0xe0(0x8)
	Class WwiseEvent*                                            PlayDamagedEvent;                                  // 0xe8(0x8)
	Class WwiseEvent*                                            PlayDefeatedEvent;                                 // 0xf0(0x8)
	char                                                         pad0xd0_MME27[0xd0];                               // 0xf8(0xd0)
};


// Size 0x158 (Full Size[0x220] - InheritedSize[0xc8]
class SunkenCurseArtefactDynamicMaterialComponent: public ActorComponent
{
public:
	char                                                         pad0x4_KU9K3[0x4];                                 // 0xc8(0x4)
	struct FName                                                 MagicColourPropertyName;                           // 0xcc(0x8)
	struct FName                                                 DamageLevelPropertyName;                           // 0xd4(0x8)
	struct FName                                                 TimeBasedPropertyName;                             // 0xdc(0x8)
	struct FName                                                 HitPositionPropertyName;                           // 0xe4(0x8)
	struct FName                                                 CollapseStartTimePropertyName;                     // 0xec(0x8)
	char                                                         pad0x4_2CSWB[0x4];                                 // 0xf4(0x4)
	Class PrimitiveComponent*                                    TargetMesh;                                        // 0xf8(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x100(0x10)
	Class StatueThreatBase*                                      Statue;                                            // 0x110(0x8)
	char                                                         pad0x108_2AMZG[0x108];                             // 0x118(0x108)
};


// Size 0x80 (Full Size[0x4c0] - InheritedSize[0x440]
class SunkenCurseArtefactItemSpawnComponent: public ItemSpawnComponent
{
public:
};


// Size 0x100 (Full Size[0x1c8] - InheritedSize[0xc8]
class SunkenCurseArtefactVfxComponent: public ActorComponent
{
public:
	Struct Color                                                 VFXTintColour;                                     // 0xc8(0x4)
	char                                                         pad0x4_X6QO4[0x4];                                 // 0xcc(0x4)
	Class Object*                                                DamagedParticleSystem;                             // 0xd0(0x8)
	Class Object*                                                DefeatedParticleSystem;                            // 0xd8(0x8)
	Class Object*                                                UnderwaterDefeatedParticleSystem;                  // 0xe0(0x8)
	int                                                          GlowMaterialIndex;                                 // 0xe8(0x4)
	struct FName                                                 GlowMaterialPropertyName;                          // 0xec(0x8)
	float                                                        GlowMaterialScale;                                 // 0xf4(0x4)
	float                                                        GlowMaterialBias;                                  // 0xf8(0x4)
	float                                                        GlowUpdateSpeed;                                   // 0xfc(0x4)
	Class StatueThreatBase*                                      Statue;                                            // 0x100(0x8)
	Class MaterialInstanceDynamic*                               GlowMaterial;                                      // 0x108(0x8)
	char                                                         pad0xb8_N49YW[0xb8];                               // 0x110(0xb8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SustenanceStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwallowedByKrakenActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimmingCreatureDamagerType: public DamagerType
{
public:
};


// Size 0x500 (Full Size[0x940] - InheritedSize[0x440]
class SwimmingCreaturePawn: public Pawn
{
public:
	char                                                         pad0x58_FZBBZ[0x58];                               // 0x440(0x58)
	Class ActionStateMachineComponent*                           ActionStateMachineComponent;                       // 0x498(0x8)
	Class ActionStatePriorityTableData*                          ActionStatePriorityTableData;                      // 0x4a0(0x8)
	class                                                        ActionStateCreatorDefinition;                      // 0x4a8(0x8)
	Class AthenaAIControllerParamsDataAsset*                     AIControllerParams;                                // 0x4b0(0x8)
	Class ShapeComponent*                                        CollisionComponent;                                // 0x4b8(0x8)
	Class SkeletalMeshMemoryConstraintComponent*                 Mesh;                                              // 0x4c0(0x8)
	Class SwimmingCreatureMovementComponent*                     FloatingMovementComponent;                         // 0x4c8(0x8)
	Class RewindComponent*                                       RewindComponent;                                   // 0x4d0(0x8)
	Class PrimitiveComponent*                                    ProjectileTraceHitVolume;                          // 0x4d8(0x8)
	Class HealthComponent*                                       HealthComponent;                                   // 0x4e0(0x8)
	Class ActorDamageableComponent*                              DamageableComponent;                               // 0x4e8(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x4f0(0x8)
	Class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0x4f8(0x8)
	Class NetworkSyncedAnimationComponent*                       NetworkSyncedAnimationComponent;                   // 0x500(0x8)
	Class NetworkTriggeredVFXComponent*                          NetworkTriggeredVFXComponent;                      // 0x508(0x8)
	Class WaterHeightProviderComponent*                          WaterHeightProviderComponent;                      // 0x510(0x8)
	Class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x518(0x8)
	float                                                        FadeOutTime;                                       // 0x520(0x4)
	byte                                                         SwimmingCreatureType;                              // 0x524(0x1)
	char                                                         pad0x3_3IGZG[0x3];                                 // 0x525(0x3)
	Struct Vector                                                CollisionShapeScaleOnDeath;                        // 0x528(0xc)
	char                                                         pad0xec_Y1EZ6[0xec];                               // 0x534(0xec)
	Struct AIEncounterSpecification                              PawnEncounterSpec;                                 // 0x620(0xd0)
	char                                                         pad0x1b0_7UVLA[0x1b0];                             // 0x6f0(0x1b0)
	TArray<struct CurrentlyLoadedMaterials>                      CurrentlyLoadedMaterials;                          // 0x8a0(0x10)
	class                                                        CurrentAIStrategy;                                 // 0x8b0(0x8)
	char                                                         pad0x88_4U2BV[0x88];                               // 0x8b8(0x88)
};


// Size 0x70 (Full Size[0x9b0] - InheritedSize[0x940]
class SharkPawn: public SwimmingCreaturePawn
{
public:
	char                                                         pad0x20_FCK44[0x20];                               // 0x940(0x20)
	Class RammerComponent*                                       RammerComponent;                                   // 0x960(0x8)
	Class SharkAICharacterAudioComponent*                        SharkAudioComponent;                               // 0x968(0x8)
	bool                                                         AllowTestForQuickDeath;                            // 0x970(0x1)
	char                                                         pad0x3_KA3S8[0x3];                                 // 0x971(0x3)
	float                                                        DistanceToGroundForQuickDeath;                     // 0x974(0x4)
	byte                                                         DistanceToGroundTestTraceChannel;                  // 0x978(0x1)
	char                                                         pad0x3_K9MGD[0x3];                                 // 0x979(0x3)
	float                                                        CheckIntervalForQuickDeath;                        // 0x97c(0x4)
	Struct CollisionProfileName                                  CollisionComponentServerProfile;                   // 0x984(0x8)
	Struct CollisionProfileName                                  CollisionComponentClientProfile;                   // 0x98c(0x8)
	char                                                         pad0x1c_AV3TE[0x1c];                               // 0x994(0x1c)
};


// Size 0x60 (Full Size[0xa10] - InheritedSize[0x9b0]
class TinyShark: public SharkPawn
{
public:
	char                                                         pad0x10_UCS0D[0x10];                               // 0x9b0(0x10)
	TArray<struct AITargetVisibilityPoints>                      AITargetVisibilityPoints;                          // 0x9c0(0x10)
	float                                                        TargetBoxHeightMultiplier;                         // 0x9d0(0x4)
	float                                                        TargetBoxZOffsetMultiplier;                        // 0x9d4(0x4)
	Class TinySharkLootSpawnParamsDataAsset*                     ItemLootSpawnParams;                               // 0x9d8(0x8)
	Class TinySharkLootSpawnParamsDataAsset*                     FoodLootSpawnParams;                               // 0x9e0(0x8)
	Class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x9e8(0x8)
	char                                                         pad0x20_7OKDD[0x20];                               // 0x9f0(0x20)
};


// Size 0xe0 (Full Size[0xa20] - InheritedSize[0x940]
class SirenPawn: public SwimmingCreaturePawn
{
public:
	char                                                         pad0x40_WPNLX[0x40];                               // 0x940(0x40)
	Class StatusEffectManagerComponent*                          StatusEffectComponent;                             // 0x980(0x8)
	Class HitDetectionComponent*                                 HitDetectionComponent;                             // 0x988(0x8)
	Class InventoryManipulatorComponent*                         InventoryManipulatorComponent;                     // 0x990(0x8)
	Class WieldedItemComponent*                                  WieldedItemComponent;                              // 0x998(0x8)
	Class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x9a0(0x8)
	Class LoadoutComponent*                                      LoadoutComponent;                                  // 0x9a8(0x8)
	Class ItemLoadoutComponent*                                  ItemLoadoutComponent;                              // 0x9b0(0x8)
	Class MeleeAttackProcessorComponent*                         MeleeAttackProcessorComponent;                     // 0x9b8(0x8)
	Class AnimationDataStoreComponent*                           AnimationDataStoreComponent;                       // 0x9c0(0x8)
	Class CustomAnimationMontageComponent*                       CustomAnimationMontageComponent;                   // 0x9c8(0x8)
	Class AIProjectileWeaponFiringIntentionComponent*            FiringIntentionComponent;                          // 0x9d0(0x8)
	Class HealthGemComponent*                                    HealthGemComponent;                                // 0x9d8(0x8)
	Struct CustomAnimationMontageId                              DeathMontageId;                                    // 0x9e0(0x8)
	Class CharacterHitReactionComponent*                         CharacterHitReactionComponent;                     // 0x9e8(0x8)
	char                                                         pad0x8_9OZ9F[0x8];                                 // 0x9f0(0x8)
	class                                                        AnimationID;                                       // 0x9f8(0x8)
	char                                                         pad0x20_8QKNR[0x20];                               // 0xa00(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimToSurfaceAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TaleBlockedByFactionDataAsset: public DataAsset
{
public:
	TArray<struct FName>                                         BlockedCampaignId;                                 // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleDoorMigrationAction: public TaleMigrationAction
{
public:
	Class SlidingDoor*                                           Door;                                              // 0x28(0x8)
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleEnchantedSpyglassService: public TaleQuestToolService
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleEnchantedSpyglassServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class                                                        EnchantedSpyglassDesc;                             // 0x30(0x8)
};


// Size 0x70 (Full Size[0x438] - InheritedSize[0x3c8]
class TaleProgressStatue: public Actor
{
public:
	Class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3c8(0x8)
	struct FName                                                 InteractionSocketName;                             // 0x3d0(0x8)
	Class TaleProgressStatueInteractableComponent*               InteractableComponent;                             // 0x3d8(0x8)
	int                                                          StatueProgressLevel;                               // 0x3e0(0x4)
	bool                                                         HasReturnToShipInteraction;                        // 0x3e4(0x1)
	char                                                         pad0x3_R4QFX[0x3];                                 // 0x3e5(0x3)
	TArray<struct FName>                                         ValidTaleCampaignIds;                              // 0x3e8(0x10)
	Class MaterialInstanceDynamic*                               DynamicGlowMaterialInstance;                       // 0x3f8(0x8)
	Class ParticleSystemComponent*                               ResumeFromTaleProgressParticleSystem;              // 0x400(0x8)
	struct FName                                                 GlowParamName;                                     // 0x408(0x8)
	int                                                          GlowOffEmissiveScalarValue;                        // 0x410(0x4)
	int                                                          GlowOnEmissiveScalarValue;                         // 0x414(0x4)
	char                                                         pad0x20_KYK0P[0x20];                               // 0x418(0x20)
};


// Size 0xc0 (Full Size[0x1e8] - InheritedSize[0x128]
class TaleProgressStatueInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x8_6L1XK[0x8];                                 // 0x128(0x8)
	float                                                        HoldTime;                                          // 0x130(0x4)
	char                                                         pad0x4_3L2L5[0x4];                                 // 0x134(0x4)
	class                                                        ReturnToShipInteractionInputID;                    // 0x138(0x8)
	class                                                        ReturnToShipInteractionReleasedInputID;            // 0x140(0x8)
	class                                                        ResumeFromTaleProgressInteractionInputID;          // 0x148(0x8)
	class                                                        ResumeFromTaleProgressInteractionReleasedInputID;  // 0x150(0x8)
	Struct FText                                                 ResumeFromTaleProgressActionRuleDescription;       // 0x158(0x38)
	Struct FText                                                 ResumeFromTaleProgressWithLargeItemActionRuleDescription; // 0x190(0x38)
	char                                                         pad0x10_NVTMU[0x10];                               // 0x1c8(0x10)
	Class TaleProgressStatue*                                    OwningStatue;                                      // 0x1d8(0x8)
	byte                                                         StatueInteractionState;                            // 0x1e0(0x1)
	char                                                         pad0x7_Q9IJJ[0x7];                                 // 0x1e1(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestAddTemporaryEntitlementStep: public TaleQuestStep
{
public:
};


// Size 0x48 (Full Size[0xa8] - InheritedSize[0x60]
class TemporaryEntitlementsTaleQuestService: public TaleQuestService
{
public:
	Class TemporaryEntitlementsTaleQuestServiceDesc*             ServiceDesc;                                       // 0x60(0x8)
	char                                                         pad0x8_SPSXF[0x8];                                 // 0x68(0x8)
	TArray<struct CachedLoadouts>                                CachedLoadouts;                                    // 0x70(0x10)
	char                                                         pad0x28_UQAVU[0x28];                               // 0x80(0x28)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TemporaryEntitlementsTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
	TArray<Assetclass Entitlements>                              Entitlements;                                      // 0x28(0x10)
	bool                                                         GrantTemporaryEntitlementOnStart;                  // 0x38(0x1)
	char                                                         pad0x7_AMXDA[0x7];                                 // 0x39(0x7)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestAddTemporaryEntitlementStepDesc: public TaleQuestStepDesc
{
public:
	TArray<Assetclass Entitlements>                              Entitlements;                                      // 0x80(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestAddTemporarySessionEntitlementStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestAddTemporarySessionEntitlementStepDesc: public TaleQuestStepDesc
{
public:
	TArray<Assetclass Entitlements>                              Entitlements;                                      // 0x80(0x10)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestAssignContendedResourceStep: public TaleQuestStep
{
public:
	Class TaleQuestAssignContendedResourceStepDesc*              StepDesc;                                          // 0x98(0x8)
};


// Size 0xf8 (Full Size[0x178] - InheritedSize[0x80]
class TaleQuestAssignContendedResourceStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableAssetArray                               RelevantResources;                                 // 0x80(0x30)
	Struct QuestVariableVector                                   SelectionOriginPointVar;                           // 0xb0(0x30)
	Struct QuestVariableTaleResourceHandle                       AllocatedResourceHandle;                           // 0xe0(0x30)
	Struct QuestVariableAsset                                    AllocatedResource;                                 // 0x110(0x30)
	Struct QuestVariableInt                                      AllocatedResourceIndex;                            // 0x140(0x30)
	byte                                                         ResourceSelectionPolicy;                           // 0x170(0x1)
	char                                                         pad0x7_06KV6[0x7];                                 // 0x171(0x7)
};


// Size 0x28 (Full Size[0xc0] - InheritedSize[0x98]
class TaleQuestAssignVaultStep: public TaleQuestStep
{
public:
	Class TaleQuestAssignVaultStepDesc*                          StepDesc;                                          // 0x98(0x8)
	bool                                                         VaultAssigned;                                     // 0xa0(0x1)
	char                                                         pad0x1f_KPW35[0x1f];                               // 0xa1(0x1f)
};


// Size 0x130 (Full Size[0x1b0] - InheritedSize[0x80]
class TaleQuestAssignVaultStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableVector                                   SelectionOriginPointVar;                           // 0x80(0x30)
	Struct QuestVariableInt                                      GoldHoarderVoyageTier;                             // 0xb0(0x30)
	Struct QuestVariableClassArray                               ValidSeas;                                         // 0xe0(0x30)
	Struct QuestVariableTaleResourceHandle                       AlloctedVaultHandleVar;                            // 0x110(0x30)
	Struct QuestVariableActor                                    AlloctedVaultVar;                                  // 0x140(0x30)
	Struct QuestVariableClass                                    VaultKeyTypeVar;                                   // 0x170(0x30)
	bool                                                         UsePriorityRange;                                  // 0x1a0(0x1)
	char                                                         pad0x3_I5RCA[0x3];                                 // 0x1a1(0x3)
	float                                                        PriorityRange;                                     // 0x1a4(0x4)
	int                                                          NumberOfSearches;                                  // 0x1a8(0x4)
	char                                                         pad0x4_YWMPL[0x4];                                 // 0x1ac(0x4)
};


// Size 0x10 (Full Size[0x1c0] - InheritedSize[0x1b0]
class TaleQuestAssignVaultWithFallbackKeysStepDesc: public TaleQuestAssignVaultStepDesc
{
public:
	TArray<class Class*>                                         FallbackKeys;                                      // 0x1b0(0x10)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class TaleQuestBlueprintStep: public TaleQuestStep
{
public:
	Class BlueprintStepBase*                                     Step;                                              // 0x98(0x8)
	char                                                         pad0x8_0FJCF[0x8];                                 // 0xa0(0x8)
};


// Size 0xa8 (Full Size[0x150] - InheritedSize[0xa8]
class TaleQuestSpawnAIStep: public TaleQuestBlueprintStep
{
public:
	Class AISpawner*                                             Spawner;                                           // 0xa8(0x8)
	Class SimpleAIRegion*                                        Region;                                            // 0xb0(0x8)
	char                                                         pad0x28_TQBEM[0x28];                               // 0xb8(0x28)
	Class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0xe0(0x8)
	Class FilterFirstPlayerEnterPlayerTrackerDecorator*          VoyageParticipantOnlyActivateFilter;               // 0xe8(0x8)
	char                                                         pad0x60_SHQAH[0x60];                               // 0xf0(0x60)
};


// Size 0x18 (Full Size[0x168] - InheritedSize[0x150]
class TaleQuestSpawnAIDioramaStep: public TaleQuestSpawnAIStep
{
public:
	Class AIDioramaController*                                   DioramaController;                                 // 0x150(0x8)
	Class Actor*                                                 WaveSpawnLocationActor;                            // 0x158(0x8)
	char                                                         pad0x8_5WUJ9[0x8];                                 // 0x160(0x8)
};


// Size 0xb0 (Full Size[0x130] - InheritedSize[0x80]
class TaleQuestBlueprintStepDesc: public TaleQuestStepDesc
{
public:
	char                                                         pad0xa0_OP7WN[0xa0];                               // 0x80(0xa0)
	class                                                        StepType;                                          // 0x120(0x8)
	Class BlueprintStepBase*                                     StepInstance;                                      // 0x128(0x8)
};


// Size 0x100 (Full Size[0x230] - InheritedSize[0x130]
class TaleQuestSpawnAIStepDesc: public TaleQuestBlueprintStepDesc
{
public:
	Struct QuestVariableAISpawner                                SpawnerAsset;                                      // 0x130(0x30)
	Struct QuestVariableAsset                                    WaveSpawnLocation;                                 // 0x160(0x30)
	Struct QuestVariableActor                                    WaveSpawnActorLocation;                            // 0x190(0x30)
	Struct QuestVariableOrientedPoint                            WaveSpawnAtNamedPoint;                             // 0x1c0(0x30)
	Struct QuestVariableActor                                    RegionSource;                                      // 0x1f0(0x30)
	class                                                        MusicZone;                                         // 0x220(0x8)
	byte                                                         AILifeTimePolicy;                                  // 0x228(0x1)
	byte                                                         AISpawnerShutdownPolicy;                           // 0x229(0x1)
	char                                                         pad0x2_YA7F9[0x2];                                 // 0x22a(0x2)
	int                                                          SpawnerIndex;                                      // 0x22c(0x4)
};


// Size 0x30 (Full Size[0x260] - InheritedSize[0x230]
class TaleQuestSpawnAIDioramaStepDesc: public TaleQuestSpawnAIStepDesc
{
public:
	Struct QuestVariableAIDioramaDesc                            AIDioramaDescAsset;                                // 0x230(0x30)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TaleQuestBranchStep: public TaleQuestStep
{
public:
	Class TaleQuestBranchStepDesc*                               Desc;                                              // 0x98(0x8)
	char                                                         pad0x18_Q7V1K[0x18];                               // 0xa0(0x18)
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestBranchStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableBool                                     Condition;                                         // 0x80(0x30)
	Class TaleQuestStepDesc*                                     IfCondition;                                       // 0xb0(0x8)
	Class TaleQuestStepDesc*                                     ElseCondition;                                     // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleQuestCommonToolService: public TaleQuestToolService
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class TaleQuestCommonToolServiceDesc: public TaleQuestToolServiceDesc
{
public:
	TArray<class Class*>                                         ToolDescs;                                         // 0x30(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestGenericBannerStep: public TaleQuestStep
{
public:
};


// Size 0x80 (Full Size[0x100] - InheritedSize[0x80]
class TaleQuestGenericBannerStepDesc: public TaleQuestStepDesc
{
public:
	Struct FText                                                 Message;                                           // 0x80(0x38)
	Struct FText                                                 Header;                                            // 0xb8(0x38)
	struct FName                                                 Tag;                                               // 0xf0(0x8)
	bool                                                         DisableMusic;                                      // 0xf8(0x1)
	char                                                         pad0x7_ENZSN[0x7];                                 // 0xf9(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestGetCrewShipManifestStep: public TaleQuestStep
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleQuestGetCrewShipManifestStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableGuid                                     CrewId;                                            // 0x80(0x30)
	Struct QuestVariableCrewShipManifest                         CrewShipManifest;                                  // 0xb0(0x30)
};


// Size 0x88 (Full Size[0x108] - InheritedSize[0x80]
class TaleQuestImportStepDesc: public TaleQuestStepDesc
{
public:
	Class TaleQuestDescAsset*                                    Asset;                                             // 0x80(0x8)
	Struct QuestVarTaleQuest                                     QuestInput;                                        // 0x88(0x30)
	char                                                         pad0x50_ESBLW[0x50];                               // 0xb8(0x50)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestIsFeatureEnabledStep: public TaleQuestStep
{
public:
	Class TaleQuestIsFeatureEnabledStepDesc*                     Desc;                                              // 0x98(0x8)
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestIsFeatureEnabledStepDesc: public TaleQuestStepDesc
{
public:
	Struct FeatureFlag                                           Feature;                                           // 0x80(0xc)
	char                                                         pad0x4_8UPWP[0x4];                                 // 0x8c(0x4)
	Struct QuestVariableBool                                     Enabled;                                           // 0x90(0x30)
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleQuestLanternService: public TaleQuestToolService
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleQuestLanternServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class                                                        LanternDesc;                                       // 0x30(0x8)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class TaleQuestLoopStep: public TaleQuestStep
{
public:
	Class TaleQuestLoopStepDesc*                                 Desc;                                              // 0x98(0x8)
	char                                                         pad0x10_0OJ9W[0x10];                               // 0xa0(0x10)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class TaleQuestLoopStepDesc: public TaleQuestStepDesc
{
public:
	Class TaleQuestStepDesc*                                     LoopDesc;                                          // 0x80(0x8)
	Struct QuestVariableBool                                     Condition;                                         // 0x88(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestNotificationStep: public TaleQuestStep
{
public:
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class TaleQuestNotificationStepDesc: public TaleQuestStepDesc
{
public:
	Class PopUpMessageDesc*                                      Notification;                                      // 0x80(0x8)
	Struct QuestVariablePlayerActor                              PreventNotificationForPlayer;                      // 0x88(0x30)
	Struct QuestVariablePlayerActor                              Player;                                            // 0xb8(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestNotificationUsingVariableStep: public TaleQuestStep
{
public:
	Class TaleQuestNotificationUsingVariableStepDesc*            Desc;                                              // 0x98(0x8)
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class TaleQuestNotificationUsingVariableStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableNotificationDesc                         NotificationDesc;                                  // 0x80(0x30)
	Struct QuestVariablePlayerActor                              PreventNotificationForPlayer;                      // 0xb0(0x30)
	Struct QuestVariablePlayerActor                              Player;                                            // 0xe0(0x30)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TaleQuestNumericSwitchStep: public TaleQuestStep
{
public:
	Class TaleQuestNumericSwitchStepDesc*                        Desc;                                              // 0x98(0x8)
	char                                                         pad0x18_C1VMT[0x18];                               // 0xa0(0x18)
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestNumericSwitchStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableInt                                      Condition;                                         // 0x80(0x30)
	TArray<class TaleQuestStepDesc*>                             Descs;                                             // 0xb0(0x10)
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TaleQuestParallelStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_VXDMA[0x8];                                 // 0x98(0x8)
	TArray<Interface Steps>                                      Steps;                                             // 0xa0(0x10)
	Class TaleQuestParallelStepDesc*                             Desc;                                              // 0xb0(0x8)
};


// Size 0x8 (Full Size[0xc0] - InheritedSize[0xb8]
class TaleQuestAnyStep: public TaleQuestParallelStep
{
public:
};


// Size 0x0 (Full Size[0xb8] - InheritedSize[0xb8]
class TaleQuestUnionStep: public TaleQuestParallelStep
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestParallelStepDesc: public TaleQuestStepDesc
{
public:
	TArray<class TaleQuestStepDesc*>                             Descs;                                             // 0x80(0x10)
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class TaleQuestAnyStepDesc: public TaleQuestParallelStepDesc
{
public:
};


// Size 0x0 (Full Size[0x90] - InheritedSize[0x90]
class TaleQuestUnionStepDesc: public TaleQuestParallelStepDesc
{
public:
};


// Size 0x0 (Full Size[0x170] - InheritedSize[0x170]
class TaleQuestPlankService: public TaleQuestToolService
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleQuestPlankServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class                                                        WoodenPlankDesc;                                   // 0x30(0x8)
};


// Size 0x18 (Full Size[0x78] - InheritedSize[0x60]
class TaleQuestProgressService: public TaleQuestService
{
public:
	Class TaleQuestProgressServiceDesc*                          Desc;                                              // 0x60(0x8)
	TArray<struct ParticipatingCrewIds>                          ParticipatingCrewIds;                              // 0x68(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestProgressServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestReactionStep: public TaleQuestStep
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleQuestReactionStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    PlaceableReaction;                                 // 0x80(0x30)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class TaleQuestReleaseContendedResourceStep: public TaleQuestStep
{
public:
	Class TaleQuestReleaseContendedResourceStepDesc*             StepDesc;                                          // 0x98(0x8)
	bool                                                         ResourceReleased;                                  // 0xa0(0x1)
	char                                                         pad0x7_Z4E0C[0x7];                                 // 0xa1(0x7)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleQuestReleaseContendedResourceStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableTaleResourceHandle                       ResourceHandle;                                    // 0x80(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TaleQuestReleaseVaultStep: public TaleQuestStep
{
public:
	bool                                                         VaultReleased;                                     // 0x98(0x1)
	char                                                         pad0x7_BEI52[0x7];                                 // 0x99(0x7)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleQuestReleaseVaultStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableTaleResourceHandle                       VaultHandleVar;                                    // 0x80(0x30)
};


// Size 0x30 (Full Size[0x90] - InheritedSize[0x60]
class TaleQuestResetShipBuoyancyService: public TaleQuestService
{
public:
	Class TaleQuestResetShipBuoyancyServiceDesc*                 ServiceDesc;                                       // 0x60(0x8)
	char                                                         pad0x28_O0SGO[0x28];                               // 0x68(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestResetShipBuoyancyServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestSelectAISpawnerStep: public TaleQuestStep
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleQuestSelectAISpawnerStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableAISpawnerArray                           SelectFromSpawnerArray;                            // 0x80(0x30)
	Struct QuestVariableAISpawner                                SelectedSpawnerAsset;                              // 0xb0(0x30)
};


// Size 0x30 (Full Size[0x128] - InheritedSize[0xf8]
class TaleQuestSequenceStep: public TaleQuestFramedStep
{
public:
	Class TaleQuestSequenceStepDesc*                             Desc;                                              // 0xf8(0x8)
	TArray<struct ForkedSteps>                                   ForkedSteps;                                       // 0x118(0x10)
};


// Size 0x10 (Full Size[0xc8] - InheritedSize[0xb8]
class TaleQuestSequenceStepDesc: public TaleQuestFramedStepDesc
{
public:
	TArray<class TaleQuestStepDesc*>                             Descs;                                             // 0xb8(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestSetNPCDialogKeyStep: public TaleQuestStep
{
public:
};


// Size 0xa8 (Full Size[0x128] - InheritedSize[0x80]
class TaleQuestSetNPCDialogKeyStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    NPC;                                               // 0x80(0x30)
	struct FName                                                 Key;                                               // 0xb0(0x8)
	Struct FString                                               Value;                                             // 0xb8(0x10)
	Struct QuestVariableName                                     KeyPin;                                            // 0xc8(0x30)
	Struct QuestVariableText                                     ValuePin;                                          // 0xf8(0x30)
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TaleQuestSpawnOnShipService: public TaleQuestService
{
public:
	Class TaleQuestSpawnOnShipServiceDesc*                       ServiceDesc;                                       // 0x60(0x8)
	char                                                         pad0x48_F33AE[0x48];                               // 0x68(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestSpawnOnShipServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestStartingBannerStep: public TaleQuestStep
{
public:
};


// Size 0x40 (Full Size[0xc0] - InheritedSize[0x80]
class TaleQuestStartingBannerStepDesc: public TaleQuestStepDesc
{
public:
	Struct FText                                                 Header;                                            // 0x80(0x38)
	struct FName                                                 Tag;                                               // 0xb8(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestStopAISpawningStep: public TaleQuestStep
{
public:
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class TaleQuestStopAISpawningStepDesc: public TaleQuestStepDesc
{
public:
	int                                                          SpawnerIndex;                                      // 0x80(0x4)
	bool                                                         StopAllActiveSpawners;                             // 0x84(0x1)
	char                                                         pad0x3_CQS0C[0x3];                                 // 0x85(0x3)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class TaleQuestStructGenServiceDesc: public TaleQuestServiceDesc
{
public:
	Struct TQStructGenParams                                     Params;                                            // 0x28(0x78)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TaleRankRequirements: public DataAsset
{
public:
	TArray<struct RankRequirements>                              RankRequirements;                                  // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class TaleSettings: public Object
{
public:
	Struct StringAssetReference                                  TaleRankRequirementsAssetRef;                      // 0x28(0x10)
	Struct StringAssetReference                                  TaleBlockedByFactionDataAssetRef;                  // 0x38(0x10)
};


// Size 0x18 (Full Size[0x78] - InheritedSize[0x60]
class TaleShroudBreakerService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleShroudBreakerServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class TaleVaultService: public TaleQuestService
{
public:
	Class PuzzleVault*                                           Vault;                                             // 0x60(0x8)
	Class VaultPuzzleDataAsset*                                  SolutionAsset;                                     // 0x68(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleVaultServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class TallTaleService: public Actor
{
public:
	char                                                         pad0x40_CDCA9[0x40];                               // 0x3c8(0x40)
	Class TaleRankRequirements*                                  RankRequirementsAsset;                             // 0x408(0x8)
	Class TaleBlockedByFactionDataAsset*                         TaleBlockedByFactionDataAsset;                     // 0x410(0x8)
	TArray<struct InTaleCrews>                                   InTaleCrews;                                       // 0x418(0x10)
	TArray<class QuestBook*>                                     ActiveLocalPlayerQuestBooks;                       // 0x428(0x10)
	TArray<class QuestBook*>                                     ActiveRemotePlayerQuestBooks;                      // 0x438(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TankardInterface: public Interface
{
public:
};


// Size 0xb0 (Full Size[0x890] - InheritedSize[0x7e0]
class Tankard: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x18_1KVRA[0x18];                               // 0x7e0(0x18)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	Class WwiseEvent*                                            StartDrinkingSfx;                                  // 0x800(0x8)
	Class WwiseEvent*                                            StopDrinkingSfx;                                   // 0x808(0x8)
	Class WwiseEvent*                                            SfxRefill;                                         // 0x810(0x8)
	Class WwiseEvent*                                            SfxTankardOnRaised;                                // 0x818(0x8)
	Class WwiseEvent*                                            SfxTankardOnEquipWhenFullOverride;                 // 0x820(0x8)
	Class WwiseEvent*                                            SfxTankardOnUnequipWhenFullOverride;               // 0x828(0x8)
	Class WwiseEvent*                                            SfxTankardSloshOnLandingAfterJump;                 // 0x830(0x8)
	Class WwiseEvent*                                            SfxTankardSloshOnFootstep;                         // 0x838(0x8)
	struct FName                                                 RaisingTankardSoundCueSwitchName;                  // 0x840(0x8)
	struct FName                                                 RaisingTankardSoundCueSwitchFullValue;             // 0x848(0x8)
	struct FName                                                 RaisingTankardSoundCueSwitchEmptyValue;            // 0x850(0x8)
	struct FName                                                 SfxRtpcEmptiness;                                  // 0x858(0x8)
	float                                                        TotalGasContained;                                 // 0x860(0x4)
	float                                                        AlcoholPercentage;                                 // 0x864(0x4)
	float                                                        DrinkSpeed;                                        // 0x868(0x4)
	float                                                        TotalVolume;                                       // 0x86c(0x4)
	Class LiquidContainerComponent*                              LiquidContainer;                                   // 0x870(0x8)
	float                                                        RemainingVolume;                                   // 0x878(0x4)
	char                                                         pad0x14_THA6K[0x14];                               // 0x87c(0x14)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class TankardRefillerComponent: public ActorComponent
{
public:
	byte                                                         ActionDisplayPriority;                             // 0xc8(0x1)
	char                                                         pad0x7_Y2NJC[0x7];                                 // 0xc9(0x7)
	class                                                        NotificationInputId;                               // 0xd0(0x8)
	int                                                          Capacity;                                          // 0xd8(0x4)
	int                                                          RemainingGrogs;                                    // 0xdc(0x4)
	char                                                         pad0x10_697SZ[0x10];                               // 0xe0(0x10)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TargetLastHealthChangeReasonStatCondition: public TargetedStatCondition
{
public:
	byte                                                         LastHealthChangeReason;                            // 0x30(0x1)
	char                                                         pad0x7_P3399[0x7];                                 // 0x31(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TauntAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TauntAnimationStateId: public AIAnimationStateId
{
public:
};


// Size 0xe8 (Full Size[0x4b0] - InheritedSize[0x3c8]
class TavernStepsTrigger: public Actor
{
public:
	TArray<struct ReactionEventsOpen>                            ReactionEventsOpen;                                // 0x3c8(0x10)
	TArray<struct ReactionEventsCancel>                          ReactionEventsCancel;                              // 0x3d8(0x10)
	float                                                        ShantyDelayBeforeStepsOpen;                        // 0x3e8(0x4)
	char                                                         pad0x4_F65OK[0x4];                                 // 0x3ec(0x4)
	Class SceneComponent*                                        CollisionRoot;                                     // 0x3f0(0x8)
	Class SphereComponent*                                       StepsListenerTriggerComponent;                     // 0x3f8(0x8)
	Class SphereComponent*                                       PlayersInTavernTriggerComponent;                   // 0x400(0x8)
	Class WorldRegionComponent*                                  ShantyWorldRegionComponent;                        // 0x408(0x8)
	Class WwiseEvent*                                            PlayMagicEvent;                                    // 0x410(0x8)
	Class WwiseEvent*                                            StopMagicEvent;                                    // 0x418(0x8)
	Struct WwiseEmitter                                          ShantyMagicEmitter;                                // 0x420(0x20)
	Class LandmarkReactionPlayer*                                ReactionEventPlayerOpen;                           // 0x440(0x8)
	Class AnimatedStepsComponent*                                AnimatedSteps;                                     // 0x448(0x8)
	byte                                                         StepsState;                                        // 0x450(0x1)
	char                                                         pad0x7_4FBSY[0x7];                                 // 0x451(0x7)
	TArray<class Actor*>                                         ActorsPlayingInstruments;                          // 0x458(0x10)
	char                                                         pad0x48_E5OV6[0x48];                               // 0x468(0x48)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class TavernStrangersBarrel: public Actor
{
public:
	Class StaticMeshComponent*                                   BarrelMeshComponent;                               // 0x3c8(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class TelemetryProgressStep: public TaleQuestStep
{
public:
	Class TelemetryProgressStepDesc*                             StepDesc;                                          // 0x98(0x8)
};


// Size 0x100 (Full Size[0x180] - InheritedSize[0x80]
class TelemetryProgressStepDesc: public TaleQuestStepDesc
{
public:
	Struct FString                                               Progression;                                       // 0x80(0x10)
	Struct TelemetryStepContext                                  TelemetryContext;                                  // 0x90(0xf0)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class TelemetrySubjectComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CX0Y6[0x8];                                 // 0xc8(0x8)
	Struct FString                                               SubjectName;                                       // 0xd0(0x10)
	Struct FString                                               SubjectID;                                         // 0xe0(0x10)
};


// Size 0x0 (Full Size[0xf0] - InheritedSize[0xf0]
class IslandTelemetrySubjectComponent: public TelemetrySubjectComponent
{
public:
};


// Size 0x18 (Full Size[0x108] - InheritedSize[0xf0]
class ShipTelemetrySubjectComponent: public TelemetrySubjectComponent
{
public:
};


// Size 0x20 (Full Size[0xb8] - InheritedSize[0x98]
class TelemetryTaskStep: public TaleQuestStep
{
public:
};


// Size 0x108 (Full Size[0x188] - InheritedSize[0x80]
class TelemetryTaskStepDesc: public TaleQuestStepDesc
{
public:
	Class TaleQuestStepDesc*                                     TaskDesc;                                          // 0x80(0x8)
	Struct FString                                               Description;                                       // 0x88(0x10)
	Struct TelemetryStepContext                                  TelemetryContext;                                  // 0x98(0xf0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportLungeAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class TeleportLungeAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class TeleportLungeAIAbility: public AthenaAIAbility
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class TeleportLungeAIAbilityParams: public AthenaAIAbilityParams
{
public:
};


// Size 0x50 (Full Size[0x418] - InheritedSize[0x3c8]
class TestActionControlStateCreatorDefinition: public ActionStateCreatorDefinition
{
public:
	Struct TeleportActionStateParams                             TeleportParams;                                    // 0x3c8(0x30)
	Struct MigrationActionStateParams                            MigrationParams;                                   // 0x3f8(0x4)
	char                                                         pad0x1c_HG3KT[0x1c];                               // 0x3fc(0x1c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseAnchorDynamicsDesc: public DataAsset
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TestAnchorDynamicsDesc: public BaseAnchorDynamicsDesc
{
public:
};


// Size 0x18 (Full Size[0x4d8] - InheritedSize[0x4c0]
class TestAthenaGameModeWithLoopBackServiceEndpoint: public GameMode
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestBuriableItemBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x100 (Full Size[0x6e0] - InheritedSize[0x5e0]
class TestClimbingActor: public Character
{
public:
	char                                                         pad0x60_TZXA6[0x60];                               // 0x5e0(0x60)
	Class ClimbingComponent*                                     ClimbingComponent;                                 // 0x640(0x8)
	char                                                         pad0x98_X3BAH[0x98];                               // 0x648(0x98)
};


// Size 0x10 (Full Size[0x6f0] - InheritedSize[0x6e0]
class TestDockingActorWithPhrases: public TestClimbingActor
{
public:
};


// Size 0x0 (Full Size[0x1a0] - InheritedSize[0x1a0]
class TestControllableIntentComponent: public ControllableIntentComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestControlObjectActionStateId: public ActionStateId
{
public:
};


// Size 0xb0 (Full Size[0x690] - InheritedSize[0x5e0]
class TestDelayedMeshCharacter: public Character
{
public:
};


// Size 0xf0 (Full Size[0x4b8] - InheritedSize[0x3c8]
class TestDockableObject: public Actor
{
public:
	char                                                         pad0x28_T6N5V[0x28];                               // 0x3c8(0x28)
	Class SceneComponent*                                        SceneComponent;                                    // 0x3f0(0x8)
	char                                                         pad0xb9_GCS10[0xb9];                               // 0x3f8(0xb9)
	byte                                                         CurrentInteractionState;                           // 0x4b1(0x1)
	bool                                                         CanSetInteractionState;                            // 0x4b2(0x1)
	char                                                         pad0x5_G60X0[0x5];                                 // 0x4b3(0x5)
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class DoubleIntentComponent: public ActorComponent
{
public:
	char                                                         pad0x8_0FP6H[0x8];                                 // 0xc8(0x8)
	float                                                        ServerFirstIntent;                                 // 0xd0(0x4)
	char                                                         pad0x4_TXU6D[0x4];                                 // 0xd4(0x4)
	float                                                        ServerSecondIntent;                                // 0xd8(0x4)
	char                                                         pad0x4_ZIBAE[0x4];                                 // 0xdc(0x4)
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class TestDoubleIntentComponent: public DoubleIntentComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestServiceInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x568] - InheritedSize[0x4c0]
class TestGameModeWithServiceProviderGameState: public GameMode
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseHullDragDynamicsDesc: public DataAsset
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TestHullDragDynamicsDesc: public BaseHullDragDynamicsDesc
{
public:
};


// Size 0x0 (Full Size[0x468] - InheritedSize[0x468]
class TestInteractableObject: public InteractableObject
{
public:
};


// Size 0x90 (Full Size[0x458] - InheritedSize[0x3c8]
class TestLadderActor: public Actor
{
public:
	char                                                         pad0x38_ZZLUC[0x38];                               // 0x3c8(0x38)
	Class SplineComponent*                                       OnTopSplineComponent;                              // 0x400(0x8)
	Class SplineComponent*                                       OffTopSplineComponent;                             // 0x408(0x8)
	Class PhysicalMaterial*                                      LadderPhysicsMaterial;                             // 0x410(0x8)
	char                                                         pad0x40_GJ99H[0x40];                               // 0x418(0x40)
};


// Size 0x40 (Full Size[0x550] - InheritedSize[0x510]
class TestMountedWeapon: public ControllableObject
{
public:
	char                                                         pad0x10_IZHLB[0x10];                               // 0x510(0x10)
	Class Actor*                                                 SetProjectile;                                     // 0x520(0x8)
	Class SceneComponent*                                        CameraAttachComponent;                             // 0x528(0x8)
	char                                                         pad0x20_NWSV1[0x20];                               // 0x530(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestNetworkedEventsFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestNeverAllowedServerNetworkedEventsWhitelistDefinition: public NetworkedEventsWhitelistDefinition
{
public:
};


// Size 0x10 (Full Size[0x7f0] - InheritedSize[0x7e0]
class TestObscuringItemActor: public StaticMeshWieldableItem
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class TestQuestProxy: public Actor
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class TestReturnCompleteAfterTimeoutPlayerRelevancyService: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseRudderDynamicsDesc: public DataAsset
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class TestRudderDynamicsDesc: public BaseRudderDynamicsDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseSailDynamicsDesc: public DataAsset
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TestSailDynamicsDesc: public BaseSailDynamicsDesc
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TestServerNetworkedEventsWhitelistDefinition: public NetworkedEventsWhitelistDefinition
{
public:
	TArray<class ScriptStruct*>                                  ValidEvents;                                       // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TestService: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TestStreamingTeleport: public Object
{
public:
};


// Size 0x88 (Full Size[0x150] - InheritedSize[0xc8]
class TextureFeedbackComponent: public ActorComponent
{
public:
	Class Texture*                                               InputTexture1;                                     // 0xc8(0x8)
	Class Texture2D*                                             InputTexture2;                                     // 0xd0(0x8)
	int                                                          TextureSizeX;                                      // 0xd8(0x4)
	int                                                          TextureSizeY;                                      // 0xdc(0x4)
	Struct Vector4                                               InputData;                                         // 0xe0(0x10)
	char                                                         pad0x48_LQJPT[0x48];                               // 0xf0(0x48)
	Class TextureRenderTarget2D*                                 FeedbackTexture;                                   // 0x138(0x8)
	Class TextureRenderTarget2D*                                 FeedbackTexturePingPong;                           // 0x140(0x8)
	char                                                         pad0x8_UTH15[0x8];                                 // 0x148(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class TinVoyageSettings: public DeveloperSettings
{
public:
	int                                                          ShipVoyageOverallInventoryCapacity;                // 0x38(0x4)
	int                                                          ShipVoyageCompanyIndicatorCount;                   // 0x3c(0x4)
	TArray<struct DebugVoyageEntries>                            DebugVoyageEntries;                                // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TinySharkDebugFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ToggleCapstanStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleItemNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class TrackedActorService: public Object
{
public:
	char                                                         pad0x8_6VEDL[0x8];                                 // 0x28(0x8)
	TArray<class Actor*>                                         ActorsAwaitingRegistration;                        // 0x30(0x10)
	char                                                         pad0x38_PCWTT[0x38];                               // 0x40(0x38)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class TreasureChest: public LargeSkeletalMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class TreasureChestStatic: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TreasureMapCollectionInterface: public Interface
{
public:
};


// Size 0x120 (Full Size[0x950] - InheritedSize[0x830]
class XMarksTheSpotMap: public TreasureMap
{
public:
	int                                                          CanvasWidth;                                       // 0x830(0x4)
	int                                                          CanvasHeight;                                      // 0x834(0x4)
	Class Texture*                                               MarkTexture;                                       // 0x838(0x8)
	Class Texture*                                               AltMarkTexture;                                    // 0x840(0x8)
	Class Texture*                                               UndergroundMarkTexture;                            // 0x848(0x8)
	Class Texture*                                               AltUndergroundMarkTexture;                         // 0x850(0x8)
	float                                                        MarkWidthRatio;                                    // 0x858(0x4)
	float                                                        MarkHeightRatio;                                   // 0x85c(0x4)
	byte                                                         MarkBlendMode;                                     // 0x860(0x1)
	char                                                         pad0x7_Q43R4[0x7];                                 // 0x861(0x7)
	Struct FString                                               MapTexturePath;                                    // 0x868(0x10)
	Struct StringAssetReference                                  MapInventoryTexturePath;                           // 0x878(0x10)
	char                                                         pad0x70_LI4G7[0x70];                               // 0x888(0x70)
	TArray<struct Marks>                                         Marks;                                             // 0x8f8(0x10)
	char                                                         pad0x18_HZZRF[0x18];                               // 0x908(0x18)
	float                                                        Rotation;                                          // 0x920(0x4)
	char                                                         pad0x2c_ZPZML[0x2c];                               // 0x924(0x2c)
};


// Size 0xf8 (Full Size[0x1c0] - InheritedSize[0xc8]
class TreasureMapCollectionComponent: public ActorComponent
{
public:
	char                                                         pad0x88_J3NJG[0x88];                               // 0xc8(0x88)
	class                                                        XMarksTheSpotMapType;                              // 0x150(0x8)
	class                                                        RiddleMapType;                                     // 0x158(0x8)
	class                                                        BountyMapType;                                     // 0x160(0x8)
	class                                                        MerchantMapType;                                   // 0x168(0x8)
	class                                                        CargoRunMapType;                                   // 0x170(0x8)
	class                                                        ContestMapType;                                    // 0x178(0x8)
	class                                                        TornMapType;                                       // 0x180(0x8)
	class                                                        LocationMapType;                                   // 0x188(0x8)
	TArray<class TreasureMap*>                                   TreasureMaps;                                      // 0x190(0x10)
	TArray<struct FName>                                         TreasureMapDestinationIslands;                     // 0x1a0(0x10)
	char                                                         pad0x10_TPE87[0x10];                               // 0x1b0(0x10)
};


// Size 0x128 (Full Size[0x4f0] - InheritedSize[0x3c8]
class TreasureRoom: public Actor
{
public:
	char                                                         pad0x30_VK30Y[0x30];                               // 0x3c8(0x30)
	Class BoxComponent*                                          RoomAreaComponent;                                 // 0x3f8(0x8)
	Class AISpawner*                                             GoldHoarderSpawner;                                // 0x400(0x8)
	Class Actor*                                                 SourceLocationActor;                               // 0x408(0x8)
	Class AIDioramaDesc*                                         AIDioramaDesc;                                     // 0x410(0x8)
	float                                                        TriggerRadius;                                     // 0x418(0x4)
	char                                                         pad0x4_YBFRG[0x4];                                 // 0x41c(0x4)
	Class AISpawnerMusicZoneComponent*                           MusicZoneComponent;                                // 0x420(0x8)
	Class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x428(0x8)
	Class AISpawner*                                             ActiveSpawner;                                     // 0x430(0x8)
	Class AIDioramaController*                                   AIDioramaController;                               // 0x438(0x8)
	char                                                         pad0x90_0UY3G[0x90];                               // 0x440(0x90)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x4d0(0x10)
	char                                                         pad0x10_GT6BX[0x10];                               // 0x4e0(0x10)
};


// Size 0xe0 (Full Size[0x520] - InheritedSize[0x440]
class TreasureVaultItemSpawnComponent: public ItemSpawnComponent
{
public:
	char                                                         pad0x8_J01AP[0x8];                                 // 0x440(0x8)
	byte                                                         ItemSpawnType;                                     // 0x448(0x1)
	char                                                         pad0x7_KKSBV[0x7];                                 // 0x449(0x7)
	TArray<struct VaultTreasureRarity>                           VaultTreasureRarity;                               // 0x450(0x10)
	bool                                                         TrackItemsAndDestroy;                              // 0x460(0x1)
	bool                                                         FinishedSpawning;                                  // 0x461(0x1)
	char                                                         pad0x6_4ZTVP[0x6];                                 // 0x462(0x6)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x468(0xa0)
	char                                                         pad0x18_4Q805[0x18];                               // 0x508(0x18)
};


// Size 0x20 (Full Size[0x420] - InheritedSize[0x400]
class TreasureVaultTable: public InteractableBase
{
public:
	Class VaultKeyMappingDataAsset*                              VaultKeyMapping;                                   // 0x400(0x8)
	char                                                         pad0x18_DBJG7[0x18];                               // 0x408(0x18)
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class TriggerObject: public Actor
{
public:
};


// Size 0x48 (Full Size[0x410] - InheritedSize[0x3c8]
class TeleportTriggerObject: public TriggerObject
{
public:
	Class Actor*                                                 TargetTeleportActor;                               // 0x3c8(0x8)
	Struct Transform                                             TeleportOffset;                                    // 0x3d0(0x30)
	float                                                        RelevancyTimeout;                                  // 0x400(0x4)
	char                                                         pad0xc_XIGMW[0xc];                                 // 0x404(0xc)
};


// Size 0x150 (Full Size[0x2c0] - InheritedSize[0x170]
class TrinketBoxViewModelComponent: public PossessionsChestViewModel
{
public:
	Struct StringAssetReference                                  UnequipActionIcon;                                 // 0x170(0x10)
	Struct FText                                                 TrinketsLockedByCaptainDescription;                // 0x180(0x38)
	Struct FText                                                 ScrambledTrinketOwnerName;                         // 0x1b8(0x38)
	char                                                         pad0x68_P2R1R[0x68];                               // 0x1f0(0x68)
	TArray<class Class*>                                         Categories;                                        // 0x258(0x10)
	bool                                                         AllCategoriesTabWasRequested;                      // 0x268(0x1)
	char                                                         pad0x7_QUV74[0x7];                                 // 0x269(0x7)
	Class TrinketSettings*                                       TrinketSettings;                                   // 0x270(0x8)
	char                                                         pad0x48_OARF5[0x48];                               // 0x278(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TurnOnTheSpotAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class TutorialComponent: public ActorComponent
{
public:
	char                                                         pad0x10_5ZDVN[0x10];                               // 0xc8(0x10)
	bool                                                         HasBegun;                                          // 0xd8(0x1)
	char                                                         pad0x7_NOK6T[0x7];                                 // 0xd9(0x7)
};


// Size 0xcd0 (Full Size[0xdb0] - InheritedSize[0xe0]
class AthenaTutorialComponent: public TutorialComponent
{
public:
	Struct MainTutorialSequence                                  MainTutorial;                                      // 0xe0(0xcd0)
};


// Size 0x1a8 (Full Size[0x570] - InheritedSize[0x3c8]
class TutorialEventControlledObject: public Actor
{
public:
	char                                                         pad0x8_X7C46[0x8];                                 // 0x3c8(0x8)
	Struct ObjectMessagingHandle                                 ActivateEventHandle;                               // 0x3d0(0x58)
	Struct ObjectMessagingHandle                                 DeactivateEventHandle;                             // 0x428(0x58)
	Class WwiseEvent*                                            ActivationSfx;                                     // 0x480(0x8)
	Class WwiseEvent*                                            FullyActivatedSfx;                                 // 0x488(0x8)
	Class WwiseEvent*                                            DeactivationSfx;                                   // 0x490(0x8)
	Class WwiseEvent*                                            FullyDeactivatedSfx;                               // 0x498(0x8)
	bool                                                         IsActivated;                                       // 0x4a0(0x1)
	char                                                         pad0x7_S7YSO[0x7];                                 // 0x4a1(0x7)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x4a8(0xa0)
	Class AthenaPlayerController*                                RegisteredController;                              // 0x548(0x8)
	char                                                         pad0x20_X69L4[0x20];                               // 0x550(0x20)
};


// Size 0x100 (Full Size[0x670] - InheritedSize[0x570]
class TutorialFootsteps: public TutorialEventControlledObject
{
public:
	struct FName                                                 ParamName;                                         // 0x570(0x8)
	Class MaterialInstance*                                      LeftFootprint;                                     // 0x578(0x8)
	Class MaterialInstance*                                      RightFootprint;                                    // 0x580(0x8)
	bool                                                         RaycastLocationsToGround;                          // 0x588(0x1)
	char                                                         pad0x7_4VCI9[0x7];                                 // 0x589(0x7)
	Class FootstepIDAsset*                                       FootstepDataID;                                    // 0x590(0x8)
	bool                                                         StartActivated;                                    // 0x598(0x1)
	char                                                         pad0x3_QN3ZA[0x3];                                 // 0x599(0x3)
	int                                                          NumberStepPairsVisible;                            // 0x59c(0x4)
	float                                                        UpdateInterval;                                    // 0x5a0(0x4)
	float                                                        AnimationInterval;                                 // 0x5a4(0x4)
	int                                                          AnimationSteps;                                    // 0x5a8(0x4)
	float                                                        FadeUpTime;                                        // 0x5ac(0x4)
	float                                                        FadeDownTime;                                      // 0x5b0(0x4)
	float                                                        AutoAnimateDistanceSquared;                        // 0x5b4(0x4)
	Class SplineComponent*                                       SplineComponent;                                   // 0x5b8(0x8)
	Class DecalComponent*                                        DecalComponentLeft;                                // 0x5c0(0x8)
	Class DecalComponent*                                        DecalComponentRight;                               // 0x5c8(0x8)
	TArray<struct LeftDecalEntries>                              LeftDecalEntries;                                  // 0x5d0(0x10)
	TArray<struct RightDecalEntries>                             RightDecalEntries;                                 // 0x5e0(0x10)
	TArray<struct Locations>                                     Locations;                                         // 0x5f0(0x10)
	char                                                         pad0x70_ZP35V[0x70];                               // 0x600(0x70)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TutorialFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x830] - InheritedSize[0x830]
class TutorialMap: public TreasureMap
{
public:
};


// Size 0x0 (Full Size[0x60] - InheritedSize[0x60]
class TutorialTaleQuestService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TutorialTaleQuestServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0xd0 (Full Size[0x198] - InheritedSize[0xc8]
class UIDataRequestComponent: public ActorComponent
{
public:
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class UITelemetryComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnarmedCombatDamagerType: public DamagerType
{
public:
};


// Size 0x30 (Full Size[0x340] - InheritedSize[0x310]
class UnderwaterEffectsComponent: public WwiseEmitterComponent
{
public:
	Class UnderwaterEffectsDataAsset*                            UnderwaterEffectsData;                             // 0x310(0x8)
	Class ParticleSystemComponent*                               SpawnedVfx;                                        // 0x318(0x8)
	char                                                         pad0x20_UZY9N[0x20];                               // 0x320(0x20)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class UnderwaterEffectsDataAsset: public DataAsset
{
public:
	Class WwiseEvent*                                            StartUnderwaterSfx;                                // 0x28(0x8)
	Class WwiseEvent*                                            StopUnderwaterSfx;                                 // 0x30(0x8)
	Class Object*                                                UnderwaterVfx;                                     // 0x38(0x8)
	struct FName                                                 UnderwaterVfxSocketName;                           // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UndoRepairActionStateId: public ActionStateId
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class UnifiedDelegateTestUnifiedDelegate: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnloadItemActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnlockedGhostCurseStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnlockedSkeletonCurseStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x580] - InheritedSize[0x580]
class UnmanagedSalvageItemSpawnComponent: public SalvageItemSpawnComponent
{
public:
};


// Size 0x40 (Full Size[0x5c0] - InheritedSize[0x580]
class IslandWatercraftSpawnComponent: public UnmanagedSalvageItemSpawnComponent
{
public:
	float                                                        MinMaxYawOffset;                                   // 0x580(0x4)
	float                                                        MinDistanceToNearestWatercraftInMetres;            // 0x584(0x4)
	char                                                         pad0x38_73C0M[0x38];                               // 0x588(0x38)
};


// Size 0x10 (Full Size[0x590] - InheritedSize[0x580]
class UnmanagedSalvageItemSpawnComponentMock: public UnmanagedSalvageItemSpawnComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseCannonActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class UseConcealingObjectNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseHarpoonLauncherActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseLadderActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseMapTableActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VaultMaterialSetDataAsset: public DataAsset
{
public:
	TArray<struct BlockConfigurations>                           BlockConfigurations;                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class VerticalPulleyAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class VfxStoryResponseDataAsset: public DataAsset
{
public:
	Struct FeatureFlag                                           Feature;                                           // 0x28(0xc)
	char                                                         pad0x4_NYMU9[0x4];                                 // 0x34(0x4)
	TArray<struct StoryResponses>                                StoryResponses;                                    // 0x38(0x10)
	TArray<class VfxStoryResponseDataAsset*>                     AssetsList;                                        // 0x48(0x10)
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class VfxStoryResponseManager: public Actor
{
public:
	Class VfxStoryResponseDataAsset*                             VfxStoryResponseDataAsset;                         // 0x3c8(0x8)
	TArray<class Actor*>                                         Emitters;                                          // 0x3d0(0x10)
	float                                                        EmitterValue;                                      // 0x3e0(0x4)
	char                                                         pad0x1c_ZB5HL[0x1c];                               // 0x3e4(0x1c)
};


// Size 0xd0 (Full Size[0x198] - InheritedSize[0xc8]
class VisualHealthResponseComponent: public ActorComponent
{
public:
	Class ParticleSystemComponent*                               ActiveVfx;                                         // 0xc8(0x8)
	Class VisualHealthResponseDataAsset*                         VisualHealthResponseData;                          // 0xd0(0x8)
	TArray<class MaterialInstanceDynamic*>                       HealthResponseMaterials;                           // 0xd8(0x10)
	char                                                         pad0x88_FTSW6[0x88];                               // 0xe8(0x88)
	bool                                                         WaitForAllMeshChange;                              // 0x180(0x1)
	char                                                         pad0x7_CEGE7[0x7];                                 // 0x181(0x7)
	char                                                         pad0x10_2QP3I[0x10];                               // 0x188(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class VisualHealthResponseDataAsset: public DataAsset
{
public:
	TArray<class Object*>                                        GatedByHealthVfxAscendingOrder;                    // 0x28(0x10)
	struct FName                                                 GatedByHealthVfxSocketName;                        // 0x38(0x8)
	bool                                                         GatedByHealthVfxValidUnderwater;                   // 0x40(0x1)
	char                                                         pad0x3_FENH7[0x3];                                 // 0x41(0x3)
	struct FName                                                 HealthPropertyName;                                // 0x44(0x8)
	float                                                        SignificantHealthChangeNormalised;                 // 0x4c(0x4)
};


// Size 0x1c0 (Full Size[0x4a0] - InheritedSize[0x2e0]
class VoiceChatComponent: public SceneComponent
{
public:
	char                                                         pad0x8_9R24A[0x8];                                 // 0x2e0(0x8)
	Struct WwiseEmitter                                          Emitter;                                           // 0x2e8(0x20)
	struct FName                                                 MouthSocketNameOnCharacterMesh;                    // 0x308(0x8)
	char                                                         pad0x190_DJEZU[0x190];                             // 0x310(0x190)
};


// Size 0x8 (Full Size[0x658] - InheritedSize[0x650]
class VolcanicRock: public CannonProjectile
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VomitBoutData: public DataAsset
{
public:
	float                                                        MinTimeBetweenSpews;                               // 0x28(0x4)
	float                                                        MaxTimeBetweenSpews;                               // 0x2c(0x4)
	float                                                        MinSpewDuration;                                   // 0x30(0x4)
	float                                                        MaxSpewDuration;                                   // 0x34(0x4)
};


// Size 0x380 (Full Size[0x960] - InheritedSize[0x5e0]
class VomitComponent: public CapsuleComponent
{
public:
	float                                                        VomitFxDurationWhenSpewingIntoBucket;              // 0x5e0(0x4)
	char                                                         pad0x4_VGWS6[0x4];                                 // 0x5e4(0x4)
	Struct VomitVFX                                              VomitVFX;                                          // 0x5e8(0x240)
	Class WwiseEvent*                                            VomitSfx;                                          // 0x828(0x8)
	Class WwiseEvent*                                            VomitInBucketSfx;                                  // 0x830(0x8)
	Struct VomitScreenFX                                         VomitScreenFX;                                     // 0x838(0x2c)
	char                                                         pad0x4_NAQC4[0x4];                                 // 0x864(0x4)
	Struct VomitProjectiles                                      VomitProjectiles;                                  // 0x868(0x50)
	float                                                        ImmunityAgainstContractingAfterVomiting;           // 0x8b8(0x4)
	float                                                        ChanceForContractingVomitingIfBeingVomitedOn;      // 0x8bc(0x4)
	Struct FloatRange                                            ContractedVomitingSpewDuration;                    // 0x8c0(0x10)
	Struct FloatRange                                            ContractedVomitingSpewDelay;                       // 0x8d0(0x10)
	struct FName                                                 ContractedVomitVFXType;                            // 0x8e0(0x8)
	float                                                        DebugInterval;                                     // 0x8e8(0x4)
	char                                                         pad0x4_8ZMCO[0x4];                                 // 0x8ec(0x4)
	Class VomitBoutData*                                         BoutData;                                          // 0x8f0(0x8)
	char                                                         pad0x68_N09NF[0x68];                               // 0x8f8(0x68)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class VomitStatus: public StatusBase
{
public:
};


// Size 0xf0 (Full Size[0x4f0] - InheritedSize[0x400]
class VotableObjectView: public InteractableBase
{
public:
	char                                                         pad0x10_70FBG[0x10];                               // 0x400(0x10)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x410(0x8)
	Class VotableBaseComponent*                                  VotableObject;                                     // 0x418(0x8)
	float                                                        HoldToTriggerTime;                                 // 0x420(0x4)
	char                                                         pad0x4_CGJX9[0x4];                                 // 0x424(0x4)
	TArray<Interface Voters>                                     Voters;                                            // 0x428(0x10)
	char                                                         pad0xb8_2VTLE[0xb8];                               // 0x438(0xb8)
};


// Size 0x0 (Full Size[0x4f0] - InheritedSize[0x4f0]
class WarMapVotableObjectView: public VotableObjectView
{
public:
};


// Size 0x0 (Full Size[0x4f0] - InheritedSize[0x4f0]
class WarMapCancelVotableObjectView: public WarMapVotableObjectView
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class VotableBaseComponent: public ActorComponent
{
public:
};


// Size 0x228 (Full Size[0x2f0] - InheritedSize[0xc8]
class VotableWithSessionComponent: public VotableBaseComponent
{
public:
	Struct FText                                                 VoteTooltipText;                                   // 0xc8(0x38)
	Struct FText                                                 CantVoteTooltipText;                               // 0x100(0x38)
	Struct FText                                                 CancelExistingPrimaryTooltipText;                  // 0x138(0x38)
	Struct FText                                                 CancelExistingAthenaVoyageTooltipText;             // 0x170(0x38)
	Struct FText                                                 CancelExistingTaleTooltipText;                     // 0x1a8(0x38)
	Struct FText                                                 BlockedByFactionTooltipText;                       // 0x1e0(0x38)
	bool                                                         CancelExistingPrimaryVoyages;                      // 0x218(0x1)
	char                                                         pad0x7_KNIG5[0x7];                                 // 0x219(0x7)
	class                                                        VoteActionInputId;                                 // 0x220(0x8)
	class                                                        VoteActionReleaseInputId;                          // 0x228(0x8)
	char                                                         pad0xc0_JTLR8[0xc0];                               // 0x230(0xc0)
};


// Size 0x160 (Full Size[0x450] - InheritedSize[0x2f0]
class VotableVoyageProposalComponent: public VotableWithSessionComponent
{
public:
	float                                                        TooltipUIFadeDuration;                             // 0x2f0(0x4)
	Struct Vector2D                                              TooltipUIScreenSpaceOffsetRatio;                   // 0x2f4(0x8)
	char                                                         pad0x4_R0B8V[0x4];                                 // 0x2fc(0x4)
	Struct ProposedVoyageEntry                                   ProposedEntry;                                     // 0x300(0x30)
	Struct ProposedTaleEntry                                     ProposedTale;                                      // 0x330(0x18)
	Class StaticMeshComponent*                                   VotableMeshComponent;                              // 0x348(0x8)
	char                                                         pad0x100_NO6FY[0x100];                             // 0x350(0x100)
};


// Size 0x0 (Full Size[0x450] - InheritedSize[0x450]
class CancelVoyageVotableComponent: public VotableVoyageProposalComponent
{
public:
};


// Size 0x30 (Full Size[0x480] - InheritedSize[0x450]
class VoteOnVoyageVotableComponent: public VotableVoyageProposalComponent
{
public:
	float                                                        HoldToWithdrawVoyageTime;                          // 0x450(0x4)
	char                                                         pad0x4_NHXB3[0x4];                                 // 0x454(0x4)
	class                                                        WithdrawActionInputId;                             // 0x458(0x8)
	class                                                        WithdrawActionReleasedInputId;                     // 0x460(0x8)
	char                                                         pad0x18_135K8[0x18];                               // 0x468(0x18)
};


// Size 0x110 (Full Size[0x590] - InheritedSize[0x480]
class VoteOnWarMapComponent: public VoteOnVoyageVotableComponent
{
public:
	Struct FText                                                 CrewOnInvasionTooltipText;                         // 0x480(0x38)
	Struct FText                                                 CrewInRangeOfEnemyFactionShipText;                 // 0x4b8(0x38)
	TArray<struct FactionDisplayInfos>                           FactionDisplayInfos;                               // 0x4f0(0x10)
	char                                                         pad0x90_PAF0C[0x90];                               // 0x500(0x90)
};


// Size 0x0 (Full Size[0x590] - InheritedSize[0x590]
class CancelVoteOnWarMapComponent: public VoteOnWarMapComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageDescList: public DataAsset
{
public:
	TArray<Assetclass Tales>                                     Tales;                                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class VoyageGeneratorSim: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageGeneratorSimBlackboardFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageGeneratorSimFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0xe0 (Full Size[0x108] - InheritedSize[0x28]
class VoyageGeneratorSimResult: public Object
{
public:
	char                                                         pad0xd0_E7X3O[0xd0];                               // 0x28(0xd0)
	Struct Vector                                                StartingLocation;                                  // 0xf8(0xc)
	char                                                         pad0x4_X3J8U[0x4];                                 // 0x104(0x4)
};


// Size 0x20 (Full Size[0x800] - InheritedSize[0x7e0]
class VoyageInAContainerWieldableItem: public StaticMeshWieldableItem
{
public:
	TArray<struct VoyageRecipeList>                              VoyageRecipeList;                                  // 0x7e0(0x10)
	Class WwiseEvent*                                            OnOpenedSfx;                                       // 0x7f0(0x8)
	char                                                         pad0x8_7GTYC[0x8];                                 // 0x7f8(0x8)
};


// Size 0xa8 (Full Size[0x1d0] - InheritedSize[0x128]
class VoyageInventoryViewModelComponent: public ViewModelComponentBase
{
public:
	char                                                         pad0x18_RMPCN[0x18];                               // 0x128(0x18)
	Class PlayerController*                                      PlayerController;                                  // 0x140(0x8)
	char                                                         pad0x80_TH2GC[0x80];                               // 0x148(0x80)
	Class TaleBlockedByFactionDataAsset*                         TaleBlockedByFactionDataAsset;                     // 0x1c8(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class VoyageRecipesDebugMenuEntryGenerator: public DebugMenuEntryGenerator
{
public:
	bool                                                         Regenerate;                                        // 0x28(0x1)
	char                                                         pad0x7_TXP2N[0x7];                                 // 0x29(0x7)
	TArray<struct Recipes>                                       Recipes;                                           // 0x30(0x10)
	TArray<struct Proposals>                                     Proposals;                                         // 0x40(0x10)
	TArray<struct DescAssets>                                    DescAssets;                                        // 0x50(0x10)
	TArray<Str AssetNames>                                       AssetNames;                                        // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VulnerabilityAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class VulnerabilityAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        VulnerabilityDurationMultiplier;                   // 0x40(0x4)
	float                                                        MaxVulnerabilityPeriodHealthMultiplier;            // 0x44(0x4)
};


// Size 0x70 (Full Size[0xe8] - InheritedSize[0x78]
class VulnerabilityAIAbility: public AthenaAIAbility
{
public:
	Class Pawn*                                                  Owner;                                             // 0x78(0x8)
	Class VulnerabilityAIAbilityParams*                          SetupAbilityParams;                                // 0x80(0x8)
	char                                                         pad0x60_02RXZ[0x60];                               // 0x88(0x60)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class VulnerabilityAIAbilityParams: public AthenaAIAbilityParams
{
public:
	Struct AthenaAIAbilityPlayerBasedRanges                      VulnerabilityDuration;                             // 0xc8(0x10)
	Struct AthenaAIAbilityPlayerBasedRanges                      MaxVulnerabilityPeriodDamageThreshold;             // 0xd8(0x10)
};


// Size 0xf0 (Full Size[0x188] - InheritedSize[0x98]
class WaitForCrewMemberToApproachNamedPointGroupStep: public TaleQuestStep
{
public:
	char                                                         pad0x20_2XASN[0x20];                               // 0x98(0x20)
	TArray<struct NamedPointGroup>                               NamedPointGroup;                                   // 0xb8(0x10)
	char                                                         pad0xc0_8VGB9[0xc0];                               // 0xc8(0xc0)
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class WaitForCrewMemberToApproachNamedPointGroupStepDesc: public TaleQuestStepDesc
{
public:
	bool                                                         IsNamedPointActorCrewsShip;                        // 0x80(0x1)
	char                                                         pad0x7_VYEC5[0x7];                                 // 0x81(0x7)
	Struct QuestVariableActor                                    ActorToSearch;                                     // 0x88(0x30)
	Struct QuestVariablePlayerActor                              OptionalPlayerActor;                               // 0xb8(0x30)
	struct FName                                                 GroupName;                                         // 0xe8(0x8)
	Struct Guid                                                  CrewId;                                            // 0xf0(0x10)
	byte                                                         EvaluationType;                                    // 0x100(0x1)
	char                                                         pad0x3_8TTC2[0x3];                                 // 0x101(0x3)
	float                                                        MinRadiusFromAnyPointInGroup;                      // 0x104(0x4)
	bool                                                         CheckForLeave;                                     // 0x108(0x1)
	char                                                         pad0x7_CUFZ2[0x7];                                 // 0x109(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaitForDemoResetActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class WaitForMechanismActionCompletionStep: public TaleQuestStep
{
public:
	Class WaitForMechanismActionCompletionStepDesc*              Desc;                                              // 0x98(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class WaitForMechanismActivationStep: public TaleQuestStep
{
public:
	Class WaitForMechanismActivationStepDesc*                    Desc;                                              // 0x98(0x8)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class WaitForMechanismActionCompletionStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
	bool                                                         BlockCrewMigrationWhileWaiting;                    // 0xb0(0x1)
	char                                                         pad0x7_J7FU0[0x7];                                 // 0xb1(0x7)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForMechanismActivationStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Action;                                            // 0x80(0x30)
};


// Size 0x90 (Full Size[0x128] - InheritedSize[0x98]
class WaitForNPCDialogOptionEventStep: public TaleQuestStep
{
public:
	Class WaitForNPCDialogOptionEventStepDesc*                   Desc;                                              // 0x98(0x8)
	Class Actor*                                                 ActorVar;                                          // 0xa0(0x8)
	char                                                         pad0x80_ESE5B[0x80];                               // 0xa8(0x80)
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class WaitForNPCDialogOptionEventStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 EventName;                                         // 0x80(0x8)
	Struct QuestVariableActor                                    ActorVar;                                          // 0x88(0x30)
	Struct QuestVariableActor                                    InteractingPlayer;                                 // 0xb8(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class WaitForUnlockStep: public TaleQuestStep
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForUnlockStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    LockedActor;                                       // 0x80(0x30)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class WaitForVaultCompletionStep: public TaleQuestStep
{
public:
	Class WaitForVaultCompletionStepDesc*                        Desc;                                              // 0x98(0x8)
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class WaitForVaultCompletionStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
	Struct FText                                                 VaultFailureMessage;                               // 0xb0(0x38)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class WaitForVaultOuterDoorClosedStep: public TaleQuestStep
{
public:
	Class PuzzleVault*                                           Vault;                                             // 0x98(0x8)
	char                                                         pad0x8_0CZNS[0x8];                                 // 0xa0(0x8)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForVaultOuterDoorClosedStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Vault;                                             // 0x80(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaitingToSpawnActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class WaitOnCollectableQuestObjectStep: public TaleQuestStep
{
public:
	char                                                         pad0x8_Z7HKD[0x8];                                 // 0x98(0x8)
	Class WaitOnCollectableQuestObjectStepDesc*                  StepDesc;                                          // 0xa0(0x8)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class WaitOnCollectableQuestObjectStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    CollectableActor;                                  // 0x80(0x30)
	Struct QuestVariablePlayerActor                              CollectingPlayerActor;                             // 0xb0(0x30)
};


// Size 0x68 (Full Size[0x430] - InheritedSize[0x3c8]
class WallClock: public Actor
{
public:
	Class PoseableMeshComponent*                                 ClockMesh;                                         // 0x3c8(0x8)
	struct FName                                                 MinuteHandBoneName;                                // 0x3d0(0x8)
	struct FName                                                 HourHandBoneName;                                  // 0x3d8(0x8)
	float                                                        ClockTimeUpdateRateInSeconds;                      // 0x3e0(0x4)
	float                                                        MeshRotationCorrection;                            // 0x3e4(0x4)
	char                                                         pad0x38_MK6NH[0x38];                               // 0x3e8(0x38)
	Class MaterialInstanceDynamic*                               ClockMeshDynamicMaterialInstance;                  // 0x420(0x8)
	char                                                         pad0x8_AOMYQ[0x8];                                 // 0x428(0x8)
};


// Size 0x608 (Full Size[0x9d0] - InheritedSize[0x3c8]
class WarMapProposalContainer: public Actor
{
public:
	char                                                         pad0x20_OYH99[0x20];                               // 0x3c8(0x20)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x3e8(0x8)
	TArray<class WarMapInteractionVoteComponent*>                VoteComponents;                                    // 0x3f0(0x10)
	Class WarMapInteractionComponent*                            InteractionComponent;                              // 0x400(0x8)
	Class StaticMeshComponent*                                   WarMapMesh;                                        // 0x408(0x8)
	Class StaticMeshComponent*                                   WarMapMeshHardMode;                                // 0x410(0x8)
	Class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0x418(0x8)
	struct FName                                                 OpenScrollMaterialAnimationName;                   // 0x420(0x8)
	struct FName                                                 CloseScrollMaterialAnimationName;                  // 0x428(0x8)
	Struct FText                                                 CloseMapInteractionText;                           // 0x430(0x38)
	class                                                        CloseMapInteractionInput;                          // 0x468(0x8)
	class                                                        CloseMapHoldInteractionInput;                      // 0x470(0x8)
	float                                                        CloseMapHoldDuration;                              // 0x478(0x4)
	char                                                         pad0x4_DLIBD[0x4];                                 // 0x47c(0x4)
	Class WwiseEvent*                                            OpenMapSfx;                                        // 0x480(0x8)
	Class WwiseEvent*                                            CloseMapSfx;                                       // 0x488(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x490(0x8)
	bool                                                         IsWarMapOpen;                                      // 0x498(0x1)
	bool                                                         ShowHardModeVoting;                                // 0x499(0x1)
	bool                                                         ShipCrewHasJoinedFaction;                          // 0x49a(0x1)
	char                                                         pad0x5_PQZ8V[0x5];                                 // 0x49b(0x5)
	Class Ship*                                                  ParentShip;                                        // 0x4a0(0x8)
	Struct Guid                                                  ParentShipCrewId;                                  // 0x4a8(0x10)
	Struct FText                                                 CrewFactionDisplayName;                            // 0x4b8(0x38)
	char                                                         pad0x4e0_E2EOP[0x4e0];                             // 0x4f0(0x4e0)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class WasProjectileFiredFromTypeOfActorStatCondition: public TargetedStatCondition
{
public:
	byte                                                         ProjectileFiredFromType;                           // 0x30(0x1)
	char                                                         pad0x7_WXS5I[0x7];                                 // 0x31(0x7)
};


// Size 0x178 (Full Size[0x688] - InheritedSize[0x510]
class WaterBarrel: public ControllableObject
{
public:
	char                                                         pad0x30_FP1SQ[0x30];                               // 0x510(0x30)
	Class WwiseObjectPoolWrapper*                                WaterBarrelSfxPool;                                // 0x540(0x8)
	Class WwiseEvent*                                            WaterBarrelStartLeakingSfx;                        // 0x548(0x8)
	Class WwiseEvent*                                            WaterBarrelStopLeakingSfx;                         // 0x550(0x8)
	Class WwiseEvent*                                            WaterBarrelStartPumpingSfx;                        // 0x558(0x8)
	Class WwiseEvent*                                            WaterBarrelStopPumpingSfx;                         // 0x560(0x8)
	Class WwiseEvent*                                            WaterBarrelLetStartPumpingSfx;                     // 0x568(0x8)
	Class WwiseEvent*                                            WaterBarrelLetStopPumpingSfx;                      // 0x570(0x8)
	Struct Vector                                                MinWaterHeight;                                    // 0x578(0xc)
	Struct Vector                                                MaxWaterHeight;                                    // 0x584(0xc)
	char                                                         pad0x18_JPZXP[0x18];                               // 0x590(0x18)
	Class StaticMeshComponent*                                   BarrelMesh;                                        // 0x5a8(0x8)
	Class StaticMeshComponent*                                   HandleMesh;                                        // 0x5b0(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x5b8(0x8)
	Class LiquidContainerComponent*                              LiquidContainerComponent;                          // 0x5c0(0x8)
	float                                                        MaxCapacity;                                       // 0x5c8(0x4)
	float                                                        CurrentCapacity;                                   // 0x5cc(0x4)
	float                                                        MaxLiquidCollectionAmount;                         // 0x5d0(0x4)
	float                                                        PumpResetTime;                                     // 0x5d4(0x4)
	float                                                        WaterIncreasePerPump;                              // 0x5d8(0x4)
	char                                                         pad0x4_NUP7I[0x4];                                 // 0x5dc(0x4)
	Class CurveFloat*                                            HandleRotationCurve;                               // 0x5e0(0x8)
	Class CurveFloat*                                            WaterFlowCurve;                                    // 0x5e8(0x8)
	float                                                        WaterIntensityIncreaseSpeed;                       // 0x5f0(0x4)
	float                                                        WaterIntensityDecreaseSpeed;                       // 0x5f4(0x4)
	float                                                        TargetWaterIntensity;                              // 0x5f8(0x4)
	char                                                         pad0x4_N2OHW[0x4];                                 // 0x5fc(0x4)
	float                                                        MinPumpRotation;                                   // 0x600(0x4)
	float                                                        MaxPumpRotation;                                   // 0x604(0x4)
	bool                                                         IsPumpingWater;                                    // 0x608(0x1)
	char                                                         pad0x17_PGHJY[0x17];                               // 0x609(0x17)
	struct FName                                                 DockingSocketName;                                 // 0x620(0x8)
	Struct Vector                                                LookAtPosLocalSpace;                               // 0x628(0xc)
	char                                                         pad0x4_VIVBU[0x4];                                 // 0x634(0x4)
	Class Object*                                                WaterSurfaceVFXTemplate;                           // 0x638(0x8)
	Class Object*                                                WaterPumpVFXTemplate;                              // 0x640(0x8)
	Class ParticleSystemComponent*                               WaterPumpParticleComponent;                        // 0x648(0x8)
	Class ParticleSystemComponent*                               WaterSurfaceParticleComponent;                     // 0x650(0x8)
	TArray<struct HandleFeedbackLevels>                          HandleFeedbackLevels;                              // 0x658(0x10)
	char                                                         pad0x20_Y5531[0x20];                               // 0x668(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterBarrelActionStateId: public ActionStateId
{
public:
};


// Size 0x78 (Full Size[0x318] - InheritedSize[0x2a0]
class WaterBarrelInputComponent: public LookAtOffsetInputComponent
{
public:
	Class WaterBarrel*                                           WaterBarrel;                                       // 0x2a0(0x8)
	char                                                         pad0x70_2IA9Z[0x70];                               // 0x2a8(0x70)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WaterBarrelLeverNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WaterBarrelLeverDeactivatedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class WatermarkComponent: public ActorComponent
{
public:
};


// Size 0x90 (Full Size[0x370] - InheritedSize[0x2e0]
class WaterModifierZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_ZJOH6[0x8];                                 // 0x2e0(0x8)
	Struct WaterModifierZoneParameters                           WaterModifierZoneParameters;                       // 0x2e8(0x78)
	bool                                                         RegisterOnBegin;                                   // 0x360(0x1)
	char                                                         pad0xf_1L6DV[0xf];                                 // 0x361(0xf)
};


// Size 0x20 (Full Size[0x390] - InheritedSize[0x370]
class MurkWaterModifierZoneComponent: public WaterModifierZoneComponent
{
public:
	float                                                        MaximumInnerRadius;                                // 0x368(0x4)
	float                                                        MaximumOuterRadius;                                // 0x36c(0x4)
	Class CurveFloat*                                            ActivationCurve;                                   // 0x370(0x8)
	Class CurveFloat*                                            DeactivationCurve;                                 // 0x378(0x8)
	bool                                                         DeactivateActorWhenInactive;                       // 0x380(0x1)
	byte                                                         State;                                             // 0x381(0x1)
	char                                                         pad0xe_NYBN8[0xe];                                 // 0x382(0xe)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class WaterModifierZoneService: public Object
{
public:
	char                                                         pad0x8_EMC36[0x8];                                 // 0x28(0x8)
	TArray<Interface RegisteredWaterModifierZones>               RegisteredWaterModifierZones;                      // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneType_Default: public WaterModifierZoneType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneType_Murk: public WaterModifierZoneType
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class WaterSensitiveComponent: public ActorComponent
{
public:
	Class WaterSensitiveComponentDataAsset*                      WaterSensitiveData;                                // 0xc8(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WaterSensitiveComponentDataAsset: public DataAsset
{
public:
	Struct WaterSensitiveHealthChange                            HealthChangeInRainPerSecond;                       // 0x28(0x8)
	Struct WaterSensitiveHealthChange                            HealthChangeSubmergedPerSecond;                    // 0x30(0x8)
	Struct WaterSensitiveHealthChange                            HealthChangeWhenDryPerSecond;                      // 0x38(0x8)
	Struct WaterSensitiveHealthChange                            HealthChangeOnLiquidProjectileImpact;              // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WeakActorHandleTestsFunctionLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class WeaponInterruptedStatusType: public StatusBase
{
public:
};


// Size 0x1b0 (Full Size[0x278] - InheritedSize[0xc8]
class WeepingComponent: public ActorComponent
{
public:
	float                                                        FillRate;                                          // 0xc8(0x4)
	float                                                        MinWeepDuration;                                   // 0xcc(0x4)
	float                                                        MaxWeepDuration;                                   // 0xd0(0x4)
	float                                                        MinCalmDuration;                                   // 0xd4(0x4)
	float                                                        MaxCalmDuration;                                   // 0xd8(0x4)
	float                                                        MaterialBlendInTime;                               // 0xdc(0x4)
	float                                                        MaterialBlendOutTime;                              // 0xe0(0x4)
	float                                                        DecalBlendInTime;                                  // 0xe4(0x4)
	float                                                        DecalBlendOutTime;                                 // 0xe8(0x4)
	float                                                        SFXEmitterHeightOffset;                            // 0xec(0x4)
	Class WwiseEvent*                                            StartWeepingSFX;                                   // 0xf0(0x8)
	Class WwiseEvent*                                            StopWeepingSFX;                                    // 0xf8(0x8)
	char                                                         pad0x38_5NL90[0x38];                               // 0x100(0x38)
	Class WwiseObjectPoolWrapper*                                WeepingSFXPool;                                    // 0x138(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x140(0x10)
	Class MaterialInstanceDynamic*                               DecalMaterial;                                     // 0x150(0x8)
	byte                                                         State;                                             // 0x158(0x1)
	char                                                         pad0x37_VT4Z8[0x37];                               // 0x159(0x37)
	struct FName                                                 SupressableEmitterTag;                             // 0x190(0x8)
	TArray<class ParticleSystemComponent*>                       ParticleEmitters;                                  // 0x198(0x10)
	char                                                         pad0xd0_QHPI2[0xd0];                               // 0x1a8(0xd0)
};


// Size 0xe8 (Full Size[0x550] - InheritedSize[0x468]
class WellOfFates: public InteractableObject
{
public:
	char                                                         pad0x10_Y29ZM[0x10];                               // 0x468(0x10)
	Class SkeletalMeshComponent*                                 SkeletalMesh;                                      // 0x478(0x8)
	Class StaticMeshComponent*                                   StaticMesh;                                        // 0x480(0x8)
	Class ParticleSystemComponent*                               LanternParticleSystem;                             // 0x488(0x8)
	Class ParticleSystemComponent*                               WellOfFatesParticleSystem;                         // 0x490(0x8)
	Class PointLightComponent*                                   PointLight;                                        // 0x498(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x4a0(0x8)
	float                                                        InteractionRadius;                                 // 0x4a8(0x4)
	char                                                         pad0x4_3IFN4[0x4];                                 // 0x4ac(0x4)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x4b0(0xa0)
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class WetnessComponent: public ActorComponent
{
public:
	Struct Vector                                                MaxWaterLevel;                                     // 0xc8(0xc)
	Struct Vector                                                MinWaterLevel;                                     // 0xd4(0xc)
	float                                                        DryingTime;                                        // 0xe0(0x4)
	float                                                        LastWaterLevel;                                    // 0xe4(0x4)
	float                                                        LastWetTime;                                       // 0xe8(0x4)
	float                                                        WaterLevel;                                        // 0xec(0x4)
	Struct Vector                                                Rep_WetData;                                       // 0xf0(0xc)
	char                                                         pad0x4_Q9KNR[0x4];                                 // 0xfc(0x4)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x100(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class WheelDescAsset: public ShipPartDescAsset
{
public:
	Struct WheelDesc                                             WheelDesc;                                         // 0x28(0x28)
};


// Size 0x590 (Full Size[0xaa0] - InheritedSize[0x510]
class Wheel: public ControllableObject
{
public:
	char                                                         pad0x30_SZLOU[0x30];                               // 0x510(0x30)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x540(0x8)
	Class SkeletalMeshMemoryConstraintComponent*                 WheelMeshComponent;                                // 0x548(0x8)
	Struct WheelAnimationProperties                              WheelAnimationProps;                               // 0x550(0x78)
	Struct WheelEventProperties                                  WheelEventProps;                                   // 0x5c8(0x8)
	Class ForceFeedbackEffect*                                   CenteredForceFeedbackEffect;                       // 0x5d0(0x8)
	Class ForceFeedbackEffect*                                   TurbulenceForceFeedbackEffect;                     // 0x5d8(0x8)
	struct FName                                                 TurbulenceForceFeedbackTag;                        // 0x5e0(0x8)
	Class ForceFeedbackEffect*                                   SteeringForceFeedbackEffect;                       // 0x5e8(0x8)
	struct FName                                                 SteeringForceFeedbackTag;                          // 0x5f0(0x8)
	Class WwiseObjectPoolWrapper*                                EmitterPool;                                       // 0x5f8(0x8)
	Class WwiseEvent*                                            WheelStartedMovingEvent;                           // 0x600(0x8)
	Class WwiseEvent*                                            WheelHasStoppedEvent;                              // 0x608(0x8)
	Class WwiseEvent*                                            WheelIsStoppingEvent;                              // 0x610(0x8)
	Class WwiseEvent*                                            DamagedWheelStartedMovingEvent;                    // 0x618(0x8)
	Class WwiseEvent*                                            DamagedWheelHasStoppedEvent;                       // 0x620(0x8)
	Class WwiseEvent*                                            DamagedWheelIsStoppingEvent;                       // 0x628(0x8)
	Class WwiseEvent*                                            WheelCenteredEvent;                                // 0x630(0x8)
	Class WwiseEvent*                                            FightingTurbulenceStartEvent;                      // 0x638(0x8)
	Class WwiseEvent*                                            FightingTurbulenceStopEvent;                       // 0x640(0x8)
	Class WwiseEvent*                                            SqueakyWheelEvent;                                 // 0x648(0x8)
	struct FName                                                 RTPCTurnRateName;                                  // 0x650(0x8)
	struct FName                                                 RTPCTurnAngleName;                                 // 0x658(0x8)
	struct FName                                                 WheelDamageRTPC;                                   // 0x660(0x8)
	bool                                                         DisableTurbulence;                                 // 0x668(0x1)
	char                                                         pad0x7_9JN7C[0x7];                                 // 0x669(0x7)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x680(0x8)
	Class BoxComponent*                                          PlayerCollisionComponent;                          // 0x688(0x8)
	Class ShipDamageableComponent*                               WheelDamageComponent;                              // 0x690(0x8)
	Class RepairableComponent*                                   RepairableComponentWest;                           // 0x698(0x8)
	Class RepairableComponent*                                   RepairableComponentEast;                           // 0x6a0(0x8)
	Class RepairableComponent*                                   RepairableComponentSouth;                          // 0x6a8(0x8)
	char                                                         pad0x50_4RW2Y[0x50];                               // 0x6b0(0x50)
	Struct Vector                                                ShipPartFireCellActorSpaceLocation;                // 0x700(0xc)
	char                                                         pad0x24_6XB7J[0x24];                               // 0x70c(0x24)
	Class MemoryConstrainedMeshInitializer*                      WheelMMCMeshInitializer;                           // 0x730(0x8)
	Class WheelDescAsset*                                        DescToSetWhenSafe;                                 // 0x738(0x8)
	Class WheelDescAsset*                                        CurrentWheelDesc;                                  // 0x740(0x8)
	float                                                        DamageSpeedMultiplierLevel1;                       // 0x748(0x4)
	float                                                        DamageSpeedMultiplierLevel2;                       // 0x74c(0x4)
	float                                                        DamageSpeedMultiplierLevel3;                       // 0x750(0x4)
	char                                                         pad0x4_PZ5ZS[0x4];                                 // 0x754(0x4)
	Class ParticleSystem*                                        WheelDamageParticleSystem;                         // 0x758(0x8)
	char                                                         pad0x18_P5A3T[0x18];                               // 0x760(0x18)
	float                                                        TurbulenceFactor;                                  // 0x778(0x4)
	float                                                        ServerWheelAngle;                                  // 0x77c(0x4)
	float                                                        ServerWantedAngle;                                 // 0x780(0x4)
	char                                                         pad0x24_72I05[0x24];                               // 0x784(0x24)
	float                                                        CenterJoltDuration;                                // 0x7a8(0x4)
	float                                                        CenterJoltSlowDownFactor;                          // 0x7ac(0x4)
	char                                                         pad0x20_BDQEV[0x20];                               // 0x7b0(0x20)
	Class DamageableShipPartAudioParams*                         WheelDamageLevelAudio;                             // 0x7d0(0x8)
	char                                                         pad0x4_1E4OM[0x4];                                 // 0x7d8(0x4)
	float                                                        MaxWheelAngle;                                     // 0x7dc(0x4)
	float                                                        MinWheelAngle;                                     // 0x7e0(0x4)
	float                                                        SqueakAtAngle;                                     // 0x7e4(0x4)
	byte                                                         AllowedWheelDirection;                             // 0x7e8(0x1)
	char                                                         pad0x7_LUPJD[0x7];                                 // 0x7e9(0x7)
	Class NarratedShipDirectionComponent*                        NarratedShipDirectionComponent;                    // 0x7f0(0x8)
	char                                                         pad0x2a8_93EN9[0x2a8];                             // 0x7f8(0x2a8)
};


// Size 0x60 (Full Size[0x4a0] - InheritedSize[0x440]
class WheelAnimInstance: public AnimInstance
{
public:
	Struct Rotator                                               WheelRotation;                                     // 0x440(0xc)
	float                                                        WheelTime;                                         // 0x44c(0x4)
	byte                                                         AnimationType;                                     // 0x450(0x1)
	char                                                         pad0x3_OWVMV[0x3];                                 // 0x451(0x3)
	bool                                                         IsAnimationTypeLeftTurnFast;                       // 0x454(0x1)
	bool                                                         IsAnimationTypeRightTurnFast;                      // 0x454(0x1)
	bool                                                         IsAnimationTypeRightTurnMid;                       // 0x454(0x1)
	bool                                                         IsAnimationTypeLeftTurnMid;                        // 0x454(0x1)
	bool                                                         IsAnimationTypeSmallTurn;                          // 0x454(0x1)
	bool                                                         IsTurningLeft;                                     // 0x454(0x1)
	bool                                                         IsTurningRight;                                    // 0x454(0x1)
	char                                                         pad0x3_M8XPS[0x3];                                 // 0x455(0x3)
	Struct WheelPartsScales                                      WheelPartScales;                                   // 0x458(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WheelInteractableFunctionLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x88 (Full Size[0x150] - InheritedSize[0xc8]
class MechanismTriggerComponent: public ActorComponent
{
public:
	char                                                         pad0x10_O5ZUJ[0x10];                               // 0xc8(0x10)
	byte                                                         TriggerType;                                       // 0xd8(0x1)
	char                                                         pad0x7_IZ503[0x7];                                 // 0xd9(0x7)
	byte                                                         TriggerState;                                      // 0x140(0x1)
	char                                                         pad0xf_HLH5E[0xf];                                 // 0x141(0xf)
};


// Size 0x18 (Full Size[0x168] - InheritedSize[0x150]
class IntentBasedMechanismTriggerComponent: public MechanismTriggerComponent
{
public:
};


// Size 0x8 (Full Size[0x170] - InheritedSize[0x168]
class WheelMechanismTriggerComponent: public IntentBasedMechanismTriggerComponent
{
public:
	Class Wheel*                                                 ParentWheel;                                       // 0x168(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WheelTurnAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x30 (Full Size[0x690] - InheritedSize[0x660]
class WieldableFishingRodAnimationInstance: public WieldableItemAnimationInstance
{
public:
	float                                                        ReelSpeed;                                         // 0x660(0x4)
	Struct Vector2D                                              RodBend;                                           // 0x664(0x8)
	char                                                         pad0x4_R0UV6[0x4];                                 // 0x66c(0x4)
	Class BlendSpace*                                            RodBendAnimation;                                  // 0x670(0x8)
	Class AnimSequence*                                          ReelAnimation;                                     // 0x678(0x8)
	byte                                                         CurrentFishingState;                               // 0x680(0x1)
	bool                                                         IsFishHookedAndVisible;                            // 0x681(0x1)
	byte                                                         CurrentFishingJIPState;                            // 0x682(0x1)
	char                                                         pad0xd_2IKXN[0xd];                                 // 0x683(0xd)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBaseType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBucketScoopType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBucketThrowType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownBucketDouseType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownChainBucketScoopAndBucketThrowType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCooldownShovelDigType: public WieldableItemCooldownBaseType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class WieldableItemSetComponent: public ActorComponent
{
public:
	char                                                         pad0x8_2NZPW[0x8];                                 // 0xc8(0x8)
	TArray<struct WieldableItems>                                WieldableItems;                                    // 0xd0(0x10)
	TArray<class Class*>                                         LockedCategories;                                  // 0xe0(0x10)
};


// Size 0x0 (Full Size[0x5e0] - InheritedSize[0x5e0]
class WieldableItemSetMockCharacter: public Character
{
public:
	Class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x5d8(0x8)
};


// Size 0x50 (Full Size[0x830] - InheritedSize[0x7e0]
class WieldableMegalodonEffigy: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_I25TE[0x8];                                 // 0x7e0(0x8)
	byte                                                         MegalodonSoulType;                                 // 0x7e8(0x1)
	bool                                                         CanModifyVFX;                                      // 0x7e9(0x1)
	char                                                         pad0x2_QF0V0[0x2];                                 // 0x7ea(0x2)
	float                                                        SoulVFXReturnModifier;                             // 0x7ec(0x4)
	float                                                        SoulVFXClientPredictionModifier;                   // 0x7f0(0x4)
	bool                                                         CanPlaySFX;                                        // 0x7f4(0x1)
	char                                                         pad0x3_M49LF[0x3];                                 // 0x7f5(0x3)
	Class WwiseEvent*                                            PlaySoulTransferAudioEvent;                        // 0x7f8(0x8)
	Class WwiseEvent*                                            StopSoulTransferAudioEvent;                        // 0x800(0x8)
	Class WwiseEvent*                                            PlaySoulTransferCompleteAudioEvent;                // 0x808(0x8)
	class                                                        RaiseEffigyInputId;                                // 0x810(0x8)
	char                                                         pad0x10_02K5N[0x10];                               // 0x818(0x10)
	Class ParticleSystemComponent*                               ParticleSystem;                                    // 0x828(0x8)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class WieldableNonStowableMockItem: public StaticMeshWieldableItem
{
public:
};


// Size 0x2a0 (Full Size[0x900] - InheritedSize[0x660]
class WieldablePetAnimationInstance: public WieldableItemAnimationInstance
{
public:
	char                                                         pad0x18_LGAYP[0x18];                               // 0x660(0x18)
	Struct AthenaAnimationPets                                   PetAnimationParams;                                // 0x678(0xe0)
	float                                                        LocomotionSpeed;                                   // 0x758(0x4)
	bool                                                         TurningActive;                                     // 0x75c(0x1)
	bool                                                         TurnLeft;                                          // 0x75d(0x1)
	char                                                         pad0x2_YTX98[0x2];                                 // 0x75e(0x2)
	float                                                        TurnRate;                                          // 0x760(0x4)
	float                                                        PositiveMoodBlendTime;                             // 0x764(0x4)
	Struct Vector                                                LookAtLocation;                                    // 0x768(0xc)
	Struct Rotator                                               SurfaceOrientation;                                // 0x774(0xc)
	float                                                        TransitionFromTurningMovementSpeed;                // 0x780(0x4)
	float                                                        LookAtAlpha;                                       // 0x784(0x4)
	float                                                        LookAtClamp;                                       // 0x788(0x4)
	bool                                                         LookAtActive;                                      // 0x78c(0x1)
	bool                                                         LookAtAnimationOverride;                           // 0x78d(0x1)
	bool                                                         LookAtAnimationDisabled;                           // 0x78e(0x1)
	bool                                                         IsStrokeAllowed;                                   // 0x78f(0x1)
	bool                                                         PositiveMoodModifierAllowed;                       // 0x790(0x1)
	char                                                         pad0x3_MKULI[0x3];                                 // 0x791(0x3)
	float                                                        PositiveMoodAlpha;                                 // 0x794(0x4)
	float                                                        PositiveMoodAnimationActiveValue;                  // 0x798(0x4)
	bool                                                         CloseRadiusPositiveMoodModifierAllowed;            // 0x79c(0x1)
	bool                                                         IsSmoothingClientPosition;                         // 0x79d(0x1)
	char                                                         pad0x2_SC5OA[0x2];                                 // 0x79e(0x2)
	float                                                        CloseRadiusPositiveMoodModifierActiveValue;        // 0x7a0(0x4)
	float                                                        AlternateHeldPoseBlendStrength;                    // 0x7a4(0x4)
	bool                                                         AnimationsLoaded;                                  // 0x7a8(0x1)
	char                                                         pad0x7_2RRC6[0x7];                                 // 0x7a9(0x7)
	TArray<Byte IdleOverrideExceptions>                          IdleOverrideExceptions;                            // 0x7b0(0x10)
	Class WeightedAnimSequenceLoadOnDemand*                      WeightedAnimSequenceLoadOnDemandRoaming;           // 0x7c0(0x8)
	Class WeightedAnimSequenceLoadOnDemand*                      WeightedAnimSequenceLoadOnDemandHeld;              // 0x7c8(0x8)
	Class WeightedAnimSequenceLoadOnDemand*                      WeightedAnimSequenceLoadOnDemandShow;              // 0x7d0(0x8)
	Class AnimMontage*                                           PetCurrentPlayingAnimMontage;                      // 0x7d8(0x8)
	char                                                         pad0x18_OYR6X[0x18];                               // 0x7e0(0x18)
	Struct PetRoamingAnimationState                              LoadedState;                                       // 0x848(0x38)
	Struct PetRoamingAnimationState                              PriorLoadedState;                                  // 0x880(0x38)
	Struct AnimationInterruptData                                CurrentlyPlayingAnimationInterruptData;            // 0x8b8(0x4)
	char                                                         pad0x14_DVYOM[0x14];                               // 0x8bc(0x14)
	Class Pet*                                                   Pet;                                               // 0x8d0(0x8)
	Class CharacterMovementComponent*                            CharacterMovementComponent;                        // 0x8d8(0x8)
	char                                                         pad0x20_AHL8V[0x20];                               // 0x8e0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableTestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x7f0] - InheritedSize[0x7e0]
class WieldableWeaponMock: public StaticMeshWieldableItem
{
public:
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7e0(0x8)
	char                                                         pad0x8_4NVRH[0x8];                                 // 0x7e8(0x8)
};


// Size 0x160 (Full Size[0x440] - InheritedSize[0x2e0]
class WieldedItemComponent: public SceneComponent
{
public:
	Class WieldableItemSetComponent*                             WieldableItemSetComponent;                         // 0x2e0(0x8)
	Class Actor*                                                 ReplicatedCurrentlyWieldedItem;                    // 0x2e8(0x8)
	Class Actor*                                                 CurrentlyWieldedItem;                              // 0x2f0(0x8)
	char                                                         pad0x118_1VKRY[0x118];                             // 0x2f8(0x118)
	int                                                          EpochId;                                           // 0x410(0x4)
	char                                                         pad0xc_RCVX3[0xc];                                 // 0x414(0xc)
	Struct ServerWieldSet                                        PendingServerWieldSet;                             // 0x420(0x1c)
	char                                                         pad0x4_TWNYD[0x4];                                 // 0x43c(0x4)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WieldedItemNamedContextualOpenRadialAction: public OpenRadialAction
{
public:
};


// Size 0x20 (Full Size[0x800] - InheritedSize[0x7e0]
class WoodPlank: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_5CCP5[0x8];                                 // 0x7e0(0x8)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7e8(0x8)
	Class ConsumableWieldableComponent*                          ConsumableWieldable;                               // 0x7f0(0x8)
	char                                                         pad0x8_V7ARU[0x8];                                 // 0x7f8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldEndAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class WorldEndAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        WorldEndDurationMultiplier;                        // 0x40(0x4)
	bool                                                         UseSuperHeatedWaterInStage;                        // 0x44(0x1)
	char                                                         pad0x3_LF3A2[0x3];                                 // 0x45(0x3)
};


// Size 0x98 (Full Size[0x110] - InheritedSize[0x78]
class WorldEndAIAbility: public AthenaAIAbility
{
public:
	Class Pawn*                                                  Owner;                                             // 0x78(0x8)
	Class WorldEndAIAbilityParams*                               SetupAbilityParams;                                // 0x80(0x8)
	Class AshenLordVolcano*                                      VolcanicEmitter;                                   // 0x88(0x8)
	Class GeyserManager*                                         GeyserManager;                                     // 0x90(0x8)
	Struct AshenLordFireShroud                                   FireShroud;                                        // 0x98(0x20)
	Class SuperheatedWater*                                      OwnedSuperHeatedWater;                             // 0xb8(0x8)
	class                                                        LoadedCloudAsset;                                  // 0xc0(0x8)
	char                                                         pad0x48_ZISAJ[0x48];                               // 0xc8(0x48)
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class WorldEndAIAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        AbilityDuration;                                   // 0xc8(0x4)
	char                                                         pad0x4_I8UQA[0x4];                                 // 0xcc(0x4)
	Struct AshenLordFireShroudParams                             FireShroudParams;                                  // 0xd0(0x18)
	Class GeyserManagerSetupDataAsset*                           GeyserManagerSetup;                                // 0xe8(0x8)
	float                                                        GeyserStartDelay;                                  // 0xf0(0x4)
	char                                                         pad0x4_TXGAK[0x4];                                 // 0xf4(0x4)
	class                                                        VolcanicEmitterClass;                              // 0xf8(0x8)
	bool                                                         UseSuperHeatedWater;                               // 0x100(0x1)
	char                                                         pad0x7_7PYEL[0x7];                                 // 0x101(0x7)
	class                                                        SuperHeatedWaterClass;                             // 0x108(0x8)
	Struct Vector                                                CloudOffset;                                       // 0x130(0xc)
	float                                                        CloudSpawnDelay;                                   // 0x13c(0x4)
	float                                                        CloudDespawnPreWarm;                               // 0x140(0x4)
	float                                                        VolcanicRockStartDelay;                            // 0x144(0x4)
	char                                                         pad0x18_HUD12[0x18];                               // 0x148(0x18)
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class WorldEventZoneService: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldRegionBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class WorldResourceRegistry: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldResourceRegistryTestLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x20 (Full Size[0x428] - InheritedSize[0x408]
class ContestSafeRegion: public WorldSafeRegion
{
public:
	Class ContestZone*                                           ParentContestZone;                                 // 0x408(0x8)
	Struct WorldSafeZone                                         ContestSafeZone;                                   // 0x410(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ZoomMapParamsDataAsset: public DataAsset
{
public:
	float                                                        Offset;                                            // 0x28(0x4)
	float                                                        ZoomLevel;                                         // 0x2c(0x4)
	float                                                        XMarkSizeModifier;                                 // 0x30(0x4)
	float                                                        MaxDistanceFromCentreToDigspot;                    // 0x34(0x4)
};


// Size 0x98 (Full Size[0x130] - InheritedSize[0x98]
class ZoomMapTaleStep: public TaleQuestStep
{
public:
	Class ZoomMapTaleStepDesc*                                   Desc;                                              // 0x98(0x8)
	struct FName                                                 IslandName;                                        // 0xa0(0x8)
	Class BookTaleQuestService*                                  BookService;                                       // 0xa8(0x8)
	Struct Vector                                                ZoomCenterPoint;                                   // 0xb0(0xc)
	Struct Vector                                                DigSpot;                                           // 0xbc(0xc)
	Struct Vector                                                CanvasDimensions;                                  // 0xc8(0xc)
	char                                                         pad0x4_E4Y6V[0x4];                                 // 0xd4(0x4)
	Class ZoomMapParamsDataAsset*                                Params;                                            // 0xd8(0x8)
	Class Texture*                                               IslandMapTexture;                                  // 0xe0(0x8)
	char                                                         pad0x48_XBAVB[0x48];                               // 0xe8(0x48)
};


// Size 0xd0 (Full Size[0x150] - InheritedSize[0x80]
class ZoomMapTaleStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableName                                     IslandName;                                        // 0x80(0x30)
	Class TreasureMapDataAsset*                                  TreasureMapDataAsset;                              // 0xb0(0x8)
	Class ZoomMapParamsDataAsset*                                Params;                                            // 0xb8(0x8)
	Struct QuestVariablePageLayout                               BottomPageLayout;                                  // 0xc0(0x30)
	Struct QuestVariablePageLayout                               TopPageLayout;                                     // 0xf0(0x30)
	Struct QuestVariableVector                                   DigSpot;                                           // 0x120(0x30)
};


// Size 0x68 (Full Size[0x790] - InheritedSize[0x728]
class CursedCaptainsSkullItemInfo: public BootyItemInfo
{
public:
	char                                                         pad0x28_NBVGL[0x28];                               // 0x728(0x28)
	Class AnimNotifyWwiseEmitterComponent*                       AnimNotifyWwiseEmitterComponent;                   // 0x750(0x8)
	Class CutsceneComponent*                                     CutsceneComponent;                                 // 0x758(0x8)
	char                                                         pad0x30_4ZHB2[0x30];                               // 0x760(0x30)
};


// Size 0x0 (Full Size[0x808] - InheritedSize[0x808]
class BaseSimpleBootyItemProxy: public BootyProxy
{
public:
};


// Size 0x0 (Full Size[0x808] - InheritedSize[0x808]
class SimpleBootyItemProxy: public BaseSimpleBootyItemProxy
{
public:
};


// Size 0x8 (Full Size[0x810] - InheritedSize[0x808]
class CursedCaptainsSkullProxy: public SimpleBootyItemProxy
{
public:
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class SimpleBootyWieldableItem: public LargeSkeletalMeshWieldableItem
{
public:
};


// Size 0x10 (Full Size[0x7f0] - InheritedSize[0x7e0]
class CursedCaptainsSkullWieldable: public SimpleBootyWieldableItem
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class CrewOnlyWwwiseAudioComponent: public ActorComponent
{
public:
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0xc8(0x8)
	char                                                         pad0x58_5JIK6[0x58];                               // 0xd0(0x58)
};


// Size 0xf8 (Full Size[0x4f8] - InheritedSize[0x400]
class Door: public InteractableBase
{
public:
	char                                                         pad0x8_0XW0Q[0x8];                                 // 0x400(0x8)
	float                                                        AmountDoorOpens;                                   // 0x408(0x4)
	float                                                        DoorOpeningSpeed;                                  // 0x40c(0x4)
	float                                                        DoorClosingSpeed;                                  // 0x410(0x4)
	char                                                         pad0x4_Y3D3N[0x4];                                 // 0x414(0x4)
	Class SceneComponent*                                        Root;                                              // 0x418(0x8)
	Class StaticMeshComponent*                                   DoorMesh;                                          // 0x420(0x8)
	TArray<struct LandmarkReactionsWhenDoorOpens>                LandmarkReactionsWhenDoorOpens;                    // 0x428(0x10)
	TArray<struct LandmarkReactionsWhenDoorCloses>               LandmarkReactionsWhenDoorCloses;                   // 0x438(0x10)
	Class LandmarkReactionPlayer*                                LandmarkReactionPlayer;                            // 0x448(0x8)
	Class InteractableComponent*                                 InteractionRegion;                                 // 0x450(0x8)
	char                                                         pad0xa0_PQ7X4[0xa0];                               // 0x458(0xa0)
};


// Size 0x48 (Full Size[0x540] - InheritedSize[0x4f8]
class SlidingDoor: public Door
{
public:
	byte                                                         MovementDirection;                                 // 0x4f8(0x1)
	char                                                         pad0x7_WX4PY[0x7];                                 // 0x4f9(0x7)
	Class SlidingDoorAudioParams*                                SlidingDoorAudioParams;                            // 0x500(0x8)
	char                                                         pad0x20_7RSDM[0x20];                               // 0x508(0x20)
	byte                                                         ServerDoorState;                                   // 0x528(0x1)
	char                                                         pad0xb_8CO6I[0xb];                                 // 0x529(0xb)
	Struct Vector                                                InitialDoorMeshLocation;                           // 0x534(0xc)
};


// Size 0x40 (Full Size[0x538] - InheritedSize[0x4f8]
class SwingDoor: public Door
{
public:
	Class LockComponent*                                         LockComponent;                                     // 0x4f8(0x8)
	Class WwiseEvent*                                            OpenDoorAudioSting;                                // 0x500(0x8)
	Class SwingDoorAudioParams*                                  SwingDoorAudioParams;                              // 0x508(0x8)
	char                                                         pad0x20_T9P47[0x20];                               // 0x510(0x20)
	byte                                                         ServerDoorState;                                   // 0x530(0x1)
	char                                                         pad0x7_N1OAA[0x7];                                 // 0x531(0x7)
};


// Size 0x0 (Full Size[0x538] - InheritedSize[0x538]
class CabinDoor: public SwingDoor
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class SlidingDoorAudioParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                SlidingDoorPool;                                   // 0x28(0x8)
	Class WwiseEvent*                                            SlidingDoorOpeningLoopStart;                       // 0x30(0x8)
	Class WwiseEvent*                                            SlidingDoorOpeningLoopStop;                        // 0x38(0x8)
	Class WwiseEvent*                                            SlidingDoorOpeningAdditionalStopSound;             // 0x40(0x8)
	Class WwiseEvent*                                            SlidingDoorClosingLoopStart;                       // 0x48(0x8)
	Class WwiseEvent*                                            SlidingDoorClosingLoopStop;                        // 0x50(0x8)
	Class WwiseEvent*                                            SlidingDoorClosingAdditionalStopSound;             // 0x58(0x8)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class SwingDoorAudioParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                SwingDoorPool;                                     // 0x28(0x8)
	Class WwiseEvent*                                            SwingDoorOpeningLoopStart;                         // 0x30(0x8)
	Class WwiseEvent*                                            SwingDoorOpeningLoopStop;                          // 0x38(0x8)
	Class WwiseEvent*                                            SwingDoorOpeningAdditionalStopSound;               // 0x40(0x8)
	Class WwiseEvent*                                            SwingDoorClosingLoopStart;                         // 0x48(0x8)
	Class WwiseEvent*                                            SwingDoorClosingLoopStop;                          // 0x50(0x8)
	Class WwiseEvent*                                            SwingDoorClosingAdditionalStopSound;               // 0x58(0x8)
};


// Size 0x190 (Full Size[0x1b8] - InheritedSize[0x28]
class GameNarrationCoordinator: public Object
{
public:
	Class WwiseEvent*                                            NarrationSpeakEvent;                               // 0x28(0x8)
	Struct WwiseEmitter                                          Emitter;                                           // 0x30(0x20)
	char                                                         pad0x138_WNXUZ[0x138];                             // 0x50(0x138)
	Struct FString                                               CachedPreferredVoice;                              // 0x188(0x10)
	Struct FString                                               CachedLanguage;                                    // 0x198(0x10)
	int                                                          CachedGender;                                      // 0x1a8(0x4)
	bool                                                         IsNarrationSettingEnabled;                         // 0x1ac(0x1)
	char                                                         pad0x3_RMALC[0x3];                                 // 0x1ad(0x3)
	int                                                          NarrationOverride;                                 // 0x1b0(0x4)
	char                                                         pad0x4_CGWM0[0x4];                                 // 0x1b4(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockingPolicyDefinition: public Object
{
public:
};


// Size 0x60 (Full Size[0x890] - InheritedSize[0x830]
class RenderToTextureMapBase: public TreasureMap
{
public:
	TArray<class Texture*>                                       MapTextures;                                       // 0x828(0x10)
	int                                                          CanvasWidth;                                       // 0x838(0x4)
	int                                                          CanvasHeight;                                      // 0x83c(0x4)
	char                                                         pad0x8_O08KZ[0x8];                                 // 0x840(0x8)
	TArray<struct RenderData>                                    RenderData;                                        // 0x848(0x10)
	char                                                         pad0x38_KZ703[0x38];                               // 0x858(0x38)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class NarratedAccessibilityComponent: public ActorComponent
{
public:
	float                                                        ContinuousNarrationCooldown;                       // 0xc8(0x4)
	char                                                         pad0xc_Y374O[0xc];                                 // 0xcc(0xc)
	char                                                         pad0x10_CW65G[0x10];                               // 0xd8(0x10)
};


// Size 0x1e8 (Full Size[0x2d0] - InheritedSize[0xe8]
class NarratedCompassDirectionComponent: public NarratedAccessibilityComponent
{
public:
	float                                                        YawThreshold;                                      // 0xe8(0x4)
	char                                                         pad0x16c_V5BL6[0x16c];                             // 0xec(0x16c)
	Class Actor*                                                 Wielder;                                           // 0x268(0x8)
	char                                                         pad0x60_2K2IV[0x60];                               // 0x270(0x60)
};


// Size 0x128 (Full Size[0x3f8] - InheritedSize[0x2d0]
class NarratedShipDirectionComponent: public NarratedCompassDirectionComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleNarratedShipDirectionComponentInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class AddNPCOnShipStep: public TaleQuestStep
{
public:
};


// Size 0x170 (Full Size[0x538] - InheritedSize[0x3c8]
class NPCOnSurface: public Actor
{
public:
	char                                                         pad0x10_S02D2[0x10];                               // 0x3c8(0x10)
	bool                                                         CanDamagePlayers;                                  // 0x3d8(0x1)
	char                                                         pad0x7_ILENG[0x7];                                 // 0x3d9(0x7)
	Class NPCOnSurfaceVODataAsset*                               VODataAsset;                                       // 0x3e0(0x8)
	Struct FText                                                 NPCName;                                           // 0x3e8(0x38)
	Class WwiseObjectPoolWrapper*                                Pool;                                              // 0x420(0x8)
	Class SkeletalMeshComponent*                                 Mesh;                                              // 0x428(0x8)
	Class WwiseEmitterComponent*                                 Emitter;                                           // 0x430(0x8)
	Class CutSceneSubtitlesComponent*                            CutSceneSubtitlesComponent;                        // 0x438(0x8)
	Class CustomAnimationMontageComponent*                       CustomAnimationMontageComponent;                   // 0x440(0x8)
	Struct StringAssetReference                                  CurrentAnimInstance;                               // 0x448(0x10)
	bool                                                         IsPlayerCurrentlyNearNPC;                          // 0x458(0x1)
	char                                                         pad0xdf_GOVLA[0xdf];                               // 0x459(0xdf)
};


// Size 0x90 (Full Size[0xb8] - InheritedSize[0x28]
class NPCOnSurfaceDataAsset: public DataAsset
{
public:
	Class NPCOnSurfaceLocationDataAsset*                         LocationDataAsset;                                 // 0x28(0x8)
	Class NPCOnSurfaceStatesDataAsset*                           StatesDataAsset;                                   // 0x30(0x8)
	Class NPCOnSurfaceCannonManagerDataAsset*                    CannonManagerDataAsset;                            // 0x38(0x8)
	Class NPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset*    CannonManagerCrewSizeSettingsDataAsset;            // 0x40(0x8)
	bool                                                         PhaseNPCToCrew;                                    // 0x68(0x1)
	char                                                         pad0x3_C6FPR[0x3];                                 // 0x69(0x3)
	float                                                        TimeBetweenSpawnChecks;                            // 0x6c(0x4)
	float                                                        HighFrequencyTimeBetweenSpawnChecks;               // 0x70(0x4)
	float                                                        TimeBetweenDespawnChecks;                          // 0x74(0x4)
	Struct WeightedProbabilityRangeOfRanges                      DespawnCooldown;                                   // 0x78(0x30)
	float                                                        DelayBeforeDestroyingNPC;                          // 0xa8(0x4)
	float                                                        NPCInteractionDistanceXY;                          // 0xac(0x4)
	float                                                        NPCInteractionDistanceZ;                           // 0xb0(0x4)
	float                                                        TimeBetweenIsPlayerNearNPCChecks;                  // 0xb4(0x4)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class NPCOnSurfaceManager: public Object
{
public:
	Class NPCOnSurfaceDataAsset*                                 NPCOnSurfaceDataAsset;                             // 0x28(0x8)
	Class NPCOnSurface*                                          NPC;                                               // 0x30(0x8)
	char                                                         pad0x18_9HIEW[0x18];                               // 0x38(0x18)
	Class Actor*                                                 ParentActor;                                       // 0x50(0x8)
	TArray<class Cannon*>                                        CannonActors;                                      // 0x58(0x10)
	Class NPCOnSurfaceVOManager*                                 VOManager;                                         // 0x68(0x8)
	Class NPCOnSurfaceCannonManager*                             CannonManager;                                     // 0x70(0x8)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class NPCOnShipDataAsset: public DataAsset
{
public:
	Class NPCOnSurfaceDataAsset*                                 NPCOnSurfaceDataAsset;                             // 0x28(0x8)
	TArray<struct FName>                                         RestrictedIslands;                                 // 0x30(0x10)
	Struct WeightedProbabilityRangeOfRanges                      PlayersLeftShipRespawnCooldown;                    // 0x40(0x30)
	float                                                        TimeBetweenShipStateChecks;                        // 0x70(0x4)
	float                                                        TimeBetweenNPCUnderwaterChecks;                    // 0x74(0x4)
	float                                                        TimeBetweenNPCOnFireChecks;                        // 0x78(0x4)
	float                                                        EnemyShipNearbyDistanceXYInMetres;                 // 0x7c(0x4)
	float                                                        TimeBetweenRadialStateChecks;                      // 0x80(0x4)
	float                                                        TimeBetweenHideWhenInDangerChecks;                 // 0x84(0x4)
};


// Size 0x18 (Full Size[0x90] - InheritedSize[0x78]
class NPCOnShipManager: public NPCOnSurfaceManager
{
public:
	char                                                         pad0x8_UI3I3[0x8];                                 // 0x78(0x8)
	Class Ship*                                                  CurrentCachedCannonsShip;                          // 0x80(0x8)
	Class NPCOnShipDataAsset*                                    NPCOnShipDataAsset;                                // 0x88(0x8)
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TaleNPCOnShipService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleNPCOnShipServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class AddNPCOnShipStepDesc: public TaleQuestStepDesc
{
public:
	Class NPCOnShipDataAsset*                                    NPCOnShipDataAsset;                                // 0x80(0x8)
	Struct QuestVariableGuid                                     NPCOnShipManager;                                  // 0x88(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class AddNPCOnSurfaceStep: public TaleQuestStep
{
public:
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TaleNPCOnSurfaceService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleNPCOnSurfaceServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x68 (Full Size[0xe8] - InheritedSize[0x80]
class AddNPCOnSurfaceStepDesc: public TaleQuestStepDesc
{
public:
	Class NPCOnSurfaceDataAsset*                                 NPCOnSurfaceDataAsset;                             // 0x80(0x8)
	Struct QuestVariableActor                                    ParentActor;                                       // 0x88(0x30)
	Struct QuestVariableGuid                                     NPCOnSurfaceManager;                               // 0xb8(0x30)
};


// Size 0x2f0 (Full Size[0x730] - InheritedSize[0x440]
class NPCOnShipSimpleAnimInstance: public AnimInstance
{
public:
	Class AnimSequenceBase*                                      Into;                                              // 0x440(0x8)
	Class AnimSequenceBase*                                      Loop;                                              // 0x448(0x8)
	Class AnimSequenceBase*                                      ActiveLoop;                                        // 0x450(0x8)
	Class AnimSequenceBase*                                      Outof;                                             // 0x458(0x8)
	Class AnimSequenceBase*                                      OutOfAlternate;                                    // 0x460(0x8)
	Class CustomAnimationMontageDefinitionListingDataAsset*      CustomAnimationMontageDefinitionListingDataAsset;  // 0x468(0x8)
	Class CustomAnimationMontageDefinitionListingDataAsset*      FacialCustomAnimationMontageDefinitionListingDataAsset; // 0x470(0x8)
	Struct AnimationLookAt                                       LookAt;                                            // 0x478(0xa8)
	Struct CustomAnimationMontageStateMachine                    MontageStateMachine;                               // 0x520(0xd8)
	Struct CustomAnimationMontageStateMachine                    FacialMontageStateMachine;                         // 0x5f8(0xd8)
	Class WeightedAnimSequenceLoadOnDemand*                      LoadOnDemandInactive;                              // 0x6d0(0x8)
	Class WeightedAnimSequenceLoadOnDemand*                      LoadOnDemandActive;                                // 0x6d8(0x8)
	Class WeightedAnimationLoadOnDemandDataAsset*                LoadOnDemandActiveData;                            // 0x6e0(0x8)
	Class WeightedAnimationLoadOnDemandDataAsset*                LoadOnDemandInactiveData;                          // 0x6e8(0x8)
	bool                                                         ActiveUsesWeightedIdles;                           // 0x6f0(0x1)
	bool                                                         InactiveUsesWeightedIdles;                         // 0x6f1(0x1)
	bool                                                         UseActiveAnimSet;                                  // 0x6f2(0x1)
	bool                                                         LoopCompleted;                                     // 0x6f3(0x1)
	bool                                                         UseAlternateOutOf;                                 // 0x6f4(0x1)
	char                                                         pad0x3b_WNJVT[0x3b];                               // 0x6f5(0x3b)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset: public DataAsset
{
public:
	TArray<struct CrewSizeSettings>                              CrewSizeSettings;                                  // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class NPCOnSurfaceCannonManager: public Object
{
public:
	TArray<struct Cannons>                                       Cannons;                                           // 0x28(0x10)
	Class NPCOnSurfaceCannonManagerDataAsset*                    CannonManagerDataAsset;                            // 0x38(0x8)
	Class NPCOnSurfaceCannonManagerCrewSizeSettingsDataAsset*    CannonManagerCrewSizeSettingsDataAsset;            // 0x40(0x8)
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class NPCOnSurfaceCannonManagerDataAsset: public DataAsset
{
public:
	struct FName                                                 CannonLocationsGroupName;                          // 0x28(0x8)
	bool                                                         GoStraightToCannonIfPossible;                      // 0x30(0x1)
	bool                                                         StayOnCannonEvenWhenThereAreNoTargets;             // 0x31(0x1)
	char                                                         pad0x6_F09FQ[0x6];                                 // 0x32(0x6)
	Struct WeightedProbabilityRangeOfRanges                      MinTimeInFallbackLocation;                         // 0x38(0x30)
	float                                                        TimeOnCannonBeforeStartAiming;                     // 0x68(0x4)
	float                                                        TimeBetweenCannonChangeLocationCheck;              // 0x6c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      MinTimeOnCannon;                                   // 0x70(0x30)
	float                                                        TimeBetweenCannonBeingUsedChecks;                  // 0xa0(0x4)
	float                                                        TimeBetweenTargetUpdates;                          // 0xa4(0x4)
	float                                                        TimeBetweenCannonMoveUpdates;                      // 0xa8(0x4)
	float                                                        TimeToWaitForCannonToAimBeforeTryingToFireAgain;   // 0xac(0x4)
	float                                                        CannonPitchYawAimTolerenceHalfAngle;               // 0xb0(0x4)
	char                                                         pad0x4_2YCYF[0x4];                                 // 0xb4(0x4)
	Struct WeightedProbabilityRangeOfRanges                      NearMissDistanceInMetres;                          // 0xb8(0x30)
	class                                                        DefaultCannonballItemDesc;                         // 0xe8(0x8)
	float                                                        NearbyEncountersDistanceInMetres;                  // 0x110(0x4)
	Struct CustomAnimationMontageId                              FireCannonMontageId;                               // 0x114(0x8)
	char                                                         pad0x4_GDI9U[0x4];                                 // 0x11c(0x4)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class NPCOnSurfaceLocationDataAsset: public DataAsset
{
public:
	TArray<struct ShipSizeFloodLevels>                           ShipSizeFloodLevels;                               // 0x28(0x10)
	TArray<struct Groups>                                        Groups;                                            // 0x38(0x10)
	Struct Vector                                                FireTestOffset;                                    // 0x48(0xc)
	char                                                         pad0x4_ZV1TT[0x4];                                 // 0x54(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneResponseMetaData: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NPCOnSurfaceResponseMetadata: public CutsceneResponseMetaData
{
public:
	float                                                        Delay;                                             // 0x28(0x4)
	float                                                        Cooldown;                                          // 0x2c(0x4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NPCOnSurfaceVOManager: public Object
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class NPCOnSurfaceStatesDataAsset: public DataAsset
{
public:
	struct FName                                                 StartState;                                        // 0x28(0x8)
	struct FName                                                 HidingState;                                       // 0x30(0x8)
	TArray<struct States>                                        States;                                            // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCOnSurfaceVODataAsset: public DataAsset
{
public:
	TArray<struct VOGroups>                                      VOGroups;                                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class RemoveNPCOnShipStep: public TaleQuestStep
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveNPCOnShipStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableGuid                                     NPCOnShipManager;                                  // 0x80(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class RemoveNPCOnSurfaceStep: public TaleQuestStep
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class RemoveNPCOnSurfaceStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableGuid                                     NPCOnSurfaceManager;                               // 0x80(0x30)
};


// Size 0x18 (Full Size[0xb0] - InheritedSize[0x98]
class WaitForNPCOnSurfaceToSpawnStep: public TaleQuestStep
{
public:
	Class WaitForNPCOnSurfaceToSpawnStepDesc*                    StepDesc;                                          // 0x98(0x8)
	Class NPCOnSurfaceManager*                                   SelectedManager;                                   // 0xa0(0x8)
	char                                                         pad0x8_OE6XY[0x8];                                 // 0xa8(0x8)
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class WaitForNPCOnSurfaceToSpawnStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableGuid                                     NPCOnSurfaceManager;                               // 0x80(0x30)
	Struct QuestVariableActor                                    OutNPC;                                            // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OpenableItemInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x4a0] - InheritedSize[0x440]
class OpenableItemAnimationInstance: public AnimInstance
{
public:
	Class AnimSequence*                                          ClosedTransitionAnim;                              // 0x440(0x8)
	Class AnimSequence*                                          ClosedLoopAnim;                                    // 0x448(0x8)
	Class AnimSequence*                                          OpenTransitionAnim;                                // 0x450(0x8)
	Class AnimSequence*                                          FirstOpenTransitionAnim;                           // 0x458(0x8)
	Class AnimSequence*                                          OpenLoopAnim;                                      // 0x460(0x8)
	float                                                        BlendInTime;                                       // 0x468(0x4)
	float                                                        BlendOutTime;                                      // 0x46c(0x4)
	Class AnimMontage*                                           CurrentMontage;                                    // 0x470(0x8)
	Class AnimSequence*                                          NextAnim;                                          // 0x478(0x8)
	byte                                                         CurrentAnimOpenState;                              // 0x480(0x1)
	char                                                         pad0x1f_RZ5C3[0x1f];                               // 0x481(0x1f)
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class OpenableItemComponent: public ActorComponent
{
public:
	char                                                         pad0x28_MH20R[0x28];                               // 0xc8(0x28)
	byte                                                         OpenState;                                         // 0xf0(0x1)
	bool                                                         HasEverClosed;                                     // 0xf1(0x1)
	char                                                         pad0x16_N8E90[0x16];                               // 0xf2(0x16)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class OpenableItemReactionComponent: public ActorComponent
{
public:
};


// Size 0x18 (Full Size[0xf0] - InheritedSize[0xd8]
class OpenableItemMaterialAnimationReactionComponent: public OpenableItemReactionComponent
{
public:
	TArray<struct AnimNameSets>                                  AnimNameSets;                                      // 0xd8(0x10)
	Class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0xe8(0x8)
};


// Size 0x18 (Full Size[0xf0] - InheritedSize[0xd8]
class OpenableItemMeshAnimationReactionComponent: public OpenableItemReactionComponent
{
public:
	TArray<struct AnimNameSets>                                  AnimNameSets;                                      // 0xd8(0x10)
	Class MeshAnimatorComponent*                                 MeshAnimatorComponent;                             // 0xe8(0x8)
};


// Size 0x30 (Full Size[0x310] - InheritedSize[0x2e0]
class LightingZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_VNLU4[0x8];                                 // 0x2e0(0x8)
	Struct LightingZoneParameters                                LightingZoneParameters;                            // 0x2e8(0x20)
	char                                                         pad0x8_DZCBT[0x8];                                 // 0x308(0x8)
};


// Size 0x20 (Full Size[0x330] - InheritedSize[0x310]
class BlendedLightingZoneComponent: public LightingZoneComponent
{
public:
	Class CurveFloat*                                            FadeCurveNormalised;                               // 0x308(0x8)
	Class CurveFloat*                                            FadeOutCurveNormalised;                            // 0x310(0x8)
	char                                                         pad0x18_PGSUM[0x18];                               // 0x318(0x18)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class TradeRoute: public Actor
{
public:
	Struct StringAssetReference                                  TradeRouteAssetReference;                          // 0x3c8(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ClueSiteTypeToMapMarkIdDataAsset: public DataAsset
{
public:
	TArray<struct ClueSiteTypeToMarkIdMap>                       ClueSiteTypeToMarkIdMap;                           // 0x28(0x10)
};


// Size 0x120 (Full Size[0x9b0] - InheritedSize[0x890]
class TradeRouteMap: public RenderToTextureMapBase
{
public:
	Class Font*                                                  Font;                                              // 0x890(0x8)
	Struct LinearColor                                           FontColour;                                        // 0x898(0x10)
	float                                                        FontLineSpacing;                                   // 0x8a8(0x4)
	float                                                        FontScale;                                         // 0x8ac(0x4)
	Struct TradeRouteMapTextLayout                               TextData;                                          // 0x8b0(0x10)
	byte                                                         ImageBlendMode;                                    // 0x8c0(0x1)
	char                                                         pad0x7_889TG[0x7];                                 // 0x8c1(0x7)
	TArray<struct ImageData>                                     ImageData;                                         // 0x8c8(0x10)
	Struct StringAssetReference                                  IslandMaterialReference;                           // 0x8d8(0x10)
	Struct FText                                                 VesselText;                                        // 0x8e8(0x38)
	Struct FText                                                 OriginText;                                        // 0x920(0x38)
	Struct FText                                                 DestinationText;                                   // 0x958(0x38)
	char                                                         pad0x20_WDREL[0x20];                               // 0x990(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TradeRouteMapCollectionInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x88] - InheritedSize[0x38]
class TradeRouteMapSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  TradeRouteLandscapeMapItemDescClass;               // 0x38(0x10)
	Struct StringAssetReference                                  TradeRoutePortraitMapItemDescClass;                // 0x48(0x10)
	byte                                                         DefaultIslandBlendMode;                            // 0x58(0x1)
	char                                                         pad0x7_E8U7M[0x7];                                 // 0x59(0x7)
	Struct StringAssetReference                                  DefaultPathTexture;                                // 0x60(0x10)
	byte                                                         DefaultPathBlendMode;                              // 0x70(0x1)
	char                                                         pad0x7_1687R[0x7];                                 // 0x71(0x7)
	class                                                        DefaultClueMarkId;                                 // 0x78(0x8)
	byte                                                         DefaultClueBlendMode;                              // 0x80(0x1)
	char                                                         pad0x3_LP7Q5[0x3];                                 // 0x81(0x3)
	float                                                        DefaultClueScale;                                  // 0x84(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LiquidLauncherChargeInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LiquidLauncherChargeVisuals: public Object
{
public:
	char                                                         pad0x20_3MSTG[0x20];                               // 0x28(0x20)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x48(0x10)
	char                                                         pad0x10_MORFX[0x10];                               // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LiquidLauncherChargeVisualsProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LiquidLauncherControllerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterGunDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterGunInfoInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x848] - InheritedSize[0x808]
class BountyRewardItemProxy: public BootyProxy
{
public:
	char                                                         pad0x8_H9C3Q[0x8];                                 // 0x808(0x8)
	Class WwiseObjectPoolWrapper*                                AmbiencePool;                                      // 0x810(0x8)
	Class WwiseEvent*                                            AmbiencePlay;                                      // 0x818(0x8)
	Class WwiseEvent*                                            AmbienceStop;                                      // 0x820(0x8)
	Struct WwiseEmitter                                          AmbienceEmitter;                                   // 0x828(0x20)
};


// Size 0x18 (Full Size[0x860] - InheritedSize[0x848]
class WaterGunItemProxy: public BountyRewardItemProxy
{
public:
	char                                                         pad0x8_B35Q9[0x8];                                 // 0x848(0x8)
	Class ParticleSystemComponent*                               LiquidLauncherChargeParticleSystemComponent;       // 0x850(0x8)
	Class LiquidLauncherChargeVisuals*                           LiquidLauncherChargeVisuals;                       // 0x858(0x8)
};


// Size 0xb38 (Full Size[0xb60] - InheritedSize[0x28]
class WaterGunLiquidLauncherController: public Object
{
public:
	char                                                         pad0x8_68JDP[0x8];                                 // 0x28(0x8)
	Struct LiquidLauncherCollisionsParams                        LiquidLauncherCollisionParams;                     // 0x30(0x68)
	Struct Status                                                LiquidLauncherCollisionStatusEffect;               // 0x98(0x18)
	float                                                        TimeUntilApplyStatusEffect;                        // 0xb0(0x4)
	float                                                        TimeToConsiderActorOutsideLiquid;                  // 0xb4(0x4)
	float                                                        LiquidLauncherCollisionDamageAmount;               // 0xb8(0x4)
	float                                                        DamagePerSecondInsideLiquid;                       // 0xbc(0x4)
	float                                                        GravityStrength;                                   // 0xc0(0x4)
	float                                                        GravityCurveStrength;                              // 0xc4(0x4)
	Class WaterGunWieldableItem*                                 WaterGun;                                          // 0xc8(0x8)
	char                                                         pad0xa90_8ES7V[0xa90];                             // 0xd0(0xa90)
};


// Size 0x210 (Full Size[0x9f0] - InheritedSize[0x7e0]
class WaterGunWieldableItem: public SimpleBootyWieldableItem
{
public:
	char                                                         pad0x58_NIIGQ[0x58];                               // 0x7e0(0x58)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x838(0x8)
	Class ParticleSystemComponent*                               LiquidLauncherParticleSystemComponent;             // 0x840(0x8)
	Class ParticleSystemComponent*                               LiquidLauncherChargeParticleSystemComponent;       // 0x848(0x8)
	Class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0x850(0x8)
	Class WaterGunLiquidLauncherController*                      LiquidLauncherController;                          // 0x858(0x8)
	Struct ItemUseSpeedParams                                    ItemUseSpeedModifiers;                             // 0x860(0x8)
	float                                                        ItemUseFOVBlendSpeed;                              // 0x868(0x4)
	float                                                        ItemUseTargetFOV;                                  // 0x86c(0x4)
	float                                                        AimingDownSightsEffectsDelayAmount;                // 0x870(0x4)
	float                                                        StartLiquidLauncherOnServerDelayLatencyCompensation; // 0x874(0x4)
	float                                                        LiquidLauncherParticleSystemMaxLength;             // 0x878(0x4)
	byte                                                         LiquidLauncherParticleSystemCustomLocalSpaceMode;  // 0x87c(0x1)
	char                                                         pad0x3_SIAHL[0x3];                                 // 0x87d(0x3)
	struct FName                                                 OpenJawMaterialAnimationName;                      // 0x880(0x8)
	struct FName                                                 CloseJawMaterialAnimationName;                     // 0x888(0x8)
	Struct Vector                                                LiquidLauncherParticleSystemThirdPersonAttachPoint; // 0x890(0xc)
	Struct Rotator                                               LiquidLauncherParticleSystemThirdPersonRotation;   // 0x89c(0xc)
	Struct Vector                                                LiquidLauncherParticleSystemFirstPersonAttachPoint; // 0x8a8(0xc)
	Struct Rotator                                               LiquidLauncherParticleSystemFirstPersonRotation;   // 0x8b4(0xc)
	bool                                                         EnableCustomParticleSystemBelowWater;              // 0x8c0(0x1)
	char                                                         pad0x7_H65WR[0x7];                                 // 0x8c1(0x7)
	Class ParticleSystem*                                        AboveWaterParticleSystem;                          // 0x8c8(0x8)
	Class ParticleSystem*                                        BelowWaterParticleSystem;                          // 0x8d0(0x8)
	Class WwiseEvent*                                            LiquidLauncherLoopStartEvent;                      // 0x8d8(0x8)
	Class WwiseEvent*                                            LiquidLauncherLoopStopEvent;                       // 0x8e0(0x8)
	struct FName                                                 LiquidLauncherLoopChargeLevelRTPC;                 // 0x8e8(0x8)
	Struct FloatRange                                            LiquidLauncherLoopChargeLevelRTPCRange;            // 0x8f0(0x10)
	Class WwiseEvent*                                            LiquidLauncherActivatedEvent;                      // 0x900(0x8)
	Class WwiseEvent*                                            LiquidLauncherDeactivatedEvent;                    // 0x908(0x8)
	Class ForceFeedbackEffect*                                   PrimaryUsingLiquidLauncherForceFeedback;           // 0x910(0x8)
	Class ForceFeedbackEffect*                                   SecondaryUsingLiquidLauncherForceFeedback;         // 0x918(0x8)
	Class ForceFeedbackEffect*                                   OverchargeUsingLiquidLauncherForceFeedback;        // 0x920(0x8)
	float                                                        MaxAmmo;                                           // 0x928(0x4)
	float                                                        AmmoDrainPerSecond;                                // 0x92c(0x4)
	float                                                        MaxPressure;                                       // 0x930(0x4)
	float                                                        MaxPressureOvercharge;                             // 0x934(0x4)
	float                                                        PressureDrainPerSecond;                            // 0x938(0x4)
	float                                                        PressureChargePerSecond;                           // 0x93c(0x4)
	float                                                        OverchargeDrainDelayInSeconds;                     // 0x940(0x4)
	float                                                        FizzSpeed;                                         // 0x944(0x4)
	float                                                        WobbleSpeed;                                       // 0x948(0x4)
	float                                                        LiquidLevelMin;                                    // 0x94c(0x4)
	float                                                        LiquidLevelMax;                                    // 0x950(0x4)
	float                                                        FoamMultiplier;                                    // 0x954(0x4)
	Class Pawn*                                                  Wielder;                                           // 0x958(0x8)
	Class LiquidLauncherChargeVisuals*                           LiquidLauncherChargeVisuals;                       // 0x970(0x8)
	char                                                         pad0x50_64676[0x50];                               // 0x978(0x50)
	float                                                        CurrentAmmo;                                       // 0x9c8(0x4)
	float                                                        CurrentPressure;                                   // 0x9cc(0x4)
	char                                                         pad0x8_LF8HD[0x8];                                 // 0x9d0(0x8)
	Class MaterialInstanceDynamic*                               FirstPersonLiquidLauncherLiquidMaterial;           // 0x9d8(0x8)
	Class MaterialInstanceDynamic*                               ThirdPersonLiquidLauncherLiquidMaterial;           // 0x9e0(0x8)
	char                                                         pad0x8_P72B3[0x8];                                 // 0x9e8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DelayLoadServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Runnable: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClientSmoothedLocationInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x2f0] - InheritedSize[0x2e0]
class SpawnActorComponent: public SceneComponent
{
public:
	class                                                        ChildActorClass;                                   // 0x2e0(0x8)
	Class Actor*                                                 ChildActor;                                        // 0x2e8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AdditionalNetRelevancyPointsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomNetRelevancyPointInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class IndividualReplicationChannelComponent: public ActorComponent
{
public:
};


// Size 0x50 (Full Size[0x418] - InheritedSize[0x3c8]
class IndividualReplicationChannel: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IndividualReplicationChannelProvider: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetDormancyHelpers: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NetworkedEventsWhitelistInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SharedObjectReplicationServiceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x430] - InheritedSize[0x3c8]
class SharedObjectReplicationService: public Actor
{
public:
	char                                                         pad0x58_T64FT[0x58];                               // 0x3c8(0x58)
	TArray<class Object*>                                        RepArray;                                          // 0x420(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DelayedMeshCharacterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PirateIdentityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerTelemetryInfoProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerTelemetrySubjectGetterInterface: public Interface
{
public:
};


// Size 0x58 (Full Size[0x90] - InheritedSize[0x38]
class TeamCityBuildSettings: public DeveloperSettings
{
public:
	int                                                          Id;                                                // 0x38(0x4)
	char                                                         pad0x4_SRTVL[0x4];                                 // 0x3c(0x4)
	Struct FString                                               BuildChainCorrelationId;                           // 0x40(0x10)
	int                                                          Changelist;                                        // 0x50(0x4)
	char                                                         pad0x4_MGWRL[0x4];                                 // 0x54(0x4)
	Struct FString                                               BuildTypeId;                                       // 0x58(0x10)
	Struct FString                                               StartedBy;                                         // 0x68(0x10)
	bool                                                         Personal;                                          // 0x78(0x1)
	char                                                         pad0x7_5ZD9F[0x7];                                 // 0x79(0x7)
	Struct FString                                               StreamName;                                        // 0x80(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TelemetryDescriptorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TelemetryDispatcherRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TelemetrySubjectInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class TestCategory: public CategoryBase
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class Company: public Object
{
public:
	Struct FText                                                 DisplayName;                                       // 0x28(0x38)
	struct FName                                                 UniqueTextIdentifier;                              // 0x60(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class EntitlementAllowanceDataAsset: public DataAsset
{
public:
	Struct FString                                               UsageTooltip;                                      // 0x28(0x10)
	TArray<struct EntitlementAllowance>                          EntitlementAllowance;                              // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EntitlementBundleMapperDataAsset: public DataAsset
{
public:
	TArray<struct Bundles>                                       Bundles;                                           // 0x28(0x10)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class RankDesc: public EntitlementDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EntitlementHelpersBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class EntitlementMapDataAsset: public DataAsset
{
public:
	TArray<struct Entitlements>                                  Entitlements;                                      // 0x28(0x10)
	TArray<class EntitlementMapDataAsset*>                       EntitlementAssets;                                 // 0x38(0x10)
	TArray<Str KnownErroniusEntitlementIdsToConsume>             KnownErroniusEntitlementIdsToConsume;              // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EntitlementPreviewActorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EntitlementRedirectorDataAsset: public DataAsset
{
public:
	TArray<struct Redirectors>                                   Redirectors;                                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EntitlementsAsset: public DataAsset
{
public:
	TArray<struct Entitlements>                                  Entitlements;                                      // 0x28(0x10)
};


// Size 0x198 (Full Size[0x1d0] - InheritedSize[0x38]
class EntitlementSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  EntitlementMap;                                    // 0x38(0x10)
	Struct StringAssetReference                                  EntitlementRedirectors;                            // 0x48(0x10)
	Struct StringAssetReference                                  DefaultEntitlementsAsset;                          // 0x58(0x10)
	Struct StringAssetReference                                  ErroneousEntitlementsAsset;                        // 0x68(0x10)
	TArray<struct EntitlementsAssetOverrides>                    EntitlementsAssetOverrides;                        // 0x78(0x10)
	Struct StringAssetReference                                  EntitlementAllowanceDataAsset;                     // 0x88(0x10)
	Struct StringAssetReference                                  MissingIcon;                                       // 0x98(0x10)
	Struct StringAssetReference                                  EntitlementBundleMapper;                           // 0xa8(0x10)
	char                                                         pad0x118_4WLIH[0x118];                             // 0xb8(0x118)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ErroneousEntitlementsDataAsset: public DataAsset
{
public:
	TArray<Str KnownErroneousEntitlementIdsToConsume>            KnownErroneousEntitlementIdsToConsume;             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCompanyViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerEntitlementControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerEntitlementViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipEntitlementInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class UnlockableEntitlementsDataAsset: public DataAsset
{
public:
	TArray<struct Categories>                                    Categories;                                        // 0x28(0x10)
};


// Size 0x360 (Full Size[0x388] - InheritedSize[0x28]
class AthenaInputSettings: public Object
{
public:
	TArray<struct FName>                                         AllowedInvertedYAxis;                              // 0x28(0x10)
	TArray<struct FName>                                         AllowedInvertedXAxis;                              // 0x38(0x10)
	TArray<struct FName>                                         AllowedInvertedCombinedAxis;                       // 0x48(0x10)
	float                                                        RadialSelectionTimeout;                            // 0x58(0x4)
	float                                                        RadialSelectionMagnitudeThreshold;                 // 0x5c(0x4)
	float                                                        TimeToBlockInputsAfterRadialDeactivation;          // 0x60(0x4)
	float                                                        MinDeflectionToBlockInputsAfterRadialDeactivation; // 0x64(0x4)
	float                                                        MinRadialSectorUnselectableFraction;               // 0x68(0x4)
	float                                                        MaxRadialSectorUnselectableFraction;               // 0x6c(0x4)
	float                                                        RadialActivationThreshold;                         // 0x70(0x4)
	float                                                        RadialFastItemSwitchGracePeriod;                   // 0x74(0x4)
	TArray<struct ActionMappingKeyLookupFallbacks>               ActionMappingKeyLookupFallbacks;                   // 0x78(0x10)
	TArray<struct VirtualActionBindingDefinitions>               VirtualActionBindingDefinitions;                   // 0x88(0x10)
	TArray<struct VirtualAxisBindingDefinitions>                 VirtualAxisBindingDefinitions;                     // 0x98(0x10)
	float                                                        MouseSensitivityMin;                               // 0xa8(0x4)
	float                                                        MouseSensitivityMax;                               // 0xac(0x4)
	float                                                        ControllerSensitivityMin;                          // 0xb0(0x4)
	float                                                        ControllerSensitivityMax;                          // 0xb4(0x4)
	float                                                        ControllerDeadzoneMin;                             // 0xb8(0x4)
	float                                                        ControllerDeadzoneMax;                             // 0xbc(0x4)
	float                                                        ControllerNonLinearityMin;                         // 0xc0(0x4)
	float                                                        ControllerNonLinearityMax;                         // 0xc4(0x4)
	Struct SingleStickMapping                                    SingleStickOffMappings;                            // 0xc8(0x50)
	Struct SingleStickMapping                                    SingleStickSwapMappings;                           // 0x118(0x50)
	Struct SingleStickSettings                                   SingleStickOffSettings;                            // 0x168(0x20)
	Struct SingleStickMapping                                    SingleStickLeftLookMappings;                       // 0x188(0x50)
	Struct SingleStickMapping                                    SingleStickRightLookMappings;                      // 0x1d8(0x50)
	Struct SingleStickMapping                                    SingleStickLeftMoveMappings;                       // 0x228(0x50)
	Struct SingleStickMapping                                    SingleStickRightMoveMappings;                      // 0x278(0x50)
	Struct SingleStickMapping                                    SingleStickLeftHybridMappings;                     // 0x2c8(0x50)
	Struct SingleStickMapping                                    SingleStickRightHybridMappings;                    // 0x318(0x50)
	Struct SingleStickSettings                                   SingleStickOnSettings;                             // 0x368(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoginOptionsProviderInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x240] - InheritedSize[0x210]
class AthenaLocalPlayer: public LocalPlayer
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaLocalPlayerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaLocalPlayerRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xa0] - InheritedSize[0xa0]
class InvalidClothingCategory: public ClothingCategory
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ConditionalStatsAsset: public DataAsset
{
public:
	TArray<struct ConditionalStats>                              ConditionalStats;                                  // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ConditionalStatsTriggerType: public Object
{
public:
	struct FName                                                 UniqueTextIdentifier;                              // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConditionalStatsServiceInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class ConditionalStatsService: public Object
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ConditionalStatsServiceSettings: public DataAsset
{
public:
	TArray<struct ConditionalStats>                              ConditionalStats;                                  // 0x28(0x10)
	TArray<struct SeasonConditionalStats>                        SeasonConditionalStats;                            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AttachHarpoonTetherConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BuryHoardOfItemsStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BuryItemStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ConditionalStatFiredStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ConqueringATreasuryConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DigItemStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DonateMapStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EquipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FiredActorFromCannonConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class GhostShipsDefeatedConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HitReactingActorWithCannonConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class KillActorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class KillingSwimmingCreaturePawnConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class OnEndDockToObjectStopwatchConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ParticipatedInActorKillConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerEnteredPirateLegendHideoutConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerEnteredShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerHasDiedConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PlayerVomitedOnActorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RepairShipPartStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SinkShipStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpeakToActorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class UnlockedFortDoorConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class LogicalNotStatCondition: public StatCondition
{
public:
	Class StatCondition*                                         StatCondition;                                     // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class LogicalOrStatCondition: public StatCondition
{
public:
	TArray<class StatCondition*>                                 StatConditions;                                    // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MatchesAllConditionsStatCondition: public StatCondition
{
public:
	TArray<class StatCondition*>                                 Conditions;                                        // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class StatConditionTargetSelector: public Object
{
public:
	byte                                                         Target;                                            // 0x28(0x1)
	char                                                         pad0x7_097GS[0x7];                                 // 0x29(0x7)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DoesNameContainsStatCondition: public TargetedStatCondition
{
public:
	struct FName                                                 TargetNameSubString;                               // 0x30(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsActorTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Assetclass TargetActorClasses>                        TargetActorClasses;                                // 0x30(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionObjectTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StatFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StatSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  ConditionalStatsServiceSettingsLocation;           // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorActivationInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class ActorActivationComponent: public ActorComponent
{
public:
	char                                                         pad0x8_UWVGZ[0x8];                                 // 0xc8(0x8)
	float                                                        ActivationDuration;                                // 0xd0(0x4)
	float                                                        DeactivationDuration;                              // 0xd4(0x4)
	bool                                                         AutoDestroyOnDeactivation;                         // 0xd8(0x1)
	char                                                         pad0x7_BO48L[0x7];                                 // 0xd9(0x7)
	char                                                         pad0x48_C2UAH[0x48];                               // 0xe0(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClassFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class LocatorContainer: public DataAsset
{
public:
	TArray<struct Locators>                                      Locators;                                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedUniqueGuidContainerRetrieverInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DamageableVulnerabilityLayer: public Object
{
public:
	TArray<struct Vulnerabilities>                               Vulnerabilities;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageModifierInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageableVulnerabilityInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x1a0] - InheritedSize[0xc8]
class DamageableComponent: public ActorComponent
{
public:
	char                                                         pad0x50_3MK78[0x50];                               // 0xc8(0x50)
	struct FName                                                 FeatureFlag;                                       // 0x118(0x8)
	TArray<struct Vulnerabilities>                               Vulnerabilities;                                   // 0x120(0x10)
	bool                                                         BlockDamageVerification;                           // 0x130(0x1)
	char                                                         pad0x7_0W13A[0x7];                                 // 0x131(0x7)
	Class DamageableVulnerabilityLayer*                          AddedVulnerabilityLayer;                           // 0x138(0x8)
	TArray<Interface DamageModifiers>                            DamageModifiers;                                   // 0x190(0x10)
};


// Size 0x8 (Full Size[0x1a8] - InheritedSize[0x1a0]
class ActorDamageableComponent: public DamageableComponent
{
public:
	Class HealthComponent*                                       HealthComp;                                        // 0x1a0(0x8)
};


// Size 0x20 (Full Size[0x1c0] - InheritedSize[0x1a0]
class OptInDamageableComponent: public DamageableComponent
{
public:
	bool                                                         EnableDamageFilteringByType;                       // 0x1a0(0x1)
	char                                                         pad0x7_LBD82[0x7];                                 // 0x1a1(0x7)
	TArray<class Class*>                                         AllowedDamagers;                                   // 0x1a8(0x10)
	char                                                         pad0x8_8A8EB[0x8];                                 // 0x1b8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DamageInstigatorInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class DamageTrackerComponent: public ActorComponent
{
public:
	float                                                        SecondsToWaitBeforeClearingDamageDone;             // 0xc8(0x4)
	char                                                         pad0x4_9OREF[0x4];                                 // 0xcc(0x4)
	Class DamageableComponent*                                   DamageableComponent;                               // 0xd0(0x8)
	char                                                         pad0x8_IBC83[0x8];                                 // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GatedHealthInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthCustomizationServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class HealthCustomizationService: public Object
{
public:
	char                                                         pad0x8_FHS4Y[0x8];                                 // 0x28(0x8)
	Class World*                                                 World;                                             // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthRegenerationPoolInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class HealthRegenerationPoolComponent: public ActorComponent
{
public:
	char                                                         pad0x8_SC682[0x8];                                 // 0xc8(0x8)
	float                                                        MaxCapacity;                                       // 0xd0(0x4)
	float                                                        HealingRate;                                       // 0xd4(0x4)
	float                                                        HealingDelayWhenDamaged;                           // 0xd8(0x4)
	char                                                         pad0x4_30S8G[0x4];                                 // 0xdc(0x4)
	double                                                       UIUpdateThrottleMs;                                // 0xe0(0x8)
	char                                                         pad0x38_0HLM9[0x38];                               // 0xe8(0x38)
	Struct HealthRegenState                                      RegenerationState;                                 // 0x120(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealthStageHandlerInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class HealthStageHandlerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitReactionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LivingEntityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RemoteConfigurationProviderBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RemoteConfigurationProviderRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RemoteServicesProviderInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AthenaUserSettingsDefaults: public Object
{
public:
	TArray<Int MaxFPSOptions>                                    MaxFPSOptions;                                     // 0x28(0x10)
	Struct AimSensitivitySettingsDefaults                        AimSensitivitySettings;                            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UserGameSettingsRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChangeableMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MemoryConstrainedMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintBudget: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory: public Object
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class MemoryConstrainedMeshInitializer: public Object
{
public:
	char                                                         pad0x8_RUIGH[0x8];                                 // 0x28(0x8)
	Class Object*                                                Mesh;                                              // 0x30(0x8)
	TArray<class MaterialInterface*>                             OverrideMaterials;                                 // 0x38(0x10)
	TArray<struct FallbackOverrideMaterials>                     FallbackOverrideMaterials;                         // 0x48(0x10)
	Struct StringAssetReference                                  MeshReference;                                     // 0x58(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x68(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x69(0x1)
	bool                                                         IsMMCPermittedByFeatureToggle;                     // 0x6a(0x1)
	char                                                         pad0x5_UDFX4[0x5];                                 // 0x6b(0x5)
	class                                                        MeshFallbackCategory;                              // 0x78(0x8)
	class                                                        BudgetToCountMemoryAgainstIfNoFallback;            // 0x80(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MemoryConstrainedMeshManipulationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshAvailabilityInterface: public Interface
{
public:
};


// Size 0x100 (Full Size[0x128] - InheritedSize[0x28]
class MeshMemoryConstraintHandler: public Object
{
public:
	Class Actor*                                                 MeshOwner;                                         // 0x28(0x8)
	Class Object*                                                CachedMesh;                                        // 0x70(0x8)
	struct FName                                                 CachedMeshName;                                    // 0x78(0x8)
	char                                                         pad0xa8_CO6DL[0xa8];                               // 0x80(0xa8)
};


// Size 0x80 (Full Size[0x6e0] - InheritedSize[0x660]
class MergedStaticMeshMemoryConstraintComponent: public MergedStaticMeshComponent
{
public:
	char                                                         pad0x18_NETVL[0x18];                               // 0x660(0x18)
	Class MeshMemoryConstraintHandler*                           Handler;                                           // 0x678(0x8)
	TArray<struct FallbackOverrideMaterials>                     FallbackOverrideMaterials;                         // 0x680(0x10)
	class                                                        MeshFallbackCategory;                              // 0x690(0x8)
	Struct StringAssetReference                                  MeshReference;                                     // 0x698(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x6b0(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x6b1(0x1)
	char                                                         pad0x6_OOYUS[0x6];                                 // 0x6b2(0x6)
	class                                                        BudgetToCountMemoryAgainstIfNoFallback;            // 0x6b8(0x8)
	Struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0x6c0(0xc)
	char                                                         pad0x4_JIFEO[0x4];                                 // 0x6cc(0x4)
	char                                                         pad0x10_1X55J[0x10];                               // 0x6d0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintDefaultSkeletalCategory: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintDefaultStaticCategory: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackCategoryDataAsset: public DataAsset
{
public:
	class                                                        ConstraintCategory;                                // 0x28(0x8)
	Struct StringAssetReference                                  MeshFallbackReference;                             // 0x30(0x10)
	char                                                         pad0x8_XOV8L[0x8];                                 // 0x40(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackCollection: public DataAsset
{
public:
	int                                                          MaxScoringPerFrame;                                // 0x28(0x4)
	char                                                         pad0x4_YHZK3[0x4];                                 // 0x2c(0x4)
	TArray<class MeshMemoryConstraintFallbackDataAsset*>         FallbackDataAssets;                                // 0x30(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class MeshMemoryConstraintScoringObject: public Object
{
public:
	struct FName                                                 ScoringName;                                       // 0x28(0x8)
	float                                                        ScoringFactor;                                     // 0x30(0x4)
	char                                                         pad0xc_2W0GT[0xc];                                 // 0x34(0xc)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class MeshMemoryConstraintFallbackDataAsset: public DataAsset
{
public:
	struct FName                                                 FallbackName;                                      // 0x28(0x8)
	class                                                        ConstraintBudget;                                  // 0x30(0x8)
	TArray<class MeshMemoryConstraintFallbackCategoryDataAsset*> MeshFallbacks;                                     // 0x38(0x10)
	TArray<Float ThresholdsMB>                                   ThresholdsMB;                                      // 0x48(0x10)
	float                                                        ScoringIntervalInSeconds;                          // 0x58(0x4)
	char                                                         pad0x4_JA0F4[0x4];                                 // 0x5c(0x4)
	TArray<class MeshMemoryConstraintScoringObject*>             ScoringData;                                       // 0x60(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintListenerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintScoringInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class MeshMemoryConstraintScoringMemoryUsed: public MeshMemoryConstraintScoringObject
{
public:
};


// Size 0x8 (Full Size[0x48] - InheritedSize[0x40]
class MeshMemoryConstraintScoringNumberOfMeshes: public MeshMemoryConstraintScoringObject
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintTelemetryInterface: public Interface
{
public:
};


// Size 0x188 (Full Size[0x1b0] - InheritedSize[0x28]
class MeshMemoryConstraintServiceBudgetData: public Object
{
public:
	char                                                         pad0x58_SI1TC[0x58];                               // 0x28(0x58)
	TArray<struct MeshesScoringInfo>                             MeshesScoringInfo;                                 // 0x80(0x10)
	char                                                         pad0x78_CAQ88[0x78];                               // 0x90(0x78)
	Class MeshMemoryConstraintFallbackDataAsset*                 MeshMemoryConstraintFallbackAsset;                 // 0x108(0x8)
	Class World*                                                 World;                                             // 0x110(0x8)
	TArray<struct ConsumersToAddToScoring>                       ConsumersToAddToScoring;                           // 0x118(0x10)
	char                                                         pad0x88_Q8ZJG[0x88];                               // 0x128(0x88)
};


// Size 0x128 (Full Size[0x150] - InheritedSize[0x28]
class MeshMemoryConstraintService: public Object
{
public:
	char                                                         pad0x30_MFPO2[0x30];                               // 0x28(0x30)
	Class World*                                                 World;                                             // 0x58(0x8)
	char                                                         pad0x20_8UXE4[0x20];                               // 0x60(0x20)
	char                                                         pad0xd0_GJ4I2[0xd0];                               // 0x80(0xd0)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class MeshMemoryConstraintSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  MeshMemoryConstraintFallbackSettings;              // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryWorldSettingsInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x840] - InheritedSize[0x7c0]
class PoseableMeshMemoryConstraintComponent: public PoseableMeshComponent
{
public:
	char                                                         pad0x18_8XWYQ[0x18];                               // 0x7c0(0x18)
	Class MeshMemoryConstraintHandler*                           Handler;                                           // 0x7d8(0x8)
	TArray<struct FallbackOverrideMaterials>                     FallbackOverrideMaterials;                         // 0x7e0(0x10)
	class                                                        MeshFallbackCategory;                              // 0x7f0(0x8)
	Struct StringAssetReference                                  MeshReference;                                     // 0x7f8(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x810(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x811(0x1)
	char                                                         pad0x6_4ZRC8[0x6];                                 // 0x812(0x6)
	class                                                        BudgetToCountMemoryAgainstIfNoFallback;            // 0x818(0x8)
	Struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0x820(0xc)
	char                                                         pad0x4_NGCCK[0x4];                                 // 0x82c(0x4)
	char                                                         pad0x10_5VIE7[0x10];                               // 0x830(0x10)
};


// Size 0x90 (Full Size[0xa50] - InheritedSize[0x9c0]
class SkeletalMeshMemoryConstraintComponent: public SkeletalMeshComponent
{
public:
	char                                                         pad0x20_IUXL1[0x20];                               // 0x9c0(0x20)
	Class MeshMemoryConstraintHandler*                           Handler;                                           // 0x9e0(0x8)
	TArray<struct FallbackOverrideMaterials>                     FallbackOverrideMaterials;                         // 0x9e8(0x10)
	class                                                        MeshFallbackCategory;                              // 0x9f8(0x8)
	Struct StringAssetReference                                  MeshReference;                                     // 0xa00(0x10)
	bool                                                         MemoryAccountedFor;                                // 0xa18(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0xa19(0x1)
	char                                                         pad0x6_DUDBL[0x6];                                 // 0xa1a(0x6)
	class                                                        BudgetToCountMemoryAgainstIfNoFallback;            // 0xa20(0x8)
	Struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0xa28(0xc)
	char                                                         pad0x4_6L1NE[0x4];                                 // 0xa34(0x4)
	char                                                         pad0x18_L18QC[0x18];                               // 0xa38(0x18)
};


// Size 0x90 (Full Size[0x6b0] - InheritedSize[0x620]
class StaticMeshMemoryConstraintComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x20_9HAIK[0x20];                               // 0x620(0x20)
	Class MeshMemoryConstraintHandler*                           Handler;                                           // 0x640(0x8)
	TArray<struct FallbackOverrideMaterials>                     FallbackOverrideMaterials;                         // 0x648(0x10)
	class                                                        MeshFallbackCategory;                              // 0x658(0x8)
	Struct StringAssetReference                                  MeshReference;                                     // 0x660(0x10)
	bool                                                         MemoryAccountedFor;                                // 0x678(0x1)
	bool                                                         NeedMeshLoadOnServer;                              // 0x679(0x1)
	char                                                         pad0x6_ICT7U[0x6];                                 // 0x67a(0x6)
	class                                                        BudgetToCountMemoryAgainstIfNoFallback;            // 0x680(0x8)
	Struct FeatureFlag                                           OptionalFeatureToggleForMMC;                       // 0x688(0xc)
	char                                                         pad0x4_1KG6P[0x4];                                 // 0x694(0x4)
	char                                                         pad0x18_O8JGP[0x18];                               // 0x698(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterTeleportInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportActionStateId: public ActionStateId
{
public:
};


// Size 0x40 (Full Size[0x320] - InheritedSize[0x2e0]
class TeleportLocationComponent: public SceneComponent
{
public:
	struct FName                                                 FeatureFlagToBeIncluded;                           // 0x2e0(0x8)
	struct FName                                                 FeatureFlagToBeExcluded;                           // 0x2e8(0x8)
	Struct TeleportLocation                                      TeleportLocation;                                  // 0x2f0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportLocationInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x190] - InheritedSize[0xc8]
class TeleportLocationRetrievalComponent: public ActorComponent
{
public:
	TArray<struct TeleportLocations>                             TeleportLocations;                                 // 0xc8(0x10)
	char                                                         pad0xb8_3HRDP[0xb8];                               // 0xd8(0xb8)
};


// Size 0x0 (Full Size[0x190] - InheritedSize[0x190]
class ExhaustibleTeleportLocationRetrievalComponent: public TeleportLocationRetrievalComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AttitudeSource: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BlockedInputActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanActorBeFiredFromInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CharacterHitReactionDamagerTypeToAnimTypeLayer: public Object
{
public:
	TArray<struct DamagerTypeToAnimTypePairs>                    DamagerTypeToAnimTypePairs;                        // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterInertInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterMovementBaseNotificationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterOrientationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterSwimmingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterTypeRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeferredSpawnInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FireableFromActorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FiredFromActorActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FirstPersonCameraOrientationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IdentifiedAsPlayerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InactivityTrackerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchedFromGeyserActionStateId: public ActionStateId
{
public:
};


// Size 0x10 (Full Size[0x50] - InheritedSize[0x40]
class MeshMemoryConstraintScoringPlayerDistance: public MeshMemoryConstraintScoringObject
{
public:
	float                                                        MaxDistanceSqr;                                    // 0x40(0x4)
	char                                                         pad0xc_ZBVDT[0xc];                                 // 0x44(0xc)
};


// Size 0x18 (Full Size[0x58] - InheritedSize[0x40]
class MeshMemoryConstraintScoringPlayerView: public MeshMemoryConstraintScoringObject
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshSocketsFinderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MovementModeInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PacingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCharacterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerTrackerServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RotationControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimmingMovementInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldVelocityTrackerInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x150] - InheritedSize[0xc8]
class WorldVelocityTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_K85KW[0x8];                                 // 0xc8(0x8)
	float                                                        SamplingTime;                                      // 0xd0(0x4)
	char                                                         pad0x7c_98UGT[0x7c];                               // 0xd4(0x7c)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AutoMoveNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExternallyControllableMovementInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class JumpNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocomotionActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookUpAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookUpRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookUpRateWithFixedSensitivityAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MoveForwardAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MoveRightAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MoveUpAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SprintActivationNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StackableLocomotionActionStateInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleSingleStickToCameraControlPressedInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ToggleSingleStickToCameraControlReleasedInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class TurnAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class TurnRateAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class TurnRateWithFixedSensitivityAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class WalkActivationNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerNameDataAsset: public DataAsset
{
public:
	TArray<struct FText>                                         PlayerNameOverrides;                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameRetrievalInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameServiceInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class PlayerNameService: public Object
{
public:
	char                                                         pad0x68_LLX36[0x68];                               // 0x28(0x68)
	Class PlayerNameDataAsset*                                   PlayerNameDataAsset;                               // 0x90(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class PlayersSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  PlayerNameDataAssetLocation;                       // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AccessibilityFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AutoMoveInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialAccessibilityInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class MaterialAccessibilityService: public Object
{
public:
	char                                                         pad0x58_5S62I[0x58];                               // 0x28(0x58)
	Class MaterialParameterCollection*                           MaterialAccessibilityParamCollection;              // 0x80(0x8)
	Struct StringAssetReference                                  MaterialAccessibilityAssetRef;                     // 0x88(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UniversalDescriptorServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class UniversalDescriptorService: public Object
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DropLargeWieldedItemNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookingAtWieldableCycleBackwardsNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class LookingAtWieldableCycleForwardsNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class PrimaryItemUseHeldNotificationInputId: public PrimaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class SecondaryItemUseHeldNotificationInputId: public SecondaryItemUsePressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ZoomInOnWieldableItemPressedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ZoomInOnWieldableItemReleasedNotificationInputId: public ZoomInOnWieldableItemPressedNotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaCameraComponentInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x2b8] - InheritedSize[0x298]
class AthenaClampedFreelookInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x50 (Full Size[0x1ca0] - InheritedSize[0x1c50]
class AthenaPlayerCameraManager: public PlayerCameraManager
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class AthenaSpringArmComponentParams: public DataAsset
{
public:
	float                                                        CameraDistanceFromPlayer;                          // 0x28(0x4)
	float                                                        CameraVerticalOffset;                              // 0x2c(0x4)
	float                                                        CameraCollisionProbeSize;                          // 0x30(0x4)
	byte                                                         CameraCollisionProbeCollisionChannel;              // 0x34(0x1)
	char                                                         pad0x3_S32EX[0x3];                                 // 0x35(0x3)
	TArray<struct PlayModeSettings>                              PlayModeSettings;                                  // 0x38(0x10)
	float                                                        CameraMinPitch;                                    // 0x48(0x4)
	float                                                        CameraMaxPitch;                                    // 0x4c(0x4)
	float                                                        CameraDefaultPitch;                                // 0x50(0x4)
	float                                                        CameraDefaultYaw;                                  // 0x54(0x4)
	float                                                        CameraPitchSpeed;                                  // 0x58(0x4)
	float                                                        CameraYawSpeed;                                    // 0x5c(0x4)
	float                                                        CameraConstantYawSpeed;                            // 0x60(0x4)
	bool                                                         EnableRotationLag;                                 // 0x64(0x1)
	char                                                         pad0x3_L999R[0x3];                                 // 0x65(0x3)
	float                                                        RotationLagSpeed;                                  // 0x68(0x4)
	bool                                                         ZoomEnabled;                                       // 0x6c(0x1)
	char                                                         pad0x3_0FSA9[0x3];                                 // 0x6d(0x3)
	float                                                        ZoomSpeedGamepad;                                  // 0x70(0x4)
	float                                                        ZoomSpeedMouse;                                    // 0x74(0x4)
	float                                                        ZoomTimeout;                                       // 0x78(0x4)
	float                                                        ZoomMinArmLengthFactor;                            // 0x7c(0x4)
	float                                                        ZoomBlend;                                         // 0x80(0x4)
	bool                                                         AllowSmoothZoomedInOffsetBlend;                    // 0x84(0x1)
	char                                                         pad0x3_O614E[0x3];                                 // 0x85(0x3)
	float                                                        SmoothZoomedInInterpolaionValue;                   // 0x88(0x4)
	char                                                         pad0x4_VF6XJ[0x4];                                 // 0x8c(0x4)
};


// Size 0x90 (Full Size[0x400] - InheritedSize[0x370]
class AthenaSpringArmComponent: public SpringArmComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraFieldOfViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraFunctionLib: public BlueprintFunctionLibrary
{
public:
};


// Size 0x28 (Full Size[0x70] - InheritedSize[0x48]
class CameraPitchModifier: public CameraModifier
{
public:
};


// Size 0x28 (Full Size[0x70] - InheritedSize[0x48]
class CameraRollModifier: public CameraModifier
{
public:
};


// Size 0x28 (Full Size[0x70] - InheritedSize[0x48]
class CameraYawModifier: public CameraModifier
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CharacterCameraStablizationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LookAtInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LookAtLocationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerCameraInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class SequencerCameraDockingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_32DKE[0x8];                                 // 0xc8(0x8)
	Class Actor*                                                 OldViewTarget;                                     // 0xd0(0x8)
};


// Size 0x0 (Full Size[0xa0] - InheritedSize[0xa0]
class EmoteCategory: public ClothingCategory
{
public:
};


// Size 0x0 (Full Size[0x100] - InheritedSize[0x100]
class EmptyEmoteDesc: public EmoteDesc
{
public:
};


// Size 0xc8 (Full Size[0x1c8] - InheritedSize[0x100]
class EmoteRandomFromListDesc: public EmoteDesc
{
public:
	Struct StringAssetReference                                  EmotesListAssetPath;                               // 0x100(0x10)
	Struct EmoteData                                             SelectedEmoteData;                                 // 0x110(0xa0)
	char                                                         pad0x18_ZSN7U[0x18];                               // 0x1b0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaHUDInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AtlasSlotRenderer: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CinematicQuestFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class CinematicQuestRunnable: public Runnable
{
public:
	Struct FText                                                 Message;                                           // 0x28(0x38)
	Struct FText                                                 Header;                                            // 0x60(0x38)
	struct FName                                                 Tag;                                               // 0x98(0x8)
	bool                                                         RunOnce;                                           // 0xa0(0x1)
	char                                                         pad0x7_A0480[0x7];                                 // 0xa1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HUDProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedObjectInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class PopUpAudioDesc: public DataAsset
{
public:
	Struct FString                                               SfxEventName;                                      // 0x28(0x10)
	Struct FString                                               EventName;                                         // 0x38(0x10)
	Struct FString                                               SwitchName;                                        // 0x48(0x10)
	Struct FString                                               SwitchValue;                                       // 0x58(0x10)
};


// Size 0x128 (Full Size[0x150] - InheritedSize[0x28]
class PopUpMessageDesc: public DataAsset
{
public:
	Struct StringAssetReference                                  ToastBackgroundImage;                              // 0x28(0x10)
	Struct StringAssetReference                                  BackgroundImage;                                   // 0x38(0x10)
	Struct StringAssetReference                                  ForegroundImage;                                   // 0x48(0x10)
	Struct FText                                                 Text;                                              // 0x58(0x38)
	Struct FText                                                 BodyText;                                          // 0x90(0x38)
	Struct FString                                               AudioSfxEventName;                                 // 0xc8(0x10)
	Struct FString                                               AudioEventName;                                    // 0xd8(0x10)
	Struct FString                                               AudioSwitchName;                                   // 0xe8(0x10)
	Struct FString                                               AudioSwitchValue;                                  // 0xf8(0x10)
	Struct FString                                               StyleModifier;                                     // 0x108(0x10)
	TArray<Byte StyleModifiers>                                  StyleModifiers;                                    // 0x118(0x10)
	Struct StringAssetReference                                  AllianceIcon;                                      // 0x128(0x10)
	Struct StringAssetReference                                  StampIcon;                                         // 0x138(0x10)
	float                                                        HoldDuration;                                      // 0x148(0x4)
	char                                                         pad0x4_QZCKU[0x4];                                 // 0x14c(0x4)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class AnimNotify_DitherActor: public AnimNotify
{
public:
	byte                                                         FadeSetting;                                       // 0x38(0x1)
	char                                                         pad0x3_Z2KE9[0x3];                                 // 0x39(0x3)
	float                                                        FadeTime;                                          // 0x3c(0x4)
	float                                                        FadeFromTransparencyValue;                         // 0x40(0x4)
	bool                                                         UseFadeFromTransparencyValue;                      // 0x44(0x1)
	char                                                         pad0x3_KXP54[0x3];                                 // 0x45(0x3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AppearComponentInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x158] - InheritedSize[0xc8]
class AppearComponent: public ActorComponent
{
public:
	char                                                         pad0x8_FN9X4[0x8];                                 // 0xc8(0x8)
	bool                                                         AppearOnStart;                                     // 0xd0(0x1)
	bool                                                         UseReversibleCurveTime;                            // 0xd1(0x1)
	char                                                         pad0x6_01A1C[0x6];                                 // 0xd2(0x6)
	TArray<struct MaterialParams>                                MaterialParams;                                    // 0xd8(0x10)
	bool                                                         IsVisible;                                         // 0x118(0x1)
	char                                                         pad0x7_ORXXI[0x7];                                 // 0x119(0x7)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x120(0x10)
	char                                                         pad0x28_EZ9DL[0x28];                               // 0x130(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DitherableInterface: public Interface
{
public:
};


// Size 0x108 (Full Size[0x1d0] - InheritedSize[0xc8]
class DitherComponent: public ActorComponent
{
public:
	char                                                         pad0x8_ZK2XV[0x8];                                 // 0xc8(0x8)
	bool                                                         FindMeshOnOwner;                                   // 0xd0(0x1)
	char                                                         pad0x3_E4PMB[0x3];                                 // 0xd1(0x3)
	float                                                        FadeTime;                                          // 0xd4(0x4)
	char                                                         pad0x10_P824Y[0x10];                               // 0xd8(0x10)
	bool                                                         PurgeOverrideMatsOnDynamicMatMeshLoaded;           // 0x1cc(0x1)
	bool                                                         FadeInOnStart;                                     // 0x1cd(0x1)
	char                                                         pad0x2_S4IEQ[0x2];                                 // 0x1ce(0x2)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DitherFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x30 (Full Size[0xf8] - InheritedSize[0xc8]
class LightFadingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_I6PFD[0x8];                                 // 0xc8(0x8)
	bool                                                         FindLightOnOwner;                                  // 0xd0(0x1)
	char                                                         pad0x3_F6Y2Q[0x3];                                 // 0xd1(0x3)
	float                                                        FadeTime;                                          // 0xd4(0x4)
	char                                                         pad0x8_JVT44[0x8];                                 // 0xd8(0x8)
	Class LightComponent*                                        LightComponent;                                    // 0xe0(0x8)
	char                                                         pad0x8_R5OF4[0x8];                                 // 0xe8(0x8)
	bool                                                         FadeInOnStart;                                     // 0xf0(0x1)
	char                                                         pad0x7_ALXFM[0x7];                                 // 0xf1(0x7)
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class MaterialAnimatorComponent: public ActorComponent
{
public:
	TArray<struct AnimationGroups>                               AnimationGroups;                                   // 0xc8(0x10)
	TArray<struct AnimationGroupInstances>                       AnimationGroupInstances;                           // 0xd8(0x10)
	char                                                         pad0x78_GUBEK[0x78];                               // 0xe8(0x78)
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class MaterialManipulationComponent: public ActorComponent
{
public:
	TArray<struct ScalarParameterValues>                         ScalarParameterValues;                             // 0xc8(0x10)
	TArray<struct TextureParameterValues>                        TextureParameterValues;                            // 0xd8(0x10)
	TArray<struct VectorParameterValues>                         VectorParameterValues;                             // 0xe8(0x10)
	char                                                         pad0x8_4T3F4[0x8];                                 // 0xf8(0x8)
	TArray<struct DynamicMaterials>                              DynamicMaterials;                                  // 0x100(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialManipulationSettingsInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class MaterialManipulationSettingsComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HIQIR[0x8];                                 // 0xc8(0x8)
	Struct MaterialManipulationSettings                          Settings;                                          // 0xd0(0x30)
	Class MaterialInstance*                                      OverrideMaterial;                                  // 0x100(0x8)
	char                                                         pad0x8_01JJ6[0x8];                                 // 0x108(0x8)
	Struct Transform                                             PosedTransform;                                    // 0x110(0x30)
};


// Size 0xf8 (Full Size[0x1c0] - InheritedSize[0xc8]
class MeshAnimatorComponent: public ActorComponent
{
public:
	bool                                                         SyncWithServer;                                    // 0xc8(0x1)
	char                                                         pad0x7_D0DTA[0x7];                                 // 0xc9(0x7)
	TArray<struct Animations>                                    Animations;                                        // 0xd0(0x10)
	Struct MeshAnimatorSyncData                                  ServerSyncData;                                    // 0xe0(0x10)
	char                                                         pad0x18_D3K7B[0x18];                               // 0xf0(0x18)
	Struct MeshAnimatorInstance                                  AnimationInstance;                                 // 0x120(0x70)
	char                                                         pad0x30_HGTTJ[0x30];                               // 0x190(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObjectMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObjectMeshRetrievalInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x660] - InheritedSize[0x5c0]
class SurfaceWaterComponent: public PrimitiveComponent
{
public:
	Struct Vector                                                BoxExtent;                                         // 0x5b8(0xc)
	float                                                        UpdateCullDistance;                                // 0x5c4(0x4)
	Class Texture2D*                                             AddWaterMaskTexture;                               // 0x5c8(0x8)
	Class Texture2D*                                             BaseHeightTexture;                                 // 0x5d0(0x8)
	int                                                          TextureSizeX;                                      // 0x5d8(0x4)
	int                                                          TextureSizeY;                                      // 0x5dc(0x4)
	float                                                        WetnessPerStrength;                                // 0x5e0(0x4)
	float                                                        WetnessDecayRate;                                  // 0x5e4(0x4)
	char                                                         pad0x18_895HS[0x18];                               // 0x5e8(0x18)
	Struct Vector4                                               SplatData;                                         // 0x600(0x10)
	Class TextureRenderTarget2D*                                 WaterHeightTexture;                                // 0x610(0x8)
	Class TextureRenderTarget2D*                                 WaterHeightTexturePingPong;                        // 0x618(0x8)
	Class TextureRenderTarget2D*                                 NormalTexture;                                     // 0x620(0x8)
	Class TextureRenderTarget2D*                                 OutflowTexture;                                    // 0x628(0x8)
	Class TextureRenderTarget2D*                                 OutflowTexturePingPong;                            // 0x630(0x8)
	char                                                         pad0x28_0IRL8[0x28];                               // 0x638(0x28)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PersistenceIdentifierMap: public DataAsset
{
public:
	Struct StringAssetReference                                  AssetReference;                                    // 0x28(0x10)
	TArray<struct IdentifierMap>                                 IdentifierMap;                                     // 0x38(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class PersistenceIdentifierSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  PersistenceIdentifierSettingsAsset;                // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PersistenceIdentifierSettingsAsset: public DataAsset
{
public:
	TArray<class PersistenceIdentifierMap*>                      PersistenceMapData;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PersistenceInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x1a0] - InheritedSize[0xc8]
class WaterSplashComponent: public ActorComponent
{
public:
	char                                                         pad0x38_441HO[0x38];                               // 0xc8(0x38)
	Class Object*                                                EnterWaterParticleSystem;                          // 0x100(0x8)
	Class WwiseEvent*                                            EnterWaterSfx;                                     // 0x108(0x8)
	Class WwiseObjectPoolWrapper*                                EnterWaterSfxWisePoolToUse;                        // 0x110(0x8)
	Class Object*                                                ExitWaterParticleSystem;                           // 0x118(0x8)
	Class WwiseEvent*                                            ExitWaterSfx;                                      // 0x120(0x8)
	Class WwiseObjectPoolWrapper*                                ExitWaterSfxWisePoolToUse;                         // 0x128(0x8)
	byte                                                         ParticleSystemAttachLocation;                      // 0x130(0x1)
	bool                                                         UseComplexWaterHeightDetection;                    // 0x131(0x1)
	bool                                                         SpawnParticleSystemsAttached;                      // 0x132(0x1)
	bool                                                         SpawnParticleSystemsAlignedVertically;             // 0x133(0x1)
	bool                                                         TriggerOnEntry;                                    // 0x134(0x1)
	bool                                                         TriggerOnExit;                                     // 0x135(0x1)
	bool                                                         AllowRepeatedEntryTriggers;                        // 0x136(0x1)
	bool                                                         AllowRepeatedExitTriggers;                         // 0x137(0x1)
	float                                                        DeepWaterThreshold;                                // 0x138(0x4)
	float                                                        OceanFloorThreshold;                               // 0x13c(0x4)
	float                                                        MinimumFallDistance;                               // 0x140(0x4)
	char                                                         pad0x5c_N4SEB[0x5c];                               // 0x144(0x5c)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StandardAnchorDynamicsDesc: public BaseAnchorDynamicsDesc
{
public:
	Struct StandardAnchorDynamicsParameters                      Parameters;                                        // 0x28(0x28)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StandardHullDragDynamicsDesc: public BaseHullDragDynamicsDesc
{
public:
	Class CurveFloat*                                            WaterDragScalarIfAllSailsUp;                       // 0x28(0x8)
	Class CurveFloat*                                            WaterDragScalarIfInReef;                           // 0x30(0x8)
	Struct StandardHullDragDynamicsParameters                    Parameters;                                        // 0x38(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StandardRudderDynamicsDesc: public BaseRudderDynamicsDesc
{
public:
	Struct StandardRudderDynamicsParameters                      Parameters;                                        // 0x28(0x8)
	Class CurveFloat*                                            ShipSpeedToSteeringBoostCurve;                     // 0x30(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class StandardSailDynamicsDesc: public BaseSailDynamicsDesc
{
public:
	Class CurveFloat*                                            SailSetFractionToSailForceAmp;                     // 0x28(0x8)
	Struct StandardSailDynamicsParameters                        Parameters;                                        // 0x30(0xc)
	char                                                         pad0x4_SR809[0x4];                                 // 0x3c(0x4)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class BowSplashContainer: public DataAsset
{
public:
	bool                                                         EnableProbes;                                      // 0x28(0x1)
	char                                                         pad0x3_NRTKP[0x3];                                 // 0x29(0x3)
	float                                                        VisibleCullDistance;                               // 0x2c(0x4)
	float                                                        HiddenCullDistance;                                // 0x30(0x4)
	float                                                        SpeedThreshold;                                    // 0x34(0x4)
	float                                                        BowSplashFieldOfViewAngleAddition;                 // 0x38(0x4)
	char                                                         pad0x4_78F4S[0x4];                                 // 0x3c(0x4)
	TArray<struct Probes>                                        Probes;                                            // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewShipManifestProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeckSurfaceWaterProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IdentifiedAsShipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpulseThrottlerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstigatorTrackerInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class InstigatorTrackerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MastInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnboardCharacterTrackerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OwnedByShipBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OwnedByShipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategory: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PartDescCustomizationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerBuriedItemsMapBundleInteractionComponentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class ShipPartCustomizationComponent: public ActorComponent
{
public:
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class ReplicatedShipPartCustomizationComponent: public ShipPartCustomizationComponent
{
public:
	Struct PartDesc                                              PartDesc;                                          // 0xc8(0x20)
	char                                                         pad0x20_W47G0[0x20];                               // 0xe8(0x20)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class ShipAnnouncementComponent: public ActorComponent
{
public:
	Struct StringAssetReference                                  Icon;                                              // 0xc8(0x10)
	Struct StringAssetReference                                  Alignment;                                         // 0xd8(0x10)
	byte                                                         AlignmentId;                                       // 0xe8(0x1)
	char                                                         pad0x7_QJGDK[0x7];                                 // 0xe9(0x7)
	Struct FString                                               AudioCueKey;                                       // 0xf0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipBuoyancyMovementInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryA: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryB: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryC: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryD: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCategoryS: public ShipCategory
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class ShipCustomizationCategory: public CategoryBase
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class InvalidShipCustomizationCategory: public ShipCustomizationCategory
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class ShipTitleCategory: public ShipCustomizationCategory
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipCustomizationInfo: public DataAsset
{
public:
	class                                                        Category;                                          // 0x28(0x8)
	TArray<struct ShipSizeCustomizations>                        ShipSizeCustomizations;                            // 0x30(0x10)
};


// Size 0x0 (Full Size[0xf8] - InheritedSize[0xf8]
class ShipTitleDesc: public ShipCustomizationDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCustomizationLoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipCustomizationLoadoutViewInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class ShipCustomizationSettings: public DeveloperSettings
{
public:
	TArray<struct ShipCustomizationSettings>                     ShipCustomizationSettings;                         // 0x38(0x10)
	Struct FString                                               DebugTinCrewName;                                  // 0x48(0x10)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class ShipDescAsset: public Object
{
public:
	Struct ShipDesc                                              Desc;                                              // 0x28(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipDynamicsProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipDynamicsTargetInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ShipEntitlementProcessingPolicyDataAsset: public DataAsset
{
public:
	TArray<class ShipEntitlementProcessingPolicy*>               ShipEntitlementProcessingPolicies;                 // 0x28(0x10)
	Class PopUpMessageDesc*                                      ShipEntitlementsGrantedMessage;                    // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipGetterInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ShipLiveryDescAsset: public ShipPartDescAsset
{
public:
	Struct ShipLivery                                            ShipLivery;                                        // 0x28(0x20)
};


// Size 0x70 (Full Size[0x138] - InheritedSize[0xc8]
class ShipLiveryComponent: public ActorComponent
{
public:
	Class ShipLiveryDescAsset*                                   DefaultLivery;                                     // 0xc8(0x8)
	TArray<struct LiveryDescs>                                   LiveryDescs;                                       // 0xd0(0x10)
	char                                                         pad0x58_7KLXE[0x58];                               // 0xe0(0x58)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ShipMilestoneDescriptions: public DataAsset
{
public:
	TArray<struct ShipMilestoneAlignments>                       ShipMilestoneAlignments;                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipMilestoneDescriptionsProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipMilestoneEntitlementControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipMilestoneEntitlementViewInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ShipNosediveBrake: public DataAsset
{
public:
	Class CurveFloat*                                            SubmersionVsBrakeFactorCurve;                      // 0x28(0x8)
	float                                                        BrakeForceScalar;                                  // 0x30(0x4)
	Struct Vector                                                LocalProbePos;                                     // 0x34(0xc)
	float                                                        ProbeHeight;                                       // 0x40(0x4)
	char                                                         pad0x4_XCV7N[0x4];                                 // 0x44(0x4)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class CaptainsLogPartDescAsset: public ShipPartDescAsset
{
public:
	Struct CaptainsLogPartDesc                                   CaptainsLogPartDesc;                               // 0x28(0x40)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ShipAnnouncementPartDescAsset: public ShipPartDescAsset
{
public:
	Struct ShipAnnouncementPartDesc                              ShipAnnouncementPartDesc;                          // 0x28(0x38)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ShipPartHitsConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPartRegistrationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipRegionLocatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class ShipResurfaceWetnessActor: public Actor
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class ShipResurfaceWetnessContainer: public DataAsset
{
public:
	TArray<struct ShipWetnessInstanceHandles>                    ShipWetnessInstanceHandles;                        // 0x28(0x10)
	class                                                        LoadedShipResurfaceVFXClass;                       // 0x58(0x8)
	char                                                         pad0x18_QNORF[0x18];                               // 0x60(0x18)
	Struct Vector                                                SurfaceWaterLocation;                              // 0x78(0xc)
	float                                                        SurfaceWaterRadius;                                // 0x84(0x4)
	float                                                        SurfaceWaterStrength;                              // 0x88(0x4)
	char                                                         pad0x1c_WBYP8[0x1c];                               // 0x8c(0x1c)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class ShipSinkingParametersDataAsset: public DataAsset
{
public:
	Struct SinkingShipParams                                     SinkingParameters;                                 // 0x28(0x38)
	Struct BuoyancySampleMovement                                SinkingBuoyancySettings;                           // 0x60(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipSpawnerInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ShipSpeedBand: public Object
{
public:
	float                                                        MinimumSpeed;                                      // 0x28(0x4)
	char                                                         pad0x4_LV71G[0x4];                                 // 0x2c(0x4)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ShipsVisitsAnIslandData: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTelemetryDescriptorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTitleProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTypeAI: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTypeAIAggressive: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTypeAIPassive: public ShipType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipUtilitiesFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ShipVisitsAnIslandConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SinkingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpottedCaptainedShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionTrackedShipTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AlliancePennantAsset: public DataAsset
{
public:
	TArray<struct AlliancePennants>                              AlliancePennants;                                  // 0x28(0x10)
	TArray<struct ShipAlliancePennantPartNames>                  ShipAlliancePennantPartNames;                      // 0x38(0x10)
	Struct StringAssetReference                                  EmptyPennantDesc;                                  // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AllianceServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsInAllianceStatCondition: public StatCondition
{
public:
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class IsTargetAllianceMemberStatCondition: public TargetedStatCondition
{
public:
};


// Size 0x0 (Full Size[0x3f8] - InheritedSize[0x3f8]
class GhostShipPlayerSpawnLocation: public PlayerStart
{
public:
};


// Size 0x10 (Full Size[0x408] - InheritedSize[0x3f8]
class SpawnLocation: public PlayerStart
{
public:
	Struct FString                                               Description;                                       // 0x3f8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProgressLocationId: public Object
{
public:
};


// Size 0x8 (Full Size[0x410] - InheritedSize[0x408]
class ProgressSpawnLocation: public SpawnLocation
{
public:
	class                                                        ProgressId;                                        // 0x408(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoralFortressProgressLocationID: public ProgressLocationId
{
public:
};


// Size 0x0 (Full Size[0x418] - InheritedSize[0x418]
class TunnelOfTheDamnedPortalShipSpawnLocation: public ShipSpawnLocation
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SpawnLocationKeywordPriorityListAsset: public DataAsset
{
public:
	TArray<Str PriorityKeywords>                                 PriorityKeywords;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewMemberInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewMembershipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewMembershipFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0xe0 (Full Size[0x1a8] - InheritedSize[0xc8]
class CrewOwnershipComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HFJZL[0x8];                                 // 0xc8(0x8)
	byte                                                         State;                                             // 0xd0(0x1)
	char                                                         pad0x3_437FY[0x3];                                 // 0xd1(0x3)
	Struct Guid                                                  CachedCrewId;                                      // 0xd4(0x10)
	Struct Guid                                                  LastKnownCrewId;                                   // 0xe4(0x10)
	char                                                         pad0xb4_Y3TKJ[0xb4];                               // 0xf4(0xb4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewSpawnLocationsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class IsTargetCrewMemberStatCondition: public TargetedStatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipSize: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AILargeShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISmallShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LargeShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MediumShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SmallShip: public ShipSize
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipTrackerInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class AnimNotify_PlayWorldCameraShake: public AnimNotify
{
public:
	class                                                        CameraShake;                                       // 0x38(0x8)
	float                                                        ShakeInnerRadius;                                  // 0x40(0x4)
	float                                                        ShakeOuterRadius;                                  // 0x44(0x4)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class EffectBlendControllerComponent: public ActorComponent
{
public:
	Struct VisualFeedbackList                                    Effects;                                           // 0xc8(0x18)
	char                                                         pad0x8_27PY9[0x8];                                 // 0xe0(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EffectBlendObjectBase: public Object
{
public:
	float                                                        SubItemBlendRangeMin;                              // 0x28(0x4)
	float                                                        SubItemBlendRangeMax;                              // 0x2c(0x4)
	char                                                         pad0x8_Z29RL[0x8];                                 // 0x30(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class LightIntensityBlend: public EffectBlendObjectBase
{
public:
	Struct ActorComponentSelector                                Component;                                         // 0x38(0x10)
	float                                                        Inactive;                                          // 0x48(0x4)
	float                                                        Active;                                            // 0x4c(0x4)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class MaterialParameterBlendBase: public EffectBlendObjectBase
{
public:
	Class MaterialInstanceDynamic*                               DynamicMaterial;                                   // 0x38(0x8)
	struct FName                                                 ParameterName;                                     // 0x40(0x8)
	Struct ActorComponentSelector                                Mesh;                                              // 0x48(0x10)
	int                                                          MaterialIndex;                                     // 0x58(0x4)
	char                                                         pad0x4_2DG9S[0x4];                                 // 0x5c(0x4)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class MaterialScalarParameterBlend: public MaterialParameterBlendBase
{
public:
	float                                                        Inactive;                                          // 0x60(0x4)
	float                                                        Active;                                            // 0x64(0x4)
	char                                                         pad0x8_9T0DP[0x8];                                 // 0x68(0x8)
};


// Size 0x30 (Full Size[0x90] - InheritedSize[0x60]
class MaterialVectorParameterBlend: public MaterialParameterBlendBase
{
public:
	Struct LinearColor                                           Inactive;                                          // 0x60(0x10)
	Struct LinearColor                                           Active;                                            // 0x70(0x10)
	char                                                         pad0x10_TW5K1[0x10];                               // 0x80(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GlobalEmitterServiceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class NetworkTriggeredVFXComponent: public ActorComponent
{
public:
	TArray<class Object*>                                        NetworkTriggerableVFX;                             // 0xc8(0x10)
	Class ParticleSystemComponent*                               CurrentlyPlayingParticleSystem;                    // 0xd8(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ParticleSystemPickerAsset: public DataAsset
{
public:
	Struct ParticleSystemPicker                                  ParticleSystems;                                   // 0x28(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxCustomisationType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxCustomisationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class VfxSelectorDataAsset: public DataAsset
{
public:
	Struct VfxSelectorEntry                                      MinDefaultEffectParams;                            // 0x28(0x28)
	TArray<struct Ranges>                                        Ranges;                                            // 0x50(0x10)
	Struct VfxSelectorEntry                                      MaxDefaultEffectParams;                            // 0x60(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VfxSelectorFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class VFXSpawnerComponent: public ActorComponent
{
public:
	Class ParticleSystemComponent*                               CachedParticleSystem;                              // 0xc8(0x8)
	Class SceneComponent*                                        AttachedSceneComponent;                            // 0xd0(0x8)
	Struct VFXHandlerComponentParams                             VFXParameters;                                     // 0xd8(0x40)
	bool                                                         State;                                             // 0x118(0x1)
	char                                                         pad0x17_KH91O[0x17];                               // 0x119(0x17)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VFXViewerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MaterialInformationInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MaterialInformationService: public Object
{
public:
	char                                                         pad0x8_J91HI[0x8];                                 // 0x28(0x8)
	Class DataTable*                                             MaterialTranslationTable;                          // 0x30(0x8)
	Class DataTable*                                             MaterialAudioTable;                                // 0x38(0x8)
	Class DataTable*                                             MaterialVFXTable;                                  // 0x40(0x8)
	char                                                         pad0x10_T6WHJ[0x10];                               // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhysicsCollisionFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrackedActorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrackedActorServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class TrackedOwnerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_TN9ZN[0x8];                                 // 0xc8(0x8)
	byte                                                         TrackedOwnerType;                                  // 0xd0(0x1)
	char                                                         pad0x7_LTDRE[0x7];                                 // 0xd1(0x7)
};


// Size 0x0 (Full Size[0xd8] - InheritedSize[0xd8]
class SpawnDependentTrackedOwnerComponent: public TrackedOwnerComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuoyancyInterface: public Interface
{
public:
};


// Size 0x278 (Full Size[0x340] - InheritedSize[0xc8]
class BuoyancyComponent: public ActorComponent
{
public:
	char                                                         pad0x8_H0VZZ[0x8];                                 // 0xc8(0x8)
	Struct WaterBuoyancy                                         BuoyancyParams;                                    // 0xd0(0x130)
	Struct BuoyancyComponentSinkingParams                        SinkingParams;                                     // 0x200(0x34)
	Struct BuoyancyComponentLockToSurfaceParams                  LockToSurfaceParams;                               // 0x234(0x1c)
	Struct BuoyancyComponentExclusionParams                      ExclusionParams;                                   // 0x250(0x8)
	bool                                                         DoClientSideSim;                                   // 0x258(0x1)
	char                                                         pad0x7_ZMBC3[0x7];                                 // 0x259(0x7)
	Class PrimitiveComponent*                                    VisibleMesh;                                       // 0x260(0x8)
	char                                                         pad0xc_JNCGZ[0xc];                                 // 0x268(0xc)
	float                                                        ChoppinessScalar;                                  // 0x274(0x4)
	byte                                                         State;                                             // 0x278(0x1)
	char                                                         pad0xc7_L1J0I[0xc7];                               // 0x279(0xc7)
};


// Size 0x230 (Full Size[0x5f8] - InheritedSize[0x3c8]
class BuoyantActor: public Actor
{
public:
	char                                                         pad0xc0_N9DJ3[0xc0];                               // 0x3c8(0xc0)
	Class StaticMeshComponent*                                   Mesh;                                              // 0x488(0x8)
	Class ShapeComponent*                                        BaseComponent;                                     // 0x490(0x8)
	Struct RigidBodyErrorCorrection                              PhysicsErrorCorrection;                            // 0x498(0x1c)
	char                                                         pad0x4_Q8623[0x4];                                 // 0x4b4(0x4)
	Class BuoyancyComponent*                                     BuoyancyComponent;                                 // 0x4b8(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x4c0(0x8)
	char                                                         pad0x8_MORPQ[0x8];                                 // 0x4c8(0x8)
	Class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x4d0(0x8)
	char                                                         pad0x60_OAKO5[0x60];                               // 0x4d8(0x60)
	Struct NetTimeStampCalculator                                MovementTimeStamp;                                 // 0x538(0x70)
	Struct ReplicatedPhysicsState                                ReplicatedPhysicsState;                            // 0x5a8(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLoaderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadableContainerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadableItemInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadableProjectileInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class LoadableProjectileComponent: public ActorComponent
{
public:
	char                                                         pad0x8_D7QY0[0x8];                                 // 0xc8(0x8)
	class                                                        ProjectileType;                                    // 0xd0(0x8)
	Class ParticleSystem*                                        LoadedItemParticleTemplate;                        // 0xd8(0x8)
	Class ParticleSystem*                                        LaunchParticleTemplate;                            // 0xe0(0x8)
	bool                                                         LaunchParticleDoReflections;                       // 0xe8(0x1)
	bool                                                         LaunchParticleAttachToBarrel;                      // 0xe9(0x1)
	char                                                         pad0x2_8W4ZM[0x2];                                 // 0xea(0x2)
	float                                                        LoadedFuseTimer;                                   // 0xec(0x4)
	Class WwiseObjectPoolWrapper*                                FuseSoundWisePool;                                 // 0xf0(0x8)
	Class WwiseEvent*                                            FuseActivateSoundPlayEvent;                        // 0xf8(0x8)
	Class WwiseEvent*                                            FuseSoundPlayEvent;                                // 0x100(0x8)
	Class WwiseEvent*                                            FuseSoundStopEvent;                                // 0x108(0x8)
	Class Object*                                                FuseParticleSystem;                                // 0x110(0x8)
	Struct StringAssetReference                                  FuseMeshAssetReference;                            // 0x118(0x10)
	Struct PlayerStat                                            FiredFromCannonStat;                               // 0x128(0x4)
	Struct PlayerStat                                            FiredFromCannonShipStat;                           // 0x12c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadingPointInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeadActionStateId: public ActionStateId
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class GhostDataAsset: public DataAsset
{
public:
	class                                                        RevivedAnimationStateId;                           // 0x28(0x8)
	float                                                        InitialSpawnTime;                                  // 0x30(0x4)
	float                                                        HeightOffsetFromCeilingCollision;                  // 0x34(0x4)
	TArray<struct PlayModeParameters>                            PlayModeParameters;                                // 0x38(0x10)
	byte                                                         GhostCollisionChannel;                             // 0x48(0x1)
	char                                                         pad0x3_ZL5OU[0x3];                                 // 0x49(0x3)
	float                                                        GhostShader_Start_InitialAmount;                   // 0x4c(0x4)
	float                                                        GhostShader_Start_TargetAmount;                    // 0x50(0x4)
	float                                                        GhostShader_Start_Delay;                           // 0x54(0x4)
	float                                                        GhostShader_Start_Duration;                        // 0x58(0x4)
	float                                                        GhostShader_End_InitialAmount;                     // 0x5c(0x4)
	float                                                        GhostShader_End_TargetAmount;                      // 0x60(0x4)
	float                                                        GhostShader_End_Delay;                             // 0x64(0x4)
	float                                                        GhostShader_End_Duration;                          // 0x68(0x4)
	char                                                         pad0x4_GXXN5[0x4];                                 // 0x6c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KillableCharacterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerDeathInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileServiceHitRegInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class ProjectileHitRegService: public Actor
{
public:
	char                                                         pad0x8_9OXYX[0x8];                                 // 0x3c8(0x8)
	Struct HitRegToggleStruct                                    HitRegToggles;                                     // 0x3d0(0x9)
	char                                                         pad0x7_ZQ4G6[0x7];                                 // 0x3d9(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeAttackBlockerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindBaseProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindComponentInterface: public Interface
{
public:
};


// Size 0x178 (Full Size[0x240] - InheritedSize[0xc8]
class RewindComponent: public ActorComponent
{
public:
	char                                                         pad0x10_WKHL9[0x10];                               // 0xc8(0x10)
	bool                                                         AutoRegister;                                      // 0xd8(0x1)
	byte                                                         CollisionChannel;                                  // 0xd9(0x1)
	char                                                         pad0x2_9SS1I[0x2];                                 // 0xda(0x2)
	Struct RewindComponentParameters                             Parameters;                                        // 0xdc(0x10)
	bool                                                         ShouldRegisterToAggregateTick;                     // 0xec(0x1)
	char                                                         pad0x153_LY5HP[0x153];                             // 0xed(0x153)
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class RewindDataVisualisationComponent: public ActorComponent
{
public:
	char                                                         pad0x8_HR7QQ[0x8];                                 // 0xc8(0x8)
	Struct RewindPhysicsServiceEntry                             RewindEntry;                                       // 0xd0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewindPhysicsServiceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class RewindPhysicsService: public Object
{
public:
	char                                                         pad0x8_1E37V[0x8];                                 // 0x28(0x8)
	Class World*                                                 World;                                             // 0x30(0x8)
	char                                                         pad0x8_UCGV8[0x8];                                 // 0x38(0x8)
	TArray<struct Entries>                                       Entries;                                           // 0x40(0x10)
	char                                                         pad0x28_JPIIQ[0x28];                               // 0x50(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActivitiesServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ActivitiesService: public Object
{
public:
	char                                                         pad0x20_GBJWX[0x20];                               // 0x28(0x20)
	Class PlayerActivityIconCatalogueDataAsset*                  ActivityIconDataAsset;                             // 0x48(0x8)
	char                                                         pad0x8_SQ07X[0x8];                                 // 0x50(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerActivityComponentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerActivityInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class PlayerActivityComponent: public ActorComponent
{
public:
	char                                                         pad0x8_ROJ2T[0x8];                                 // 0xc8(0x8)
	TArray<Byte HealthChangeReasonsToTriggerLoseHealthActivity>  HealthChangeReasonsToTriggerLoseHealthActivity;    // 0xd0(0x10)
	TArray<Assetclass InstigatorsToTriggerLoseHealthActivity>    InstigatorsToTriggerLoseHealthActivity;            // 0xe0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerActivityFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerActivityIconCatalogueDataAsset: public DataAsset
{
public:
	TArray<struct PlayerActivityIcons>                           PlayerActivityIcons;                               // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerActivityLifetimeRuleCatalogueDataAsset: public DataAsset
{
public:
	TArray<struct PlayerActivityLifetimeRules>                   PlayerActivityLifetimeRules;                       // 0x28(0x10)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class PlayerActivitySettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  PlayerActivityLifetimeRulesCatalogue;              // 0x38(0x10)
	Struct StringAssetReference                                  PlayerActivityIconCatalogue;                       // 0x48(0x10)
	float                                                        NameplateMaxVisibilityDistance;                    // 0x58(0x4)
	char                                                         pad0x4_B9YKV[0x4];                                 // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialInventoryActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialInventoryDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapRadialInventoryActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MapRadialInventoryDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NonVerbalRadialInventoryActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NonVerbalRadialInventoryDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionNorthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionEastNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionSouthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialActionWestNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionNorthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionEastNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionSouthNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ItemRadialActionWestNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class EmotesRadialActivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class EmotesRadialDeactivatedGamepadNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex0SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex1SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex2SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex3SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex4SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex5SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex6SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotIndex7SelectedKeyboardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotClockwiseNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialSlotCounterClockwiseNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NonVerbalRadialDataAsset: public DataAsset
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PhrasesRadialDataAsset: public DataAsset
{
public:
	TArray<struct Phrases>                                       Phrases;                                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialPhrasesAdjusterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhrasesRadialInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x68] - InheritedSize[0x30]
class BackRadialAction: public RadialAction
{
public:
	Struct FText                                                 BackActionName;                                    // 0x30(0x38)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class NextPageRadialAction: public RadialAction
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PageNamedNextPageRadialAction: public NextPageRadialAction
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class StashMapRadialAction: public RadialAction
{
public:
	Class RadialContextBase*                                     Context;                                           // 0x30(0x8)
	char                                                         pad0x8_72QIZ[0x8];                                 // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AlwaysRadialContext: public RadialContextBase
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FeatureEnabledRadialContext: public RadialContextBase
{
public:
	struct FName                                                 FeatureName;                                       // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MultipleContextsRadialContext: public RadialContextBase
{
public:
	TArray<class RadialContextBase*>                             RadialContexts;                                    // 0x28(0x10)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class RadialCreationRuleAsset: public DataAsset
{
public:
	Struct RadialInstance                                        Ruleset;                                           // 0x28(0x78)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialInventorySelectionXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class RadialInventorySelectionYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialInventorySelectorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialManagerInputReceiverInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialManagerInterface: public Interface
{
public:
};


// Size 0x220 (Full Size[0x2e8] - InheritedSize[0xc8]
class RadialManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x180_5H93X[0x180];                             // 0xc8(0x180)
	TArray<struct RadialMappings>                                RadialMappings;                                    // 0x248(0x10)
	Class RadialSettingsAsset*                                   RadialSettings;                                    // 0x258(0x8)
	class                                                        CurrentClosingId;                                  // 0x260(0x8)
	Class Object*                                                DockedObject;                                      // 0x268(0x8)
	Class AthenaInputSettings*                                   CachedInputSettings;                               // 0x270(0x8)
	char                                                         pad0x68_TK2SR[0x68];                               // 0x278(0x68)
	class                                                        LastInputId;                                       // 0x2e0(0x8)
};


// Size 0x10 (Full Size[0x160] - InheritedSize[0x150]
class RadialManagerInputComponent: public InputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialMiniIconInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class RadialSettingsAsset: public DataAsset
{
public:
	TArray<struct BaseRadialCreationRules>                       BaseRadialCreationRules;                           // 0x28(0x10)
	TArray<class Class*>                                         BlockingAnalogInputs;                              // 0x38(0x10)
	float                                                        MinRadialSectorUnselectableFraction;               // 0x48(0x4)
	float                                                        MaxRadialSectorUnselectableFraction;               // 0x4c(0x4)
	float                                                        MinSelectionMagnitude;                             // 0x50(0x4)
	float                                                        SelectionTimeout;                                  // 0x54(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialStashMapInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RadialVisibilityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AttachedToObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class AttachedToObjectInputComponent: public LookAtOffsetInputComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DisengageNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class DockableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7R7Z8[0x8];                                 // 0xc8(0x8)
	bool                                                         CanFocusOnOtherInteractablesWhileDocked;           // 0xd0(0x1)
	char                                                         pad0x7_NTNOL[0x7];                                 // 0xd1(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockerBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockerInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x170] - InheritedSize[0xc8]
class DockerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_RMUHX[0x8];                                 // 0xc8(0x8)
	class                                                        DockingPolicyDefinition;                           // 0xd0(0x8)
	char                                                         pad0x98_6OOSH[0x98];                               // 0xd8(0x98)
};


// Size 0x8 (Full Size[0x2a0] - InheritedSize[0x298]
class DockToObjectDisengageInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class InteractOrDisengageReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActionRulesProviderInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class ActionRulesComponent: public ActorComponent
{
public:
	char                                                         pad0x8_GVSDG[0x8];                                 // 0xc8(0x8)
	double                                                       InteractionTimeThreshold;                          // 0xd0(0x8)
	char                                                         pad0x28_C3I4G[0x28];                               // 0xd8(0x28)
};


// Size 0x8 (Full Size[0x130] - InheritedSize[0x128]
class ActionRulesInteractableComponent: public InteractableComponent
{
public:
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x128(0x8)
};


// Size 0x158 (Full Size[0x280] - InheritedSize[0x128]
class ActionSequenceInteractableComponent: public InteractableComponent
{
public:
	char                                                         pad0x8_PX1JU[0x8];                                 // 0x128(0x8)
	Struct ActionSequenceInteractableParams                      InteractionParams;                                 // 0x130(0x28)
	Struct ActionSequenceInteractableAudioParams                 InteractionAudioParams;                            // 0x158(0x30)
	int                                                          InteractCount;                                     // 0x1d8(0x4)
	bool                                                         ShouldBeInteractable;                              // 0x1dc(0x1)
	char                                                         pad0xa3_GZT7B[0xa3];                               // 0x1dd(0xa3)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BaseTooltipDescriptorId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TooltipDescriptorId: public BaseTooltipDescriptorId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CameraViewRestrictableInteractorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CompositeQuickSwitchWeaponSecondaryInteractReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OneShotInteractableInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x140] - InheritedSize[0x128]
class InteractableComponentWithActionRules: public InteractableComponent
{
public:
};


// Size 0xa0 (Full Size[0x338] - InheritedSize[0x298]
class InteractionInputComponent: public AthenaCharacterBaseInputComponent
{
public:
	Struct InteractionInputComponentTickFunction                 InteractionComponentTickFunction;                  // 0x298(0x50)
	char                                                         pad0x50_TU30P[0x50];                               // 0x2e8(0x50)
};


// Size 0x20 (Full Size[0x358] - InheritedSize[0x338]
class RestrictedInteractionInputComponent: public InteractionInputComponent
{
public:
	TArray<class Class*>                                         AllowedInteractableTypes;                          // 0x338(0x10)
	TArray<class Class*>                                         AllowedInteractionNotificationInputIds;            // 0x348(0x10)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class InteractionPrerequisiteBase: public Object
{
public:
	bool                                                         Invert;                                            // 0x28(0x1)
	char                                                         pad0x7_A6L7Q[0x7];                                 // 0x29(0x7)
	Struct FText                                                 CantInteractTooltip;                               // 0x30(0x38)
	char                                                         pad0x18_7ES1A[0x18];                               // 0x68(0x18)
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class HasEntitlementPrerequisite: public InteractionPrerequisiteBase
{
public:
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class IsCompanyRankPrerequisite: public InteractionPrerequisiteBase
{
public:
	class                                                        Company;                                           // 0x80(0x8)
	int                                                          Rank;                                              // 0x88(0x4)
	char                                                         pad0x4_WGRWT[0x4];                                 // 0x8c(0x4)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class IsFeatureFlagSetPrerequisite: public InteractionPrerequisiteBase
{
public:
	Struct FeatureFlag                                           FeatureToggle;                                     // 0x80(0xc)
	char                                                         pad0x4_L099E[0x4];                                 // 0x8c(0x4)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class IsPirateLegendPrerequisite: public InteractionPrerequisiteBase
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InteractionSettings: public Object
{
public:
	float                                                        MaximumInteractionAngleClient;                     // 0x28(0x4)
	float                                                        MaximumInteractionAngleServer;                     // 0x2c(0x4)
	float                                                        MaximumInteractionDistance;                        // 0x30(0x4)
	float                                                        MaxInteractorsPlayerDistanceDelta;                 // 0x34(0x4)
	float                                                        MaxInteractorsCenterDistanceDelta;                 // 0x38(0x4)
	char                                                         pad0x4_4R3KW[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterHeightInterestInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterHeightInterestServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class WaterHeightInterestService: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterHeightProviderInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0x140] - InheritedSize[0xc8]
class WaterHeightProviderComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x140] - InheritedSize[0x140]
class WaterHeightProviderServerOnlyComponent: public WaterHeightProviderComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimSensitivityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerInputInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldedItemSpeedModifierInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class AnimNotifyWwiseEmitterRetrievalComponent: public ActorComponent
{
public:
	char                                                         pad0x8_FSYYC[0x8];                                 // 0xc8(0x8)
	Class AnimNotifyWwiseEmitterComponent*                       CachedComponent;                                   // 0xd0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AuxiliarySlotsInventoryEnablerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDropRedirectorInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class CircularItemDropRedirectorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_Y2734[0x8];                                 // 0xc8(0x8)
	Struct Vector                                                CenterPoint;                                       // 0xd0(0xc)
	float                                                        Radius;                                            // 0xdc(0x4)
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class ConditionalStatTriggerArea: public Actor
{
public:
	Class BoxComponent*                                          AreaBoxComponent;                                  // 0x3c8(0x8)
	Struct PlayerStat                                            StatToAward;                                       // 0x3d0(0x4)
	int                                                          NumberOfPlayersRequired;                           // 0x3d4(0x4)
	TArray<class Class*>                                         EntitlementsToCheckFor;                            // 0x3d8(0x10)
	TArray<class Class*>                                         WieldableItemsToCheckFor;                          // 0x3e8(0x10)
	class                                                        RequiredInputId;                                   // 0x3f8(0x8)
	char                                                         pad0x10_TGJR6[0x10];                               // 0x400(0x10)
	TArray<class Controller*>                                    PlayersMeetingCriteria;                            // 0x410(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConsumableInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class ConsumableWieldableComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DestroyableUsableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPlacedOnActorReceiverInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x428] - InheritedSize[0x3c8]
class DestroyItemWhenPlacedOnActor: public Actor
{
public:
	char                                                         pad0x8_QBLH0[0x8];                                 // 0x3c8(0x8)
	float                                                        TimeUntilItemDestroyed;                            // 0x3d0(0x4)
	char                                                         pad0x54_NPAVC[0x54];                               // 0x3d4(0x54)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class DetachItemsWhenDestroyedComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ForceFeedbackCondition_LocalPlayerUsingWieldable: public ForceFeedbackCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HandOverableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HoldToUseInputVisualModifier: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class HoldToUseInputVisualModifier_RandomiseAlternate: public HoldToUseInputVisualModifier
{
public:
	float                                                        ChanceForAlternate;                                // 0x28(0x4)
	char                                                         pad0x4_RC1TH[0x4];                                 // 0x2c(0x4)
};


// Size 0x118 (Full Size[0x4e0] - InheritedSize[0x3c8]
class InterpolatingItem: public Actor
{
public:
	Class StaticMeshMemoryConstraintComponent*                   FirstPersonMesh;                                   // 0x3c8(0x8)
	Class StaticMeshMemoryConstraintComponent*                   ThirdPersonMesh;                                   // 0x3d0(0x8)
	Class SceneComponent*                                        FromParent1P;                                      // 0x3d8(0x8)
	char                                                         pad0x8_Q8VNJ[0x8];                                 // 0x3e0(0x8)
	Class SceneComponent*                                        FromParent3P;                                      // 0x3e8(0x8)
	char                                                         pad0x70_1NUH0[0x70];                               // 0x3f0(0x70)
	Class SceneComponent*                                        ToParent;                                          // 0x460(0x8)
	char                                                         pad0x78_RCAB0[0x78];                               // 0x468(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InventoryItemInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class InventoryItemComponent: public ActorComponent
{
public:
	char                                                         pad0x8_4BG09[0x8];                                 // 0xc8(0x8)
	byte                                                         Type;                                              // 0xd0(0x1)
	char                                                         pad0x7_9ZD3G[0x7];                                 // 0xd1(0x7)
	Struct StringAssetReference                                  Icon;                                              // 0xd8(0x10)
	Struct StringAssetReference                                  BackgroundImage;                                   // 0xe8(0x10)
	Struct FString                                               IconUrl;                                           // 0xf8(0x10)
	float                                                        IconRotation;                                      // 0x108(0x4)
	float                                                        IconScale;                                         // 0x10c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InventoryManipulatorInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsItemOfClassStatCondition: public TargetedStatCondition
{
public:
	class                                                        ItemType;                                          // 0x30(0x8)
	bool                                                         ExactMatch;                                        // 0x38(0x1)
	char                                                         pad0x7_MJXUD[0x7];                                 // 0x39(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class IsWieldingItemFilterDesc: public OneShotInteractableFilterDesc
{
public:
	TArray<Assetclass AllowedItems>                              AllowedItems;                                      // 0x28(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingItemStatCondition: public TargetedStatCondition
{
public:
	TArray<class Class*>                                         TargetItems;                                       // 0x30(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RadialBlurItemActionEffect: public ItemActionEffect
{
public:
	Class MaterialInterface*                                     MaterialInstance;                                  // 0x28(0x8)
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class InvalidItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDropFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDroppedInDeepWaterOverrideInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemDropperInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemEquipInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemFactoryFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x518] - InheritedSize[0x510]
class ProjectileItemInfo: public ItemInfo
{
public:
	Class LoadableProjectileComponent*                           LoadableProjectileComponent;                       // 0x510(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemKeepAliveSourceServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemPickupBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemProxyLifetimeParentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemRarityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReplenishableItemsInterface: public Interface
{
public:
};


// Size 0xe8 (Full Size[0x4b0] - InheritedSize[0x3c8]
class ItemReplenisher: public Actor
{
public:
	char                                                         pad0x8_XXQFV[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	Class InteractableComponentWithActionRules*                  InteractableWithActionRulesComponent;              // 0x3d8(0x8)
	Struct Transform                                             ItemSpawnTransform;                                // 0x3e0(0x30)
	class                                                        ItemToSpawn;                                       // 0x410(0x8)
	bool                                                         ShouldItemBeSpawnedOnStart;                        // 0x418(0x1)
	bool                                                         WieldItemWhenSpawned;                              // 0x419(0x1)
	char                                                         pad0x6_HSFKQ[0x6];                                 // 0x41a(0x6)
	Struct ItemReplenisherInteractionParams                      InteractionParams;                                 // 0x420(0x78)
	bool                                                         CanInteractOnStart;                                // 0x498(0x1)
	bool                                                         CanInteract;                                       // 0x499(0x1)
	char                                                         pad0x2_HKJNU[0x2];                                 // 0x49a(0x2)
	int                                                          CurrentNumberOfItemsSpawned;                       // 0x49c(0x4)
	char                                                         pad0x10_XAMGL[0x10];                               // 0x4a0(0x10)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class ItemReplenisherComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemRepresentationInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0xe0] - InheritedSize[0x38]
class ItemSettings: public DeveloperSettings
{
public:
	Struct DropItemParams                                        DropItemParams;                                    // 0x38(0x48)
	Struct DropItemParams                                        AIPriorityDropItemParams;                          // 0x80(0x48)
	byte                                                         AutoAimCollisionChannel;                           // 0xc8(0x1)
	char                                                         pad0x7_4A133[0x7];                                 // 0xc9(0x7)
	TArray<class Class*>                                         ItemClassesToBeNamedByCategory;                    // 0xd0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemUserInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OneShotUsable: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OwnedByItemSpawnerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickerUpperInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickupableInterface: public Interface
{
public:
};


// Size 0xf0 (Full Size[0x1b8] - InheritedSize[0xc8]
class PickupableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_0X75K[0x8];                                 // 0xc8(0x8)
	float                                                        PickupTime;                                        // 0xd0(0x4)
	char                                                         pad0x4_6WHW9[0x4];                                 // 0xd4(0x4)
	Struct FText                                                 PickupActionDisplayString;                         // 0xd8(0x38)
	Struct FText                                                 PickupActionDisplayStringWhenFull;                 // 0x110(0x38)
	class                                                        StartPickupInputId;                                // 0x148(0x8)
	char                                                         pad0x68_QSD6Y[0x68];                               // 0x150(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProxyItemInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x668] - InheritedSize[0x640]
class ItemInteractionProxy: public ItemProxy
{
public:
	class                                                        AcquiredItemDesc;                                  // 0x640(0x8)
	bool                                                         HidePromptIfInventoryIsFull;                       // 0x648(0x1)
	char                                                         pad0x1f_7C8CB[0x1f];                               // 0x649(0x1f)
};


// Size 0x0 (Full Size[0x640] - InheritedSize[0x640]
class SkeletalMeshItemProxy: public ItemProxy
{
public:
};


// Size 0x0 (Full Size[0x640] - InheritedSize[0x640]
class StaticMeshItemProxy: public ItemProxy
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickupableTooltipCustomizerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PickupObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class PickUpObjectConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class QuickInventoryClientInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xa50] - InheritedSize[0xa50]
class SkeletalStashedMeshMemoryConstraintComponent: public SkeletalMeshMemoryConstraintComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionProxyItemInfoTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatConditionWieldedItemInfoTargetSelector: public StatConditionTargetSelector
{
public:
};


// Size 0x0 (Full Size[0x6b0] - InheritedSize[0x6b0]
class StaticStashedMeshMemoryConstraintComponent: public StaticMeshMemoryConstraintComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UsableInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class UsableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_VUVIF[0x8];                                 // 0xc8(0x8)
	Struct WieldableItemActionVisuals                            ActionVisuals;                                     // 0xd0(0x18)
	TArray<struct ActionVisualOverrides>                         ActionVisualOverrides;                             // 0xe8(0x10)
	char                                                         pad0x8_BJ2DT[0x8];                                 // 0xf8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UsableItemsActionRulesBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class UsableWieldableComponent: public ActorComponent
{
public:
	char                                                         pad0x10_5MQI5[0x10];                               // 0xc8(0x10)
	TArray<struct OneShotInputNotifications>                     OneShotInputNotifications;                         // 0xd8(0x10)
	TArray<struct ContinuousUseNotification>                     ContinuousUseNotification;                         // 0xe8(0x10)
	bool                                                         PreventOverlappingContinuousUses;                  // 0xf8(0x1)
	char                                                         pad0x7_YZV96[0x7];                                 // 0xf9(0x7)
	TArray<class Class*>                                         NotificationIdsToIgnore;                           // 0x100(0x10)
	TArray<class Class*>                                         CurrentlyActiveNotifications;                      // 0x110(0x10)
	char                                                         pad0x8_WN4BL[0x8];                                 // 0x120(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UseItemActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0x138] - InheritedSize[0x130]
class WieldableInteractableComponent: public ActionRulesInteractableComponent
{
public:
	Class WieldableItem*                                         WieldableItem;                                     // 0x130(0x8)
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class PoseableMeshWieldableItem: public WieldableItem
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemAnimationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemAnimationStoreId: public AnimationDataStoreId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UnarmedCombatWieldableItemAnimationStoreId: public WieldableItemAnimationStoreId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemPersistentCooldownInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x138] - InheritedSize[0xc8]
class WieldableItemPersistentCooldownComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemSetInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class WieldableItemVfxComponent: public ActorComponent
{
public:
	Class ParticleSystemComponent*                               ActiveVfx;                                         // 0xc8(0x8)
	Class Object*                                                WieldedVfxTemplate;                                // 0xd0(0x8)
	char                                                         pad0x58_H9SD3[0x58];                               // 0xd8(0x58)
};


// Size 0x0 (Full Size[0x520] - InheritedSize[0x520]
class SkeletalMeshWieldableReplica: public WieldableReplica
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableStashPointInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldedItemInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WieldedItemSizeOneShotInteractableFilterDesc: public OneShotInteractableFilterDesc
{
public:
	TArray<Byte WieldableItemSizesToDisableInteraction>          WieldableItemSizesToDisableInteraction;            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WielderAnimationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WielderWwiseEmitterInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class WieldingParamsAsset: public DataAsset
{
public:
	float                                                        WieldDuration;                                     // 0x28(0x4)
	char                                                         pad0x4_YHCTS[0x4];                                 // 0x2c(0x4)
	TArray<class Class*>                                         InvalidMidWieldInputs;                             // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RainExposureInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RainStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RainZoneInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x300] - InheritedSize[0x2e0]
class RainZoneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_T080A[0x8];                                 // 0x2e0(0x8)
	Struct RainZoneParameters                                    RainZoneParameters;                                // 0x2e8(0xc)
	char                                                         pad0xc_BKNKW[0xc];                                 // 0x2f4(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RainZoneServiceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class RainZoneService: public Object
{
public:
	char                                                         pad0x8_H69ZW[0x8];                                 // 0x28(0x8)
	TArray<Interface RegisteredRainZones>                        RegisteredRainZones;                               // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShelteredInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class ShelteredComponent: public ActorComponent
{
public:
	char                                                         pad0x8_JS9UG[0x8];                                 // 0xc8(0x8)
	struct FName                                                 FeatureFlag;                                       // 0xd0(0x8)
	byte                                                         ShelterUpdateOption;                               // 0xd8(0x1)
	char                                                         pad0x3_DBBX2[0x3];                                 // 0xd9(0x3)
	float                                                        RaycastSpreadInCentimetres;                        // 0xdc(0x4)
	float                                                        RaycastHeightOffsetHeightInCentimetres;            // 0xe0(0x4)
	byte                                                         RaycastHitTestTraceChannel;                        // 0xe4(0x1)
	char                                                         pad0x3_WOYNZ[0x3];                                 // 0xe5(0x3)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseRain: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorInWaterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeepSeaHelpers: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class DeepSeaSettings: public DeveloperSettings
{
public:
	float                                                        DeepSeaStartDepth;                                 // 0x38(0x4)
	float                                                        DepthToRemoveSurfaceNetCluster;                    // 0x3c(0x4)
};


// Size 0xd0 (Full Size[0xf8] - InheritedSize[0x28]
class DrowningComponentParams: public DataAsset
{
public:
	Struct BlendableDrowningParams                               DrowningParameters;                                // 0x28(0x28)
	Class WwiseObjectPoolWrapper*                                DrowningEmitterPool;                               // 0x50(0x8)
	Class WwiseEvent*                                            StartDrowningSfx;                                  // 0x58(0x8)
	Class WwiseEvent*                                            StopDrowningSfx;                                   // 0x60(0x8)
	Class WwiseEvent*                                            StartDrowningSfxRemotePlayer;                      // 0x68(0x8)
	Class WwiseEvent*                                            StopDrowningSfxRemotePlayer;                       // 0x70(0x8)
	Class WwiseEvent*                                            SurfaceBreathSfxSoft;                              // 0x78(0x8)
	Class WwiseEvent*                                            SurfaceBreathSfxMed;                               // 0x80(0x8)
	Class WwiseEvent*                                            SurfaceBreathSfxHard;                              // 0x88(0x8)
	Class WwiseEvent*                                            BubblesSfx;                                        // 0x90(0x8)
	struct FName                                                 PlayerDrowningAmountRtpc;                          // 0x98(0x8)
	struct FName                                                 RemotePlayerDrowningAmountRtpc;                    // 0xa0(0x8)
	Class Object*                                                BubblesFirstPerson;                                // 0xa8(0x8)
	Class Object*                                                BubblesThirdPerson;                                // 0xb0(0x8)
	struct FName                                                 BubblesAmountRtpc;                                 // 0xb8(0x8)
	struct FName                                                 BubblesFirstPersonSocket;                          // 0xc0(0x8)
	struct FName                                                 BubblesThirdPersonSocket;                          // 0xc8(0x8)
	struct FName                                                 BubblesRateParam;                                  // 0xd0(0x8)
	struct FName                                                 BubblesLargeRateParam;                             // 0xd8(0x8)
	Class CurveFloat*                                            BubbleRateTimeCurve;                               // 0xe0(0x8)
	Struct Vector2D                                              BubbleIntervalForOxygenLevel;                      // 0xe8(0x8)
	float                                                        LargeBubbleStartTime;                              // 0xf0(0x4)
	char                                                         pad0x4_17DRA[0x4];                                 // 0xf4(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipInternalWaterInterface: public Interface
{
public:
};


// Size 0x258 (Full Size[0x620] - InheritedSize[0x3c8]
class ShipInternalWater: public Actor
{
public:
	char                                                         pad0x18_TXCY5[0x18];                               // 0x3c8(0x18)
	Struct ShipInternalWaterParams                               InternalWaterParams;                               // 0x3e0(0x38)
	float                                                        CurrentVisualWaterLevel;                           // 0x418(0x4)
	float                                                        WaterAmount;                                       // 0x41c(0x4)
	float                                                        SuperheatedWaterScaleSpeed;                        // 0x420(0x4)
	Struct Vector                                                OcclusionCylinderPosition;                         // 0x424(0xc)
	float                                                        OcclusionCylinderHeight;                           // 0x430(0x4)
	char                                                         pad0xa4_0103K[0xa4];                               // 0x434(0xa4)
	float                                                        ServerWaterAmount;                                 // 0x4d8(0x4)
	bool                                                         IsInSuperheatedWater;                              // 0x4dc(0x1)
	bool                                                         IsInSuperheatedWaterViaHeating;                    // 0x4dd(0x1)
	char                                                         pad0x2_60XQC[0x2];                                 // 0x4de(0x2)
	Class SceneComponent*                                        SceneRootComponent;                                // 0x4e0(0x8)
	Class StaticMeshComponent*                                   WaterPlaneActivationVolume;                        // 0x4e8(0x8)
	Class StaticMeshComponent*                                   WaterOcclusionVolume;                              // 0x4f0(0x8)
	Class FlatWaterMeshComponent*                                WaterMeshComponent;                                // 0x4f8(0x8)
	Class FlatWaterPlaneComponent*                               WaterPlaneComponent;                               // 0x500(0x8)
	int                                                          WaterOcclusionVolumeShrinkMaterialId;              // 0x508(0x4)
	struct FName                                                 WaterOcclusionVolumeShrinkPropertyName;            // 0x50c(0x8)
	char                                                         pad0x4_PPAO3[0x4];                                 // 0x514(0x4)
	Class CurveFloat*                                            WaterOcclusionZoneReductionCurve;                  // 0x518(0x8)
	float                                                        RippleSizeMin;                                     // 0x520(0x4)
	float                                                        RippleSizeMax;                                     // 0x524(0x4)
	float                                                        RippleHeight;                                      // 0x528(0x4)
	float                                                        SuperheatedWaterCoolingRatePerSecond;              // 0x52c(0x4)
	float                                                        TimeToIgnoreCoolingDueToSuperheating;              // 0x530(0x4)
	char                                                         pad0x4_HI3O1[0x4];                                 // 0x534(0x4)
	Struct Status                                                SuperheatedWaterStatusToApply;                     // 0x538(0x18)
	char                                                         pad0x28_A85DK[0x28];                               // 0x550(0x28)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x578(0x10)
	char                                                         pad0x98_MXXPJ[0x98];                               // 0x588(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipInternalWaterContainerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SoakableInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class SoakableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_Z5H31[0x8];                                 // 0xc8(0x8)
	float                                                        LingeringSoakedDuration;                           // 0xd0(0x4)
	char                                                         pad0x4_KB8HZ[0x4];                                 // 0xd4(0x4)
	Struct Status                                                SoakedStatus;                                      // 0xd8(0x18)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SoakedStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SplashedStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseSoak: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterBarrelInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class WaterExposureComponent: public ActorComponent
{
public:
	float                                                        RainZoneThreshold;                                 // 0xc8(0x4)
	Struct Vector                                                FullySubmergedOffset;                              // 0xcc(0xc)
	Struct Vector                                                PartiallySubmergedOffset;                          // 0xd8(0xc)
	char                                                         pad0x4_OJBIO[0x4];                                 // 0xe4(0x4)
	Struct Status                                                SubmergedStatus;                                   // 0xe8(0x18)
	Struct Status                                                RainStatus;                                        // 0x100(0x18)
	struct FName                                                 FeatureFlag;                                       // 0x118(0x8)
	bool                                                         InRain;                                            // 0x120(0x1)
	byte                                                         SubmergedState;                                    // 0x121(0x1)
	char                                                         pad0x6_PIYJD[0x6];                                 // 0x122(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterModifierZoneServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class WaterStatus: public StatusBase
{
public:
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class WaterVolume: public Actor
{
public:
	float                                                        MaxAmount;                                         // 0x3c8(0x4)
	bool                                                         EnableRipplesFromOverlappingActors;                // 0x3cc(0x1)
	char                                                         pad0x3_PNUHY[0x3];                                 // 0x3cd(0x3)
	TArray<struct RippleLocations>                               RippleLocations;                                   // 0x3d0(0x10)
	TArray<struct RippleGenerators>                              RippleGenerators;                                  // 0x3e0(0x10)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x3f0(0x10)
	float                                                        RippleFrequency;                                   // 0x400(0x4)
	float                                                        CurrentAmount;                                     // 0x404(0x4)
	float                                                        TargetAmount;                                      // 0x408(0x4)
	float                                                        LerpRate;                                          // 0x40c(0x4)
	char                                                         pad0x38_61KU8[0x38];                               // 0x410(0x38)
};


// Size 0x0 (Full Size[0x448] - InheritedSize[0x448]
class VariableFillRateWaterVolume: public WaterVolume
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapstanArmInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CapstanInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DoubleIntentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IntentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClamberableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClamberActionStateId: public ActionStateId
{
public:
};


// Size 0x1f0 (Full Size[0x5f0] - InheritedSize[0x400]
class ClamberSpot: public InteractableBase
{
public:
	char                                                         pad0x20_81MTF[0x20];                               // 0x400(0x20)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x420(0x8)
	Class SplineComponent*                                       ClamberSplineComponent;                            // 0x428(0x8)
	Struct LadderBlendParams                                     ClamberBlendParams;                                // 0x430(0xc)
	char                                                         pad0x4_B4ZIA[0x4];                                 // 0x43c(0x4)
	Struct FText                                                 InteractionVerb;                                   // 0x440(0x38)
	Struct FText                                                 InteractionDisplayName;                            // 0x478(0x38)
	Struct Vector                                                InteractionOffset;                                 // 0x4b0(0xc)
	char                                                         pad0x4_HQPUI[0x4];                                 // 0x4bc(0x4)
	Class WwiseEvent*                                            OnClamberSfx;                                      // 0x4c0(0x8)
	Class WwiseObjectPoolWrapper*                                ClamberSpotPool;                                   // 0x4c8(0x8)
	char                                                         pad0x120_ZKZ0Y[0x120];                             // 0x4d0(0x120)
};


// Size 0x18 (Full Size[0x1a0] - InheritedSize[0x188]
class ClimbingComponent: public IntentComponent
{
public:
	Struct Vector                                                UseLadderOffset;                                   // 0x188(0xc)
	float                                                        ServerHeight;                                      // 0x194(0x4)
	byte                                                         ServerClimbId;                                     // 0x198(0x1)
	char                                                         pad0x7_BG2Z7[0x7];                                 // 0x199(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllableMessagesInterface: public ObjectMessagingInterface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllablePulleyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControllerInterface: public Interface
{
public:
};


// Size 0xb0 (Full Size[0x5c0] - InheritedSize[0x510]
class DockableBase: public ControllableObject
{
public:
	Class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0x510(0x8)
	float                                                        DetachCutOffTime;                                  // 0x518(0x4)
	bool                                                         ShouldInteractorDock;                              // 0x51c(0x1)
	char                                                         pad0x3_CE4K0[0x3];                                 // 0x51d(0x3)
	Class LevelSequence*                                         FirstPersonLevelSequenceToPlay;                    // 0x520(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x528(0x8)
	Struct FText                                                 DockableCutsceneName;                              // 0x530(0x38)
	Struct FText                                                 InteractWithCutsceneText;                          // 0x568(0x38)
	struct FName                                                 DockingSocketName;                                 // 0x5a0(0x8)
	char                                                         pad0x18_MEFOK[0x18];                               // 0x5a8(0x18)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class ControllablesResponseHandlerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ControlObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableBaseActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TakeControlActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountableType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountpointInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x158] - InheritedSize[0xc8]
class MountableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_48LI6[0x8];                                 // 0xc8(0x8)
	class                                                        MountableType;                                     // 0xd0(0x8)
	TArray<struct MountableTypeStats>                            MountableTypeStats;                                // 0xd8(0x10)
	bool                                                         ActorCanServerMigrate;                             // 0xe8(0x1)
	char                                                         pad0x7_ZIZ9X[0x7];                                 // 0xe9(0x7)
	Struct FText                                                 Description;                                       // 0xf0(0x38)
	TArray<struct PreviousMountInstigators>                      PreviousMountInstigators;                          // 0x128(0x10)
	char                                                         pad0x18_WOT2F[0x18];                               // 0x138(0x18)
	Class Object*                                                ReplicatedMountpoint;                              // 0x150(0x8)
};


// Size 0x70 (Full Size[0x350] - InheritedSize[0x2e0]
class MountableSceneComponent: public SceneComponent
{
public:
	char                                                         pad0x8_KJ010[0x8];                                 // 0x2e0(0x8)
	class                                                        MountableType;                                     // 0x2e8(0x8)
	TArray<struct MountableTypeCrewStats>                        MountableTypeCrewStats;                            // 0x2f0(0x10)
	Struct FText                                                 Description;                                       // 0x300(0x38)
	char                                                         pad0x18_DER33[0x18];                               // 0x338(0x18)
};


// Size 0x70 (Full Size[0x350] - InheritedSize[0x2e0]
class MountpointComponent: public SceneComponent
{
public:
	char                                                         pad0x8_2X6JU[0x8];                                 // 0x2e0(0x8)
	TArray<class Class*>                                         AcceptedMountableTypes;                            // 0x2e8(0x10)
	Struct Rotator                                               DetachForwardDirectionRotator;                     // 0x2f8(0xc)
	float                                                        DetachOffset;                                      // 0x304(0x4)
	bool                                                         UseOverrideMountedCollisionProfile;                // 0x308(0x1)
	char                                                         pad0x3_OAH9M[0x3];                                 // 0x309(0x3)
	Struct CollisionProfileName                                  OverrideMountedCollisionProfileName;               // 0x30c(0x8)
	char                                                         pad0x14_4NX7W[0x14];                               // 0x314(0x14)
	Class Object*                                                ReplicatedMountedItem;                             // 0x328(0x8)
	char                                                         pad0x10_TJ5YA[0x10];                               // 0x330(0x10)
	bool                                                         IsMountingDisabled;                                // 0x340(0x1)
	bool                                                         MountedItemHadSimulatePhysicsEnabled;              // 0x341(0x1)
	char                                                         pad0x2_HAIDL[0x2];                                 // 0x342(0x2)
	struct FName                                                 MountedItemPremountCollisionProfileName;           // 0x344(0x8)
	char                                                         pad0x4_SNXB1[0x4];                                 // 0x34c(0x4)
};


// Size 0x80 (Full Size[0x3d0] - InheritedSize[0x350]
class InterpolatingMountpointComponent: public MountpointComponent
{
public:
	float                                                        InterpolateSpeed;                                  // 0x350(0x4)
	float                                                        MaximumDistance;                                   // 0x354(0x4)
	Struct Vector                                                RelativeSnapLocation;                              // 0x358(0xc)
	float                                                        RelativeYawToUseExtraTransform;                    // 0x364(0x4)
	float                                                        RelativeYawRangeToUseExtraTransform;               // 0x368(0x4)
	Struct Vector                                                ExtraTranslation;                                  // 0x36c(0xc)
	Struct Rotator                                               ExtraRotation;                                     // 0x378(0xc)
	bool                                                         UseExtraTransform;                                 // 0x384(0x1)
	char                                                         pad0x4b_T9FPW[0x4b];                               // 0x385(0x4b)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MountpointParamsDataAsset: public DataAsset
{
public:
	TArray<struct MountpointParams>                              MountpointParams;                                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountpointViewInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TrinketMapDataAsset: public DataAsset
{
public:
	TArray<struct TrinketAndMountPairs>                          TrinketAndMountPairs;                              // 0x28(0x10)
};


// Size 0x290 (Full Size[0x570] - InheritedSize[0x2e0]
class TrinketMountpointManagerComponent: public SceneComponent
{
public:
	char                                                         pad0x18_GS3S8[0x18];                               // 0x2e0(0x18)
	Class MountpointParamsDataAsset*                             MountpointParamsDataAsset;                         // 0x2f8(0x8)
	TArray<struct ReplicatedMountpointData>                      ReplicatedMountpointData;                          // 0x300(0x10)
	TArray<Bool IsNudged>                                        IsNudged;                                          // 0x310(0x10)
	int                                                          MountedItemCount;                                  // 0x340(0x4)
	char                                                         pad0x4_C3HVM[0x4];                                 // 0x344(0x4)
	Class WwiseObjectPoolWrapper*                                TrinketSfxPool;                                    // 0x348(0x8)
	bool                                                         TrinketsEnabled;                                   // 0x350(0x1)
	bool                                                         TrinketsShouldBeDisplayed;                         // 0x351(0x1)
	char                                                         pad0x2_2HCMU[0x2];                                 // 0x352(0x2)
	struct FName                                                 Feature;                                           // 0x354(0x8)
	char                                                         pad0x4_LZQQY[0x4];                                 // 0x35c(0x4)
	Struct MountTrinketActionRuleParams                          MountTrinketActionRuleParams;                      // 0x360(0x88)
	Struct StraightenNudgedTrinketActionRuleParams               StraightenNudgedTrinketActionRuleParams;           // 0x3e8(0x40)
	TArray<class Class*>                                         TrinketCategoriesToDisplayInUI;                    // 0x428(0x10)
	TArray<class Class*>                                         ComponentsAllowedForTrinketVisuals;                // 0x438(0x10)
	TArray<class NudgePolicy*>                                   NudgePolicies;                                     // 0x448(0x10)
	Class TrinketLoadoutFinderPolicyBase*                        TrinketLoadoutFinderPolicy;                        // 0x458(0x8)
	TArray<Bool CachedCanTrinketEverBeNudged>                    CachedCanTrinketEverBeNudged;                      // 0x460(0x10)
	TArray<struct MountpointClientStates>                        MountpointClientStates;                            // 0x470(0x10)
	TArray<struct NudgingTrinketProgress>                        NudgingTrinketProgress;                            // 0x480(0x10)
	char                                                         pad0xc0_VYY8U[0xc0];                               // 0x490(0xc0)
	TArray<class StaticMeshComponent*>                           TrinketReplacementMeshes;                          // 0x550(0x10)
	char                                                         pad0x10_KFX6H[0x10];                               // 0x560(0x10)
};


// Size 0x80 (Full Size[0x5f0] - InheritedSize[0x570]
class ShipTrinketMountpointManagerComponent: public TrinketMountpointManagerComponent
{
public:
	char                                                         pad0x8_SLAC5[0x8];                                 // 0x570(0x8)
	Struct MountpointWaterLevelParams                            MountpointWaterLevelParams;                        // 0x578(0xc)
	char                                                         pad0x6c_LTVN5[0x6c];                               // 0x584(0x6c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TrinketMountpointManagerComponentDebugFunctions: public Object
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class TrinketSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  TrinketMapDataAsset;                               // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimingDownSightsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileCooldownServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class ProjectileCooldownService: public Actor
{
public:
	char                                                         pad0x28_6YZIC[0x28];                               // 0x3c8(0x28)
	Class ProjectileCooldownServiceSettings*                     ProjectileCooldownSettings;                        // 0x3f0(0x8)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class ProjectileCooldownServiceSettings: public DeveloperSettings
{
public:
	float                                                        ProjectileCooldownTime;                            // 0x38(0x4)
	char                                                         pad0x4_KFZHK[0x4];                                 // 0x3c(0x4)
	TArray<class Class*>                                         ClassesRequiringValidation;                        // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProjectileTraceHitVolumeProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactMeleeAttackId: public ImpactProjectileId
{
public:
};


// Size 0x218 (Full Size[0x240] - InheritedSize[0x28]
class MeleeAttackDataAsset: public DataAsset
{
public:
	struct FName                                                 AttackName;                                        // 0x28(0x8)
	float                                                        WarmUpDuration;                                    // 0x30(0x4)
	float                                                        StrikeDuration;                                    // 0x34(0x4)
	float                                                        RecoverMissDuration;                               // 0x38(0x4)
	float                                                        RecoverHitDuration;                                // 0x3c(0x4)
	float                                                        LungeMoveStartTime;                                // 0x40(0x4)
	float                                                        LungeMoveDuration;                                 // 0x44(0x4)
	float                                                        LungeMoveMaxSpeed;                                 // 0x48(0x4)
	byte                                                         AttackMoveSpeed;                                   // 0x4c(0x1)
	char                                                         pad0x3_P1WID[0x3];                                 // 0x4d(0x3)
	float                                                        AttackMoveSpeedDeactivationAllowedWindow;          // 0x50(0x4)
	float                                                        ComboTime;                                         // 0x54(0x4)
	bool                                                         DefenderKnockbackEnabled;                          // 0x58(0x1)
	char                                                         pad0x3_B1B6E[0x3];                                 // 0x59(0x3)
	Struct KnockBackInfo                                         DefenderKnockback;                                 // 0x5c(0x50)
	bool                                                         DefenderKnockbackWhenBlockingEnabled;              // 0xac(0x1)
	char                                                         pad0x3_UAW94[0x3];                                 // 0xad(0x3)
	Struct KnockBackInfo                                         DefenderKnockbackWhenBlocking;                     // 0xb0(0x50)
	bool                                                         AttackerKnockbackEnabled;                          // 0x100(0x1)
	char                                                         pad0x3_GFWYK[0x3];                                 // 0x101(0x3)
	Struct KnockBackInfo                                         AttackerKnockback;                                 // 0x104(0x50)
	bool                                                         AttackerKnockbackWhenBlockingEnabled;              // 0x154(0x1)
	char                                                         pad0x3_LPS36[0x3];                                 // 0x155(0x3)
	Struct KnockBackInfo                                         AttackerKnockbackWhenBlocking;                     // 0x158(0x50)
	bool                                                         LockOnEnabled;                                     // 0x1a8(0x1)
	char                                                         pad0x3_XTNDY[0x3];                                 // 0x1a9(0x3)
	Struct AttackTimingWindow                                    UninterruptableWindow;                             // 0x1ac(0x8)
	float                                                        HitStartRange;                                     // 0x1b4(0x4)
	float                                                        HitEndRange;                                       // 0x1b8(0x4)
	float                                                        HitStartAngle;                                     // 0x1bc(0x4)
	float                                                        HitAngleDelta;                                     // 0x1c0(0x4)
	float                                                        HitSphereRadius;                                   // 0x1c4(0x4)
	float                                                        HitTimeOffset;                                     // 0x1c8(0x4)
	float                                                        HitDuration;                                       // 0x1cc(0x4)
	float                                                        AttackDamage;                                      // 0x1d0(0x4)
	char                                                         pad0x4_10X8W[0x4];                                 // 0x1d4(0x4)
	class                                                        DamagerType;                                       // 0x1d8(0x8)
	byte                                                         HealthChangeReason;                                // 0x1e0(0x1)
	bool                                                         IsUnblockable;                                     // 0x1e1(0x1)
	bool                                                         StunOnMiss;                                        // 0x1e2(0x1)
	char                                                         pad0x5_6SWVI[0x5];                                 // 0x1e3(0x5)
	TArray<struct StunAttackerOnHitSurfaces>                     StunAttackerOnHitSurfaces;                         // 0x1e8(0x10)
	bool                                                         StunOnHit;                                         // 0x1f8(0x1)
	char                                                         pad0x3_UM24Z[0x3];                                 // 0x1f9(0x3)
	float                                                        StunOnHitDurationPlayer;                           // 0x1fc(0x4)
	float                                                        StunOnHitDurationCharacter;                        // 0x200(0x4)
	byte                                                         AnimationLookupType;                               // 0x204(0x1)
	char                                                         pad0x3_A641W[0x3];                                 // 0x205(0x3)
	byte                                                         AnimationType;                                     // 0x20c(0x1)
	char                                                         pad0x3_H93CC[0x3];                                 // 0x20d(0x3)
	class                                                        ImpactId;                                          // 0x210(0x8)
	class                                                        AttackerHitLandedCameraShake;                      // 0x218(0x8)
	Class ForceFeedbackEffect*                                   AttackerHitLandedForceFeedbackEffect;              // 0x220(0x8)
	class                                                        DefenderHitReceivedCameraShake;                    // 0x228(0x8)
	Class ForceFeedbackEffect*                                   DefenderHitReceivedForceFeedbackEffect;            // 0x230(0x8)
	float                                                        ClampYawRange;                                     // 0x238(0x4)
	float                                                        ClampYawRate;                                      // 0x23c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeAttackProcessorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightingControllerInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x408] - InheritedSize[0x3c8]
class ClientTimeModifier: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
	float                                                        Radius;                                            // 0x3d0(0x4)
	float                                                        FixedTimeOfDay;                                    // 0x3d4(0x4)
	int                                                          FixedDay;                                          // 0x3d8(0x4)
	char                                                         pad0x2c_0XEWL[0x2c];                               // 0x3dc(0x2c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightingZoneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LightingZoneServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class EncounterListenerComponent: public ActorComponent
{
public:
	byte                                                         EncounterListenerType;                             // 0xc8(0x1)
	char                                                         pad0x1f_WKA8W[0x1f];                               // 0xc9(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EncounterListenerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EncounterServiceInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x120] - InheritedSize[0x28]
class EncounterService: public Object
{
public:
	char                                                         pad0x10_IQ6RY[0x10];                               // 0x28(0x10)
	TArray<struct Encounters>                                    Encounters;                                        // 0x38(0x10)
	Struct EncounterListenerData                                 EncounterListenerData;                             // 0x48(0x40)
	Struct EncounterServiceParams                                EncounterParams;                                   // 0x88(0x20)
	char                                                         pad0x78_PA1PI[0x78];                               // 0xa8(0x78)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ItemSpawnData: public Object
{
public:
};


// Size 0x20 (Full Size[0x78] - InheritedSize[0x58]
class ItemDescSpawnData: public ItemSpawnData
{
public:
};


// Size 0x10 (Full Size[0x630] - InheritedSize[0x620]
class ClusterStaticMeshComponent: public StaticMeshComponent
{
public:
	Class ItemDescSpawnData*                                     ItemDescSpawnData;                                 // 0x620(0x8)
	char                                                         pad0x8_T72OT[0x8];                                 // 0x628(0x8)
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class Cluster: public Actor
{
public:
	TArray<class ClusterStaticMeshComponent*>                    ClusterStaticMeshes;                               // 0x3c8(0x10)
	TArray<class StaticMeshComponent*>                           AllComponents;                                     // 0x3d8(0x10)
	bool                                                         DoesContainDecorator;                              // 0x3e8(0x1)
	char                                                         pad0x7_544UA[0x7];                                 // 0x3e9(0x7)
};


// Size 0x10 (Full Size[0x130] - InheritedSize[0x120]
class ClusterDescription: public ItemWithoutIconsDesc
{
public:
	TArray<class Class*>                                         ClusterAssets;                                     // 0x120(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandKeyInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ItemCapGroup: public Object
{
public:
	TArray<Assetclass Items>                                     Items;                                             // 0x28(0x10)
	int                                                          Cap;                                               // 0x38(0x4)
	char                                                         pad0x4_Q6V6L[0x4];                                 // 0x3c(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ItemLifetimeManagerServiceDataAsset: public DataAsset
{
public:
	TArray<class ItemCapGroup*>                                  ItemCapGroup;                                      // 0x28(0x10)
	float                                                        UnvisitedCleanupTimer;                             // 0x38(0x4)
	char                                                         pad0x4_2Q89O[0x4];                                 // 0x3c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLifetimeManagerServiceInterface: public Interface
{
public:
};


// Size 0x190 (Full Size[0x1b8] - InheritedSize[0x28]
class ItemLifetimeManagerService: public Object
{
public:
	char                                                         pad0x58_T3KT8[0x58];                               // 0x28(0x58)
	Class ItemLifetimeManagerServiceDataAsset*                   LifetimeDataAsset;                                 // 0x80(0x8)
	char                                                         pad0x28_P3B1D[0x28];                               // 0x88(0x28)
	Class World*                                                 World;                                             // 0xb0(0x8)
	char                                                         pad0x100_4ONB8[0x100];                             // 0xb8(0x100)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedItemDescSpawnDataAsset: public DataAsset
{
public:
	TArray<struct WeightedItemSpawnDatas>                        WeightedItemSpawnDatas;                            // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedItemDescSpawnDataAssetWithRandomQuantity: public DataAsset
{
public:
	TArray<struct WeightedItemSpawnDatas>                        WeightedItemSpawnDatas;                            // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemSpawnDistributionAsset: public DataAsset
{
public:
	Struct ItemSpawnDistribution                                 SpawnDistribution;                                 // 0x28(0x10)
};


// Size 0x120 (Full Size[0x560] - InheritedSize[0x440]
class FlotsamItemSpawnComponent: public ItemSpawnComponent
{
public:
	char                                                         pad0x108_Q8KDF[0x108];                             // 0x440(0x108)
	TArray<class Object*>                                        PreLoadedClasses;                                  // 0x548(0x10)
	char                                                         pad0x8_H88B1[0x8];                                 // 0x558(0x8)
};


// Size 0x20 (Full Size[0x78] - InheritedSize[0x58]
class ActorSpawnData: public ItemSpawnData
{
public:
};


// Size 0x20 (Full Size[0x78] - InheritedSize[0x58]
class ClusterSpawnData: public ItemSpawnData
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemSpawningBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemSpawnTransformWithRandomQuantityDataAssset: public DataAsset
{
public:
	TArray<struct ItemSpawnData>                                 ItemSpawnData;                                     // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpawnableItemMetadataInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TaleQuestWeightedItemDescSpawnDataAsset: public DataAsset
{
public:
	TArray<struct WeightedItemSpawnDatas>                        WeightedItemSpawnDatas;                            // 0x28(0x10)
	Class ItemSpawnData*                                         QuestObjectSpawnData;                              // 0x38(0x8)
};


// Size 0x40 (Full Size[0x620] - InheritedSize[0x5e0]
class OverlapTriggerComponent: public CapsuleComponent
{
public:
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class OverlapTriggerActor: public Actor
{
public:
	Class CapsuleComponent*                                      SceneComponent;                                    // 0x3c8(0x8)
	Class OverlapTriggerComponent*                               OverlapComponent;                                  // 0x3d0(0x8)
};


// Size 0x120 (Full Size[0x1e8] - InheritedSize[0xc8]
class CompassSpinComponent: public ActorComponent
{
public:
	char                                                         pad0x8_PEHTD[0x8];                                 // 0xc8(0x8)
	bool                                                         EnableAcceleration;                                // 0xd0(0x1)
	char                                                         pad0x3_N8CNM[0x3];                                 // 0xd1(0x3)
	float                                                        MagnetForce;                                       // 0xd4(0x4)
	float                                                        DefaultDampingFactor;                              // 0xd8(0x4)
	struct FName                                                 BoneToRotate;                                      // 0xdc(0x8)
	bool                                                         EnableOneShotSpinning;                             // 0xe4(0x1)
	char                                                         pad0x3_E1YLR[0x3];                                 // 0xe5(0x3)
	float                                                        OneShotSpinDuration;                               // 0xe8(0x4)
	float                                                        OneShotSpinDampingFactor;                          // 0xec(0x4)
	float                                                        OneShotSpinSpeed;                                  // 0xf0(0x4)
	float                                                        OneShotSpinSeekSpeed;                              // 0xf4(0x4)
	float                                                        OneShotSpinAcceleration;                           // 0xf8(0x4)
	float                                                        OneShotSpinDecelerationPeriod;                     // 0xfc(0x4)
	float                                                        OneShotSpinSeekSnapPeriod;                         // 0x100(0x4)
	float                                                        OneShotSpinSeekSnapDegrees;                        // 0x104(0x4)
	bool                                                         EnableSpinningInStorms;                            // 0x108(0x1)
	char                                                         pad0x3_VPC8I[0x3];                                 // 0x109(0x3)
	float                                                        StormSpinDampingFactor;                            // 0x10c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      StormSpinSpeeds;                                   // 0x110(0x30)
	Struct WeightedProbabilityRangeOfRanges                      StormSpinAccelerations;                            // 0x140(0x30)
	TArray<Float StormSpinChancesOfPointingNorth>                StormSpinChancesOfPointingNorth;                   // 0x170(0x10)
	Struct WeightedProbabilityRangeOfRanges                      StormSpinPointingNorthDurations;                   // 0x180(0x30)
	Struct FloatRange                                            StormSpinDirectionChangeInterval;                  // 0x1b0(0x10)
	char                                                         pad0x28_SPZBT[0x28];                               // 0x1c0(0x28)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NavigationSettings: public DeveloperSettings
{
public:
	Struct Vector                                                DirectionNorth;                                    // 0x38(0xc)
	char                                                         pad0x4_DQ221[0x4];                                 // 0x44(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GuildEntitlementDescriptions: public DataAsset
{
public:
	TArray<struct GuildEntitlements>                             GuildEntitlements;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildEntitlementDescriptionsProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildMemberInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildServiceInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0x440] - InheritedSize[0x3c8]
class GuildService: public Actor
{
public:
	char                                                         pad0x58_9XO2I[0x58];                               // 0x3c8(0x58)
	Class ScrambledGuildNamesDataAsset*                          ScrambledGuildNamesDataAsset;                      // 0x420(0x8)
	char                                                         pad0x18_R9OYR[0x18];                               // 0x428(0x18)
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class GuildSettings: public DeveloperSettings
{
public:
	int                                                          MinGuildLevelForEmissary;                          // 0x38(0x4)
	struct FName                                                 GuildCompanyTextIdentifier;                        // 0x3c(0x8)
	struct FName                                                 GuildCompanyId;                                    // 0x44(0x8)
	char                                                         pad0x4_20AS4[0x4];                                 // 0x4c(0x4)
	Struct StringAssetReference                                  ScrambledGuildNamesDataAssetReference;             // 0x50(0x10)
	int                                                          MaxScrambledNameIterations;                        // 0x60(0x4)
	int                                                          MaxNumberOfScrambledNames;                         // 0x64(0x4)
};


// Size 0x108 (Full Size[0x1d0] - InheritedSize[0xc8]
class PlayerGuildComponent: public ActorComponent
{
public:
	char                                                         pad0x8_CC7M3[0x8];                                 // 0xc8(0x8)
	bool                                                         SailingForGuild;                                   // 0xd0(0x1)
	char                                                         pad0x7_B2EUU[0x7];                                 // 0xd1(0x7)
	TArray<Byte CannotInviteReasons>                             CannotInviteReasons;                               // 0xd8(0x10)
	Struct Guid                                                  GuildId;                                           // 0xe8(0x10)
	int                                                          GuildLevel;                                        // 0xf8(0x4)
	char                                                         pad0x4_XRCWO[0x4];                                 // 0xfc(0x4)
	Struct GuildBranding                                         GuildBranding;                                     // 0x100(0x50)
	char                                                         pad0x80_HHHH7[0x80];                               // 0x150(0x80)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ScrambledGuildNamesDataAsset: public DataAsset
{
public:
	TArray<struct FText>                                         ScrambledGuildNames;                               // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UserSettingsServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class UserSettingsService: public Actor
{
public:
	char                                                         pad0x8_U97AV[0x8];                                 // 0x3c8(0x8)
	TArray<struct PlayerUserSettings>                            PlayerUserSettings;                                // 0x3d0(0x10)
	char                                                         pad0x18_8M5JW[0x18];                               // 0x3e0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipIdentityInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainedSessionServiceInterface: public Interface
{
public:
};


// Size 0x200 (Full Size[0x5c8] - InheritedSize[0x3c8]
class CaptainedSessionService: public Actor
{
public:
	char                                                         pad0x18_EQDFY[0x18];                               // 0x3c8(0x18)
	TArray<struct CaptainedCrews>                                CaptainedCrews;                                    // 0x3e0(0x10)
	char                                                         pad0x1b8_XG7EY[0x1b8];                             // 0x3f0(0x1b8)
	Class ScrambledShipNamesDataAsset*                           ScrambledShipNamesDataAsset;                       // 0x5a8(0x8)
	char                                                         pad0x18_ZCYIC[0x18];                               // 0x5b0(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ScrambledShipNamesDataAsset: public DataAsset
{
public:
	TArray<struct FText>                                         ScrambledShipNames;                                // 0x28(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class UGCSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  ScrambledShipNamesDataAssetReference;              // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AwardableInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsCurrencyTypeStatCondition: public TargetedStatCondition
{
public:
	byte                                                         TargetCurrency;                                    // 0x30(0x1)
	char                                                         pad0x7_7IZ0P[0x7];                                 // 0x31(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class Reward: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AchievementReward: public Reward
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class EntitlementReward: public Reward
{
public:
	class                                                        EntitlementDesc;                                   // 0x28(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class GoldReward: public Reward
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class LevelReward: public Reward
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NullReward: public Reward
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PremiumCurrencyReward: public Reward
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class SeasonXPReward: public Reward
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class WaywardTokensReward: public Reward
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class XPReward: public Reward
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RewardDefinitionAsset: public DataAsset
{
public:
	TArray<struct RewardDefinitions>                             RewardDefinitions;                                 // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class RewardDefinitionAssetList: public DataAsset
{
public:
	TArray<class RewardDefinitionAsset*>                         RewardDefinitionAssets;                            // 0x28(0x10)
	Class WeightedRewardTableAsset*                              WeightRewardTable;                                 // 0x38(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class RewardedCurrencyConditionalStatsTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class RewardedCurrencyConditionalStatsData: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewardServiceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class RewardService: public Object
{
public:
	char                                                         pad0x8_7RTJD[0x8];                                 // 0x28(0x8)
	TArray<class RewardDefinitionAsset*>                         RewardDefinitionAssets;                            // 0x30(0x10)
	char                                                         pad0x50_2I5KU[0x50];                               // 0x40(0x50)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RewardSettings: public Object
{
public:
	Struct StringAssetReference                                  RewardDefinitionAssetListLocation;                 // 0x28(0x10)
};


// Size 0x90 (Full Size[0x158] - InheritedSize[0xc8]
class WeightedAwardableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_JOJHN[0x8];                                 // 0xc8(0x8)
	Struct WeightedRewardDistribution                            RewardDistribution;                                // 0xd0(0x18)
	byte                                                         RewardDestination;                                 // 0xe8(0x1)
	char                                                         pad0x6f_AC505[0x6f];                               // 0xe9(0x6f)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedRewardTableAsset: public DataAsset
{
public:
	Struct WeightedRewardTable                                   RewardTable;                                       // 0x28(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteQuestConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteVoyageChapterConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteVoyageConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CompleteVoyageOnCaptainedCrewConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x100 (Full Size[0x128] - InheritedSize[0x28]
class CrewVoyageParticipant: public Object
{
public:
	char                                                         pad0xe0_K3EJF[0xe0];                               // 0x28(0xe0)
	Class PlayerState*                                           PlayerState;                                       // 0x108(0x8)
	char                                                         pad0x18_0SOK3[0x18];                               // 0x110(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewVoyageProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GlobalVoyageDirectorServiceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x418] - InheritedSize[0x3c8]
class GlobalVoyageTriggerActor: public Actor
{
public:
	Class VoyageDescDataAsset*                                   VoyageDesc;                                        // 0x3c8(0x8)
	char                                                         pad0x48_WKAGB[0x48];                               // 0x3d0(0x48)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsQuestMapOverriddenStatCondition: public TargetedStatCondition
{
public:
	TArray<class Class*>                                         ValidMaps;                                         // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class QuestConditionalStatIdentifier: public Object
{
public:
	char                                                         pad0x8_PDUSU[0x8];                                 // 0x28(0x8)
	class                                                        QuestMapOverride;                                  // 0x30(0x8)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsQuestTypeStatCondition: public TargetedStatCondition
{
public:
	byte                                                         QuestType;                                         // 0x30(0x1)
	char                                                         pad0x7_LCV20[0x7];                                 // 0x31(0x7)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsVoyageTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Assetclass AllowedVoyages>                            AllowedVoyages;                                    // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class QuestBootyItemPopUpAsset: public DataAsset
{
public:
	TArray<struct PopUpDescEntries>                              PopUpDescEntries;                                  // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class QuestDescDataAsset: public DataAsset
{
public:
	bool                                                         IsEmergent;                                        // 0x28(0x1)
	char                                                         pad0x7_N7K8L[0x7];                                 // 0x29(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageLocationExclusionFromFeatureToggleDataAsset: public DataAsset
{
public:
	TArray<struct FeatureToggledIslandsList>                     FeatureToggledIslandsList;                         // 0x28(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class VoyageGenerationSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  VoyageLocationExclusionFromFeatureToggleDataAssetLocation; // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageLocationOnlyNamedIslandListDataAsset: public DataAsset
{
public:
	TArray<struct FName>                                         OnlyNamedIslandsList;                              // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageManagementInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class VoyageModuleSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  QuestsConfigAsset;                                 // 0x38(0x10)
	TArray<struct EmergentVoyageIconInfos>                       EmergentVoyageIconInfos;                           // 0x48(0x10)
	int                                                          NumVoyagesInAntiRepetitionHistory;                 // 0x58(0x4)
	char                                                         pad0x4_68P9H[0x4];                                 // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageParticipantInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageRewardDataAsset: public DataAsset
{
public:
	TArray<struct RankEntries>                                   RankEntries;                                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageTypeTutorialPrioritisedPromptsDataAsset: public DataAsset
{
public:
	TArray<struct PromptsPerVoyageType>                          PromptsPerVoyageType;                              // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoyageWorldSettingsInterface: public Interface
{
public:
};


// Size 0x288 (Full Size[0x650] - InheritedSize[0x3c8]
class Landmark: public Actor
{
public:
	Struct FText                                                 Name;                                              // 0x3c8(0x38)
	Struct FText                                                 NameV2;                                            // 0x400(0x38)
	Struct FText                                                 NameV3;                                            // 0x438(0x38)
	Struct FText                                                 NameV4;                                            // 0x470(0x38)
	byte                                                         LandmarkVagueness;                                 // 0x4a8(0x1)
	byte                                                         LandmarkUniqueness;                                // 0x4a9(0x1)
	bool                                                         IsUnderground;                                     // 0x4aa(0x1)
	char                                                         pad0x5_X3B2W[0x5];                                 // 0x4ab(0x5)
	TArray<Byte IsUnsuitableFor>                                 IsUnsuitableFor;                                   // 0x4b0(0x10)
	char                                                         pad0x11c_T1RCX[0x11c];                             // 0x4c0(0x11c)
	float                                                        PacingStartRadius;                                 // 0x5dc(0x4)
	TArray<struct Reactions>                                     Reactions;                                         // 0x5e0(0x10)
	char                                                         pad0x20_B1YYW[0x20];                               // 0x5f0(0x20)
	Class OverlapTriggerComponent*                               AudioZoneComponent;                                // 0x610(0x8)
	char                                                         pad0x2c_9R0O5[0x2c];                               // 0x618(0x2c)
	Struct Vector                                                StartLocation;                                     // 0x644(0xc)
};


// Size 0x8 (Full Size[0x658] - InheritedSize[0x650]
class LandmarkSphere: public Landmark
{
public:
	Class ShapeComponent*                                        DefaultShape;                                      // 0x650(0x8)
};


// Size 0x8 (Full Size[0x658] - InheritedSize[0x650]
class LandmarkBox: public Landmark
{
public:
	Class ShapeComponent*                                        DefaultShape;                                      // 0x650(0x8)
};


// Size 0x8 (Full Size[0x658] - InheritedSize[0x650]
class LandmarkCapsule: public Landmark
{
public:
	Class ShapeComponent*                                        DefaultShape;                                      // 0x650(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class LandmarkFrameworkSettings: public DeveloperSettings
{
public:
	float                                                        LandmarkAudioZoneRadius;                           // 0x38(0x4)
	float                                                        LandmarkAudioZoneHeight;                           // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x68] - InheritedSize[0x58]
class LandmarkReactionEventCallObjectFunction: public LandmarkReactionEvent
{
public:
	byte                                                         RunLocation;                                       // 0x58(0x1)
	char                                                         pad0x3_9HLXB[0x3];                                 // 0x59(0x3)
	struct FName                                                 FunctionName;                                      // 0x5c(0x8)
	char                                                         pad0x4_4OCU2[0x4];                                 // 0x64(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandmarkReactionInterface: public Interface
{
public:
};


// Size 0x150 (Full Size[0x518] - InheritedSize[0x3c8]
class LandmarkReactionPlayer: public Actor
{
public:
	char                                                         pad0x8_QTXXM[0x8];                                 // 0x3c8(0x8)
	TArray<struct OrderedReactions>                              OrderedReactions;                                  // 0x3d0(0x10)
	char                                                         pad0x58_FS4FP[0x58];                               // 0x3e0(0x58)
	TArray<class ParticleSystemComponent*>                       ActiveParticleSystems;                             // 0x438(0x10)
	char                                                         pad0xd0_PFU42[0xd0];                               // 0x448(0xd0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandmarkReactionTriggerInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class LandmarkReactionTriggerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_I5Z34[0x8];                                 // 0xc8(0x8)
	TArray<struct ReactionFrames>                                ReactionFrames;                                    // 0xd0(0x10)
	char                                                         pad0x20_2KUO8[0x20];                               // 0xe0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LandmarkRegistryInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class LandmarkTreasureLocationsDataAsset: public DataAsset
{
public:
	TArray<struct Landmarks>                                     Landmarks;                                         // 0x28(0x10)
};


// Size 0x10 (Full Size[0x2f0] - InheritedSize[0x2e0]
class NonVagueNonUniqueLandmarkComponent: public SceneComponent
{
public:
	struct FName                                                 DescriptionPhraseId;                               // 0x2e0(0x8)
	float                                                        ExtraRadius;                                       // 0x2e8(0x4)
	char                                                         pad0x4_S3BNW[0x4];                                 // 0x2ec(0x4)
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class PlaceableReaction: public Actor
{
public:
	TArray<struct ReactionEvents>                                ReactionEvents;                                    // 0x3c8(0x10)
	float                                                        TriggerRadiusInMetres;                             // 0x3d8(0x4)
	char                                                         pad0x4_NN44L[0x4];                                 // 0x3dc(0x4)
	Class SceneComponent*                                        SceneComponent;                                    // 0x3e0(0x8)
	Class LandmarkReactionPlayer*                                ReactionEventPlayer;                               // 0x3e8(0x8)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickSwitchWeaponNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class WeaponItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLoadoutControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemLoadoutViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LoadoutCostServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xa0] - InheritedSize[0xa0]
class TitleCategory: public ClothingCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TitleLoadoutViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PointOfInterestTrackerInterface: public Interface
{
public:
};


// Size 0x108 (Full Size[0x1d0] - InheritedSize[0xc8]
class PointOfInterestTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_5A3JG[0x8];                                 // 0xc8(0x8)
	float                                                        SecondsBetweenRevelations;                         // 0xd0(0x4)
	float                                                        SecondsAfterInertStateWhereNotificationsAreIgnored; // 0xd4(0x4)
	char                                                         pad0xf8_8B5AK[0xf8];                               // 0xd8(0xf8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class ContainerAllowedItemsDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         Items;                                             // 0x28(0x10)
	TArray<class Class*>                                         Categories;                                        // 0x38(0x10)
	TArray<struct CategoryLimits>                                CategoryLimits;                                    // 0x48(0x10)
};


// Size 0x50 (Full Size[0x178] - InheritedSize[0x128]
class InteractableStorageContainer: public InteractableComponent
{
public:
	char                                                         pad0x40_D7IIG[0x40];                               // 0x128(0x40)
	Class Object*                                                Aggregator;                                        // 0x168(0x8)
	class                                                        InteractInput;                                     // 0x170(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReplenishableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x60] - InheritedSize[0x50]
class ShipBarrelEntitlementProcessingPolicy: public ShipEntitlementProcessingPolicy
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageContainerInterface: public Interface
{
public:
};


// Size 0x2f8 (Full Size[0x3c0] - InheritedSize[0xc8]
class StorageContainerComponent: public ActorComponent
{
public:
	char                                                         pad0x20_J4EIU[0x20];                               // 0xc8(0x20)
	Struct FText                                                 ContainerDisplayName;                              // 0xe8(0x38)
	Struct Transform                                             InstanceTransform;                                 // 0x120(0x30)
	Struct StorageContainerBackingStore                          ContainerNodes;                                    // 0x150(0x40)
	Struct StorageContainerReplicatedContainerNodes              ReplicatedContainerNodes;                          // 0x190(0x48)
	TArray<Weakclass QuickGivers>                                QuickGivers;                                       // 0x230(0x10)
	TArray<Weakclass QuickTakers>                                QuickTakers;                                       // 0x240(0x10)
	Class WwiseEvent*                                            AddItemSFX;                                        // 0x250(0x8)
	Class WwiseEvent*                                            TakeItemSFX;                                       // 0x258(0x8)
	Class WwiseEvent*                                            OpenContainerSFX;                                  // 0x260(0x8)
	Class WwiseEvent*                                            BeginQuickGiveSFX;                                 // 0x268(0x8)
	Class WwiseEvent*                                            EndQuickGiveSFX;                                   // 0x270(0x8)
	Class WwiseEvent*                                            BeginQuickTakeSFX;                                 // 0x278(0x8)
	Class WwiseEvent*                                            EndQuickTakeSFX;                                   // 0x280(0x8)
	Class StorageContainerContentTypeSelector*                   CrateFillerContainerSelector;                      // 0x288(0x8)
	Class StorageContainerContentTypeSelector*                   StorageContainerSelector;                          // 0x290(0x8)
	char                                                         pad0x30_1WHZP[0x30];                               // 0x298(0x30)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x2c8(0x8)
	char                                                         pad0x40_NGBZH[0x40];                               // 0x2d0(0x40)
	bool                                                         ShowCapacityInDescription;                         // 0x310(0x1)
	char                                                         pad0x9f_03YPU[0x9f];                               // 0x311(0x9f)
	Class Object*                                                Aggregator;                                        // 0x3b0(0x8)
	char                                                         pad0x8_DPEWM[0x8];                                 // 0x3b8(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class StorageContainerComponentData: public DataAsset
{
public:
	TArray<Byte CloseInteractionExemptHealthChangeReasons>       CloseInteractionExemptHealthChangeReasons;         // 0x28(0x10)
	Class WwiseEvent*                                            BeginQuickGiveSFX;                                 // 0x38(0x8)
	Class WwiseEvent*                                            EndQuickGiveSFX;                                   // 0x40(0x8)
	Class WwiseEvent*                                            BeginQuickTakeSFX;                                 // 0x48(0x8)
	Class WwiseEvent*                                            EndQuickTakeSFX;                                   // 0x50(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageContainerSpawnerItemListBase: public DataAsset
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerSpawnerWeightedItemList: public StorageContainerSpawnerItemListBase
{
public:
	TArray<struct Entries>                                       Entries;                                           // 0x28(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class StorageContainerSpawnerItemFeatureBasedWeightedItemList: public StorageContainerSpawnerWeightedItemList
{
public:
	TArray<struct FeatureGroups>                                 FeatureGroups;                                     // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerSpawnerWeightedListOfWeightedItemList: public StorageContainerSpawnerItemListBase
{
public:
	TArray<struct Entries>                                       Entries;                                           // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerContentSpawner: public DataAsset
{
public:
	TArray<struct Entries>                                       Entries;                                           // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class StorageContainerContentTypeSelectorEntries: public DataAsset
{
public:
	TArray<struct ContentSpawners>                               ContentSpawners;                                   // 0x28(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StorageContainerSpawnerCount: public DataAsset
{
public:
	Struct WeightedProbabilityRange                              NumSpawners;                                       // 0x28(0x20)
	int                                                          MinDifferentSpawners;                              // 0x48(0x4)
	int                                                          MaxDifferentSpawners;                              // 0x4c(0x4)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class StorageContainerContentTypeSelector: public DataAsset
{
public:
	Struct WeightedProbabilityRange                              NumSpawners;                                       // 0x28(0x20)
	int                                                          MinDifferentSpawners;                              // 0x48(0x4)
	int                                                          MaxDifferentSpawners;                              // 0x4c(0x4)
	Class StorageContainerSpawnerCount*                          NumSpawnerRef;                                     // 0x50(0x8)
	TArray<struct ContentSpawners>                               ContentSpawners;                                   // 0x58(0x10)
	Class StorageContainerContentSpawner*                        DebugSpawner;                                      // 0x68(0x8)
	Class StorageContainerContentTypeSelectorEntries*            SelectorEntries;                                   // 0x70(0x8)
	TArray<class StorageContainerSpecialTypeSelectorEntries*>    SpecialEntries;                                    // 0x78(0x10)
	Struct SpawnerTypeMappings                                   SpawnerTypeMappings;                               // 0x88(0x10)
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class StorageContainerDescSpawnData: public ItemDescSpawnData
{
public:
};


// Size 0x30 (Full Size[0x68] - InheritedSize[0x38]
class StorageContainerSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  StorageContainerComponentDataAssetLocation;        // 0x38(0x10)
	float                                                        QuickTransferDefaultRate;                          // 0x48(0x4)
	float                                                        QuickTransferMyCrewShipRate;                       // 0x4c(0x4)
	float                                                        QuickTransferOtherCrewShipRate;                    // 0x50(0x4)
	char                                                         pad0x4_N4CT0[0x4];                                 // 0x54(0x4)
	TArray<struct CategoryTypeMap>                               CategoryTypeMap;                                   // 0x58(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StorageContainerSpecialTypeSelectorEntries: public DataAsset
{
public:
	float                                                        PercentageChanceOfSpawning;                        // 0x28(0x4)
	char                                                         pad0x4_WT36X[0x4];                                 // 0x2c(0x4)
	Class StorageContainerSpawnerCount*                          NumSpawners;                                       // 0x30(0x8)
	TArray<struct Entries>                                       Entries;                                           // 0x38(0x10)
	struct FName                                                 FeatureToggle;                                     // 0x48(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StorageVoyageProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class TakesItemFromStorageContainerConditionalTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CoastQueryInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class IslandItemDataAsset: public GeneratedLocationsDataAsset
{
public:
	TArray<struct SpawnLocations>                                SpawnLocations;                                    // 0x38(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class LoreBookItemsDataAsset: public IslandItemDataAsset
{
public:
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class SunkenItemDataAsset: public IslandItemDataAsset
{
public:
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WashedUpItemDataAsset: public IslandItemDataAsset
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsAnotherCrewOnSameIslandStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandAirPocketComponentInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class IslandAirPocketComponent: public ActorComponent
{
public:
	char                                                         pad0x8_6BE4O[0x8];                                 // 0xc8(0x8)
	TArray<struct AirGivingVolumes>                              AirGivingVolumes;                                  // 0xd0(0x10)
	char                                                         pad0x10_D6T2J[0x10];                               // 0xe0(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class SeaId: public Object
{
public:
	struct FName                                                 SeaName;                                           // 0x28(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PrebakedIslandAsset: public DataAsset
{
public:
	TArray<struct IslandEntries>                                 IslandEntries;                                     // 0x28(0x10)
	Struct Vector2D                                              WorldMapMin;                                       // 0x38(0x8)
	Struct Vector2D                                              WorldMapMax;                                       // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandNameProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandServiceInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x520] - InheritedSize[0x3c8]
class IslandData: public Actor
{
public:
	char                                                         pad0x10_C49V2[0x10];                               // 0x3c8(0x10)
	Class IslandAnnouncementComponent*                           IslandAnnouncementComponent;                       // 0x3d8(0x8)
	Class IslandBoundsComponent*                                 IslandBoundsComponent;                             // 0x3e0(0x8)
	Class IslandReservationComponent*                            IslandReservationComponent;                        // 0x3e8(0x8)
	Class SphereComponent*                                       IslandTriggerComponent;                            // 0x3f0(0x8)
	Class SphereComponent*                                       IslandSafeZoneComponent;                           // 0x3f8(0x8)
	struct FName                                                 IslandName;                                        // 0x400(0x8)
	byte                                                         IslandType;                                        // 0x408(0x1)
	char                                                         pad0x7_O3OST[0x7];                                 // 0x409(0x7)
	TArray<class SpawnLocation*>                                 AssociatedSpawnLocations;                          // 0x410(0x10)
	TArray<class ShipSpawnLocation*>                             AssociatedShipSpawnLocations;                      // 0x420(0x10)
	Struct ObjectMessagingDispatcher                             ObjectMessageDispatcher;                           // 0x430(0xa0)
	Struct Vector                                                CompassDirectionIslandCentre;                      // 0x4d0(0xc)
	char                                                         pad0x4_TVIJG[0x4];                                 // 0x4dc(0x4)
	Class AICreatureMovementModifierParamsDataAsset*             PetMovementParamsData;                             // 0x4e0(0x8)
	float                                                        ShipDiveAndResurfaceExclusionZoneRadius;           // 0x4e8(0x4)
	char                                                         pad0x2c_NMJTY[0x2c];                               // 0x4ec(0x2c)
	Class IslandSalvageSpawnerManager*                           IslandSalvageSpawnerManager;                       // 0x518(0x8)
};


// Size 0xe8 (Full Size[0x1b0] - InheritedSize[0xc8]
class IslandAnnouncementComponent: public ActorComponent
{
public:
	bool                                                         AnnouncesOnUI;                                     // 0xc8(0x1)
	char                                                         pad0x7_E53DM[0x7];                                 // 0xc9(0x7)
	TArray<class Controller*>                                    MutedPlayers;                                      // 0xd0(0x10)
	char                                                         pad0xd0_NKT9G[0xd0];                               // 0xe0(0xd0)
};


// Size 0x0 (Full Size[0x5e0] - InheritedSize[0x5e0]
class IslandBoundsComponent: public SphereComponent
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class IslandMaterialStatusZone: public Object
{
public:
	char                                                         pad0x10_THB26[0x10];                               // 0x28(0x10)
	TArray<struct StatusMappings>                                StatusMappings;                                    // 0x38(0x10)
	char                                                         pad0x50_VUGFQ[0x50];                               // 0x48(0x50)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class IslandDataDefaultAssetEntry: public DataAsset
{
public:
	byte                                                         IslandType;                                        // 0x28(0x1)
	char                                                         pad0x7_5N9Z8[0x7];                                 // 0x29(0x7)
	Class AISpawner*                                             AISpawner;                                         // 0x30(0x8)
	TArray<struct AISpawnerOverrides>                            AISpawnerOverrides;                                // 0x38(0x10)
	Class AISpawner*                                             CannonsAISpawner;                                  // 0x48(0x8)
	TArray<struct CannonsAISpawnerOverrides>                     CannonsAISpawnerOverrides;                         // 0x50(0x10)
	Class AISpawner*                                             EmergentCaptainSpawner;                            // 0x60(0x8)
	TArray<struct EmergentCaptainSpawnerOverrides>               EmergentCaptainSpawnerOverrides;                   // 0x68(0x10)
};


// Size 0x10 (Full Size[0x88] - InheritedSize[0x78]
class FortIslandDataDefaultAssetEntry: public IslandDataDefaultAssetEntry
{
public:
	Class AISpawner*                                             AISpawnerWhenFortActive;                           // 0x78(0x8)
	Class AISpawner*                                             CannonsAISpawnerWhenFortActive;                    // 0x80(0x8)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class IslandDataAssetEntry: public DataAsset
{
public:
	struct FName                                                 IslandName;                                        // 0x28(0x8)
	TArray<struct TreasureMaps>                                  TreasureMaps;                                      // 0x30(0x10)
	Class WorldMapIslandDataAsset*                               WorldMapData;                                      // 0x40(0x8)
	Class GeneratedLocationsDataAsset*                           UndergroundTreasureLocationsSource;                // 0x48(0x8)
	TArray<struct UndergroundTreasureLocations>                  UndergroundTreasureLocations;                      // 0x50(0x10)
	Class LandmarkTreasureLocationsDataAsset*                    LandmarkTreasureLocationsSource;                   // 0x60(0x8)
	Class GeneratedLocationsDataAsset*                           AISpawnLocationsSource;                            // 0x68(0x8)
	TArray<struct AISpawnLocations>                              AISpawnLocations;                                  // 0x70(0x10)
	TArray<class IslandItemDataAsset*>                           IslandItemLocationDataSources;                     // 0x80(0x10)
	TArray<class IslandSalvageSpawnerCollection*>                IslandSalvageSpawnerCollections;                   // 0x90(0x10)
	TArray<struct SalvageItemsLocationData>                      SalvageItemsLocationData;                          // 0xa0(0x10)
	Struct FText                                                 LocalisedName;                                     // 0xb0(0x38)
	Class AISpawner*                                             AISpawner;                                         // 0xe8(0x8)
	Class AISpawner*                                             CannonsAISpawner;                                  // 0xf0(0x8)
	Class AISpawner*                                             EmergentCaptainSpawner;                            // 0xf8(0x8)
	Class IslandMaterialStatusZone*                              IslandMaterialStatusZone;                          // 0x100(0x8)
	Struct PlayerStat                                            StatToFireWhenPlayerSetsFootOnIsland;              // 0x108(0x4)
	Struct PlayerStat                                            StatToFireWhenShipVisitsAnIsland;                  // 0x10c(0x4)
	bool                                                         ShouldBeHiddenOnWorldMap;                          // 0x110(0x1)
	bool                                                         UseAdvancedSearchForMermaidSpawn;                  // 0x111(0x1)
	byte                                                         IslandActiveEventType;                             // 0x112(0x1)
	char                                                         pad0x5_4ACDQ[0x5];                                 // 0x113(0x5)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class IslandDataAsset: public DataAsset
{
public:
	bool                                                         AllowDefaultIdentityTransform;                     // 0x28(0x1)
	char                                                         pad0x3_KDRR8[0x3];                                 // 0x29(0x3)
	float                                                        SpawningGracePeriod;                               // 0x2c(0x4)
	Class AISpawner*                                             AncientSkeletonSpawner;                            // 0x30(0x8)
	TArray<class IslandDataDefaultAssetEntry*>                   IslandDefaultDataEntries;                          // 0x38(0x10)
	TArray<class IslandDataAssetEntry*>                          IslandDataEntries;                                 // 0x48(0x10)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class IslandFrameworkSettings: public DeveloperSettings
{
public:
	struct FName                                                 IslandTypeStateGroup;                              // 0x38(0x8)
	Struct StringAssetReference                                  IslandDataFileLocation;                            // 0x40(0x10)
	float                                                        SurfaceUpperBound;                                 // 0x50(0x4)
	float                                                        SurfaceLowerBound;                                 // 0x54(0x4)
	float                                                        TreasuryAwarenessProximity;                        // 0x58(0x4)
	char                                                         pad0x4_Z4KZ6[0x4];                                 // 0x5c(0x4)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class IslandReservationComponent: public ActorComponent
{
public:
	TArray<struct ReservationStories>                            ReservationStories;                                // 0xc8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandReservationServiceInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class IslandReservationService: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class IslandSalvageSpawnerCollection: public DataAsset
{
public:
	TArray<class Class*>                                         SalvageSpawners;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SalvageSpawnerLocationReservationInterface: public Interface
{
public:
};


// Size 0x200 (Full Size[0x5c8] - InheritedSize[0x3c8]
class IslandSalvageSpawnerManager: public Actor
{
public:
	char                                                         pad0x10_X0O8I[0x10];                               // 0x3c8(0x10)
	Struct ObjectMessagingDispatcher                             ObjectMessagingDispatcher;                         // 0x3d8(0xa0)
	TArray<class SalvageItemSpawnComponent*>                     SalvageSpawnComponentsAwaitingRequests;            // 0x478(0x10)
	Class IslandData*                                            IslandData;                                        // 0x4d8(0x8)
	char                                                         pad0x10_HQNQV[0x10];                               // 0x4e0(0x10)
	TArray<class SalvageItemSpawnComponent*>                     IslandSalvageItemSpawnComponents;                  // 0x4f0(0x10)
	TArray<struct IslandSalvageLocationData>                     IslandSalvageLocationData;                         // 0x500(0x10)
	char                                                         pad0xb8_AHCA2[0xb8];                               // 0x510(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandVisitorCallbackInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class IslandVisitorCallbackComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandVisitorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IslandWorldSettingsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LevelTransformProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class RelinquishIslandSalvageSpawnLocationOnDestructionComponent: public ActorComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SunkenIslandSettingsDataAsset: public DataAsset
{
public:
	TArray<struct ExclusionInfo>                                 ExclusionInfo;                                     // 0x28(0x10)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class TreasureMapDataAsset: public DataAsset
{
public:
	char                                                         pad0x40_D4P93[0x40];                               // 0x28(0x40)
	Struct TreasureMapDataCaptureParams                          CaptureParams;                                     // 0x68(0x40)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class WorldMapIslandDataAsset: public DataAsset
{
public:
	Class Texture*                                               Texture;                                           // 0x28(0x8)
	Struct WorldMapIslandDataCaptureParams                       CaptureParams;                                     // 0x30(0x40)
	float                                                        LabelOffset;                                       // 0x70(0x4)
	char                                                         pad0x4_YQ45F[0x4];                                 // 0x74(0x4)
};


// Size 0x10 (Full Size[0x330] - InheritedSize[0x320]
class SeaRegionComponent: public WorldRegionComponent
{
public:
	class                                                        SeaId;                                             // 0x320(0x8)
	char                                                         pad0x8_SAX0X[0x8];                                 // 0x328(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AtmosphericPressureZoneInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AtmosphericPressureServiceInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x4a8] - InheritedSize[0x3c8]
class GameplayEventSignal: public Actor
{
public:
	char                                                         pad0x8_ILCVN[0x8];                                 // 0x3c8(0x8)
	class                                                        ProxyClass;                                        // 0x3d0(0x8)
	struct FName                                                 NexProxyFeatureToggle;                             // 0x3d8(0x8)
	float                                                        TimeForSignalToActivateInSeconds;                  // 0x3e0(0x4)
	float                                                        TimeForSignalToDeactivateInSeconds;                // 0x3e4(0x4)
	float                                                        TimeForAtmosphericPressureZoneToActivateInSeconds; // 0x3e8(0x4)
	char                                                         pad0x4_0PRFF[0x4];                                 // 0x3ec(0x4)
	Class AtmosphericPressureZoneComponent*                      AtmosphericPressureZoneComponent;                  // 0x3f0(0x8)
	Class LightingZoneComponent*                                 LightingZoneComponent;                             // 0x3f8(0x8)
	Class RotateMeshToActorComponent*                            RotateMeshToActorComponent;                        // 0x400(0x8)
	Class MeshComponent*                                         SignalMesh;                                        // 0x408(0x8)
	Class SceneComponent*                                        Root;                                              // 0x410(0x8)
	Class MaterialInstanceDynamic*                               SignalMaterial;                                    // 0x418(0x8)
	byte                                                         EventType;                                         // 0x420(0x1)
	char                                                         pad0x67_8UYZ7[0x67];                               // 0x421(0x67)
	byte                                                         OwningNetworkRegion;                               // 0x488(0x1)
	char                                                         pad0x1f_RXJAX[0x1f];                               // 0x489(0x1f)
};


// Size 0x0 (Full Size[0x4a8] - InheritedSize[0x4a8]
class GameplayEventSignal_StaticMesh: public GameplayEventSignal
{
public:
};


// Size 0x0 (Full Size[0x4a8] - InheritedSize[0x4a8]
class GameplayEventSignal_SkinnedMesh: public GameplayEventSignal
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class GameEventSchedulerSettingsAsset: public DataAsset
{
public:
	TArray<struct EventSettings>                                 EventSettings;                                     // 0x28(0x10)
	TArray<struct Configs>                                       Configs;                                           // 0x38(0x10)
	float                                                        InitialStartupTime;                                // 0x48(0x4)
	float                                                        BlockingVerificationFrequency;                     // 0x4c(0x4)
	float                                                        InvalidEventDeactivationQueryFrequency;            // 0x50(0x4)
	float                                                        InvalidEventDeactivationThreshold;                 // 0x54(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableGameEventSchedulerServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableGameEventServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventSchedulerServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class CustomizableGameEventService: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EncounterStateInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GameEventParams: public DataAsset
{
public:
	float                                                        KeepAliveRadius;                                   // 0x28(0x4)
	float                                                        InnerEncounterRadius;                              // 0x2c(0x4)
	float                                                        OuterEncounterRadius;                              // 0x30(0x4)
	char                                                         pad0x4_7UE6U[0x4];                                 // 0x34(0x4)
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class GameEvent: public Actor
{
public:
	char                                                         pad0x8_8MFCK[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	char                                                         pad0x70_IFIBB[0x70];                               // 0x3d8(0x70)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventSchedulerDebugFunctions: public Object
{
public:
};


// Size 0x2e0 (Full Size[0x308] - InheritedSize[0x28]
class GameEventSchedulerService: public Object
{
public:
	char                                                         pad0x20_I0RBT[0x20];                               // 0x28(0x20)
	Class GameEventSchedulerSettingsAsset*                       Settings;                                          // 0x48(0x8)
	char                                                         pad0x10_NA4X4[0x10];                               // 0x50(0x10)
	TArray<struct Configs>                                       Configs;                                           // 0x60(0x10)
	char                                                         pad0x8_XR29C[0x8];                                 // 0x70(0x8)
	TArray<struct NextConfigs>                                   NextConfigs;                                       // 0x78(0x10)
	Class World*                                                 World;                                             // 0x88(0x8)
	char                                                         pad0x40_77YSL[0x40];                               // 0x90(0x40)
	TArray<struct PermittedEventTypes>                           PermittedEventTypes;                               // 0xd0(0x10)
	char                                                         pad0x228_4GYR4[0x228];                             // 0xe0(0x228)
};


// Size 0x0 (Full Size[0x308] - InheritedSize[0x308]
class CustomizableGameEventSchedulerService: public GameEventSchedulerService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventSchedulerSettingsInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameEventServiceParams: public DataAsset
{
public:
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class GameEventService: public Actor
{
public:
	char                                                         pad0x48_J4FUK[0x48];                               // 0x3c8(0x48)
	TArray<class GameEvent*>                                     GameEvents;                                        // 0x410(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggressiveGhostShipsEncounterGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipBattleGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipPassiveGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AIShipAggressiveGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenLordEncounterGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnemyAIOnShipGameEventType: public GameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OceanCrawlersOnShipGameEventType: public EnemyAIOnShipGameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LegendarySkellyFortGameEventType: public SkellyFortGameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LegendarySkellyFort2023GameEventType: public LegendarySkellyFortGameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FortOfTheDamnedGameEventType: public SkellyFortGameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FortOfTheDamnedRebalanceGameEventType: public FortOfTheDamnedGameEventType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GameSessionIdProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class ActorBuriedByPlayerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuriedDecalClientServiceInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x490] - InheritedSize[0x3c8]
class BuriedDecalClientService: public Actor
{
public:
	char                                                         pad0x8_1V6F1[0x8];                                 // 0x3c8(0x8)
	Class DiggingSettings*                                       Settings;                                          // 0x3d0(0x8)
	char                                                         pad0xb8_V2T32[0xb8];                               // 0x3d8(0xb8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BuriedDecalServerServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x340] - InheritedSize[0x310]
class BuriedItemDecal: public DecalComponent
{
public:
	struct FName                                                 FadeTimeParameterName;                             // 0x310(0x8)
	struct FName                                                 FadeDistanceStartParameterName;                    // 0x318(0x8)
	float                                                        FadeDistanceStart;                                 // 0x320(0x4)
	struct FName                                                 FadeDistanceEndParameterName;                      // 0x324(0x8)
	float                                                        FadeDistanceEnd;                                   // 0x32c(0x4)
	Class MaterialInstanceDynamic*                               Material;                                          // 0x330(0x8)
	char                                                         pad0x8_QJ0CC[0x8];                                 // 0x338(0x8)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class DiggingSettings: public DeveloperSettings
{
public:
	class                                                        BuriedDecalClass;                                  // 0x38(0x8)
	int                                                          MaxNumVisibleDecals;                               // 0x40(0x4)
	float                                                        DecalReplicationDistance;                          // 0x44(0x4)
	float                                                        FullyBuriedItemDestroyDelay;                       // 0x48(0x4)
	struct FName                                                 DirtinessParameterName;                            // 0x4c(0x8)
	float                                                        UpdateDirtynessDelayOnBury;                        // 0x54(0x4)
};


// Size 0x68 (Full Size[0x430] - InheritedSize[0x3c8]
class BuriedDecalServerService: public Actor
{
public:
	char                                                         pad0x8_MEL11[0x8];                                 // 0x3c8(0x8)
	Class DiggingSettings*                                       Settings;                                          // 0x3d0(0x8)
	char                                                         pad0x58_FJJ20[0x58];                               // 0x3d8(0x58)
};


// Size 0x30 (Full Size[0xf8] - InheritedSize[0xc8]
class BuriedDecalVisibilityReplicationChannel: public IndividualReplicationChannelComponent
{
public:
	TArray<struct ReplicatedDecals>                              ReplicatedDecals;                                  // 0xc8(0x10)
	char                                                         pad0x20_GV04F[0x20];                               // 0xd8(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DiggingSfxProviderInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class ItemDiggingBuryConfig: public Object
{
public:
	int                                                          MaxSmallCrewSizeForNumDigsSelection;               // 0x28(0x4)
	char                                                         pad0x4_GYN7M[0x4];                                 // 0x2c(0x4)
	Struct WeightedProbabilityRange                              NumDigsRequiredForSmallCrewSize;                   // 0x30(0x20)
	Struct WeightedProbabilityRange                              NumDigsRequiredForBiggerCrewSize;                  // 0x50(0x20)
	int                                                          DefaultNumDigsIfNotInCrew;                         // 0x70(0x4)
	char                                                         pad0x4_60H8M[0x4];                                 // 0x74(0x4)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class ItemDiggingBaseConfig: public Object
{
public:
	char                                                         pad0x8_PM4QG[0x8];                                 // 0x28(0x8)
	Struct Transform                                             RelativeTransform;                                 // 0x30(0x30)
	int                                                          MaxSmallCrewSizeForNumDigsSelection;               // 0x60(0x4)
	char                                                         pad0x4_U4U20[0x4];                                 // 0x64(0x4)
	Struct WeightedProbabilityRange                              NumDigsRequiredForSmallCrewSize;                   // 0x68(0x20)
	Struct WeightedProbabilityRange                              NumDigsRequiredForBiggerCrewSize;                  // 0x88(0x20)
	int                                                          DefaultNumDigsIfNotInCrew;                         // 0xa8(0x4)
	float                                                        MaxDigRadiusToFurtherExhume;                       // 0xac(0x4)
	bool                                                         RemoveSandDecal;                                   // 0xb0(0x1)
	char                                                         pad0x7_AFBVZ[0x7];                                 // 0xb1(0x7)
	Class OnDigStrategy*                                         OnDigTrigger;                                      // 0xb8(0x8)
	Class OnBuryStrategy*                                        OnBuryTrigger;                                     // 0xc0(0x8)
	char                                                         pad0x8_0AW6K[0x8];                                 // 0xc8(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ItemDiggingAnimationConfig: public Object
{
public:
	float                                                        PosSpringAccel;                                    // 0x28(0x4)
	float                                                        RotSpringAccel;                                    // 0x2c(0x4)
	float                                                        ZOffsetToStartFirstPosBlendFrom;                   // 0x30(0x4)
	float                                                        InitialZOffset;                                    // 0x34(0x4)
	float                                                        FinalZOffset;                                      // 0x38(0x4)
	float                                                        PercentageOfExhumingTravelLastDigDoes;             // 0x3c(0x4)
	Class CurveFloat*                                            PitchRollAngleRandomCurve;                         // 0x40(0x8)
	Class CurveFloat*                                            PitchRollRattleCurveWhileMoving;                   // 0x48(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemDiggingEffectsConfig: public Object
{
public:
	TArray<struct FullyDugUpVfxParams>                           FullyDugUpVfxParams;                               // 0x28(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ItemDiggingAudioConfig: public Object
{
public:
	Class WwiseEvent*                                            ShovelEnterSurfaceSfx;                             // 0x28(0x8)
	Class WwiseEvent*                                            ExhumeStepSfx;                                     // 0x30(0x8)
	Class WwiseEvent*                                            FullyDugUpSfx;                                     // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FeedableInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class FeedableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_969HF[0x8];                                 // 0xc8(0x8)
	byte                                                         FeedableType;                                      // 0xd0(0x1)
	bool                                                         Feedable;                                          // 0xd1(0x1)
	char                                                         pad0x6_T8MVH[0x6];                                 // 0xd2(0x6)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FeedingInterface: public Interface
{
public:
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class FeedingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_8FKTB[0x8];                                 // 0xc8(0x8)
	TArray<Byte ValidFeedableTypes>                              ValidFeedableTypes;                                // 0xd0(0x10)
	float                                                        FeedTime;                                          // 0xe0(0x4)
	char                                                         pad0x4_0FFHO[0x4];                                 // 0xe4(0x4)
	Struct FeedStruct                                            FeedStruct;                                        // 0xe8(0x10)
	Class Actor*                                                 LastActorToBeFedBy;                                // 0xf8(0x8)
	bool                                                         AlwaysDescribe;                                    // 0x100(0x1)
	char                                                         pad0x1f_JDFJ9[0x1f];                               // 0x101(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ForceFeedbackCondition_LastPlayerToFeedPet: public ForceFeedbackCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SicknessInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StarvingInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x170] - InheritedSize[0xc8]
class StarvingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_8BESE[0x8];                                 // 0xc8(0x8)
	Struct WeightedProbabilityRangeOfRanges                      WeightedTimeToStarveInSeconds;                     // 0xd0(0x30)
	float                                                        StarvingNotificationInterval;                      // 0x100(0x4)
	bool                                                         StartStarvingImmediately;                          // 0x104(0x1)
	bool                                                         RecalculateTimeToStarveOnReset;                    // 0x105(0x1)
	char                                                         pad0x5e_XFCE8[0x5e];                               // 0x106(0x5e)
	float                                                        TimeSpentStarving;                                 // 0x164(0x4)
	bool                                                         HasStartedStarving;                                // 0x168(0x1)
	char                                                         pad0x3_3PT4C[0x3];                                 // 0x169(0x3)
	float                                                        TimeToStarveInSeconds;                             // 0x16c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponseSickness: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AmmoBaseEffect: public Object
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class AmmoChangeEffect: public AmmoBaseEffect
{
public:
	Struct AmmoChangeEffectParams                                AmmoChangeEffectParams;                            // 0x28(0x40)
	char                                                         pad0x20_V40OV[0x20];                               // 0x68(0x20)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BlockInteractEffect: public AmmoBaseEffect
{
public:
	Class Actor*                                                 OwningActor;                                       // 0x28(0x8)
	byte                                                         TargetInteractableState;                           // 0x30(0x1)
	char                                                         pad0x7_10JIP[0x7];                                 // 0x31(0x7)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class OutOfAmmoDestroyEffect: public AmmoBaseEffect
{
public:
	Struct OutOfAmmoDestructionEffects                           DestructionEffects;                                // 0x28(0x80)
	Class Actor*                                                 OwningActor;                                       // 0xa8(0x8)
	char                                                         pad0x68_J5EEL[0x68];                               // 0xb0(0x68)
};


// Size 0x78 (Full Size[0x188] - InheritedSize[0x110]
class AmmoEffectsComponent: public MaterialManipulationComponent
{
public:
	TArray<class AmmoBaseEffect*>                                AmmoEffects;                                       // 0x110(0x10)
	Struct AmmoEffectState                                       AmmoEffectState;                                   // 0x170(0x8)
	char                                                         pad0x10_TK3XN[0x10];                               // 0x178(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AmmoInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AmmoStoreInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class AmmoStoreComponent: public ActorComponent
{
public:
	char                                                         pad0x8_5WVOG[0x8];                                 // 0xc8(0x8)
	int                                                          MaxAmmo;                                           // 0xd0(0x4)
	char                                                         pad0x4_G4MK1[0x4];                                 // 0xd4(0x4)
	Class WwiseEvent*                                            ReloadSFX;                                         // 0xd8(0x8)
	Class WwiseEvent*                                            RestockSFX;                                        // 0xe0(0x8)
	int                                                          CurrentAmmo;                                       // 0xe8(0x4)
	char                                                         pad0x14_0J11O[0x14];                               // 0xec(0x14)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class AmmoTransferComponent: public ActorComponent
{
public:
	int                                                          AmmoCount;                                         // 0xc8(0x4)
	char                                                         pad0x4_2OVTI[0x4];                                 // 0xcc(0x4)
	Class Actor*                                                 ActorOwner;                                        // 0xd0(0x8)
	char                                                         pad0x10_23ITB[0x10];                               // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanvasLODControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanvasLODServiceInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class CanvasLODService: public Object
{
public:
	char                                                         pad0x10_05GL6[0x10];                               // 0x28(0x10)
	TArray<class Actor*>                                         ResourceManagedCanvases;                           // 0x38(0x10)
	char                                                         pad0x40_W3ZLJ[0x40];                               // 0x48(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableItemCanvasRenderingInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0x190] - InheritedSize[0xc8]
class WieldableItemCanvasRenderingComponent: public ActorComponent
{
public:
	char                                                         pad0x10_96QYQ[0x10];                               // 0xc8(0x10)
	int                                                          CanvasWidth;                                       // 0xd8(0x4)
	int                                                          CanvasHeight;                                      // 0xdc(0x4)
	struct FName                                                 PrimaryMaterialTextureParameterName;               // 0xe0(0x8)
	Class MaybeCompressedCanvasRenderTarget2D*                   PrimaryRenderTarget;                               // 0xf8(0x8)
	TArray<class MaybeCompressedCanvasRenderTarget2D*>           AdditionalRenderTargets;                           // 0x100(0x10)
	char                                                         pad0x80_XVXVP[0x80];                               // 0x110(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunCrateInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x100] - InheritedSize[0x28]
class CargoRunMapLayout: public DataAsset
{
public:
	Struct TreasureMapWidgetText                                 NPCNameDescription;                                // 0x28(0x3c)
	Struct TreasureMapWidgetText                                 IslandNameDescription;                             // 0x64(0x3c)
	Struct TreasureMapWidgetText                                 NumOfItemsDescription;                             // 0xa0(0x3c)
	char                                                         pad0x4_IWS85[0x4];                                 // 0xdc(0x4)
	TArray<struct GeneralText>                                   GeneralText;                                       // 0xe0(0x10)
	TArray<struct Images>                                        Images;                                            // 0xf0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunParticipantInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunServiceQueryInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CargoRunServicePickUpInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class CargoRunService: public Actor
{
public:
	char                                                         pad0x10_JI30X[0x10];                               // 0x3c8(0x10)
	TArray<struct ClientCrewData>                                ClientCrewData;                                    // 0x3d8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CrewLockableInterface: public Interface
{
public:
};


// Size 0x118 (Full Size[0x1e0] - InheritedSize[0xc8]
class CrewLockableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_81XJ5[0x8];                                 // 0xc8(0x8)
	bool                                                         StartLocked;                                       // 0xd0(0x1)
	bool                                                         AllianceInteractable;                              // 0xd1(0x1)
	char                                                         pad0x2_BM503[0x2];                                 // 0xd2(0x2)
	float                                                        LockHoldTime;                                      // 0xd4(0x4)
	bool                                                         CrewCanUnlock;                                     // 0xd8(0x1)
	char                                                         pad0x3_WVGVL[0x3];                                 // 0xd9(0x3)
	float                                                        UnlockHoldTime;                                    // 0xdc(0x4)
	bool                                                         CrewCanUseWhenLocked;                              // 0xe0(0x1)
	bool                                                         OpponentCanPickLock;                               // 0xe1(0x1)
	char                                                         pad0x2_PZYSS[0x2];                                 // 0xe2(0x2)
	float                                                        OpponentPickLockHoldTime;                          // 0xe4(0x4)
	class                                                        LockUnlockPressedNotificationInputID;              // 0xe8(0x8)
	class                                                        LockUnlockReleasedNotificationInputID;             // 0xf0(0x8)
	byte                                                         LockUnlockDisplayPriority;                         // 0xf8(0x1)
	char                                                         pad0x7_VSL2E[0x7];                                 // 0xf9(0x7)
	class                                                        PickLockPressedNotificationInputID;                // 0x100(0x8)
	class                                                        PickLockReleasedNotificationInputID;               // 0x108(0x8)
	byte                                                         PickLockDisplayPriority;                           // 0x110(0x1)
	char                                                         pad0x7_H8UK1[0x7];                                 // 0x111(0x7)
	Struct ComponentReference                                    LockMeshComponentReference;                        // 0x118(0x18)
	Class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x130(0x8)
	Class WwiseEvent*                                            StartPickingLockAudioEvent;                        // 0x138(0x8)
	Class WwiseEvent*                                            StopPickingLockAudioEvent;                         // 0x140(0x8)
	Class WwiseEvent*                                            StartLockingAudioEvent;                            // 0x148(0x8)
	Class WwiseEvent*                                            StopLockingAudioEvent;                             // 0x150(0x8)
	Class WwiseEvent*                                            StartUnlockingAudioEvent;                          // 0x158(0x8)
	Class WwiseEvent*                                            StopUnlockingAudioEvent;                           // 0x160(0x8)
	Class WwiseEvent*                                            LockAudioEvent;                                    // 0x168(0x8)
	Class WwiseEvent*                                            UnlockAudioEvent;                                  // 0x170(0x8)
	bool                                                         Locked;                                            // 0x178(0x1)
	bool                                                         IsLockPickingStarted;                              // 0x179(0x1)
	bool                                                         IsLockingStarted;                                  // 0x17a(0x1)
	bool                                                         IsUnlockingStarted;                                // 0x17b(0x1)
	char                                                         pad0x4_YIXX0[0x4];                                 // 0x17c(0x4)
	Class StaticMeshComponent*                                   LockedStateMesh;                                   // 0x180(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x188(0x8)
	char                                                         pad0x50_107HL[0x50];                               // 0x190(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LockableDoorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LockableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LockableItemStatsRetrievalInterfaceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class UnlockLockConditionalStatTrigger: public Object
{
public:
	Struct PlayerStat                                            Stat;                                              // 0x28(0x4)
	char                                                         pad0x4_9OMM6[0x4];                                 // 0x2c(0x4)
};


// Size 0x230 (Full Size[0x2f8] - InheritedSize[0xc8]
class LockComponent: public ActorComponent
{
public:
	char                                                         pad0x8_BR27W[0x8];                                 // 0xc8(0x8)
	struct FName                                                 FeatureFlag;                                       // 0xd0(0x8)
	TArray<struct Locks>                                         Locks;                                             // 0xd8(0x10)
	TArray<struct VaultLocks>                                    VaultLocks;                                        // 0xe8(0x10)
	TArray<struct LockStates>                                    LockStates;                                        // 0xf8(0x10)
	class                                                        KeyUsedToUnlock;                                   // 0x138(0x8)
	Class SceneComponent*                                        LockKeyMeshAttachParent;                           // 0x140(0x8)
	TArray<class StaticMeshMemoryConstraintComponent*>           LockKeyMeshComponents;                             // 0x148(0x10)
	class                                                        UnlockInputId;                                     // 0x158(0x8)
	byte                                                         TooltipDisplayPriority;                            // 0x160(0x1)
	char                                                         pad0x97_CHDJQ[0x97];                               // 0x161(0x97)
	Class ActionRulesComponent*                                  ActionRules;                                       // 0x1f8(0x8)
	TArray<class UnlockLockConditionalStatTrigger*>              ConditionalLockStats;                              // 0x200(0x10)
	Struct FText                                                 UnlockText;                                        // 0x210(0x38)
	Struct FText                                                 NeedKeyToUnlockText;                               // 0x248(0x38)
	Struct FText                                                 VaultUnavailableUnlockText;                        // 0x280(0x38)
	Class Actor*                                                 AssociatedOwnerObject;                             // 0x2b8(0x8)
	char                                                         pad0x38_NBWJA[0x38];                               // 0x2c0(0x38)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class UnlockConditionalStatsTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AmmoStoreMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AmmoTransferMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CargoRunCrateMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CrewOwnershipTrackingComponentMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemHealthMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemInfoHealthMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LockMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class OpenableItemMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StorageContainerMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ItemSnapshotSettings: public DeveloperSettings
{
public:
	TArray<class Class*>                                         Generators;                                        // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SnapshotOwnerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class TallTaleSpawnedActorComponent: public ActorComponent
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class ApplyStatusToConsumerComponent: public ActorComponent
{
public:
	TArray<struct ConsumptionStatuses>                           ConsumptionStatuses;                               // 0xc8(0x10)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class AthenaItemsSettings: public DeveloperSettings
{
public:
	byte                                                         ProjectileCollisionChannel;                        // 0x38(0x1)
	byte                                                         ThrowableCollisionChannel;                         // 0x39(0x1)
	char                                                         pad0x6_O6SX0[0x6];                                 // 0x3a(0x6)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToBucketNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToCompassNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToPocketWatchNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToSpeakingTrumpetNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToInstrumentNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToLanternNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToTankardNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToFishingRodNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToFoodNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToThrowablesNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToCannonballNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToFireworkNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToWoodPlankNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToSpyglassNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class QuickCycleToShovelNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class SwordItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class BlunderbussItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class EyeOfReachItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class FlintlockItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class UnarmedCombatItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class SirenTridentItemCategory: public WeaponItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class InstrumentItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ConcertinaItemCategory: public InstrumentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class DrumItemCategory: public InstrumentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class HurdyGurdyItemCategory: public InstrumentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class EquipmentItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class BucketItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class CompassItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class LanternItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class PocketWatchItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class SpeakingTrumpetItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ShovelItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class SpyglassItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class TankardItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class FishingRodItemCategory: public EquipmentItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class ConsumableItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class WoodPlankItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class CannonballItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class FireworkItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class BaseFoodItemCategory: public ConsumableItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class DefaultItemCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class BootyCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class MysteriousNoteCategory: public ItemCategory
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class QuestItemCategory: public ItemCategory
{
public:
};


// Size 0x18 (Full Size[0x138] - InheritedSize[0x120]
class CargoRunItemDesc: public BootyItemDesc
{
public:
	Struct Guid                                                  DeliveryLocationId;                                // 0x120(0x10)
	char                                                         pad0x8_AHKGN[0x8];                                 // 0x130(0x8)
};


// Size 0x0 (Full Size[0x728] - InheritedSize[0x728]
class AlwaysCashInItemInfo: public BootyItemInfo
{
public:
};


// Size 0x10 (Full Size[0x738] - InheritedSize[0x728]
class TreasureChestItemInfo: public BootyItemInfo
{
public:
};


// Size 0x0 (Full Size[0x738] - InheritedSize[0x738]
class WeepingChestItemInfo: public TreasureChestItemInfo
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class BootyItemInfoMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x1d8 (Full Size[0x2a0] - InheritedSize[0xc8]
class BootyItemShipOwnershipComponent: public ActorComponent
{
public:
	bool                                                         FirstTimeDroppedConditionalStatTriggerSent;        // 0xc8(0x1)
	char                                                         pad0x7_W0VZQ[0x7];                                 // 0xc9(0x7)
	Class Actor*                                                 OwningShip;                                        // 0xd0(0x8)
	TArray<struct CrewShipsOwnedByHistory>                       CrewShipsOwnedByHistory;                           // 0xd8(0x10)
	char                                                         pad0x1b8_F23QV[0x1b8];                             // 0xe8(0x1b8)
};


// Size 0x100 (Full Size[0x8e0] - InheritedSize[0x7e0]
class Compass: public PoseableMeshWieldableItem
{
public:
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7e0(0x8)
	Class CompassSpinComponent*                                  SpinComponent;                                     // 0x7e8(0x8)
	Class NarratedCompassDirectionComponent*                     NarratedCompassDirectionComponent;                 // 0x7f0(0x8)
	Class PoseableMeshComponent*                                 MeshToUse;                                         // 0x7f8(0x8)
	char                                                         pad0xe0_MR6JW[0xe0];                               // 0x800(0xe0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConfigurableBuryableItemInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class ConfigurableBuryableItemComponent: public ActorComponent
{
public:
	char                                                         pad0x8_L0Q2Q[0x8];                                 // 0xc8(0x8)
	bool                                                         NotBuryable;                                       // 0xd0(0x1)
	bool                                                         DoNotMakeXMarkWhenBuried;                          // 0xd1(0x1)
	bool                                                         DoNotNotifyAndMigrateWithCrew;                     // 0xd2(0x1)
	char                                                         pad0x5_7MIK6[0x5];                                 // 0xd3(0x5)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class DeliverableRedirectionBootyContext: public DeliverableRedirectionContextBase
{
public:
	byte                                                         BootyType;                                         // 0x28(0x1)
	char                                                         pad0x7_KN8OY[0x7];                                 // 0x29(0x7)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableRedirectionBootyContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
	TArray<Byte TargetBootyTypes>                                TargetBootyTypes;                                  // 0x30(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class DeliverableRedirectionCompanyContext: public DeliverableRedirectionContextBase
{
public:
	TArray<class Class*>                                         Companies;                                         // 0x28(0x10)
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class DeliverableRedirectionCompanyContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
	bool                                                         ContextCanContainMoreCompanies;                    // 0x30(0x1)
	char                                                         pad0x7_O7VOT[0x7];                                 // 0x31(0x7)
	TArray<class Class*>                                         TargetCompanies;                                   // 0x38(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class EatItemConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemProxyShipTrackerInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x168] - InheritedSize[0xc8]
class ItemProxyShipTrackerComponent: public ActorComponent
{
public:
	char                                                         pad0x10_FFMT5[0x10];                               // 0xc8(0x10)
	Class ItemProxyShipTrackerComponentDataAsset*                ShipTrackingData;                                  // 0xd8(0x8)
	Class Actor*                                                 CurrentShip;                                       // 0xe0(0x8)
	char                                                         pad0x80_LRQ26[0x80];                               // 0xe8(0x80)
};


// Size 0x0 (Full Size[0x808] - InheritedSize[0x808]
class StaticSimpleBootyItemProxy: public BaseSimpleBootyItemProxy
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ItemReactionItemProxyInterface: public Interface
{
public:
};


// Size 0xf8 (Full Size[0x900] - InheritedSize[0x808]
class ItemReactionItemProxy: public StaticSimpleBootyItemProxy
{
public:
	char                                                         pad0x8_7G0K3[0x8];                                 // 0x808(0x8)
	Class InteractableComponentWithActionRules*                  InteractableComponentWithActionRules;              // 0x810(0x8)
	Struct ItemReactionItemProxyActionRuleParams                 ItemReactionItemProxyActionRuleParams;             // 0x818(0x88)
	TArray<Assetclass InAllowedItems>                            InAllowedItems;                                    // 0x8a0(0x10)
	class                                                        ItemToGive;                                        // 0x8b0(0x8)
	Class WwiseEvent*                                            ExecuteInteractSFX;                                // 0x8b8(0x8)
	Class WwiseEvent*                                            InsertKeySFX;                                      // 0x8c0(0x8)
	Class WwiseEvent*                                            ReleaseKeySFX;                                     // 0x8c8(0x8)
	Class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x8d0(0x8)
	struct FName                                                 WwiseEmitterName;                                  // 0x8d8(0x8)
	char                                                         pad0x20_6HNO9[0x20];                               // 0x8e0(0x20)
};


// Size 0x10 (Full Size[0x818] - InheritedSize[0x808]
class StoolItemProxy: public StaticSimpleBootyItemProxy
{
public:
};


// Size 0x88 (Full Size[0x890] - InheritedSize[0x808]
class TreasureChestItemProxy: public BootyProxy
{
public:
	char                                                         pad0x10_L5Y2A[0x10];                               // 0x808(0x10)
	Class WwiseEvent*                                            ShovelEnterSurfaceSfx;                             // 0x818(0x8)
	Class WwiseEvent*                                            ExhumeStepSfx;                                     // 0x820(0x8)
	Class WwiseEvent*                                            FullyDugUpSfx;                                     // 0x828(0x8)
	Class WwiseObjectPoolWrapper*                                ChestAmbiencePool;                                 // 0x830(0x8)
	Class WwiseEvent*                                            ChestAmbiencePlay;                                 // 0x838(0x8)
	Class WwiseEvent*                                            ChestAmbienceStop;                                 // 0x840(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x848(0x8)
	Struct EncounterParams                                       CloseProximityEncounterParams;                     // 0x850(0xc)
	char                                                         pad0x4_64XW2[0x4];                                 // 0x85c(0x4)
	Class ItemDiggingAudioConfig*                                CachedAudioConfig;                                 // 0x860(0x8)
	char                                                         pad0x28_P1293[0x28];                               // 0x868(0x28)
};


// Size 0x0 (Full Size[0x890] - InheritedSize[0x890]
class TreasureChestItemProxySkeletal: public TreasureChestItemProxy
{
public:
};


// Size 0x0 (Full Size[0x890] - InheritedSize[0x890]
class TreasureChestItemProxyStatic: public TreasureChestItemProxy
{
public:
};


// Size 0x0 (Full Size[0x7e8] - InheritedSize[0x7e8]
class SkeletalMeshFloatingItemProxy: public FloatingItemProxy
{
public:
};


// Size 0x0 (Full Size[0x7e8] - InheritedSize[0x7e8]
class StaticMeshFloatingItemProxy: public FloatingItemProxy
{
public:
};


// Size 0x8 (Full Size[0xd8] - InheritedSize[0xd0]
class GiveItemUponConsumptionComponent: public ConsumableWieldableComponent
{
public:
	class                                                        ItemToGive;                                        // 0xd0(0x8)
};


// Size 0xb0 (Full Size[0x6f0] - InheritedSize[0x640]
class GoldMoundItemProxy: public ItemProxy
{
public:
	Class WwiseEvent*                                            OnMoundInteractStartLoopingSfx;                    // 0x640(0x8)
	Class WwiseEvent*                                            OnMoundInteractStopLoopingSfx;                     // 0x648(0x8)
	Class WwiseEvent*                                            OnMoundCancelPickupSfx;                            // 0x650(0x8)
	Class WwiseEvent*                                            OnMoundPickupCompleteSfx;                          // 0x658(0x8)
	Class WwiseObjectPoolWrapper*                                GoldMoundSfxPool;                                  // 0x660(0x8)
	Class Object*                                                AmbientVfx;                                        // 0x668(0x8)
	Class Object*                                                PickupVfx;                                         // 0x670(0x8)
	char                                                         pad0x20_3CCS1[0x20];                               // 0x678(0x20)
	Class ParticleSystemComponent*                               AmbientParticleSystem;                             // 0x6a8(0x8)
	Class ParticleSystemComponent*                               PickupParticleSystem;                              // 0x6b0(0x8)
	char                                                         pad0x18_ZRM3Y[0x18];                               // 0x6b8(0x18)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x6d0(0x10)
	char                                                         pad0x4_7OEBV[0x4];                                 // 0x6e0(0x4)
	float                                                        FadeOutDuration;                                   // 0x6e4(0x4)
	bool                                                         DelayedDestroyStarted;                             // 0x6e8(0x1)
	char                                                         pad0x7_GJM2T[0x7];                                 // 0x6e9(0x7)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsBootyItemSpawnSourceStatCondition: public TargetedStatCondition
{
public:
	byte                                                         TargetSpawnSource;                                 // 0x30(0x1)
	char                                                         pad0x7_YYMNG[0x7];                                 // 0x31(0x7)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsItemOwnedStatCondition: public TargetedStatCondition
{
public:
	byte                                                         OwnershipType;                                     // 0x30(0x1)
	char                                                         pad0x7_UI5CT[0x7];                                 // 0x31(0x7)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class IsTargetBootyAllegianceAwardStatCondition: public TargetedStatCondition
{
public:
	class                                                        TargetAllegiance;                                  // 0x30(0x8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsTargetBootyTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Byte TargetBootyTypes>                                TargetBootyTypes;                                  // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingBootyTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<Byte TargetBootyTypes>                                TargetBootyTypes;                                  // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class IsWieldingItemOfTypeStatCondition: public TargetedStatCondition
{
public:
	TArray<class Class*>                                         TargetItemCategories;                              // 0x30(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemFirstDroppedByMeOnMyShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemFirstDroppedByMeOnOtherShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemFirstDroppedOnShipConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ItemProxyShipTrackerComponentDataAsset: public DataAsset
{
public:
	TArray<class Class*>                                         ShipTypes;                                         // 0x28(0x10)
};


// Size 0x30 (Full Size[0x540] - InheritedSize[0x510]
class ItemSpawnTelemetryDispatchingItemInfo: public ItemInfo
{
public:
	char                                                         pad0x20_OB75Y[0x20];                               // 0x510(0x20)
	Struct Guid                                                  ItemId;                                            // 0x530(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Artifact: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Bait: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Barrel: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CollectorsChest: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Animal: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Bottles: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Cloth: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Goods: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Crate_Plants: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CursedChest_Drunken: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CursedChest_Rage: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_CursedChest_Weeping: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_EmissaryFlotsam: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_FishedItem_Comedy: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Gem: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_GunpowderBarrel: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Key_Disc: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Key_Traditional: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Skull: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Tome: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_Totem: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_TreasureChest: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMemoryConstraintCategory_WoodPlank: public MeshMemoryConstraintCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObscuringItemInterface: public Interface
{
public:
};


// Size 0x190 (Full Size[0x2a0] - InheritedSize[0x110]
class RetractableItemProxyComponent: public RetractableComponent
{
public:
};


// Size 0x58 (Full Size[0x568] - InheritedSize[0x510]
class RewardableItemInfo: public ItemInfo
{
public:
	Struct RewardId                                              RewardId;                                          // 0x510(0x8)
	byte                                                         Type;                                              // 0x518(0x1)
	char                                                         pad0x3_FLSTK[0x3];                                 // 0x519(0x3)
	struct FName                                                 Rarity;                                            // 0x51c(0x8)
	char                                                         pad0x4_BZKQP[0x4];                                 // 0x524(0x4)
	TArray<struct HandInStats>                                   HandInStats;                                       // 0x528(0x10)
	TArray<struct LegendHandInStats>                             LegendHandInStats;                                 // 0x538(0x10)
	Class PopUpMessageDesc*                                      PopUpMessageDesc;                                  // 0x548(0x8)
	Class PopUpAudioDesc*                                        PopUpAudioOverrides;                               // 0x550(0x8)
	Struct Guid                                                  Id;                                                // 0x558(0x10)
};


// Size 0x0 (Full Size[0x568] - InheritedSize[0x568]
class NonStorableRewardableItemInfo: public RewardableItemInfo
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShovelInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x7e0] - InheritedSize[0x7e0]
class StaticSimpleBootyWieldableItem: public NonDisplaceableLargeStaticMeshWieldableItem
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SpawnableItemsDataAsset: public DataAsset
{
public:
	TArray<class SpawnableItemsDataAsset*>                       AdditionalSpawnableItems;                          // 0x28(0x10)
	TArray<struct Categories>                                    Categories;                                        // 0x38(0x10)
};


// Size 0x20 (Full Size[0x800] - InheritedSize[0x7e0]
class SimpleBootyInteractiveItem: public StaticSimpleBootyWieldableItem
{
public:
	char                                                         pad0x8_BJ12T[0x8];                                 // 0x7e0(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7e8(0x8)
	Class WwiseEvent*                                            InteractionSfx;                                    // 0x7f0(0x8)
	char                                                         pad0x8_1BZI1[0x8];                                 // 0x7f8(0x8)
};


// Size 0x40 (Full Size[0x408] - InheritedSize[0x3c8]
class TrinketActor: public Actor
{
public:
	char                                                         pad0x10_2VDYP[0x10];                               // 0x3c8(0x10)
	Class MountableComponent*                                    MountableComponent;                                // 0x3d8(0x8)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x3e0(0x8)
	Class MergedStaticMeshMemoryConstraintComponent*             MergedStaticMeshMemoryConstraintComponent;         // 0x3e8(0x8)
	Class SceneComponent*                                        Pivot;                                             // 0x3f0(0x8)
	Class NudgeInterpolationParamsDataAsset*                     NudgeDataAsset;                                    // 0x3f8(0x8)
	Class TrinketSfxDataAsset*                                   SfxDataAsset;                                      // 0x400(0x8)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class UsableItemObscuringComponent: public ActorComponent
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedTreasureChestDescAsset: public DataAsset
{
public:
	TArray<struct Rewards>                                       Rewards;                                           // 0x28(0x10)
};


// Size 0xb0 (Full Size[0x890] - InheritedSize[0x7e0]
class WieldableIngestible: public WieldableItem
{
public:
	char                                                         pad0x8_A00QI[0x8];                                 // 0x7e0(0x8)
	Class GiveItemUponConsumptionComponent*                      GiveItemUponConsumptionComponent;                  // 0x7e8(0x8)
	Class ApplyStatusToConsumerComponent*                        ApplyStatusToConsumerComponent;                    // 0x7f0(0x8)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x7f8(0x8)
	Class FeedableComponent*                                     FeedableComponent;                                 // 0x800(0x8)
	float                                                        InToIngestionDuration;                             // 0x808(0x4)
	float                                                        OutOfIngestionDuration;                            // 0x80c(0x4)
	bool                                                         CanIngest;                                         // 0x810(0x1)
	char                                                         pad0x7_WB5OO[0x7];                                 // 0x811(0x7)
	Class WwiseEvent*                                            IngestAudioEvent;                                  // 0x818(0x8)
	struct FName                                                 IngestAudioFoodType;                               // 0x820(0x8)
	Struct PlayerStat                                            IngestionStat;                                     // 0x828(0x4)
	Struct PlayerStat                                            IngestionShipStat;                                 // 0x82c(0x4)
	char                                                         pad0x48_1KF33[0x48];                               // 0x830(0x48)
	Class WwiseEvent*                                            EatingSfx;                                         // 0x878(0x8)
	Class WwiseEvent*                                            EatingSfxStop;                                     // 0x880(0x8)
	char                                                         pad0x8_3VDXR[0x8];                                 // 0x888(0x8)
};


// Size 0x0 (Full Size[0x890] - InheritedSize[0x890]
class StaticWieldableIngestible: public WieldableIngestible
{
public:
};


// Size 0x0 (Full Size[0x890] - InheritedSize[0x890]
class SkeletalWieldableIngestible: public WieldableIngestible
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CampaignServiceInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0x450] - InheritedSize[0x3c8]
class CampaignService: public Actor
{
public:
	char                                                         pad0x30_PF2F9[0x30];                               // 0x3c8(0x30)
	TArray<struct ActiveCampaigns>                               ActiveCampaigns;                                   // 0x3f8(0x10)
	char                                                         pad0x48_CEMMK[0x48];                               // 0x408(0x48)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ChainLightningDeveloperSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  ChainLightningVisualActorSettingsAsset;            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChainLightningReceiverInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x158] - InheritedSize[0xc8]
class ChainLightningReceiverComponent: public ActorComponent
{
public:
	char                                                         pad0x8_4HQWT[0x8];                                 // 0xc8(0x8)
	float                                                        ShockDuration;                                     // 0xd0(0x4)
	char                                                         pad0x84_QLXH9[0x84];                               // 0xd4(0x84)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class ChainLightningSettingsAsset: public DataAsset
{
public:
	Struct ChainLightningParameters                              ChainLightningParameters;                          // 0x28(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ChainLightningSourceInterface: public Interface
{
public:
};


// Size 0x118 (Full Size[0x1e0] - InheritedSize[0xc8]
class ChainLightningSourceComponent: public ActorComponent
{
public:
	char                                                         pad0x8_B7RR7[0x8];                                 // 0xc8(0x8)
	Struct Status                                                StatusToApply;                                     // 0xd0(0x18)
	Struct StringAssetReference                                  ChainLightningSettingsAsset;                       // 0xe8(0x10)
	char                                                         pad0x20_6FRTY[0x20];                               // 0xf8(0x20)
	TArray<struct AuthorityChains>                               AuthorityChains;                                   // 0x118(0x10)
	TArray<struct ClientChains>                                  ClientChains;                                      // 0x128(0x10)
	int                                                          FramesSinceLastRep;                                // 0x138(0x4)
	int                                                          MaxFramesBeforeRep;                                // 0x13c(0x4)
	int                                                          ChainsSinceLastRep;                                // 0x140(0x4)
	char                                                         pad0x4_TRBJP[0x4];                                 // 0x144(0x4)
	Class ChainLightningSettingsAsset*                           CachedChainLightningSettingsAsset;                 // 0x148(0x8)
	char                                                         pad0x90_Q7XOM[0x90];                               // 0x150(0x90)
};


// Size 0xd8 (Full Size[0x4a0] - InheritedSize[0x3c8]
class ChainLightningVisualActor: public Actor
{
public:
	Struct WwiseEmitter                                          Emitter;                                           // 0x3c8(0x20)
	char                                                         pad0x8_GFS0K[0x8];                                 // 0x3e8(0x8)
	Struct ChainData                                             Data;                                              // 0x3f0(0x18)
	TArray<class MaterialInstanceDynamic*>                       CachedChainMaterials;                              // 0x408(0x10)
	TArray<class StaticMeshComponent*>                           CachedChainComponents;                             // 0x418(0x10)
	char                                                         pad0x40_F2578[0x40];                               // 0x428(0x40)
	Class ChainLightningVisualActorSettingsAsset*                SettingsAsset;                                     // 0x468(0x8)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x470(0x8)
	char                                                         pad0x18_R3RSJ[0x18];                               // 0x478(0x18)
	TArray<Weakclass LightningVFXComponents>                     LightningVFXComponents;                            // 0x490(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class ChainLightningVisualActorSettingsAsset: public DataAsset
{
public:
	Class StaticMesh*                                            MeshAsset;                                         // 0x28(0x8)
	Class MaterialInterface*                                     MaterialAsset;                                     // 0x30(0x8)
	Class WwiseEvent*                                            ChainLightningCreatedOneShot;                      // 0x38(0x8)
	Class WwiseObjectPoolWrapper*                                ChainLightningVisualActorPool;                     // 0x40(0x8)
	Class Object*                                                PropogationVfx;                                    // 0x48(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ShockStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NameplateServiceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class NameplateService: public Object
{
public:
	char                                                         pad0x8_K4JIQ[0x8];                                 // 0x28(0x8)
	TArray<class NameplateComponent*>                            RegisteredNameplates;                              // 0x30(0x10)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NameplateSettings: public DeveloperSettings
{
public:
	byte                                                         NameplateCollisionChannel;                         // 0x38(0x1)
	char                                                         pad0x7_773SC[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NameplateVisibilityInfluencerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NameplateVisibilityOverrideInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameplateComponentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerNameplateLocationOverrideInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class PlayerNameplateLocationOverrideComponent: public ActorComponent
{
public:
	char                                                         pad0x8_6OZLI[0x8];                                 // 0xc8(0x8)
	Struct Transform                                             NameplateLocation;                                 // 0xd0(0x30)
	float                                                        AdditionalHeight;                                  // 0x100(0x4)
	char                                                         pad0xc_YPOXG[0xc];                                 // 0x104(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HiddenActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HideInObjectActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HidingInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x48] - InheritedSize[0x30]
class StatusResponseAddManagedVulnerabilityLayer: public StatusResponse
{
public:
	struct FName                                                 VulnerabilityName;                                 // 0x30(0x8)
	Class DamageableVulnerabilityLayer*                          VulnerabilityToApply;                              // 0x38(0x8)
	bool                                                         CancelVulnerabilityOnDeactivate;                   // 0x40(0x1)
	char                                                         pad0x3_3F788[0x3];                                 // 0x41(0x3)
	float                                                        VulnerabilityDuration;                             // 0x44(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VulnerabilityLayerStateManagerInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class VulnerabilityLayerStateManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x30_U6OKT[0x30];                               // 0xc8(0x30)
	TArray<struct ManagedVulnerabilityLayers>                    ManagedVulnerabilityLayers;                        // 0xf8(0x10)
	char                                                         pad0x8_5NOTT[0x8];                                 // 0x108(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StunnableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AICharacterEngageEnemyMethod: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractableAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LongRangeGunAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShortRangeGunAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeWeaponAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExplosiveAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ThrowableAICharacterEngageEnemyMethod: public AICharacterEngageEnemyMethod
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAIItemParamsDataAsset: public DataAsset
{
public:
	TArray<struct ItemEngageEnemyMethods>                        ItemEngageEnemyMethods;                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AICharacterRecoverMethod: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FleeAICharacterRecoverMethod: public AICharacterRecoverMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HealAICharacterRecoverMethod: public AICharacterRecoverMethod
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x90 (Full Size[0x4d0] - InheritedSize[0x440]
class AIItemSpawnComponent: public ItemSpawnComponent
{
public:
	float                                                        SpawnDelayAfterDeath;                              // 0x440(0x4)
	float                                                        PercentageChanceToDrop;                            // 0x444(0x4)
	bool                                                         UseComponentTransformAsSpawnTransform;             // 0x448(0x1)
	char                                                         pad0x7_S3MT4[0x7];                                 // 0x449(0x7)
	TArray<struct DeathItemSpawnDistributionOverrides>           DeathItemSpawnDistributionOverrides;               // 0x450(0x10)
	Class ShortRangeMarkerDataAsset*                             RewardMarkerDataAsset;                             // 0x460(0x8)
	char                                                         pad0x68_XOF06[0x68];                               // 0x468(0x68)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class AICharacterPartsDesc: public MeshMemoryConstraintsAIPartsDesc
{
public:
	Struct StringAssetReference                                  KilledVfxTemplate;                                 // 0x80(0x10)
};


// Size 0x20 (Full Size[0xa0] - InheritedSize[0x80]
class MermaidPartsDesc: public MeshMemoryConstraintsAIPartsDesc
{
public:
	Struct StringAssetReference                                  PlaySongEvent;                                     // 0x80(0x10)
	Struct StringAssetReference                                  StopSongEvent;                                     // 0x90(0x10)
};


// Size 0x28 (Full Size[0xa8] - InheritedSize[0x80]
class SharkPartsDesc: public MeshMemoryConstraintsAIPartsDesc
{
public:
	Struct FString                                               SharkPartsTag;                                     // 0x80(0x10)
	Struct SharkPlayerStats                                      SharkPlayerStats;                                  // 0x90(0x8)
	TArray<struct Materials>                                     Materials;                                         // 0x98(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AISpawnActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AttackAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EatingAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FleeAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PursuitAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StartledAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WanderAIStrategyId: public AIStrategyId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TeleportAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class TeleportAIAbilityParams: public AthenaAIAbilityParams
{
public:
	Class EnvQuery*                                              QueryTemplate;                                     // 0xc8(0x8)
	float                                                        MinDistance;                                       // 0xd0(0x4)
	float                                                        MaxDistance;                                       // 0xd4(0x4)
	bool                                                         MaintainRotation;                                  // 0xd8(0x1)
	bool                                                         UseResurfaceDelay;                                 // 0xd9(0x1)
	char                                                         pad0x6_9PB13[0x6];                                 // 0xda(0x6)
	Struct AthenaAIAbilityPlayerBasedRanges                      ResurfaceDelay;                                    // 0xe0(0x10)
};


// Size 0x10 (Full Size[0x50] - InheritedSize[0x40]
class TeleportAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
	float                                                        MinTeleportDistanceMultiplier;                     // 0x40(0x4)
	float                                                        MaxTeleportDistanceMultiplier;                     // 0x44(0x4)
	float                                                        ResurfaceDelayMultiplier;                          // 0x48(0x4)
	char                                                         pad0x4_J6XN5[0x4];                                 // 0x4c(0x4)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AthenaAICrewStrengthDynamicParamsDataAsset: public DataAsset
{
public:
	TArray<struct PlayerShipSizeValues>                          PlayerShipSizeValues;                              // 0x28(0x10)
	int                                                          PlayerValue;                                       // 0x38(0x4)
	float                                                        Radius;                                            // 0x3c(0x4)
	TArray<struct PlayerCrewStrengthNamedParamMapping>           PlayerCrewStrengthNamedParamMapping;               // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactDecalParamModifier: public Object
{
public:
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class ImpactDataAsset: public DataAsset
{
public:
	Class MaterialInterface*                                     DecalMaterial;                                     // 0x28(0x8)
	TArray<class Class*>                                         DecalParamModifiers;                               // 0x30(0x10)
	Struct Vector                                                DecalSize;                                         // 0x40(0xc)
	float                                                        FadeScreenSize;                                    // 0x4c(0x4)
	float                                                        DecalLifetime;                                     // 0x50(0x4)
	char                                                         pad0x4_VG2M9[0x4];                                 // 0x54(0x4)
	Class Object*                                                Particles;                                         // 0x58(0x8)
	Class Object*                                                TriggeredForClientParticles;                       // 0x60(0x8)
	Class Object*                                                SplashParticles;                                   // 0x68(0x8)
	byte                                                         ParticlesVfxRegion;                                // 0x70(0x1)
	char                                                         pad0x7_AUMNE[0x7];                                 // 0x71(0x7)
	Class WwiseEvent*                                            WwiseEvent;                                        // 0x78(0x8)
	Class WwiseEvent*                                            WwiseEventLayer;                                   // 0x80(0x8)
	Class WwiseObjectPoolWrapper*                                WwiseObjectPool;                                   // 0x88(0x8)
	bool                                                         ParticleSystemIsPerPoint;                          // 0x90(0x1)
	bool                                                         AttachToPlayer;                                    // 0x91(0x1)
	bool                                                         EnableUnderWaterImpact;                            // 0x92(0x1)
	char                                                         pad0x1_LD8K0[0x1];                                 // 0x93(0x1)
	float                                                        MaxDepthForSplash;                                 // 0x94(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class ImpactListDataAsset: public DataAsset
{
public:
	int                                                          MaxAudioEventsPerDischarge;                        // 0x28(0x4)
	char                                                         pad0x4_80PBT[0x4];                                 // 0x2c(0x4)
	TArray<struct ProjectileList>                                ProjectileList;                                    // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactDecalParamModifierTime: public ImpactDecalParamModifier
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactDecalParamModifierVomit: public ImpactDecalParamModifier
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ImpactFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ImpactSettings: public Object
{
public:
	Struct StringAssetReference                                  ImpactListAssetRef;                                // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeepSeaRegionInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x438] - InheritedSize[0x3c8]
class DeepSeaRegion: public Actor
{
public:
	char                                                         pad0x8_N3AH3[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	char                                                         pad0x18_LWPFI[0x18];                               // 0x3d8(0x18)
	Struct DeepSeaRegionData                                     DeepSeaRegionData;                                 // 0x3f0(0x1c)
	char                                                         pad0x4_8EYRF[0x4];                                 // 0x40c(0x4)
	Struct DeepSeaRegionAmbienceAudio                            DeepSeaRegionAudio;                                // 0x410(0x18)
	Struct DeepSeaRegionScreenEffects                            DeepSeaRegionScreenEffects;                        // 0x428(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeepSeaRegionServiceInterface: public Interface
{
public:
};


// Size 0x118 (Full Size[0x4e0] - InheritedSize[0x3c8]
class DeepSeaRegionService: public Actor
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class BuoyantObjectSpawnParamsDataAsset: public DataAsset
{
public:
	Struct BuoyantObjectSpawnParams                              Params;                                            // 0x28(0x48)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class BuoyantObjectSpawnProfileDataAsset: public DataAsset
{
public:
	Struct BuoyantObjectSpawnProfile                             Profile;                                           // 0x28(0xf0)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AthenaStreamedLevelDataAsset: public DataAsset
{
public:
	TArray<struct LevelsToLoad>                                  LevelsToLoad;                                      // 0x28(0x10)
	Struct FString                                               PackagePath;                                       // 0x38(0x10)
	struct FName                                                 StreamingLevelFeature;                             // 0x48(0x8)
	TArray<Byte RequiredPlayModes>                               RequiredPlayModes;                                 // 0x50(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaStreamedLevelServiceInterface: public Interface
{
public:
};


// Size 0x88 (Full Size[0xb0] - InheritedSize[0x28]
class AthenaStreamedLevelService: public Object
{
public:
	char                                                         pad0x8_J8C04[0x8];                                 // 0x28(0x8)
	TArray<struct ManagedLevels>                                 ManagedLevels;                                     // 0x30(0x10)
	Class FeatureToggledLevelsDataAsset*                         FeatureToggledLevelsDA;                            // 0x40(0x8)
	char                                                         pad0x68_291EO[0x68];                               // 0x48(0x68)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaStreamedLevelServiceBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class FeatureToggledLevelsDataAsset: public DataAsset
{
public:
	TArray<struct FeaturedToggledWorldLayouts>                   FeaturedToggledWorldLayouts;                       // 0x28(0x10)
	TArray<struct FeatureToggledLevels>                          FeatureToggledLevels;                              // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstancedLevelGetterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StreamingTelemetryProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCMeshRetrievalInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class CharacterMeshRetrievalComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CompanyNPCInterface: public Interface
{
public:
};


// Size 0xb8 (Full Size[0xe0] - InheritedSize[0x28]
class DeliverableRedirectionNPCContext: public DeliverableRedirectionContextBase
{
public:
	Struct NPCData                                               NPCData;                                           // 0x28(0xb8)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class DeliverableRedirectionNPCContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
	Struct Guid                                                  SpecificNPCId;                                     // 0x30(0x10)
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class DeliverableRedirectionNPCDestinationDescriptor: public DeliverableRedirectionDestinationDescriptorBase
{
public:
	byte                                                         DisplayNameType;                                   // 0x28(0x1)
	char                                                         pad0x7_89L4Q[0x7];                                 // 0x29(0x7)
	Struct FText                                                 FemaleNPCDestination;                              // 0x30(0x38)
	Struct FText                                                 MaleNPCDestination;                                // 0x68(0x38)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class DoesCompanyNPCNameContainStatCondition: public TargetedStatCondition
{
public:
	struct FName                                                 CompanyNPCNameSubString;                           // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InteractableGrammaticalGenderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedNPCInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class NamedNPCComponent: public ActorComponent
{
public:
	char                                                         pad0x8_L3LK6[0x8];                                 // 0xc8(0x8)
	struct FName                                                 NPCName;                                           // 0xd0(0x8)
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class NPCAnimationInstanceOverrideComponent: public ActorComponent
{
public:
	char                                                         pad0x8_WR9G7[0x8];                                 // 0xc8(0x8)
	class                                                        OriginalAnimInstance;                              // 0xd0(0x8)
	char                                                         pad0x8_BUPEE[0x8];                                 // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCInteractionBlockerInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class NPCBusyTrackerComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCCommerceEventInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCCustomItemPurchaseInterface: public NPCCommerceEventInterface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCHideInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class NPCHideComponent: public ActorComponent
{
public:
	char                                                         pad0x8_SIYXC[0x8];                                 // 0xc8(0x8)
	bool                                                         bHideActive;                                       // 0xd0(0x1)
	char                                                         pad0x7_DAWHF[0x7];                                 // 0xd1(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCIdAsset: public DataAsset
{
public:
	TArray<struct FName>                                         NPCIds;                                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCLoadedOnClientServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class NPCLoadedOnClientService: public Object
{
public:
	char                                                         pad0x8_HPMZO[0x8];                                 // 0x28(0x8)
	TArray<struct AllNPCData>                                    AllNPCData;                                        // 0x30(0x10)
	char                                                         pad0x18_GJMGZ[0x18];                               // 0x40(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCPriorityTickInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OfferingNPCInterface: public Interface
{
public:
};


// Size 0xd0 (Full Size[0x198] - InheritedSize[0xc8]
class OfferingNPCComponent: public ActorComponent
{
public:
	char                                                         pad0x8_30Z02[0x8];                                 // 0xc8(0x8)
	struct FName                                                 RightHandWieldSocket;                              // 0xd0(0x8)
	struct FName                                                 LeftHandWieldSocket;                               // 0xd8(0x8)
	class                                                        ItemToShow;                                        // 0xe0(0x8)
	class                                                        ItemToOffer;                                       // 0xe8(0x8)
	Class Actor*                                                 ItemShown;                                         // 0xf0(0x8)
	Struct FText                                                 PickupItemText;                                    // 0xf8(0x38)
	Struct FText                                                 CannotPickupItemText;                              // 0x130(0x38)
	char                                                         pad0x30_969W8[0x30];                               // 0x168(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RewardHandInInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SovereignInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CollectorsChestInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WeightedGoldRewardsDataAsset: public DataAsset
{
public:
	TArray<struct GoldRewards>                                   GoldRewards;                                       // 0x28(0x10)
};


// Size 0x58 (Full Size[0xb0] - InheritedSize[0x58]
class CollectorsChestItemDescSpawnData: public ItemSpawnData
{
public:
	char                                                         pad0x20_WBBI4[0x20];                               // 0x58(0x20)
	Struct WeightedProbabilityRange                              NumberOfItemsToSpawn;                              // 0x78(0x20)
	Struct WeightedItemDescSpawnDataAssetsWithWeights            ItemsToSpawnInsideCollectorsChest;                 // 0x98(0x10)
	Class WeightedGoldRewardsDataAsset*                          GoldToSpawnInsideCollectorsChest;                  // 0xa8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LayerInContainerInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x660] - InheritedSize[0x620]
class LayerInContainerComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_1UXWK[0x8];                                 // 0x620(0x8)
	float                                                        FadeRate;                                          // 0x628(0x4)
	bool                                                         CanTake;                                           // 0x62c(0x1)
	char                                                         pad0x3_ZNHI9[0x3];                                 // 0x62d(0x3)
	Class LayerInContainerComponent*                             LayerBlockingTakingThisLayer;                      // 0x630(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x638(0x10)
	char                                                         pad0x18_9NA3J[0x18];                               // 0x648(0x18)
};


// Size 0x98 (Full Size[0x7d0] - InheritedSize[0x738]
class CollectorsChestItemInfo: public TreasureChestItemInfo
{
public:
	Struct RewardId                                              GoldInContainerRewardId;                           // 0x738(0x8)
	char                                                         pad0x18_5I5I1[0x18];                               // 0x740(0x18)
	Class GoldInContainerDataAsset*                              GoldInContainerDataAsset;                          // 0x758(0x8)
	Class CollectorsChestSharedParamsDataAsset*                  CollectorsChestSharedParams;                       // 0x760(0x8)
	Class QuestBookPagesInContainerDataAsset*                    PagesInContainerDataAsset;                         // 0x768(0x8)
	TArray<class Class*>                                         CurrentLayerPriorityOrder;                         // 0x770(0x10)
	byte                                                         Material;                                          // 0x780(0x1)
	char                                                         pad0xf_44487[0xf];                                 // 0x781(0xf)
	TArray<class ItemInfo*>                                      ItemInfosToStore;                                  // 0x790(0x10)
	Class CollectorsChestShipOwnershipPropagationComponent*      CollectorsChestShipOwnershipPropagationComponent;  // 0x7a0(0x8)
	char                                                         pad0x28_F0U8M[0x28];                               // 0x7a8(0x28)
};


// Size 0x8 (Full Size[0x7d8] - InheritedSize[0x7d0]
class LockedCollectorsChestItemInfo: public CollectorsChestItemInfo
{
public:
	Struct RewardId                                              EmptyContainerRewardId;                            // 0x7d0(0x8)
};


// Size 0x18 (Full Size[0x8a8] - InheritedSize[0x890]
class CollectorsChestItemProxyBase: public TreasureChestItemProxy
{
public:
};


// Size 0x8 (Full Size[0x8b0] - InheritedSize[0x8a8]
class CollectorsChestItemProxyWithOpenableComponent: public CollectorsChestItemProxyBase
{
public:
	Class OpenableItemComponent*                                 OpenableItemComponent;                             // 0x8a8(0x8)
};


// Size 0x0 (Full Size[0x8b0] - InheritedSize[0x8b0]
class CollectorsChestItemProxy: public CollectorsChestItemProxyWithOpenableComponent
{
public:
};


// Size 0x0 (Full Size[0x8b0] - InheritedSize[0x8b0]
class CollectorsChestItemProxyStatic: public CollectorsChestItemProxyWithOpenableComponent
{
public:
};


// Size 0x0 (Full Size[0x8a8] - InheritedSize[0x8a8]
class CollectorsChestItemProxyWithNoOpenableComponent: public CollectorsChestItemProxyBase
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CollectorsChestItemSlotDefinitionDataAsset: public DataAsset
{
public:
	TArray<struct AllowedObjects>                                AllowedObjects;                                    // 0x28(0x10)
	bool                                                         AllowAll;                                          // 0x38(0x1)
	char                                                         pad0x7_4UT9Y[0x7];                                 // 0x39(0x7)
};


// Size 0x148 (Full Size[0x270] - InheritedSize[0x128]
class CollectorsChestItemSlotInteractable: public InteractableComponent
{
public:
	char                                                         pad0x10_7DD0E[0x10];                               // 0x128(0x10)
	int                                                          SlotId;                                            // 0x138(0x4)
	char                                                         pad0x14_D0MZ3[0x14];                               // 0x13c(0x14)
	Class StaticMeshMemoryConstraintComponent*                   ItemMeshComponent;                                 // 0x150(0x8)
	Struct CollectorsChestStoredItemInfo                         StoredItemInfo;                                    // 0x158(0x68)
	char                                                         pad0x10_I5VLP[0x10];                               // 0x1c0(0x10)
	Class WwiseEvent*                                            PlaceItemSound;                                    // 0x1d0(0x8)
	Class WwiseEvent*                                            PickupItemSound;                                   // 0x1d8(0x8)
	float                                                        PlaceLerpTime;                                     // 0x1e0(0x4)
	float                                                        LocalPredictionTimeout;                            // 0x1e4(0x4)
	char                                                         pad0x78_1JYAY[0x78];                               // 0x1e8(0x78)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x260(0x8)
	char                                                         pad0x8_ZSFLH[0x8];                                 // 0x268(0x8)
};


// Size 0x40 (Full Size[0x820] - InheritedSize[0x7e0]
class CollectorsChestWieldableItemBase: public WieldableItem
{
public:
	char                                                         pad0x18_AAXJ5[0x18];                               // 0x7e0(0x18)
	TArray<class CollectorsChestItemSlotInteractable*>           Slots;                                             // 0x7f8(0x10)
	char                                                         pad0x18_C221K[0x18];                               // 0x808(0x18)
};


// Size 0x0 (Full Size[0x820] - InheritedSize[0x820]
class CollectorsChestWieldableItemWithOpenableComponent: public CollectorsChestWieldableItemBase
{
public:
	Class OpenableItemComponent*                                 OpenableItemComponent;                             // 0x818(0x8)
};


// Size 0x0 (Full Size[0x820] - InheritedSize[0x820]
class CollectorsChestWieldableItem: public CollectorsChestWieldableItemWithOpenableComponent
{
public:
};


// Size 0x0 (Full Size[0x820] - InheritedSize[0x820]
class CollectorsChestStaticWieldableItem: public CollectorsChestWieldableItemWithOpenableComponent
{
public:
};


// Size 0x0 (Full Size[0x820] - InheritedSize[0x820]
class CollectorsChestWieldableItemWithNoOpenableComponent: public CollectorsChestWieldableItemBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CollectorsChestMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CollectorsChestSharedParamsDataAsset: public DataAsset
{
public:
	TArray<class CollectorsChestItemSlotDefinitionDataAsset*>    SlotDefinitions;                                   // 0x28(0x10)
};


// Size 0xa0 (Full Size[0x168] - InheritedSize[0xc8]
class CollectorsChestShipOwnershipPropagationComponent: public ActorComponent
{
public:
	Class Actor*                                                 OwningShip;                                        // 0xc8(0x8)
	char                                                         pad0x98_G1PIV[0x98];                               // 0xd0(0x98)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DeliverableCollectorsChestRequirement: public DeliverableRequirementBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DeliverableLockedCollectorsChestRequirement: public DeliverableRequirementBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DeliverableRedirectionNonEmptyCollectorsChestContext: public DeliverableRedirectionContextBase
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DeliverableRedirectionNonEmptyCollectorsChestContextHandler: public DeliverableRedirectionContextHandlerBase
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class FillCollectorsChestWithItemsDataAsset: public DataAsset
{
public:
	Struct WeightedProbabilityRange                              NumberOfItemsToSpawn;                              // 0x28(0x20)
	Struct WeightedItemDescSpawnDataAssetsWithWeights            ItemsToSpawnInsideCollectorsChest;                 // 0x48(0x10)
	Class WeightedGoldRewardsDataAsset*                          GoldToSpawnInsideCollectorsChest;                  // 0x58(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class GoldInContainerDataAsset: public DataAsset
{
public:
	TArray<struct GoldData>                                      GoldData;                                          // 0x28(0x10)
};


// Size 0x60 (Full Size[0x6c0] - InheritedSize[0x660]
class GoldInContainerComponent: public LayerInContainerComponent
{
public:
	Struct RewardId                                              GoldRewardId;                                      // 0x660(0x8)
	char                                                         pad0x58_6MJ68[0x58];                               // 0x668(0x58)
};


// Size 0x50 (Full Size[0x6b0] - InheritedSize[0x660]
class QuestBookPagesInContainerComponent: public LayerInContainerComponent
{
public:
	char                                                         pad0x18_WH3UB[0x18];                               // 0x660(0x18)
	Struct FText                                                 ActionTooltipDisplaySentence;                      // 0x678(0x38)
};


// Size 0xb8 (Full Size[0xe0] - InheritedSize[0x28]
class QuestBookPagesInContainerDataAsset: public DataAsset
{
public:
	char                                                         pad0x8_84BBK[0x8];                                 // 0x28(0x8)
	Struct Transform                                             Transform;                                         // 0x30(0x30)
	Class StaticMesh*                                            PagesMesh;                                         // 0x60(0x8)
	Struct FText                                                 ActionTooltipDisplayString;                        // 0x68(0x38)
	Struct FText                                                 ActionTooltipDisplayStringSentence;                // 0xa0(0x38)
	char                                                         pad0x8_09I7I[0x8];                                 // 0xd8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerVariant: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BaseWorldMarker: public Object
{
public:
	Struct Vector_NetQuantize                                    MarkerPosition;                                    // 0x28(0xc)
	char                                                         pad0x4_N59FK[0x4];                                 // 0x34(0x4)
	class                                                        Variant;                                           // 0x38(0x8)
};


// Size 0x20 (Full Size[0x60] - InheritedSize[0x40]
class MovingWorldMarker: public BaseWorldMarker
{
public:
	byte                                                         AttachType;                                        // 0x40(0x1)
	char                                                         pad0x7_57CB7[0x7];                                 // 0x41(0x7)
	Class Actor*                                                 TrackedLocationOwner;                              // 0x48(0x8)
	Struct Vector_NetQuantize                                    MarkerLocalAttachPosition;                         // 0x50(0xc)
	char                                                         pad0x4_CR8K8[0x4];                                 // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GenericWorldMapMarkerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerListenerInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x1a8] - InheritedSize[0xc8]
class WorldMarkerManagerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_XVU7J[0x8];                                 // 0xc8(0x8)
	TArray<struct MarkerVariants>                                MarkerVariants;                                    // 0xd0(0x10)
	TArray<struct FeatureToggledMarkerVariants>                  FeatureToggledMarkerVariants;                      // 0xe0(0x10)
	TArray<class BaseWorldMarker*>                               MarkerDataObjects;                                 // 0xf0(0x10)
	TArray<struct ClientMarkerRepresentations>                   ClientMarkerRepresentations;                       // 0x100(0x10)
	char                                                         pad0x98_0OK87[0x98];                               // 0x110(0x98)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerRepresentationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMarkerRoutingInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class WorldMarkerRoutingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_00R9T[0x8];                                 // 0xc8(0x8)
	class                                                        DefaultListenerType;                               // 0xd0(0x8)
	char                                                         pad0x10_BI4CW[0x10];                               // 0xd8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BootyStorageBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BootyStorageInterface: public Interface
{
public:
};


// Size 0x390 (Full Size[0x758] - InheritedSize[0x3c8]
class BootyStorageService: public Actor
{
public:
	char                                                         pad0x88_NIA4W[0x88];                               // 0x3c8(0x88)
	Class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x450(0x8)
	Class BootyStorageSettingsAsset*                             BootyStorageSettingsAsset;                         // 0x458(0x8)
	TArray<struct Storage>                                       Storage;                                           // 0x460(0x10)
	Struct EnvQueryRequest                                       SpawnBootyEQSRequest;                              // 0x470(0x170)
	Struct EnvQueryRequest                                       SpawnRetrievalActorEQSRequest;                     // 0x5e0(0x170)
	char                                                         pad0x8_2H2CK[0x8];                                 // 0x750(0x8)
};


// Size 0x40 (Full Size[0x78] - InheritedSize[0x38]
class BootyStorageSettings: public DeveloperSettings
{
public:
	float                                                        StoreHoldTime;                                     // 0x38(0x4)
	float                                                        RetrieveHoldTime;                                  // 0x3c(0x4)
	float                                                        PickupPointSpawnDepth;                             // 0x40(0x4)
	float                                                        PickupDismissDuration;                             // 0x44(0x4)
	float                                                        LargeShipPickupDismissDistanceCheck;               // 0x48(0x4)
	float                                                        MediumShipPickupDismissDistanceCheck;              // 0x4c(0x4)
	float                                                        SmallShipPickupDismissDistanceCheck;               // 0x50(0x4)
	byte                                                         MaxStoragePerLocation;                             // 0x54(0x1)
	char                                                         pad0x3_P0167[0x3];                                 // 0x55(0x3)
	Struct StringAssetReference                                  BootyStorageSettingsAsset;                         // 0x58(0x10)
	TArray<class Class*>                                         BlacklistedCategories;                             // 0x68(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BootyStorageSettingsAsset: public DataAsset
{
public:
	Class EnvQuery*                                              SpawnBootyCheatEQSQuery;                           // 0x28(0x8)
	class                                                        RetrievalActor;                                    // 0x30(0x8)
	Class EnvQuery*                                              SpawnRetrievalActorEQSQuery;                       // 0x38(0x8)
};


// Size 0x378 (Full Size[0x740] - InheritedSize[0x3c8]
class RetrieveBootyActor: public Actor
{
public:
	char                                                         pad0x10_TSHLQ[0x10];                               // 0x3c8(0x10)
	Class SceneComponent*                                        Root;                                              // 0x3d8(0x8)
	Class RetrieveBootyHandInComponent*                          RetrievalComponent;                                // 0x3e0(0x8)
	Class SkeletalMeshComponent*                                 Mesh;                                              // 0x3e8(0x8)
	Class ActorActivationComponent*                              ActorActivationComponent;                          // 0x3f0(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x3f8(0x8)
	Class ParticleSystemComponent*                               BeaconComponent;                                   // 0x400(0x8)
	Class AIPartsRetrievalComponent*                             AIPartsRetrievalComponent;                         // 0x408(0x8)
	Class AIPartsCategory*                                       AIParts;                                           // 0x410(0x8)
	TArray<struct AnimMap>                                       AnimMap;                                           // 0x418(0x10)
	float                                                        SurfaceTolerance;                                  // 0x428(0x4)
	float                                                        LocationBlendSpeed;                                // 0x42c(0x4)
	float                                                        SurfaceStickSpeed;                                 // 0x430(0x4)
	char                                                         pad0x4_WTCKS[0x4];                                 // 0x434(0x4)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x438(0x8)
	Class WwiseEvent*                                            PlaySongEvent;                                     // 0x440(0x8)
	Class WwiseEvent*                                            StopSongEvent;                                     // 0x448(0x8)
	Class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x450(0x8)
	char                                                         pad0x1e0_WLOQB[0x1e0];                             // 0x458(0x1e0)
	struct FName                                                 LocalIsland;                                       // 0x638(0x8)
	char                                                         pad0xf8_X26MX[0xf8];                               // 0x640(0xf8)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x738(0x8)
};


// Size 0x70 (Full Size[0x198] - InheritedSize[0x128]
class RetrieveBootyHandInComponent: public InteractableComponent
{
public:
	class                                                        NotificationStartInputID;                          // 0x128(0x8)
	class                                                        NotificationReleaseInputID;                        // 0x130(0x8)
	byte                                                         DisplayPriority;                                   // 0x138(0x1)
	char                                                         pad0x3_2WFUE[0x3];                                 // 0x139(0x3)
	Struct Vector                                                RetrieveTargetPoint;                               // 0x13c(0xc)
	char                                                         pad0x10_8HEXN[0x10];                               // 0x148(0x10)
	Class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x158(0x8)
	char                                                         pad0x18_TK7G0[0x18];                               // 0x160(0x18)
	Class WwiseEvent*                                            OnRetrievedSFX;                                    // 0x178(0x8)
	Class ActionRulesComponent*                                  OwnerActionRulesComponent;                         // 0x180(0x8)
	Class EnvQuery*                                              SpawnBootyEQSQuery;                                // 0x188(0x8)
	bool                                                         ShouldTellStoredBootyCounterOnTooltip;             // 0x190(0x1)
	char                                                         pad0x7_NN83F[0x7];                                 // 0x191(0x7)
};


// Size 0x150 (Full Size[0x278] - InheritedSize[0x128]
class StoreBootyHandInComponent: public InteractableComponent
{
public:
	class                                                        NotificationStartInputID;                          // 0x128(0x8)
	class                                                        NotificationReleaseInputID;                        // 0x130(0x8)
	byte                                                         DisplayPriority;                                   // 0x138(0x1)
	bool                                                         TorchVFXOffIfStorageEmpty;                         // 0x139(0x1)
	bool                                                         EyesVFXOffIfStorageEmpty;                          // 0x13a(0x1)
	char                                                         pad0x1_GORNF[0x1];                                 // 0x13b(0x1)
	struct FName                                                 ScalarVectorNameToOverride;                        // 0x13c(0x8)
	float                                                        CanStoreGlowValue;                                 // 0x144(0x4)
	float                                                        HasSomethingStoredGlowValue;                       // 0x148(0x4)
	float                                                        CannotStoreGlowValue;                              // 0x14c(0x4)
	float                                                        PulseGlowValue;                                    // 0x150(0x4)
	float                                                        ChangeDuration;                                    // 0x154(0x4)
	float                                                        VFXEmptyGlow;                                      // 0x158(0x4)
	float                                                        VFXPartialGlow;                                    // 0x15c(0x4)
	float                                                        VFXFullGlow;                                       // 0x160(0x4)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterialMap;                                // 0x180(0x10)
	Class Controller*                                            LocalController;                                   // 0x190(0x8)
	Class BootyStorageSettings*                                  BootyStorageSettings;                              // 0x198(0x8)
	char                                                         pad0xb0_USMHH[0xb0];                               // 0x1a0(0xb0)
	Class ActionRulesComponent*                                  OwnerActionRulesComponent;                         // 0x250(0x8)
	Class WwiseEvent*                                            OnStoredSFX;                                       // 0x258(0x8)
	Class ParticleSystemComponent*                               TorchVfx;                                          // 0x260(0x8)
	Class ParticleSystemComponent*                               EyesVFX;                                           // 0x268(0x8)
	Class ParticleSystemComponent*                               ChestVFX;                                          // 0x270(0x8)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AICombatDialogue: public Object
{
public:
	Class SceneDialogueCoordinator*                              DialogueCoordinator;                               // 0x28(0x8)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x30(0x8)
	int                                                          NumAISlots;                                        // 0x38(0x4)
	float                                                        ChatMaxDistance;                                   // 0x3c(0x4)
	float                                                        RemoveAIDelay;                                     // 0x40(0x4)
	float                                                        EndDelay;                                          // 0x44(0x4)
	Class SimpleDialogueStateProvider*                           StateProvider;                                     // 0x48(0x8)
	char                                                         pad0x28_81DU0[0x28];                               // 0x50(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialogueCoordinatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialoguePoint: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialogueExit: public SceneDialoguePoint
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SceneDialogueSectionRedirect: public SceneDialoguePoint
{
public:
	Struct FString                                               SectionNameToGoTo;                                 // 0x28(0x10)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class SceneDialogueTextPoint: public SceneDialoguePoint
{
public:
	bool                                                         IsDelay;                                           // 0x28(0x1)
	byte                                                         ActorNumber;                                       // 0x29(0x1)
	char                                                         pad0x6_IAGXU[0x6];                                 // 0x2a(0x6)
	Struct FText                                                 Text;                                              // 0x30(0x38)
	float                                                        DelayAfter;                                        // 0x68(0x4)
	char                                                         pad0x4_RW7H6[0x4];                                 // 0x6c(0x4)
	Class AnimationAsset*                                        Animation;                                         // 0x70(0x8)
	Class WwiseEvent*                                            Speech;                                            // 0x78(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class SceneDialogueSection: public Object
{
public:
	Struct FString                                               Name;                                              // 0x28(0x10)
	bool                                                         IsPool;                                            // 0x38(0x1)
	char                                                         pad0x3_FZHI2[0x3];                                 // 0x39(0x3)
	float                                                        TimeDelayBetweenText;                              // 0x40(0x4)
	char                                                         pad0x4_D7ZZ0[0x4];                                 // 0x44(0x4)
	TArray<class SceneDialoguePointWithConditional*>             Points;                                            // 0x48(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SceneDialogueContext: public Object
{
public:
	char                                                         pad0x10_HA2ZV[0x10];                               // 0x28(0x10)
	Class SceneDialogueSection*                                  Section;                                           // 0x38(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SceneDialoguePointWithConditional: public Object
{
public:
	Class SceneDialoguePoint*                                    Point;                                             // 0x28(0x8)
	Class NPCDialogConditional*                                  Conditional;                                       // 0x30(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class SceneDialogueData: public Object
{
public:
	TArray<struct FName>                                         ActorNames;                                        // 0x28(0x10)
	byte                                                         ChatType;                                          // 0x38(0x1)
	char                                                         pad0x7_T1I1L[0x7];                                 // 0x39(0x7)
	TArray<class SceneDialogueSection*>                          TextSections;                                      // 0x40(0x10)
	bool                                                         ChainedDialogue;                                   // 0x50(0x1)
	char                                                         pad0x7_SSVWQ[0x7];                                 // 0x51(0x7)
	Struct FString                                               SourceText;                                        // 0x58(0x10)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class CutSceneSubtitlesExecutableAnimMetaData: public AnimMetaData
{
public:
	char                                                         pad0x8_8MAVG[0x8];                                 // 0x28(0x8)
	Struct SceneDialogueStructure                                SceneDialogueStructure;                            // 0x30(0x78)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutSceneSubtitlesInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogComponentInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HasRanksNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         RequiredRanks;                                     // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HasEntitlementsNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         RequiredEntitlements;                              // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class HasAnyEntitlementNPCDialogConditional: public NPCDialogConditional
{
public:
	TArray<class Class*>                                         Entitlements;                                      // 0x30(0x10)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class FiniteUseNPCDialogConditional: public NPCDialogConditional
{
public:
	int                                                          LinkedDialog;                                      // 0x30(0x4)
	int                                                          LinkedDialogOption;                                // 0x34(0x4)
	int                                                          NumberOfUses;                                      // 0x38(0x4)
	char                                                         pad0x4_6KVSP[0x4];                                 // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class SectionFullyExhaustedConditional: public NPCDialogConditional
{
public:
	Struct FString                                               SectionName;                                       // 0x30(0x10)
};


// Size 0x20 (Full Size[0x50] - InheritedSize[0x30]
class ConditionInstanceNPCDialogConditional: public NPCDialogConditional
{
public:
	Struct ConditionInstance                                     Condition;                                         // 0x30(0x20)
};


// Size 0x10 (Full Size[0x40] - InheritedSize[0x30]
class FeatureToggleNPCDialogConditional: public NPCDialogConditional
{
public:
	struct FName                                                 FeatureName;                                       // 0x30(0x8)
	bool                                                         InvertFeatureToggleCheck;                          // 0x38(0x1)
	char                                                         pad0x7_8H3KW[0x7];                                 // 0x39(0x7)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class NPCDialogConditionalExpression: public NPCDialogConditional
{
public:
	Class NPCDialogExpression*                                   Expression;                                        // 0x30(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class NPCDialogUnaryExpression: public NPCDialogExpression
{
public:
	Class NPCDialogExpression*                                   Child;                                             // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NPCDialogBinaryExpression: public NPCDialogExpression
{
public:
	Class NPCDialogExpression*                                   Left;                                              // 0x28(0x8)
	Class NPCDialogExpression*                                   Right;                                             // 0x30(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class NPCDialogNotExpression: public NPCDialogUnaryExpression
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NPCDialogAndExpression: public NPCDialogBinaryExpression
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class NPCDialogOrExpression: public NPCDialogBinaryExpression
{
public:
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateAIState: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	byte                                                         TargetState;                                       // 0x3c(0x1)
	char                                                         pad0x3_PIE10[0x3];                                 // 0x3d(0x3)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateGroupAIState: public NPCDialogPredicate
{
public:
	byte                                                         TargetState;                                       // 0x38(0x1)
	char                                                         pad0x7_XDKZU[0x7];                                 // 0x39(0x7)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateAtDamageTaken: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	float                                                        DamageThreshold;                                   // 0x3c(0x4)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class NPCDialogPredicateAtHealthStage: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	int                                                          HealthStage;                                       // 0x3c(0x4)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class NPCDialogPredicateInAIDialogueState: public NPCDialogPredicate
{
public:
	int                                                          ActorIdx;                                          // 0x38(0x4)
	struct FName                                                 DialogueState;                                     // 0x3c(0x8)
	char                                                         pad0x4_2PWMM[0x4];                                 // 0x44(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogHeaderInfoInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCDialogInteractionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SceneDialogueAudioInterface: public Interface
{
public:
};


// Size 0x118 (Full Size[0x4e0] - InheritedSize[0x3c8]
class SceneDialogueCoordinator: public Actor
{
public:
	char                                                         pad0x10_LO32W[0x10];                               // 0x3c8(0x10)
	TArray<class Actor*>                                         LinkedActors;                                      // 0x3d8(0x10)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x3e8(0x8)
	TArray<struct FText>                                         LocalisableNames;                                  // 0x3f0(0x10)
	float                                                        DefaultMessageDistance;                            // 0x400(0x4)
	char                                                         pad0xdc_QKB43[0xdc];                               // 0x404(0xdc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerNPCNotificationsServiceInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class BountyMapLayout: public DataAsset
{
public:
	Struct TreasureMapWidgetText                                 Location;                                          // 0x28(0x3c)
	char                                                         pad0x4_GS6G1[0x4];                                 // 0x64(0x4)
	TArray<struct Descriptions>                                  Descriptions;                                      // 0x68(0x10)
	TArray<struct Targets>                                       Targets;                                           // 0x78(0x10)
	TArray<struct Images>                                        Images;                                            // 0x88(0x10)
	TArray<struct GeneralText>                                   GeneralText;                                       // 0x98(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class BountyQuestData: public DataAsset
{
public:
	Class WwiseEvent*                                            DefaultTargetKilledAudioCue;                       // 0x28(0x8)
	float                                                        BountyLandmarkSpawnZoneRadiusInMetres;             // 0x30(0x4)
	float                                                        BountyLandmarkSpawnZoneHalfHeightInMetres;         // 0x34(0x4)
	Class QuestBootyItemPopUpAsset*                              BountyQuestTargetKilledPopUpDescAsset;             // 0x38(0x8)
	Class EnvQuery*                                              FindSpawnPosQuery;                                 // 0x40(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CampfireInterface: public Interface
{
public:
};


// Size 0x3b0 (Full Size[0x778] - InheritedSize[0x3c8]
class Campfire: public Actor
{
public:
	char                                                         pad0x20_4M8MX[0x20];                               // 0x3c8(0x20)
	Class StaticMeshComponent*                                   UnbuiltMesh;                                       // 0x3e8(0x8)
	Class StaticMeshComponent*                                   BuiltMesh;                                         // 0x3f0(0x8)
	Class ParticleSystemComponent*                               FireParticleSystem;                                // 0x3f8(0x8)
	Class PointLightComponent*                                   PointLight;                                        // 0x400(0x8)
	Class OverlapTriggerComponent*                               OverlapTrigger;                                    // 0x408(0x8)
	Class BoxComponent*                                          BoxCollider;                                       // 0x410(0x8)
	Class LightWeightStatusEffectManagerComponent*               StatusEffectManagerComponent;                      // 0x418(0x8)
	Class DitherComponent*                                       DitherComponent;                                   // 0x420(0x8)
	Class ActionRulesInteractableComponent*                      InteractableComponent;                             // 0x428(0x8)
	Class ActionRulesComponent*                                  ActionRulesComponent;                              // 0x430(0x8)
	Class ShelteredComponent*                                    ShelteredComponent;                                // 0x438(0x8)
	Class WaterExposureComponent*                                WaterExposureComponent;                            // 0x440(0x8)
	Class FlammableComponent*                                    FlammableComponent;                                // 0x448(0x8)
	Class SoakableComponent*                                     SoakableComponent;                                 // 0x450(0x8)
	Class ChildActorComponent*                                   CookerChildActorComponent;                         // 0x458(0x8)
	Class Object*                                                ExtinguishedVFX;                                   // 0x460(0x8)
	bool                                                         HasSmoke;                                          // 0x468(0x1)
	char                                                         pad0x3_KP8P4[0x3];                                 // 0x469(0x3)
	Struct Vector                                                SmokeOffset;                                       // 0x46c(0xc)
	float                                                        BurnDownTimeSeconds;                               // 0x478(0x4)
	float                                                        BurnOutTimeSoakedSeconds;                          // 0x47c(0x4)
	float                                                        AddWoodHoldTime;                                   // 0x480(0x4)
	struct FName                                                 WwiseEmitterName;                                  // 0x484(0x8)
	char                                                         pad0x4_ZUZHS[0x4];                                 // 0x48c(0x4)
	Class WwiseEvent*                                            IgnitedWwiseEvent;                                 // 0x490(0x8)
	Class WwiseEvent*                                            ExtinguishedWwiseEvent;                            // 0x498(0x8)
	Class WwiseEvent*                                            BurnDownWwiseEvent;                                // 0x4a0(0x8)
	Class WwiseEvent*                                            WoodAddedWwiseEvent;                               // 0x4a8(0x8)
	Class WwiseEvent*                                            StokedWwiseEvent;                                  // 0x4b0(0x8)
	Class WwiseEvent*                                            BurningLoopStart;                                  // 0x4b8(0x8)
	Class WwiseEvent*                                            BurningLoopEnd;                                    // 0x4c0(0x8)
	Class WwiseObjectPoolWrapper*                                CampfireWwisePool;                                 // 0x4c8(0x8)
	Class CurveFloat*                                            WoodCharOverTime;                                  // 0x4d0(0x8)
	TArray<struct ImpactLightChances>                            ImpactLightChances;                                // 0x4d8(0x10)
	Struct FText                                                 WieldableItemCannotLightCampfire;                  // 0x4e8(0x38)
	Struct FText                                                 WieldableItemNotReadyToLightCampfire;              // 0x520(0x38)
	Struct FText                                                 LightCampfire;                                     // 0x558(0x38)
	Struct FText                                                 NeedWoodToBuildCampfire;                           // 0x590(0x38)
	Struct FText                                                 BuildCampfire;                                     // 0x5c8(0x38)
	Struct FText                                                 StokeCampfire;                                     // 0x600(0x38)
	bool                                                         Built;                                             // 0x638(0x1)
	char                                                         pad0x3_K4293[0x3];                                 // 0x639(0x3)
	float                                                        BurnedProportion;                                  // 0x63c(0x4)
	bool                                                         OnFire;                                            // 0x640(0x1)
	char                                                         pad0x7_2G056[0x7];                                 // 0x641(0x7)
	Struct Status                                                IgnitedStatus;                                     // 0x648(0x18)
	class                                                        WoodCategory;                                      // 0x660(0x8)
	Class MaterialInstanceDynamic*                               BuiltMeshCharrableMaterial;                        // 0x678(0x8)
	TArray<class Actor*>                                         OverlappingActors;                                 // 0x680(0x10)
	char                                                         pad0xe8_QBQ3U[0xe8];                               // 0x690(0xe8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CampfireWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IgnitionSourceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersMarkServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CircleMapCollectionInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class CircleMapSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  CircleMapItemDescClass;                            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapIslandTextureProviderInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class IslandServiceIslandTextureProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_LOMAB[0x8];                                 // 0xc8(0x8)
	byte                                                         IslandTextureSourceType;                           // 0xd0(0x1)
	char                                                         pad0x1f_Y1ODJ[0x1f];                               // 0xd1(0x1f)
};


// Size 0x20 (Full Size[0x2c0] - InheritedSize[0x2a0]
class LookingAtTreasureMapInputComponent: public LookingAtWieldableInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapMarkId: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MapMarkMappingDataAsset: public DataAsset
{
public:
	TArray<struct MarkDefinitions>                               MarkDefinitions;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapMarkProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MapRenderResource: public Object
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class MapIslandRenderResource: public MapRenderResource
{
public:
	struct FName                                                 IslandName;                                        // 0x28(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class MapMarkRenderResource: public MapRenderResource
{
public:
	class                                                        MarkTypeId;                                        // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MapTextureRenderResource: public MapRenderResource
{
public:
	Struct StringAssetReference                                  Texture;                                           // 0x28(0x10)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class MapSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  PrebakedIslandData;                                // 0x38(0x10)
};


// Size 0x0 (Full Size[0x510] - InheritedSize[0x510]
class TreasureMapItemInfo: public ItemInfo
{
public:
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class TreasureMapItemDesc: public ItemWithoutIconsDesc
{
public:
};


// Size 0x40 (Full Size[0x108] - InheritedSize[0xc8]
class UserSettingsMapMarkProviderComponent: public ActorComponent
{
public:
	char                                                         pad0x8_YUNQC[0x8];                                 // 0xc8(0x8)
	TArray<struct MarkMappings>                                  MarkMappings;                                      // 0xd0(0x10)
	char                                                         pad0x28_CP7S4[0x28];                               // 0xe0(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldMapInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldSettingsViewInterface: public Interface
{
public:
};


// Size 0xc8 (Full Size[0xf0] - InheritedSize[0x28]
class ChecklistMapLayout: public DataAsset
{
public:
	Struct TreasureMapWidgetText                                 Title;                                             // 0x28(0x3c)
	Struct TreasureMapWidgetText                                 Description;                                       // 0x64(0x3c)
	TArray<struct Items>                                         Items;                                             // 0xa0(0x10)
	Struct TreasureMapWidgetText                                 Afternote;                                         // 0xb0(0x3c)
	char                                                         pad0x4_OSRTC[0x4];                                 // 0xec(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimatedMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismActionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismAnimationDurationProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismAudioEmitterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismElementProxyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismGroupInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismInteractionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismResetInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismTriggerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismVirtualSceneComponentTransformInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeshMaterialLoadListenerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SignalMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SignalMechanismTargetInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SpectacleMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwingMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwitchMechanismInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ClientNotificationsServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class CutSceneSubtitlesComponent: public ActorComponent
{
public:
	char                                                         pad0x8_PPDR2[0x8];                                 // 0xc8(0x8)
	float                                                        SubtitleSphereRadiusInCm;                          // 0xd0(0x4)
	bool                                                         CanDrawDebugSubtitleRadius;                        // 0xd4(0x1)
	char                                                         pad0x3_EO3UY[0x3];                                 // 0xd5(0x3)
	Struct Vector                                                SubtitleRadiusOrigin;                              // 0xd8(0xc)
	char                                                         pad0x18_SJ82N[0x18];                               // 0xe4(0x18)
	float                                                        SubtitleSphereRadiusInCmSqr;                       // 0xfc(0x4)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class BodyTypeSpecificSequenceMap: public DataAsset
{
public:
	Struct StringAssetReference                                  DefaultSequence;                                   // 0x28(0x10)
	Struct StringAssetReference                                  LargeSequence;                                     // 0x38(0x10)
	Struct StringAssetReference                                  ThinSequence;                                      // 0x48(0x10)
	Struct StringAssetReference                                  UnfitSequence;                                     // 0x58(0x10)
	Struct StringAssetReference                                  AthleticSequence;                                  // 0x68(0x10)
};


// Size 0x50 (Full Size[0x6b0] - InheritedSize[0x660]
class BootyItemWithCutscenesAnimationInstance: public WieldableItemAnimationInstance
{
public:
	char                                                         pad0x10_J5FZO[0x10];                               // 0x660(0x10)
	Class SkeletalMeshComponent*                                 BootyItemSkeletalMesh;                             // 0x670(0x8)
	Class CutsceneAnimationDataAsset*                            CutsceneAnimationData;                             // 0x678(0x8)
	Class AnimMontage*                                           CurrentCutscene;                                   // 0x680(0x8)
	char                                                         pad0x28_698SE[0x28];                               // 0x688(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TotallyPointlessClass: public Object
{
public:
};


// Size 0x138 (Full Size[0x500] - InheritedSize[0x3c8]
class CoordinatedCutsceneTrigger: public Actor
{
public:
	char                                                         pad0x8_E1UBS[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	struct FName                                                 CutsceneName;                                      // 0x3d8(0x8)
	bool                                                         ActivationInitiallyEnabled;                        // 0x3e0(0x1)
	bool                                                         AllowInfiniteNumberOfReactivations;                // 0x3e1(0x1)
	char                                                         pad0x2_V5ZBL[0x2];                                 // 0x3e2(0x2)
	int                                                          SpecificNumberOfReactivationsAllowed;              // 0x3e4(0x4)
	bool                                                         ReattemptActivationAfterConflictingCutsceneFinishes; // 0x3e8(0x1)
	char                                                         pad0x3_AF717[0x3];                                 // 0x3e9(0x3)
	Struct FloatInterval                                         CutsceneStartDelayWhenReattemptingActivation;      // 0x3ec(0x8)
	char                                                         pad0x4_64GLR[0x4];                                 // 0x3f4(0x4)
	TArray<struct StateChangeCoordination>                       StateChangeCoordination;                           // 0x3f8(0x10)
	Class BillboardComponent*                                    EditorOnlyIcon;                                    // 0x4e8(0x8)
	Class TextRenderComponent*                                   EditorOnlyCutsceneNameDisplay;                     // 0x4f0(0x8)
	Struct CutsceneTriggerEditorOnlyData                         AllEditingPreferences;                             // 0x4f8(0x3)
	char                                                         pad0x5_IZQP3[0x5];                                 // 0x4fb(0x5)
};


// Size 0xc0 (Full Size[0x188] - InheritedSize[0xc8]
class CoordinatedCutsceneTriggerComponent: public ActorComponent
{
public:
	Class Actor*                                                 CutSceneActor;                                     // 0xc8(0x8)
	struct FName                                                 CutsceneName;                                      // 0xd0(0x8)
	bool                                                         ActivationInitiallyEnabled;                        // 0xd8(0x1)
	byte                                                         StateAfterFinishedPlaying;                         // 0xd9(0x1)
	bool                                                         AllowInfiniteNumberOfActivations;                  // 0xda(0x1)
	char                                                         pad0x1_S6DG2[0x1];                                 // 0xdb(0x1)
	int                                                          SpecificNumberOfActivationsAllowed;                // 0xdc(0x4)
	bool                                                         ReattemptActivationAfterConflictingCutsceneFinishes; // 0xe0(0x1)
	char                                                         pad0x3_0WHR7[0x3];                                 // 0xe1(0x3)
	Struct FloatInterval                                         DelayWhenReattemptingActivation;                   // 0xe4(0x8)
	char                                                         pad0x4_9YCJZ[0x4];                                 // 0xec(0x4)
	TArray<struct StateChangeCoordination>                       StateChangeCoordination;                           // 0xf0(0x10)
	byte                                                         StateChangeAfterMechanismActionIsTriggered;        // 0x100(0x1)
	char                                                         pad0x3_NB1C4[0x3];                                 // 0x101(0x3)
	Struct FloatInterval                                         DelayAfterMechanismActionIsTriggered;              // 0x104(0x8)
	bool                                                         TriggerMechanismOnStateChange;                     // 0x10c(0x1)
	byte                                                         StateToActivateMechanismTrigger;                   // 0x10d(0x1)
	char                                                         pad0x2_YDWRV[0x2];                                 // 0x10e(0x2)
	Struct FloatInterval                                         DelayToActivateMechanismTrigger;                   // 0x110(0x8)
	Class ConditionRootAsset*                                    AdditionalCondition;                               // 0x118(0x8)
	Class Actor*                                                 LastInstigator;                                    // 0x158(0x8)
	char                                                         pad0x28_OITHG[0x28];                               // 0x160(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneActorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneAnimationDataAssetInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CutsceneAnimationDataAsset: public DataAsset
{
public:
	char                                                         pad0x8_YV5YY[0x8];                                 // 0x28(0x8)
	TArray<struct CutsceneElements>                              CutsceneElements;                                  // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CutsceneDataAsset: public DataAsset
{
public:
	TArray<struct CutsceneGroups>                                CutsceneGroups;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneResponsePlayerInterface: public Interface
{
public:
};


// Size 0x130 (Full Size[0x1f8] - InheritedSize[0xc8]
class CutsceneComponent: public ActorComponent
{
public:
	char                                                         pad0x10_YCWJ3[0x10];                               // 0xc8(0x10)
	TArray<struct FText>                                         LocalisedNames;                                    // 0xd8(0x10)
	Class CutsceneDataAsset*                                     CutsceneAsset;                                     // 0xe8(0x8)
	Class Actor*                                                 CutSceneActor;                                     // 0xf0(0x8)
	class                                                        CutsceneActorType;                                 // 0xf8(0x8)
	float                                                        MaxPlayRange;                                      // 0x110(0x4)
	float                                                        DelayBeforeDequeueAttempt;                         // 0x114(0x4)
	char                                                         pad0xe0_DSV3W[0xe0];                               // 0x118(0xe0)
};


// Size 0x0 (Full Size[0x1f8] - InheritedSize[0x1f8]
class CrewSpecificCutsceneComponent: public CutsceneComponent
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class CutscenePoolType: public DataAsset
{
public:
	bool                                                         DialogueSelectedRandomly;                          // 0x28(0x1)
	char                                                         pad0x7_ZZ7AJ[0x7];                                 // 0x29(0x7)
	TArray<Int AvailableIndices>                                 AvailableIndices;                                  // 0x30(0x10)
	char                                                         pad0x8_4JPNQ[0x8];                                 // 0x40(0x8)
	TArray<Int OriginalIndices>                                  OriginalIndices;                                   // 0x48(0x10)
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class CutscenePoolTypeSingleUseRandom: public CutscenePoolType
{
public:
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class CutscenePoolTypeResettable: public CutscenePoolType
{
public:
};


// Size 0x0 (Full Size[0x58] - InheritedSize[0x58]
class CutscenePoolTypeExhaustible: public CutscenePoolType
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class CutsceneResponseComponent: public ActorComponent
{
public:
	TArray<class CutsceneResponseSheet*>                         Sheets;                                            // 0xc8(0x10)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class CutsceneResponseCoordinator: public Object
{
public:
	char                                                         pad0x10_ZF2KR[0x10];                               // 0x28(0x10)
	bool                                                         SuppressResponses;                                 // 0x38(0x1)
	char                                                         pad0x7_ZFV9V[0x7];                                 // 0x39(0x7)
	Class Object*                                                WorldContextObject;                                // 0x40(0x8)
	char                                                         pad0x80_142XQ[0x80];                               // 0x48(0x80)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class CutsceneResponseSheet: public Object
{
public:
	char                                                         pad0x10_VUFJ0[0x10];                               // 0x28(0x10)
	TArray<Assetclass RelevantActorClasses>                      RelevantActorClasses;                              // 0x38(0x10)
	Class Object*                                                CutsceneInstigator;                                // 0x58(0x8)
	bool                                                         IsActive;                                          // 0x60(0x1)
	char                                                         pad0x1f_1ACFB[0x1f];                               // 0x61(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutscenesBlueprintFunctionLibrary: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneServiceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CutsceneService: public Object
{
public:
	char                                                         pad0x8_3TK83[0x8];                                 // 0x28(0x8)
	TArray<class Actor*>                                         RegisteredCutsceneActors;                          // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneTargetInterface: public Interface
{
public:
};


// Size 0x128 (Full Size[0x1f0] - InheritedSize[0xc8]
class CutsceneTargetComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7TERX[0x8];                                 // 0xc8(0x8)
	struct FName                                                 SkeletalMeshComponentTag;                          // 0xd0(0x8)
	Class SkeletalMeshComponent*                                 SkeletalMeshComponent;                             // 0xd8(0x8)
	char                                                         pad0x110_BOAEI[0x110];                             // 0xe0(0x110)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneTargetRetrievalInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x158] - InheritedSize[0xc8]
class CutsceneTargetRetrievalComponent: public ActorComponent
{
public:
	char                                                         pad0x8_RU6N0[0x8];                                 // 0xc8(0x8)
	Class Actor*                                                 CutsceneTarget;                                    // 0xd0(0x8)
	char                                                         pad0x80_I2SKQ[0x80];                               // 0xd8(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CutsceneTimestampInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class CutsceneTimestampComponent: public ActorComponent
{
public:
};


// Size 0x30 (Full Size[0x430] - InheritedSize[0x400]
class CutsceneTriggerVolume: public Volume
{
public:
	struct FName                                                 CutsceneName;                                      // 0x400(0x8)
	bool                                                         SingleUse;                                         // 0x408(0x1)
	char                                                         pad0x27_9NQF0[0x27];                               // 0x409(0x27)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PeriodicResponseBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x108 (Full Size[0x540] - InheritedSize[0x438]
class SequencerCutSceneActor: public LevelSequenceActor
{
public:
	char                                                         pad0x8_G1ZZL[0x8];                                 // 0x438(0x8)
	Struct CutScenePlayData                                      CutScenePlayData;                                  // 0x440(0x38)
	TArray<struct CutSceneDataSet>                               CutSceneDataSet;                                   // 0x478(0x10)
	Class CutSceneSubtitlesComponent*                            CutsceneSubtitleComponent;                         // 0x488(0x8)
	Class Pawn*                                                  InteractingPlayerPawn;                             // 0x490(0x8)
	bool                                                         IsLooping;                                         // 0x498(0x1)
	char                                                         pad0x7_DW694[0x7];                                 // 0x499(0x7)
	Class LevelSequence*                                         LevelSequenceToPlay;                               // 0x4a0(0x8)
	TArray<class LevelSequence*>                                 LevelSequencesToPlay;                              // 0x4a8(0x10)
	char                                                         pad0x88_GPWGL[0x88];                               // 0x4b8(0x88)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SequencerVisibilityResetInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x470] - InheritedSize[0x3c8]
class GhostShipDoor: public Actor
{
public:
	char                                                         pad0x18_HKSB9[0x18];                               // 0x3c8(0x18)
	TArray<struct OpenForList>                                   OpenForList;                                       // 0x3e0(0x10)
	float                                                        DoorFullyOpenTimer;                                // 0x3f0(0x4)
	char                                                         pad0x4_JYJJO[0x4];                                 // 0x3f4(0x4)
	Class ClientSkeletalMeshComponent*                           DoorMesh;                                          // 0x3f8(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterialInstances;                          // 0x400(0x10)
	Class AnimSequence*                                          DoorOpeningAnimation;                              // 0x410(0x8)
	Class WwiseEvent*                                            DoorOpeningSfx;                                    // 0x418(0x8)
	Struct Box                                                   DoorBoundingVolume;                                // 0x420(0x1c)
	Struct Vector                                                MaxBoundingVolume;                                 // 0x43c(0xc)
	float                                                        DoorDeformationWhenFullyOpen;                      // 0x448(0x4)
	bool                                                         BlockPlayerLeftGhostshipDelegate;                  // 0x44c(0x1)
	char                                                         pad0x23_V8U0G[0x23];                               // 0x44d(0x23)
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class GhostShipStreamingProbe: public Actor
{
public:
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class GhostShipTickManager: public Actor
{
public:
	TArray<class Actor*>                                         GhostShipActors;                                   // 0x3c8(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GhostShipTimingInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LeaveGhostShipActionStateId: public ActionStateId
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class RiddleQuestValidLocationGeneratorData: public DataAsset
{
public:
	float                                                        PacesToCentimetres;                                // 0x28(0x4)
	float                                                        IsBlockedTestHeight;                               // 0x3c(0x4)
	float                                                        CastDownOffset;                                    // 0x40(0x4)
	float                                                        CastDownLength;                                    // 0x44(0x4)
	float                                                        MaxAngleChangeBetweenPaces;                        // 0x48(0x4)
	float                                                        CollisionTestCapsuleHalfHeight;                    // 0x4c(0x4)
	float                                                        CollisionTestCapsuleRadius;                        // 0x50(0x4)
	float                                                        CollisionTestYOffset;                              // 0x54(0x4)
	byte                                                         HitTestTraceChannel;                               // 0x58(0x1)
	char                                                         pad0x3_WLAW8[0x3];                                 // 0x59(0x3)
	float                                                        CardinalDirectionTolerance;                        // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class SpitStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VenomProviderInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xf8] - InheritedSize[0xc8]
class VenomComponent: public ActorComponent
{
public:
	char                                                         pad0x8_N9WKT[0x8];                                 // 0xc8(0x8)
	Struct Status                                                VenomStatusUsed;                                   // 0xd0(0x18)
	byte                                                         CollisionChannel;                                  // 0xe8(0x1)
	char                                                         pad0x3_432ZN[0x3];                                 // 0xe9(0x3)
	float                                                        RangeDistance;                                     // 0xec(0x4)
	float                                                        RangeAngle;                                        // 0xf0(0x4)
	float                                                        EffectDuration;                                    // 0xf4(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class VenomStatus: public StatusBase
{
public:
};


// Size 0x6c0 (Full Size[0x6e8] - InheritedSize[0x28]
class FaunaAnimationData: public DataAsset
{
public:
	Struct FaunaAnimationStructure                               FaunaAnimations;                                   // 0x28(0x6c0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FaunaBreed: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FaunaSpecies: public Object
{
public:
};


// Size 0xfe0 (Full Size[0x1420] - InheritedSize[0x440]
class FaunaAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x10_10MBK[0x10];                               // 0x440(0x10)
	Class Actor*                                                 Fauna;                                             // 0x450(0x8)
	Class Fauna*                                                 FaunaCharacter;                                    // 0x458(0x8)
	Struct FaunaAnimationStructure                               Animations;                                        // 0x460(0x6c0)
	Struct Rotator                                               CurrentOrientation;                                // 0xb20(0xc)
	byte                                                         CurrentState;                                      // 0xb2c(0x1)
	bool                                                         IsCaged;                                           // 0xb2d(0x1)
	bool                                                         LoopSpecial;                                       // 0xb2e(0x1)
	char                                                         pad0x1_CGOD2[0x1];                                 // 0xb2f(0x1)
	int                                                          SpecialIndex;                                      // 0xb30(0x4)
	float                                                        LocomotionSpeed;                                   // 0xb34(0x4)
	float                                                        ImpactStrength;                                    // 0xb38(0x4)
	byte                                                         Location;                                          // 0xb3c(0x1)
	char                                                         pad0x3_DAE16[0x3];                                 // 0xb3d(0x3)
	Struct FaunaAnimationLocationStructure                       BaseAnimSet;                                       // 0xb40(0x360)
	float                                                        TurnRate;                                          // 0xea0(0x4)
	float                                                        CurrentYaw;                                        // 0xea4(0x4)
	float                                                        CurrentDirection;                                  // 0xea8(0x4)
	bool                                                         TurningActive;                                     // 0xeac(0x1)
	bool                                                         TurningLeft;                                       // 0xead(0x1)
	char                                                         pad0x2_X3CL0[0x2];                                 // 0xeae(0x2)
	float                                                        TurnRateToDisableTurns;                            // 0xeb0(0x4)
	float                                                        AnimationTurnRateMultiplier;                       // 0xeb4(0x4)
	byte                                                         StartledLevel;                                     // 0xeb8(0x1)
	bool                                                         PigIsStarving;                                     // 0xeb9(0x1)
	bool                                                         StartEating;                                       // 0xeba(0x1)
	char                                                         pad0x5_2ALC0[0x5];                                 // 0xebb(0x5)
	bool                                                         SnakeInAttackStance;                               // 0xec0(0x1)
	bool                                                         SnakeInCharmStance;                                // 0xec1(0x1)
	bool                                                         StartSnakeStrike;                                  // 0xec2(0x1)
	byte                                                         SnakeAttackDirection;                              // 0xec3(0x1)
	char                                                         pad0x4_12CCN[0x4];                                 // 0xec4(0x4)
	Struct FaunaAnimationSnakeBiteStructure                      BaseSnakeAttackAnims;                              // 0xec8(0x20)
	Struct FaunaAnimationCurrentPlayingAnimations                CurrentPlayingAnimations;                          // 0xee8(0x60)
	char                                                         pad0x4d8_F5DRZ[0x4d8];                             // 0xf48(0x4d8)
};


// Size 0x120 (Full Size[0x148] - InheritedSize[0x28]
class MerchantMapLayout: public DataAsset
{
public:
	Struct TreasureMapWidgetText                                 PickupLocation;                                    // 0x28(0x3c)
	Struct TreasureMapWidgetText                                 DeliveryLocation;                                  // 0x64(0x3c)
	Struct TreasureMapWidgetText                                 DeliverByTime;                                     // 0xa0(0x3c)
	Struct TreasureMapWidgetText                                 PickupLocationHint;                                // 0xdc(0x3c)
	TArray<struct Items>                                         Items;                                             // 0x118(0x10)
	TArray<struct Images>                                        Images;                                            // 0x128(0x10)
	TArray<struct GeneralText>                                   GeneralText;                                       // 0x138(0x10)
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class MerchantQuestDescData: public DataAsset
{
public:
	TArray<class MerchantMapLayout*>                             MerchantMapLayouts;                                // 0x28(0x10)
	Class MerchantMapLayout*                                     MerchantMapLayoutV2;                               // 0x38(0x8)
	Struct FText                                                 DeliverByTimeTextFormat;                           // 0x40(0x38)
	TArray<struct FText>                                         DeliverByTimeHourFormat;                           // 0x78(0x10)
	TArray<struct FText>                                         DeliverByTimeDayFormat;                            // 0x88(0x10)
	TArray<struct FText>                                         BeachDirection;                                    // 0x98(0x10)
	Class PopUpMessageDesc*                                      CollectCratesFromTraderPopupDesc;                  // 0xa8(0x8)
	class                                                        MerchantCompany;                                   // 0xb0(0x8)
	float                                                        CrateSpawnDropOffset;                              // 0xb8(0x4)
	float                                                        CrateSpawnOffsetMin;                               // 0xbc(0x4)
	float                                                        CrateSpawnOffsetMax;                               // 0xc0(0x4)
	float                                                        CrateSpawnOffsetAngle;                             // 0xc4(0x4)
	float                                                        AIExclusionZoneHeight;                             // 0xc8(0x4)
	char                                                         pad0x4_AF0V6[0x4];                                 // 0xcc(0x4)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MerchantQuestDescDebugData: public DataAsset
{
public:
	TArray<class Class*>                                         AllMerchantCrates;                                 // 0x28(0x10)
	TArray<class Class*>                                         AllMerchantCargo;                                  // 0x38(0x10)
	TArray<Assetclass AllFauna>                                  AllFauna;                                          // 0x48(0x10)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class MerchantQuestDescSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  MerchantQuestDescDataLocation;                     // 0x38(0x10)
	Struct StringAssetReference                                  MerchantQuestDescDebugDataLocation;                // 0x48(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MerchantCrateProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedPointsBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class NamedPointsCollectionDataAsset: public DataAsset
{
public:
	TArray<struct Groups>                                        Groups;                                            // 0x28(0x10)
	TArray<Byte AssetTags>                                       AssetTags;                                         // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class NamedPointsCollectionListDataAsset: public DataAsset
{
public:
	TArray<class NamedPointsCollectionDataAsset*>                SubAssets;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NamedPointsComponentInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class NamedPointsComponent: public ActorComponent
{
public:
	char                                                         pad0x20_XOMEM[0x20];                               // 0xc8(0x20)
	Class NamedPointsCollectionListDataAsset*                    NamedPointsAsset;                                  // 0xe8(0x8)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class NamedPointsContainer: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
	Class NamedPointsComponent*                                  NamedPoints;                                       // 0x3d0(0x8)
};


// Size 0x0 (Full Size[0x3d8] - InheritedSize[0x3d8]
class GlobalNamedPointContainer: public NamedPointsContainer
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ObstacleCourseInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x410] - InheritedSize[0x3c8]
class ObstacleCourse: public Actor
{
public:
	char                                                         pad0x18_JF8LE[0x18];                               // 0x3c8(0x18)
	TArray<struct CheckpointsAndCollisions>                      CheckpointsAndCollisions;                          // 0x3e0(0x10)
	bool                                                         ShouldWaitForTaleStepToBegin;                      // 0x3f0(0x1)
	char                                                         pad0x3_O8CRA[0x3];                                 // 0x3f1(0x3)
	float                                                        MaxTimeInSeconds;                                  // 0x3f4(0x4)
	float                                                        PlayerFinalTime;                                   // 0x3f8(0x4)
	char                                                         pad0x4_0G0O3[0x4];                                 // 0x3fc(0x4)
	Class Actor*                                                 CurrentPlayer;                                     // 0x400(0x8)
	Struct TimerHandle                                           ObstacleCourseTimeHandler;                         // 0x408(0x4)
	char                                                         pad0x4_34OKI[0x4];                                 // 0x40c(0x4)
};


// Size 0x10 (Full Size[0x420] - InheritedSize[0x410]
class ClothingDependentObstacleCourse: public ObstacleCourse
{
public:
	TArray<class Class*>                                         RequiredClothing;                                  // 0x410(0x10)
};


// Size 0x0 (Full Size[0x410] - InheritedSize[0x410]
class ObstacleCourseTestable: public ObstacleCourse
{
public:
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class ObstacleCourseBlackboard: public Actor
{
public:
	TArray<struct PlayerStatesAndTopTimes>                       PlayerStatesAndTopTimes;                           // 0x3c8(0x10)
	Class ObstacleCourse*                                        ObstacleCourseActor;                               // 0x3d8(0x8)
	char                                                         pad0x18_6RF1F[0x18];                               // 0x3e0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ActorPhasingComponentInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class ActorPhasingComponent: public ActorComponent
{
public:
	char                                                         pad0x8_TB9XQ[0x8];                                 // 0xc8(0x8)
	Class Actor*                                                 ActorToHide;                                       // 0xd0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PhasedActorInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class PhasedActorComponent: public ActorComponent
{
public:
	char                                                         pad0x28_IS87M[0x28];                               // 0xc8(0x28)
	Class Actor*                                                 SpawnedMapActor;                                   // 0xf0(0x8)
	Class PhasedClusterRoot*                                     ClusterRoot;                                       // 0xf8(0x8)
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class PhasedActorSourceComponent: public ActorComponent
{
public:
	Class Actor*                                                 PhasingSourceActor;                                // 0xc8(0x8)
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class PhasedClusterRoot: public Actor
{
public:
	TArray<class Pawn*>                                          Pawns;                                             // 0x3c8(0x10)
	char                                                         pad0x8_NEH1W[0x8];                                 // 0x3d8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteVisualiserInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StaticMeshVoteVisualiserInterface: public VoteVisualiserInterface
{
public:
};


// Size 0x50 (Full Size[0x118] - InheritedSize[0xc8]
class StaticMeshVoteVisualiserComponent: public ActorComponent
{
public:
	char                                                         pad0x20_KXDQ6[0x20];                               // 0xc8(0x20)
	TArray<struct VoteIndicators>                                VoteIndicators;                                    // 0xe8(0x10)
	float                                                        VoteAnimationTime;                                 // 0xf8(0x4)
	char                                                         pad0x4_155JO[0x4];                                 // 0xfc(0x4)
	class                                                        CurrentCompany;                                    // 0x100(0x8)
	TArray<class Class*>                                         VoteCompanies;                                     // 0x108(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteAudioInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class VoteAudioComponent: public ActorComponent
{
public:
	char                                                         pad0x8_XIMHG[0x8];                                 // 0xc8(0x8)
	Class WwiseEvent*                                            VoteCastAudioEvent;                                // 0xd0(0x8)
	Class WwiseEvent*                                            VoteRemovedAudioEvent;                             // 0xd8(0x8)
	Class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0xe0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteConsumerInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class VoteConsumerInlineBase: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class VoteValidatorInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class VoteValidatorInlineBase: public Object
{
public:
};


// Size 0x10 (Full Size[0x140] - InheritedSize[0x130]
class VotingInteractionComponentBase: public ActionRulesInteractableComponent
{
public:
	class                                                        HoldInputId;                                       // 0x130(0x8)
	class                                                        ReleaseInputId;                                    // 0x138(0x8)
};


// Size 0x10 (Full Size[0x150] - InheritedSize[0x140]
class InlineVotingInteractionComponent: public VotingInteractionComponentBase
{
public:
	TArray<struct VotingParameters>                              VotingParameters;                                  // 0x140(0x10)
};


// Size 0x0 (Full Size[0x140] - InheritedSize[0x140]
class VotingInteractionComponent: public VotingInteractionComponentBase
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SeaRockDataAsset: public DataAsset
{
public:
	TArray<struct SeaRocks>                                      SeaRocks;                                          // 0x28(0x10)
	TArray<struct UnderseaRocks>                                 UnderseaRocks;                                     // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlameOfFateContainerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealableSceneType: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DefaultRevealableSceneType: public RevealableSceneType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealerInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealableInterface: public Interface
{
public:
};


// Size 0x1b8 (Full Size[0x280] - InheritedSize[0xc8]
class RevealableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_EJQGY[0x8];                                 // 0xc8(0x8)
	float                                                        ActorHiddenDistance;                               // 0xd0(0x4)
	float                                                        MaterialVisibleDistance;                           // 0xd4(0x4)
	float                                                        CloseRevealDistance;                               // 0xd8(0x4)
	bool                                                         InverseRevealableLogic;                            // 0xdc(0x1)
	char                                                         pad0x3_R88PS[0x3];                                 // 0xdd(0x3)
	class                                                        SceneType;                                         // 0xe0(0x8)
	TArray<class RevealRequirement*>                             RevealRequirements;                                // 0xe8(0x10)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0xf8(0x10)
	Class Object*                                                TargetGameStateObject;                             // 0x168(0x8)
	bool                                                         PermanentlyRevealed;                               // 0x170(0x1)
	char                                                         pad0x77_Z8W44[0x77];                               // 0x171(0x77)
	TArray<class RevealRequirement*>                             RequirementsPerRevealer;                           // 0x1e8(0x10)
	TArray<class RevealRequirement*>                             RequirementsPerRevealable;                         // 0x1f8(0x10)
	char                                                         pad0x78_EJ08H[0x78];                               // 0x208(0x78)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RevealableSceneMappingsDataAsset: public DataAsset
{
public:
	TArray<struct Mappings>                                      Mappings;                                          // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RevealableServiceInterface: public Interface
{
public:
};


// Size 0x70 (Full Size[0x438] - InheritedSize[0x3c8]
class RevealableService: public Actor
{
public:
	char                                                         pad0x8_72G8E[0x8];                                 // 0x3c8(0x8)
	float                                                        FullCheckInterval;                                 // 0x3d0(0x4)
	char                                                         pad0x4_20NMY[0x4];                                 // 0x3d4(0x4)
	Class Object*                                                TargetGameStateObject;                             // 0x3d8(0x8)
	Class RevealableServiceSettingsDataAsset*                    ServiceSettings;                                   // 0x3e0(0x8)
	char                                                         pad0x50_U54DW[0x50];                               // 0x3e8(0x50)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class RevealableServiceSettingsDataAsset: public DataAsset
{
public:
	Class RevealableSceneMappingsDataAsset*                      SceneTypeMappingsDataAsset;                        // 0x28(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class RevealableSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  RevealableServiceSettingsDataAsset;                // 0x38(0x10)
};


// Size 0x30 (Full Size[0xf8] - InheritedSize[0xc8]
class RevealerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_7760Y[0x8];                                 // 0xc8(0x8)
	bool                                                         IsMultiplierActive;                                // 0xd0(0x1)
	char                                                         pad0x3_F8JX9[0x3];                                 // 0xd1(0x3)
	float                                                        VisibilityDistanceAddition;                        // 0xd4(0x4)
	float                                                        AnimationDistanceAddition;                         // 0xd8(0x4)
	float                                                        VisibilityAdditionChangeSpeed;                     // 0xdc(0x4)
	float                                                        RevealStartTime;                                   // 0xe0(0x4)
	char                                                         pad0x4_SGJ5P[0x4];                                 // 0xe4(0x4)
	class                                                        SceneType;                                         // 0xe8(0x8)
	Class Object*                                                TargetGameStateObject;                             // 0xf0(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RevealRequirement: public Object
{
public:
	TArray<class RevealRequirement*>                             OR_Requirements;                                   // 0x28(0x10)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class FlameOfFateTypeRevealRequirement: public RevealRequirement
{
public:
	byte                                                         RequiredFlameType;                                 // 0x38(0x1)
	char                                                         pad0x7_VXOKI[0x7];                                 // 0x39(0x7)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class TimeOfDayRevealRequirement: public RevealRequirement
{
public:
	Struct GameTimeRange                                         RevealTimeRange;                                   // 0x38(0x10)
	char                                                         pad0x10_AMDXF[0x10];                               // 0x48(0x10)
};


// Size 0x158 (Full Size[0x520] - InheritedSize[0x3c8]
class StarFieldPuzzle: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
	Class StaticMeshComponent*                                   ConstellationMesh;                                 // 0x3d0(0x8)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x3d8(0x10)
	byte                                                         ReplicatedStarFieldPuzzleState;                    // 0x3e8(0x1)
	char                                                         pad0x3_99F87[0x3];                                 // 0x3e9(0x3)
	float                                                        CompletionDistance;                                // 0x3ec(0x4)
	float                                                        CompletionDegrees;                                 // 0x3f0(0x4)
	float                                                        StartFadeDuration;                                 // 0x3f4(0x4)
	float                                                        StartFadeBrightnessAmount;                         // 0x3f8(0x4)
	float                                                        DimmedFadeDuration;                                // 0x3fc(0x4)
	float                                                        DimmedFadeBrightnessAmount;                        // 0x400(0x4)
	float                                                        EndFadeDuration;                                   // 0x404(0x4)
	float                                                        EndFadeBrightnessAmount;                           // 0x408(0x4)
	float                                                        MinBrightnessRange;                                // 0x40c(0x4)
	float                                                        MaxBrightnessRange;                                // 0x410(0x4)
	char                                                         pad0x4_G29BX[0x4];                                 // 0x414(0x4)
	Class CurveFloat*                                            PositionCurve;                                     // 0x418(0x8)
	Class CurveFloat*                                            PositionCurveLines;                                // 0x420(0x8)
	Struct Vector                                                RelativePlayerLookAtTargetLocation;                // 0x428(0xc)
	char                                                         pad0x4_VTE6D[0x4];                                 // 0x434(0x4)
	Struct StarFieldPuzzleAudioParams                            StarFieldPuzzleAudioParams;                        // 0x478(0x60)
	char                                                         pad0x48_VHKF8[0x48];                               // 0x4d8(0x48)
};


// Size 0x110 (Full Size[0x8f0] - InheritedSize[0x7e0]
class StarFieldRevealerMask: public StaticMeshWieldableItem
{
public:
	char                                                         pad0x8_J83PV[0x8];                                 // 0x7e0(0x8)
	Class StaticMeshComponent*                                   SkySphere;                                         // 0x7e8(0x8)
	Class PostProcessComponent*                                  PostProcessComponent;                              // 0x7f0(0x8)
	Class InventoryItemComponent*                                InventoryItemComponent;                            // 0x7f8(0x8)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x800(0x8)
	Class RevealerComponent*                                     RevealerComponent;                                 // 0x808(0x8)
	byte                                                         ReplicatedStarFieldSkySpinState;                   // 0x810(0x1)
	char                                                         pad0x3_XKLG3[0x3];                                 // 0x811(0x3)
	float                                                        WearMaskTransitionTime;                            // 0x814(0x4)
	char                                                         pad0x18_KLQF6[0x18];                               // 0x818(0x18)
	Struct SkySphereMaterialParams                               SkySphereMaterialParams;                           // 0x830(0x18)
	Struct MaskPostProcessParams                                 MaskPostProcessParams;                             // 0x848(0x50)
	Struct StarFieldRevealerMaskAudioParams                      MaskAudioParams;                                   // 0x898(0x50)
	char                                                         pad0x8_OHI6X[0x8];                                 // 0x8e8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WheelInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WorldSequenceInterface: public Interface
{
public:
};


// Size 0x78 (Full Size[0xa0] - InheritedSize[0x28]
class WorldSequenceService: public Object
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class IteratorFrame: public Object
{
public:
	char                                                         pad0x18_OASUX[0x18];                               // 0x28(0x18)
	Class TaleQuestParallelForeachStepDesc*                      Desc;                                              // 0x40(0x8)
	Class ScriptStruct*                                          StructForCollector;                                // 0x48(0x8)
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class TaleQuestParallelForeachStep: public TaleQuestStep
{
public:
	Class TaleQuestParallelForeachStepDesc*                      Desc;                                              // 0x98(0x8)
	int                                                          Count;                                             // 0xa0(0x4)
	char                                                         pad0x4_9ZJQ1[0x4];                                 // 0xa4(0x4)
	TArray<Interface Steps>                                      Steps;                                             // 0xa8(0x10)
	TArray<class IteratorFrame*>                                 Frames;                                            // 0xb8(0x10)
	char                                                         pad0x8_9PP88[0x8];                                 // 0xc8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestDefinition: public Object
{
public:
};


// Size 0x80 (Full Size[0xb0] - InheritedSize[0x30]
class TaleQuestDescAsset: public QuestDescDataAsset
{
public:
	Class TaleQuestStepDesc*                                     Root;                                              // 0x30(0x8)
	TArray<class UserDefinedStruct*>                             Linkage;                                           // 0x38(0x10)
	TArray<struct ToggledDefinitions>                            ToggledDefinitions;                                // 0x48(0x10)
	class                                                        Definition;                                        // 0x58(0x8)
	class                                                        DevDefinition;                                     // 0x60(0x8)
	Struct FText                                                 TaleFailMessage;                                   // 0x68(0x38)
	struct FName                                                 TaleFailBannerTag;                                 // 0xa0(0x8)
	bool                                                         ShouldFireStartTallTaleTrackedObjective;           // 0xa8(0x1)
	char                                                         pad0x7_E79SA[0x7];                                 // 0xa9(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TaleQuestRootFrame: public Object
{
public:
	char                                                         pad0x8_F7JE7[0x8];                                 // 0x28(0x8)
	Class Object*                                                Definition;                                        // 0x30(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleResourceBrokerServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class SpawnActorBaseStep: public TaleQuestStep
{
public:
	Class SpawnActorStepDescBase*                                BaseDesc;                                          // 0x98(0x8)
};


// Size 0x8 (Full Size[0xa8] - InheritedSize[0xa0]
class SpawnActorStep: public SpawnActorBaseStep
{
public:
	Class SpawnActorStepDesc*                                    Desc;                                              // 0xa0(0x8)
};


// Size 0x8 (Full Size[0xa8] - InheritedSize[0xa0]
class SpawnActorAtPointStep: public SpawnActorBaseStep
{
public:
	Class SpawnActorAtPointStepDesc*                             Desc;                                              // 0xa0(0x8)
};


// Size 0x38 (Full Size[0xd0] - InheritedSize[0x98]
class SpawnPhasedActorStep: public TaleQuestStep
{
public:
	Class SpawnPhasedActorStepDesc*                              Desc;                                              // 0x98(0x8)
	char                                                         pad0x30_LKAU2[0x30];                               // 0xa0(0x30)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class GetVoyageDifficultyFromRankStepDesc: public TaleQuestStepDesc
{
public:
	byte                                                         VoyageType;                                        // 0x80(0x1)
	char                                                         pad0x7_X7W7O[0x7];                                 // 0x81(0x7)
	Struct QuestVariableInt                                      Difficulty;                                        // 0x88(0x30)
};


// Size 0xc0 (Full Size[0x140] - InheritedSize[0x80]
class SpawnActorStepDescBase: public TaleQuestStepDesc
{
public:
	char                                                         pad0x20_JGBKX[0x20];                               // 0x80(0x20)
	Struct QuestVariableActorAssetType                           ActorType;                                         // 0xa0(0x30)
	bool                                                         TrackActor;                                        // 0xd0(0x1)
	bool                                                         AutomaticallyGatherForMigration;                   // 0xd1(0x1)
	bool                                                         MarkAsCritical;                                    // 0xd2(0x1)
	char                                                         pad0x5_S02K4[0x5];                                 // 0xd3(0x5)
	Struct FText                                                 CriticalActorLostMessage;                          // 0xd8(0x38)
	Struct QuestVariableActor                                    ActorVar;                                          // 0x110(0x30)
};


// Size 0x40 (Full Size[0x180] - InheritedSize[0x140]
class SpawnActorStepDesc: public SpawnActorStepDescBase
{
public:
	struct FName                                                 SocketName;                                        // 0x140(0x8)
	bool                                                         bAttachToSocket;                                   // 0x148(0x1)
	char                                                         pad0x7_BFPRH[0x7];                                 // 0x149(0x7)
	Struct QuestVariableActor                                    LocatorVar;                                        // 0x150(0x30)
};


// Size 0x38 (Full Size[0x178] - InheritedSize[0x140]
class SpawnActorAtPointStepDesc: public SpawnActorStepDescBase
{
public:
	Struct QuestVariableTransform                                PointVar;                                          // 0x140(0x38)
};


// Size 0x90 (Full Size[0x110] - InheritedSize[0x80]
class SpawnPhasedActorStepDesc: public TaleQuestStepDesc
{
public:
	struct FName                                                 SocketName;                                        // 0x80(0x8)
	Struct QuestVariableActor                                    LocationVar;                                       // 0xa8(0x30)
	Struct QuestVariableActor                                    ActorVar;                                          // 0xd8(0x30)
	bool                                                         bAttachToSocket;                                   // 0x108(0x1)
	char                                                         pad0x7_3X33Z[0x7];                                 // 0x109(0x7)
};


// Size 0x30 (Full Size[0x140] - InheritedSize[0x110]
class SpawnPhasedActorFromInputPinStepDesc: public SpawnPhasedActorStepDesc
{
public:
	Struct QuestVariableActorAssetType                           PhasedActorType;                                   // 0x110(0x30)
};


// Size 0x70 (Full Size[0xf0] - InheritedSize[0x80]
class TaleQuestParallelForeachStepDesc: public TaleQuestStepDesc
{
public:
	char                                                         pad0x4_3CFO2[0x4];                                 // 0x80(0x4)
	bool                                                         CanEditCount;                                      // 0x84(0x1)
	char                                                         pad0x3_VLY2Q[0x3];                                 // 0x85(0x3)
	Class TaleQuestStepDesc*                                     BodyDesc;                                          // 0xd8(0x8)
	class                                                        Generator;                                         // 0xe0(0x8)
	Class ScriptStruct*                                          Variables;                                         // 0xe8(0x8)
};


// Size 0x40 (Full Size[0x320] - InheritedSize[0x2e0]
class BeachNPCSpawnFlowLocationComponent: public SceneComponent
{
public:
	char                                                         pad0x28_X09UO[0x28];                               // 0x2e0(0x28)
	Struct Rotator                                               SpawnRotation;                                     // 0x308(0xc)
	char                                                         pad0xc_CPKL3[0xc];                                 // 0x314(0xc)
};


// Size 0x40 (Full Size[0x320] - InheritedSize[0x2e0]
class OnboardingIntroLocationComponent: public SceneComponent
{
public:
	char                                                         pad0x28_UM749[0x28];                               // 0x2e0(0x28)
	Struct Rotator                                               SpawnRotation;                                     // 0x308(0xc)
	char                                                         pad0xc_4IRC1[0xc];                                 // 0x314(0xc)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class MastAudioParams: public DataAsset
{
public:
	Class WwiseEvent*                                            PlaySailLength;                                    // 0x28(0x8)
	Class WwiseEvent*                                            StopSailLength;                                    // 0x30(0x8)
	Class WwiseEvent*                                            PlaySailLengthStopTop;                             // 0x38(0x8)
	Class WwiseEvent*                                            PlaySailLengthStopBottom;                          // 0x40(0x8)
	struct FName                                                 RtpcSailCompletion;                                // 0x48(0x8)
	float                                                        MinCompletionValue;                                // 0x50(0x4)
	float                                                        MaxCompletionValue;                                // 0x54(0x4)
	Class WwiseEvent*                                            PlaySailAngle;                                     // 0x58(0x8)
	Class WwiseEvent*                                            StopSailAngle;                                     // 0x60(0x8)
	Class WwiseEvent*                                            PlaySailAngleStopLimit;                            // 0x68(0x8)
	Class WwiseEvent*                                            PlaySailAngleCentred;                              // 0x70(0x8)
	struct FName                                                 RtpcSailAngle;                                     // 0x78(0x8)
	float                                                        MinAngleValue;                                     // 0x80(0x4)
	float                                                        MaxAngleValue;                                     // 0x84(0x4)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class MastDescAsset: public ShipPartDescAsset
{
public:
	Struct MastDesc                                              MastDesc;                                          // 0x28(0x40)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsUsingCannonInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class IsUsingHarpoonLauncherInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LauncherParentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MountedWeaponInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RammerType: public Object
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RammableDamageDataAsset: public DataAsset
{
public:
	TArray<struct DamageSpeedParams>                             DamageSpeedParams;                                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RammableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SampledMovementInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class RammableComponent: public ActorComponent
{
public:
	char                                                         pad0x8_QCPID[0x8];                                 // 0xc8(0x8)
	Class RammableDamageDataAsset*                               DamageSettings;                                    // 0xd0(0x8)
	float                                                        MinIntervalBetweenRamDamage;                       // 0xd8(0x4)
	char                                                         pad0x4_9VSBG[0x4];                                 // 0xdc(0x4)
	char                                                         pad0x20_RJFHL[0x20];                               // 0xe0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RammerInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class RammerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_QV34D[0x8];                                 // 0xc8(0x8)
	class                                                        DamagerType;                                       // 0xd0(0x8)
	class                                                        RammerType;                                        // 0xd8(0x8)
	char                                                         pad0x10_30T5H[0x10];                               // 0xe0(0x10)
};


// Size 0x100 (Full Size[0x568] - InheritedSize[0x468]
class ForceSpot: public InteractableObject
{
public:
	char                                                         pad0x8_K2KGM[0x8];                                 // 0x468(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x470(0x8)
	Class SplineComponent*                                       InteractionSplineComponent;                        // 0x478(0x8)
	float                                                        ForceScalar;                                       // 0x480(0x4)
	char                                                         pad0x4_PW1EP[0x4];                                 // 0x484(0x4)
	Struct FText                                                 InteractionDisplayName;                            // 0x488(0x38)
	float                                                        InteractionRadius;                                 // 0x4c0(0x4)
	char                                                         pad0xa4_GXK2B[0xa4];                               // 0x4c4(0xa4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MoveableObjectInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x668] - InheritedSize[0x640]
class PollyProxy: public ItemProxy
{
public:
	float                                                        TargetHeight;                                      // 0x640(0x4)
	float                                                        TakeOffTime;                                       // 0x644(0x4)
	bool                                                         IsFlyingAway;                                      // 0x648(0x1)
	char                                                         pad0x7_6SQZI[0x7];                                 // 0x649(0x7)
	Class BoxComponent*                                          BaseComponent;                                     // 0x650(0x8)
	char                                                         pad0x10_V1H3N[0x10];                               // 0x658(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShroudBreakerProtectionInterface: public Interface
{
public:
};


// Size 0x170 (Full Size[0x680] - InheritedSize[0x510]
class Seat: public ControllableObject
{
public:
	class                                                        InteractionInput;                                  // 0x510(0x8)
	Struct SittingActionStateParams                              SittingStateParams;                                // 0x518(0xa0)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x5b8(0x8)
	struct FName                                                 SocketName;                                        // 0x5c0(0x8)
	Struct FText                                                 InteractionVerb;                                   // 0x5c8(0x38)
	Struct FText                                                 InteractionDisplayName;                            // 0x600(0x38)
	bool                                                         HoldToInteract;                                    // 0x638(0x1)
	char                                                         pad0x7_5QH49[0x7];                                 // 0x639(0x7)
	class                                                        HoldInteractionInput;                              // 0x640(0x8)
	float                                                        HoldDuration;                                      // 0x648(0x4)
	float                                                        CosCameraAngleToTurnOffFirstPersonMesh;            // 0x64c(0x4)
	char                                                         pad0x30_6QEMI[0x30];                               // 0x650(0x30)
};


// Size 0x190 (Full Size[0x810] - InheritedSize[0x680]
class RowingSeat: public Seat
{
public:
	char                                                         pad0x8_JQ7V8[0x8];                                 // 0x680(0x8)
	Struct OarParams                                             OarParams;                                         // 0x688(0x38)
	float                                                        StrokeSynchronisationWindow;                       // 0x6c0(0x4)
	char                                                         pad0x4_ZXIU0[0x4];                                 // 0x6c4(0x4)
	Class ForceFeedbackEffect*                                   ForceFeedbackForLeftStrokeEnd;                     // 0x6c8(0x8)
	Class ForceFeedbackEffect*                                   ForceFeedbackForRightStrokeEnd;                    // 0x6d0(0x8)
	struct FName                                                 PaddleSocketName;                                  // 0x6d8(0x8)
	Class StaticMeshComponent*                                   LeftOarMesh;                                       // 0x6e0(0x8)
	Class StaticMeshComponent*                                   RightOarMesh;                                      // 0x6e8(0x8)
	TArray<Byte OarInputStates>                                  OarInputStates;                                    // 0x6f0(0x10)
	Struct Oar                                                   LeftOar;                                           // 0x700(0x60)
	Struct Oar                                                   RightOar;                                          // 0x760(0x60)
	char                                                         pad0x48_CJN75[0x48];                               // 0x7c0(0x48)
	float                                                        PredictiveRowingMinimumStrokeTime;                 // 0x808(0x4)
	int                                                          PredictiveRowingSampleSize;                        // 0x80c(0x4)
};


// Size 0x1a8 (Full Size[0x270] - InheritedSize[0xc8]
class ExplosionComponent: public ActorComponent
{
public:
	char                                                         pad0x8_U61LX[0x8];                                 // 0xc8(0x8)
	Struct ExplosionInfo                                         ExplosionParams;                                   // 0xd0(0x160)
	bool                                                         UseLaunchLocation;                                 // 0x230(0x1)
	char                                                         pad0x3_XE0WE[0x3];                                 // 0x231(0x3)
	Struct Vector                                                RelativeLaunchLocation;                            // 0x234(0xc)
	float                                                        LaunchHeight;                                      // 0x240(0x4)
	char                                                         pad0x2c_WAD14[0x2c];                               // 0x244(0x2c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CannonDamagerType: public DamagerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomVaultServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class CustomVaultService: public Object
{
public:
	char                                                         pad0x8_KHNTQ[0x8];                                 // 0x28(0x8)
	Class World*                                                 World;                                             // 0x30(0x8)
	Struct Guid                                                  CustomVaultServiceId;                              // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VaultKeyMappingDataAsset: public DataAsset
{
public:
	TArray<struct KeyMappings>                                   KeyMappings;                                       // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VaultTableMaterialSetDataAsset: public DataAsset
{
public:
	TArray<class MaterialInstance*>                              SolutionHintMaterials;                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckInterface: public Interface
{
public:
};


// Size 0xe8 (Full Size[0x4b0] - InheritedSize[0x3c8]
class Shipwreck: public Actor
{
public:
	char                                                         pad0x18_LXZ9E[0x18];                               // 0x3c8(0x18)
	Class SceneComponent*                                        MeshParentComponent;                               // 0x3e0(0x8)
	Class PrimitiveComponent*                                    RevealTriggerVolume;                               // 0x3e8(0x8)
	Class CalmWaterComponent*                                    CalmZone;                                          // 0x3f0(0x8)
	Struct FText                                                 LocalisedName;                                     // 0x3f8(0x38)
	byte                                                         TrackedActorType;                                  // 0x430(0x1)
	char                                                         pad0x3_9T7VY[0x3];                                 // 0x431(0x3)
	float                                                        DistanceThresholdToConsiderPlayerAsBeingNearShipwreckForTelemetry; // 0x434(0x4)
	float                                                        GameEventExclusionRadius;                          // 0x438(0x4)
	float                                                        ServerMigrationPointOfInterestDistance;            // 0x43c(0x4)
	class                                                        ProxyClass;                                        // 0x440(0x8)
	bool                                                         ShouldDisableMigrationForSpawnItemsUntilPickedUp;  // 0x448(0x1)
	bool                                                         ShouldDisableOverlapEvent;                         // 0x449(0x1)
	char                                                         pad0x1e_4K13O[0x1e];                               // 0x44a(0x1e)
	Struct EncounterParams                                       SightingEncounterParams;                           // 0x468(0xc)
	Struct EncounterParams                                       CloseEncounterParams;                              // 0x474(0xc)
	char                                                         pad0x30_D7P9S[0x30];                               // 0x480(0x30)
};


// Size 0x38 (Full Size[0x4e8] - InheritedSize[0x4b0]
class CustomShipwreck: public Shipwreck
{
public:
	char                                                         pad0x8_RLWKQ[0x8];                                 // 0x4b0(0x8)
	class                                                        WreckIndicatorActorClass;                          // 0x4b8(0x8)
	Struct Vector                                                WreckIndicatorOffset;                              // 0x4c0(0xc)
	char                                                         pad0x4_BHZJV[0x4];                                 // 0x4cc(0x4)
	Class Actor*                                                 SpawnedWreckIndicatorActor;                        // 0x4d0(0x8)
	char                                                         pad0x10_BV980[0x10];                               // 0x4d8(0x10)
};


// Size 0x10 (Full Size[0x320] - InheritedSize[0x310]
class ShipwreckAudioEmitterComponent: public WwiseEmitterComponent
{
public:
	Class WwiseEvent*                                            WwiseEvent;                                        // 0x310(0x8)
	char                                                         pad0x8_YYFMG[0x8];                                 // 0x318(0x8)
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class ShipwreckHullAudio: public Actor
{
public:
	Class SceneComponent*                                        ShipwreckAudioRootComponent;                       // 0x3c8(0x8)
	TArray<struct ShipwreckAudioDataArray>                       ShipwreckAudioDataArray;                           // 0x3d0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipwreckTrackerServiceInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class SpawnShipwreckTaleStep: public TaleQuestStep
{
public:
	Class SpawnShipwreckTaleStepDesc*                            StepDesc;                                          // 0x98(0x8)
	char                                                         pad0x8_Z6VCL[0x8];                                 // 0xa0(0x8)
};


// Size 0x70 (Full Size[0xd0] - InheritedSize[0x60]
class TaleQuestShipwreckService: public TaleQuestService
{
public:
	Class CustomShipwreck*                                       ActiveWreck;                                       // 0x60(0x8)
	Class TaleQuestShipwreckServiceDesc*                         Desc;                                              // 0x68(0x8)
	char                                                         pad0x60_CQ9IG[0x60];                               // 0x70(0x60)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleQuestShipwreckServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0xf0 (Full Size[0x170] - InheritedSize[0x80]
class SpawnShipwreckTaleStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableShipwreck                                SpawnedShipwreck;                                  // 0x80(0x30)
	Struct QuestVariableClass                                    CustomWreckType;                                   // 0xb0(0x30)
	Struct QuestVariableVector                                   CustomWreckLocation;                               // 0xe0(0x30)
	Struct QuestVariableRotator                                  CustomWreckRotation;                               // 0x110(0x30)
	Struct QuestVariableText                                     CustomWreckVesselName;                             // 0x140(0x30)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestLockCaptainCabinDoorStep: public TaleQuestStep
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleQuestLockCaptainCabinDoorStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableShipwreck                                Shipwreck;                                         // 0x80(0x30)
	Struct QuestVariableItemInfo                                 CabinKey;                                          // 0xb0(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkeletonFortTrackerServiceInterface: public Interface
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class IsOnActiveFortStatCondition: public StatCondition
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkellyFortServiceInterface: public SkeletonFortTrackerServiceInterface
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class RegionMapDataAsset: public DataAsset
{
public:
	Struct RegionMapData                                         RegionData;                                        // 0x28(0x48)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RegionMapSetAsset: public DataAsset
{
public:
	TArray<class RegionMapDataAsset*>                            MapRegions;                                        // 0x28(0x10)
};


// Size 0x10 (Full Size[0x2f0] - InheritedSize[0x2e0]
class AirBubbleComponent: public SceneComponent
{
public:
	float                                                        Radius;                                            // 0x2e0(0x4)
	char                                                         pad0xc_K2CUB[0xc];                                 // 0x2e4(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AirGivingServiceInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AirGivingService: public Object
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class AirPocketStatus: public StatusBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DrowningComponentInterface: public Interface
{
public:
};


// Size 0x100 (Full Size[0x1c8] - InheritedSize[0xc8]
class DrowningComponent: public ActorComponent
{
public:
	char                                                         pad0x8_RWTME[0x8];                                 // 0xc8(0x8)
	Class DrowningComponentParams*                               Params;                                            // 0xd0(0x8)
	Struct BlendableDrowningParams                               DrowningParams;                                    // 0xd8(0x28)
	Class ParticleSystemComponent*                               BubbleVFXComponent;                                // 0x100(0x8)
	Class ParticleSystemComponent*                               ExtraBubblesFirstPersonVFXComponent;               // 0x108(0x8)
	float                                                        OxygenLevel;                                       // 0x110(0x4)
	char                                                         pad0x54_YXE57[0x54];                               // 0x114(0x54)
	byte                                                         ServerDrowningState;                               // 0x168(0x1)
	char                                                         pad0x7_7EZIW[0x7];                                 // 0x169(0x7)
	Class Actor*                                                 OwnerCharacter;                                    // 0x170(0x8)
	Class HealthComponent*                                       OwnerHealthComponent;                              // 0x178(0x8)
	char                                                         pad0x10_PTPCB[0x10];                               // 0x180(0x10)
	bool                                                         IsDrowningDisabled;                                // 0x190(0x1)
	char                                                         pad0x37_7MOAP[0x37];                               // 0x191(0x37)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class StatusResponsePreventDrowning: public StatusResponse
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class CommoditySourceMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HideoutServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PortalBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class PortalDesc: public DataAsset
{
public:
	Class TunnelDesc*                                            TunnelDesc;                                        // 0x28(0x8)
	Struct StringAssetReference                                  RequestedPortalInstance;                           // 0x30(0x10)
	char                                                         pad0x20_POV5L[0x20];                               // 0x40(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PortalInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x568] - InheritedSize[0x540]
class PortalSignalCutSceneActor: public SequencerCutSceneActor
{
public:
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class PortalSignalCutSceneAnchor: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PortalServiceInterface: public Interface
{
public:
};


// Size 0x298 (Full Size[0x660] - InheritedSize[0x3c8]
class TunnelOfTheDamnedPortal: public Actor
{
public:
	char                                                         pad0x10_JYDJX[0x10];                               // 0x3c8(0x10)
	Class SceneComponent*                                        Root;                                              // 0x3d8(0x8)
	Class BoxComponent*                                          TriggerVolume;                                     // 0x3e0(0x8)
	Class SphereComponent*                                       ProximityTriggerVolume;                            // 0x3e8(0x8)
	bool                                                         EnableAllowedTriggerActorTypeFiltering;            // 0x3f0(0x1)
	char                                                         pad0x7_H5693[0x7];                                 // 0x3f1(0x7)
	TArray<class Class*>                                         AllowedTriggerActorTypes;                          // 0x3f8(0x10)
	bool                                                         ActivateSignalOnSpawn;                             // 0x408(0x1)
	char                                                         pad0x3_QE65V[0x3];                                 // 0x409(0x3)
	float                                                        MigrationBlockingRadius;                           // 0x40c(0x4)
	Class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x410(0x8)
	Class WwiseEvent*                                            StartPortalAmbianceEvent;                          // 0x418(0x8)
	Class WwiseEvent*                                            StopPortalAmbianceEvent;                           // 0x420(0x8)
	Class WwiseEvent*                                            PortalEntryEvent;                                  // 0x428(0x8)
	Class PortalDesc*                                            Desc;                                              // 0x430(0x8)
	Class PortalSignalCutSceneActor*                             PortalSignalCutSceneActor;                         // 0x438(0x8)
	Class Actor*                                                 PortalSignalCutSceneAnchorActor;                   // 0x440(0x8)
	char                                                         pad0x218_USRWI[0x218];                             // 0x448(0x218)
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class PortalLocatorActor: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
	Class ContendedResourceComponent*                            ContendedResourceComponent;                        // 0x3d0(0x8)
	class                                                        ActivePortalClass;                                 // 0x3d8(0x8)
	TArray<class TunnelOfTheDamnedPortalShipSpawnLocation*>      AssociatedSpawnLocations;                          // 0x3e0(0x10)
	char                                                         pad0x10_NY5FB[0x10];                               // 0x3f0(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PortalServiceParams: public DataAsset
{
public:
	float                                                        MinimumSpawnRangeInMeters;                         // 0x28(0x4)
	float                                                        MaximumSpawnRangeInMeters;                         // 0x2c(0x4)
	float                                                        PortalBoundsThreshold;                             // 0x30(0x4)
	char                                                         pad0x4_UJJZP[0x4];                                 // 0x34(0x4)
};


// Size 0xc8 (Full Size[0x490] - InheritedSize[0x3c8]
class PortalService: public Actor
{
public:
	char                                                         pad0x8_4DX4K[0x8];                                 // 0x3c8(0x8)
	Class PortalServiceParams*                                   Params;                                            // 0x3d0(0x8)
	TArray<struct ActivePortals>                                 ActivePortals;                                     // 0x3d8(0x10)
	TArray<struct PortalSpawnInfos>                              PortalSpawnInfos;                                  // 0x3e8(0x10)
	char                                                         pad0x98_7EYHU[0x98];                               // 0x3f8(0x98)
};


// Size 0x28 (Full Size[0x88] - InheritedSize[0x60]
class PortalTaleService: public TaleQuestService
{
public:
	Class PortalTaleServiceDesc*                                 Desc;                                              // 0x60(0x8)
	char                                                         pad0x20_TTLJ7[0x20];                               // 0x68(0x20)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PortalTaleServiceDesc: public TaleQuestServiceDesc
{
public:
	Class PortalDesc*                                            FallbackPortalDesc;                                // 0x28(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SpawnPortalTaleStep: public TaleQuestStep
{
public:
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SpawnPortalTaleStepDesc: public TaleQuestStepDesc
{
public:
	Class PortalDesc*                                            PortalDesc;                                        // 0x80(0x8)
	Struct QuestVariableActor                                    SpawnedPortal;                                     // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ArrivalTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ArrivalTunnelOfTheDamnedInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EjectFromTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnterTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ExitTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0x60 (Full Size[0x428] - InheritedSize[0x3c8]
class InvasionDepartureTunnelRandomisedSceneryTile: public Actor
{
public:
	TArray<Assetclass RandomActors>                              RandomActors;                                      // 0x3c8(0x10)
	char                                                         pad0x20_W9QA7[0x20];                               // 0x3d8(0x20)
	Struct InvasionTunnelLoadedSceneryTileAssetEntryWrapper      LoadedRandomActors;                                // 0x3f8(0x10)
	Class ChildActorComponent*                                   ChildActor;                                        // 0x408(0x8)
	Class SceneComponent*                                        RootComp;                                          // 0x410(0x8)
	char                                                         pad0x10_T7J3N[0x10];                               // 0x418(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class InvasionTunnelSceneryCreatureDioramaGroup: public DataAsset
{
public:
	Struct WeightedTunnelCreatureDioramaCollection               CreatureDioramas;                                  // 0x28(0x18)
};


// Size 0x40 (Full Size[0x408] - InheritedSize[0x3c8]
class InvasionDepartureTunnelSceneryTileInstance: public Actor
{
public:
	TArray<struct CreatureDioromas>                              CreatureDioromas;                                  // 0x3c8(0x10)
	int                                                          MaxCreatureDioromas;                               // 0x3d8(0x4)
	char                                                         pad0x4_2W2B4[0x4];                                 // 0x3dc(0x4)
	TArray<class Actor*>                                         SpawnedCreatureDioramas;                           // 0x3e0(0x10)
	char                                                         pad0x8_PL6AP[0x8];                                 // 0x3f0(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3f8(0x8)
	char                                                         pad0x8_NHC19[0x8];                                 // 0x400(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InvasionTunnelDioramaSpawnCondition: public Object
{
public:
};


// Size 0xe0 (Full Size[0x4a8] - InheritedSize[0x3c8]
class InvasionDepartureTunnelScrollingScenery: public Actor
{
public:
	double                                                       ReplicatedServerStartTime;                         // 0x3c8(0x8)
	TArray<struct ServerMovingObjectsCachedLocations>            ServerMovingObjectsCachedLocations;                // 0x3d0(0x10)
	TArray<class Class*>                                         CurrentlyLoadedTileAssets;                         // 0x3e0(0x10)
	Class BoxComponent*                                          MovementRoot;                                      // 0x3f0(0x8)
	Struct Vector                                                ScrollVelocity;                                    // 0x3f8(0xc)
	char                                                         pad0x4_ZY1V4[0x4];                                 // 0x404(0x4)
	Struct InvasionTunnelCreatureDioramaSpawnManager             CreatureDioramaManager;                            // 0x408(0x18)
	bool                                                         HaltRequested;                                     // 0x420(0x1)
	char                                                         pad0x3_BG2JD[0x3];                                 // 0x421(0x3)
	int                                                          ReplicatedRandomSeed;                              // 0x424(0x4)
	Class SceneComponent*                                        SharedRoot;                                        // 0x428(0x8)
	TArray<class SceneComponent*>                                MovingObjects;                                     // 0x430(0x10)
	char                                                         pad0x68_ZJU61[0x68];                               // 0x440(0x68)
};


// Size 0x10 (Full Size[0x70] - InheritedSize[0x60]
class InvasionDepartureTunnelTaleService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InvasionDepartureTunnelTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class InvasionTunnelDioramaLimitedQuantitySpawnCondition: public InvasionTunnelDioramaSpawnCondition
{
public:
	int                                                          MaximumActiveAtOnce;                               // 0x28(0x4)
	char                                                         pad0x4_NW7NB[0x4];                                 // 0x2c(0x4)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class InvasionTunnelScrollingSceneryPersistentServerData: public DataAsset
{
public:
	TArray<class Class*>                                         PersistentlyLoadedTileAssets;                      // 0x28(0x10)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class SendCrewToTunnelOfTheDamnedTaleStep: public TaleQuestStep
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class TunnelPresenterObjectBase: public Object
{
public:
	class                                                        ShipSize;                                          // 0x28(0x8)
	char                                                         pad0x20_SYX2R[0x20];                               // 0x30(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelLevelId: public Object
{
public:
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class TunnelDesc: public DataAsset
{
public:
	Class TunnelTypesDataAsset*                                  TunnelTypes;                                       // 0x28(0x8)
	class                                                        TunnelLevelId;                                     // 0x30(0x8)
	float                                                        TunnelYaw;                                         // 0x38(0x4)
	char                                                         pad0x4_WG6DS[0x4];                                 // 0x3c(0x4)
	Class WwiseEvent*                                            AmbienceSfxEvent;                                  // 0x40(0x8)
	Class WwiseEvent*                                            AmbienceSfxStop;                                   // 0x48(0x8)
	Class WwiseObjectPoolWrapper*                                AmbienceSfxPool;                                   // 0x50(0x8)
	byte                                                         TeleportAudioSettings;                             // 0x58(0x1)
	bool                                                         DropCapstanOnTunnelExit;                           // 0x59(0x1)
	char                                                         pad0x6_2UBOG[0x6];                                 // 0x5a(0x6)
	Class TunnelPresenterObjectParamsBase*                       PresenterObjectParams;                             // 0x60(0x8)
	bool                                                         ForceRespawnPlayersOnShipInFailureScenarios;       // 0x68(0x1)
	bool                                                         SpawnShipOutsidePortalInFailureScenarios;          // 0x69(0x1)
	char                                                         pad0x6_MJX4A[0x6];                                 // 0x6a(0x6)
	Class PopUpMessageDesc*                                      TunnelFailurePopUpDesc;                            // 0x70(0x8)
	byte                                                         TunnelFailureShipSailState;                        // 0x78(0x1)
	bool                                                         ShouldTunnelCancelVoyages;                         // 0x79(0x1)
	char                                                         pad0x6_D7MRD[0x6];                                 // 0x7a(0x6)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class SendCrewToTunnelOfTheDamnedTaleStepDesc: public TaleQuestStepDesc
{
public:
	Class TunnelDesc*                                            TunnelDesc;                                        // 0x80(0x8)
	Struct QuestVariableBool                                     Success;                                           // 0x88(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SinkingTunnelOfTheDamnedActionStateId: public ActionStateId
{
public:
};


// Size 0xb0 (Full Size[0xd8] - InheritedSize[0x28]
class TunnelDependencies: public Object
{
public:
};


// Size 0x0 (Full Size[0xd8] - InheritedSize[0xd8]
class ArrivalTunnelDependencies: public TunnelDependencies
{
public:
};


// Size 0x40 (Full Size[0x118] - InheritedSize[0xd8]
class InvasionArrivalTunnelDependencies: public ArrivalTunnelDependencies
{
public:
};


// Size 0x60 (Full Size[0x138] - InheritedSize[0xd8]
class DepartureTunnelDependencies: public TunnelDependencies
{
public:
};


// Size 0x20 (Full Size[0x158] - InheritedSize[0x138]
class InvasionDepartureTunnelDependencies: public DepartureTunnelDependencies
{
public:
};


// Size 0x18 (Full Size[0x98] - InheritedSize[0x80]
class ArrivalTunnelDesc: public TunnelDesc
{
public:
	Struct Guid                                                  MigrationGuid;                                     // 0x80(0x10)
	byte                                                         ShipSailStateUponArrival;                          // 0x90(0x1)
	bool                                                         CentreMapTableOnArrivalLocation;                   // 0x91(0x1)
	char                                                         pad0x6_AHNKI[0x6];                                 // 0x92(0x6)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class ArrivalRespawnTunnelDesc: public ArrivalTunnelDesc
{
public:
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class ClientDestinationPreLoadingArrivalTunnelDesc: public ArrivalTunnelDesc
{
public:
	float                                                        DestinationLocationAsyncLoadTimeoutSeconds;        // 0x98(0x4)
	char                                                         pad0x4_J56T6[0x4];                                 // 0x9c(0x4)
};


// Size 0x20 (Full Size[0xc0] - InheritedSize[0xa0]
class InvasionArrivalTunnelDesc: public ClientDestinationPreLoadingArrivalTunnelDesc
{
public:
	Struct Vector                                                DestinationLocationOffset;                         // 0xa0(0xc)
	int                                                          SecondsToAllowLoadingBeforeRecomputingDestinationLocation; // 0xac(0x4)
	TArray<struct FactionSpecificTunnelFailurePopUpDescs>        FactionSpecificTunnelFailurePopUpDescs;            // 0xb0(0x10)
};


// Size 0x78 (Full Size[0xf8] - InheritedSize[0x80]
class DepartureTunnelDesc: public TunnelDesc
{
public:
	Struct StringAssetReference                                  ArrivalTunnelDesc;                                 // 0x80(0x10)
	float                                                        MinimumTunnelDuration;                             // 0x90(0x4)
	float                                                        PlayerArrivalTimeoutSeconds;                       // 0x94(0x4)
	float                                                        ShipRespawnTimeoutSeconds;                         // 0x98(0x4)
	float                                                        MigrationSequenceSeconds;                          // 0x9c(0x4)
	TArray<struct MigrationSequenceCameraAnimation>              MigrationSequenceCameraAnimation;                  // 0xa0(0x10)
	Struct FString                                               MatchmakingPlayModeTag;                            // 0xb0(0x10)
	bool                                                         WaitForMatchmakingSequenceToCompleteBeforeMigrating; // 0xc0(0x1)
	byte                                                         MigrationShipSailState;                            // 0xc1(0x1)
	bool                                                         TeleportShipAfterMigration;                        // 0xc2(0x1)
	char                                                         pad0x5_XZ18K[0x5];                                 // 0xc3(0x5)
	Struct StringAssetReference                                  SpawnLocation;                                     // 0xc8(0x10)
	bool                                                         SpawnShipOutsidePortalOnDestinationServer;         // 0xd8(0x1)
	char                                                         pad0x7_IWGY6[0x7];                                 // 0xd9(0x7)
	TArray<struct DuplicateEmissaryFlagByFeatureInPriorityOrder> DuplicateEmissaryFlagByFeatureInPriorityOrder;     // 0xe0(0x10)
	class                                                        ShipTeleportEffectsClass;                          // 0xf0(0x8)
};


// Size 0x48 (Full Size[0x140] - InheritedSize[0xf8]
class InvasionDepartureTunnelDesc: public DepartureTunnelDesc
{
public:
	float                                                        SecondsAfterCrewArriveInTunnelBeforeAllowingTunnelCancellation; // 0xf8(0x4)
	float                                                        SecondsAfterCrewArriveInTunnelBeforeShowingCancellationReminderPopUp; // 0xfc(0x4)
	float                                                        SecondsBetweenEachCancellationReminderPopUp;       // 0x100(0x4)
	char                                                         pad0x4_2Q4E5[0x4];                                 // 0x104(0x4)
	TArray<struct CancellationReminderPopUpDescs>                CancellationReminderPopUpDescs;                    // 0x108(0x10)
	TArray<struct XboxGamePadOnlyServerCancellationReminderPopUpDescs> XboxGamePadOnlyServerCancellationReminderPopUpDescs; // 0x118(0x10)
	float                                                        RequiredDistanceFromOtherShipsWhenRespawningAtDiveLocationDueToTunnelFailure; // 0x128(0x4)
	float                                                        RequiredDistanceFromOtherShipsWhenRespawningAtNearestShipSpawnLocationDueToTunnelFailure; // 0x12c(0x4)
	TArray<struct FactionSpecificTunnelFailurePopUpDescs>        FactionSpecificTunnelFailurePopUpDescs;            // 0x130(0x10)
};


// Size 0x20 (Full Size[0x118] - InheritedSize[0xf8]
class SinkingTunnelDesc: public DepartureTunnelDesc
{
public:
	TArray<struct FactionMusics>                                 FactionMusics;                                     // 0xf8(0x10)
	Class WwiseObjectPoolWrapper*                                FactionMusicPool;                                  // 0x108(0x8)
	struct FName                                                 CrewFaction;                                       // 0x110(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelOfTheDamnedInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedServiceInterface: public Interface
{
public:
};


// Size 0x2a8 (Full Size[0x670] - InheritedSize[0x3c8]
class TunnelOfTheDamnedBase: public Actor
{
public:
	char                                                         pad0x18_47FN5[0x18];                               // 0x3c8(0x18)
	Class SceneComponent*                                        Root;                                              // 0x3e0(0x8)
	Class StaticMeshComponent*                                   TunnelCollisions;                                  // 0x3e8(0x8)
	Class BoxComponent*                                          TunnelOverlapZone;                                 // 0x3f0(0x8)
	Struct TunnelOfTheDamnedShipPartParams                       ShipPartParams;                                    // 0x3f8(0x58)
	Struct FString                                               TunnelType;                                        // 0x450(0x10)
	Class TunnelPresenterObjectBase*                             TunnelPresentation;                                // 0x460(0x8)
	char                                                         pad0x8_NGO02[0x8];                                 // 0x468(0x8)
	Class TunnelDesc*                                            Desc;                                              // 0x480(0x8)
	Class Actor*                                                 ShipInTunnel;                                      // 0x488(0x8)
	int                                                          TunnelStreamingLevelId;                            // 0x490(0x4)
	int                                                          ReplicatedTunnelStreamingLevelId;                  // 0x494(0x4)
	TArray<class Actor*>                                         CrewMembersInTunnel;                               // 0x498(0x10)
	TArray<Interface FailureActionStateFadeCompletedTargets>     FailureActionStateFadeCompletedTargets;            // 0x520(0x10)
	char                                                         pad0x140_2AQXO[0x140];                             // 0x530(0x140)
};


// Size 0x30 (Full Size[0x6a0] - InheritedSize[0x670]
class ArrivalTunnelOfTheDamned: public TunnelOfTheDamnedBase
{
public:
	char                                                         pad0x10_MUUOG[0x10];                               // 0x670(0x10)
	Class ArrivalTunnelDesc*                                     ArrivalTunnelDesc;                                 // 0x680(0x8)
	TArray<struct PlayersInArrivalTunnelOfTheDamnedActionState>  PlayersInArrivalTunnelOfTheDamnedActionState;      // 0x688(0x10)
	char                                                         pad0x8_EYT92[0x8];                                 // 0x698(0x8)
};


// Size 0x0 (Full Size[0x6a0] - InheritedSize[0x6a0]
class ArrivalRespawnTunnelOfTheDamned: public ArrivalTunnelOfTheDamned
{
public:
};


// Size 0x0 (Full Size[0x6a0] - InheritedSize[0x6a0]
class ClientDestinationPreLoadingArrivalTunnelOfTheDamned: public ArrivalTunnelOfTheDamned
{
public:
	Class ClientDestinationPreLoadingArrivalTunnelDesc*          ClientDestinationPreLoadingArrivalTunnelDesc;      // 0x698(0x8)
};


// Size 0x160 (Full Size[0x800] - InheritedSize[0x6a0]
class InvasionArrivalTunnelOfTheDamned: public ClientDestinationPreLoadingArrivalTunnelOfTheDamned
{
public:
	Class InvasionArrivalTunnelDesc*                             InvasionArrivalTunnelDesc;                         // 0x6a0(0x8)
	char                                                         pad0x158_C1530[0x158];                             // 0x6a8(0x158)
};


// Size 0x200 (Full Size[0x870] - InheritedSize[0x670]
class DepartureTunnelOfTheDamned: public TunnelOfTheDamnedBase
{
public:
	Class TunnelsOfTheDamnedLootFilterDataAsset*                 LootFilterDataAsset;                               // 0x670(0x8)
	Class DepartureTunnelDesc*                                   DepartureTunnelDesc;                               // 0x678(0x8)
	TArray<Interface EnterTunnelFadeCompletedTargets>            EnterTunnelFadeCompletedTargets;                   // 0x720(0x10)
	char                                                         pad0xd8_CXIAW[0xd8];                               // 0x730(0xd8)
	char                                                         pad0x68_2N79S[0x68];                               // 0x808(0x68)
};


// Size 0xf0 (Full Size[0x960] - InheritedSize[0x870]
class InvasionDepartureTunnelOfTheDamned: public DepartureTunnelOfTheDamned
{
public:
	Class InvasionDepartureTunnelDesc*                           InvasionDepartureTunnelDesc;                       // 0x870(0x8)
	bool                                                         AllowTunnelCancellation;                           // 0x898(0x1)
	char                                                         pad0xc7_48O2Z[0xc7];                               // 0x899(0xc7)
};


// Size 0x100 (Full Size[0x970] - InheritedSize[0x870]
class SinkingTunnelOfTheDamned: public DepartureTunnelOfTheDamned
{
public:
	char                                                         pad0x10_IOKUV[0x10];                               // 0x870(0x10)
	Class ExhaustibleTeleportLocationRetrievalComponent*         TeleportLocationRetrievalComponent;                // 0x880(0x8)
	Struct Rotator                                               ShipOrientation;                                   // 0x888(0xc)
	char                                                         pad0xc8_JK4BP[0xc8];                               // 0x894(0xc8)
	Struct CrewInTunnel                                          CrewInTunnel;                                      // 0x95c(0xc)
	char                                                         pad0x8_QK8EX[0x8];                                 // 0x968(0x8)
};


// Size 0x80 (Full Size[0xe0] - InheritedSize[0x60]
class TunnelOfTheDamnedTaleService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelOfTheDamnedTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0xb8 (Full Size[0x108] - InheritedSize[0x50]
class InvasionDepartureTunnelPresenterObject: public TunnelPresenterObjectBase
{
public:
	char                                                         pad0x8_4OABG[0x8];                                 // 0x50(0x8)
	Class InvasionDepartureTunnelScrollingScenery*               ScrollingSceneryActorInstance;                     // 0x58(0x8)
	Class InvasionDepartureTunnelPresenterObjectParams*          Params;                                            // 0x60(0x8)
	char                                                         pad0xa0_1DQ0I[0xa0];                               // 0x68(0xa0)
};


// Size 0x20 (Full Size[0x70] - InheritedSize[0x50]
class StarlightTunnelLegacyPresenterObject: public TunnelPresenterObjectBase
{
public:
	Class SequencerCutSceneActor*                                ShipAgnosticCutSceneActor;                         // 0x50(0x8)
	Class SequencerCutSceneActor*                                ShipSpecificCutSceneActor;                         // 0x58(0x8)
	Class StarlightTunnelLegacyPresenterObjectParams*            Params;                                            // 0x60(0x8)
	char                                                         pad0x8_SMKNZ[0x8];                                 // 0x68(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TunnelPresenterObjectParamsBase: public Object
{
public:
	class                                                        PresenterObjectClass;                              // 0x28(0x8)
	byte                                                         StartMode;                                         // 0x30(0x1)
	char                                                         pad0x7_MORYC[0x7];                                 // 0x31(0x7)
};


// Size 0x18 (Full Size[0x50] - InheritedSize[0x38]
class InvasionDepartureTunnelPresenterObjectParams: public TunnelPresenterObjectParamsBase
{
public:
	class                                                        ScrollingSceneryActorClass;                        // 0x38(0x8)
	Struct Vector                                                ScrollingScenerySpawnOffset;                       // 0x40(0xc)
	char                                                         pad0x4_YXOR8[0x4];                                 // 0x4c(0x4)
};


// Size 0x48 (Full Size[0x80] - InheritedSize[0x38]
class StarlightTunnelLegacyPresenterObjectParams: public TunnelPresenterObjectParamsBase
{
public:
	float                                                        SecondsAfterVignetteSequenceStartsBeforeTriggeringEndSequence; // 0x38(0x4)
	float                                                        SecondsAfterVignetteSequenceStartsBeforeTransitioningFog; // 0x3c(0x4)
	int                                                          VignetteHeightCorrection;                          // 0x40(0x4)
	char                                                         pad0x4_RVUF0[0x4];                                 // 0x44(0x4)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x48(0x8)
	TArray<struct FText>                                         LocalisableNames;                                  // 0x50(0x10)
	Class LevelSequence*                                         VignetteSequence;                                  // 0x60(0x8)
	TArray<struct ShipSpecificVignettes>                         ShipSpecificVignettes;                             // 0x68(0x10)
	bool                                                         EnableDynamicFogTransition;                        // 0x78(0x1)
	char                                                         pad0x7_6LF3W[0x7];                                 // 0x79(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class TunnelsOfTheDamnedLootFilterDataAsset: public DataAsset
{
public:
	TArray<Assetclass TargetProxyTypes>                          TargetProxyTypes;                                  // 0x28(0x10)
	TArray<Assetclass IgnoredProxyTypes>                         IgnoredProxyTypes;                                 // 0x38(0x10)
	bool                                                         IgnoreStorageContainers;                           // 0x68(0x1)
	char                                                         pad0x7_JUC8P[0x7];                                 // 0x69(0x7)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class TunnelsOfTheDamnedSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  TunnelsOfTheDamnedPersistentAssetsLocation;        // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TunnelsOfTheDamnedPersistentAssets: public DataAsset
{
public:
	TArray<class PersistentAssetCollectionDataAsset*>            AssetCollectionAssets;                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedRelativeSpawnInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelsOfTheDamnedServiceParams: public DataAsset
{
public:
};


// Size 0x138 (Full Size[0x500] - InheritedSize[0x3c8]
class TunnelsOfTheDamnedService: public Actor
{
public:
	char                                                         pad0x8_0K8IH[0x8];                                 // 0x3c8(0x8)
	Class TunnelsOfTheDamnedServiceParams*                       Params;                                            // 0x3d0(0x8)
	Class World*                                                 World;                                             // 0x3d8(0x8)
	Class TunnelWorldConfig*                                     TunnelWorldConfig;                                 // 0x3e0(0x8)
	TArray<struct TunnelInstances>                               TunnelInstances;                                   // 0x3e8(0x10)
	char                                                         pad0x108_96SWU[0x108];                             // 0x3f8(0x108)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class TunnelTypesDataAsset: public DataAsset
{
public:
	TArray<struct TunnelClasses>                                 TunnelClasses;                                     // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class TunnelWorldConfig: public DataAsset
{
public:
	TArray<struct TunnelLocations>                               TunnelLocations;                                   // 0x28(0x10)
	TArray<struct TunnelLevelDefinitions>                        TunnelLevelDefinitions;                            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TunnelWorldConfigInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0x100] - InheritedSize[0x98]
class WaitForArrivalTunnelOfTheDamnedCompletionTaleStep: public TaleQuestStep
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForArrivalTunnelOfTheDamnedCompletionTaleStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableGuid                                     CrewId;                                            // 0x80(0x30)
};


// Size 0x58 (Full Size[0xf0] - InheritedSize[0x98]
class WaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class WaitForCrewToArriveInTunnelOfTheDamnedTaleQuestStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0xb0 (Full Size[0x148] - InheritedSize[0x98]
class WaitForTunnelOfTheDamnedMatchmakingTaleStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x80] - InheritedSize[0x80]
class WaitForTunnelOfTheDamnedMatchmakingTaleStepDesc: public TaleQuestStepDesc
{
public:
};


// Size 0x58 (Full Size[0xf0] - InheritedSize[0x98]
class WaitForTunnelOfTheDamnedMigrationTaleQuestStep: public TaleQuestStep
{
public:
	Class WaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc*    Desc;                                              // 0x98(0x8)
	char                                                         pad0x50_I1BIY[0x50];                               // 0xa0(0x50)
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class WaitForTunnelOfTheDamnedMigrationTaleQuestStepDesc: public TaleQuestStepDesc
{
public:
	byte                                                         ExpectedSourcePlayMode;                            // 0x80(0x1)
	char                                                         pad0x7_5YFM7[0x7];                                 // 0x81(0x7)
	Struct FString                                               ExpectedSourceSubMode;                             // 0x88(0x10)
	byte                                                         ExpectedDestinationPlayMode;                       // 0x98(0x1)
	char                                                         pad0x7_FS8WJ[0x7];                                 // 0x99(0x7)
	Struct FString                                               ExpectedDestinationSubMode;                        // 0xa0(0x10)
};


// Size 0x118 (Full Size[0x290] - InheritedSize[0x178]
class SwimmingCreatureMovementComponent: public FloatingPawnMovement
{
public:
	char                                                         pad0x10_9RIG0[0x10];                               // 0x178(0x10)
	float                                                        MinPlayRate;                                       // 0x188(0x4)
	float                                                        MaxPlayRate;                                       // 0x18c(0x4)
	float                                                        NetworkSimulatedSmoothLocationTime;                // 0x190(0x4)
	float                                                        NetworkSimulatedSmoothRotationTime;                // 0x194(0x4)
	float                                                        WaterSurfaceCheckHeightOffset;                     // 0x198(0x4)
	float                                                        DistanceFromWaterSurfaceForMaxAdjustmentVelocity;  // 0x19c(0x4)
	float                                                        MaxWaterSurfaceAdjustmentVelocity;                 // 0x1a0(0x4)
	float                                                        VelocitySmoothingFactor;                           // 0x1a4(0x4)
	float                                                        SharkFinHeightCheckOffset;                         // 0x1a8(0x4)
	char                                                         pad0x4_0A3FT[0x4];                                 // 0x1ac(0x4)
	Class CurveFloat*                                            SinkingAccelerationOverTime;                       // 0x1b0(0x8)
	int                                                          PushOutHemisphereSteps;                            // 0x1b8(0x4)
	int                                                          PushOutStepsOnNarrowestHemisphereBand;             // 0x1bc(0x4)
	int                                                          PushOutStepsOnWidestHemisphereBand;                // 0x1c0(0x4)
	float                                                        MaxExtraPushOut;                                   // 0x1c4(0x4)
	int                                                          NumStepsToRampUpToMaxPushOut;                      // 0x1c8(0x4)
	Struct CollisionProfileName                                  PenetrationPanicCollisionProfile;                  // 0x1cc(0x8)
	bool                                                         ShouldDestroyOnUnresolvedCollision;                // 0x1d4(0x1)
	char                                                         pad0x3_8XSMR[0x3];                                 // 0x1d5(0x3)
	float                                                        SmoothNetUpdateLocationTime;                       // 0x1d8(0x4)
	float                                                        SmoothNetUpdateRotationTime;                       // 0x1dc(0x4)
	float                                                        MaxMovementTimeAllowedForSmoothNetUpdate;          // 0x1e0(0x4)
	float                                                        DebugDrawHeight;                                   // 0x1e4(0x4)
	float                                                        DebugDrawRadius;                                   // 0x1e8(0x4)
	byte                                                         ReplicatedSwimmingMode;                            // 0x1ec(0x1)
	char                                                         pad0x23_YNDVY[0x23];                               // 0x1ed(0x23)
	TArray<struct AIStrategyMovementProperties>                  AIStrategyMovementProperties;                      // 0x210(0x10)
	Struct SwimmingCreatureMovementReplicatedData                ReplicatedMovementData;                            // 0x220(0x30)
	char                                                         pad0x40_RLMPY[0x40];                               // 0x250(0x40)
};


// Size 0x180 (Full Size[0x5c0] - InheritedSize[0x440]
class SwimmingCreatureAnimationInstance: public AnimInstance
{
public:
	char                                                         pad0x18_HFW2L[0x18];                               // 0x440(0x18)
	float                                                        Speed;                                             // 0x458(0x4)
	float                                                        PlayRate;                                          // 0x45c(0x4)
	float                                                        Direction;                                         // 0x460(0x4)
	char                                                         pad0x4_661SR[0x4];                                 // 0x464(0x4)
	Class AnimMontage*                                           DeathMontage;                                      // 0x468(0x8)
	Class AnimMontage*                                           SinkingMontage;                                    // 0x470(0x8)
	Class AnimSequenceBase*                                      DefaultImpactAnim;                                 // 0x478(0x8)
	TArray<struct ImpactAnims>                                   ImpactAnims;                                       // 0x480(0x10)
	float                                                        MaxAccelerationForSpeed;                           // 0x490(0x4)
	float                                                        MaxPitchForSpeed;                                  // 0x494(0x4)
	float                                                        MaxYawForDirection;                                // 0x498(0x4)
	float                                                        SpeedSmoothingFactor;                              // 0x49c(0x4)
	float                                                        DirectionSmoothingFactor;                          // 0x4a0(0x4)
	float                                                        AccelerationSmoothingFactor;                       // 0x4a4(0x4)
	float                                                        YawSmoothingFactor;                                // 0x4a8(0x4)
	float                                                        NetworkAnimationBlendTime;                         // 0x4ac(0x4)
	TArray<class Object*>                                        RPCPlayableMontages;                               // 0x4b0(0x10)
	TArray<class AnimSequenceBase*>                              NetworkPlayableAnimations;                         // 0x4c0(0x10)
	TArray<struct StrategySpeedOverrides>                        StrategySpeedOverrides;                            // 0x4d0(0x10)
	TArray<class Class*>                                         HitReactBlockingAIStrategies;                      // 0x4e0(0x10)
	Class AnimMontage*                                           CurrentlyPlayingNetworkMontage;                    // 0x4f0(0x8)
	char                                                         pad0xa0_HHNYW[0xa0];                               // 0x4f8(0xa0)
	Class SwimmingCreatureMovementComponent*                     MovementComponent;                                 // 0x598(0x8)
	char                                                         pad0x18_4ZTW2[0x18];                               // 0x5a0(0x18)
	Class NetworkSyncedAnimationComponent*                       NetworkSyncedAnimationComponent;                   // 0x5b8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SwimmingCreatureMovementInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BoobyTrapSpawnerDataAsset: public DataAsset
{
public:
	TArray<struct RankEntries>                                   RankEntries;                                       // 0x28(0x10)
};


// Size 0xa0 (Full Size[0xc8] - InheritedSize[0x28]
class BountyQuestDescData: public DataAsset
{
public:
	TArray<class Class*>                                         AllBountyRewards;                                  // 0x28(0x10)
	Class RiddleTextPhraseDataAsset*                             LocationPhrase;                                    // 0x38(0x8)
	Class RiddleTextPhraseDataAsset*                             LocationUndergroundPhrase;                         // 0x40(0x8)
	Class RiddleTextPhraseDataAsset*                             LocationPhraseWithExtraContext;                    // 0x48(0x8)
	Class RiddleTextPhraseDataAsset*                             LocationUndergroundPhraseWithExtraContext;         // 0x50(0x8)
	TArray<struct BountyMapMugShotSets>                          BountyMapMugShotSets;                              // 0x58(0x10)
	TArray<struct BountyMapLayoutOptions>                        BountyMapLayoutOptions;                            // 0x68(0x10)
	TArray<struct FText>                                         DefaultBountyMapDescriptions;                      // 0x78(0x10)
	TArray<struct TargetLoadoutSubstitutions>                    TargetLoadoutSubstitutions;                        // 0xa8(0x10)
	TArray<struct Skillsets>                                     Skillsets;                                         // 0xb8(0x10)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class CargoRunCrateData: public DataAsset
{
public:
	TArray<struct FText>                                         DeliveryNoteDescriptions;                          // 0x28(0x10)
	TArray<struct FText>                                         DeliveryNoteDescriptionsNoDeadline;                // 0x38(0x10)
	TArray<struct FText>                                         DeliveryNoteDescriptionsLate;                      // 0x48(0x10)
	TArray<struct FText>                                         DeliveryNoteClose;                                 // 0x58(0x10)
	TArray<struct FText>                                         DeliveryNoteWelcome;                               // 0x68(0x10)
	TArray<struct FText>                                         DeliveryNoteWelcomeLate;                           // 0x78(0x10)
	float                                                        WashedUpMinDistanceToNPC;                          // 0x88(0x4)
	float                                                        WashedUpMaxDistanceToNPC;                          // 0x8c(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CargoRunMapData: public DataAsset
{
public:
	TArray<class Class*>                                         Companies;                                         // 0x28(0x10)
	Class CargoRunMapLayout*                                     Layout;                                            // 0x38(0x8)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class CargoRunQuestData: public DataAsset
{
public:
	TArray<class Class*>                                         Crates;                                            // 0x28(0x10)
	Class CargoRunCrateData*                                     DefaultCargoRunCrateData;                          // 0x38(0x8)
	Class CargoRunMapData*                                       DefaultCargoRunMapData;                            // 0x40(0x8)
	TArray<struct FText>                                         CargoItemsDeliveryNotePluralisation;               // 0x48(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class CargoRunQuestRandomRequiredItemsDataAsset: public DataAsset
{
public:
	TArray<struct CategoryGroups>                                CategoryGroups;                                    // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class FootstepIDAsset: public DataAsset
{
public:
	struct FName                                                 FootstepName;                                      // 0x28(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestData: public DataAsset
{
public:
	Class PopUpMessageDesc*                                      ContractCompletePopupDesc;                         // 0x28(0x8)
	Class PopUpMessageDesc*                                      ContractExpiredPopupDesc;                          // 0x30(0x8)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class MerchantQuestItemData: public DataAsset
{
public:
	Class MerchantQuestItemPluralisationData*                    DisplayNameLookup;                                 // 0x28(0x8)
	Struct RewardId                                              HandInOnTimeRewardId;                              // 0x30(0x8)
	class                                                        CrateDesc;                                         // 0x38(0x8)
	TArray<struct AcceptableAlternativeCrateItemData>            AcceptableAlternativeCrateItemData;                // 0x40(0x10)
	Class Texture*                                               IconImage;                                         // 0x50(0x8)
	class                                                        FaunaSpecies;                                      // 0x58(0x8)
	class                                                        FaunaBreed;                                        // 0x60(0x8)
	Class PopUpMessageDesc*                                      CrateFilledPopupDesc;                              // 0x68(0x8)
	bool                                                         IsOnlyFoundInWorld;                                // 0x70(0x1)
	char                                                         pad0x7_VK4Q7[0x7];                                 // 0x71(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestItemPluralisationData: public DataAsset
{
public:
	TArray<struct FText>                                         ItemNames;                                         // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestRandomRequiredItemsDataAsset: public DataAsset
{
public:
	TArray<struct CategoryGroups>                                CategoryGroups;                                    // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MerchantQuestRequiredItemsDataAsset: public DataAsset
{
public:
	TArray<struct RankEntries>                                   RankEntries;                                       // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class RiddleQuestData: public DataAsset
{
public:
	Class WwiseEvent*                                            DefaultGateCompletedAudioCue;                      // 0x28(0x8)
	Class WwiseEvent*                                            DefaultGateCompletedMusicCue;                      // 0x30(0x8)
	TArray<class Class*>                                         AllTreasureChests;                                 // 0x38(0x10)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class RiddleQuestDescGeneratorData: public DataAsset
{
public:
	float                                                        TemporaryLandmarkRadius;                           // 0x28(0x4)
	float                                                        TemporaryLandmarkHeight;                           // 0x2c(0x4)
	TArray<struct ValidRiddleOptions>                            ValidRiddleOptions;                                // 0x30(0x10)
	TArray<struct RiddleActionInfo>                              RiddleActionInfo;                                  // 0x40(0x10)
	TArray<struct FText>                                         CompassDirections;                                 // 0x50(0x10)
	struct FName                                                 NumPacesPhraseId;                                  // 0x60(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RiddleTextPhrasebookDataAsset: public DataAsset
{
public:
	TArray<struct Phrases>                                       Phrases;                                           // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class RiddleTextPhraseDataAsset: public DataAsset
{
public:
	TArray<struct FText>                                         Variants;                                          // 0x28(0x10)
};


// Size 0x48 (Full Size[0xa8] - InheritedSize[0x60]
class TaleQuestCheckpointService: public TaleQuestService
{
public:
	Class TaleQuestCheckpointServiceDesc*                        Desc;                                              // 0x60(0x8)
	char                                                         pad0x40_XIKVT[0x40];                               // 0x68(0x40)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class TaleQuestCheckpointServiceDesc: public TaleQuestServiceDesc
{
public:
	Class PopUpMessageDesc*                                      Notification;                                      // 0x28(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestClearTaleProposalsStep: public TaleQuestStep
{
public:
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class TaleQuestUpdateCheckpointStep: public TaleQuestStep
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class VoyageProposalAssetSelector: public DataAsset
{
public:
	TArray<struct Companies>                                     Companies;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeckonGestureID: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeckonNPCGroupID: public Object
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class BeckonComponent: public ActorComponent
{
public:
	class                                                        NPCGroupID;                                        // 0xc8(0x8)
	char                                                         pad0x30_EW0OF[0x30];                               // 0xd0(0x30)
	TArray<class Class*>                                         BeckonGestures;                                    // 0x100(0x10)
	char                                                         pad0x10_0A4TC[0x10];                               // 0x110(0x10)
	Class AnimMontage*                                           CurrentBeckonMontage;                              // 0x120(0x8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class BeckonGestureDataAsset: public DataAsset
{
public:
	Class AnimSequence*                                          BeckonAnimation;                                   // 0x28(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class BeckonDataAsset: public DataAsset
{
public:
	TArray<struct NPCBeckonGroups>                               NPCBeckonGroups;                                   // 0x28(0x10)
	float                                                        BeckonIntervalInSeconds;                           // 0x38(0x4)
	float                                                        OnboardingBeckonDelayInSeconds;                    // 0x3c(0x4)
	TArray<struct InitialBeckonTags>                             InitialBeckonTags;                                 // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BeckonServiceInterface: public Interface
{
public:
};


// Size 0xd8 (Full Size[0x4a0] - InheritedSize[0x3c8]
class BeckonService: public Actor
{
public:
	char                                                         pad0x8_U085Q[0x8];                                 // 0x3c8(0x8)
	Class BeckonDataAsset*                                       BeckonDataAsset;                                   // 0x3d0(0x8)
	char                                                         pad0xc8_C4JVT[0xc8];                               // 0x3d8(0xc8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class BeckonSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  BeckonDataAsset;                                   // 0x38(0x10)
};


// Size 0x10 (Full Size[0xa8] - InheritedSize[0x98]
class TaleQuestNPCBeckonCrewStep: public TaleQuestStep
{
public:
	Struct BeckonTag                                             BeckonTag;                                         // 0x98(0x10)
};


// Size 0x10 (Full Size[0x90] - InheritedSize[0x80]
class TaleQuestNPCBeckonCrewStepDesc: public TaleQuestStepDesc
{
public:
	Struct BeckonTag                                             BeckonTag;                                         // 0x80(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipStorageJettisonServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class ShipStorageJettisonComponent: public ActorComponent
{
public:
	float                                                        MinContainerSpacing;                               // 0xc8(0x4)
	char                                                         pad0x1c_X682B[0x1c];                               // 0xcc(0x1c)
};


// Size 0xb8 (Full Size[0x480] - InheritedSize[0x3c8]
class ShipStorageJettisonService: public Actor
{
public:
	char                                                         pad0x8_RORZV[0x8];                                 // 0x3c8(0x8)
	TArray<struct PendingSpawns>                                 PendingSpawns;                                     // 0x3d0(0x10)
	TArray<struct ContainerHandles>                              ContainerHandles;                                  // 0x3e0(0x10)
	Class ShipStorageJettisonServiceParams*                      Params;                                            // 0x3f0(0x8)
	char                                                         pad0x88_VFIAB[0x88];                               // 0x3f8(0x88)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class ShipStorageJettisonServiceParams: public DataAsset
{
public:
	TArray<struct JettisonedContainerTypes>                      JettisonedContainerTypes;                          // 0x28(0x10)
	class                                                        DefaultContainerTypeToSpawn;                       // 0x38(0x8)
	float                                                        ContainerOwnershipLifetime;                        // 0x40(0x4)
	float                                                        ContainerKeepAliveRadius;                          // 0x44(0x4)
	float                                                        ContainerKeepAliveRadiusPlayers;                   // 0x48(0x4)
	float                                                        ServiceTickRate;                                   // 0x4c(0x4)
	float                                                        ThrottledJettisonRequestSpawnRate;                 // 0x50(0x4)
	int                                                          MaxJettisonedContainers;                           // 0x54(0x4)
	int                                                          MaxRepositionAttempts;                             // 0x58(0x4)
	float                                                        MinDistanceToOtherContainer;                       // 0x5c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableStormServiceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class OnHitByLightningInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class StormEffectsExclusionTriggerVolume: public Actor
{
public:
	Class CapsuleComponent*                                      TriggerVolume;                                     // 0x3c8(0x8)
	char                                                         pad0x18_G5XU3[0x18];                               // 0x3d0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StormInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class StormParams: public DataAsset
{
public:
	Struct FixedStepInterpCurveVector2D                          PositionCurve;                                     // 0x28(0x18)
	TArray<Byte StormType>                                       StormType;                                         // 0x40(0x10)
	class                                                        StormClass;                                        // 0x50(0x8)
	TArray<struct StormTypeSettings>                             StormTypeSettings;                                 // 0x58(0x10)
	float                                                        StormTypeStepTime;                                 // 0x68(0x4)
	float                                                        StormTypeBlendTime;                                // 0x6c(0x4)
	float                                                        CycleTime;                                         // 0x70(0x4)
	char                                                         pad0x4_JK03F[0x4];                                 // 0x74(0x4)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class StormServiceAsset: public DataAsset
{
public:
	TArray<class StormParams*>                                   StormParams;                                       // 0x28(0x10)
	float                                                        StormCheckRadius;                                  // 0x38(0x4)
	float                                                        ChanceOfForwardTimeStep;                           // 0x3c(0x4)
	Struct FloatRange                                            StaticTimeOffsetBounds;                            // 0x40(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class StormServiceInterface: public Interface
{
public:
};


// Size -0x8 (Full Size[0x90] - InheritedSize[0x98]
class TaleAddStormAvoidanceAreaStep: public TaleQuestStep
{
public:
};


// Size 0x28 (Full Size[0x88] - InheritedSize[0x60]
class TaleStormService: public TaleQuestService
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TaleStormServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x60 (Full Size[0xe0] - InheritedSize[0x80]
class TaleAddStormAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
	Struct QuestVariableFloat                                    Radius;                                            // 0xb0(0x30)
};


// Size -0x8 (Full Size[0x90] - InheritedSize[0x98]
class TaleRemoveStormAvoidanceAreaStep: public TaleQuestStep
{
public:
};


// Size 0x30 (Full Size[0xb0] - InheritedSize[0x80]
class TaleRemoveStormAvoidanceAreaStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableVector                                   Location;                                          // 0x80(0x30)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AggressiveGhostShipRewardsDataAsset: public DataAsset
{
public:
	Struct AggressiveGhostShipRewardData                         CaptainRewards;                                    // 0x28(0x18)
	Struct AggressiveGhostShipRewardData                         FormationLeaderRewards;                            // 0x40(0x18)
	Struct AggressiveGhostShipRewardData                         GruntRewards;                                      // 0x58(0x18)
	class                                                        RewardMarker;                                      // 0x70(0x8)
};


// Size 0x4b8 (Full Size[0x880] - InheritedSize[0x3c8]
class AggressiveGhostShip: public Actor
{
public:
	char                                                         pad0x50_IVC8J[0x50];                               // 0x3c8(0x50)
	Class AggressiveGhostShipDataAsset*                          DataAsset;                                         // 0x418(0x8)
	Class AggressiveGhostShipDifficultyDataAsset*                DifficultyDataAsset;                               // 0x420(0x8)
	Class AggressiveGhostShipMineFormationsDataAsset*            MineFormationsDataAsset;                           // 0x428(0x8)
	Class AggressiveGhostShipLocationDataAsset*                  LocationDataAsset;                                 // 0x430(0x8)
	Class AggressiveGhostShipShotSelectionDataAsset*             ShotSelectionDataAsset;                            // 0x438(0x8)
	Struct AggressiveGhostShipRewardData                         RewardsData;                                       // 0x440(0x18)
	class                                                        RewardMarker;                                      // 0x458(0x8)
	Class BoxComponent*                                          HitDetectionVolume;                                // 0x460(0x8)
	Class ExplosionComponent*                                    ShipDamageExplosionComponent;                      // 0x468(0x8)
	Class ExplosionComponent*                                    OnDeathPushBackExplosionComponent;                 // 0x470(0x8)
	Class ShipDamageableComponent*                               ShipDamageableComponent;                           // 0x478(0x8)
	Class NamedPointsComponent*                                  NamedPointsComponent;                              // 0x480(0x8)
	Class SplineComponent*                                       SplineComponent;                                   // 0x488(0x8)
	float                                                        PortalEntryDistanceOffset;                         // 0x490(0x4)
	float                                                        PortalSpawnZOffset;                                // 0x494(0x4)
	Struct Vector                                                PortalSpawnScale;                                  // 0x498(0xc)
	char                                                         pad0x4_6RZV8[0x4];                                 // 0x4a4(0x4)
	Class CurveFloat*                                            ImpulseCurve;                                      // 0x4a8(0x8)
	Struct AggressiveGhostShipSplineData                         SplineData;                                        // 0x4b0(0x50)
	char                                                         pad0x10_Y4RRJ[0x10];                               // 0x500(0x10)
	TArray<Weakclass GhostShipsToIgnore>                         GhostShipsToIgnore;                                // 0x510(0x10)
	Struct AggressiveGhostShipState                              ShipState;                                         // 0x520(0x8)
	bool                                                         HasMadeShipAppear;                                 // 0x528(0x1)
	char                                                         pad0x7_PXUF9[0x7];                                 // 0x529(0x7)
	Class AggressiveGhostShipPoolResource*                       PoolingResource;                                   // 0x530(0x8)
	bool                                                         IsOverlappingShip;                                 // 0x538(0x1)
	char                                                         pad0x3_JWC91[0x3];                                 // 0x539(0x3)
	int                                                          NumShotsLeftToKill;                                // 0x53c(0x4)
	Struct WeightedItemDescSpawner                               RewardSpawner;                                     // 0x540(0x58)
	bool                                                         IsInert;                                           // 0x598(0x1)
	char                                                         pad0x3_SVT5X[0x3];                                 // 0x599(0x3)
	float                                                        ExtraDistanceAroundSplineOffset;                   // 0x59c(0x4)
	Class AggressiveGhostShipVisualsDataAsset*                   VisualsDataAsset;                                  // 0x5a0(0x8)
	byte                                                         TrackedActorType;                                  // 0x5a8(0x1)
	char                                                         pad0x7_FYK3L[0x7];                                 // 0x5a9(0x7)
	TArray<class Class*>                                         AllProjectiles;                                    // 0x5b0(0x10)
	Class StaticMeshComponent*                                   VisibleMesh;                                       // 0x5c0(0x8)
	Class ParticleSystemComponent*                               HealthIndicatorEffect;                             // 0x5c8(0x8)
	TArray<class StaticMeshComponent*>                           ExtraMeshes;                                       // 0x5d0(0x10)
	char                                                         pad0x180_IB0A2[0x180];                             // 0x5e0(0x180)
	TArray<class MeshComponent*>                                 AllMeshes;                                         // 0x760(0x10)
	TArray<class MaterialInstanceDynamic*>                       AllMaterials;                                      // 0x770(0x10)
	char                                                         pad0x100_3R2NV[0x100];                             // 0x780(0x100)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class AggressiveGhostShipAnchorDrop: public Actor
{
public:
};


// Size 0x360 (Full Size[0x388] - InheritedSize[0x28]
class AggressiveGhostShipAnimationDataAsset: public DataAsset
{
public:
	Struct RuntimeVectorCurve                                    LocationCurve;                                     // 0x28(0x170)
	Struct RuntimeVectorCurve                                    RotationCurve;                                     // 0x198(0x170)
	Struct RuntimeFloatCurve                                     VelocityCurve;                                     // 0x308(0x80)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipNamesDataAsset: public DataAsset
{
public:
	TArray<struct NameBuckets>                                   NameBuckets;                                       // 0x28(0x10)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AggressiveGhostShipBannerDataAsset: public DataAsset
{
public:
	Class AggressiveGhostShipNamesDataAsset*                     Header;                                            // 0x28(0x8)
	Class AggressiveGhostShipNamesDataAsset*                     Footer;                                            // 0x30(0x8)
	struct FName                                                 Tag;                                               // 0x38(0x8)
	bool                                                         DisableMusic;                                      // 0x40(0x1)
	char                                                         pad0x7_13Q29[0x7];                                 // 0x41(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggressiveGhostShipDamagerType: public DamagerType
{
public:
};


// Size 0x2b8 (Full Size[0x2e0] - InheritedSize[0x28]
class AggressiveGhostShipDataAsset: public DataAsset
{
public:
	int                                                          NumSpawnLocationAngleAttempts;                     // 0x28(0x4)
	float                                                        HeightOffset;                                      // 0x2c(0x4)
	float                                                        MaxSplineRadiusInMetres;                           // 0x30(0x4)
	float                                                        DelayBeforeShootingAfterAppearing;                 // 0x34(0x4)
	float                                                        TimeToFadeOutBeforeDestroyingWhenKilled;           // 0x38(0x4)
	float                                                        TimeToFadeOutBeforeDestroyingWhenKilledWithSinkingAnimation; // 0x3c(0x4)
	float                                                        OnDeathPushBackExplosionDelay;                     // 0x40(0x4)
	float                                                        PitchSpeed;                                        // 0x44(0x4)
	float                                                        MaxPitch;                                          // 0x48(0x4)
	float                                                        RollSpeed;                                         // 0x4c(0x4)
	float                                                        MaxRoll;                                           // 0x50(0x4)
	float                                                        ForwardOffsetInMetresToAngleOffset;                // 0x54(0x4)
	float                                                        LowAccuracyTargetDistanceInMetres;                 // 0x58(0x4)
	float                                                        HighAccuracyTargetDistanceInMetres;                // 0x5c(0x4)
	float                                                        MinFormationSpawnDistanceFromPointsToAvoidInMetres; // 0x60(0x4)
	float                                                        MinFormationSpawnDistanceFromPlayersInMetres;      // 0x64(0x4)
	float                                                        SpawnOnTopOfPlayerDistanceAwayInMetres;            // 0x68(0x4)
	float                                                        MaxTargetAngle;                                    // 0x6c(0x4)
	float                                                        CannonTargetConeSideOffsetInMetres;                // 0x70(0x4)
	float                                                        ExtraDeadZoneInMetres;                             // 0x74(0x4)
	float                                                        ProjectileSpeed;                                   // 0x78(0x4)
	float                                                        ProjectileGravityScale;                            // 0x7c(0x4)
	float                                                        DistanceForShipToTravelToGetThroughPortalInMetres; // 0x80(0x4)
	char                                                         pad0x4_QJNK4[0x4];                                 // 0x84(0x4)
	Class WwiseEvent*                                            CannonFireSfx;                                     // 0x88(0x8)
	Class WwiseEvent*                                            SpawnSFX;                                          // 0x90(0x8)
	Class WwiseEvent*                                            DespawnSFX;                                        // 0x98(0x8)
	Class WwiseEvent*                                            DeathSfx;                                          // 0xa0(0x8)
	Class WwiseEvent*                                            StartAmbientSfx;                                   // 0xa8(0x8)
	Class WwiseEvent*                                            StopAmbientSfx;                                    // 0xb0(0x8)
	Class WwiseEvent*                                            BeginOverlapOneShotSfx;                            // 0xb8(0x8)
	Class WwiseEvent*                                            EndOverlapOneShotSfx;                              // 0xc0(0x8)
	Class WwiseEvent*                                            OnMinesSpawnedSfx;                                 // 0xc8(0x8)
	Class WwiseEvent*                                            OnBreakingSurfaceSfx;                              // 0xd0(0x8)
	Class WwiseEvent*                                            OnDisappearingBelowSurfaceSfx;                     // 0xd8(0x8)
	Class WwiseEvent*                                            OnSinkingSfx;                                      // 0xe0(0x8)
	Class WwiseEvent*                                            CapstanDropLoopStart;                              // 0xe8(0x8)
	Class WwiseEvent*                                            CapstanDropLoopStop;                               // 0xf0(0x8)
	Class WwiseEvent*                                            CapstanHitWater;                                   // 0xf8(0x8)
	Class WwiseObjectPoolWrapper*                                AmbientSfxPool;                                    // 0x100(0x8)
	Class WwiseObjectPoolWrapper*                                CannonSfxPool;                                     // 0x108(0x8)
	Class WwiseObjectPoolWrapper*                                CapstanSfxPool;                                    // 0x110(0x8)
	Class Object*                                                CannonFireEffect;                                  // 0x118(0x8)
	Class Object*                                                HealthIndicatorEffect;                             // 0x120(0x8)
	Class Object*                                                DeathEffect;                                       // 0x128(0x8)
	Struct Vector                                                DeathEffectOffset;                                 // 0x130(0xc)
	Struct Rotator                                               DeathEffectRotation;                               // 0x13c(0xc)
	float                                                        DeathEffectFadeDelay;                              // 0x148(0x4)
	char                                                         pad0x4_6VTJ6[0x4];                                 // 0x14c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      NearMissPlayerOffsetInMetres;                      // 0x150(0x30)
	Struct WeightedProbabilityRangeOfRanges                      NearMissShipOffsetInMetres;                        // 0x180(0x30)
	Struct WeightedProbabilityRangeOfRanges                      NearMissCannonRowboatOffsetInMetres;               // 0x1b0(0x30)
	Struct WeightedProbabilityRangeOfRanges                      NearMissMermaidStatueOffsetInMetres;               // 0x1e0(0x30)
	Struct WeightedProbabilityRangeOfRanges                      NearMissGenericExtraTargetOffsetInMetres;          // 0x210(0x30)
	float                                                        RandomShipPositionScale;                           // 0x240(0x4)
	char                                                         pad0x4_50LC0[0x4];                                 // 0x244(0x4)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenShipDamage;                             // 0x248(0x30)
	Struct WeightedProbabilityRangeOfRanges                      FormationForwardOffsetVarianceSpeed;               // 0x278(0x30)
	Struct WeightedProbabilityRangeOfRanges                      FormationSidewaysOffsetVarianceSpeed;              // 0x2a8(0x30)
	class                                                        WraithballProjectileType;                          // 0x2d8(0x8)
};


// Size 0x208 (Full Size[0x230] - InheritedSize[0x28]
class AggressiveGhostShipDifficultyDataAsset: public DataAsset
{
public:
	Struct WeightedProbabilityRange                              NumShotsToDestroyShip;                             // 0x28(0x20)
	float                                                        PersistentDamageScale;                             // 0x48(0x4)
	char                                                         pad0x4_EY9GN[0x4];                                 // 0x4c(0x4)
	TArray<struct HealthToVFxLevel>                              HealthToVFxLevel;                                  // 0x50(0x10)
	Struct WeightedProbabilityRangeOfRanges                      Speed;                                             // 0x60(0x30)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenShots;                                  // 0x90(0x30)
	Struct WeightedProbabilityRangeOfRanges                      WraithballCooldownTime;                            // 0xc0(0x30)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenCheckingIfAShipIsBehindYou;             // 0xf0(0x30)
	float                                                        MaxDistanceBehindShipToBeMineTargetInMetres;       // 0x120(0x4)
	float                                                        MaxMineTargetAngle;                                // 0x124(0x4)
	float                                                        ChanceOfDroppingMines;                             // 0x128(0x4)
	char                                                         pad0x4_0TMV8[0x4];                                 // 0x12c(0x4)
	Struct WeightedProbabilityRange                              NumMinesToDrop;                                    // 0x130(0x20)
	Struct WeightedProbabilityRangeOfRanges                      MinTimeBetweenDroppingMoreMines;                   // 0x150(0x30)
	bool                                                         CanAnchorDrop;                                     // 0x180(0x1)
	char                                                         pad0x7_BVQNO[0x7];                                 // 0x181(0x7)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenAnchorDrops;                            // 0x188(0x30)
	Struct WeightedProbabilityRangeOfRanges                      AnchorDropWarningTime;                             // 0x1b8(0x30)
	float                                                        TimeBetweenPortalJumpChecks;                       // 0x1e8(0x4)
	float                                                        MinDistanceFromAnyShipsToConsiderAPortalJumpInMetres; // 0x1ec(0x4)
	float                                                        TimeToBeAwayFromAnyShipsToConsiderPortalJumping;   // 0x1f0(0x4)
	float                                                        ChanceOfPortalJumping;                             // 0x1f4(0x4)
	Struct WeightedProbabilityRangeOfRanges                      PortalJumpDuration;                                // 0x1f8(0x30)
	float                                                        PortalJumpCooldown;                                // 0x228(0x4)
	char                                                         pad0x4_5SVG4[0x4];                                 // 0x22c(0x4)
};


// Size 0x98 (Full Size[0xc0] - InheritedSize[0x28]
class AggressiveGhostShipEncounterDataAsset: public DataAsset
{
public:
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenSpawns;                                 // 0x28(0x30)
	Struct WeightedProbabilityRangeOfRanges                      TimeBetweenFormationMemberSpawns;                  // 0x58(0x30)
	TArray<struct WaveDescs>                                     WaveDescs;                                         // 0x88(0x10)
	Class BuoyantObjectSpawnProfileDataAsset*                    BarrelsOfPlentySpawnProfileOverride;               // 0x98(0x8)
	class                                                        Ship;                                              // 0xa0(0x8)
	class                                                        MineActorClass;                                    // 0xa8(0x8)
	class                                                        AnchorDropActorClass;                              // 0xb0(0x8)
	byte                                                         Allegiance;                                        // 0xb8(0x1)
	bool                                                         CanAttackEnemyGhostShips;                          // 0xb9(0x1)
	char                                                         pad0x6_D9LJ5[0x6];                                 // 0xba(0x6)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipEncounterFormationsDataAsset: public DataAsset
{
public:
	TArray<struct FormationDescGroups>                           FormationDescGroups;                               // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipFixedSplinesDataAsset: public DataAsset
{
public:
	TArray<struct Splines>                                       Splines;                                           // 0x28(0x10)
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AggressiveGhostShipLocationDataAsset: public DataAsset
{
public:
	float                                                        MinRadialSplineOffsetInMetres;                     // 0x28(0x4)
	float                                                        MaxRadialSplineOffsetInMetres;                     // 0x2c(0x4)
	bool                                                         UseAlternativeSplinePoints;                        // 0x30(0x1)
	char                                                         pad0x3_ZA7TU[0x3];                                 // 0x31(0x3)
	int                                                          MinNumAlternativeSplinePoints;                     // 0x34(0x4)
	int                                                          MaxNumAlternativeSplinePoints;                     // 0x38(0x4)
	float                                                        AlternativeMinRadialSplineOffsetInMetres;          // 0x3c(0x4)
	float                                                        AlternativeMaxRadialSplineOffsetInMetres;          // 0x40(0x4)
	float                                                        AlternativeMinRadialBlendValue1;                   // 0x44(0x4)
	float                                                        AlternativeMinRadialBlendValue2;                   // 0x48(0x4)
	float                                                        MinDistanceBetweenSplinePointsInMetres;            // 0x4c(0x4)
	float                                                        CacheDistanceInMetres;                             // 0x50(0x4)
	char                                                         pad0x4_WRPOB[0x4];                                 // 0x54(0x4)
};


// Size 0x28 (Full Size[0x620] - InheritedSize[0x5f8]
class AggressiveGhostShipMine: public BuoyantActor
{
public:
	char                                                         pad0x8_E4JD0[0x8];                                 // 0x5f8(0x8)
	Class PrimitiveComponent*                                    PhysicsRootComponent;                              // 0x600(0x8)
	Class FuseComponent*                                         FuseComponent;                                     // 0x608(0x8)
	Class ExplosiveComponent*                                    ExplosiveComponent;                                // 0x610(0x8)
	Class HealthComponent*                                       HealthComponent;                                   // 0x618(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipMineFormationsDataAsset: public DataAsset
{
public:
	TArray<struct MineFormationOptions>                          MineFormationOptions;                              // 0x28(0x10)
};


// Size 0x48 (Full Size[0x410] - InheritedSize[0x3c8]
class AggressiveGhostShipPortal: public Actor
{
public:
	char                                                         pad0x38_8OB2V[0x38];                               // 0x3c8(0x38)
	float                                                        OpenDuration;                                      // 0x400(0x4)
	float                                                        ClosingDuration;                                   // 0x404(0x4)
	char                                                         pad0x8_OQSEL[0x8];                                 // 0x408(0x8)
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class AggressiveGhostShipPoolResource: public Actor
{
public:
	float                                                        DestroyDelay;                                      // 0x3c8(0x4)
	int                                                          PortalPoolSize;                                    // 0x3cc(0x4)
	class                                                        PortalClass;                                       // 0x3d0(0x8)
	char                                                         pad0x70_GJOG0[0x70];                               // 0x3d8(0x70)
};


// Size 0xf0 (Full Size[0x128] - InheritedSize[0x38]
class AggressiveGhostShipsEncounterParams: public GameEventParams
{
public:
	Class AggressiveGhostShipEncounterDataAsset*                 Encounter;                                         // 0x38(0x8)
	Class AggressiveGhostShipEncounterFormationsDataAsset*       Formations;                                        // 0x40(0x8)
	struct FName                                                 EventSignalClassToggle;                            // 0x88(0x8)
	float                                                        EventSignalHeightOffset;                           // 0x90(0x4)
	char                                                         pad0x4_L2O1R[0x4];                                 // 0x94(0x4)
	TArray<struct EventSignalHeightPerIslandOffset>              EventSignalHeightPerIslandOffset;                  // 0x98(0x10)
	Struct PoolableCollectionMapConfiguration                    ProjectilePoolMapConfiguration;                    // 0xa8(0x18)
	Struct PoolableCollectionMapConfiguration                    GhostShipsPoolMapConfiguration;                    // 0xc0(0x18)
	int                                                          MinePoolSize;                                      // 0xd8(0x4)
	int                                                          AnchorDropPoolSize;                                // 0xdc(0x4)
	class                                                        PoolingResourceClass;                              // 0xe0(0x8)
	Class AggressiveGhostShipRewardsDataAsset*                   EncounterRewards;                                  // 0xe8(0x8)
	struct FName                                                 CustomIslandName;                                  // 0xf0(0x8)
	bool                                                         UseParticipantList;                                // 0xf8(0x1)
	char                                                         pad0x3_83878[0x3];                                 // 0xf9(0x3)
	float                                                        EncounterEnteredBannerDistance;                    // 0xfc(0x4)
	Class AggressiveGhostShipBannerDataAsset*                    EncounterEnteredBanner;                            // 0x100(0x8)
	Class AggressiveGhostShipBannerDataAsset*                    EncounterCompleteBanner;                           // 0x108(0x8)
	float                                                        MinimumIslandRangeInMeters;                        // 0x110(0x4)
	float                                                        MaximumIslandRangeInMeters;                        // 0x114(0x4)
	bool                                                         FireEmissaryStatsOnFinished;                       // 0x118(0x1)
	char                                                         pad0x3_FGH7F[0x3];                                 // 0x119(0x3)
	float                                                        DelayBeforeEndingEncounter;                        // 0x11c(0x4)
	float                                                        EncounterExclusionRadiusInMetres;                  // 0x120(0x4)
	byte                                                         EncounterSightingType;                             // 0x124(0x1)
	byte                                                         EncounterCloseType;                                // 0x125(0x1)
	char                                                         pad0x2_OV2YY[0x2];                                 // 0x126(0x2)
};


// Size 0xd0 (Full Size[0x518] - InheritedSize[0x448]
class AggressiveGhostShipsEncounter: public GameEvent
{
public:
	char                                                         pad0x10_RDQWO[0x10];                               // 0x448(0x10)
	Class AggressiveGhostShipsEncounterParams*                   Params;                                            // 0x458(0x8)
	Class Actor*                                                 ActiveWaveMusicZoneActor;                          // 0x460(0x8)
	Class AggressiveGhostShipPoolResource*                       PoolResourceActor;                                 // 0x468(0x8)
	Class PhasedClusterRoot*                                     PhasedClusterRoot;                                 // 0x470(0x8)
	char                                                         pad0xa0_SNPNK[0xa0];                               // 0x478(0xa0)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AggressiveGhostShipsEncounterServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class AggressiveGhostShipsEncounterServiceParams: public GameEventServiceParams
{
public:
	Class AggressiveGhostShipsEncounterParams*                   EncounterParams;                                   // 0x28(0x8)
	TArray<struct FName>                                         IslandsToSpawnOn;                                  // 0x30(0x10)
	float                                                        MinPlayerDistanceToIsland;                         // 0x40(0x4)
	int                                                          MaxTotalNumFiringCannons;                          // 0x44(0x4)
	int                                                          MaxNumFiringCannonsPerEncounter;                   // 0x48(0x4)
	float                                                        MaxTimeToBeAllowedToFire;                          // 0x4c(0x4)
	float                                                        MinTimeBeforeBeingAllowedToFireAgain;              // 0x50(0x4)
	char                                                         pad0x4_CEQRE[0x4];                                 // 0x54(0x4)
};


// Size 0x110 (Full Size[0x530] - InheritedSize[0x420]
class AggressiveGhostShipsEncounterService: public GameEventService
{
public:
	char                                                         pad0xe8_OZJ6N[0xe8];                               // 0x420(0xe8)
	Struct AggressiveGhostShipsEncounterServiceDesc              Desc;                                              // 0x508(0x10)
	Class AggressiveGhostShipsEncounterServiceParams*            Params;                                            // 0x518(0x8)
	TArray<class AggressiveGhostShipsEncounter*>                 Encounters;                                        // 0x520(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AggressiveGhostShipShotSelectionDataAsset: public DataAsset
{
public:
	TArray<struct ShotSelection>                                 ShotSelection;                                     // 0x28(0x10)
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class AggressiveGhostShipVisualsDataAsset: public DataAsset
{
public:
	TArray<struct MaterialOverrides>                             MaterialOverrides;                                 // 0x28(0x10)
	TArray<struct ExtraMeshes>                                   ExtraMeshes;                                       // 0x38(0x10)
	Class AggressiveGhostShipAnimationDataAsset*                 AppearAnimation;                                   // 0x48(0x8)
	Class AggressiveGhostShipAnimationDataAsset*                 DisappearAnimation;                                // 0x50(0x8)
	Class AggressiveGhostShipAnimationDataAsset*                 SinkingAnimation;                                  // 0x58(0x8)
};


// Size 0x40 (Full Size[0xc8] - InheritedSize[0x88]
class BTTask_RowToTarget: public BTTask_BlackboardBase
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RowboatOarsAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class RowboatSeatAIInteractableType: public AIInteractableType
{
public:
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class HitRegSnapshotActor: public Actor
{
public:
};


// Size 0x218 (Full Size[0x2e0] - InheritedSize[0xc8]
class HitRegSnapshotComponent: public ActorComponent
{
public:
	char                                                         pad0x8_WK6PE[0x8];                                 // 0xc8(0x8)
	Struct HitRegProjectileSnapshotData                          SnapshotData;                                      // 0xd0(0x180)
	Struct HitRegSnapshotDisplaySettings                         ServerDisplaySettings;                             // 0x250(0x6)
	char                                                         pad0x2_WFQSW[0x2];                                 // 0x256(0x2)
	float                                                        DistanceToDisplayMessages;                         // 0x2a8(0x4)
	char                                                         pad0x34_RZVW4[0x34];                               // 0x2ac(0x34)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitRegSnapshotDebugManipulatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitRegSnapshotImpactedActorRedirectionInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class HitRegSnapshotRedirectImpactToReplicatedMovementAttachParentComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class HitRegSnapshotServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class HitRegSnapshotService: public Actor
{
public:
	char                                                         pad0x10_1HXU6[0x10];                               // 0x3c8(0x10)
	bool                                                         SnapshotsEnabled;                                  // 0x3d8(0x1)
	char                                                         pad0x7_7OYL9[0x7];                                 // 0x3d9(0x7)
	TArray<class HitRegSnapshotComponent*>                       ActiveSnapshotComponents;                          // 0x3e0(0x10)
	bool                                                         PlayerHitScanEnabled;                              // 0x3f0(0x1)
	char                                                         pad0xf_G24CW[0xf];                                 // 0x3f1(0xf)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestZoneInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class ContestZoneRespawnLocationsDataAsset: public DataAsset
{
public:
	TArray<struct ContestRespawnLocations>                       ContestRespawnLocations;                           // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ContestZoneServiceInterface: public Interface
{
public:
};


// Size 0x110 (Full Size[0x4d8] - InheritedSize[0x3c8]
class ContestZoneService: public Actor
{
public:
	char                                                         pad0x38_4F2ZM[0x38];                               // 0x3c8(0x38)
	TArray<struct FName>                                         ContestZoneNames;                                  // 0x400(0x10)
	char                                                         pad0x10_9AX77[0x10];                               // 0x410(0x10)
	bool                                                         HasLoadedContestZones;                             // 0x420(0x1)
	char                                                         pad0xb7_UVOJK[0xb7];                               // 0x421(0xb7)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class ContestModuleSettingsDataAsset: public DataAsset
{
public:
	class                                                        ArenaRowboatClass;                                 // 0x28(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ContestSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  ContestModuleSettingsDataAsset;                    // 0x38(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmblemDefinitionAssetList: public DataAsset
{
public:
	TArray<class EmblemDefinitionDataAsset*>                     EmblemDefinitionAssets;                            // 0x28(0x10)
};


// Size 0x1a0 (Full Size[0x1c8] - InheritedSize[0x28]
class EmblemDefinitionDataAsset: public DataAsset
{
public:
	class                                                        Company;                                           // 0x28(0x8)
	struct FName                                                 CampaignId;                                        // 0x30(0x8)
	Struct FText                                                 CampaignTitle;                                     // 0x38(0x38)
	Struct FText                                                 CampaignDescription;                               // 0x70(0x38)
	Struct FText                                                 MoreInfoFirst;                                     // 0xa8(0x38)
	Struct FText                                                 MoreInfoSecond;                                    // 0xe0(0x38)
	Struct FText                                                 MoreInfoFirstLocked;                               // 0x118(0x38)
	Struct FText                                                 MoreInfoSecondLocked;                              // 0x150(0x38)
	Struct StringAssetReference                                  CampaignImagePath;                                 // 0x188(0x10)
	bool                                                         MarkAsNew;                                         // 0x198(0x1)
	char                                                         pad0x7_LCALV[0x7];                                 // 0x199(0x7)
	Struct EmblemDefinitionActiveDuration                        ActiveDuration;                                    // 0x1a0(0x18)
	TArray<struct EmblemSets>                                    EmblemSets;                                        // 0x1b8(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class EmblemReward: public Reward
{
public:
	Struct EmblemId                                              EmblemId;                                          // 0x28(0x18)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EmblemSettings: public Object
{
public:
	Struct StringAssetReference                                  EmblemDefinitionAssetListLocation;                 // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AdjustableWaterLevelPuzzleInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0x170] - InheritedSize[0xc8]
class MechanismActionComponent: public ActorComponent
{
public:
	char                                                         pad0x10_ZK1TG[0x10];                               // 0xc8(0x10)
	byte                                                         ActionType;                                        // 0xd8(0x1)
	byte                                                         ActivationMode;                                    // 0xd9(0x1)
	char                                                         pad0x6_SWQ2A[0x6];                                 // 0xda(0x6)
	TArray<class Actor*>                                         TriggerActors;                                     // 0xe0(0x10)
	byte                                                         ActionState;                                       // 0x150(0x1)
	char                                                         pad0x1f_5VC50[0x1f];                               // 0x151(0x1f)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismMaterialGroup: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DefaultMechanismMaterialGroup: public MechanismMaterialGroup
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MechanismMaterialMap: public Object
{
public:
	TArray<struct MaterialClusters>                              MaterialClusters;                                  // 0x28(0x10)
};


// Size 0x18 (Full Size[0x538] - InheritedSize[0x520]
class AnimatedMaterialMechanismAction: public AnimatedMechanismAction
{
public:
	TArray<struct AnimatedMaterials>                             AnimatedMaterials;                                 // 0x520(0x10)
	char                                                         pad0x8_UPV9Q[0x8];                                 // 0x530(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MechanismEvent: public Object
{
public:
	Class Actor*                                                 Owner;                                             // 0x28(0x8)
	char                                                         pad0x8_ROUIS[0x8];                                 // 0x30(0x8)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class MechanismAnimationEvent: public MechanismEvent
{
public:
	byte                                                         Type;                                              // 0x38(0x1)
	char                                                         pad0x7_QS2Y3[0x7];                                 // 0x39(0x7)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class MechanismOneShotEvent: public MechanismEvent
{
public:
};


// Size 0x30 (Full Size[0x58] - InheritedSize[0x28]
class MechanismAnimation: public DataAsset
{
public:
	TArray<class MechanismOneShotEvent*>                         AnimationStartedEvents;                            // 0x28(0x10)
	TArray<class MechanismAnimationEvent*>                       Events;                                            // 0x38(0x10)
	TArray<class MechanismOneShotEvent*>                         AnimationStoppedEvents;                            // 0x48(0x10)
};


// Size 0x508 (Full Size[0x560] - InheritedSize[0x58]
class MechanismAnimationCurve_Transform: public MechanismAnimation
{
public:
	char                                                         pad0x8_MNCU1[0x8];                                 // 0x58(0x8)
	Struct TransformBlendCurve                                   Curve;                                             // 0x60(0x500)
};


// Size 0x148 (Full Size[0x6a8] - InheritedSize[0x560]
class TimedDoorMechanismAction: public BaseToggleAnimatedMechanismAction
{
public:
	char                                                         pad0x8_7T0LS[0x8];                                 // 0x560(0x8)
	TArray<struct KeySequences>                                  KeySequences;                                      // 0x568(0x10)
	Class MechanismTriggerComponent*                             InternalTrigger;                                   // 0x578(0x8)
	bool                                                         UseSameLandmarkEventsForAllJammedPhases;           // 0x580(0x1)
	bool                                                         UseSameLandmarkEventsForAllLoweringPhases;         // 0x581(0x1)
	char                                                         pad0x6_8AMQC[0x6];                                 // 0x582(0x6)
	Struct TimedDoorLandmarkReactions                            LandmarkReactionsWhenDoorOpens;                    // 0x588(0x10)
	TArray<struct LandmarkReactionsWhenDoorLowers>               LandmarkReactionsWhenDoorLowers;                   // 0x598(0x10)
	TArray<struct LandmarkReactionsWhenDoorJams>                 LandmarkReactionsWhenDoorJams;                     // 0x5a8(0x10)
	Class LandmarkReactionPlayer*                                LandmarkReactionPlayer;                            // 0x5b8(0x8)
	char                                                         pad0x30_03IMW[0x30];                               // 0x5c0(0x30)
	class                                                        CurrentKeyDesc;                                    // 0x5f0(0x8)
	Struct TimedDoorState                                        ServerDoorState;                                   // 0x5f8(0xc)
	char                                                         pad0x4_Z7NPV[0x4];                                 // 0x604(0x4)
	Struct ObjectMessagingDispatcher                             EventDispatcher;                                   // 0x608(0xa0)
};


// Size 0x10 (Full Size[0x580] - InheritedSize[0x570]
class DoorMechanism: public ToggleAnimatedMechanismAction
{
public:
	Class StaticMeshComponent*                                   DoorMeshComponent;                                 // 0x570(0x8)
	Class RewindComponent*                                       RewindComponent;                                   // 0x578(0x8)
};


// Size 0x120 (Full Size[0x690] - InheritedSize[0x570]
class WaterPuzzleAlterationMechanismAction: public ToggleAnimatedMechanismAction
{
public:
	bool                                                         ShouldDrain;                                       // 0x570(0x1)
	char                                                         pad0x7_213SG[0x7];                                 // 0x571(0x7)
	Class Actor*                                                 PuzzleActor;                                       // 0x578(0x8)
	float                                                        WaterReactionDelay;                                // 0x580(0x4)
	int                                                          WaterLevelCapacity;                                // 0x584(0x4)
	float                                                        MinimumMouthOpenDuration;                          // 0x588(0x4)
	char                                                         pad0xc_TCWNC[0xc];                                 // 0x58c(0xc)
	Class WaterPuzzleAlterationMechanismAudioParams*             AlterationMechanismAudioParams;                    // 0x598(0x8)
	Class SceneComponent*                                        MouthSFXPosition;                                  // 0x5a0(0x8)
	Struct WwiseEmitter                                          MouthSFXEmitter;                                   // 0x5a8(0x20)
	Struct WwiseEmitter                                          SplashSFXEmitter;                                  // 0x5c8(0x20)
	Class WaterSpoutVFXComponent*                                WaterSpoutComponent;                               // 0x5e8(0x8)
	Class StoneFaceGlowComponent*                                GlowComponent;                                     // 0x5f0(0x8)
	char                                                         pad0x98_O45NF[0x98];                               // 0x5f8(0x98)
};


// Size 0x78 (Full Size[0x598] - InheritedSize[0x520]
class OneShotAnimatedMechanismAction: public AnimatedMechanismAction
{
public:
	Class SceneComponent*                                        Root;                                              // 0x520(0x8)
	Class SceneComponent*                                        Pivot;                                             // 0x528(0x8)
	Struct MechanismTransformAnimationCurve                      Animation;                                         // 0x530(0x8)
	Class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x538(0x8)
	Struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x540(0x50)
	char                                                         pad0x8_0R3GB[0x8];                                 // 0x590(0x8)
};


// Size 0x80 (Full Size[0xd8] - InheritedSize[0x58]
class MechanismAnimationCurve_Float: public MechanismAnimation
{
public:
	Struct RuntimeFloatCurve                                     Curve;                                             // 0x58(0x80)
};


// Size 0x20 (Full Size[0x540] - InheritedSize[0x520]
class SimpleAnimatedMechanismAction: public AnimatedMechanismAction
{
public:
	Class SceneComponent*                                        Root;                                              // 0x520(0x8)
	byte                                                         Mode;                                              // 0x528(0x1)
	bool                                                         AlwaysActive;                                      // 0x529(0x1)
	bool                                                         OnlyAnimateWhenActive;                             // 0x52a(0x1)
	char                                                         pad0x5_3E6ZQ[0x5];                                 // 0x52b(0x5)
	Class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x530(0x8)
	char                                                         pad0x8_192FO[0x8];                                 // 0x538(0x8)
};


// Size 0xc0 (Full Size[0x600] - InheritedSize[0x540]
class PivotAnimatedMechanismAction: public SimpleAnimatedMechanismAction
{
public:
	char                                                         pad0x10_D4SL6[0x10];                               // 0x540(0x10)
	Class SceneComponent*                                        Pivot;                                             // 0x550(0x8)
	bool                                                         TransformPivotOnClient;                            // 0x558(0x1)
	bool                                                         UseVirtualPivotTransformOnServer;                  // 0x559(0x1)
	char                                                         pad0x6_81746[0x6];                                 // 0x55a(0x6)
	Struct MechanismFloatAnimationCurve                          Animation;                                         // 0x560(0x8)
	char                                                         pad0x10_7ULG2[0x10];                               // 0x568(0x10)
	Struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x578(0x50)
	char                                                         pad0x38_0XHKN[0x38];                               // 0x5c8(0x38)
};


// Size 0xe0 (Full Size[0x6c0] - InheritedSize[0x5e0]
class MechanismInteractionComponent: public ShapeComponent
{
public:
	bool                                                         UseSimpleAsComplex;                                // 0x5e0(0x1)
	byte                                                         ShapeType;                                         // 0x5e1(0x1)
	char                                                         pad0x2_TEGMK[0x2];                                 // 0x5e2(0x2)
	float                                                        SphereRadius;                                      // 0x5e4(0x4)
	Struct Vector                                                BoxExtent;                                         // 0x5e8(0xc)
	char                                                         pad0x4_N77R6[0x4];                                 // 0x5f4(0x4)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x5f8(0x10)
	TArray<class PrimitiveComponent*>                            ComplexCollisionShapes;                            // 0x678(0x10)
	char                                                         pad0x38_C81MV[0x38];                               // 0x688(0x38)
};


// Size 0x30 (Full Size[0x630] - InheritedSize[0x600]
class SpikeMechanismAction: public PivotAnimatedMechanismAction
{
public:
	char                                                         pad0x8_Q85YZ[0x8];                                 // 0x600(0x8)
	Class MechanismInteractionComponent*                         MechanismInteractionComponent;                     // 0x608(0x8)
	float                                                        Extent;                                            // 0x610(0x4)
	float                                                        Damage;                                            // 0x614(0x4)
	byte                                                         DamageReason;                                      // 0x618(0x1)
	char                                                         pad0x7_WWJSW[0x7];                                 // 0x619(0x7)
	TArray<struct MaterialAnimations>                            MaterialAnimations;                                // 0x620(0x10)
};


// Size 0x60 (Full Size[0x660] - InheritedSize[0x600]
class SwingMechanismAction: public PivotAnimatedMechanismAction
{
public:
	char                                                         pad0x10_8F0HE[0x10];                               // 0x600(0x10)
	Class MechanismInteractionComponent*                         MechanismInteractionComponent;                     // 0x610(0x8)
	float                                                        MaxAngle;                                          // 0x618(0x4)
	float                                                        MinAngle;                                          // 0x61c(0x4)
	byte                                                         Axis;                                              // 0x620(0x1)
	char                                                         pad0x3_9V13Z[0x3];                                 // 0x621(0x3)
	float                                                        Damage;                                            // 0x624(0x4)
	byte                                                         DamageReason;                                      // 0x628(0x1)
	char                                                         pad0x7_TO8DR[0x7];                                 // 0x629(0x7)
	TArray<class SwingMechanismCordRenderComponent*>             CordChildren;                                      // 0x630(0x10)
	TArray<struct MaterialAnimations>                            MaterialAnimations;                                // 0x640(0x10)
	char                                                         pad0x10_3SJJ3[0x10];                               // 0x650(0x10)
};


// Size 0x658 (Full Size[0xa20] - InheritedSize[0x3c8]
class BaseContinuousAnimatedMechanismAction: public Actor
{
public:
	char                                                         pad0x10_X5GH8[0x10];                               // 0x3c8(0x10)
	Class SceneComponent*                                        Root;                                              // 0x3d8(0x8)
	Class SceneComponent*                                        Pivot;                                             // 0x3e0(0x8)
	char                                                         pad0x8_GADSG[0x8];                                 // 0x3e8(0x8)
	Struct TransformBlendCurve                                   Animation;                                         // 0x3f0(0x500)
	bool                                                         EnableCameraLookAt;                                // 0x8f0(0x1)
	char                                                         pad0x3_B31XR[0x3];                                 // 0x8f1(0x3)
	Struct Vector                                                MechanismLookAtLocationRelativeToActor;            // 0x8f4(0xc)
	Class WwiseObjectPoolWrapper*                                EmitterPool;                                       // 0x900(0x8)
	struct FName                                                 MechanismMovementProgressRateOfChangeRTPCName;     // 0x908(0x8)
	Class WwiseEvent*                                            MechanismStartedMovingAudioEvent;                  // 0x910(0x8)
	Class WwiseEvent*                                            MechanismStoppedMovingAudioEvent;                  // 0x918(0x8)
	Class WwiseEvent*                                            MechanismStoppedInProgressAudioEvent;              // 0x920(0x8)
	Class WwiseEvent*                                            MechanismReachedMinimumAudioEvent;                 // 0x928(0x8)
	Class WwiseEvent*                                            MechanismReachedMaximumAudioEvent;                 // 0x930(0x8)
	bool                                                         TransformAudioEmitterWithPivot;                    // 0x938(0x1)
	bool                                                         ParticleSystemsInheritActorScale;                  // 0x939(0x1)
	char                                                         pad0x6_CTG3S[0x6];                                 // 0x93a(0x6)
	Class ParticleSystem*                                        MechanismMovingParticleSystem;                     // 0x940(0x8)
	Struct Vector                                                MechanismMovingParticleSystemLocation;             // 0x948(0xc)
	Struct Rotator                                               MechanismMovingParticleSystemRotation;             // 0x954(0xc)
	Class ParticleSystem*                                        MechanismReachedMinimumParticleSystem;             // 0x960(0x8)
	Struct Vector                                                MechanismReachedMinimumParticleSystemLocation;     // 0x968(0xc)
	Struct Rotator                                               MechanismReachedMinimumParticleSystemRotation;     // 0x974(0xc)
	Class ParticleSystem*                                        MechanismReachedMaximumParticleSystem;             // 0x980(0x8)
	Struct Vector                                                MechanismReachedMaximumParticleSystemLocation;     // 0x988(0xc)
	Struct Rotator                                               MechanismReachedMaximumParticleSystemRotation;     // 0x994(0xc)
	float                                                        CompletionThreshold;                               // 0x9a0(0x4)
	char                                                         pad0x4_1YSQD[0x4];                                 // 0x9a4(0x4)
	Class ParticleSystemComponent*                               CachedMechanismMovingParticleSystem;               // 0x9a8(0x8)
	char                                                         pad0x70_MPK9T[0x70];                               // 0x9b0(0x70)
};


// Size 0x10 (Full Size[0xa30] - InheritedSize[0xa20]
class ContinuousAnimatedMechanismAction: public BaseContinuousAnimatedMechanismAction
{
public:
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0xa20(0x8)
	char                                                         pad0x8_XT7TA[0x8];                                 // 0xa28(0x8)
};


// Size 0xb0 (Full Size[0xae0] - InheritedSize[0xa30]
class HangingPlatform: public ContinuousAnimatedMechanismAction
{
public:
	Class StaticMeshComponent*                                   PlatformBody;                                      // 0xa28(0x8)
	Class ChildActorComponent*                                   DrivingMechanism;                                  // 0xa30(0x8)
	Struct Vector                                                PlatformEndLocation;                               // 0xa38(0xc)
	Struct Vector                                                TargetDefiningTiltAxis;                            // 0xa44(0xc)
	Struct Vector                                                PlatformTiltHeightConstant;                        // 0xa50(0xc)
	float                                                        TotalTimeToComplete;                               // 0xa5c(0x4)
	float                                                        TimeForFullFlatten;                                // 0xa60(0x4)
	float                                                        TimeForFullMove;                                   // 0xa64(0x4)
	float                                                        TiltAngle;                                         // 0xa68(0x4)
	char                                                         pad0x60_LLO3U[0x60];                               // 0xa6c(0x60)
	float                                                        CurrentAngleInterpolation;                         // 0xacc(0x4)
	float                                                        CurrentMoveInterpolation;                          // 0xad0(0x4)
	char                                                         pad0xc_2N5IC[0xc];                                 // 0xad4(0xc)
};


// Size 0x10 (Full Size[0xa30] - InheritedSize[0xa20]
class IntentBasedContinuousAnimatedMechanismAction: public BaseContinuousAnimatedMechanismAction
{
public:
	Class IntentBasedMechanismActionComponent*                   IntentBasedMechanismActionComponent;               // 0xa20(0x8)
	char                                                         pad0x8_WOESU[0x8];                                 // 0xa28(0x8)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class BlueprintMechanismResetComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CombinationLockMechanismInterface: public Interface
{
public:
};


// Size 0x160 (Full Size[0x670] - InheritedSize[0x510]
class CombinationLockMechanism: public ControllableObject
{
public:
	char                                                         pad0x8_JIOYE[0x8];                                 // 0x510(0x8)
	Class Actor*                                                 InteractingPlayer;                                 // 0x518(0x8)
	char                                                         pad0x20_4B7H6[0x20];                               // 0x520(0x20)
	Class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x540(0x8)
	Class WwiseEvent*                                            LockedSFX;                                         // 0x548(0x8)
	Class WwiseEvent*                                            UnlockedSFX;                                       // 0x550(0x8)
	Class WwiseEvent*                                            RotateSFX;                                         // 0x558(0x8)
	Class WwiseEvent*                                            OpenSFX;                                           // 0x560(0x8)
	Struct FText                                                 CanInteractText;                                   // 0x568(0x38)
	Struct FText                                                 CannotInteractText;                                // 0x5a0(0x38)
	TArray<Int Sequence>                                         Sequence;                                          // 0x5d8(0x10)
	Class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x5e8(0x8)
	Class SceneComponent*                                        PlayerPositionComponent;                           // 0x5f0(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x5f8(0x8)
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x600(0x8)
	Struct FText                                                 DisplayName;                                       // 0x608(0x38)
	float                                                        MoveKeyThreshold;                                  // 0x640(0x4)
	float                                                        MovementCooldown;                                  // 0x644(0x4)
	int                                                          MaxPinCode;                                        // 0x648(0x4)
	int                                                          CurrentPinCode;                                    // 0x64c(0x4)
	byte                                                         CurrentState;                                      // 0x650(0x1)
	byte                                                         CurrentDirection;                                  // 0x651(0x1)
	char                                                         pad0x1e_FB9H4[0x1e];                               // 0x652(0x1e)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CombinationLockMechanismActionStateId: public ActionStateId
{
public:
};


// Size 0x20 (Full Size[0x2b8] - InheritedSize[0x298]
class CombinationLockMechanismInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class CombinationLockXInputId: public AnalogInputId
{
public:
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class DestroyableMechanismTrigger: public Actor
{
public:
	Class HealthComponent*                                       HealthComponent;                                   // 0x3c8(0x8)
	Class OptInDamageableComponent*                              DamageableComponent;                               // 0x3d0(0x8)
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3d8(0x8)
	float                                                        TriggerMechanismAtOrBelowHealthValue;              // 0x3e0(0x4)
	char                                                         pad0x4_STS6S[0x4];                                 // 0x3e4(0x4)
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class ExplosionMechanismAction: public Actor
{
public:
	Class SceneComponent*                                        Base;                                              // 0x3c8(0x8)
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3d0(0x8)
	Class ExplosiveComponent*                                    ExplosiveComponent;                                // 0x3d8(0x8)
	Class ExplosionComponent*                                    ExplosionComponent;                                // 0x3e0(0x8)
	float                                                        Delay;                                             // 0x3e8(0x4)
	float                                                        Cooldown;                                          // 0x3ec(0x4)
	bool                                                         ApplyCooldownPostDelay;                            // 0x3f0(0x1)
	char                                                         pad0x2f_O3LL1[0x2f];                               // 0x3f1(0x2f)
};


// Size 0x110 (Full Size[0x6f0] - InheritedSize[0x5e0]
class FlamethrowerComponent: public CapsuleComponent
{
public:
	TArray<struct DefaultStatusesToApplyOnOverlap>               DefaultStatusesToApplyOnOverlap;                   // 0x5e0(0x10)
	TArray<struct OverrideStatusesToApplyOnOverlap>              OverrideStatusesToApplyOnOverlap;                  // 0x5f0(0x10)
	float                                                        DamageToApplyToWieldedItemsOnOverlap;              // 0x600(0x4)
	char                                                         pad0x4_0ZEJB[0x4];                                 // 0x604(0x4)
	Class MechanismAnimationCurve_Flamethrower*                  Animation;                                         // 0x608(0x8)
	Class ParticleSystem*                                        ParticleSystem;                                    // 0x610(0x8)
	Struct Rotator                                               ParticleSystemRelativeRotation;                    // 0x618(0xc)
	char                                                         pad0x4_D4JFE[0x4];                                 // 0x624(0x4)
	Struct MechanismAnimationEventContainer                      AnimationEvents;                                   // 0x628(0x50)
	Class ParticleSystemComponent*                               CachedParticleSystem;                              // 0x678(0x8)
	Class PrimitiveComponent*                                    SimpleCollisionShape;                              // 0x680(0x8)
	char                                                         pad0x68_5XKRZ[0x68];                               // 0x688(0x68)
};


// Size 0x68 (Full Size[0x130] - InheritedSize[0xc8]
class FlamethrowerCoordinatorComponent: public ActorComponent
{
public:
	char                                                         pad0x8_B3B6T[0x8];                                 // 0xc8(0x8)
	TArray<class FlamethrowerComponent*>                         Flamethrowers;                                     // 0xd0(0x10)
	char                                                         pad0x50_BBXZ7[0x50];                               // 0xe0(0x50)
};


// Size 0xd8 (Full Size[0x4a0] - InheritedSize[0x3c8]
class IgnitableMechanismTrigger: public Actor
{
public:
	char                                                         pad0x8_HFJYR[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	Class TimedFlammableComponent*                               FlammableComponent;                                // 0x3d8(0x8)
	Class LightWeightStatusEffectManagerComponent*               StatusEffectManagerComponent;                      // 0x3e0(0x8)
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3e8(0x8)
	char                                                         pad0xb0_CIZIG[0xb0];                               // 0x3f0(0xb0)
};


// Size 0x20 (Full Size[0x3e8] - InheritedSize[0x3c8]
class MechanismElementProxy: public Actor
{
public:
	char                                                         pad0x8_KHYUA[0x8];                                 // 0x3c8(0x8)
	class                                                        ElementClass;                                      // 0x3d0(0x8)
	float                                                        Relevancy;                                         // 0x3d8(0x4)
	char                                                         pad0x4_TD3W2[0x4];                                 // 0x3dc(0x4)
	Class Actor*                                                 Instance;                                          // 0x3e0(0x8)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class Mechanism: public Actor
{
public:
	char                                                         pad0x10_AQKM0[0x10];                               // 0x3c8(0x10)
	TArray<struct Bindings>                                      Bindings;                                          // 0x3d8(0x10)
	char                                                         pad0x10_SMTAR[0x10];                               // 0x3e8(0x10)
};


// Size 0x70 (Full Size[0x438] - InheritedSize[0x3c8]
class MechanismGroup: public Actor
{
public:
	char                                                         pad0x10_P6EO0[0x10];                               // 0x3c8(0x10)
	TArray<class Mechanism*>                                     Mechanisms;                                        // 0x3d8(0x10)
	Struct WeightedProbabilityRangeOfRanges                      MechanismsToSelect;                                // 0x3e8(0x30)
	TArray<class Mechanism*>                                     SelectedMechanisms;                                // 0x428(0x10)
};


// Size 0x138 (Full Size[0x200] - InheritedSize[0xc8]
class IslandMechanismSelectionComponent: public ActorComponent
{
public:
	TArray<class MechanismGroup*>                                MechanismGroups;                                   // 0xc8(0x10)
	TArray<struct FeatureToggledMechanismGroups>                 FeatureToggledMechanismGroups;                     // 0xd8(0x10)
	float                                                        CoolDownDuration;                                  // 0xe8(0x4)
	bool                                                         EnableRandomSelection;                             // 0xec(0x1)
	char                                                         pad0x3_NVD1B[0x3];                                 // 0xed(0x3)
	Struct WeightedProbabilityRangeOfRanges                      MechanismGroupsToSelect;                           // 0xf0(0x30)
	TArray<class MechanismGroup*>                                SelectedMechanismGroups;                           // 0x120(0x10)
	char                                                         pad0xd0_SALL2[0xd0];                               // 0x130(0xd0)
};


// Size 0x10 (Full Size[0x180] - InheritedSize[0x170]
class CutsceneMechanismActionComponent: public MechanismActionComponent
{
public:
	struct FName                                                 CutsceneName;                                      // 0x170(0x8)
	Class Actor*                                                 CutSceneActor;                                     // 0x178(0x8)
};


// Size 0xa0 (Full Size[0x210] - InheritedSize[0x170]
class IntentBasedMechanismActionComponent: public MechanismActionComponent
{
public:
	float                                                        InitialActionProgress;                             // 0x170(0x4)
	float                                                        MaxPositiveMovementSpeedDueToPlayer;               // 0x174(0x4)
	float                                                        MaxNegativeMovementSpeedDueToPlayer;               // 0x178(0x4)
	float                                                        PositiveAccelerationDueToPlayerIntent;             // 0x17c(0x4)
	float                                                        NegativeAccelerationDueToPlayerIntent;             // 0x180(0x4)
	bool                                                         InvertControlls;                                   // 0x184(0x1)
	bool                                                         EnableCircularActionProgress;                      // 0x185(0x1)
	bool                                                         GravityEnabled;                                    // 0x186(0x1)
	char                                                         pad0x1_I91PC[0x1];                                 // 0x187(0x1)
	float                                                        MaxNegativeMovementSpeedDueToGravity;              // 0x188(0x4)
	float                                                        NegativeAccelerationDueToGravity;                  // 0x18c(0x4)
	bool                                                         ProgressLockingEnabled;                            // 0x190(0x1)
	bool                                                         LockProgressWhenPlayerIntentBecomesZero;           // 0x191(0x1)
	char                                                         pad0x2_M7J8C[0x2];                                 // 0x192(0x2)
	float                                                        ProgressLockValue;                                 // 0x194(0x4)
	float                                                        UpperPlayerIntentUnlockThreshold;                  // 0x198(0x4)
	float                                                        LowerPlayerIntentUnlockThreshold;                  // 0x19c(0x4)
	bool                                                         UseAutoUnlockTimer;                                // 0x1a0(0x1)
	char                                                         pad0x3_OVTC6[0x3];                                 // 0x1a1(0x3)
	float                                                        TimeUntilAutoUnlock;                               // 0x1a4(0x4)
	Struct IntentPredictor                                       ClientPrediction;                                  // 0x1a8(0x1c)
	bool                                                         ResetToInitial;                                    // 0x1c4(0x1)
	bool                                                         ServerActionProgressIsLocked;                      // 0x1c5(0x1)
	char                                                         pad0x2_V6YRW[0x2];                                 // 0x1c6(0x2)
	float                                                        ServerActionProgress;                              // 0x1c8(0x4)
	char                                                         pad0x44_LGHP3[0x44];                               // 0x1cc(0x44)
};


// Size 0x18 (Full Size[0x188] - InheritedSize[0x170]
class InteractableToggleMechanismActionComponent: public MechanismActionComponent
{
public:
	byte                                                         InactiveState;                                     // 0x170(0x1)
	byte                                                         ActiveState;                                       // 0x171(0x1)
	char                                                         pad0x6_97UB7[0x6];                                 // 0x172(0x6)
	char                                                         pad0x10_V4962[0x10];                               // 0x178(0x10)
};


// Size 0x90 (Full Size[0xe8] - InheritedSize[0x58]
class MechanismAnimationCurve_Flamethrower: public MechanismAnimation
{
public:
	float                                                        MinLength;                                         // 0x58(0x4)
	float                                                        MaxLength;                                         // 0x5c(0x4)
	float                                                        Radius;                                            // 0x60(0x4)
	float                                                        MinFlameLengthRequiredForDamage;                   // 0x64(0x4)
	Struct RuntimeFloatCurve                                     LengthCurve;                                       // 0x68(0x80)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismBlueprintFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x3f8] - InheritedSize[0x3e8]
class AnimatedMechanismActionProxy: public MechanismElementProxy
{
public:
	float                                                        Delay;                                             // 0x3e8(0x4)
	char                                                         pad0x4_ID3QN[0x4];                                 // 0x3ec(0x4)
	class                                                        MaterialGroup;                                     // 0x3f0(0x8)
};


// Size 0x28 (Full Size[0x420] - InheritedSize[0x3f8]
class BaseToggleAnimatedMechanismActionProxy: public AnimatedMechanismActionProxy
{
public:
	Class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x3f8(0x8)
	char                                                         pad0x10_BGYWR[0x10];                               // 0x400(0x10)
	TArray<struct AnimationEvents>                               AnimationEvents;                                   // 0x410(0x10)
};


// Size 0x10 (Full Size[0x430] - InheritedSize[0x420]
class ToggleAnimatedMechanismActionProxy: public BaseToggleAnimatedMechanismActionProxy
{
public:
	Struct MechanismTransformAnimationCurve                      InactiveToActiveAnimation;                         // 0x420(0x8)
	Struct MechanismTransformAnimationCurve                      ActiveToInactiveAnimation;                         // 0x428(0x8)
};


// Size 0x18 (Full Size[0x448] - InheritedSize[0x430]
class WaterPuzzleAlterationMechanismActionProxy: public ToggleAnimatedMechanismActionProxy
{
public:
	Class Actor*                                                 PuzzleActor;                                       // 0x430(0x8)
	float                                                        WaterReactionDelay;                                // 0x438(0x4)
	int                                                          WaterLevelCapacity;                                // 0x43c(0x4)
	float                                                        MinimumMouthOpenDuration;                          // 0x440(0x4)
	char                                                         pad0x4_0IYBG[0x4];                                 // 0x444(0x4)
};


// Size 0x10 (Full Size[0x408] - InheritedSize[0x3f8]
class SimpleAnimatedMechanismActionProxy: public AnimatedMechanismActionProxy
{
public:
	byte                                                         Mode;                                              // 0x3f8(0x1)
	bool                                                         AlwaysActive;                                      // 0x3f9(0x1)
	bool                                                         OnlyAnimateWhenActive;                             // 0x3fa(0x1)
	bool                                                         OverrideAudioEmitterPool;                          // 0x3fb(0x1)
	char                                                         pad0x4_D6H7E[0x4];                                 // 0x3fc(0x4)
	Class WwiseObjectPoolWrapper*                                AudioEmitterPool;                                  // 0x400(0x8)
};


// Size 0x8 (Full Size[0x410] - InheritedSize[0x408]
class PivotAnimatedMechanismActionProxy: public SimpleAnimatedMechanismActionProxy
{
public:
	Struct MechanismFloatAnimationCurve                          Animation;                                         // 0x408(0x8)
};


// Size 0x20 (Full Size[0x430] - InheritedSize[0x410]
class SpikeMechanismActionProxy: public PivotAnimatedMechanismActionProxy
{
public:
	float                                                        Extent;                                            // 0x410(0x4)
	float                                                        Damage;                                            // 0x414(0x4)
	byte                                                         DamageReason;                                      // 0x418(0x1)
	char                                                         pad0x7_44ND3[0x7];                                 // 0x419(0x7)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x420(0x10)
};


// Size 0x20 (Full Size[0x430] - InheritedSize[0x410]
class SwingMechanismActionProxy: public PivotAnimatedMechanismActionProxy
{
public:
	float                                                        MaxAngle;                                          // 0x410(0x4)
	float                                                        MinAngle;                                          // 0x414(0x4)
	float                                                        Damage;                                            // 0x418(0x4)
	byte                                                         DamageReason;                                      // 0x41c(0x1)
	char                                                         pad0x3_AZBLR[0x3];                                 // 0x41d(0x3)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x420(0x10)
};


// Size 0x18 (Full Size[0x400] - InheritedSize[0x3e8]
class CapstanMechanismTriggerProxy: public MechanismElementProxy
{
public:
	Struct CapstanParams                                         Parameters;                                        // 0x3e8(0x14)
	char                                                         pad0x4_OI8QE[0x4];                                 // 0x3fc(0x4)
};


// Size 0x10 (Full Size[0x3f8] - InheritedSize[0x3e8]
class IgnitableMechanismTriggerProxy: public MechanismElementProxy
{
public:
	bool                                                         UseExtinguishTimer;                                // 0x3e8(0x1)
	bool                                                         AllowFireToBeReplenishedBeforeExtinguishTimerExpired; // 0x3e9(0x1)
	char                                                         pad0x2_1RQ60[0x2];                                 // 0x3ea(0x2)
	float                                                        TimeInSecondsUntilFireExtinguished;                // 0x3ec(0x4)
	Class StatusRecipientResponseList*                           RecipientResponseList;                             // 0x3f0(0x8)
};


// Size 0x70 (Full Size[0x438] - InheritedSize[0x3c8]
class PressurePlateMechanismTriggerBase: public Actor
{
public:
	char                                                         pad0x8_0BXCX[0x8];                                 // 0x3c8(0x8)
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3d0(0x8)
	Class ParticleSystem*                                        SteppedOnVFX;                                      // 0x3d8(0x8)
	float                                                        SteppedOnVFXStartTime;                             // 0x3e0(0x4)
	Struct Vector                                                SteppedOnVFXLocation;                              // 0x3e4(0xc)
	Struct Rotator                                               SteppedOnVFXRotation;                              // 0x3f0(0xc)
	char                                                         pad0x4_5BPOR[0x4];                                 // 0x3fc(0x4)
	Class SceneComponent*                                        Root;                                              // 0x400(0x8)
	Class MechanismInteractionComponent*                         MechanismInteractionComponent;                     // 0x408(0x8)
	Class BoxComponent*                                          TriggerBox;                                        // 0x410(0x8)
	char                                                         pad0x8_0LJ18[0x8];                                 // 0x418(0x8)
	TArray<struct AnimationComponents>                           AnimationComponents;                               // 0x420(0x10)
	char                                                         pad0x8_5V3KO[0x8];                                 // 0x430(0x8)
};


// Size 0x20 (Full Size[0x458] - InheritedSize[0x438]
class PressurePlateMechanismProgressTrigger: public PressurePlateMechanismTriggerBase
{
public:
	float                                                        ProgressionAmount;                                 // 0x438(0x4)
	char                                                         pad0x1c_9W5HL[0x1c];                               // 0x43c(0x1c)
};


// Size 0x18 (Full Size[0x400] - InheritedSize[0x3e8]
class PressurePlateMechanismProgressTriggerProxy: public MechanismElementProxy
{
public:
	float                                                        ProgressionAmount;                                 // 0x3e8(0x4)
	char                                                         pad0x4_858RI[0x4];                                 // 0x3ec(0x4)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x3f0(0x10)
};


// Size 0x20 (Full Size[0x458] - InheritedSize[0x438]
class PressurePlateMechanismTrigger: public PressurePlateMechanismTriggerBase
{
public:
	bool                                                         DisableAfterActivation;                            // 0x438(0x1)
	bool                                                         AutoEnableAfterDisable;                            // 0x439(0x1)
	char                                                         pad0x2_DWNP3[0x2];                                 // 0x43a(0x2)
	float                                                        TimeAfterDisableBeforeAutoEnable;                  // 0x43c(0x4)
	float                                                        DelayBeforeActivation;                             // 0x440(0x4)
	float                                                        DeactivateTime;                                    // 0x444(0x4)
	bool                                                         InvertTriggerActivation;                           // 0x448(0x1)
	char                                                         pad0xf_XTABC[0xf];                                 // 0x449(0xf)
};


// Size 0x20 (Full Size[0x408] - InheritedSize[0x3e8]
class PressurePlateMechanismTriggerProxy: public MechanismElementProxy
{
public:
	bool                                                         DisableAfterActivation;                            // 0x3e8(0x1)
	bool                                                         AutoEnableAfterDisable;                            // 0x3e9(0x1)
	char                                                         pad0x2_03S6U[0x2];                                 // 0x3ea(0x2)
	float                                                        TimeAfterDisableBeforeAutoEnable;                  // 0x3ec(0x4)
	float                                                        DelayBeforeActivation;                             // 0x3f0(0x4)
	char                                                         pad0x4_RDA4T[0x4];                                 // 0x3f4(0x4)
	TArray<struct AllowedInteractableTypes>                      AllowedInteractableTypes;                          // 0x3f8(0x10)
};


// Size 0x30 (Full Size[0x418] - InheritedSize[0x3e8]
class SwitchMechanismTriggerProxy: public MechanismElementProxy
{
public:
	bool                                                         SyncToConnectedActionStateOnChange;                // 0x3e8(0x1)
	bool                                                         DisableWhenActivated;                              // 0x3e9(0x1)
	bool                                                         AutoDeactivateAfterActivation;                     // 0x3ea(0x1)
	char                                                         pad0x1_D5U5A[0x1];                                 // 0x3eb(0x1)
	float                                                        TimeAfterActivationBeforeAutoDeactivating;         // 0x3ec(0x4)
	bool                                                         SelectRandomStartPositionOnSpawn;                  // 0x3f0(0x1)
	byte                                                         RandomStartPositionSelectionMode;                  // 0x3f1(0x1)
	byte                                                         SwitchMechanismTriggerRotationMode;                // 0x3f2(0x1)
	bool                                                         WrapSwitchAtEndPosition;                           // 0x3f3(0x1)
	int                                                          FixedStartPositionIndex;                           // 0x3f4(0x4)
	Struct MechanismFloatAnimationCurve                          PositionTransitionAnimationCurve;                  // 0x3f8(0x8)
	TArray<struct Positions>                                     Positions;                                         // 0x400(0x10)
	class                                                        MaterialGroup;                                     // 0x410(0x8)
};


// Size 0x20 (Full Size[0x60] - InheritedSize[0x40]
class MechanismAnimationEvent_Audio: public MechanismAnimationEvent
{
public:
	Class WwiseEvent*                                            Event;                                             // 0x40(0x8)
	char                                                         pad0x18_FKBU2[0x18];                               // 0x48(0x18)
};


// Size 0x8 (Full Size[0x68] - InheritedSize[0x60]
class MechanismAnimationEvent_OneShotAudio: public MechanismAnimationEvent_Audio
{
public:
	float                                                        StartTime;                                         // 0x60(0x4)
	char                                                         pad0x4_LAL9P[0x4];                                 // 0x64(0x4)
};


// Size 0x20 (Full Size[0x80] - InheritedSize[0x60]
class MechanismAnimationEvent_SwingAudio: public MechanismAnimationEvent_Audio
{
public:
	float                                                        Midpoint;                                          // 0x60(0x4)
	char                                                         pad0x4_GI59S[0x4];                                 // 0x64(0x4)
	char                                                         pad0x18_PKCG6[0x18];                               // 0x68(0x18)
};


// Size 0x30 (Full Size[0x70] - InheritedSize[0x40]
class MechanismAnimationEvent_ContinuousAudio: public MechanismAnimationEvent
{
public:
	Class WwiseEvent*                                            StartEvent;                                        // 0x40(0x8)
	Class WwiseEvent*                                            StopEvent;                                         // 0x48(0x8)
	float                                                        StartTime;                                         // 0x50(0x4)
	float                                                        StopTime;                                          // 0x54(0x4)
	char                                                         pad0x18_TO9TU[0x18];                               // 0x58(0x18)
};


// Size 0x10 (Full Size[0x50] - InheritedSize[0x40]
class MechanismAnimationEvent_SetSeatComponentCanBeControlled: public MechanismAnimationEvent
{
public:
	float                                                        StartTime;                                         // 0x40(0x4)
	bool                                                         CanBeControlled;                                   // 0x44(0x1)
	char                                                         pad0x3_JNXT8[0x3];                                 // 0x45(0x3)
	Class SeatComponentBase*                                     CachedSeatComponent;                               // 0x48(0x8)
};


// Size 0x38 (Full Size[0x78] - InheritedSize[0x40]
class MechanismAnimationEvent_VFX: public MechanismAnimationEvent
{
public:
	Class ParticleSystemComponent*                               CachedParticleSystem;                              // 0x40(0x8)
	Class SceneComponent*                                        CachedAttachParent;                                // 0x48(0x8)
	char                                                         pad0x28_4W55L[0x28];                               // 0x50(0x28)
};


// Size 0x0 (Full Size[0x5d0] - InheritedSize[0x5d0]
class MechanismVFXEmitterComponent: public ArrowComponent
{
public:
};


// Size 0x58 (Full Size[0xd0] - InheritedSize[0x78]
class MechanismAnimationEvent_ContinuousVFX: public MechanismAnimationEvent_VFX
{
public:
	float                                                        StartTime;                                         // 0x78(0x4)
	float                                                        StopTime;                                          // 0x7c(0x4)
	Struct MechanismAnimationEvent_VFXParams                     VFXParams;                                         // 0x80(0x48)
	char                                                         pad0x8_4XON1[0x8];                                 // 0xc8(0x8)
};


// Size 0x50 (Full Size[0xc8] - InheritedSize[0x78]
class MechanismAnimationEvent_OneShotVFX: public MechanismAnimationEvent_VFX
{
public:
	float                                                        StartTime;                                         // 0x78(0x4)
	char                                                         pad0x4_K2DRY[0x4];                                 // 0x7c(0x4)
	Struct MechanismAnimationEvent_VFXParams                     VFXParams;                                         // 0x80(0x48)
};


// Size 0x38 (Full Size[0x70] - InheritedSize[0x38]
class MechanismOneShotEvent_Audio: public MechanismOneShotEvent
{
public:
	Class WwiseEvent*                                            Event;                                             // 0x38(0x8)
	Struct WwiseEmitter                                          Emitter;                                           // 0x40(0x20)
	char                                                         pad0x10_LW402[0x10];                               // 0x60(0x10)
};


// Size 0x10 (Full Size[0x5f0] - InheritedSize[0x5e0]
class MechanismProximityResetComponent: public SphereComponent
{
public:
	float                                                        Delay;                                             // 0x5e0(0x4)
	char                                                         pad0xc_T609H[0xc];                                 // 0x5e4(0xc)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MechanismsServiceInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x400] - InheritedSize[0x3c8]
class MechanismsService: public Actor
{
public:
	char                                                         pad0x18_1L4E8[0x18];                               // 0x3c8(0x18)
	TArray<struct RegisteredMechanisms>                          RegisteredMechanisms;                              // 0x3e0(0x10)
	TArray<struct OverlappingActors>                             OverlappingActors;                                 // 0x3f0(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class MechanismsSettings: public Object
{
public:
	class                                                        MaterialMap;                                       // 0x28(0x8)
	TArray<struct GlobalFlamethrowerStatusOverrides>             GlobalFlamethrowerStatusOverrides;                 // 0x30(0x10)
};


// Size 0x10 (Full Size[0x160] - InheritedSize[0x150]
class CapstanMechanismTriggerComponent: public MechanismTriggerComponent
{
public:
};


// Size 0x28 (Full Size[0x178] - InheritedSize[0x150]
class DamageableMechanismTrigger: public MechanismTriggerComponent
{
public:
	float                                                        TriggerThreshold;                                  // 0x150(0x4)
	float                                                        TriggerResetTime;                                  // 0x154(0x4)
	float                                                        AutomaticResetTime;                                // 0x158(0x4)
	char                                                         pad0x4_OQBZV[0x4];                                 // 0x15c(0x4)
	Class DamageableComponent*                                   OwningDamageSource;                                // 0x160(0x8)
	Class World*                                                 CachedWorld;                                       // 0x168(0x8)
	char                                                         pad0x8_3B1TM[0x8];                                 // 0x170(0x8)
};


// Size 0x10 (Full Size[0x160] - InheritedSize[0x150]
class DynamicOnlyMechanismTriggerComponent: public MechanismTriggerComponent
{
public:
	TArray<class Actor*>                                         MechanismActors;                                   // 0x150(0x10)
};


// Size 0x28 (Full Size[0x178] - InheritedSize[0x150]
class SignalMechanismTargetComponent: public MechanismTriggerComponent
{
public:
	char                                                         pad0x8_4UTDU[0x8];                                 // 0x150(0x8)
	Struct Vector                                                TargetLocationRelativeToOwner;                     // 0x158(0xc)
	bool                                                         StopSignalWhenOutsideRange;                        // 0x164(0x1)
	char                                                         pad0x3_SZSW9[0x3];                                 // 0x165(0x3)
	TArray<class Actor*>                                         NumActiveInstigators;                              // 0x168(0x10)
};


// Size 0x28 (Full Size[0x418] - InheritedSize[0x3f0]
class OneShotPlaceableReactionMechanismAction: public PlaceableReaction
{
public:
	char                                                         pad0x8_GQIZL[0x8];                                 // 0x3f0(0x8)
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3f8(0x8)
	char                                                         pad0x18_J6C4H[0x18];                               // 0x400(0x18)
};


// Size 0xe8 (Full Size[0x4b0] - InheritedSize[0x3c8]
class OneShotToggleCollisionAction: public Actor
{
public:
	Class SceneComponent*                                        CollisionActionRoot;                               // 0x3c8(0x8)
	Class PrimitiveComponent*                                    BlockingPrimitive;                                 // 0x3d0(0x8)
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3d8(0x8)
	Class ArrowComponent*                                        KnockbackArrowComponent;                           // 0x3e0(0x8)
	bool                                                         UseInactiveCollisionProfileByDefault;              // 0x3e8(0x1)
	char                                                         pad0x3_ED2VH[0x3];                                 // 0x3e9(0x3)
	Struct KnockBackInfo                                         KnockBackInfo;                                     // 0x3ec(0x50)
	float                                                        KnockbackGracePeriod;                              // 0x43c(0x4)
	Struct CollisionProfileName                                  InactiveCollisionProfileName;                      // 0x440(0x8)
	Struct CollisionProfileName                                  ActiveCollisionProfileName;                        // 0x448(0x8)
	Struct OneShotToggleCollisionAudioParams                     AudioParams;                                       // 0x450(0x38)
	char                                                         pad0x28_8QA7A[0x28];                               // 0x488(0x28)
};


// Size 0x28 (Full Size[0x418] - InheritedSize[0x3f0]
class PlaceableReactionMechanismAction: public PlaceableReaction
{
public:
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3f0(0x8)
	float                                                        Delay;                                             // 0x3f8(0x4)
	bool                                                         LoopReactionsWhileActive;                          // 0x3fc(0x1)
	char                                                         pad0x3_4I07N[0x3];                                 // 0x3fd(0x3)
	Struct FloatRange                                            DelayBetweenLoops;                                 // 0x400(0x10)
	char                                                         pad0x8_S6YVP[0x8];                                 // 0x410(0x8)
};


// Size 0x158 (Full Size[0x678] - InheritedSize[0x520]
class PulleyMechanism: public ControllablePulley
{
public:
	Class StaticMeshComponent*                                   PulleyMesh;                                        // 0x520(0x8)
	Class IntentBasedMechanismTriggerComponent*                  PulleyMechanismTriggerComponent;                   // 0x528(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x530(0x8)
	bool                                                         CameraTracksMechanismsBeingPulled;                 // 0x538(0x1)
	char                                                         pad0x7_6KGG2[0x7];                                 // 0x539(0x7)
	Class Actor*                                                 UnconnectedActorToTrack;                           // 0x540(0x8)
	Struct Vector                                                DefaultLookAtLocation;                             // 0x548(0xc)
	Struct LookAtOffsetParams                                    CameraLookAtParams;                                // 0x554(0x1c)
	class                                                        AnalogControls;                                    // 0x570(0x8)
	Struct FText                                                 PulleyInteractionPrompt;                           // 0x578(0x38)
	Struct FText                                                 PulleyInteractionDisabledPrompt;                   // 0x5b0(0x38)
	char                                                         pad0x90_CDLNS[0x90];                               // 0x5e8(0x90)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ScorchStatus: public StatusBase
{
public:
};


// Size 0x40 (Full Size[0x408] - InheritedSize[0x3c8]
class SignalMechanism: public Actor
{
public:
	char                                                         pad0x8_WFHPQ[0x8];                                 // 0x3c8(0x8)
	Class SceneComponent*                                        Root;                                              // 0x3d0(0x8)
	Class ArrowComponent*                                        Arrow;                                             // 0x3d8(0x8)
	float                                                        SignalSpreadDegrees;                               // 0x3e0(0x4)
	float                                                        FocusDurationBeforeSignalling;                     // 0x3e4(0x4)
	bool                                                         RequiresOcclusionValidation;                       // 0x3e8(0x1)
	char                                                         pad0x7_9MS0P[0x7];                                 // 0x3e9(0x7)
	TArray<class Actor*>                                         Targets;                                           // 0x3f0(0x10)
	char                                                         pad0x8_IBY9L[0x8];                                 // 0x400(0x8)
};


// Size 0x1c8 (Full Size[0x590] - InheritedSize[0x3c8]
class SpawnAIWaveMechanismAction: public Actor
{
public:
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3c8(0x8)
	Class AIProgressiveWavesSpawner*                             ProgressiveWavesSpawnerTemplate;                   // 0x3d0(0x8)
	Class AIProgressiveWavesSpawner*                             OnePlayerCrewSpawnerTemplateOverride;              // 0x3d8(0x8)
	Class AIProgressiveWavesSpawner*                             TwoPlayerCrewSpawnerTemplateOverride;              // 0x3e0(0x8)
	Class AIProgressiveWavesSpawner*                             ThreePlayerCrewSpawnerTemplateOverride;            // 0x3e8(0x8)
	Class AIProgressiveWavesSpawner*                             FourOrMorePlayerCrewSpawnerTemplateOverride;       // 0x3f0(0x8)
	int                                                          PerCrewAISpawnCooldownTimeInSeconds;               // 0x3f8(0x4)
	int                                                          GlobalCooldownInSeconds;                           // 0x3fc(0x4)
	float                                                        SpawnRollChance;                                   // 0x400(0x4)
	char                                                         pad0x4_K5HOU[0x4];                                 // 0x404(0x4)
	Class Actor*                                                 ActorWithTargetAIRegion;                           // 0x408(0x8)
	float                                                        ResetSpawnerDelay;                                 // 0x410(0x4)
	char                                                         pad0xdc_4MTVK[0xdc];                               // 0x414(0xdc)
	Class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x4f0(0x8)
	Class AISpawnerMusicZoneComponent*                           MusicZoneComponent;                                // 0x4f8(0x8)
	char                                                         pad0x90_1AAHO[0x90];                               // 0x500(0x90)
};


// Size 0x70 (Full Size[0x138] - InheritedSize[0xc8]
class StoneFaceGlowComponent: public ActorComponent
{
public:
	Class CurveFloat*                                            FullToEmptyGlowCurve;                              // 0xc8(0x8)
	Class CurveFloat*                                            EmptyToFullGlowCurve;                              // 0xd0(0x8)
	struct FName                                                 ScalarParamOverrideName;                           // 0xd8(0x8)
	TArray<class MaterialInstanceDynamic*>                       OverriddenMaterials;                               // 0xe0(0x10)
	char                                                         pad0x48_I60V9[0x48];                               // 0xf0(0x48)
};


// Size 0x30 (Full Size[0x690] - InheritedSize[0x660]
class SwingMechanismCordRenderComponent: public CordRenderComponent
{
public:
	float                                                        Length;                                            // 0x658(0x4)
	Struct Vector                                                StartOffset;                                       // 0x65c(0xc)
	Struct Vector                                                EndOffset;                                         // 0x668(0xc)
	char                                                         pad0x1c_OXRRE[0x1c];                               // 0x674(0x1c)
};


// Size 0x0 (Full Size[0x5f8] - InheritedSize[0x5f8]
class DynamicOnlySwitchMechanismTrigger: public SwitchMechanismTrigger
{
public:
};


// Size 0xc0 (Full Size[0x6b8] - InheritedSize[0x5f8]
class SwitchMechanismTriggerForPuzzleManager: public SwitchMechanismTrigger
{
public:
	char                                                         pad0x10_HX5AA[0x10];                               // 0x5f8(0x10)
	Class Object*                                                PuzzleManagerPolicy;                               // 0x608(0x8)
	bool                                                         DisableSwitchInteraction;                          // 0x610(0x1)
	char                                                         pad0xa7_34RY9[0xa7];                               // 0x611(0xa7)
};


// Size 0x220 (Full Size[0x818] - InheritedSize[0x5f8]
class SwitchMechanismTriggerProjectileLauncher: public SwitchMechanismTrigger
{
public:
	Struct SwitchMechanismTriggerPlankRotation                   PlankRotateToIdleRotation;                         // 0x5f8(0x28)
	Struct SwitchMechanismTriggerPlankRotation                   PlankRotateToStartRotation;                        // 0x620(0x28)
	Struct SwitchMechanismTriggerPlankRotation                   PlankRotateToEndRotation;                          // 0x648(0x28)
	Struct SwitchMechanismTriggerProjectileParams                ProjectileParams;                                  // 0x670(0x28)
	Class StaticMeshComponent*                                   PivotMesh;                                         // 0x698(0x8)
	Class StaticMeshComponent*                                   PlankMesh;                                         // 0x6a0(0x8)
	Class StaticMeshComponent*                                   PlankBoulderMesh;                                  // 0x6a8(0x8)
	Class ArrowComponent*                                        LaunchDirectionArrowComponent;                     // 0x6b0(0x8)
	Class SceneComponent*                                        PlankLaunchLocation;                               // 0x6b8(0x8)
	Class SceneComponent*                                        PlankBoulderStartLocation;                         // 0x6c0(0x8)
	Class SceneComponent*                                        PlankBoulderHitLocation;                           // 0x6c8(0x8)
	Struct MechanismFloatAnimationCurve                          PlankBoulderDropCurve;                             // 0x6d0(0x8)
	Struct MechanismFloatAnimationCurve                          ObjectToMoveToPlankCurve;                          // 0x6d8(0x8)
	Class CurveVector*                                           PlankBoulderRotationCurve;                         // 0x6e0(0x8)
	Class CurveVector*                                           ObjectToMoveToPlankRotationCurve;                  // 0x6e8(0x8)
	float                                                        TimeBeforePlankRotationResets;                     // 0x6f0(0x4)
	char                                                         pad0x4_74NON[0x4];                                 // 0x6f4(0x4)
	Class Actor*                                                 ActorToMoveToPlank;                                // 0x6f8(0x8)
	Struct MechanismAnimationEventContainer                      PlankBoulderAnimationEvents;                       // 0x700(0x50)
	Struct MechanismAnimationEventContainer                      ObjectToMoveToPlankAnimationEvents;                // 0x750(0x50)
	char                                                         pad0x78_5SFND[0x78];                               // 0x7a0(0x78)
};


// Size 0x18 (Full Size[0x3e0] - InheritedSize[0x3c8]
class TripwireMechanismTrigger: public Actor
{
public:
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3c8(0x8)
	Class BoxComponent*                                          BoxCollisionThatTriggersWireSnap;                  // 0x3d0(0x8)
	Class StaticMeshComponent*                                   WireStaticMesh;                                    // 0x3d8(0x8)
};


// Size 0x58 (Full Size[0x420] - InheritedSize[0x3c8]
class VolumeMechanismTrigger: public Actor
{
public:
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3c8(0x8)
	Class BoxComponent*                                          TriggerVolume;                                     // 0x3d0(0x8)
	bool                                                         UsePerCrewOverlaps;                                // 0x3d8(0x1)
	char                                                         pad0x3_S5SE6[0x3];                                 // 0x3d9(0x3)
	int                                                          PerCrewOverlapCooldownTimeInSeconds;               // 0x3dc(0x4)
	char                                                         pad0x40_MS4Z1[0x40];                               // 0x3e0(0x40)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class WaterPuzzleAlterationMechanismAudioParams: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                AlterationMechanismPool;                           // 0x28(0x8)
	Class WwiseEvent*                                            AlterationMechanismActivateEvent;                  // 0x30(0x8)
	TArray<class WwiseEvent*>                                    AlterationMechanismDeactivateEvents;               // 0x38(0x10)
	struct FName                                                 MechanismSubmergedSwitchGroup;                     // 0x48(0x8)
	struct FName                                                 MechanismSubmergedSwitchSubmerged;                 // 0x50(0x8)
	struct FName                                                 MechanismSubmergedSwitchNotSubmerged;              // 0x58(0x8)
	Class WwiseObjectPoolWrapper*                                WaterLevelPuzzlePool;                              // 0x60(0x8)
	Class WwiseEvent*                                            PuzzleWaterRiseStartEvent;                         // 0x68(0x8)
	Class WwiseEvent*                                            PuzzleWaterRiseEndEvent;                           // 0x70(0x8)
	Class WwiseEvent*                                            PuzzleWaterFallStartEvent;                         // 0x78(0x8)
	Class WwiseEvent*                                            PuzzleWaterFallEndEvent;                           // 0x80(0x8)
};


// Size 0x80 (Full Size[0x448] - InheritedSize[0x3c8]
class WaveBasedMechanismVisualController: public Actor
{
public:
	Class MechanismActionComponent*                              MechanismActionComponent;                          // 0x3c8(0x8)
	TArray<class Actor*>                                         WaveVisualActors;                                  // 0x3d0(0x10)
	struct FName                                                 StaticMeshDynamicMaterialTag;                      // 0x3e0(0x8)
	Class CurveFloat*                                            ScalarParameterCurve;                              // 0x3e8(0x8)
	struct FName                                                 MaterialScalarParameterName;                       // 0x3f0(0x8)
	float                                                        NewWaveDelay;                                      // 0x3f8(0x4)
	int                                                          WaveIndex;                                         // 0x3fc(0x4)
	char                                                         pad0x10_CHTZK[0x10];                               // 0x400(0x10)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x410(0x10)
	char                                                         pad0x10_4OHYF[0x10];                               // 0x420(0x10)
	TArray<class MaterialInstanceDynamic*>                       MaterialsToTransition;                             // 0x430(0x10)
	char                                                         pad0x8_VHDL3[0x8];                                 // 0x440(0x8)
};


// Size 0x140 (Full Size[0xc20] - InheritedSize[0xae0]
class BattleElevator: public HangingPlatform
{
public:
	Class InstancedNavMeshComponent*                             InstancedNavMeshComponent;                         // 0xae0(0x8)
	Class LocatorContainer*                                      BattleElevatorLocators;                            // 0xb08(0x8)
	Class NamedPointsComponent*                                  NamedPointsComponent;                              // 0xb10(0x8)
	Class DamageableComponent*                                   DamageableComponent;                               // 0xb18(0x8)
	TArray<class SceneComponent*>                                ChainPivotComponents;                              // 0xb20(0x10)
	TArray<struct ChainAnchorLocations>                          ChainAnchorLocations;                              // 0xb30(0x10)
	char                                                         pad0x18_Q4NCF[0x18];                               // 0xb40(0x18)
	float                                                        OverrideTransitionPeriod;                          // 0xb58(0x4)
	char                                                         pad0x88_UVDMM[0x88];                               // 0xb5c(0x88)
	struct FName                                                 ExplosionNamedPointsGroupName;                     // 0xbe4(0x8)
	char                                                         pad0x34_TM9UF[0x34];                               // 0xbec(0x34)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BattleElevatorEventRoomBasePolicy: public Object
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BattleElevatorEventRoomHeightReachedPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
	float                                                        TargetHeightPercentage;                            // 0x28(0x4)
	char                                                         pad0x14_VJD6C[0x14];                               // 0x2c(0x14)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BattleElevatorEventRoomKrakenDeadPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class BattleElevatorEventRoomKrakenPhaseEndedPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class BattleElevatorEventRoomMechanismCompletedPolicy: public BattleElevatorEventRoomBasePolicy
{
public:
	TArray<Assetclass ActorWithMechanismsComponentsToWaitFor>    ActorWithMechanismsComponentsToWaitFor;            // 0x28(0x10)
	char                                                         pad0x8_R5H9U[0x8];                                 // 0x38(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class BattleElevatorEventRoomPhasesDataAsset: public DataAsset
{
public:
	TArray<struct Phases>                                        Phases;                                            // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ElevatorActionBase: public Object
{
public:
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class KnockdownElevatorAction: public ElevatorActionBase
{
public:
	float                                                        HardPhaseHeight;                                   // 0x28(0x4)
	float                                                        SoftPhaseHeight;                                   // 0x2c(0x4)
	float                                                        DropDistance;                                      // 0x30(0x4)
	char                                                         pad0x4_8YGX1[0x4];                                 // 0x34(0x4)
	Class WwiseEvent*                                            StartKnockdownEvent;                               // 0x38(0x8)
	Class WwiseEvent*                                            EndKnockdownEvent;                                 // 0x40(0x8)
	char                                                         pad0x40_PK5NS[0x40];                               // 0x48(0x40)
};


// Size 0x138 (Full Size[0x500] - InheritedSize[0x3c8]
class EventRoom: public Actor
{
public:
	char                                                         pad0x8_R52ZS[0x8];                                 // 0x3c8(0x8)
	bool                                                         ClearSpawnProgressOnRoomActivate;                  // 0x3d0(0x1)
	char                                                         pad0x7_1WWDC[0x7];                                 // 0x3d1(0x7)
	TArray<class Actor*>                                         EntranceMechanisms;                                // 0x3d8(0x10)
	TArray<class Actor*>                                         ExitMechanisms;                                    // 0x3e8(0x10)
	Class BoxComponent*                                          RoomAreaComponent;                                 // 0x418(0x8)
	char                                                         pad0xe0_TFU2R[0xe0];                               // 0x420(0xe0)
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class NetworkClusterEventRoom: public EventRoom
{
public:
};


// Size 0xb8 (Full Size[0x5b8] - InheritedSize[0x500]
class BattleElevatorEventRoom: public NetworkClusterEventRoom
{
public:
	TArray<class Actor*>                                         ActorsWithAIRegionsToAssignAIToCannons;            // 0x500(0x10)
	Class BattleElevator*                                        TargetBattleElevatorActor;                         // 0x510(0x8)
	struct FName                                                 InitialFightPhase;                                 // 0x548(0x8)
	Class BattleElevatorEventRoomPhasesDataAsset*                PhasesAsset;                                       // 0x550(0x8)
	Struct CurrentPhaseData                                      CurrentPhaseData;                                  // 0x558(0x40)
	char                                                         pad0x20_AK6LP[0x20];                               // 0x598(0x20)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EventRoomParamsDataAsset: public DataAsset
{
public:
	float                                                        AftermathTimer;                                    // 0x28(0x4)
	bool                                                         SpawnPlayerOnShipInsteadOfExitLocation;            // 0x2c(0x1)
	char                                                         pad0x3_ME5ZM[0x3];                                 // 0x2d(0x3)
	float                                                        FailTimer;                                         // 0x30(0x4)
	char                                                         pad0x4_NBHA5[0x4];                                 // 0x34(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConcealableInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ConcealingInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class FishSizeWeightsDataAsset: public DataAsset
{
public:
	TArray<struct Data>                                          Data;                                              // 0x28(0x10)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class FishSpawnParamsDataAsset: public DataAsset
{
public:
	byte                                                         TimeOfDay;                                         // 0x28(0x1)
	bool                                                         InPool;                                            // 0x29(0x1)
	bool                                                         CloseToActiveFortOrSkellyShip;                     // 0x2a(0x1)
	bool                                                         InStorm;                                           // 0x2b(0x1)
	bool                                                         CloseToShipwreck;                                  // 0x2c(0x1)
	char                                                         pad0x3_WNSS6[0x3];                                 // 0x2d(0x3)
	class                                                        Sea;                                               // 0x30(0x8)
	Class VoyageLocationOnlyNamedIslandListDataAsset*            Islands;                                           // 0x38(0x8)
	byte                                                         BaitType;                                          // 0x40(0x1)
	char                                                         pad0x3_1PC08[0x3];                                 // 0x41(0x3)
	float                                                        CatchWeight;                                       // 0x44(0x4)
	struct FName                                                 FishName;                                          // 0x48(0x8)
	TArray<struct FishTypes>                                     FishTypes;                                         // 0x50(0x10)
	Class FishSizeWeightsDataAsset*                              SizeWeights;                                       // 0x60(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AvailableFishForSpawning: public DataAsset
{
public:
	TArray<class FishSpawnParamsDataAsset*>                      AvailableFishToSelectForSpawning;                  // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingRodInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x2c8] - InheritedSize[0x298]
class BaitRadialActivationInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x330 (Full Size[0x910] - InheritedSize[0x5e0]
class FishingFish: public Character
{
public:
	char                                                         pad0x10_VRJ6V[0x10];                               // 0x5e0(0x10)
	Class FishDataAsset*                                         FishDataAsset;                                     // 0x5f0(0x8)
	Class FishingMiniGameFishDataAsset*                          FishingMiniGameFishDataAsset;                      // 0x5f8(0x8)
	Class ParticleSystemComponent*                               BattlingVFX;                                       // 0x600(0x8)
	Class ParticleSystemComponent*                               BeingTiredVFX;                                     // 0x608(0x8)
	Class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x610(0x8)
	class                                                        CaughtFishItemDesc;                                // 0x618(0x8)
	char                                                         pad0x290_EO9Y7[0x290];                             // 0x620(0x290)
	Class DitherComponent*                                       DitherComponent;                                   // 0x8b0(0x8)
	Struct Vector                                                MouthAttachLocation;                               // 0x8b8(0xc)
	float                                                        AutoKillTime;                                      // 0x8c4(0x4)
	char                                                         pad0x8_LJ2JC[0x8];                                 // 0x8c8(0x8)
	int                                                          RandomAnimationLoopVal;                            // 0x8d0(0x4)
	char                                                         pad0x3c_Q2SIV[0x3c];                               // 0x8d4(0x3c)
};


// Size 0xb0 (Full Size[0x4f0] - InheritedSize[0x440]
class FishAnimationInstance: public AnimInstance
{
public:
	Class SkeletalMesh*                                          FishSkeletalMesh;                                  // 0x440(0x8)
	Class FishingFish*                                           FishingFishCharacter;                              // 0x448(0x8)
	Struct FishAnimationParams                                   FishingFishAnimationParams;                        // 0x450(0x8)
	Struct FishAnimationSequences                                FishAnimationSequences;                            // 0x458(0x88)
	bool                                                         IsJumpActive;                                      // 0x4e0(0x1)
	bool                                                         IsOnSurface;                                       // 0x4e1(0x1)
	bool                                                         FishIsCaught;                                      // 0x4e2(0x1)
	char                                                         pad0x5_5SS0B[0x5];                                 // 0x4e3(0x5)
	Class AnimMontage*                                           CurrentPlayingMontage;                             // 0x4e8(0x8)
};


// Size 0x160 (Full Size[0x188] - InheritedSize[0x28]
class FishDataAsset: public DataAsset
{
public:
	float                                                        CruisingDepthBeneathWaterHeight;                   // 0x28(0x4)
	float                                                        RisingFromTheDepthsSpeed;                          // 0x2c(0x4)
	float                                                        EscapingToTheDepthsSpeed;                          // 0x30(0x4)
	char                                                         pad0x4_8CU4Q[0x4];                                 // 0x34(0x4)
	Struct WeightedProbabilityRangeOfRanges                      TimeReelingWhenBattlingToSnapLine;                 // 0x38(0x30)
	float                                                        ReelingCooldownMultiplier;                         // 0x68(0x4)
	char                                                         pad0x4_UNYKU[0x4];                                 // 0x6c(0x4)
	Struct WeightedProbabilityRange                              NumberOfLoopsBeforeBiting;                         // 0x70(0x20)
	Struct WeightedProbabilityRangeOfRanges                      MinimumDistanceFromPlayer;                         // 0x90(0x30)
	float                                                        DistanceFromPlayerToCatchFish;                     // 0xc0(0x4)
	Struct FloatRange                                            SecondsToRemainBeforeDespawning;                   // 0xc4(0x10)
	float                                                        FloatBobDepthOnBeingHooked;                        // 0xd4(0x4)
	float                                                        RodBendAmountWhenBiting;                           // 0xd8(0x4)
	float                                                        RodBendAmountWhenBattling;                         // 0xdc(0x4)
	float                                                        RodBendAmountWhenRecovering;                       // 0xe0(0x4)
	char                                                         pad0x4_C2I8E[0x4];                                 // 0xe4(0x4)
	Class Object*                                                SplashVFXWhenBeingTired;                           // 0xe8(0x8)
	Class Object*                                                SplashVFXWhenBattling;                             // 0xf0(0x8)
	Class Object*                                                SplashVFXWhenJumpingOutOfWater;                    // 0xf8(0x8)
	Class Object*                                                SplashVFXWhenLandingInToWater;                     // 0x100(0x8)
	float                                                        SplashZOffset;                                     // 0x108(0x4)
	float                                                        FloatReelingMoveSpeedWhenMovingToMinimumDistanceFromPlayer; // 0x10c(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenMovingToMinimumDistanceFromPlayer; // 0x110(0x4)
	float                                                        FloatReelingMoveSpeedWhenBattling;                 // 0x114(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenBattling;              // 0x118(0x4)
	float                                                        FloatReelingMoveSpeedWhenNotBattling;              // 0x11c(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenNotBattling;           // 0x120(0x4)
	float                                                        TimeBetweenIsBlockedHitChecksOnServer;             // 0x124(0x4)
	float                                                        TimeBeforeTurningOnHits;                           // 0x128(0x4)
	byte                                                         HitTestTraceChannel;                               // 0x12c(0x1)
	char                                                         pad0x3_KRY4Z[0x3];                                 // 0x12d(0x3)
	float                                                        HitDetectionHalfExtentXY;                          // 0x130(0x4)
	float                                                        HitDetectionHalfExtentZ;                           // 0x134(0x4)
	float                                                        HitDetectionZOffset;                               // 0x138(0x4)
	char                                                         pad0x4_G6WNM[0x4];                                 // 0x13c(0x4)
	Class WwiseObjectPoolWrapper*                                FishingFishPool;                                   // 0x140(0x8)
	struct FName                                                 FishTiredSwitchGroup;                              // 0x148(0x8)
	struct FName                                                 FishTiredSwitchDefault;                            // 0x150(0x8)
	struct FName                                                 FishTiredSwitchTired;                              // 0x158(0x8)
	Class WwiseEvent*                                            FishBiteAndStruggleStart;                          // 0x160(0x8)
	Class WwiseEvent*                                            FishBiteAndStruggleStop;                           // 0x168(0x8)
	Class WwiseEvent*                                            FishJumpOutOfWater;                                // 0x170(0x8)
	Class WwiseEvent*                                            FishJumpIntoWater;                                 // 0x178(0x8)
	Class ForceFeedbackEffect*                                   FishBitingForceFeedback;                           // 0x180(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FishingConditionStatTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingFloatInterface: public Interface
{
public:
};


// Size 0x418 (Full Size[0x7e0] - InheritedSize[0x3c8]
class FishingFloat: public Actor
{
public:
	char                                                         pad0x18_RAGOA[0x18];                               // 0x3c8(0x18)
	Class WaterInteractionComponent*                             WaterInteractionComponent;                         // 0x3e0(0x8)
	Class BoxComponent*                                          CollisionComponent;                                // 0x3e8(0x8)
	Class FishingFloatSetupDataAsset*                            FishingFloatSetupDataAsset;                        // 0x3f0(0x8)
	Class StaticMeshComponent*                                   FishingFloatMesh;                                  // 0x3f8(0x8)
	TArray<class MaterialInstanceDynamic*>                       FloatMaterials;                                    // 0x400(0x10)
	char                                                         pad0x3d0_WDDM5[0x3d0];                             // 0x410(0x3d0)
};


// Size 0x80 (Full Size[0x390] - InheritedSize[0x310]
class FishingFloatNameplateComponent: public NameplateComponent
{
public:
	Struct Vector                                                NameplateOffset;                                   // 0x310(0xc)
	char                                                         pad0x74_ROCKG[0x74];                               // 0x31c(0x74)
};


// Size 0x98 (Full Size[0xc0] - InheritedSize[0x28]
class FishingFloatSetupDataAsset: public DataAsset
{
public:
	Class WwiseObjectPoolWrapper*                                FishingFloatPool;                                  // 0x28(0x8)
	Class WwiseEvent*                                            RodCastFloatLandInWater;                           // 0x30(0x8)
	float                                                        DelayBeforeDetachingFloat;                         // 0x38(0x4)
	float                                                        FloatBobDepthWhenMovedAndNotHooked;                // 0x3c(0x4)
	float                                                        RetractingDuration;                                // 0x40(0x4)
	float                                                        ViolentlyRetractingDuration;                       // 0x44(0x4)
	Class CurveFloat*                                            CastingFloatMovementXY;                            // 0x48(0x8)
	Class CurveFloat*                                            CastingFloatMovementZAtMinDistance;                // 0x50(0x8)
	Class CurveFloat*                                            CastingFloatMovementZAtMaxDistance;                // 0x58(0x8)
	Class CurveFloat*                                            ReelingInFloatMovementXY;                          // 0x60(0x8)
	Class CurveFloat*                                            ReelingInFloatMovementZ;                           // 0x68(0x8)
	Class Object*                                                SplashVFXWhenFloatLandsOnWater;                    // 0x70(0x8)
	float                                                        MaxAboveDistance;                                  // 0x78(0x4)
	float                                                        MaxBelowDistance;                                  // 0x7c(0x4)
	float                                                        ExtraOffsetWhenFishNotAttached;                    // 0x80(0x4)
	float                                                        MaxDriftCompensationOffset;                        // 0x84(0x4)
	float                                                        FloatBobDepthOnComedyItemBeingHooked;              // 0x88(0x4)
	float                                                        BringingInCatchDuration;                           // 0x8c(0x4)
	float                                                        FloatZOffset;                                      // 0x90(0x4)
	float                                                        WobbleSpeed;                                       // 0x94(0x4)
	float                                                        MinWobbleAngle;                                    // 0x98(0x4)
	float                                                        MaxWobbleAngle;                                    // 0x9c(0x4)
	float                                                        TimeToBlendAwaySway;                               // 0xa0(0x4)
	float                                                        WobbleYawAngleOffset;                              // 0xa4(0x4)
	float                                                        FlavourYawMinTimeToNextChange;                     // 0xa8(0x4)
	float                                                        FlavourYawMaxTimeToNextChange;                     // 0xac(0x4)
	float                                                        FlavourYawMinSpeed;                                // 0xb0(0x4)
	float                                                        FlavourYawMaxSpeed;                                // 0xb4(0x4)
	float                                                        FlavourYawAcceleration;                            // 0xb8(0x4)
	char                                                         pad0x4_1MIYO[0x4];                                 // 0xbc(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class FishingFreeLookConstrainsDataAsset: public DataAsset
{
public:
	float                                                        YawDegrees;                                        // 0x28(0x4)
	float                                                        PitchMinDegrees;                                   // 0x2c(0x4)
	float                                                        PitchMaxDegrees;                                   // 0x30(0x4)
	float                                                        LookAroundRightStickInputToAngleModifier;          // 0x34(0x4)
	float                                                        LookAroundMouseInputToAngleModifier;               // 0x38(0x4)
	float                                                        LookAroundMouseInputAsMovementInputModifier;       // 0x3c(0x4)
};


// Size 0x48 (Full Size[0x2e0] - InheritedSize[0x298]
class FishingInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x10 (Full Size[0x670] - InheritedSize[0x660]
class FishingLineRenderComponent: public RopeCatenaryRenderComponent
{
public:
	Struct LinearColor                                           LineColour;                                        // 0x660(0x10)
};


// Size 0x108 (Full Size[0x130] - InheritedSize[0x28]
class FishingMiniGameFishDataAsset: public DataAsset
{
public:
	float                                                        ChanceOfEscapePositionBeingLeft;                   // 0x28(0x4)
	float                                                        ChanceOfEscapePositionBeingAway;                   // 0x2c(0x4)
	float                                                        ChanceOfEscapePositionBeingRight;                  // 0x30(0x4)
	char                                                         pad0x4_PW6C7[0x4];                                 // 0x34(0x4)
	Struct WeightedProbabilityRangeOfRanges                      HowLongBeforeUnfoughtFishEscapes;                  // 0x38(0x30)
	Struct WeightedProbabilityRangeOfRanges                      TimeToTire;                                        // 0x68(0x30)
	Struct WeightedProbabilityRangeOfRanges                      SwitchesBeforeRecovery;                            // 0x98(0x30)
	Struct WeightedProbabilityRangeOfRanges                      TimeSpentRecovering;                               // 0xc8(0x30)
	float                                                        SpeedMovingBackToCentreWhenRecovering;             // 0xf8(0x4)
	float                                                        SpeedMovingBackToCentreWhenRecoveringWhenReeling;  // 0xfc(0x4)
	Struct WeightedProbabilityRangeOfRanges                      NumFakeOuts;                                       // 0x100(0x30)
};


// Size 0x80 (Full Size[0xa8] - InheritedSize[0x28]
class FishingMiniGameSetupDataAsset: public DataAsset
{
public:
	float                                                        EscapeRadiusAtMaxDistance;                         // 0x28(0x4)
	float                                                        EscapeRadiusAtMinDistance;                         // 0x2c(0x4)
	float                                                        PercentageOfEscapeRadiusToKeepFishFacingOutwards;  // 0x30(0x4)
	float                                                        AwayEscapeSectorAngleAtMaxDistance;                // 0x34(0x4)
	float                                                        AwayEscapeSectorAngleAtMinDistance;                // 0x38(0x4)
	float                                                        LeftRightEscapeSectorAngleAtMaxDistance;           // 0x3c(0x4)
	float                                                        LeftRightEscapeSectorAngleAtMinDistance;           // 0x40(0x4)
	char                                                         pad0x4_21R7D[0x4];                                 // 0x44(0x4)
	Struct WeightedProbabilityRangeOfRanges                      TimeToNextAngleChangeWithinSector;                 // 0x48(0x30)
	Struct WeightedProbabilityRangeOfRanges                      FakeOutDistancePercentage;                         // 0x78(0x30)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMouseXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMouseYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMoveRightInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingMoveForwardInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingRightStickXAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class FishingRightStickYAnalogInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FishingRodActionStateInterface: public Interface
{
public:
};


// Size 0x410 (Full Size[0xbf0] - InheritedSize[0x7e0]
class FishingRod: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x20_WZABT[0x20];                               // 0x7e0(0x20)
	class                                                        AuxiliaryRadialCategoryFilter;                     // 0x800(0x8)
	TArray<class Class*>                                         AuxiliaryRadialAllowedItems;                       // 0x808(0x10)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x818(0x8)
	Struct FishingFishSelector                                   FishSelector;                                      // 0x820(0xd8)
	Class FishingRodSetupDataAsset*                              FishingRodSetupDataAsset;                          // 0x8f8(0x8)
	Class FishingSetupDataAsset*                                 FishingSetupDataAssetInToSea;                      // 0x900(0x8)
	Class FishingSetupDataAsset*                                 FishingSetupDataAssetInToPond;                     // 0x908(0x8)
	Class FishingMiniGameSetupDataAsset*                         FishingMiniGameSetupDataAssetInToSea;              // 0x910(0x8)
	Class FishingMiniGameSetupDataAsset*                         FishingMiniGameSetupDataAssetInToPond;             // 0x918(0x8)
	Class FishingFreeLookConstrainsDataAsset*                    FishingFreeLookConstrainsDataAsset;                // 0x920(0x8)
	Class MaterialManipulationComponent*                         MaterialManipulationComponent;                     // 0x928(0x8)
	Class FishingLineRenderComponent*                            Rope;                                              // 0x930(0x8)
	Struct Vector                                                InteractionPointOffset;                            // 0x938(0xc)
	char                                                         pad0x4_DPCJP[0x4];                                 // 0x944(0x4)
	class                                                        StatTriggerForCatchingAFish;                       // 0x948(0x8)
	byte                                                         ServerState;                                       // 0x950(0x1)
	bool                                                         IsReeling;                                         // 0x951(0x1)
	char                                                         pad0x6_U56J7[0x6];                                 // 0x952(0x6)
	Struct FishingRodReplicatedFishState                         ReplicatedFishState;                               // 0x958(0x10)
	Class Actor*                                                 FishInteractionProxy;                              // 0x968(0x8)
	Struct FishingMiniGamePlayerInput                            FishingMiniGamePlayerInput;                        // 0x970(0x3)
	bool                                                         PlayerIsBattlingFish;                              // 0x973(0x1)
	char                                                         pad0x4_XR6HP[0x4];                                 // 0x974(0x4)
	Class ItemProxy*                                             BaitOnFloat;                                       // 0x978(0x8)
	Struct Vector                                                FishingFloatRelativeCentreLocation;                // 0x980(0xc)
	Struct Vector                                                FishingFloatOffset;                                // 0x98c(0xc)
	bool                                                         CastIsInToAPond;                                   // 0x998(0x1)
	char                                                         pad0x7_7PE1S[0x7];                                 // 0x999(0x7)
	class                                                        CaughtFishClass;                                   // 0x9a0(0x8)
	byte                                                         BaitOnRodType;                                     // 0x9a8(0x1)
	byte                                                         BattlingState;                                     // 0x9a9(0x1)
	char                                                         pad0x6_PJWFC[0x6];                                 // 0x9aa(0x6)
	Class ItemProxy*                                             ComedyItemOnFloat;                                 // 0x9b0(0x8)
	class                                                        CaughtComedyItemDesc;                              // 0x9b8(0x8)
	float                                                        TimeReelingWhenBattlingBeforeSnapping;             // 0x9c0(0x4)
	float                                                        FishingMiniGamePercentageInToEscaping;             // 0x9c4(0x4)
	float                                                        MinimumDistanceFromPlayer;                         // 0x9c8(0x4)
	char                                                         pad0x4_IA0AZ[0x4];                                 // 0x9cc(0x4)
	Class Actor*                                                 FishingFloatActor;                                 // 0x9d0(0x8)
	Class ItemProxy*                                             LocalOnlyBaitOnFloat;                              // 0x9d8(0x8)
	Struct FishingMiniGame                                       FishingMiniGame;                                   // 0x9e0(0x50)
	Class FishingFish*                                           NonReplicatedLocalFishingFishOnRod;                // 0xa30(0x8)
	Class ItemProxy*                                             LocalOnlyComedyItemOnFloat;                        // 0xa38(0x8)
	bool                                                         IsInFishingActionState;                            // 0xa40(0x1)
	char                                                         pad0x1af_970OB[0x1af];                             // 0xa41(0x1af)
};


// Size 0x178 (Full Size[0x1a0] - InheritedSize[0x28]
class FishingRodSetupDataAsset: public DataAsset
{
public:
	class                                                        FishActorInteractionDesc;                          // 0x28(0x8)
	float                                                        DelayBeforeAllowingACast;                          // 0x30(0x4)
	float                                                        DelayBeforeCreatingFishingFloat;                   // 0x34(0x4)
	float                                                        DelayBeforeDestroyingFishingFloat;                 // 0x38(0x4)
	char                                                         pad0x4_HDB43[0x4];                                 // 0x3c(0x4)
	class                                                        FishingFloatType;                                  // 0x40(0x8)
	byte                                                         HitTestTraceChannel;                               // 0x48(0x1)
	char                                                         pad0x3_AZ2C2[0x3];                                 // 0x49(0x3)
	float                                                        PreCastingPlayerSpeedModifier;                     // 0x4c(0x4)
	float                                                        CastingTimeBeforeTurningOnHits;                    // 0x50(0x4)
	float                                                        TimeBetweenIsFloatLocationValidChecks;             // 0x54(0x4)
	float                                                        SingleFishAnimationLoopDuration;                   // 0x58(0x4)
	float                                                        DriftOffsetToStopFishJumping;                      // 0x5c(0x4)
	TArray<struct FishBreeds>                                    FishBreeds;                                        // 0x60(0x10)
	TArray<struct FishBreedsInAPond>                             FishBreedsInAPond;                                 // 0x70(0x10)
	TArray<struct ForceFeedbackLevels>                           ForceFeedbackLevels;                               // 0x80(0x10)
	TArray<struct ComedyItems>                                   ComedyItems;                                       // 0x90(0x10)
	float                                                        ChanceOfComedyItems;                               // 0xa0(0x4)
	float                                                        DistanceFromPlayerToCatchComedyItem;               // 0xa4(0x4)
	TArray<struct FishBait>                                      FishBait;                                          // 0xa8(0x10)
	float                                                        RopeThickness;                                     // 0xb8(0x4)
	float                                                        RopeSlackAtMaxDistance;                            // 0xbc(0x4)
	float                                                        RopeSlackAtMinDistance;                            // 0xc0(0x4)
	float                                                        RopeOnRodSlack;                                    // 0xc4(0x4)
	float                                                        RopeOnRodMaxSway;                                  // 0xc8(0x4)
	float                                                        TimeToBlendAwaySway;                               // 0xcc(0x4)
	float                                                        MaxTimeToWaitForAnimationStateToFinish;            // 0xd0(0x4)
	Struct Vector                                                ServerEstimateRodEndPosition;                      // 0xd4(0xc)
	Struct Vector                                                ServerEstimateRodBasePosition;                     // 0xe0(0xc)
	Struct Vector                                                RodBaseHitDetectionExtraOffset;                    // 0xec(0xc)
	float                                                        MinimumShakeValue;                                 // 0xf8(0x4)
	float                                                        ReelingCooldownMultiplier;                         // 0xfc(0x4)
	Class WwiseEvent*                                            RodCastAudioDrawBack;                              // 0x100(0x8)
	Class WwiseEvent*                                            RodCastAudioCast;                                  // 0x108(0x8)
	Class WwiseEvent*                                            RodBendStart;                                      // 0x110(0x8)
	Class WwiseEvent*                                            RodBendStop;                                       // 0x118(0x8)
	float                                                        RodBendFactorAmountToTriggerSound;                 // 0x120(0x4)
	float                                                        AmountOfWrongDirectionStrainToTriggerSound;        // 0x124(0x4)
	float                                                        RodBendCooldown;                                   // 0x128(0x4)
	struct FName                                                 RodBendFactorRtpc;                                 // 0x12c(0x8)
	char                                                         pad0x4_CHME6[0x4];                                 // 0x134(0x4)
	Class WwiseEvent*                                            RodCastReelLoopStart;                              // 0x138(0x8)
	Class WwiseEvent*                                            RodCastReelLoopStop;                               // 0x140(0x8)
	struct FName                                                 RodCastReelSpeedRtpc;                              // 0x148(0x8)
	float                                                        RtpcSpeedFactorCasting;                            // 0x150(0x4)
	float                                                        RtpcSpeedFactorFishing;                            // 0x154(0x4)
	float                                                        RtpcSpeedFactorReeling;                            // 0x158(0x4)
	char                                                         pad0x4_PBVEU[0x4];                                 // 0x15c(0x4)
	Class WwiseEvent*                                            FishingBendWrongDirectionStart;                    // 0x160(0x8)
	Class WwiseEvent*                                            FishingBendWrongDirectionStop;                     // 0x168(0x8)
	Class WwiseEvent*                                            FishingLineSnap;                                   // 0x170(0x8)
	Class WwiseEvent*                                            RodCastFishOutOfWaterWriggling;                    // 0x178(0x8)
	Class WwiseObjectPoolWrapper*                                FishingRodPool;                                    // 0x180(0x8)
	struct FName                                                 RodStrainMagnitudeRtpc;                            // 0x188(0x8)
	Class WwiseEvent*                                            FishTakenFromRod;                                  // 0x190(0x8)
	Class WwiseEvent*                                            BaitAddedToHook;                                   // 0x198(0x8)
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class FishingSetupDataAsset: public DataAsset
{
public:
	float                                                        CastDistanceMin;                                   // 0x28(0x4)
	float                                                        CastDistanceMax;                                   // 0x2c(0x4)
	float                                                        PreCastTimeForMaxCastDistance;                     // 0x30(0x4)
	float                                                        DistanceRequiredToReelInToCatchTheFish;            // 0x34(0x4)
	float                                                        MinFloatDistanceFromPlayer;                        // 0x38(0x4)
	float                                                        MaxFishSpawnDepth;                                 // 0x3c(0x4)
	float                                                        CastingThrowDurationAtMinDistance;                 // 0x40(0x4)
	float                                                        CastingThrowDurationAtMaxDistance;                 // 0x44(0x4)
	float                                                        FishSpawnHitDetectionHalfExtentXY;                 // 0x48(0x4)
	float                                                        FishSpawnHitDetectionHalfExtentZ;                  // 0x4c(0x4)
	Struct WeightedProbabilityRangeOfRanges                      TimeBeforeAppearing;                               // 0x50(0x30)
	float                                                        DelayBeforeTrackingFloat;                          // 0x80(0x4)
	float                                                        MaxDistanceFromFloatBeforeFishGivesUp;             // 0x84(0x4)
	Struct WeightedProbabilityRangeOfRanges                      TimeSpentBiting;                                   // 0x88(0x30)
	float                                                        FloatReelingMoveSpeedWhenNoFishOnLine;             // 0xb8(0x4)
	float                                                        ReelingAnimationMaxSpeedWhenNoFishOnLine;          // 0xbc(0x4)
	float                                                        ReelingAnimationSpeedChangePerSec;                 // 0xc0(0x4)
	float                                                        ReelingAnimationStoppingSpeedChangePerSec;         // 0xc4(0x4)
	float                                                        MaxReelingWhenFailedTime;                          // 0xc8(0x4)
	float                                                        FishingMiniGameLeftRightInputAngle;                // 0xcc(0x4)
	float                                                        FishingMiniGameBattlingAngle;                      // 0xd0(0x4)
	float                                                        FishingMiniGameInputThreshold;                     // 0xd4(0x4)
	float                                                        TimeBeforeTurningOnFishHits;                       // 0xd8(0x4)
	float                                                        FOVChangeWhenBattling;                             // 0xdc(0x4)
	float                                                        FOVBlendSpeedWhenBattling;                         // 0xe0(0x4)
	float                                                        TimeBeforeDestroyingFishAndAwardingPlayer;         // 0xe4(0x4)
	float                                                        CameraYawFishMaxOffset;                            // 0xe8(0x4)
	float                                                        CameraMaxYaw;                                      // 0xec(0x4)
	float                                                        CameraYawSpringAcc;                                // 0xf0(0x4)
	float                                                        CameraYawSpringAccWhenResetting;                   // 0xf4(0x4)
	float                                                        CameraExtraPitchWhenPullingBack;                   // 0xf8(0x4)
	float                                                        CameraExtraPitchSpringAcc;                         // 0xfc(0x4)
	float                                                        CameraExtraPitchSpringAccWhenResetting;            // 0x100(0x4)
	float                                                        BlendBackFromDisabledCameraDuration;               // 0x104(0x4)
	float                                                        RodDirectionBendMaxAngleOfFishFromFromRod;         // 0x108(0x4)
	float                                                        RodDirectionMaxBendLeft;                           // 0x10c(0x4)
	float                                                        RodDirectionMaxBendRight;                          // 0x110(0x4)
	float                                                        ReturnFromFreeLookSpringAcc;                       // 0x114(0x4)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class FishItemConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CanPlayEnsembleWithAnotherCrewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnsembleInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class ShantyUnlockDesc: public EntitlementDesc
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class ShantyCategory: public CategoryBase
{
public:
};


// Size 0xe8 (Full Size[0x4b0] - InheritedSize[0x3c8]
class Ensemble: public Actor
{
public:
	char                                                         pad0x30_O88PE[0x30];                               // 0x3c8(0x30)
	Class ShantyItemDesc*                                        ShantyDesc;                                        // 0x3f8(0x8)
	TArray<class Actor*>                                         Instruments;                                       // 0x400(0x10)
	TArray<struct OldInstruments>                                OldInstruments;                                    // 0x410(0x10)
	TArray<struct NewInstruments>                                NewInstruments;                                    // 0x420(0x10)
	Struct Vector                                                OverrideLeadPosition;                              // 0x430(0xc)
	bool                                                         UseOverrideLeadPosition;                           // 0x43c(0x1)
	char                                                         pad0x1b_1EECN[0x1b];                               // 0x43d(0x1b)
	Struct ShantyData                                            ShantyData;                                        // 0x458(0x30)
	char                                                         pad0x28_COGO5[0x28];                               // 0x488(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnsembleContextControlInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EnsembleContextViewInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstrumentInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShantyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShantySelectionInterface: public Interface
{
public:
};


// Size 0x60 (Full Size[0x128] - InheritedSize[0xc8]
class ShantySelectionComponent: public ActorComponent
{
public:
	char                                                         pad0x58_1OEIK[0x58];                               // 0xc8(0x58)
	Class ShantyItemDesc*                                        SelectedShanty;                                    // 0x120(0x8)
};


// Size 0x10 (Full Size[0x48] - InheritedSize[0x38]
class ShantySettings: public DeveloperSettings
{
public:
	float                                                        MaxJoinInDistance;                                 // 0x38(0x4)
	int                                                          MaxAudibleShantyInstruments;                       // 0x3c(0x4)
	int                                                          MaxCachedShantyEvents;                             // 0x40(0x4)
	float                                                        InstrumentStopFadeOutDuration;                     // 0x44(0x4)
};


// Size 0x28 (Full Size[0x3f0] - InheritedSize[0x3c8]
class EncounterSignalMechanismTargetHandler: public Actor
{
public:
	char                                                         pad0x8_ETGQ6[0x8];                                 // 0x3c8(0x8)
	TArray<struct SignalMechanismAssetRefs>                      SignalMechanismAssetRefs;                          // 0x3d0(0x10)
	char                                                         pad0x10_IEDQV[0x10];                               // 0x3e0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LighthouseBeamDamageInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0xf8] - InheritedSize[0xc8]
class GhostShipLighthouseBeamDamageComponent: public ActorComponent
{
public:
	char                                                         pad0x8_2HFB5[0x8];                                 // 0xc8(0x8)
	float                                                        TakingDamageIntervalInSeconds;                     // 0xd0(0x4)
	float                                                        SphereRadius;                                      // 0xd4(0x4)
	Class ParticleSystem*                                        HitParticleEffectSystem;                           // 0xd8(0x8)
	char                                                         pad0x18_JK2ND[0x18];                               // 0xe0(0x18)
};


// Size 0x0 (Full Size[0x180] - InheritedSize[0x180]
class RequestHuntersCryTaleRemoteConfigDurationFunctionLibrary: public TaleQuestFunctionStepLibrary
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SeatStat: public Object
{
public:
	Struct PlayerStat                                            Stat;                                              // 0x28(0x4)
	char                                                         pad0x1c_OJK9R[0x1c];                               // 0x2c(0x1c)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimNotifyState_BlockInterrupt: public AnimNotifyState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimNotifyState_DisableHappyReact: public AnimNotifyState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimNotifyState_EnableHappyReact: public AnimNotifyState
{
public:
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PetAnimationDataStore: public AnimationData
{
public:
	Class PetsAnimationData*                                     PetAnimationData;                                  // 0x28(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetAnimationInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PetMovementStateModifierInterface: public Interface
{
public:
};


// Size 0x38 (Full Size[0x60] - InheritedSize[0x28]
class PetRoamingAnimationStateDefinitionDataAsset: public DataAsset
{
public:
	Struct PetRoamingAnimationStateDefinition                    AnimationDefinitionData;                           // 0x28(0x38)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PetRoamingAnimationStateDefinitionsDataAsset: public DataAsset
{
public:
	TArray<struct DefinitionWrappers>                            DefinitionWrappers;                                // 0x28(0x10)
};


// Size 0x250 (Full Size[0x278] - InheritedSize[0x28]
class PetsAnimationData: public DataAsset
{
public:
	Struct PetAnimationDataStructure                             PetAnimations;                                     // 0x28(0x218)
	Struct FloatRange                                            LookAtPitchRange;                                  // 0x240(0x10)
	float                                                        LookAtClamp;                                       // 0x250(0x4)
	float                                                        LookAtTimeToComplete;                              // 0x254(0x4)
	float                                                        TransitionFromTurningMovementSpeed;                // 0x258(0x4)
	Struct FloatRange                                            PositiveMoodAnimationRange;                        // 0x25c(0x10)
	float                                                        PositiveMoodBlendTime;                             // 0x26c(0x4)
	bool                                                         DefaultAllowHappyReact;                            // 0x270(0x1)
	char                                                         pad0x7_UM4SX[0x7];                                 // 0x271(0x7)
};


// Size 0x8 (Full Size[0x88] - InheritedSize[0x80]
class PetEntitlementBaseCategory: public ItemCategory
{
public:
	struct FName                                                 PetPreviewCamera;                                  // 0x80(0x8)
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class InvalidPetEntitlementBaseCategory: public PetEntitlementBaseCategory
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class PetCustomizationCategory: public PetEntitlementBaseCategory
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class PetEntitlementCategory: public PetEntitlementBaseCategory
{
public:
};


// Size 0x0 (Full Size[0x88] - InheritedSize[0x88]
class InvalidPetEntitlementCategory: public PetEntitlementCategory
{
public:
};


// Size 0x0 (Full Size[0xc8] - InheritedSize[0xc8]
class PetEntitlementBaseDesc: public EntitlementDesc
{
public:
};


// Size 0x38 (Full Size[0x100] - InheritedSize[0xc8]
class PetCustomizationDesc: public PetEntitlementBaseDesc
{
public:
	TArray<struct PetPartMapping>                                PetPartMapping;                                    // 0xc8(0x10)
	class                                                        RelatedPetEntitlementCategory;                     // 0xd8(0x8)
	char                                                         pad0x20_6W8TT[0x20];                               // 0xe0(0x20)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class PetEntitlementDesc: public PetEntitlementBaseDesc
{
public:
	Struct AIPartId                                              PetPartId;                                         // 0xc8(0x8)
	class                                                        RelatedPetDesc;                                    // 0xd0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LinearTransitionActionStateId: public ActionStateId
{
public:
};


// Size 0x40 (Full Size[0x8d0] - InheritedSize[0x890]
class LocationMap: public RenderToTextureMapBase
{
public:
	TArray<struct CachedRenderData>                              CachedRenderData;                                  // 0x890(0x10)
	TArray<class Class*>                                         MarkIds;                                           // 0x8a0(0x10)
	char                                                         pad0x20_JML8B[0x20];                               // 0x8b0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LocationMapCollectionInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class LocationMapParams: public DataAsset
{
public:
	TArray<struct BannerParams>                                  BannerParams;                                      // 0x28(0x10)
	class                                                        ChestMarkId;                                       // 0x38(0x8)
	float                                                        ChestScale;                                        // 0x40(0x4)
	char                                                         pad0x4_4E3H3[0x4];                                 // 0x44(0x4)
	TArray<class Class*>                                         CrossTextures;                                     // 0x48(0x10)
	float                                                        CrossScale;                                        // 0x58(0x4)
	Struct Vector2D                                              VaultSymbolCanvasOffset;                           // 0x5c(0x8)
	float                                                        VaultSymbolScale;                                  // 0x64(0x4)
};


// Size 0x38 (Full Size[0x70] - InheritedSize[0x38]
class LocationMapSettings: public DeveloperSettings
{
public:
	class                                                        LocationMapItemDescClass;                          // 0x38(0x8)
	Struct StringAssetReference                                  DefaultParams;                                     // 0x40(0x10)
	byte                                                         DefaultMapBlendMode;                               // 0x50(0x1)
	byte                                                         DefaultBannerBlendMode;                            // 0x51(0x1)
	byte                                                         DefaultVaultSymbolBlendMode;                       // 0x52(0x1)
	char                                                         pad0x5_RT1FK[0x5];                                 // 0x53(0x5)
	Struct StringAssetReference                                  DefaultChest;                                      // 0x58(0x10)
	byte                                                         DefaultChestBlendMode;                             // 0x68(0x1)
	char                                                         pad0x7_V1W4X[0x7];                                 // 0x69(0x7)
};


// Size 0x0 (Full Size[0x148] - InheritedSize[0x148]
class ObtainMapPieceOnWieldComponent: public OnItemWieldedComponent
{
public:
};


// Size 0xb0 (Full Size[0x940] - InheritedSize[0x890]
class TornMap: public RenderToTextureMapBase
{
public:
	char                                                         pad0x8_V0NMF[0x8];                                 // 0x890(0x8)
	Struct StringAssetReference                                  AltMapMarkTextureAsset;                            // 0x898(0x10)
	Class Texture*                                               AltMapMarkTexture;                                 // 0x8a8(0x8)
	float                                                        BlendSpeed;                                        // 0x8b0(0x4)
	char                                                         pad0x4_1QSLT[0x4];                                 // 0x8b4(0x4)
	TArray<struct MaskRefs>                                      MaskRefs;                                          // 0x8b8(0x10)
	TArray<struct TargetVisibility>                              TargetVisibility;                                  // 0x8c8(0x10)
	char                                                         pad0x24_5LQ0Z[0x24];                               // 0x8d8(0x24)
	float                                                        MaskRotation;                                      // 0x8fc(0x4)
	int                                                          NumPieces;                                         // 0x900(0x4)
	char                                                         pad0x4_MW1CU[0x4];                                 // 0x904(0x4)
	TArray<class Texture*>                                       MaskTextures;                                      // 0x908(0x10)
	char                                                         pad0x28_TIEW0[0x28];                               // 0x918(0x28)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TornMapCollectionInterface: public Interface
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class TornMapParams: public DataAsset
{
public:
	TArray<struct TearingParams>                                 TearingParams;                                     // 0x28(0x10)
	Struct StringAssetReference                                  MarkTexture;                                       // 0x38(0x10)
	float                                                        MarkScale;                                         // 0x48(0x4)
	char                                                         pad0x4_YYNZC[0x4];                                 // 0x4c(0x4)
};


// Size 0x28 (Full Size[0x60] - InheritedSize[0x38]
class TornMapSettings: public DeveloperSettings
{
public:
	class                                                        TornMapItemDescClass;                              // 0x38(0x8)
	Struct StringAssetReference                                  DefaultParams;                                     // 0x40(0x10)
	byte                                                         DefaultMapBlendMode;                               // 0x50(0x1)
	char                                                         pad0x3_600XY[0x3];                                 // 0x51(0x3)
	float                                                        DefaultMarkScale;                                  // 0x54(0x4)
	byte                                                         DefaultMarkBlendMode;                              // 0x58(0x1)
	char                                                         pad0x7_W98YZ[0x7];                                 // 0x59(0x7)
};


// Size 0x158 (Full Size[0x220] - InheritedSize[0xc8]
class BootyItemBuryHistoryComponent: public ActorComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class DigUpPlayerBuriedItemStatsTriggerType: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class HasBeenBuriedByAPlayerConditional: public TargetedStatCondition
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemBuriedHistoryMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerBuriedItemServiceInterface: public Interface
{
public:
};


// Size 0x30 (Full Size[0x1e8] - InheritedSize[0x1b8]
class PickupablePlayerBuriedItemMapComponent: public PickupableComponent
{
public:
};


// Size 0xc8 (Full Size[0x1f8] - InheritedSize[0x130]
class PlayerBuriedItemsMapBundleInteractionComponent: public ActionRulesInteractableComponent
{
public:
	char                                                         pad0x10_V80J5[0x10];                               // 0x130(0x10)
	Struct ActorComponentSelector                                MapBundleMesh;                                     // 0x140(0x10)
	float                                                        PickupHoldTime;                                    // 0x150(0x4)
	float                                                        CombineHoldTime;                                   // 0x154(0x4)
	float                                                        StealingHoldTime;                                  // 0x158(0x4)
	char                                                         pad0x4_1LMTQ[0x4];                                 // 0x15c(0x4)
	class                                                        HoldInputId;                                       // 0x160(0x8)
	class                                                        ReleaseInputId;                                    // 0x168(0x8)
	Class WwiseEvent*                                            StartStealingSoundEvent;                           // 0x170(0x8)
	Class WwiseEvent*                                            StopStealingSoundEvent;                            // 0x178(0x8)
	Class WwiseEvent*                                            StartStealingMusicEvent;                           // 0x180(0x8)
	Class WwiseEvent*                                            StopStealingMusicEvent;                            // 0x188(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x190(0x8)
	bool                                                         MapsAvailable;                                     // 0x198(0x1)
	char                                                         pad0x3_MKI5O[0x3];                                 // 0x199(0x3)
	Struct Guid                                                  ShipCrewId;                                        // 0x19c(0x10)
	char                                                         pad0x4c_FUER1[0x4c];                               // 0x1ac(0x4c)
};


// Size 0xf0 (Full Size[0x558] - InheritedSize[0x468]
class TavernBoard: public InteractableObject
{
public:
	char                                                         pad0x8_Z3MD4[0x8];                                 // 0x468(0x8)
	Class StaticMeshComponent*                                   Mesh;                                              // 0x470(0x8)
	Class InteractableComponent*                                 InteractionRegion;                                 // 0x478(0x8)
	Class BoxComponent*                                          ContextualTutorialOverlap;                         // 0x480(0x8)
	char                                                         pad0xd0_1HSL8[0xd0];                               // 0x488(0xd0)
};


// Size 0x78 (Full Size[0x440] - InheritedSize[0x3c8]
class PlayerBuriedItemService: public Actor
{
public:
	char                                                         pad0x10_QAX3L[0x10];                               // 0x3c8(0x10)
	TArray<class TavernBoard*>                                   RegisteredTavernBoards;                            // 0x3d8(0x10)
	TArray<struct NumMapsTakenFromStoreThisDayPerCrew>           NumMapsTakenFromStoreThisDayPerCrew;               // 0x3e8(0x10)
	Class PlayerBuriedItemServiceDataAsset*                      DataAsset;                                         // 0x3f8(0x8)
	Class PlayerBuriedItemServiceMapStorePopulator*              MapStorePopulator;                                 // 0x400(0x8)
	char                                                         pad0x38_I8748[0x38];                               // 0x408(0x38)
};


// Size 0x138 (Full Size[0x160] - InheritedSize[0x28]
class PlayerBuriedItemServiceDataAsset: public DataAsset
{
public:
	Class PopUpMessageDesc*                                      TreasureDiscoveredMessage;                         // 0x28(0x8)
	Class PopUpMessageDesc*                                      TreasureDiscoveredByYouMessage;                    // 0x30(0x8)
	Class PopUpMessageDesc*                                      TreasureRetrievedMessage;                          // 0x38(0x8)
	Class PopUpMessageDesc*                                      TreasureRetrievedByYouMessage;                     // 0x40(0x8)
	Class PopUpMessageDesc*                                      TreasureBuriedMapAddedMessage;                     // 0x48(0x8)
	float                                                        TreasureBuriedByYouMessageDelay;                   // 0x50(0x4)
	char                                                         pad0x4_U63Q8[0x4];                                 // 0x54(0x4)
	Class PopUpMessageDesc*                                      TreasureBuriedByYouMapAddedMessage;                // 0x58(0x8)
	Class PopUpMessageDesc*                                      TreasureBuriedMapUpdatedMessage;                   // 0x60(0x8)
	Class PopUpMessageDesc*                                      TreasureBuriedByYouMapUpdatedMessage;              // 0x68(0x8)
	Class PopUpMessageDesc*                                      TreasureBuriedXNotCreatedMessage;                  // 0x70(0x8)
	Class PopUpMessageDesc*                                      TreasureBuriedByYouXNotCreatedMessage;             // 0x78(0x8)
	Class PopUpMessageDesc*                                      MapGiftedMessage;                                  // 0x80(0x8)
	Class PopUpMessageDesc*                                      MapGiftedByYouMessage;                             // 0x88(0x8)
	Class PopUpMessageDesc*                                      MapGiftedToYourCrewMessage;                        // 0x90(0x8)
	Class PopUpMessageDesc*                                      MapBundleStolenVictimMessage;                      // 0x98(0x8)
	Class PopUpMessageDesc*                                      MapBundleStolenVictimWasYouMessage;                // 0xa0(0x8)
	Class PopUpMessageDesc*                                      MapBundleStolenPerpetratorMessage;                 // 0xa8(0x8)
	Class PopUpMessageDesc*                                      MapBundleStolenPerpetratorWasYouMessage;           // 0xb0(0x8)
	Class PopUpMessageDesc*                                      MapBundlePlacedOnTableMessage;                     // 0xb8(0x8)
	Class PopUpMessageDesc*                                      MapBundleRetrievedMessage;                         // 0xc0(0x8)
	Class PopUpMessageDesc*                                      MapBundleWasSpawnedInSunkenShip;                   // 0xc8(0x8)
	Class PopUpMessageDesc*                                      MapWasAddedToTavernBoard;                          // 0xd0(0x8)
	Class PopUpMessageDesc*                                      MapWasTakenFromTavernBoard;                        // 0xd8(0x8)
	TArray<Byte PrioritiseUseRewardIdAsPopup>                    PrioritiseUseRewardIdAsPopup;                      // 0xe0(0x10)
	class                                                        PlayerBuriedItemMapItemDesc;                       // 0xf0(0x8)
	class                                                        PlayerBuriedItemMapBundleItemDesc;                 // 0xf8(0x8)
	float                                                        ItemDigUpRadius;                                   // 0x100(0x4)
	char                                                         pad0x4_X4A2T[0x4];                                 // 0x104(0x4)
	TArray<struct ItemDigUpRadiusSurfaceOverride>                ItemDigUpRadiusSurfaceOverride;                    // 0x108(0x10)
	float                                                        IsUndergroundLineTraceLength;                      // 0x118(0x4)
	byte                                                         IsUndergroundLineTraceChannel;                     // 0x11c(0x1)
	char                                                         pad0x3_F1WP8[0x3];                                 // 0x11d(0x3)
	TArray<Byte IgnoreSurfaceTypes>                              IgnoreSurfaceTypes;                                // 0x120(0x10)
	int                                                          NumXsDonationCommendationThreshold;                // 0x130(0x4)
	int                                                          DailyMapLimit;                                     // 0x134(0x4)
	Class PlayerBuriedItemServiceMapStorePopulatorDataAsset*     MapStorePopulatorDataAsset;                        // 0x138(0x8)
	Class PlayerBuriedItemServiceHaulSizeDataAsset*              HaulSizeDataAsset;                                 // 0x140(0x8)
	float                                                        ServerShutdownCompensationRewardScalar;            // 0x148(0x4)
	float                                                        MapBundleLostByAnotherCrewCompensationRewardScalar; // 0x14c(0x4)
	float                                                        SendRewardCompensationForItemsSecondsBeforeShutdown; // 0x150(0x4)
	int                                                          NumItemsRequiredOnMapForHoardStat;                 // 0x154(0x4)
	float                                                        LineTraceHalfLength;                               // 0x158(0x4)
	byte                                                         HitTestTraceChannel;                               // 0x15c(0x1)
	char                                                         pad0x3_OLB18[0x3];                                 // 0x15d(0x3)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class PlayerBuriedItemServiceHaulSizeDataAsset: public DataAsset
{
public:
	TArray<struct HaulSizes>                                     HaulSizes;                                         // 0x28(0x10)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class PlayerBuriedItemServiceMapStorePopulator: public Object
{
public:
	Class PlayerBuriedItemServiceMapStorePopulatorDataAsset*     DataAsset;                                         // 0x28(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class PlayerBuriedItemServiceMapStorePopulatorDataAsset: public DataAsset
{
public:
	int                                                          MinNumberMapsPerSeaRegion;                         // 0x28(0x4)
	float                                                        MinSeparationBetweenXs;                            // 0x2c(0x4)
	TArray<struct SeaRegions>                                    SeaRegions;                                        // 0x30(0x10)
};


// Size 0x0 (Full Size[0x510] - InheritedSize[0x510]
class PlayerBuriedItemsMapBundleItemInfo: public NonStorableItemInfo
{
public:
};


// Size 0x0 (Full Size[0x7e8] - InheritedSize[0x7e8]
class PlayerBuriedItemsMapBundleItemProxy: public FloatingItemProxy
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class PlayerGeneratedMapsContainerComponentDataAsset: public DataAsset
{
public:
	TArray<struct WorldRegionMappings>                           WorldRegionMappings;                               // 0x28(0x10)
	TArray<struct FName>                                         IslandsToExcludeFromTavernBoardDisplay;            // 0x38(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayerGeneratedMapsContainerInterface: public Interface
{
public:
};


// Size 0x158 (Full Size[0x220] - InheritedSize[0xc8]
class PlayerGeneratedMapsContainerComponent: public ActorComponent
{
public:
	char                                                         pad0x8_IAP1D[0x8];                                 // 0xc8(0x8)
	Struct FText                                                 ContainerDisplayName;                              // 0xd0(0x38)
	char                                                         pad0x8_7QDAE[0x8];                                 // 0x108(0x8)
	Struct Transform                                             InstanceTransform;                                 // 0x110(0x30)
	class                                                        MapDesc;                                           // 0x140(0x8)
	Class PlayerGeneratedMapsContainerComponentDataAsset*        ContainerDataAsset;                                // 0x148(0x8)
	TArray<struct PlayerMapInventory>                            PlayerMapInventory;                                // 0x150(0x10)
	TArray<struct StoreMapInventory>                             StoreMapInventory;                                 // 0x160(0x10)
	Class WwiseEvent*                                            AddMapSFX;                                         // 0x170(0x8)
	Class WwiseEvent*                                            TakeMapSFX;                                        // 0x178(0x8)
	Class WwiseEvent*                                            OpenContainerSFX;                                  // 0x180(0x8)
	int                                                          MaxNumStoreMapsToReplicate;                        // 0x188(0x4)
	int                                                          MaxNumPlayerMapsToReplicate;                       // 0x18c(0x4)
	int                                                          DailyMapLimit;                                     // 0x190(0x4)
	char                                                         pad0x4_0YIJQ[0x4];                                 // 0x194(0x4)
	Struct StringAssetReference                                  MapTakenBackgroundImage;                           // 0x198(0x10)
	TArray<struct MapTakenImages>                                MapTakenImages;                                    // 0x1a8(0x10)
	TArray<class Actor*>                                         ServerAttachedPlayers;                             // 0x1b8(0x10)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x1c8(0x8)
	char                                                         pad0x50_F6HKG[0x50];                               // 0x1d0(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersBountyWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ReapersChestWorldMarkerVariant: public WorldMarkerVariant
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class WorldMarkerOnDigPositionComponent: public ActorComponent
{
public:
	class                                                        MarkerVariant;                                     // 0xc8(0x8)
};


// Size 0x10 (Full Size[0xd8] - InheritedSize[0xc8]
class WorldMarkerOnSpawnPositionComponent: public ActorComponent
{
public:
	float                                                        ZOffset;                                           // 0xc8(0x4)
	char                                                         pad0x4_DPYWU[0x4];                                 // 0xcc(0x4)
	class                                                        MarkerVariant;                                     // 0xd0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EventFortInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class EventFortKeyInterface: public Interface
{
public:
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class EventFortTelemetryComponent: public ActorComponent
{
public:
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class FortAIToggler: public Object
{
public:
	char                                                         pad0x40_WE6KR[0x40];                               // 0x28(0x40)
	TArray<struct FortUnits>                                     FortUnits;                                         // 0x68(0x10)
	Class Object*                                                WorldContext;                                      // 0x78(0x8)
};


// Size 0x8 (Full Size[0x3d0] - InheritedSize[0x3c8]
class FortFlag: public Actor
{
public:
	Class StaticMeshComponent*                                   StaticMeshComponent;                               // 0x3c8(0x8)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class LockStat_LockOpened: public UnlockLockConditionalStatTrigger
{
public:
};


// Size 0x60 (Full Size[0x428] - InheritedSize[0x3c8]
class SeaFortCannonsMechanismTrigger: public Actor
{
public:
	Class SceneComponent*                                        Root;                                              // 0x3c8(0x8)
	Class MechanismTriggerComponent*                             MechanismTriggerComponent;                         // 0x3d0(0x8)
	float                                                        InnerRadius;                                       // 0x3d8(0x4)
	float                                                        OuterRadius;                                       // 0x3dc(0x4)
	bool                                                         EnableReactivationTimeLimit;                       // 0x3e0(0x1)
	char                                                         pad0x3_JOOJX[0x3];                                 // 0x3e1(0x3)
	float                                                        ReactivationTimeLimitMinutes;                      // 0x3e4(0x4)
	char                                                         pad0x40_LLLH3[0x40];                               // 0x3e8(0x40)
};


// Size 0x58 (Full Size[0x108] - InheritedSize[0xb0]
class SeaFortDataAsset: public FortDataAsset
{
public:
	Class WeightedItemDescSpawnDataAsset*                        LootToSpawn;                                       // 0xb0(0x8)
	Class AIBountySpawner*                                       OnePlayerCrewBountySpawner;                        // 0xb8(0x8)
	Class AIBountySpawner*                                       TwoPlayerCrewBountySpawner;                        // 0xc0(0x8)
	Class AIBountySpawner*                                       ThreePlayerCrewBountySpawner;                      // 0xc8(0x8)
	Class AIBountySpawner*                                       FourPlayerCrewBountySpawner;                       // 0xd0(0x8)
	Class WwiseEvent*                                            WarningBellStartEvent;                             // 0xd8(0x8)
	Class WwiseEvent*                                            WarningBellStopEvent;                              // 0xe0(0x8)
	Class WwiseObjectPoolWrapper*                                WarningBellEmitterPool;                            // 0xe8(0x8)
	float                                                        WarningBellDuration;                               // 0xf0(0x4)
	float                                                        WarningBellCooldownDuration;                       // 0xf4(0x4)
	float                                                        SightingDistance;                                  // 0xf8(0x4)
	float                                                        EncounterDistance;                                 // 0xfc(0x4)
	bool                                                         FireEmissaryStatsOnFinish;                         // 0x100(0x1)
	char                                                         pad0x7_TEVHL[0x7];                                 // 0x101(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortsServiceInterface: public Interface
{
public:
};


// Size 0x4d8 (Full Size[0x9f8] - InheritedSize[0x520]
class Seafort: public IslandData
{
public:
	char                                                         pad0x28_S8CXV[0x28];                               // 0x520(0x28)
	byte                                                         PreviousSeaFortAlignmentState;                     // 0x548(0x1)
	byte                                                         CurrentSeaFortAlignmentState;                      // 0x549(0x1)
	char                                                         pad0x6_55H3S[0x6];                                 // 0x54a(0x6)
	float                                                        ServerMigrationExclusionRadius;                    // 0x570(0x4)
	char                                                         pad0x4_0CCK1[0x4];                                 // 0x574(0x4)
	TArray<struct WaveSpawnerLocations>                          WaveSpawnerLocations;                              // 0x578(0x10)
	Class AIBountySpawner*                                       Spawner;                                           // 0x588(0x8)
	Class SeaFortDataAsset*                                      FortData;                                          // 0x590(0x8)
	Class FortFlag*                                              Flag;                                              // 0x598(0x8)
	Class Actor*                                                 AlignmentFlagPole;                                 // 0x5a0(0x8)
	Class SeaFortAddOnComponent*                                 SeaFortAddOnComponent;                             // 0x5a8(0x8)
	Class SeaFortStateComponent*                                 SeaFortStateComponent;                             // 0x5b0(0x8)
	Class Actor*                                                 SeaFortCannonsMechanismAction;                     // 0x5b8(0x8)
	Class SeaFortCannonsMechanismTrigger*                        CannonsMechanismTrigger;                           // 0x5c0(0x8)
	Class OverlapTriggerComponent*                               ActionAudioZoneComponent;                          // 0x5c8(0x8)
	Class OverlapTriggerComponent*                               AnticipationAudioZoneComponent;                    // 0x5d0(0x8)
	Struct Vector                                                BellEmitterOffset;                                 // 0x5d8(0xc)
	char                                                         pad0x4_7JOYL[0x4];                                 // 0x5e4(0x4)
	Class OneShotAnimatedMechanismAction*                        TreasuryDoor;                                      // 0x5e8(0x8)
	Class OneShotAnimatedMechanismAction*                        StoreroomDoor;                                     // 0x5f0(0x8)
	Class PopUpMessageDesc*                                      KeyDiscoveredPopUpDesc;                            // 0x5f8(0x8)
	Class PopUpMessageDesc*                                      KeyHandInHintPopUpDesc;                            // 0x600(0x8)
	Struct EncounterParams                                       SightingEncounterParams;                           // 0x608(0xc)
	Struct EncounterParams                                       CloseEncounterParams;                              // 0x614(0xc)
	Class SeaFortTelemetryComponent*                             TelemetryComponent;                                // 0x620(0x8)
	Struct FString                                               SubjectName;                                       // 0x628(0x10)
	Class WwiseEvent*                                            WaveGroupSpawnedEvent;                             // 0x638(0x8)
	Class WwiseEvent*                                            FinalWaveGroupSpawnedEvent;                        // 0x640(0x8)
	Class WwiseEvent*                                            FortCompleteEvent;                                 // 0x648(0x8)
	Struct WwiseEmitter                                          SeaFortEmitter;                                    // 0x650(0x20)
	char                                                         pad0x178_7II0M[0x178];                             // 0x670(0x178)
	Struct PlayerStat                                            StatToFireOnFortComplete;                          // 0x7e8(0x4)
	char                                                         pad0x10c_4IOD5[0x10c];                             // 0x7ec(0x10c)
	TArray<class ItemSpawnComponent*>                            Rewards;                                           // 0x8f8(0x10)
	Class FortAIToggler*                                         AIToggler;                                         // 0x908(0x8)
	TArray<struct SpawnedAdditionalCaptainsData>                 SpawnedAdditionalCaptainsData;                     // 0x910(0x10)
	Class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x920(0x8)
	char                                                         pad0x28_68VW5[0x28];                               // 0x928(0x28)
	Class LockComponent*                                         TreasuryLock;                                      // 0x950(0x8)
	Class LockComponent*                                         StoreroomLock;                                     // 0x958(0x8)
	byte                                                         CurrentSeaFortState;                               // 0x960(0x1)
	char                                                         pad0x97_W1CFJ[0x97];                               // 0x961(0x97)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class SeaFortAddOnAISpawnDataAsset: public DataAsset
{
public:
	Struct FText                                                 SpawnedAITargetName;                               // 0x28(0x38)
	Class AIBountySpawner*                                       AIBountySpawner;                                   // 0x60(0x8)
	TArray<struct AIBountySpawnerLocations>                      AIBountySpawnerLocations;                          // 0x68(0x10)
};


// Size 0x1a8 (Full Size[0x270] - InheritedSize[0xc8]
class SeaFortAddOnComponent: public ActorComponent
{
public:
	Class SeaFortAddOnAISpawnDataAsset*                          AISpawnDataAsset;                                  // 0xc8(0x8)
	Class AIBountySpawner*                                       AIBountySpawner;                                   // 0xd0(0x8)
	Struct StringAssetReference                                  SeaFortAddOnDataStringAssetReference;              // 0xd8(0x10)
	Class Actor*                                                 SpawnedItem;                                       // 0xe8(0x8)
	Class OneShotAnimatedMechanismAction*                        PrisonerCellDoor;                                  // 0xf0(0x8)
	Class Actor*                                                 RitualCandle;                                      // 0xf8(0x8)
	char                                                         pad0x160_15B3E[0x160];                             // 0x100(0x160)
	Class LockComponent*                                         PrisonerLockComponent;                             // 0x260(0x8)
	bool                                                         IsCandleVfxActive;                                 // 0x268(0x1)
	char                                                         pad0x7_C27CD[0x7];                                 // 0x269(0x7)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SeaFortAddOnDataAsset: public DataAsset
{
public:
	TArray<struct PrisonerSpawnTransformToPositionMappings>      PrisonerSpawnTransformToPositionMappings;          // 0x28(0x10)
};


// Size 0x20 (Full Size[0x58] - InheritedSize[0x38]
class SeaFortAddOnSettings: public DeveloperSettings
{
public:
	Struct StringAssetReference                                  SeaFortAddOnSharedDataAsset;                       // 0x38(0x10)
	Struct StringAssetReference                                  SeaFortAddOnSharedDataAssetClient;                 // 0x48(0x10)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class SeaFortAddOnSharedDataAsset: public DataAsset
{
public:
	TArray<struct SpawnablePrisonerToPositionMappings>           SpawnablePrisonerToPositionMappings;               // 0x28(0x10)
	class                                                        ItemToSpawn;                                       // 0x38(0x8)
	Struct Vector                                                ItemSpawnRelativeLocation;                         // 0x40(0xc)
	char                                                         pad0x4_JRL6G[0x4];                                 // 0x4c(0x4)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class SeaFortAddOnSharedDataAssetClient: public DataAsset
{
public:
	class                                                        GhostShipToSpawn;                                  // 0x28(0x8)
	TArray<struct GhostShipSpawnRelativeTransforms>              GhostShipSpawnRelativeTransforms;                  // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortAlignmentFeatureInterface: public Interface
{
public:
};


// Size 0x1e8 (Full Size[0x5b0] - InheritedSize[0x3c8]
class SeaFortAlignmentFlagPole: public Actor
{
public:
	char                                                         pad0x10_YTMKG[0x10];                               // 0x3c8(0x10)
	Class SceneComponent*                                        ActorRoot;                                         // 0x3d8(0x8)
	Class StaticMeshComponent*                                   FlagPoleMesh;                                      // 0x3e0(0x8)
	Class StaticMeshComponent*                                   FlagMesh;                                          // 0x3e8(0x8)
	Class InteractableComponentWithActionRules*                  FlagPoleInteractableComponent;                     // 0x3f0(0x8)
	Struct AlignmentFlagMeshParams                               AlignmentFlagMeshParams;                           // 0x3f8(0x40)
	Struct AlignmentFlagActionRuleParams                         AlignmentFlagActionRuleParams;                     // 0x438(0x18)
	Struct AlignmentWorldMarkerParams                            AlignmentWorldMarkerParams;                        // 0x450(0x20)
	Struct SeaFortAlignmentFlagPoleAudioParams                   FlagPoleAudioParams;                               // 0x470(0x70)
	char                                                         pad0x18_EHZXX[0x18];                               // 0x4e0(0x18)
	byte                                                         FlagAlignment;                                     // 0x4f8(0x1)
	bool                                                         AreAllFortEnemiesDefeated;                         // 0x4f9(0x1)
	char                                                         pad0xb6_3W70S[0xb6];                               // 0x4fa(0xb6)
};


// Size 0x138 (Full Size[0x500] - InheritedSize[0x3c8]
class SeaFortAlignmentTable: public Actor
{
public:
	Class SceneComponent*                                        ActorRoot;                                         // 0x3c8(0x8)
	Class StaticMeshComponent*                                   TableMesh;                                         // 0x3d0(0x8)
	Class SeaFortAlignmentTableModelComponent*                   Fort1Mesh;                                         // 0x3d8(0x8)
	Class SeaFortAlignmentTableModelComponent*                   Fort2Mesh;                                         // 0x3e0(0x8)
	Class SeaFortAlignmentTableModelComponent*                   Fort3Mesh;                                         // 0x3e8(0x8)
	Class SeaFortAlignmentTableModelComponent*                   Fort4Mesh;                                         // 0x3f0(0x8)
	Class SeaFortAlignmentTableModelComponent*                   Fort5Mesh;                                         // 0x3f8(0x8)
	Class SeaFortAlignmentTableModelComponent*                   Fort6Mesh;                                         // 0x400(0x8)
	Class ParticleSystemComponent*                               FlameParticleComponent;                            // 0x408(0x8)
	Class Object*                                                SmallFlareParticleSystem;                          // 0x410(0x8)
	Class Object*                                                MediumFlareParticleSystem;                         // 0x418(0x8)
	Class Object*                                                LargeFlareParticleSystem;                          // 0x420(0x8)
	Struct Vector                                                FlareVFXSpawnLocation;                             // 0x428(0xc)
	char                                                         pad0x4_3GJ0M[0x4];                                 // 0x434(0x4)
	Class WwiseObjectPoolWrapper*                                WwisePool;                                         // 0x438(0x8)
	struct FName                                                 WwiseEmitterName;                                  // 0x440(0x8)
	Class WwiseEvent*                                            PlayFlameAudioLoopEvent;                           // 0x448(0x8)
	Class WwiseEvent*                                            StopFlameAudioLoopEvent;                           // 0x450(0x8)
	Class WwiseEvent*                                            PlaySmallFlareAudioEvent;                          // 0x458(0x8)
	Class WwiseEvent*                                            PlayMediumFlareAudioEvent;                         // 0x460(0x8)
	Class WwiseEvent*                                            PlayLargeFlareAudioEvent;                          // 0x468(0x8)
	char                                                         pad0x20_HFRXS[0x20];                               // 0x470(0x20)
	byte                                                         TableAlignment;                                    // 0x490(0x1)
	char                                                         pad0x7_TOIW6[0x7];                                 // 0x491(0x7)
	Struct SeaFortAlignmentTableModelCosmeticDefaults            ModelCosmeticDefaults;                             // 0x498(0x10)
	TArray<struct ReplicatedSeaFortAlignmentData>                ReplicatedSeaFortAlignmentData;                    // 0x4a8(0x10)
	byte                                                         ReplicatedAlignmentTableFlameSize;                 // 0x4b8(0x1)
	char                                                         pad0x3_MP2JP[0x3];                                 // 0x4b9(0x3)
	float                                                        SmallFlameParameterValue;                          // 0x4bc(0x4)
	float                                                        MediumFlameParameterValue;                         // 0x4c0(0x4)
	float                                                        LargeFlameParameterValue;                          // 0x4c4(0x4)
	TArray<class SeaFortAlignmentTableModelComponent*>           FortMeshes;                                        // 0x4c8(0x10)
	char                                                         pad0x28_OEAEY[0x28];                               // 0x4d8(0x28)
};


// Size 0xf0 (Full Size[0x710] - InheritedSize[0x620]
class SeaFortAlignmentTableModelComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_PDHWA[0x8];                                 // 0x620(0x8)
	byte                                                         IslandType;                                        // 0x628(0x1)
	char                                                         pad0x7_LNO95[0x7];                                 // 0x629(0x7)
	Struct FlagAlignmentCosmetic                                 AlignmentCosmetic;                                 // 0x630(0x28)
	char                                                         pad0xb8_JAH2D[0xb8];                               // 0x658(0xb8)
};


// Size 0x0 (Full Size[0x3c8] - InheritedSize[0x3c8]
class SeaFortDistantLights: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortGameEventType: public GameEventType
{
public:
};


// Size 0x18 (Full Size[0x750] - InheritedSize[0x738]
class SeaFortKeyItemInfo: public TreasureChestItemInfo
{
public:
};


// Size 0x1e8 (Full Size[0x5b0] - InheritedSize[0x3c8]
class SeaFortsService: public Actor
{
public:
	char                                                         pad0x10_CJMA0[0x10];                               // 0x3c8(0x10)
	Struct SeaFortDistantLightsAssetLoader                       DistantLightsAssetLoader;                          // 0x3d8(0x28)
	TArray<struct ReplicatedDistantLightsSignals>                ReplicatedDistantLightsSignals;                    // 0x400(0x10)
	Class SeaFortsWorldDataAsset*                                SeaFortsData;                                      // 0x460(0x8)
	TArray<class Seafort*>                                       SeaForts;                                          // 0x468(0x10)
	char                                                         pad0x138_SNRCJ[0x138];                             // 0x478(0x138)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class SeaFortStateBase: public Object
{
public:
	char                                                         pad0x10_GYGW5[0x10];                               // 0x28(0x10)
	Class World*                                                 World;                                             // 0x38(0x8)
	char                                                         pad0x8_UTH12[0x8];                                 // 0x40(0x8)
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class SeaFortState_AdventureAlignment: public SeaFortStateBase
{
public:
	Struct AdventureFortAllignmentState                          BelleAlignment;                                    // 0x48(0x8)
	Struct AdventureFortAllignmentState                          SotFAlignment;                                     // 0x50(0x8)
	Class SeaFortDataAsset*                                      CachedOriginalFortData;                            // 0x58(0x8)
	char                                                         pad0x18_9TUG6[0x18];                               // 0x60(0x18)
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class SeaFortStateComponent: public ActorComponent
{
public:
	TArray<class SeaFortStateBase*>                              States;                                            // 0xc8(0x10)
	TArray<class SeaFortStateBase*>                              ActiveStates;                                      // 0xd8(0x10)
	Class Seafort*                                               OwningFort;                                        // 0xe8(0x8)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class SeaFortsWorldDataAsset: public DataAsset
{
public:
	TArray<Assetclass SeaForts>                                  SeaForts;                                          // 0x28(0x10)
	int                                                          MaxActiveForts;                                    // 0x58(0x4)
	float                                                        ActivationMinDistanceFromPlayer;                   // 0x5c(0x4)
	float                                                        RandomActivationTimeMin;                           // 0x60(0x4)
	float                                                        RandomActivationTimeMax;                           // 0x64(0x4)
	float                                                        CrewVacantGracePeriod;                             // 0x68(0x4)
	float                                                        SeaFortAlignmentReset;                             // 0x6c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaFortsWorldDataInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x148] - InheritedSize[0x148]
class SeaFortTelemetryComponent: public EventFortTelemetryComponent
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class UnlockedSeaFortConditionalStatTrigger: public ConditionalStatsTriggerType
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPersistenceComponentProviderInterface: public Interface
{
public:
};


// Size 0x180 (Full Size[0x248] - InheritedSize[0xc8]
class ShipPersistenceComponent: public ActorComponent
{
public:
	char                                                         pad0x8_LH2GO[0x8];                                 // 0xc8(0x8)
	Class PersistenceIdentifierSettingsAsset*                    PersistenceIdentifierSettingsAsset;                // 0xd0(0x8)
	Struct ShipCaptainedSessionData                              CaptaincyData;                                     // 0xd8(0x58)
	Struct Guid                                                  ReplicatedCrewId;                                  // 0x130(0x10)
	Struct ShipPersistenceModel                                  ShipModel;                                         // 0x140(0x50)
	Struct ShipLoadoutPersistenceModel                           ShipLoadoutModel;                                  // 0x190(0x40)
	byte                                                         LoadoutPersistence;                                // 0x1d0(0x1)
	char                                                         pad0x77_U6UVQ[0x77];                               // 0x1d1(0x77)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipPersistenceLocatorInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipRowboatPersistenceInterface: public PersistenceInterface
{
public:
};


// Size 0x98 (Full Size[0x160] - InheritedSize[0xc8]
class ShipRowboatPersistenceComponent: public ActorComponent
{
public:
	char                                                         pad0x8_ULBYB[0x8];                                 // 0xc8(0x8)
	Struct Transform                                             RelativeOffsetFromMountpointToSpawnRowboatUnobstructed; // 0xd0(0x30)
	TArray<class Class*>                                         CachedRowboatTypeEntitlements;                     // 0x100(0x10)
	char                                                         pad0x50_9J7VS[0x50];                               // 0x110(0x50)
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AnimNotifyStateWieldableBookRenderingModeRequest: public AnimNotifyState
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class AnimNotifyStateWieldableBookLeftSpreadCurrentRightSpreadNext: public AnimNotifyStateWieldableBookRenderingModeRequest
{
public:
};


// Size 0x0 (Full Size[0x78] - InheritedSize[0x78]
class AnimNotifyStateWieldableBookLeftSpreadPreviousRightSpreadCurrent: public AnimNotifyStateWieldableBookRenderingModeRequest
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotifyWieldableBookForcePageRedraw: public AnimNotify
{
public:
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class LookingAtWieldableBookInputComponent: public LookingAtWieldableInputComponent
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WieldableBookPageLayout: public DataAsset
{
public:
	TArray<struct Images>                                        Images;                                            // 0x28(0x10)
	TArray<struct GeneralText>                                   GeneralText;                                       // 0x38(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class WieldableBookRendererSettings: public DataAsset
{
public:
	Class Font*                                                  Font;                                              // 0x28(0x8)
	float                                                        FontScale;                                         // 0x30(0x4)
	float                                                        FontMaxScale;                                      // 0x34(0x4)
	float                                                        FontLineSpacingScale;                              // 0x38(0x4)
	char                                                         pad0x4_YTCWV[0x4];                                 // 0x3c(0x4)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WieldableBookPageList: public DataAsset
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x28(0x10)
	TArray<struct InitialPages>                                  InitialPages;                                      // 0x38(0x10)
};


// Size 0x3f0 (Full Size[0xbd0] - InheritedSize[0x7e0]
class WieldableBook: public SkeletalMeshWieldableItem
{
public:
	char                                                         pad0x60_RNXJQ[0x60];                               // 0x7e0(0x60)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x840(0x8)
	Struct WieldableBookMaterialHandler                          MaterialHandler;                                   // 0x848(0x188)
	Class WieldableBookRendererSettings*                         RendererSettings;                                  // 0x9d0(0x8)
	Class DirectionalLightComponent*                             DirectionalLightComponent;                         // 0x9d8(0x8)
	bool                                                         BuildProceduralPageCacheOnRep;                     // 0x9e0(0x1)
	char                                                         pad0x3_NBZ0J[0x3];                                 // 0x9e1(0x3)
	float                                                        ShadowCascadeDistributionExponentWhenUsing;        // 0x9e4(0x4)
	float                                                        ShadowCascadeDistributionExponentTransitionTime;   // 0x9e8(0x4)
	float                                                        ExtraPageTurnDurationForForceRedraw;               // 0x9ec(0x4)
	bool                                                         ShouldAlterAudio;                                  // 0x9f0(0x1)
	char                                                         pad0x3_4EWF5[0x3];                                 // 0x9f1(0x3)
	struct FName                                                 AudioGameStateGroup;                               // 0x9f4(0x8)
	struct FName                                                 AudioGameStateIngame;                              // 0x9fc(0x8)
	struct FName                                                 AudioGameStateInBook;                              // 0xa04(0x8)
	float                                                        PageTurnDuration;                                  // 0xa0c(0x4)
	float                                                        PageTurnForceRedrawDuration;                       // 0xa10(0x4)
	char                                                         pad0x4_PEJ41[0x4];                                 // 0xa14(0x4)
	Class PostProcessComponent*                                  CachedPostProcessComponent;                        // 0xa18(0x8)
	Class MaterialInterface*                                     WieldedPostProcessMaterial;                        // 0xa20(0x8)
	Class MaterialInstanceDynamic*                               WieldedPostProcessMaterialInstance;                // 0xa28(0x8)
	float                                                        WieldedPostProcessStartBlend;                      // 0xa30(0x4)
	float                                                        WieldedPostProcessEndBlend;                        // 0xa34(0x4)
	float                                                        WieldedPostProcessDuration;                        // 0xa38(0x4)
	bool                                                         WieldedPostProcessShouldIgnoreMesh;                // 0xa3c(0x1)
	char                                                         pad0x3_90WO2[0x3];                                 // 0xa3d(0x3)
	struct FName                                                 WieldedTimedBlendVectorName;                       // 0xa40(0x8)
	Struct WieldableBookRepInfo                                  ReplicationInfo;                                   // 0xa48(0x28)
	Class WieldableBookPageList*                                 PageList;                                          // 0xa70(0x8)
	char                                                         pad0x158_JQP5Z[0x158];                             // 0xa78(0x158)
};


// Size 0x0 (Full Size[0xbd0] - InheritedSize[0xbd0]
class DebugRenderWieldableBook: public WieldableBook
{
public:
};


// Size 0x10 (Full Size[0x670] - InheritedSize[0x660]
class WieldableBookAnimationInstance: public WieldableItemAnimationInstance
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WieldableBookBlueprintLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x120] - InheritedSize[0x120]
class WieldableBookItemDesc: public BootyItemDesc
{
public:
};


// Size 0x0 (Full Size[0x728] - InheritedSize[0x728]
class WieldableBookItemInfo: public BootyItemInfo
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WieldableBookPageBundle: public DataAsset
{
public:
	TArray<struct Pages>                                         Pages;                                             // 0x28(0x10)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WieldableBookDoublePageLayout: public WieldableBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class WieldableBookSinglePageLayout: public WieldableBookPageLayout
{
public:
};


// Size 0x0 (Full Size[0x808] - InheritedSize[0x808]
class WieldableBookProxy: public StaticSimpleBootyItemProxy
{
public:
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class CaptainsLogbookAccoladeDefinitionsAsset: public DataAsset
{
public:
	Struct CaptainsLogbookAccoladeDefinition                     DefaultDefinition;                                 // 0x28(0x18)
	TArray<struct Definitions>                                   Definitions;                                       // 0x40(0x10)
};


// Size 0x58 (Full Size[0x80] - InheritedSize[0x28]
class CaptainsLogbookAccoladeLocalisedTextDefinitionAsset: public DataAsset
{
public:
	Struct CaptainsLogbookAccoladeLocalisedTextDefinition        DefaultDefinition;                                 // 0x28(0x48)
	TArray<struct Definitions>                                   Definitions;                                       // 0x70(0x10)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class CaptainsLogbookActivityIconsAsset: public DataAsset
{
public:
	Class Texture*                                               DefaultImage;                                      // 0x28(0x8)
	TArray<struct Icons>                                         Icons;                                             // 0x30(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CustomizableCaptainsLogbookInterface: public Interface
{
public:
};


// Size 0x268 (Full Size[0x778] - InheritedSize[0x510]
class CaptainsLogbookInteractableProxy: public ControllableObject
{
public:
	char                                                         pad0x8_TJRQU[0x8];                                 // 0x510(0x8)
	Class StaticMeshMemoryConstraintComponent*                   BookMeshComponent;                                 // 0x518(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x520(0x8)
	class                                                        InteractionInput;                                  // 0x528(0x8)
	class                                                        ReleaseHeldInteractionInput;                       // 0x530(0x8)
	float                                                        HoldDuration;                                      // 0x538(0x4)
	bool                                                         IsEnabled;                                         // 0x53c(0x1)
	bool                                                         IsVisible;                                         // 0x53d(0x1)
	char                                                         pad0x2_Z37ED[0x2];                                 // 0x53e(0x2)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x540(0x8)
	Struct PartDesc                                              DefaultCustomization;                              // 0x568(0x20)
	char                                                         pad0x1e0_SVJER[0x1e0];                             // 0x588(0x1e0)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x768(0x8)
	char                                                         pad0x8_2LNTJ[0x8];                                 // 0x770(0x8)
};


// Size 0x40 (Full Size[0x848] - InheritedSize[0x808]
class CaptainsLogbookProxy: public WieldableBookProxy
{
public:
	char                                                         pad0x8_4689E[0x8];                                 // 0x808(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0x810(0x8)
	int                                                          DaysSinceLastSunk;                                 // 0x818(0x4)
	char                                                         pad0x4_IK3V8[0x4];                                 // 0x81c(0x4)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0x820(0x8)
	char                                                         pad0x20_R3QEP[0x20];                               // 0x828(0x20)
};


// Size 0x130 (Full Size[0xd00] - InheritedSize[0xbd0]
class CaptainsLogbookWieldable: public WieldableBook
{
public:
	Class WieldableBookPageLayout*                               LeftLogbookPageTemplate;                           // 0xbd0(0x8)
	Class WieldableBookPageLayout*                               RightLogbookPageTemplate;                          // 0xbd8(0x8)
	Class CaptainsLogbookActivityIconsAsset*                     ActivityIconsAsset;                                // 0xbe0(0x8)
	Class CaptainsLogbookAccoladeDefinitionsAsset*               AccoladeDefinitionsAsset;                          // 0xbe8(0x8)
	Class CaptainsLogbookAccoladeLocalisedTextDefinitionAsset*   AccoladeLocalisedTextDefinitionAsset;              // 0xbf0(0x8)
	Class ReplicatedShipPartCustomizationComponent*              CustomizationComponent;                            // 0xbf8(0x8)
	Struct CaptainsLogbookServiceCache                           ServiceCache;                                      // 0xc00(0x90)
	Class MemoryConstrainedMeshInitializer*                      MMCMeshInitializer;                                // 0xc90(0x8)
	TArray<struct ClientEventLogPages>                           ClientEventLogPages;                               // 0xc98(0x10)
	char                                                         pad0x48_UTIUX[0x48];                               // 0xca8(0x48)
	bool                                                         IsWaterlogged;                                     // 0xcf0(0x1)
	char                                                         pad0xf_L7IH2[0xf];                                 // 0xcf1(0xf)
};


// Size 0x10 (Full Size[0xd10] - InheritedSize[0xd00]
class CaptainsLogbookInteractable: public CaptainsLogbookWieldable
{
public:
};


// Size 0x0 (Full Size[0xd00] - InheritedSize[0xd00]
class DebugRenderCaptainsLogbook: public CaptainsLogbookWieldable
{
public:
};


// Size 0x8 (Full Size[0x50] - InheritedSize[0x48]
class CaptainsLogDynamicDoublePageLayout: public WieldableBookDoublePageLayout
{
public:
	byte                                                         PageType;                                          // 0x48(0x1)
	char                                                         pad0x3_ZA3SA[0x3];                                 // 0x49(0x3)
	int                                                          PageSetIndex;                                      // 0x4c(0x4)
};


// Size 0x8 (Full Size[0x50] - InheritedSize[0x48]
class CaptainsLogDynamicSinglePageLayout: public WieldableBookSinglePageLayout
{
public:
	byte                                                         PageType;                                          // 0x48(0x1)
	char                                                         pad0x3_PL3Y4[0x3];                                 // 0x49(0x3)
	int                                                          PageSetIndex;                                      // 0x4c(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class CaptainsLogInteractableActionStateId: public ActionStateId
{
public:
};


// Size 0x8 (Full Size[0x2a0] - InheritedSize[0x298]
class CaptainsLogInteractableInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x48 (Full Size[0x168] - InheritedSize[0x120]
class CaptainsLogItemDesc: public WieldableBookItemDesc
{
public:
	Class WieldableBookPageList*                                 SmallShipPageList;                                 // 0x120(0x8)
	Class WieldableBookPageList*                                 MediumShipPageList;                                // 0x128(0x8)
	Class WieldableBookPageList*                                 LargeShipPageList;                                 // 0x130(0x8)
	Class WieldableBookPageList*                                 SmallGuildShipPageList;                            // 0x138(0x8)
	Class WieldableBookPageList*                                 MediumGuildShipPageList;                           // 0x140(0x8)
	Class WieldableBookPageList*                                 LargeGuildShipPageList;                            // 0x148(0x8)
	Class WieldableBookPageList*                                 RuinedSmallShipPageList;                           // 0x150(0x8)
	Class WieldableBookPageList*                                 RuinedMediumShipPageList;                          // 0x158(0x8)
	Class WieldableBookPageList*                                 RuinedLargeShipPageList;                           // 0x160(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LogbookDataCacheInterface: public Interface
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class EventLogDefinitionsDataAsset: public DataAsset
{
public:
	TArray<struct StatDefinitions>                               StatDefinitions;                                   // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipsLogServiceInterface: public Interface
{
public:
};


// Size 0x188 (Full Size[0x550] - InheritedSize[0x3c8]
class ShipsLogService: public Actor
{
public:
	char                                                         pad0x20_CJQ4W[0x20];                               // 0x3c8(0x20)
	TArray<struct Logbooks>                                      Logbooks;                                          // 0x3e8(0x10)
	TArray<struct PendingRemovalLogbooks>                        PendingRemovalLogbooks;                            // 0x3f8(0x10)
	float                                                        HeartbeatUpdateFrequency;                          // 0x408(0x4)
	float                                                        ServiceHeartbeatUpdateFrequency;                   // 0x40c(0x4)
	int                                                          MaxDryLogBooks;                                    // 0x410(0x4)
	char                                                         pad0x1c_GEHEY[0x1c];                               // 0x414(0x1c)
	TArray<class EventLogDefinitionsDataAsset*>                  DefinitionAssets;                                  // 0x430(0x10)
	TArray<struct DefinitionAssetRefs>                           DefinitionAssetRefs;                               // 0x440(0x10)
	char                                                         pad0x100_HIARG[0x100];                             // 0x450(0x100)
};


// Size 0x1f8 (Full Size[0x920] - InheritedSize[0x728]
class CaptainsLogItemInfo: public WieldableBookItemInfo
{
public:
	char                                                         pad0x18_WNGTG[0x18];                               // 0x728(0x18)
	Struct CaptainsLogbookDataCache                              DataCache;                                         // 0x740(0xb8)
	TArray<struct DaysAtSeaRarity>                               DaysAtSeaRarity;                                   // 0x7f8(0x10)
	Struct CompanySpecificBootyReward                            HandInOwnLogReward;                                // 0x808(0x18)
	Struct PartDesc                                              CachedCustomization;                               // 0x820(0x20)
	bool                                                         ShouldLogBeRuined;                                 // 0x840(0x1)
	bool                                                         IsLogForGuildShip;                                 // 0x841(0x1)
	char                                                         pad0x6_PAZ7F[0x6];                                 // 0x842(0x6)
	int                                                          MaxDaysAtSeaRarity;                                // 0x848(0x4)
	char                                                         pad0x4_QXVQT[0x4];                                 // 0x84c(0x4)
	TArray<Int BookContents>                                     BookContents;                                      // 0x850(0x10)
	TArray<Int CurrentBookContents>                              CurrentBookContents;                               // 0x860(0x10)
	byte                                                         LastKnownShipType;                                 // 0x878(0x1)
	char                                                         pad0xa7_THOZR[0xa7];                               // 0x879(0xa7)
};


// Size 0x40 (Full Size[0x78] - InheritedSize[0x38]
class CaptainsLogSettings: public DeveloperSettings
{
public:
	Struct Guid                                                  ShipScheduleId;                                    // 0x38(0x10)
	Struct Guid                                                  CrewScheduleId;                                    // 0x48(0x10)
	TArray<struct DefaultShipAccolades>                          DefaultShipAccolades;                              // 0x58(0x10)
	TArray<struct DefaultCrewAccolades>                          DefaultCrewAccolades;                              // 0x68(0x10)
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemInfoCaptainsLogDataCacheMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x30] - InheritedSize[0x30]
class ItemInfoPartDescCustomizationMetaGenerator: public ItemSnapshotMetaGenerator
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimAssistServiceInterface: public Interface
{
public:
};


// Size 0x68 (Full Size[0xb0] - InheritedSize[0x48]
class AimAssistCameraModifier: public CameraModifier
{
public:
	Class AimAssistDataAsset*                                    AimAssistDataAsset;                                // 0x48(0x8)
	char                                                         pad0x60_7201B[0x60];                               // 0x50(0x60)
};


// Size 0x80 (Full Size[0x148] - InheritedSize[0xc8]
class AimAssistComponent: public ActorComponent
{
public:
	Class AimAssistDataAsset*                                    AimAssistDataAsset;                                // 0xc8(0x8)
	char                                                         pad0x8_JWR9Q[0x8];                                 // 0xd0(0x8)
	Class AimAssistCameraModifier*                               AimAssistCameraModifier;                           // 0xd8(0x8)
	Class AimAssistDebugComponent*                               AimAssistDebugComponent;                           // 0xe0(0x8)
	Class CameraComponent*                                       Camera;                                            // 0xe8(0x8)
	char                                                         pad0x58_IK6L0[0x58];                               // 0xf0(0x58)
};


// Size 0x68 (Full Size[0x90] - InheritedSize[0x28]
class AimAssistDataAsset: public DataAsset
{
public:
	float                                                        MinPlayerStrafeSpeed;                              // 0x28(0x4)
	float                                                        MaxPlayerStrafeSpeed;                              // 0x2c(0x4)
	TArray<class Class*>                                         ItemCategoriesForAimAssist;                        // 0x30(0x10)
	TArray<class Class*>                                         ItemsForAimAssist;                                 // 0x40(0x10)
	Struct AimAssistStyleData                                    HipFire;                                           // 0x50(0x10)
	Struct AimAssistStyleData                                    AimingDownSights;                                  // 0x60(0x10)
	Class CurveFloat*                                            TargetDistanceFromPlayerToSlowDownAtZeroPlayerSpeed; // 0x70(0x8)
	Class CurveFloat*                                            TargetDistanceFromPlayerToSlowDownAtFullPlayerSpeed; // 0x78(0x8)
	Class CurveFloat*                                            TargetDistanceFromPlayerToTargetRotationalVeloctyCompensation; // 0x80(0x8)
	float                                                        NearPlayerAudioStartDistanceScreenPercentage;      // 0x88(0x4)
	char                                                         pad0x4_PJTYJ[0x4];                                 // 0x8c(0x4)
};


// Size 0x70 (Full Size[0x138] - InheritedSize[0xc8]
class AimAssistDebugComponent: public ActorComponent
{
public:
	Class AimAssistDataAsset*                                    AimAssistDataAsset;                                // 0xc8(0x8)
	char                                                         pad0x68_8I772[0x68];                               // 0xd0(0x68)
};


// Size 0x30 (Full Size[0x3f8] - InheritedSize[0x3c8]
class AimAssistService: public Actor
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AimAssistTargetInterface: public Interface
{
public:
};


// Size 0x8 (Full Size[0xd0] - InheritedSize[0xc8]
class AimAssistTargetComponent: public ActorComponent
{
public:
};


// Size 0x50 (Full Size[0x78] - InheritedSize[0x28]
class AshenLordDesc: public DataAsset
{
public:
	Struct FText                                                 LocalisedName;                                     // 0x28(0x38)
	class                                                        ClassId;                                           // 0x60(0x8)
	Class SceneDialogueData*                                     DialogueData;                                      // 0x68(0x8)
	Struct PlayerStat                                            LordDefeatedStat;                                  // 0x70(0x4)
	char                                                         pad0x4_VN82R[0x4];                                 // 0x74(0x4)
};


// Size 0xc8 (Full Size[0x100] - InheritedSize[0x38]
class AshenLordEncounterParams: public GameEventParams
{
public:
	Class AISpawner*                                             AshenLordSpawner;                                  // 0x38(0x8)
	Class AIDioramaDesc*                                         AshenLordDioramaDesc;                              // 0x60(0x8)
	TArray<class Class*>                                         AshenLordMusicZones;                               // 0x68(0x10)
	float                                                        DelayFromPlayerSpottedToRitualEnd;                 // 0x78(0x4)
	float                                                        AshenLordSpawnerProximityPlayerTrackerDistanceScalar; // 0x7c(0x4)
	TArray<class AshenLordDesc*>                                 AllAshenLordDescs;                                 // 0x80(0x10)
	TArray<class Class*>                                         RandomlySpawnableAshenLords;                       // 0x90(0x10)
	float                                                        EventSignalHeightOffset;                           // 0xc0(0x4)
	Struct EncounterParams                                       SightingEncounterParams;                           // 0xc4(0xc)
	Struct EncounterParams                                       CloseEncounterParams;                              // 0xd0(0xc)
	char                                                         pad0x4_KC8B9[0x4];                                 // 0xdc(0x4)
	Class GeyserManagerSetupDataAsset*                           RewardsGeyserManagerParams;                        // 0xe0(0x8)
	Class EnvQuery*                                              RewardLocationEnvironmentQuery;                    // 0xe8(0x8)
	float                                                        MinDistanceBetweenRewardLocations;                 // 0xf0(0x4)
	float                                                        FallbackEncounterCompletionDurationSeconds;        // 0xf4(0x4)
	bool                                                         FireEmissaryStatsOnFinished;                       // 0xf8(0x1)
	char                                                         pad0x7_M797H[0x7];                                 // 0xf9(0x7)
};


// Size 0x388 (Full Size[0x7d0] - InheritedSize[0x448]
class AshenLordEncounter: public GameEvent
{
public:
	char                                                         pad0x8_4YLO5[0x8];                                 // 0x448(0x8)
	Class AISpawner*                                             AshenLordSpawner;                                  // 0x450(0x8)
	Class AIDioramaController*                                   AIDioramaController;                               // 0x458(0x8)
	Class GeyserManager*                                         RewardGeyserManager;                               // 0x460(0x8)
	Class AshenLordEncounterParams*                              Params;                                            // 0x468(0x8)
	char                                                         pad0x21c_VO1N2[0x21c];                             // 0x470(0x21c)
	Struct PlayerStat                                            SpecificAshenLordDefeatedStat;                     // 0x68c(0x4)
	char                                                         pad0xa0_FFCVT[0xa0];                               // 0x690(0xa0)
	Class PlayerProximityObservedSpawnContextProvider*           ObservingContextProvider;                          // 0x730(0x8)
	Class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x738(0x8)
	Class Actor*                                                 AshenLordMusicZone;                                // 0x740(0x8)
	char                                                         pad0x88_Z292Q[0x88];                               // 0x748(0x88)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenLordEncounterServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class AshenLordEncounterServiceParams: public GameEventServiceParams
{
public:
	Class AshenLordEncounterParams*                              EncounterParams;                                   // 0x28(0x8)
	float                                                        MinPlayerDistanceToIsland;                         // 0x30(0x4)
	char                                                         pad0x4_O2L5J[0x4];                                 // 0x34(0x4)
	class                                                        AshenLordEncounterClass;                           // 0x38(0x8)
	float                                                        EncounterExclusionRadiusInMetres;                  // 0x40(0x4)
	char                                                         pad0x4_C3P8N[0x4];                                 // 0x44(0x4)
};


// Size 0xb0 (Full Size[0x4d0] - InheritedSize[0x420]
class AshenLordEncounterService: public GameEventService
{
public:
	char                                                         pad0x98_TYLY8[0x98];                               // 0x420(0x98)
	Struct AshenLordEncounterServiceDesc                         Desc;                                              // 0x4b8(0x10)
	Class AshenLordEncounterServiceParams*                       Params;                                            // 0x4c8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenLordsAIDioramaCategory: public AIDioramaCategory
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamethrowerControllerInterface: public Interface
{
public:
};


// Size 0x938 (Full Size[0x960] - InheritedSize[0x28]
class AshenWindsFlamethrowerController: public Object
{
public:
	char                                                         pad0x8_4N2HN[0x8];                                 // 0x28(0x8)
	Struct FlamethrowerCollisionsParams                          FlamethrowerCollisionParams;                       // 0x30(0x68)
	Class FireGridCellSelectionParamsDataAsset*                  FlamethrowerFirePropagationIgnitionParams;         // 0x98(0x8)
	Struct Status                                                FlamethrowerCollisionStatusEffect;                 // 0xa0(0x18)
	float                                                        TimeUntilApplyStatusEffect;                        // 0xb8(0x4)
	float                                                        TimeUntilIgniteFirePropagation;                    // 0xbc(0x4)
	float                                                        TimeToConsiderActorOutsideFlame;                   // 0xc0(0x4)
	float                                                        FlamethrowerCollisionDamageAmount;                 // 0xc4(0x4)
	float                                                        DamagePerSecondInsideFlame;                        // 0xc8(0x4)
	char                                                         pad0x4_Q1I8L[0x4];                                 // 0xcc(0x4)
	Class AshenWindsSkull*                                       AshenWindsSkull;                                   // 0xd0(0x8)
	char                                                         pad0x888_5U2VD[0x888];                             // 0xd8(0x888)
};


// Size 0x60 (Full Size[0x9c0] - InheritedSize[0x960]
class SkullOfStormsWindthrowerController: public AshenWindsFlamethrowerController
{
public:
	float                                                        MaxWindSpeedMultiplier;                            // 0x960(0x4)
	float                                                        MaximumMaxWindSpeedMultiplier;                     // 0x964(0x4)
	class                                                        DamagerType;                                       // 0x968(0x8)
	Struct KnockBackInfo                                         KnockbackParams;                                   // 0x970(0x50)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamethrowerChargeInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class FlamethrowerChargeVisuals: public Object
{
public:
	char                                                         pad0x20_WIA57[0x20];                               // 0x28(0x20)
	TArray<class MaterialInstanceDynamic*>                       DynamicMaterials;                                  // 0x48(0x10)
	char                                                         pad0x10_T6NGN[0x10];                               // 0x58(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlamethrowerChargeVisualsProviderInterface: public Interface
{
public:
};


// Size 0x190 (Full Size[0x970] - InheritedSize[0x7e0]
class AshenWindsSkull: public StaticSimpleBootyWieldableItem
{
public:
	char                                                         pad0x18_6ESOE[0x18];                               // 0x7e0(0x18)
	Class UsableWieldableComponent*                              UsableWieldableComponent;                          // 0x7f8(0x8)
	Class ParticleSystemComponent*                               FlamethrowerParticleSystemComponent;               // 0x800(0x8)
	Class ParticleSystemComponent*                               FlamethrowerChargeParticleSystemComponent;         // 0x808(0x8)
	Class MaterialAnimatorComponent*                             MaterialAnimatorComponent;                         // 0x810(0x8)
	Class AshenWindsFlamethrowerController*                      FlamethrowerController;                            // 0x818(0x8)
	Struct ItemUseSpeedParams                                    ItemUseSpeedModifiers;                             // 0x820(0x8)
	float                                                        ItemUseFOVBlendSpeed;                              // 0x828(0x4)
	float                                                        ItemUseTargetFOV;                                  // 0x82c(0x4)
	float                                                        HipfireEffectsDelayAmount;                         // 0x830(0x4)
	float                                                        AimingDownSightsEffectsDelayAmount;                // 0x834(0x4)
	float                                                        StartFlamethrowerOnServerDelayLatencyCompensation; // 0x838(0x4)
	float                                                        FlamethrowerParticleSystemMaxLength;               // 0x83c(0x4)
	byte                                                         FlamethrowerParticleSystemCustomLocalSpaceMode;    // 0x840(0x1)
	char                                                         pad0x3_D2PTJ[0x3];                                 // 0x841(0x3)
	struct FName                                                 OpenJawMaterialAnimationName;                      // 0x844(0x8)
	struct FName                                                 CloseJawMaterialAnimationName;                     // 0x84c(0x8)
	Struct Vector                                                FlamethrowerParticleSystemThirdPersonAttachPoint;  // 0x854(0xc)
	Struct Rotator                                               FlamethrowerParticleSystemThirdPersonRotation;     // 0x860(0xc)
	Struct Vector                                                FlamethrowerParticleSystemFirstPersonAttachPoint;  // 0x86c(0xc)
	Struct Rotator                                               FlamethrowerParticleSystemFirstPersonRotation;     // 0x878(0xc)
	bool                                                         EnableCustomParticleSystemBelowWater;              // 0x884(0x1)
	char                                                         pad0x3_S2NFC[0x3];                                 // 0x885(0x3)
	Class ParticleSystem*                                        AboveWaterParticleSystem;                          // 0x888(0x8)
	Class ParticleSystem*                                        BelowWaterParticleSystem;                          // 0x890(0x8)
	bool                                                         EnableVisualFlamethrowerMissfiring;                // 0x898(0x1)
	char                                                         pad0x7_14KXT[0x7];                                 // 0x899(0x7)
	TArray<struct FlamethrowerMissfireParams>                    FlamethrowerMissfireParams;                        // 0x8a0(0x10)
	Class WwiseEvent*                                            FlamethrowerLoopStartEvent;                        // 0x8b0(0x8)
	Class WwiseEvent*                                            FlamethrowerLoopStopEvent;                         // 0x8b8(0x8)
	struct FName                                                 FlamethrowerLoopChargeLevelRTPC;                   // 0x8c0(0x8)
	Struct FloatRange                                            FlamethrowerLoopChargeLevelRTPCRange;              // 0x8c8(0x10)
	Class WwiseEvent*                                            FlamethrowerActivatedEvent;                        // 0x8d8(0x8)
	Class WwiseEvent*                                            FlamethrowerDeactivatedEvent;                      // 0x8e0(0x8)
	Class ForceFeedbackEffect*                                   UsingFlamethrowerForceFeedback;                    // 0x8e8(0x8)
	Class Pawn*                                                  Wielder;                                           // 0x8f0(0x8)
	Class FlamethrowerChargeVisuals*                             FlamethrowerChargeVisuals;                         // 0x908(0x8)
	char                                                         pad0x60_QH6G1[0x60];                               // 0x910(0x60)
};


// Size 0x80 (Full Size[0x9f0] - InheritedSize[0x970]
class SkullOfStorms: public AshenWindsSkull
{
public:
	float                                                        WindStreamLength;                                  // 0x968(0x4)
	float                                                        MaxWindSpeedMultiplier;                            // 0x96c(0x4)
	float                                                        MaximumMaxWindSpeedMultiplier;                     // 0x970(0x4)
	float                                                        SwimmingVelocity;                                  // 0x974(0x4)
	float                                                        WatercraftVelocity;                                // 0x978(0x4)
	float                                                        PitchToConsiderAThrust;                            // 0x97c(0x4)
	float                                                        HoldTimeToThrust;                                  // 0x980(0x4)
	float                                                        ThrustCooldownTime;                                // 0x984(0x4)
	int                                                          NumPropulsionThrustsAllowed;                       // 0x988(0x4)
	Struct KnockBackInfo                                         ThrustParams;                                      // 0x98c(0x50)
	char                                                         pad0x4_YI3RG[0x4];                                 // 0x9dc(0x4)
	class                                                        DamagerType;                                       // 0x9e0(0x8)
	char                                                         pad0x8_X4QRI[0x8];                                 // 0x9e8(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AshenWindsSkullDamagerType: public DamagerType
{
public:
};


// Size 0x48 (Full Size[0x290] - InheritedSize[0x248]
class FlamethrowerChargeComponent: public HealthComponent
{
public:
	char                                                         pad0x8_F93OD[0x8];                                 // 0x248(0x8)
	float                                                        MaxCharge;                                         // 0x250(0x4)
	float                                                        ChargeDrainPerSecond;                              // 0x254(0x4)
	char                                                         pad0x38_IUQIW[0x38];                               // 0x258(0x38)
};


// Size 0x18 (Full Size[0x740] - InheritedSize[0x728]
class AshenWindsSkullItemInfo: public BootyItemInfo
{
public:
	Class FlamethrowerChargeComponent*                           FlamethrowerChargeComponent;                       // 0x728(0x8)
	TArray<struct Rewards>                                       Rewards;                                           // 0x730(0x10)
};


// Size 0x18 (Full Size[0x860] - InheritedSize[0x848]
class AshenWindsSkullItemProxy: public BountyRewardItemProxy
{
public:
	char                                                         pad0x8_MJWXM[0x8];                                 // 0x848(0x8)
	Class ParticleSystemComponent*                               FlamethrowerChargeParticleSystemComponent;         // 0x850(0x8)
	Class FlamethrowerChargeVisuals*                             FlamethrowerChargeVisuals;                         // 0x858(0x8)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class CreateAshenLordEncounterTaleStep: public TaleQuestStep
{
public:
};


// Size 0xb8 (Full Size[0x138] - InheritedSize[0x80]
class CreateAshenLordEncounterTaleStepDesc: public TaleQuestStepDesc
{
public:
	Struct AshenLordCustomEncounterSettings                      CustomisationOptions;                              // 0x80(0x58)
	Struct QuestVariableAISpawner                                AshenLordSpawner;                                  // 0xd8(0x30)
	Struct QuestVariableGameEvent                                AshenLordEncounterEvent;                           // 0x108(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SkullOfStormsDamagerType: public DamagerType
{
public:
};


// Size 0x10 (Full Size[0xc0] - InheritedSize[0xb0]
class WaitForAshenLordPawnBaseStep: public WaitForSpawnedPawnBaseStep
{
public:
	Class AshenLordEncounter*                                    AshenLordEncounter;                                // 0xb0(0x8)
	Class Pawn*                                                  AshenLordPawn;                                     // 0xb8(0x8)
};


// Size 0x60 (Full Size[0x120] - InheritedSize[0xc0]
class WaitForAshenLordAIAbilityStartedStep: public WaitForAshenLordPawnBaseStep
{
public:
	class                                                        AIAbilityType;                                     // 0xc0(0x8)
	char                                                         pad0x58_EEUIH[0x58];                               // 0xc8(0x58)
};


// Size 0x60 (Full Size[0x120] - InheritedSize[0xc0]
class WaitForAshenLordHealthStageStep: public WaitForAshenLordPawnBaseStep
{
public:
};


// Size 0x58 (Full Size[0x118] - InheritedSize[0xc0]
class WaitForAshenLordVulnerabilityEndStep: public WaitForAshenLordPawnBaseStep
{
public:
};


// Size 0x58 (Full Size[0x118] - InheritedSize[0xc0]
class WaitForAshenLordVulnerabilityStartStep: public WaitForAshenLordPawnBaseStep
{
public:
};


// Size 0x30 (Full Size[0xe0] - InheritedSize[0xb0]
class WaitForAshenLordPawnBaseStepDesc: public WaitForSpawnedPawnBaseStepDesc
{
public:
	Struct QuestVariableGameEvent                                AshenLordEncounter;                                // 0xb0(0x30)
};


// Size 0x8 (Full Size[0xe8] - InheritedSize[0xe0]
class WaitForAshenLordAIAbilityStartedStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
	class                                                        AIAbilityType;                                     // 0xe0(0x8)
};


// Size 0x8 (Full Size[0xe8] - InheritedSize[0xe0]
class WaitForAshenLordHealthStageStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
	int                                                          RequiredHealthStage;                               // 0xe0(0x4)
	char                                                         pad0x4_A83YG[0x4];                                 // 0xe4(0x4)
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class WaitForAshenLordVulnerabilityEndStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
};


// Size 0x0 (Full Size[0xe0] - InheritedSize[0xe0]
class WaitForAshenLordVulnerabilityStartStepDesc: public WaitForAshenLordPawnBaseStepDesc
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeChargeAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class MeleeChargeAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x20 (Full Size[0x98] - InheritedSize[0x78]
class MeleeChargeAIAbility: public AthenaAIAbility
{
public:
	Struct MeleeAIAbilityAngleChecker                            AngleChecker;                                      // 0x78(0x18)
	char                                                         pad0x8_QM591[0x8];                                 // 0x90(0x8)
};


// Size 0x18 (Full Size[0xe0] - InheritedSize[0xc8]
class MeleeChargeAIAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        MinAngleToTargetToActivate;                        // 0xc8(0x4)
	float                                                        MaxAngleToTargetToActivate;                        // 0xcc(0x4)
	float                                                        MinTimeBetweenCheck;                               // 0xd0(0x4)
	float                                                        MaxTimeBetweenCheck;                               // 0xd4(0x4)
	float                                                        ChanceOfActivation;                                // 0xd8(0x4)
	float                                                        ChargeTime;                                        // 0xdc(0x4)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class MeleeSpinAIAbilityType: public AthenaAIAbilityType
{
public:
};


// Size 0x0 (Full Size[0x40] - InheritedSize[0x40]
class MeleeSpinAbilityStageParams: public AthenaAIAbilityStageParams
{
public:
};


// Size 0x20 (Full Size[0x98] - InheritedSize[0x78]
class MeleeSpinAIAbility: public AthenaAIAbility
{
public:
	Struct MeleeAIAbilityAngleChecker                            AngleChecker;                                      // 0x78(0x18)
	char                                                         pad0x8_J90WQ[0x8];                                 // 0x90(0x8)
};


// Size 0x20 (Full Size[0xe8] - InheritedSize[0xc8]
class MeleeSpinAIAbilityParams: public AthenaAIAbilityParams
{
public:
	float                                                        MinAngleToTargetToActivate;                        // 0xc8(0x4)
	float                                                        MaxAngleToTargetToActivate;                        // 0xcc(0x4)
	float                                                        MinTimeBetweenCheck;                               // 0xd0(0x4)
	float                                                        MaxTimeBetweenCheck;                               // 0xd4(0x4)
	float                                                        ChanceOfActivation;                                // 0xd8(0x4)
	float                                                        SpinWaitTime;                                      // 0xdc(0x4)
	float                                                        TurnSpeed;                                         // 0xe0(0x4)
	char                                                         pad0x4_RH3DI[0x4];                                 // 0xe4(0x4)
};


// Size 0x8 (Full Size[0x470] - InheritedSize[0x468]
class AmmoChest: public InteractableObject
{
public:
	Class StaticMeshComponent*                                   StaticMesh;                                        // 0x468(0x8)
};


// Size 0xf0 (Full Size[0x9d0] - InheritedSize[0x8e0]
class EnchantedCompass: public Compass
{
public:
	Class ForceFeedbackEffect*                                   TargetReplacedForceFeedback;                       // 0x8d8(0x8)
	Class WwiseEvent*                                            TargetReplacedSFX;                                 // 0x8e0(0x8)
	Class InventoryItemComponent*                                InventoryItem;                                     // 0x8e8(0x8)
	char                                                         pad0x4_VTPTI[0x4];                                 // 0x8f0(0x4)
	Struct EnchantedCompassTarget                                Target;                                            // 0x8f4(0x18)
	char                                                         pad0xb4_M58S4[0xb4];                               // 0x90c(0xb4)
	Class EnchantedCompassProximityAnnouncementComponent*        ProximityAnnouncementComponent;                    // 0x9c0(0x8)
	char                                                         pad0x8_CQK9U[0x8];                                 // 0x9c8(0x8)
};


// Size 0x18 (Full Size[0x188] - InheritedSize[0x170]
class TaleQuestCompassService: public TaleQuestToolService
{
public:
	Struct EnchantedCompassTarget                                CurrentTarget;                                     // 0x170(0x18)
};


// Size 0x8 (Full Size[0x38] - InheritedSize[0x30]
class TaleQuestCompassServiceDesc: public TaleQuestToolServiceDesc
{
public:
	class                                                        CompassDesc;                                       // 0x30(0x8)
};


// Size 0x8 (Full Size[0xa0] - InheritedSize[0x98]
class RemoveFlameOfFateTypeStep: public TaleQuestStep
{
public:
	Class RemoveFlameOfFateTypeStepDesc*                         Desc;                                              // 0x98(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildChroniclesInterface: public Interface
{
public:
};


// Size 0xf0 (Full Size[0x118] - InheritedSize[0x28]
class GuildChroniclesService: public Object
{
public:
	char                                                         pad0xc8_M5XBK[0xc8];                               // 0x28(0xc8)
	Class GameState*                                             GameState;                                         // 0xf0(0x8)
	char                                                         pad0x20_R1DQP[0x20];                               // 0xf8(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class GuildSignUpInterface: public Interface
{
public:
};


// Size 0xa0 (Full Size[0x168] - InheritedSize[0xc8]
class GuildSignUpComponent: public ActorComponent
{
public:
	char                                                         pad0x70_ME03Q[0x70];                               // 0xc8(0x70)
	TArray<class Actor*>                                         PlayersWhoAreReadingGuildCard;                     // 0x138(0x10)
	bool                                                         LimitInviteToOnePlayerAtATime;                     // 0x148(0x1)
	char                                                         pad0x7_DWT50[0x7];                                 // 0x149(0x7)
	TArray<struct FName>                                         TriggerEmoteNames;                                 // 0x150(0x10)
	float                                                        JoinGuildInteractionInputHoldTime;                 // 0x160(0x4)
	char                                                         pad0x4_AXODX[0x4];                                 // 0x164(0x4)
};


// Size 0x140 (Full Size[0x508] - InheritedSize[0x3c8]
class HauntedFort: public Actor
{
public:
	char                                                         pad0x10_J13HS[0x10];                               // 0x3c8(0x10)
	Class StaticMeshComponent*                                   FortMesh;                                          // 0x3d8(0x8)
	Class ChildActorComponent*                                   Target_A;                                          // 0x3e0(0x8)
	Class ChildActorComponent*                                   Target_B;                                          // 0x3e8(0x8)
	Class ChildActorComponent*                                   Target_C;                                          // 0x3f0(0x8)
	Class ChildActorComponent*                                   Target_D;                                          // 0x3f8(0x8)
	Class ChildActorComponent*                                   Target_E;                                          // 0x400(0x8)
	Class ChildActorComponent*                                   Target_F;                                          // 0x408(0x8)
	Class ChildActorComponent*                                   Target_G;                                          // 0x410(0x8)
	Class ChildActorComponent*                                   Target_H;                                          // 0x418(0x8)
	Class ChildActorComponent*                                   Target_I;                                          // 0x420(0x8)
	Class HauntedFortEmplacement*                                Emplacement_A;                                     // 0x428(0x8)
	Class HauntedFortEmplacement*                                Emplacement_B;                                     // 0x430(0x8)
	Class HauntedFortEmplacement*                                Emplacement_C;                                     // 0x438(0x8)
	TArray<class HauntedFortTarget*>                             TargetsArray;                                      // 0x440(0x10)
	TArray<class HauntedFortTarget*>                             EmplacementsArray;                                 // 0x450(0x10)
	float                                                        ServerMigrationExclusionRadius;                    // 0x460(0x4)
	char                                                         pad0xa4_RMJEO[0xa4];                               // 0x464(0xa4)
};


// Size 0x138 (Full Size[0x500] - InheritedSize[0x3c8]
class HauntedFortTarget: public Actor
{
public:
	char                                                         pad0x30_DSFMP[0x30];                               // 0x3c8(0x30)
	Class SceneComponent*                                        RootSceneComponent;                                // 0x3f8(0x8)
	Class MaterialManipulationComponent*                         MaterialManipulationComponent;                     // 0x400(0x8)
	Class StaticMeshComponent*                                   BaseMesh;                                          // 0x408(0x8)
	Class OptInDamageableComponent*                              DamageableComp;                                    // 0x410(0x8)
	float                                                        Health;                                            // 0x418(0x4)
	float                                                        MaxHealth;                                         // 0x41c(0x4)
	float                                                        HealthEachShotRemoves;                             // 0x420(0x4)
	bool                                                         Interactable;                                      // 0x424(0x1)
	bool                                                         Destroyed;                                         // 0x425(0x1)
	char                                                         pad0x2_AEWVU[0x2];                                 // 0x426(0x2)
	TArray<struct FName>                                         DamagePositionParameterNames;                      // 0x428(0x10)
	float                                                        MinHoleSize;                                       // 0x438(0x4)
	float                                                        MaxHoleSize;                                       // 0x43c(0x4)
	float                                                        MinMultiHoleSize;                                  // 0x440(0x4)
	float                                                        MaxMultiHoleSize;                                  // 0x444(0x4)
	float                                                        NearEnoughToBeConsideredTheSameLocationDistance;   // 0x448(0x4)
	char                                                         pad0x4_FIU2H[0x4];                                 // 0x44c(0x4)
	TArray<struct ImpactLocations>                               ImpactLocations;                                   // 0x450(0x10)
	char                                                         pad0xa0_51S1R[0xa0];                               // 0x460(0xa0)
};


// Size 0x0 (Full Size[0x500] - InheritedSize[0x500]
class HauntedFortEmplacement: public HauntedFortTarget
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class PlayDockableKeyedInstrumentActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class InstrumentKeyInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class DockableKeyedInstrumentInterface: public Interface
{
public:
};


// Size 0xe0 (Full Size[0x5f0] - InheritedSize[0x510]
class DockableKeyedInstrument: public ControllableObject
{
public:
	char                                                         pad0x8_6ZOYZ[0x8];                                 // 0x510(0x8)
	Class ParticleSystem*                                        PipeVFXObject;                                     // 0x518(0x8)
	char                                                         pad0x40_HY7G0[0x40];                               // 0x520(0x40)
	int                                                          CurrentKeyID;                                      // 0x560(0x4)
	char                                                         pad0x4_O5YVJ[0x4];                                 // 0x564(0x4)
	Struct FText                                                 DisplayName;                                       // 0x568(0x38)
	float                                                        MoveKeyThreshold;                                  // 0x5a0(0x4)
	float                                                        MovementCooldown;                                  // 0x5a4(0x4)
	float                                                        XAxisDeadzone;                                     // 0x5a8(0x4)
	int                                                          StartingKeyID;                                     // 0x5ac(0x4)
	Class StaticMeshComponent*                                   BaseMeshComponent;                                 // 0x5b0(0x8)
	Class InteractableComponent*                                 InteractableComponent;                             // 0x5b8(0x8)
	Class SceneComponent*                                        PlayerPositionComponent;                           // 0x5c0(0x8)
	Class WwiseObjectPoolWrapper*                                SfxPool;                                           // 0x5c8(0x8)
	TArray<class ParticleSystemComponent*>                       VFXPositions;                                      // 0x5d0(0x10)
	Class ParticleSystemComponent*                               CurrentVFXSpawner;                                 // 0x5e0(0x8)
	char                                                         pad0x8_THQAV[0x8];                                 // 0x5e8(0x8)
};


// Size 0x58 (Full Size[0x120] - InheritedSize[0xc8]
class SequenceComponent: public ActorComponent
{
public:
	char                                                         pad0x30_A5L4O[0x30];                               // 0xc8(0x30)
	TArray<Int Sequence>                                         Sequence;                                          // 0xf8(0x10)
	bool                                                         ResetOnError;                                      // 0x108(0x1)
	bool                                                         SequenceComplete;                                  // 0x109(0x1)
	char                                                         pad0x6_Y68F0[0x6];                                 // 0x10a(0x6)
	TArray<struct Responses>                                     Responses;                                         // 0x110(0x10)
};


// Size 0x30 (Full Size[0x620] - InheritedSize[0x5f0]
class PuzzleKeyedInstrument: public DockableKeyedInstrument
{
public:
	bool                                                         DockedPlayerIsOnTale;                              // 0x5f0(0x1)
	char                                                         pad0x7_9CC9I[0x7];                                 // 0x5f1(0x7)
	Class SequenceComponent*                                     SequenceComponent;                                 // 0x5f8(0x8)
	Class StaticMeshComponent*                                   SheetMusicMeshComponent;                           // 0x600(0x8)
	bool                                                         ShouldShowSheetMusic;                              // 0x608(0x1)
	char                                                         pad0x7_RMHFN[0x7];                                 // 0x609(0x7)
	TArray<struct FText>                                         TaleNames;                                         // 0x610(0x10)
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentMoveYInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentMoveXInputId: public AnalogInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentKeyPressNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class DockableKeyedInstrumentKeyPressNotificationReleasedInputId: public NotificationInputId
{
public:
};


// Size 0x28 (Full Size[0x2c0] - InheritedSize[0x298]
class DockableKeyedInstrumentInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x80 (Full Size[0x6a0] - InheritedSize[0x620]
class InstrumentKeyComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x8_EDBAS[0x8];                                 // 0x620(0x8)
	int                                                          KeyID;                                             // 0x628(0x4)
	int                                                          OctaveID;                                          // 0x62c(0x4)
	bool                                                         SelectedByDefault;                                 // 0x630(0x1)
	char                                                         pad0x3_7RHZU[0x3];                                 // 0x631(0x3)
	Struct NavigationOptions                                     NavigationOptions;                                 // 0x634(0x10)
	char                                                         pad0x4_WLE2T[0x4];                                 // 0x644(0x4)
	Class WwiseEvent*                                            KeyPressSFX;                                       // 0x648(0x8)
	Class WwiseEvent*                                            KeyReleaseSFX;                                     // 0x650(0x8)
	float                                                        HighlightValue;                                    // 0x658(0x4)
	float                                                        PressedValue;                                      // 0x65c(0x4)
	struct FName                                                 DepressionParamName;                               // 0x660(0x8)
	Class MaterialInstanceDynamic*                               DynamicMaterialInstance;                           // 0x668(0x8)
	char                                                         pad0x30_NS3TE[0x30];                               // 0x670(0x30)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ProtoPlayTavernPianoActionStateId: public ActionStateId
{
public:
};


// Size 0x78 (Full Size[0x588] - InheritedSize[0x510]
class ProtoTavernPiano: public ControllableObject
{
public:
	Class StaticMeshComponent*                                   PianoMesh;                                         // 0x510(0x8)
	Struct FText                                                 DisplayName;                                       // 0x518(0x38)
	Class WwiseObjectPoolWrapper*                                AudioPool;                                         // 0x550(0x8)
	char                                                         pad0x30_NZ4WI[0x30];                               // 0x558(0x30)
};


// Size 0x10 (Full Size[0x2a8] - InheritedSize[0x298]
class ProtoTavernPianoInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC1NotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC1ReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyDNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyDReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyENotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyEReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyFNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyFReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyGNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyGReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyANotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyAReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyBNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyBReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC2NotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoKeyC2ReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoSharpModifierNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoSharpModifierReleasedNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoOctaveUpNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class ProtoTavernPianoOctaveDownNotificationInputId: public NotificationInputId
{
public:
};


// Size 0x10 (Full Size[0x2a8] - InheritedSize[0x298]
class ShantyRadialActivationInputComponent: public AthenaCharacterBaseInputComponent
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailAngleInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SailHoistInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipAnnouncementServiceInterface: public Interface
{
public:
};


// Size 0xa8 (Full Size[0xd0] - InheritedSize[0x28]
class ShipAnnouncementService: public Object
{
public:
	char                                                         pad0x8_XWEZK[0x8];                                 // 0x28(0x8)
	float                                                        ShipAnnouncementServiceTickRate;                   // 0x30(0x4)
	float                                                        ShipAnnouncementOwnShipDistThreshold;              // 0x34(0x4)
	Class World*                                                 WorldPtr;                                          // 0x38(0x8)
	Struct ShipAnnouncementCache                                 ShipAnnouncementCache;                             // 0x40(0x20)
	TArray<struct PreviouslySpottedShips>                        PreviouslySpottedShips;                            // 0x60(0x10)
	char                                                         pad0x60_TS7US[0x60];                               // 0x70(0x60)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class DiscardTransientActorStep: public TaleQuestStep
{
public:
	Class DiscardTransientActorStepDesc*                         Desc;                                              // 0x90(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TransientActorServiceInterface: public Interface
{
public:
};


// Size 0x50 (Full Size[0xb0] - InheritedSize[0x60]
class TransientActorTaleService: public TaleQuestService
{
public:
	char                                                         pad0x20_B4E0Z[0x20];                               // 0x60(0x20)
	TArray<class Actor*>                                         TrackedActors;                                     // 0x80(0x10)
	TArray<struct MigrationEntries>                              MigrationEntries;                                  // 0x90(0x10)
	char                                                         pad0x10_Z9WP6[0x10];                               // 0xa0(0x10)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class DiscardTransientActorStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Actor;                                             // 0x80(0x30)
	byte                                                         DiscardType;                                       // 0xb0(0x1)
	char                                                         pad0x7_WHT1I[0x7];                                 // 0xb1(0x7)
};


// Size 0x0 (Full Size[0x98] - InheritedSize[0x98]
class RegisterTransientActorStep: public TaleQuestStep
{
public:
	Class RegisterTransientActorStepDesc*                        Desc;                                              // 0x90(0x8)
};


// Size 0x38 (Full Size[0xb8] - InheritedSize[0x80]
class RegisterTransientActorStepDesc: public TaleQuestStepDesc
{
public:
	Struct QuestVariableActor                                    Actor;                                             // 0x80(0x30)
	float                                                        DestructionRadius;                                 // 0xb0(0x4)
	bool                                                         IsPendingDestruction;                              // 0xb4(0x1)
	char                                                         pad0x3_011ER[0x3];                                 // 0xb5(0x3)
};


// Size 0x60 (Full Size[0x88] - InheritedSize[0x28]
class TransientActorService: public Object
{
public:
	char                                                         pad0x8_FNZLP[0x8];                                 // 0x28(0x8)
	Class World*                                                 World;                                             // 0x30(0x8)
	char                                                         pad0x18_TCQD5[0x18];                               // 0x38(0x18)
	TArray<Delegate TransientActorDestroyedCallbacks>            TransientActorDestroyedCallbacks;                  // 0x50(0x10)
	char                                                         pad0x18_EE3FB[0x18];                               // 0x60(0x18)
	TArray<struct Entries>                                       Entries;                                           // 0x78(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TransientActorTaleServiceDesc: public TaleQuestServiceDesc
{
public:
};


// Size 0x28 (Full Size[0xf0] - InheritedSize[0xc8]
class MovingWorldMarkerComponent: public ActorComponent
{
public:
	char                                                         pad0x20_IRGHK[0x20];                               // 0xc8(0x20)
	bool                                                         DestroyMarkerWhenSpawnedFromItemSpawner;           // 0xe8(0x1)
	char                                                         pad0x7_1PLK4[0x7];                                 // 0xe9(0x7)
};


// Size 0x10 (Full Size[0x3d8] - InheritedSize[0x3c8]
class WorldMarkerBeaconActor: public Actor
{
public:
	char                                                         pad0x8_Y5B9F[0x8];                                 // 0x3c8(0x8)
	Class BaseWorldMarker*                                       MarkerDataObject;                                  // 0x3d0(0x8)
};


// Size 0x40 (Full Size[0x418] - InheritedSize[0x3d8]
class MovingWorldMarkerBeaconActor: public WorldMarkerBeaconActor
{
public:
	Class SceneComponent*                                        MarkerRoot;                                        // 0x3d8(0x8)
	char                                                         pad0x30_IVP8R[0x30];                               // 0x3e0(0x30)
	Class Actor*                                                 PreviousTrackedOwner;                              // 0x410(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAnimationSinkingTunnelDataAsset: public DataAsset
{
public:
	TArray<struct Animations>                                    Animations;                                        // 0x28(0x10)
	class                                                        SinkingTunnelAnimationStateId;                     // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SinkingTunnelAnimationId: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_None: public KrakenHeadState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Idle: public KrakenHeadState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Appear: public KrakenHeadState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Disappear: public KrakenHeadState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Bite: public KrakenHeadState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenHeadState_Roar: public KrakenHeadState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_None: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Idle: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_IdleActive: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_SuckingTell: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Sucking: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Holding: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingWaterDunk: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingPowerSlam: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingExpose: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_HoldingDisorientate: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Ingesting: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Ingesting_SwallowTarget: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Ingesting_RegurgitateTarget: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Throwing: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Despawning_Defeated: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Despawning: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class KrakenAnimatedTentacleState_Despawning_Panic: public KrakenAnimatedTentacleState
{
public:
};


// Size 0x8 (Full Size[0x1c8] - InheritedSize[0x1c0]
class ShipDamageableComponent: public OptInDamageableComponent
{
public:
	Class Actor*                                                 Ship;                                              // 0x1c0(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FlashbangEffectInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x110] - InheritedSize[0xc8]
class FlashbangEffectComponent: public ActorComponent
{
public:
	char                                                         pad0x8_6Y6PV[0x8];                                 // 0xc8(0x8)
	float                                                        FlashTimer;                                        // 0xd0(0x4)
	float                                                        FadeOutTimer;                                      // 0xd4(0x4)
	float                                                        FlashbangCooldown;                                 // 0xd8(0x4)
	char                                                         pad0x4_HRNOM[0x4];                                 // 0xdc(0x4)
	Class WwiseEvent*                                            StartSfxEvent;                                     // 0xe0(0x8)
	Class WwiseEvent*                                            StopSfxEvent;                                      // 0xe8(0x8)
	char                                                         pad0x20_REUU0[0x20];                               // 0xf0(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class TraceableProjectileInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchableProjectileInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class LaunchableProjectileServiceInterface: public Interface
{
public:
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class LaunchableProjectileService: public Object
{
public:
	char                                                         pad0x8_4UP0P[0x8];                                 // 0x28(0x8)
	Class World*                                                 World;                                             // 0x30(0x8)
	TArray<struct ActiveProjectiles>                             ActiveProjectiles;                                 // 0x38(0x10)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class SeatAnimationId: public Object
{
public:
	Struct Vector                                                CharacterOffset;                                   // 0x28(0xc)
	float                                                        ThirdPersonCameraVerticalOffsetFactorWhenZoomed;   // 0x34(0x4)
	char                                                         pad0x8_DHOZ4[0x8];                                 // 0x38(0x8)
	Struct Transform                                             CharacterProjectileTraceHitVolumeOffset;           // 0x40(0x30)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAnimationSittingDataAsset: public DataAsset
{
public:
	TArray<struct Animations>                                    Animations;                                        // 0x28(0x10)
	class                                                        SittingStateId;                                    // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeatCollectionInterface: public Interface
{
public:
};


// Size 0x170 (Full Size[0x538] - InheritedSize[0x3c8]
class SeatCollection: public Actor
{
public:
	char                                                         pad0x10_ZGPNE[0x10];                               // 0x3c8(0x10)
	Class SceneComponent*                                        Root;                                              // 0x3d8(0x8)
	char                                                         pad0x158_9XH5U[0x158];                             // 0x3e0(0x158)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeatInterface: public Interface
{
public:
};


// Size 0x1c0 (Full Size[0x2e8] - InheritedSize[0x128]
class SeatComponentBase: public InteractableComponent
{
public:
	char                                                         pad0x40_S5FX5[0x40];                               // 0x128(0x40)
	Struct FText                                                 InteractionVerb;                                   // 0x168(0x38)
	Struct FText                                                 InteractionDisplayName;                            // 0x1a0(0x38)
	class                                                        InteractionInput;                                  // 0x1d8(0x8)
	bool                                                         HoldToInteract;                                    // 0x1e0(0x1)
	char                                                         pad0x7_1EG58[0x7];                                 // 0x1e1(0x7)
	class                                                        HoldInteractionInput;                              // 0x1e8(0x8)
	float                                                        HoldDuration;                                      // 0x1f0(0x4)
	float                                                        IdleDisconnectThreshold;                           // 0x1f4(0x4)
	bool                                                         DisableCanBeControlled;                            // 0x1f8(0x1)
	char                                                         pad0x7_C74SQ[0x7];                                 // 0x1f9(0x7)
	Class PhrasesRadialDataAsset*                                RadialPhrases;                                     // 0x200(0x8)
	bool                                                         CustomInteractionPoint;                            // 0x208(0x1)
	char                                                         pad0x3_ZXQNJ[0x3];                                 // 0x209(0x3)
	Struct Vector                                                CustomInteractionPointLocation;                    // 0x20c(0xc)
	TArray<class SeatStat*>                                      ConditionalSeatStats;                              // 0x218(0x10)
	bool                                                         CanBeUnderwater;                                   // 0x228(0x1)
	char                                                         pad0x7_6BFU4[0x7];                                 // 0x229(0x7)
	char                                                         pad0xb8_DONVV[0xb8];                               // 0x230(0xb8)
};


// Size 0x118 (Full Size[0x400] - InheritedSize[0x2e8]
class BedComponent: public SeatComponentBase
{
public:
	Struct FText                                                 DisengageVerb;                                     // 0x2e8(0x38)
	Struct FText                                                 InteractionTextTakingDamage;                       // 0x320(0x38)
	Struct FText                                                 InteractionTextBedUnderwater;                      // 0x358(0x38)
	Struct SleepingActionStateParams                             SleepingStateParams;                               // 0x390(0x50)
	char                                                         pad0x20_2WQE8[0x20];                               // 0x3e0(0x20)
};


// Size 0xe8 (Full Size[0x3d0] - InheritedSize[0x2e8]
class SeatComponent: public SeatComponentBase
{
public:
	Struct SittingActionStateParams                              SittingStateParams;                                // 0x2e8(0xa0)
	TArray<struct OnSitStats>                                    OnSitStats;                                        // 0x388(0x10)
	float                                                        CosCameraAngleToTurnOffFirstPersonMesh;            // 0x398(0x4)
	char                                                         pad0x34_0MVGI[0x34];                               // 0x39c(0x34)
};


// Size 0x2a8 (Full Size[0x678] - InheritedSize[0x3d0]
class StoolItemComponent: public SeatComponent
{
public:
	Struct FText                                                 InteractionTextOutsideMaxAngle;                    // 0x3d0(0x38)
	Struct FText                                                 InteractionTextObstructed;                         // 0x408(0x38)
	Struct FText                                                 InteractionTextFloating;                           // 0x440(0x38)
	Struct FText                                                 InteractionTextShipSinking;                        // 0x478(0x38)
	Struct FText                                                 InteractionTextHarpooned;                          // 0x4b0(0x38)
	float                                                        MaxSittingAngle;                                   // 0x4e8(0x4)
	float                                                        SeatedHeight;                                      // 0x4ec(0x4)
	float                                                        SeatedRadius;                                      // 0x4f0(0x4)
	bool                                                         IsAttachedToRetractable;                           // 0x4f4(0x1)
	bool                                                         IsAttachedToSinkingShip;                           // 0x4f5(0x1)
	bool                                                         IsFloating;                                        // 0x4f6(0x1)
	char                                                         pad0x181_NV1LX[0x181];                             // 0x4f7(0x181)
};


// Size 0x60 (Full Size[0xa8] - InheritedSize[0x48]
class SeatStat_SitOnShipOnFire: public SeatStat
{
public:
};


// Size 0x60 (Full Size[0xa8] - InheritedSize[0x48]
class SeatStat_SitOnSinkingShip: public SeatStat
{
public:
};


// Size 0x60 (Full Size[0xa8] - InheritedSize[0x48]
class SeatStat_SitWithOthers: public SeatStat
{
public:
	int                                                          PlayersSittingToFireStat;                          // 0x48(0x4)
	char                                                         pad0x5c_5B1TZ[0x5c];                               // 0x4c(0x5c)
};


// Size 0x0 (Full Size[0x48] - InheritedSize[0x48]
class SeatStat_SleepOnOtherCrewsBed: public SeatStat
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class TimeOfDayDataAsset: public DataAsset
{
public:
	float                                                        SunriseStartHour;                                  // 0x28(0x4)
	float                                                        MorningStartHour;                                  // 0x2c(0x4)
	float                                                        MidDayStartHour;                                   // 0x30(0x4)
	float                                                        AfternoonStartHour;                                // 0x34(0x4)
	float                                                        SunsetStartHour;                                   // 0x38(0x4)
	float                                                        NightStartHour;                                    // 0x3c(0x4)
};


// Size 0x30 (Full Size[0x78] - InheritedSize[0x48]
class SeatStat_TimeOfDay: public SeatStat
{
public:
	byte                                                         TimeOfDay;                                         // 0x48(0x1)
	char                                                         pad0x7_IPRM9[0x7];                                 // 0x49(0x7)
	Class TimeOfDayDataAsset*                                    TimeOfDayRanges;                                   // 0x50(0x8)
	char                                                         pad0x20_50IMH[0x20];                               // 0x58(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SittingActionStateId: public ActionStateId
{
public:
};


// Size 0x28 (Full Size[0x2c8] - InheritedSize[0x2a0]
class SittingInputComponent: public LookAtOffsetInputComponent
{
public:
	Class AthenaSpringArmComponentParams*                        ThirdPersonCameraParams;                           // 0x2a0(0x8)
	class                                                        SeatAnimationId;                                   // 0x2a8(0x8)
	char                                                         pad0x18_U3C10[0x18];                               // 0x2b0(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SittingThirdPersonCameraActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x2a0] - InheritedSize[0x2a0]
class SittingThirdPersonCameraInputComponent: public AthenaCharacterBaseInputComponentWithInterference
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SleepingActionStateId: public ActionStateId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimatableMeshInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AnimationMontageInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x38] - InheritedSize[0x38]
class AnimNotify_WieldableAnimationInterruptPoint: public AnimNotify
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationCapstanBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAnimationServerData: public AnimationServerData
{
public:
	TArray<struct AISpawnData>                                   AISpawnData;                                       // 0x28(0x10)
};


// Size 0x70 (Full Size[0x98] - InheritedSize[0x28]
class AthenaAnimationDeathDataAsset: public DataAsset
{
public:
	Class AnimSequence*                                          SwimmingSurfaceDeath;                              // 0x28(0x8)
	Class AnimSequence*                                          LocomotionDeath;                                   // 0x30(0x8)
	Class AnimSequence*                                          DrowningDeath;                                     // 0x38(0x8)
	Struct StringAssetReference                                  WakeUp;                                            // 0x40(0x10)
	Struct StringAssetReference                                  WakeUpSwimming;                                    // 0x50(0x10)
	Class BlendSpace1D*                                          DrowningDeathBS;                                   // 0x60(0x8)
	Struct StringAssetReference                                  BeckonInto;                                        // 0x68(0x10)
	Struct StringAssetReference                                  BeckonLoop;                                        // 0x78(0x10)
	class                                                        RevivingStateId;                                   // 0x88(0x8)
	class                                                        DeadStateId;                                       // 0x90(0x8)
};


// Size 0x28 (Full Size[0x50] - InheritedSize[0x28]
class AthenaAnimationUndoRepairDataAsset: public DataAsset
{
public:
	Struct StringAssetReference                                  UndoRepairInto;                                    // 0x28(0x10)
	Struct StringAssetReference                                  UndoRepairLoop;                                    // 0x38(0x10)
	class                                                        UndoRepairStateId;                                 // 0x48(0x8)
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAnimationWaterSlideDataAsset: public DataAsset
{
public:
	Class AnimSequence*                                          Into;                                              // 0x28(0x8)
	Class AnimSequence*                                          Action;                                            // 0x30(0x8)
	Class AnimSequence*                                          Outof;                                             // 0x38(0x8)
};


// Size 0x4a0 (Full Size[0x4c8] - InheritedSize[0x28]
class AthenaAnimationFishingAnimationsGroupingAsset: public DataAsset
{
public:
	class                                                        ItemId;                                            // 0x28(0x8)
	Struct AthenaAnimationAsyncLoadedFishingAnimations           FishingAnimations;                                 // 0x30(0x1e0)
	Struct AthenaAnimationAsyncLoadedLocomotionAnimations        LocomotionAnimations;                              // 0x210(0x100)
	Struct AthenaAnimationAsyncLoadedObjectJumpingAnimations     JumpingAnimations;                                 // 0x310(0x80)
	Struct AthenaAnimationAsyncLoadedObjectIdleAnimations        IdleAnimations;                                    // 0x390(0x60)
	Struct AthenaAnimationPersistentItemAnimations               PersistentLoadedAnimations;                        // 0x410(0xb8)
};


// Size 0x8 (Full Size[0x30] - InheritedSize[0x28]
class AthenaAnimationItemListingAsset: public DataAsset
{
public:
	Class AthenaAnimationFishingAnimationsGroupingAsset*         FishingRodItemGrouping;                            // 0x28(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AthenaAnimationData: public AnimationData
{
public:
	Class AthenaAnimationDeathDataAsset*                         DeathDataAsset;                                    // 0x28(0x8)
	Class AthenaAnimationUndoRepairDataAsset*                    UndoRepairAsset;                                   // 0x30(0x8)
	Class AthenaAnimationSittingDataAsset*                       SittingAsset;                                      // 0x38(0x8)
	TArray<struct FallBackSittingData>                           FallBackSittingData;                               // 0x40(0x10)
	bool                                                         UseCorrectionSittingDataAsset;                     // 0x50(0x1)
	char                                                         pad0x7_8W69I[0x7];                                 // 0x51(0x7)
	Class AthenaAnimationWaterSlideDataAsset*                    WaterSlideDataAsset;                               // 0x58(0x8)
	Class AthenaAnimationItemListingAsset*                       ItemListingAsset;                                  // 0x60(0x8)
};


// Size 0x20 (Full Size[0x88] - InheritedSize[0x68]
class AthenaAnimationThirdPersonAnimationData: public AthenaAnimationData
{
public:
	Class AthenaAnimationPulleyDataAsset*                        PulleyAnimationsDataAsset;                         // 0x68(0x8)
	Class AthenaAnimationEmoteListingAsset*                      EmoteListingAsset;                                 // 0x70(0x8)
	Class AthenaAnimationKeyedInstrumentDataAsset*               KeyedInstrumentDataAsset;                          // 0x78(0x8)
	Class AthenaAnimationSinkingTunnelDataAsset*                 SinkingTunnelDataAsset;                            // 0x80(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class FirstPersonAnimaticList: public DataAsset
{
public:
	TArray<struct NamedFirstPersonAnimatics>                     NamedFirstPersonAnimatics;                         // 0x28(0x10)
};


// Size 0x8 (Full Size[0x70] - InheritedSize[0x68]
class FirstPersonAnimationData: public AthenaAnimationData
{
public:
	Class FirstPersonAnimaticList*                               FirstPersonAnimaticList;                           // 0x68(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAnimationEmoteGroupingAsset: public DataAsset
{
public:
	TArray<struct EmoteAnimationData>                            EmoteAnimationData;                                // 0x28(0x10)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class AthenaAnimationEmoteListingAsset: public DataAsset
{
public:
	TArray<class AthenaAnimationEmoteGroupingAsset*>             EmoteGroupings;                                    // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationFirstPersonAnimaticInterface: public Interface
{
public:
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class AthenaAnimationItemListingMappingsAsset: public DataAsset
{
public:
	Struct AthenaAnimationItemListingMappingType                 MaleListings;                                      // 0x28(0x20)
	Struct AthenaAnimationItemListingMappingType                 FemaleListings;                                    // 0x48(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationJumpingBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0x40] - InheritedSize[0x28]
class AthenaAnimationKeyedInstrumentDataAsset: public DataAsset
{
public:
	Class AnimSequence*                                          Into;                                              // 0x28(0x8)
	Class AnimSequence*                                          Action;                                            // 0x30(0x8)
	Class AnimSequence*                                          Outof;                                             // 0x38(0x8)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationLadderBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationLODInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class AthenaAnimationPulleyDataAsset: public DataAsset
{
public:
	Class AnimSequence*                                          Entry;                                             // 0x28(0x8)
	Struct AthenaAnimationPulleyDataAssetEntry                   Left;                                              // 0x30(0x20)
	Struct AthenaAnimationPulleyDataAssetEntry                   Right;                                             // 0x50(0x20)
};


// Size 0x48 (Full Size[0x70] - InheritedSize[0x28]
class AthenaAnimationWeaponDataAsset: public DataAsset
{
public:
	Struct AthenaAnimationWeaponData                             WeaponData;                                        // 0x28(0x48)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class AthenaAnimationWheelBlueprintFunctions: public BlueprintFunctionLibrary
{
public:
};


// Size 0x168 (Full Size[0x190] - InheritedSize[0x28]
class DynamicAnimationAllocationTelemtry: public Object
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCAnimationInstanceOverrideInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NPCAnimationInteractionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ServerAnimationSpawnDataProviderInterface: public Interface
{
public:
};


}