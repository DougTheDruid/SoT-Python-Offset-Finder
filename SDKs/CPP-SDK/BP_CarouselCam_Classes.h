#pragma once

// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid

// Size 0x28d (Full Size[0x655] - InheritedSize[0x3c8]
class BP_CarouselCam_C: public Actor
{
public:
	struct PointerToUberGraphFrame                               UberGraphFrame;                                    // 0x3c8(0x8)
	class DecalComponent*                                        lockedIcon07;                                      // 0x3d0(0x8)
	class DecalComponent*                                        lockedIcon06;                                      // 0x3d8(0x8)
	class DecalComponent*                                        lockedIcon05;                                      // 0x3e0(0x8)
	class DecalComponent*                                        lockedIcon04;                                      // 0x3e8(0x8)
	class DecalComponent*                                        lockedIcon03;                                      // 0x3f0(0x8)
	class DecalComponent*                                        lockedIcon02;                                      // 0x3f8(0x8)
	class DecalComponent*                                        lockedIcon01;                                      // 0x400(0x8)
	class DecalComponent*                                        lockedIcon00;                                      // 0x408(0x8)
	class SpotLightComponent*                                    charLight_floor_Select_SpotL;                      // 0x410(0x8)
	class SpotLightComponent*                                    charLight_rear_Select_SpotL;                       // 0x418(0x8)
	class SpotLightComponent*                                    charLight_left_Select_SpotL;                       // 0x420(0x8)
	class SpotLightComponent*                                    charLight_right_Select_SpotL;                      // 0x428(0x8)
	class SpotLightComponent*                                    charLight_right_Far_SpotL;                         // 0x430(0x8)
	class SpotLightComponent*                                    charLight_rear_Far_SpotL;                          // 0x438(0x8)
	class SpotLightComponent*                                    charLight_floor_Far_SpotL;                         // 0x440(0x8)
	class SpotLightComponent*                                    charLight_left_Far_SpotL;                          // 0x448(0x8)
	class SpotLightComponent*                                    charLight_floor_HighL_SpotL;                       // 0x450(0x8)
	class SpotLightComponent*                                    charLight_rear_HighL_SpotL;                        // 0x458(0x8)
	class SpotLightComponent*                                    charLight_left_HighL_SpotL;                        // 0x460(0x8)
	class SpotLightComponent*                                    charLight_right_HighL_SpotL;                       // 0x468(0x8)
	class SceneComponent*                                        Lights;                                            // 0x470(0x8)
	class CameraComponent*                                       Camera;                                            // 0x478(0x8)
	class StaticMeshComponent*                                    camAim;                                           // 0x480(0x8)
	class SceneComponent*                                        DefaultSceneRoot;                                  // 0x488(0x8)
	struct Rotator                                               camAimRot;                                         // 0x490(0xc)
	char                                                         pad0x4_4V18O[0x4];                                 // 0x49c(0x4)
	class CurveFloat*                                            camSpeed;                                          // 0x4a0(0x8)
	float                                                        initTime;                                          // 0x4a8(0x4)
	float                                                        Timespan;                                          // 0x4ac(0x4)
	float                                                        currTime;                                          // 0x4b0(0x4)
	float                                                        camAimRotZ;                                        // 0x4b4(0x4)
	float                                                        rotPerChar;                                        // 0x4b8(0x4)
	float                                                        MaxTimeSpan;                                       // 0x4bc(0x4)
	float                                                        rotOverTime;                                       // 0x4c0(0x4)
	bool                                                         rotMatch;                                          // 0x4c4(0x1)
	char                                                         pad0x3_7QAEW[0x3];                                 // 0x4c5(0x3)
	class CurveFloat*                                            camZoom;                                           // 0x4c8(0x8)
	float                                                        selectedZoomDist;                                  // 0x4d0(0x4)
	float                                                        zoomResult;                                        // 0x4d4(0x4)
	struct Vector                                                initCamLoc;                                        // 0x4d8(0xc)
	float                                                        startZoomDist;                                     // 0x4e4(0x4)
	float                                                        camAimRot;                                         // 0x4e8(0x4)
	float                                                        camAimRot_delta;                                   // 0x4ec(0x4)
	float                                                        camRotationFactor;                                 // 0x4f0(0x4)
	float                                                        rotPerChar_userSet;                                // 0x4f4(0x4)
	float                                                        endZoomDist;                                       // 0x4f8(0x4)
	float                                                        highlightZoomDist;                                 // 0x4fc(0x4)
	float                                                        IdleTime;                                          // 0x500(0x4)
	float                                                        MaxIdleTime;                                       // 0x504(0x4)
	bool                                                         idleStatus;                                        // 0x508(0x1)
	char                                                         pad0x3_O3DWK[0x3];                                 // 0x509(0x3)
	int                                                          sectorID;                                          // 0x50c(0x4)
	float                                                        sectorOffset;                                      // 0x510(0x4)
	int                                                          lightFadeScale;                                    // 0x514(0x4)
	TArray<class LightComponent*>                                highLLightSet;                                     // 0x518(0x10)
	TArray<float>                                                highLLightIntensity;                               // 0x528(0x10)
	TArray<class LightComponent*>                                selectLightSet;                                    // 0x538(0x10)
	TArray<float>                                                selectLightIntensity;                              // 0x548(0x10)
	float                                                        LightIntensity;                                    // 0x558(0x4)
	float                                                        sectorRemainder;                                   // 0x55c(0x4)
	int                                                          lastSectorID;                                      // 0x560(0x4)
	char                                                         pad0x4_82XEX[0x4];                                 // 0x564(0x4)
	class CurveFloat*                                            lightFade;                                         // 0x568(0x8)
	bool                                                         rotSnapDone;                                       // 0x570(0x1)
	char                                                         pad0x7_97HVX[0x7];                                 // 0x571(0x7)
	class CurveFloat*                                            HighLight_camFOV;                                  // 0x578(0x8)
	class CurveVector*                                           HighLight_camRot;                                  // 0x580(0x8)
	class CurveVector*                                           HighLight_camLoc;                                  // 0x588(0x8)
	float                                                        highlightZoomHeight;                               // 0x590(0x4)
	float                                                        ZoomTime;                                          // 0x594(0x4)
	class CurveVector*                                           select_camZoomRot;                                 // 0x598(0x8)
	class CurveFloat*                                            Select_camZoomFOV;                                 // 0x5a0(0x8)
	class CurveVector*                                           select_camZoomLoc;                                 // 0x5a8(0x8)
	class CurveVector*                                           camRot;                                            // 0x5b0(0x8)
	class CurveVector*                                           CamLoc;                                            // 0x5b8(0x8)
	class CurveFloat*                                            camFOV;                                            // 0x5c0(0x8)
	struct Vector                                                currCamLoc;                                        // 0x5c8(0xc)
	float                                                        camRotSnapFactor;                                  // 0x5d4(0x4)
	TArray<class DecalComponent*>                                lockIcons;                                         // 0x5d8(0x10)
	class MaterialInstance*                                      MI_lockIcon;                                       // 0x5e8(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon00;                                     // 0x5f0(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon01;                                     // 0x5f8(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon02;                                     // 0x600(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon03;                                     // 0x608(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon04;                                     // 0x610(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon05;                                     // 0x618(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon06;                                     // 0x620(0x8)
	class MaterialInstanceDynamic*                               DM_lockIcon07;                                     // 0x628(0x8)
	TArray<class MaterialInstanceDynamic*>                       DM_lockIcon_Set;                                   // 0x630(0x10)
	struct LinearColor                                           RGB;                                               // 0x640(0x10)
	float                                                        maxLockIconOpacity;                                // 0x650(0x4)
	bool                                                         IconFadeDone;                                      // 0x654(0x1)
};


