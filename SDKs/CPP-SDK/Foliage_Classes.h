#pragma once

// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid

#include "Foliage_Structs.h"


// Size 0x128 (Full Size[0x150] - InheritedSize[0x28]
class ProceduralFoliageTile: public Object
{
public:
	class ProceduralFoliageSpawner*                              FoliageSpawner;                                    // 0x28(0x8)
	char                                                         pad0xa0_BGPQM[0xa0];                               // 0x30(0xa0)
	TArray<struct ProceduralFoliageInstance>                     InstancesArray;                                    // 0xd0(0x10)
	char                                                         pad0x70_H4RJ1[0x70];                               // 0xe0(0x70)
};


// Size 0x60 (Full Size[0x410] - InheritedSize[0x3b0]
class InteractiveFoliageActor: public StaticMeshActor
{
public:
	class CapsuleComponent*                                      CapsuleComponent;                                  // 0x3b0(0x8)
	struct Vector                                                TouchingActorEntryPosition;                        // 0x3b8(0xc)
	struct Vector                                                FoliageVelocity;                                   // 0x3c4(0xc)
	struct Vector                                                FoliageForce;                                      // 0x3d0(0xc)
	struct Vector                                                FoliagePosition;                                   // 0x3dc(0xc)
	float                                                        FoliageDamageImpulseScale;                         // 0x3e8(0x4)
	float                                                        FoliageTouchImpulseScale;                          // 0x3ec(0x4)
	float                                                        FoliageStiffness;                                  // 0x3f0(0x4)
	float                                                        FoliageStiffnessQuadratic;                         // 0x3f4(0x4)
	float                                                        FoliageDamping;                                    // 0x3f8(0x4)
	float                                                        MaxDamageImpulse;                                  // 0x3fc(0x4)
	float                                                        MaxTouchImpulse;                                   // 0x400(0x4)
	float                                                        MaxForce;                                          // 0x404(0x4)
	float                                                        Mass;                                              // 0x408(0x4)
	char                                                         pad0x4_BJC98[0x4];                                 // 0x40c(0x4)
};


// Size 0x8 (Full Size[0x3e0] - InheritedSize[0x3d8]
class ProceduralFoliageVolume: public Volume
{
public:
	class ProceduralFoliageComponent*                            ProceduralComponent;                               // 0x3d8(0x8)
};


// Size 0x50 (Full Size[0x3f0] - InheritedSize[0x3a0]
class InstancedFoliageActor: public Actor
{
public:
	char                                                         pad0x50_BRJX4[0x50];                               // 0x3a0(0x50)
};


// Size 0x338 (Full Size[0x360] - InheritedSize[0x28]
class FoliageType: public Object
{
public:
	struct Guid                                                  UpdateGuid;                                        // 0x28(0x10)
	float                                                        Density;                                           // 0x38(0x4)
	float                                                        DensityAdjustmentFactor;                           // 0x3c(0x4)
	float                                                        Radius;                                            // 0x40(0x4)
	char                                                         Scaling;                                           // 0x44(0x1)
	char                                                         pad0x3_BODWO[0x3];                                 // 0x45(0x3)
	struct FloatInterval                                         ScaleX;                                            // 0x48(0x8)
	struct FloatInterval                                         ScaleY;                                            // 0x50(0x8)
	struct FloatInterval                                         ScaleZ;                                            // 0x58(0x8)
	char                                                         VertexColorMask;                                   // 0x60(0x1)
	char                                                         pad0x3_1B8RD[0x3];                                 // 0x61(0x3)
	float                                                        VertexColorMaskThreshold;                          // 0x64(0x4)
	bool                                                         VertexColorMaskInvert;                             // 0x68(0x1)
	char                                                         pad0x3_P89AW[0x3];                                 // 0x69(0x3)
	struct FloatInterval                                         ZOffset;                                           // 0x6c(0x8)
	bool                                                         AlignToNormal;                                     // 0x74(0x1)
	char                                                         pad0x3_GO4TF[0x3];                                 // 0x75(0x3)
	float                                                        AlignMaxAngle;                                     // 0x78(0x4)
	bool                                                         RandomYaw;                                         // 0x7c(0x1)
	char                                                         pad0x3_P12Z8[0x3];                                 // 0x7d(0x3)
	float                                                        RandomPitchAngle;                                  // 0x80(0x4)
	struct FloatInterval                                         GroundSlopeAngle;                                  // 0x84(0x8)
	struct FloatInterval                                         Height;                                            // 0x8c(0x8)
	char                                                         pad0x4_23TD9[0x4];                                 // 0x94(0x4)
	TArray<struct Name>                                          LandscapeLayers;                                   // 0x98(0x10)
	struct FName                                                 LandscapeLayer;                                    // 0xa8(0x8)
	bool                                                         CollisionWithWorld;                                // 0xb0(0x1)
	char                                                         pad0x3_XDT36[0x3];                                 // 0xb1(0x3)
	struct Vector                                                CollisionScale;                                    // 0xb4(0xc)
	float                                                        MinimumLayerWeight;                                // 0xc0(0x4)
	struct BoxSphereBounds                                       MeshBounds;                                        // 0xc4(0x1c)
	struct Vector                                                LowBoundOriginRadius;                              // 0xe0(0xc)
	char                                                         Mobility;                                          // 0xec(0x1)
	char                                                         pad0x3_KTTW1[0x3];                                 // 0xed(0x3)
	struct Int32Interval                                         CullDistance;                                      // 0xf0(0x8)
	bool                                                         bEnableStaticLighting;                             // 0xf8(0x1)
	bool                                                         CastShadow;                                        // 0xf8(0x1)
	bool                                                         bAffectDynamicIndirectLighting;                    // 0xf8(0x1)
	bool                                                         bAffectDistanceFieldLighting;                      // 0xf8(0x1)
	bool                                                         bCastDynamicShadow;                                // 0xf8(0x1)
	bool                                                         bCastStaticShadow;                                 // 0xf8(0x1)
	bool                                                         bCastShadowAsTwoSided;                             // 0xf8(0x1)
	bool                                                         bReceivesDecals;                                   // 0xf8(0x1)
	bool                                                         bOverrideLightMapRes;                              // 0xf9(0x1)
	char                                                         pad0x2_NHX0O[0x2];                                 // 0xfa(0x2)
	int                                                          OverriddenLightMapRes;                             // 0xfc(0x4)
	bool                                                         bUseAsOccluder;                                    // 0x100(0x1)
	char                                                         pad0x7_BC6Z2[0x7];                                 // 0x101(0x7)
	struct BodyInstance                                          BodyInstance;                                      // 0x108(0x180)
	char                                                         CustomNavigableGeometry;                           // 0x288(0x1)
	char                                                         pad0x7_JMODD[0x7];                                 // 0x289(0x7)
	bool                                                         IsSelected;                                        // 0x298(0x1)
	char                                                         pad0x3_GI5HZ[0x3];                                 // 0x299(0x3)
	float                                                        CollisionRadius;                                   // 0x29c(0x4)
	float                                                        ShadeRadius;                                       // 0x2a0(0x4)
	int                                                          NumSteps;                                          // 0x2a4(0x4)
	float                                                        InitialSeedDensity;                                // 0x2a8(0x4)
	float                                                        AverageSpreadDistance;                             // 0x2ac(0x4)
	float                                                        SpreadVariance;                                    // 0x2b0(0x4)
	int                                                          SeedsPerStep;                                      // 0x2b4(0x4)
	int                                                          DistributionSeed;                                  // 0x2b8(0x4)
	float                                                        MaxInitialSeedOffset;                              // 0x2bc(0x4)
	bool                                                         bCanGrowInShade;                                   // 0x2c0(0x1)
	bool                                                         bSpawnsInShade;                                    // 0x2c1(0x1)
	char                                                         pad0x2_M0WE3[0x2];                                 // 0x2c2(0x2)
	float                                                        MaxInitialAge;                                     // 0x2c4(0x4)
	float                                                        MaxAge;                                            // 0x2c8(0x4)
	float                                                        OverlapPriority;                                   // 0x2cc(0x4)
	struct FloatInterval                                         ProceduralScale;                                   // 0x2d0(0x8)
	struct RuntimeFloatCurve                                     ScaleCurve;                                        // 0x2d8(0x80)
	int                                                          ChangeCount;                                       // 0x358(0x4)
	bool                                                         ReapplyDensity;                                    // 0x35c(0x1)
	bool                                                         ReapplyRadius;                                     // 0x35c(0x1)
	bool                                                         ReapplyAlignToNormal;                              // 0x35c(0x1)
	bool                                                         ReapplyRandomYaw;                                  // 0x35c(0x1)
	bool                                                         ReapplyScaling;                                    // 0x35c(0x1)
	bool                                                         ReapplyScaleX;                                     // 0x35c(0x1)
	bool                                                         ReapplyScaleY;                                     // 0x35c(0x1)
	bool                                                         ReapplyScaleZ;                                     // 0x35c(0x1)
	bool                                                         ReapplyRandomPitchAngle;                           // 0x35d(0x1)
	bool                                                         ReapplyGroundSlope;                                // 0x35d(0x1)
	bool                                                         ReapplyHeight;                                     // 0x35d(0x1)
	bool                                                         ReapplyLandscapeLayers;                            // 0x35d(0x1)
	bool                                                         ReapplyZOffset;                                    // 0x35d(0x1)
	bool                                                         ReapplyCollisionWithWorld;                         // 0x35d(0x1)
	bool                                                         ReapplyVertexColorMask;                            // 0x35d(0x1)
	char                                                         pad0x2_8GCH1[0x2];                                 // 0x35e(0x2)
};


// Size 0x28 (Full Size[0xe0] - InheritedSize[0xb8]
class ProceduralFoliageComponent: public ActorComponent
{
public:
	class ProceduralFoliageSpawner*                              FoliageSpawner;                                    // 0xb8(0x8)
	float                                                        TileOverlap;                                       // 0xc0(0x4)
	char                                                         pad0x4_2S31K[0x4];                                 // 0xc4(0x4)
	class Volume*                                                SpawningVolume;                                    // 0xc8(0x8)
	struct Guid                                                  ProceduralGuid;                                    // 0xd0(0x10)
};


// Size 0x20 (Full Size[0x7a0] - InheritedSize[0x780]
class FoliageInstancedStaticMeshComponent: public HierarchicalInstancedStaticMeshComponent
{
public:
	char                                                         pad0x20_4VTGV[0x20];                               // 0x780(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FoliageStatistics: public BlueprintFunctionLibrary
{
public:
};


// Size 0x8 (Full Size[0x3e0] - InheritedSize[0x3d8]
class ProceduralFoliageBlockingVolume: public Volume
{
public:
	class ProceduralFoliageVolume*                               ProceduralFoliageVolume;                           // 0x3d8(0x8)
};


// Size 0x40 (Full Size[0x68] - InheritedSize[0x28]
class ProceduralFoliageSpawner: public Object
{
public:
	int                                                          RandomSeed;                                        // 0x28(0x4)
	float                                                        TileSize;                                          // 0x2c(0x4)
	int                                                          NumUniqueTiles;                                    // 0x30(0x4)
	char                                                         pad0x4_R2HS0[0x4];                                 // 0x34(0x4)
	TArray<struct FoliageTypeObject>                             FoliageTypes;                                      // 0x38(0x10)
	bool                                                         bNeedsSimulation;                                  // 0x48(0x1)
	char                                                         pad0x1f_4FG2E[0x1f];                               // 0x49(0x1f)
};


// Size 0x10 (Full Size[0x610] - InheritedSize[0x600]
class InteractiveFoliageComponent: public StaticMeshComponent
{
public:
	char                                                         pad0x10_BVEHK[0x10];                               // 0x600(0x10)
};


// Size 0x20 (Full Size[0x380] - InheritedSize[0x360]
class FoliageType_InstancedStaticMesh: public FoliageType
{
public:
	class StaticMesh*                                            Mesh;                                              // 0x360(0x8)
	TArray<class MaterialInterface*>                             OverrideMaterials;                                 // 0x368(0x10)
	class UClass*                                                ComponentClass;                                    // 0x378(0x8)
};


