#pragma once

// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid

#include "Water_Structs.h"


// Size 0x58 (Full Size[0x110] - InheritedSize[0xb8]
class SplashProbeVFXComponent: public ActorComponent
{
public:
	char                                                         pad0x28_SQHYT[0x28];                               // 0xb8(0x28)
	class SplashProbeDataAsset*                                  Probes;                                            // 0xe0(0x8)
	class SplashProbeDataAsset*                                  ProbesInstance;                                    // 0xe8(0x8)
	struct ActorComponentSelector                                AttachProbesToOwner;                               // 0xf0(0x10)
	class SceneComponent*                                        AttachProbesToComponent;                           // 0x100(0x8)
	bool                                                         ProbeEnabled;                                      // 0x108(0x1)
	char                                                         pad0x7_P0GYC[0x7];                                 // 0x109(0x7)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class NoSwimWaterId: public WaterId
{
public:
};


// Size 0x10 (Full Size[0x5c0] - InheritedSize[0x5b0]
class FlatWaterPlaneComponent: public BaseWaterComponent
{
public:
	char                                                         pad0x10_1J0NF[0x10];                               // 0x5b0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterEmissionVolumeInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class UndergroundSeaWaterId: public WaterId
{
public:
};


// Size 0x20 (Full Size[0x5f0] - InheritedSize[0x5d0]
class WaterInteractionComponent: public BoxComponent
{
public:
	char                                                         pad0x14_5EJH6[0x14];                               // 0x5d0(0x14)
	int                                                          ServerCorrectedWaterExclusionZoneCount;            // 0x5e4(0x4)
	char                                                         pad0x8_2ZGE5[0x8];                                 // 0x5e8(0x8)
};


// Size 0x20 (Full Size[0x48] - InheritedSize[0x28]
class WaterEmissionVolumeService: public Object
{
public:
	char                                                         pad0x20_ZJQNI[0x20];                               // 0x28(0x20)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class FFTWaterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterSplashProbeFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x18 (Full Size[0xd0] - InheritedSize[0xb8]
class WaterPlaneExclusionComponent: public ActorComponent
{
public:
	char                                                         pad0x8_VFW6W[0x8];                                 // 0xb8(0x8)
	struct ActorComponentSelector                                UseSpecificComponentForOverlaps;                   // 0xc0(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterExclusionSurfaceInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterVolumeInterface: public Interface
{
public:
};


// Size 0x90 (Full Size[0x148] - InheritedSize[0xb8]
class WaterSpoutVFXComponent: public ActorComponent
{
public:
	TArray<struct WaterSpout>                                    WaterSpouts;                                       // 0xb8(0x10)
	struct Vector                                                SplashEffectPointBottomZ;                          // 0xc8(0xc)
	char                                                         pad0x4_RSS3P[0x4];                                 // 0xd4(0x4)
	class Object*                                                SpoutParticleSystem;                               // 0xd8(0x8)
	class Object*                                                SplashParticleSystem;                              // 0xe0(0x8)
	float                                                        WaterSplashDelayMin;                               // 0xe8(0x4)
	float                                                        WaterSplashDelayMax;                               // 0xec(0x4)
	float                                                        SplashEffectVFXOffset;                             // 0xf0(0x4)
	float                                                        SplashSweepRadius;                                 // 0xf4(0x4)
	bool                                                         ShouldSpawnKillPlaneAtSplash;                      // 0xf8(0x1)
	char                                                         pad0x7_384OU[0x7];                                 // 0xf9(0x7)
	class StaticMesh*                                            SplashKillPlaneMesh;                               // 0x100(0x8)
	struct Vector                                                SplashKillPlaneScale;                              // 0x108(0xc)
	char                                                         pad0x4_UQUWA[0x4];                                 // 0x114(0x4)
	class StaticMeshComponent*                                   SplashKillPlane;                                   // 0x118(0x8)
	TArray<struct WaterSpout>                                    ActiveWaterSpouts;                                 // 0x120(0x10)
	char                                                         pad0x18_LXEVQ[0x18];                               // 0x130(0x18)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterBuoyancyFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterPlaneInterface: public Interface
{
public:
};


// Size 0x48 (Full Size[0x430] - InheritedSize[0x3e8]
class AthenaFFTWater: public FFTWater
{
public:
	char                                                         pad0x48_RJ18V[0x48];                               // 0x3e8(0x48)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class WaterProperties: public Object
{
public:
	TArray<struct WaterInformation>                              WaterInfo;                                         // 0x28(0x10)
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterPlaneExclusionInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterBuoyancySampleMovementFunctionLibrary: public BlueprintFunctionLibrary
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class WaterPlaneRetrievalProviderInterface: public Interface
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class SeaWaterId: public WaterId
{
public:
};


// Size 0x0 (Full Size[0x28] - InheritedSize[0x28]
class ShipWaterId: public WaterId
{
public:
};


// Size 0x80 (Full Size[0x420] - InheritedSize[0x3a0]
class FFTWaterService: public Actor
{
public:
	char                                                         pad0x78_84BNU[0x78];                               // 0x3a0(0x78)
	double                                                       ReplicatedServerCreationTime;                      // 0x418(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class SplashProbeDataAsset: public DataAsset
{
public:
	TArray<struct SplashProbe>                                   Probes;                                            // 0x28(0x10)
};


// Size 0x8 (Full Size[0x3b0] - InheritedSize[0x3a8]
class AthenaWaterEmissionVolume: public WaterEmissionVolume
{
public:
	char                                                         pad0x8_GSRPQ[0x8];                                 // 0x3a8(0x8)
};


// Size 0x10 (Full Size[0x38] - InheritedSize[0x28]
class MockWaterInterface: public Object
{
public:
	char                                                         pad0x10_PJD1H[0x10];                               // 0x28(0x10)
};


// Size 0x8 (Full Size[0x40] - InheritedSize[0x38]
class MockWaterServiceWithValidWaterPlane: public MockWaterInterface
{
public:
	class FFTWaterComponent*                                     DefaultWaterComponent;                             // 0x38(0x8)
};


