#pragma once

// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid

// Size 0x58
struct AnimNode_SkeletalControlBase
{
public:
	struct ComponentSpacePoseLink                                ComponentPose;                                     // 0x30(0x18)
	float                                                        Alpha;                                             // 0x48(0x4)
	struct InputScaleBias                                        AlphaScaleBias;                                    // 0x4c(0x8)
};


// Size 0xa8
struct AnimNode_SpringBone
{
public:
	struct BoneReference                                         SpringBone;                                        // 0x58(0xc)
	bool                                                         bLimitDisplacement;                                // 0x64(0x1)
	float                                                        MaxDisplacement;                                   // 0x68(0x4)
	float                                                        SpringStiffness;                                   // 0x6c(0x4)
	float                                                        SpringDamping;                                     // 0x70(0x4)
	float                                                        ErrorResetThresh;                                  // 0x74(0x4)
	bool                                                         bNoZSpring;                                        // 0x78(0x1)
	bool                                                         bTranslateX;                                       // 0x79(0x1)
	bool                                                         bTranslateY;                                       // 0x7a(0x1)
	bool                                                         bTranslateZ;                                       // 0x7b(0x1)
	bool                                                         bRotateX;                                          // 0x7c(0x1)
	bool                                                         bRotateY;                                          // 0x7d(0x1)
	bool                                                         bRotateZ;                                          // 0x7e(0x1)
};


// Size 0x78
struct AnimNode_CopyBone
{
public:
	struct BoneReference                                         SourceBone;                                        // 0x58(0xc)
	struct BoneReference                                         TargetBone;                                        // 0x64(0xc)
	bool                                                         bCopyTranslation;                                  // 0x70(0x1)
	bool                                                         bCopyRotation;                                     // 0x71(0x1)
	bool                                                         bCopyScale;                                        // 0x72(0x1)
};


// Size 0xe0
struct AnimNode_Trail
{
public:
	struct BoneReference                                         TrailBone;                                         // 0x58(0xc)
	int                                                          ChainLength;                                       // 0x64(0x4)
	char                                                         ChainBoneAxis;                                     // 0x68(0x1)
	bool                                                         bInvertChainBoneAxis;                              // 0x69(0x1)
	bool                                                         bLimitStretch;                                     // 0x6a(0x1)
	float                                                        TrailRelaxation;                                   // 0x6c(0x4)
	float                                                        StretchLimit;                                      // 0x70(0x4)
	struct Vector                                                FakeVelocity;                                      // 0x74(0xc)
	bool                                                         bActorSpaceFakeVel;                                // 0x80(0x1)
};


// Size 0xd0
struct AnimNode_Fabrik
{
public:
	struct Transform                                             EffectorTransform;                                 // 0x60(0x30)
	char                                                         EffectorTransformSpace;                            // 0x90(0x1)
	struct BoneReference                                         EffectorTransformBone;                             // 0x94(0xc)
	char                                                         EffectorRotationSource;                            // 0xa0(0x1)
	struct BoneReference                                         TipBone;                                           // 0xa4(0xc)
	struct BoneReference                                         RootBone;                                          // 0xb0(0xc)
	float                                                        Precision;                                         // 0xbc(0x4)
	int                                                          MaxIterations;                                     // 0xc0(0x4)
	bool                                                         bEnableDebugDraw;                                  // 0xc4(0x1)
};


// Size 0xa0
struct AnimNode_TwoBoneIK
{
public:
	struct BoneReference                                         IKBone;                                            // 0x58(0xc)
	struct Vector                                                EffectorLocation;                                  // 0x64(0xc)
	struct Vector                                                JointTargetLocation;                               // 0x70(0xc)
	struct Vector2D                                              StretchLimits;                                     // 0x7c(0x8)
	struct FName                                                 EffectorSpaceBoneName;                             // 0x84(0x8)
	bool                                                         bTakeRotationFromEffectorSpace;                    // 0x8c(0x1)
	bool                                                         bMaintainEffectorRelRot;                           // 0x8c(0x1)
	bool                                                         bAllowStretching;                                  // 0x8c(0x1)
	char                                                         EffectorLocationSpace;                             // 0x90(0x1)
	char                                                         JointTargetLocationSpace;                          // 0x91(0x1)
	struct FName                                                 JointTargetSpaceBoneName;                          // 0x94(0x8)
};


// Size 0x90
struct AnimNode_ObserveBone
{
public:
	struct BoneReference                                         BoneToObserve;                                     // 0x58(0xc)
	char                                                         DisplaySpace;                                      // 0x64(0x1)
	bool                                                         bRelativeToRefPose;                                // 0x65(0x1)
	struct Vector                                                Translation;                                       // 0x68(0xc)
	struct Rotator                                               Rotation;                                          // 0x74(0xc)
	struct Vector                                                Scale;                                             // 0x80(0xc)
};


// Size 0xc0
struct AnimNode_CopyPoseFromMesh
{
public:
	class SkeletalMeshComponent*                                 SourceMeshComponent;                               // 0x30(0x8)
	bool                                                         bUseAttachedParent;                                // 0x38(0x1)
};


// Size 0x90
struct AnimNode_ModifyBone
{
public:
	struct BoneReference                                         BoneToModify;                                      // 0x58(0xc)
	struct Vector                                                Translation;                                       // 0x64(0xc)
	struct Rotator                                               Rotation;                                          // 0x70(0xc)
	struct Vector                                                Scale;                                             // 0x7c(0xc)
	char                                                         TranslationMode;                                   // 0x88(0x1)
	char                                                         RotationMode;                                      // 0x89(0x1)
	char                                                         ScaleMode;                                         // 0x8a(0x1)
	char                                                         TranslationSpace;                                  // 0x8b(0x1)
	char                                                         RotationSpace;                                     // 0x8c(0x1)
	char                                                         ScaleSpace;                                        // 0x8d(0x1)
};


// Size 0x78
struct AnimNode_RotationMultiplier
{
public:
	struct BoneReference                                         TargetBone;                                        // 0x58(0xc)
	struct BoneReference                                         SourceBone;                                        // 0x64(0xc)
	float                                                        Multiplier;                                        // 0x70(0x4)
	char                                                         RotationAxisToRefer;                               // 0x74(0x1)
	bool                                                         bIsAdditive;                                       // 0x75(0x1)
};


// Size 0xa0
struct AnimNode_HandIKRetargeting
{
public:
	struct BoneReference                                         RightHandFK;                                       // 0x58(0xc)
	struct BoneReference                                         LeftHandFK;                                        // 0x64(0xc)
	struct BoneReference                                         RightHandIK;                                       // 0x70(0xc)
	struct BoneReference                                         LeftHandIK;                                        // 0x7c(0xc)
	TArray<struct BoneReference>                                 IKBonesToMove;                                     // 0x88(0x10)
	float                                                        HandFKWeight;                                      // 0x98(0x4)
};


// Size 0xa0
struct AnimNode_BoneDrivenController
{
public:
	struct BoneReference                                         SourceBone;                                        // 0x58(0xc)
	char                                                         SourceComponent;                                   // 0x64(0x1)
	class CurveFloat*                                            DrivingCurve;                                      // 0x68(0x8)
	float                                                        Multiplier;                                        // 0x70(0x4)
	bool                                                         bUseRange;                                         // 0x74(0x1)
	float                                                        RangeMin;                                          // 0x78(0x4)
	float                                                        RangeMax;                                          // 0x7c(0x4)
	float                                                        RemappedMin;                                       // 0x80(0x4)
	float                                                        RemappedMax;                                       // 0x84(0x4)
	struct BoneReference                                         TargetBone;                                        // 0x88(0xc)
	char                                                         TargetComponent;                                   // 0x94(0x1)
	bool                                                         bAffectTargetTranslationX;                         // 0x98(0x1)
	bool                                                         bAffectTargetTranslationY;                         // 0x98(0x1)
	bool                                                         bAffectTargetTranslationZ;                         // 0x98(0x1)
	bool                                                         bAffectTargetRotationX;                            // 0x98(0x1)
	bool                                                         bAffectTargetRotationY;                            // 0x98(0x1)
	bool                                                         bAffectTargetRotationZ;                            // 0x98(0x1)
	bool                                                         bAffectTargetScaleX;                               // 0x98(0x1)
	bool                                                         bAffectTargetScaleY;                               // 0x98(0x1)
	bool                                                         bAffectTargetScaleZ;                               // 0x99(0x1)
	char                                                         ModificationMode;                                  // 0x9c(0x1)
};


// Size 0xc0
struct AnimNode_LookAt
{
public:
	struct BoneReference                                         BoneToModify;                                      // 0x58(0xc)
	struct BoneReference                                         LookAtBone;                                        // 0x64(0xc)
	struct Vector                                                LookAtLocation;                                    // 0x70(0xc)
	char                                                         LookAtAxis;                                        // 0x7c(0x1)
	bool                                                         bUseLookUpAxis;                                    // 0x7d(0x1)
	char                                                         LookUpAxis;                                        // 0x7e(0x1)
	float                                                        LookAtClamp;                                       // 0x80(0x4)
	char                                                         InterpolationType;                                 // 0x84(0x1)
	float                                                        InterpolationTime;                                 // 0x88(0x4)
	float                                                        InterpolationTriggerThreashold;                    // 0x8c(0x4)
	bool                                                         bEnableDebug;                                      // 0x90(0x1)
};


