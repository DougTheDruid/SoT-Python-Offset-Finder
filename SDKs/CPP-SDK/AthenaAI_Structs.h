// Generated by dougthedruid on Discord
// https://github.com/DougTheDruid
namespace DougsSDKDumper
{
//-----
// Classes
//-----

// Size 0xc
struct AIAbilityDebugReplicatedIntervals
{
public:
	float                                                        ActivationTimerCooldown;                           // 0x0(0x4)
	float                                                        TimeBeforeNextExecution;                           // 0x4(0x4)
	float                                                        DamageBeforeNextExecution;                         // 0x8(0x4)
};


// Size 0x28
struct AttackableTypeToAnimMapping
{
public:
	byte                                                         AttackType;                                        // 0x0(0x1)
	char                                                         pad0x7_NZBO4[0x7];                                 // 0x1(0x7)
	Class Object*                                                AnimMontage;                                       // 0x8(0x8)
	bool                                                         PlayAsDynamicMontage;                              // 0x10(0x1)
	char                                                         pad0x3_4HYYH[0x3];                                 // 0x11(0x3)
	float                                                        AnimLength;                                        // 0x14(0x4)
	float                                                        TimeIntoAnimOfAttack;                              // 0x18(0x4)
	float                                                        TargetKnockBackStrength;                           // 0x1c(0x4)
	struct FName                                                 RumbleTag;                                         // 0x20(0x8)
};


// Size 0x38
struct SwimAttackTargetShipImpulseData
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	float                                                        PushImpulseForce;                                  // 0x8(0x4)
	Struct Vector                                                PushImpulseLocation;                               // 0xc(0xc)
	float                                                        PushForceScalingFactorForeAndAftOfShipLowerBound;  // 0x18(0x4)
	float                                                        PushForceScalingFactorForeAndAftOfShipUpperBound;  // 0x1c(0x4)
	float                                                        RollImpulseForce;                                  // 0x20(0x4)
	Struct Vector                                                RollImpulseLocation;                               // 0x24(0xc)
	float                                                        RollForceScalingFactorForeAndAftOfShipLowerBound;  // 0x30(0x4)
	float                                                        RollForceScalingFactorForeAndAftOfShipUpperBound;  // 0x34(0x4)
};


// Size 0xf0
struct WeightedAISpawnTypeParams
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	int                                                          MaxTimesCanBeSelected;                             // 0x4(0x4)
	Struct AISpawnTypeParams                                     Params;                                            // 0x8(0xe8)
};


// Size 0xe8
struct AISpawnTypeParams
{
public:
	Struct StringAssetReference                                  SkillsetOverride;                                  // 0x20(0x10)
	Struct StringAssetReference                                  LoadoutOverride;                                   // 0x30(0x10)
	Struct StringAssetReference                                  FormOverride;                                      // 0x40(0x10)
	Struct StringAssetReference                                  AmmoOverride;                                      // 0x50(0x10)
	class                                                        AIClassIdOverride;                                 // 0x80(0x8)
	Struct StringAssetReference                                  TeamColorOverride;                                 // 0x88(0x10)
	Struct EncounterParams                                       EncounterTrackingParams;                           // 0x98(0xc)
	struct FName                                                 DioramaRole;                                       // 0xa4(0x8)
	char                                                         pad0x4_DTFAK[0x4];                                 // 0xac(0x4)
	Struct FText                                                 LocalisableName;                                   // 0xb0(0x38)
};


// Size 0x8
struct AIPartId
{
public:
	struct FName                                                 PartId;                                            // 0x0(0x8)
};


// Size 0xc8
struct AIBountySpawnerParams
{
public:
	TArray<struct AISpawnerCreationDesc>                         AISpawnerCreationDesc;                             // 0x0(0x10)
	Struct StringAssetReference                                  TeamColor;                                         // 0x10(0x10)
	TArray<Int NumTargetsInWave>                                 NumTargetsInWave;                                  // 0x20(0x10)
	TArray<Int NumCaptainsInWave>                                NumCaptainsInWave;                                 // 0x30(0x10)
	float                                                        MinTimeBetweenSpawns;                              // 0x40(0x4)
	float                                                        MaxTimeBetweenSpawns;                              // 0x44(0x4)
	float                                                        MinTimeBetweenWaves;                               // 0x48(0x4)
	float                                                        MaxTimeBetweenWaves;                               // 0x4c(0x4)
	Struct WeightedProbabilityRange                              WavesPerRelocate;                                  // 0x50(0x20)
	Struct WeightedProbabilityRange                              WaveSplitChance;                                   // 0x70(0x20)
	TArray<Float WaveSuicideTime>                                WaveSuicideTime;                                   // 0x90(0x10)
	float                                                        WaveSuicideMinDist;                                // 0xa0(0x4)
	int                                                          NumWavesPerGroup;                                  // 0xa4(0x4)
	int                                                          NumWaveGroups;                                     // 0xa8(0x4)
	int                                                          NumTotalWaves;                                     // 0xac(0x4)
	int                                                          NumTargetsPerWaveGroup;                            // 0xb0(0x4)
	int                                                          NumCaptainsPerWaveGroup;                           // 0xb4(0x4)
	TArray<class Class*>                                         AICombatDialogue;                                  // 0xb8(0x10)
};


// Size 0x20
struct AIEncounterWave
{
public:
	TArray<struct Specifications>                                Specifications;                                    // 0x0(0x10)
	TArray<Int SpecificationSpawnOrder>                          SpecificationSpawnOrder;                           // 0x10(0x10)
};


// Size 0xd0
struct AIEncounterSpecification
{
public:
	Class AthenaAIControllerParamsDataAsset*                     Skillset;                                          // 0x20(0x8)
	Class LoadoutAsset*                                          Loadout;                                           // 0x28(0x8)
	Class AthenaAIFormDataAsset*                                 Form;                                              // 0x30(0x8)
	Class AthenaAIAmmoDataAsset*                                 Ammo;                                              // 0x38(0x8)
	class                                                        AIClass;                                           // 0x40(0x8)
	Class AIPartsCategory*                                       PartsCategory;                                     // 0x48(0x8)
	int                                                          TeamColorIndex;                                    // 0x70(0x4)
	struct FName                                                 DioramaRole;                                       // 0x74(0x8)
	char                                                         pad0x4_KC0QX[0x4];                                 // 0x7c(0x4)
	Struct FText                                                 LocalisableName;                                   // 0x80(0x38)
	Struct EncounterParams                                       EncounterTrackingParams;                           // 0xb8(0xc)
	int                                                          MinPlayersToEnable;                                // 0xc4(0x4)
	bool                                                         ShowNameplate;                                     // 0xc8(0x1)
	bool                                                         IsUsingDialogue;                                   // 0xc9(0x1)
};


// Size 0x10
struct EventAIStartedDeadActionState
{
public:
	byte                                                         DeathReason;                                       // 0x0(0x1)
	char                                                         pad0x7_G3XN9[0x7];                                 // 0x1(0x7)
	Class Actor*                                                 Killer;                                            // 0x8(0x8)
};


// Size 0x10
struct EventPawnFinishedDying
{
public:
	Class Pawn*                                                  AIPawn;                                            // 0x0(0x8)
	byte                                                         DeathType;                                         // 0x8(0x1)
};


// Size 0x18
struct EventPawnStartedDying
{
public:
	Class Pawn*                                                  AIPawn;                                            // 0x0(0x8)
	byte                                                         DeathType;                                         // 0x8(0x1)
	char                                                         pad0x7_CGZHK[0x7];                                 // 0x9(0x7)
	Class Actor*                                                 Instigator;                                        // 0x10(0x8)
};


// Size 0x1
struct EventOwnedPawnFinishedDying
{
public:
	byte                                                         DeathType;                                         // 0x0(0x1)
};


// Size 0x10
struct EventOwnedPawnStartedDying
{
public:
	byte                                                         DeathType;                                         // 0x0(0x1)
	char                                                         pad0x7_HTWCU[0x7];                                 // 0x1(0x7)
	Class Actor*                                                 Instigator;                                        // 0x8(0x8)
};


// Size 0x50
struct LimitedInteractbaleAICreatureSplineInteractionParams
{
public:
	class                                                        PressedNotificationInputId;                        // 0x0(0x8)
	class                                                        ReleasedNotificationInputId;                       // 0x8(0x8)
	Struct FText                                                 DescriptorVerb;                                    // 0x10(0x38)
	float                                                        HoldTime;                                          // 0x48(0x4)
};


// Size 0x1
struct StartCreatureSplineMovementEvent
{
public:
};


// Size 0x30
struct AthenaAIItemParamValue
{
public:
	struct FName                                                 ParamName;                                         // 0x20(0x8)
	float                                                        Value;                                             // 0x28(0x4)
};


// Size 0x10
struct AthenaAIAbilityPlayerBasedRanges
{
public:
	TArray<struct AbilityRanges>                                 AbilityRanges;                                     // 0x0(0x10)
};


// Size 0x38
struct AthenaAIAbilityPlayerBasedRange
{
public:
	int                                                          MaxPlayers;                                        // 0x0(0x4)
	char                                                         pad0x4_A0UBP[0x4];                                 // 0x4(0x4)
	Struct WeightedProbabilityRangeOfRanges                      WeightedArray;                                     // 0x8(0x30)
};


// Size 0x20
struct AIAbilityContinuousCooldownParameterData
{
public:
	Struct AthenaAIAbilityPlayerBasedRanges                      InitialCooldown;                                   // 0x0(0x10)
	Struct AthenaAIAbilityPlayerBasedRanges                      CooldownBetweenActivations;                        // 0x10(0x10)
};


// Size 0x14
struct AthenaAIControllerSenseSettings
{
public:
	bool                                                         EnableSight;                                       // 0x0(0x1)
	bool                                                         EnableHearing;                                     // 0x1(0x1)
	bool                                                         EnableDamage;                                      // 0x2(0x1)
	char                                                         pad0x1_IYL3G[0x1];                                 // 0x3(0x1)
	float                                                        SightRadius;                                       // 0x4(0x4)
	float                                                        LoseSightRadius;                                   // 0x8(0x4)
	float                                                        PeripheralVisionAngleDegrees;                      // 0xc(0x4)
	float                                                        MaxHearingRange;                                   // 0x10(0x4)
};


// Size 0x14
struct AthenaAIControllerDamageTargetScoreFromPerceivedTarget
{
public:
	float                                                        MinDamageTargetScore;                              // 0x0(0x4)
	float                                                        MaxDamageTargetScore;                              // 0x4(0x4)
	float                                                        DamageForMinDamageTargetScore;                     // 0x8(0x4)
	float                                                        DamageForMaxDamageTargetScore;                     // 0xc(0x4)
	float                                                        RateToDecayDamagedFromTarget;                      // 0x10(0x4)
};


// Size 0xc
struct AthenaAIControllerHealthCustomisation
{
public:
	bool                                                         OverrideMaxHealth;                                 // 0x0(0x1)
	bool                                                         OverrideMaxHealthWithMinMax;                       // 0x1(0x1)
	char                                                         pad0x2_MZYGL[0x2];                                 // 0x2(0x2)
	float                                                        MinHealth;                                         // 0x4(0x4)
	float                                                        MaxHealth;                                         // 0x8(0x4)
};


// Size 0x20
struct AthenaAIControllerSenseSettingOverride
{
public:
	class                                                        AIStrategy;                                        // 0x0(0x8)
	Struct AthenaAIControllerSenseSettings                       SenseSettings;                                     // 0x8(0x14)
	bool                                                         ClearPerceivedData;                                // 0x1c(0x1)
};


// Size 0x38
struct AthenaAIControllerWeightedRangesParamValue
{
public:
	struct FName                                                 ParamName;                                         // 0x0(0x8)
	Struct WeightedProbabilityRangeOfRanges                      Value;                                             // 0x8(0x30)
};


// Size 0x20
struct AthenaAIControllerFeatureToggledParams
{
public:
	Struct FeatureFlag                                           Feature;                                           // 0x0(0xc)
	char                                                         pad0x4_GNA90[0x4];                                 // 0xc(0x4)
	TArray<struct Params>                                        Params;                                            // 0x10(0x10)
};


// Size 0xc
struct AthenaAIControllerParamValue
{
public:
	struct FName                                                 ParamName;                                         // 0x0(0x8)
	float                                                        Value;                                             // 0x8(0x4)
};


// Size 0x20
struct AthenaAISharedControllerParamToggledValues
{
public:
	TArray<class AthenaAIControllerSharedParamValuesDataAsset*>  Assets;                                            // 0x0(0x10)
	Struct FeatureFlag                                           FeatureName;                                       // 0x10(0xc)
};


// Size 0x10
struct AIAbilityFollowUp
{
public:
	class                                                        AbilityType;                                       // 0x0(0x8)
	float                                                        Chance;                                            // 0x8(0x4)
};


// Size 0x8
struct MinMaxAbilityRange
{
public:
	float                                                        MinDistanceToTarget;                               // 0x0(0x4)
	float                                                        MaxDistanceToTarget;                               // 0x4(0x4)
};


// Size 0x18
struct AIStrategyMovementProperties
{
public:
	class                                                        AIStrategy;                                        // 0x0(0x8)
	float                                                        MaxSpeedAmp;                                       // 0x8(0x4)
	float                                                        MaxAccelAmp;                                       // 0xc(0x4)
	float                                                        OverrideRVOAvoidanceRadius;                        // 0x10(0x4)
	float                                                        OverrideBlendSpeed;                                // 0x14(0x4)
};


// Size 0x10
struct AthenaAIAbilityDamageStage
{
public:
	TArray<class AthenaAIAbilityStageParams*>                    AbilitiesInStage;                                  // 0x0(0x10)
};


// Size 0x10
struct AthenaAICharacterControllerSpawnItemDescForItemCategory
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	class                                                        ItemDesc;                                          // 0x8(0x8)
};


// Size 0x10
struct AthenaAICharacterControllerWeightedAmmoType
{
public:
	class                                                        AmmoType;                                          // 0x0(0x8)
	float                                                        Weighting;                                         // 0x8(0x4)
};


// Size 0x10
struct AthenaAICharacterCannonTargetingParams
{
public:
	TArray<struct Params>                                        Params;                                            // 0x0(0x10)
};


// Size 0xc
struct AthenaAICharacterCannonTarget
{
public:
	float                                                        Weight;                                            // 0x0(0x4)
	struct FName                                                 TargetLocation;                                    // 0x4(0x8)
};


// Size 0x10
struct AthenaAICharacterControllerItemCategoryProjectileEffectivenessProperties
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	Class CurveFloat*                                            DistanceInMToProjectileHitChanceCurve;             // 0x8(0x8)
};


// Size 0x18
struct AthenaAICharacterControllerItemCategoryNamedParams
{
public:
	class                                                        ItemCategory;                                      // 0x0(0x8)
	TArray<struct NamedControllerParams>                         NamedControllerParams;                             // 0x8(0x10)
};


// Size 0x18
struct AIAmmoRankMapping
{
public:
	Class AthenaAIAmmoDataAsset*                                 Ammo;                                              // 0x0(0x8)
	TArray<Float Weights>                                        Weights;                                           // 0x8(0x10)
};


// Size 0x2c
struct AIDebugVisualisationCone
{
public:
	Struct Vector                                                Origin;                                            // 0x0(0xc)
	Struct Vector                                                Direction;                                         // 0xc(0xc)
	float                                                        Length;                                            // 0x18(0x4)
	float                                                        AngleWidthRadians;                                 // 0x1c(0x4)
	float                                                        AngleHeightRadians;                                // 0x20(0x4)
	float                                                        LifeTime;                                          // 0x24(0x4)
	byte                                                         Colour;                                            // 0x28(0x1)
};


// Size 0x18
struct AIDebugVisualisationSphere
{
public:
	Struct Vector                                                Centre;                                            // 0x0(0xc)
	float                                                        Radius;                                            // 0xc(0x4)
	float                                                        LifeTime;                                          // 0x10(0x4)
	byte                                                         Colour;                                            // 0x14(0x1)
};


// Size 0x24
struct AIDebugVisualisationCylinder
{
public:
	Struct Vector                                                To;                                                // 0x0(0xc)
	Struct Vector                                                From;                                              // 0xc(0xc)
	float                                                        Radius;                                            // 0x18(0x4)
	float                                                        LifeTime;                                          // 0x1c(0x4)
	byte                                                         Colour;                                            // 0x20(0x1)
};


// Size 0x40
struct AIDebugVisualisationBox
{
public:
	Struct Vector                                                Centre;                                            // 0x0(0xc)
	Struct Vector                                                Extents;                                           // 0xc(0xc)
	char                                                         pad0x8_ENJJH[0x8];                                 // 0x18(0x8)
	Struct Quat                                                  Rotation;                                          // 0x20(0x10)
	float                                                        LifeTime;                                          // 0x30(0x4)
	byte                                                         Colour;                                            // 0x34(0x1)
};


// Size 0x20
struct AIDebugVisualisationLine
{
public:
	Struct Vector                                                From;                                              // 0x0(0xc)
	Struct Vector                                                To;                                                // 0xc(0xc)
	float                                                        LifeTime;                                          // 0x18(0x4)
	byte                                                         Colour;                                            // 0x1c(0x1)
};


// Size 0x20
struct TargetItemDropProgressionPair
{
public:
	Struct StringAssetReference                                  CrewItemSpawn;                                     // 0x0(0x10)
	Struct StringAssetReference                                  CaptainItemSpawn;                                  // 0x10(0x10)
};


// Size 0x20
struct TargetSkillsetProgressionPair
{
public:
	Struct StringAssetReference                                  CrewSkillset;                                      // 0x0(0x10)
	Struct StringAssetReference                                  CaptainSkillset;                                   // 0x10(0x10)
};


// Size 0x28
struct AIFormVarietyEntry
{
public:
	Struct StringAssetReference                                  Form;                                              // 0x0(0x10)
	float                                                        Weight;                                            // 0x10(0x4)
	int                                                          MaxPerEncounter;                                   // 0x14(0x4)
	TArray<struct Individuals>                                   Individuals;                                       // 0x18(0x10)
};


// Size 0x20
struct AIIndividualVarietyEntry
{
public:
	TArray<struct Loadouts>                                      Loadouts;                                          // 0x0(0x10)
	int                                                          RankOffset;                                        // 0x10(0x4)
	float                                                        Weight;                                            // 0x14(0x4)
	int                                                          MaxPerEncounter;                                   // 0x18(0x4)
};


// Size 0x18
struct AIEncounterGenerationRecipeFeatureBasedRankOrderList
{
public:
	struct FName                                                 FeatureName;                                       // 0x0(0x8)
	TArray<class AIEncounterGenerationRecipe*>                   Recipes;                                           // 0x8(0x10)
};


// Size 0x18
struct AthenaAIFormComponentVfxCustomisation
{
public:
	class                                                        VfxCustomisationType;                              // 0x0(0x8)
	bool                                                         VfxEnabled;                                        // 0x8(0x1)
	char                                                         pad0x7_68MD3[0x7];                                 // 0x9(0x7)
	Class Object*                                                VfxTemplate;                                       // 0x10(0x8)
};


// Size 0x10
struct AIFormDamageResponse
{
public:
	class                                                        DamagerType;                                       // 0x0(0x8)
	float                                                        DamageMultiplier;                                  // 0x8(0x4)
	byte                                                         HitReaction;                                       // 0xc(0x1)
	bool                                                         IsKnockbackDisabled;                               // 0xd(0x1)
	bool                                                         IsStunDisabled;                                    // 0xe(0x1)
};


// Size 0x18
struct AIFormRankMapping
{
public:
	Class AthenaAIFormDataAsset*                                 Form;                                              // 0x0(0x8)
	TArray<Float Weights>                                        Weights;                                           // 0x8(0x10)
};


// Size 0x18
struct AIPartsCategoryFormMapping
{
public:
	Class AthenaAIFormDataAsset*                                 Form;                                              // 0x0(0x8)
	TArray<struct CategoryMappings>                              CategoryMappings;                                  // 0x8(0x10)
};


// Size 0x10
struct AIPartsCategoryMapping
{
public:
	class                                                        ClassId;                                           // 0x0(0x8)
	Class AIPartsCategory*                                       PartsCategory;                                     // 0x8(0x8)
};


// Size 0x18
struct AISkillsetRankMapping
{
public:
	Class AthenaAIControllerParamsDataAsset*                     Skillset;                                          // 0x0(0x8)
	TArray<Float Weights>                                        Weights;                                           // 0x8(0x10)
};


// Size 0x10
struct FeatureToggledAIEncounterSpecificSkillSetCollection
{
public:
	TArray<struct ToggledSkillsets>                              ToggledSkillsets;                                  // 0x0(0x10)
};


// Size 0x20
struct FeatureToggledAIEncounterSpecificSkillSet
{
public:
	Struct StringAssetReference                                  ToggledSpecificSkillset;                           // 0x0(0x10)
	Struct FeatureFlag                                           Feature;                                           // 0x10(0xc)
};


// Size 0x30
struct AIDropSpawnerRankMapping
{
public:
	TArray<Float Weights>                                        Weights;                                           // 0x20(0x10)
};


// Size 0x18
struct AILoadoutRankMapping
{
public:
	Class LoadoutAsset*                                          Loadout;                                           // 0x0(0x8)
	TArray<Float Weights>                                        Weights;                                           // 0x8(0x10)
};


// Size 0x20
struct CustomPlayersAITrackerData
{
public:
	Class AIPlayerTracker*                                       Tracker;                                           // 0x0(0x8)
};


// Size 0x58
struct AITypeData
{
public:
	struct FName                                                 AITypeName;                                        // 0x0(0x8)
	Struct StringClassReference                                  AIPawnClass;                                       // 0x8(0x10)
	Struct StringAssetReference                                  DefaultDebugSkillset;                              // 0x18(0x10)
	Struct StringAssetReference                                  DefaultDebugLoadout;                               // 0x28(0x10)
	class                                                        DefaultDebugAIClassId;                             // 0x38(0x8)
	bool                                                         RequireNavMesh;                                    // 0x40(0x1)
	char                                                         pad0x3_FHL5V[0x3];                                 // 0x41(0x3)
	int                                                          AIRegionCostUnits;                                 // 0x44(0x4)
	int                                                          AIWorldCostUnits;                                  // 0x48(0x4)
	struct FName                                                 FeatureToggle;                                     // 0x4c(0x8)
};


// Size 0x48
struct AISpawnTypeParamsCollection
{
public:
	TArray<struct SpawnParams>                                   SpawnParams;                                       // 0x8(0x10)
};


// Size 0x128
struct AIPersistentSpawnerWave
{
public:
	bool                                                         CacheHealthOnDespawn;                              // 0x100(0x1)
	char                                                         pad0x7_W6EUE[0x7];                                 // 0x101(0x7)
	class                                                        AITypeToCache;                                     // 0x108(0x8)
};


// Size 0x100
struct AISpawnerWave
{
public:
	float                                                        SpawnChance;                                       // 0x0(0x4)
	char                                                         pad0x4_V4BYX[0x4];                                 // 0x4(0x4)
	Struct WeightedProbabilityRange                              NumOfSpawnsInWave;                                 // 0x8(0x20)
	Struct AISpawnTypeParamsCollection                           SpawnTypeParamsOverride;                           // 0x28(0x48)
	Struct WeightedProbabilityRangeOfRanges                      DelayBeforeWave;                                   // 0x70(0x30)
	Struct WeightedProbabilityRangeOfRanges                      DelayBetweenSpawns;                                // 0xa0(0x30)
	Struct WeightedProbabilityRangeOfRanges                      DelayBeforeNextWaveIfSuccessful;                   // 0xd0(0x30)
};


// Size 0x18
struct AISpawnWaveSequenceRankMapping
{
public:
	Class AISpawnWaveSequence*                                   SpawnWaveSequence;                                 // 0x0(0x8)
	TArray<Float Weights>                                        Weights;                                           // 0x8(0x10)
};


// Size 0x18
struct AIWeightedProbabilityRangeOfRangesRankMapping
{
public:
	Class AIWeightedProbabilityRangeOfRangesAsset*               RangeOfRanges;                                     // 0x0(0x8)
	TArray<Float Weights>                                        Weights;                                           // 0x8(0x10)
};


// Size 0x28
struct AIEncounterAndWaveSettingsOverride
{
public:
	Class AIEncounterSettings*                                   EncounterSettings;                                 // 0x0(0x8)
	Class AISpawnWaveSequenceRankProgression*                    SpawnWaveProgression;                              // 0x8(0x8)
	float                                                        Chance;                                            // 0x10(0x4)
	struct FName                                                 FeatureToggle;                                     // 0x14(0x8)
	Struct StoryFlag                                             RequiredStory;                                     // 0x1c(0x8)
	bool                                                         UseStoryAndNotFeatureToggle;                       // 0x24(0x1)
};


// Size 0x10
struct AdditionalSpawnerBehaviour
{
public:
	Class SpawnerBehaviourStrategy*                              BehaviourStrategy;                                 // 0x0(0x8)
};


// Size 0x10
struct AISpawnOverride
{
public:
	Struct StringAssetReference                                  FormOverride;                                      // 0x0(0x10)
};


// Size 0x18
struct ConditionalAISpawnOverride
{
public:
	Class AISpawnOverrideCondition*                              Condition;                                         // 0x0(0x8)
	Struct AISpawnOverride                                       Override;                                          // 0x8(0x10)
};


// Size 0x8
struct AISpawnerArchive
{
public:
};


// Size 0x38
struct AISpawnContextIdEncounterSettingsPair
{
public:
	TArray<class Class*>                                         SpawnContexts;                                     // 0x0(0x10)
	bool                                                         DisableSpawning;                                   // 0x10(0x1)
	char                                                         pad0x7_Q0CQX[0x7];                                 // 0x11(0x7)
	Class AIEncounterSettings*                                   EncounterSettings;                                 // 0x18(0x8)
	Class AISpawnWaveSequenceRankProgression*                    SpawnWaveProgression;                              // 0x20(0x8)
	TArray<struct EncounterAndWaveSettingsOverride>              EncounterAndWaveSettingsOverride;                  // 0x28(0x10)
};


// Size 0x28
struct AIExclusionZone
{
public:
	Struct Guid                                                  Id;                                                // 0x0(0x10)
	Struct Vector                                                Location;                                          // 0x10(0xc)
	float                                                        RadiusSquared;                                     // 0x1c(0x4)
	float                                                        Radius;                                            // 0x20(0x4)
	float                                                        Height;                                            // 0x24(0x4)
};


// Size 0x10
struct AICountTelemetryEvent
{
public:
	int                                                          NumTotalSpawns;                                    // 0x0(0x4)
	int                                                          CurrentTotalWorldAICostUnits;                      // 0x4(0x4)
	int                                                          NumActiveRegions;                                  // 0x8(0x4)
	int                                                          NumPlayers;                                        // 0xc(0x4)
};


// Size 0xc
struct AIPartIdNumVariantInfo
{
public:
	struct FName                                                 AIPartId;                                          // 0x0(0x8)
	int                                                          NumVariants;                                       // 0x8(0x4)
};


// Size 0x1
struct EventAIPartsRetrievalComponentBeforeBeginLoad
{
public:
};


// Size 0x18
struct ReplicatedAIPartsData
{
public:
	Class AIPartsCategory*                                       PartsCategory;                                     // 0x0(0x8)
	Struct AIPartId                                              AIPartId;                                          // 0x8(0x8)
	int                                                          MeshIndex;                                         // 0x10(0x4)
	int                                                          TeamColorIndex;                                    // 0x14(0x4)
};


// Size 0x14
struct AIPerCrewSpawnerStoryBasedRespawnSettings
{
public:
	Struct AIPerCrewSpawnerRespawnSettings                       RespawnSettings;                                   // 0x0(0xc)
	Struct StoryFlag                                             Story;                                             // 0xc(0x8)
};


// Size 0xc
struct AIPerCrewSpawnerRespawnSettings
{
public:
	float                                                        MinRespawnTimeInterval;                            // 0x0(0x4)
	float                                                        MaxRespawnTimeInterval;                            // 0x4(0x4)
	float                                                        RespawnChance;                                     // 0x8(0x4)
};


// Size 0x20
struct SpawnLocationGroup
{
public:
	TArray<struct FName>                                         AllowedSpawnTypes;                                 // 0x0(0x10)
	TArray<struct SpawnLocations>                                SpawnLocations;                                    // 0x10(0x10)
};


// Size 0x10
struct AISpawnContextData
{
public:
	struct FName                                                 Name;                                              // 0x0(0x8)
	class                                                        Id;                                                // 0x8(0x8)
};


// Size 0x20
struct AIFixedWavesSpawnerArchive
{
public:
	TArray<Int NumSpawnedPawnsInWaves>                           NumSpawnedPawnsInWaves;                            // 0x8(0x10)
	bool                                                         WavesSpawnedOnSpottedNewTarget;                    // 0x18(0x1)
};


// Size 0x18
struct AIIncrementalWaveSpawnerArchive
{
public:
	Struct Vector                                                LastTargetPosition;                                // 0x8(0xc)
	int                                                          CurrentNumSpawnedPawns;                            // 0x14(0x4)
};


// Size 0x18
struct AIPerCrewSpawnerRespawnUnit
{
public:
};


// Size 0x30
struct AIPerCrewSpawnerCrewUnit
{
public:
	TArray<struct SelectedWaves>                                 SelectedWaves;                                     // 0x20(0x10)
};


// Size 0x38
struct TemporaryPlayerDetailsUnitEntry
{
public:
};


// Size 0x30
struct AIPerPlayerSpawnerPlayerDetailsUnit
{
public:
};


// Size 0x20
struct AICustomClassIdNameOverrides
{
public:
	TArray<class Class*>                                         ClassIds;                                          // 0x0(0x10)
	TArray<struct FText>                                         Names;                                             // 0x10(0x10)
};


// Size 0x40
struct AICustomNameTitleMapping
{
public:
	class                                                        AIClassId;                                         // 0x0(0x8)
	Struct FText                                                 Title;                                             // 0x8(0x38)
};


// Size 0x10
struct AIProgressiveWavesSpawnerArchive
{
public:
	int                                                          CurrentWaveIndex;                                  // 0x8(0x4)
};


// Size 0x108
struct EscalatingWave
{
public:
	int                                                          WaveNumber;                                        // 0x0(0x4)
	char                                                         pad0x4_2GZJU[0x4];                                 // 0x4(0x4)
	Struct AISpawnerWave                                         SpawnedWave;                                       // 0x8(0x100)
};


// Size 0x34
struct AITargetInfo
{
public:
	Struct AITargetBounds                                        Bounds;                                            // 0x0(0x18)
	Struct Vector                                                TargetPos;                                         // 0x18(0xc)
	Struct Vector                                                TargetVelocity;                                    // 0x24(0xc)
	float                                                        TargetYaw;                                         // 0x30(0x4)
};


// Size 0x18
struct AITargetBounds
{
public:
	Struct Vector                                                Offset;                                            // 0x0(0xc)
	Struct Vector                                                Extents;                                           // 0xc(0xc)
};


// Size 0xc
struct PerDepthSpawnChance
{
public:
	float                                                        DepthUpperBound;                                   // 0x0(0x4)
	float                                                        DepthLowerBound;                                   // 0x4(0x4)
	float                                                        ChanceToSpawn;                                     // 0x8(0x4)
};


// Size 0x20
struct PlayerInWaterData
{
public:
};


// Size 0x28
struct SirenEncounterData
{
public:
	Class World*                                                 GameWorld;                                         // 0x0(0x8)
	Class AIPerPlayerSpawner*                                    SirenSpawner;                                      // 0x8(0x8)
	Class SimpleAIRegion*                                        AIRegion;                                          // 0x10(0x8)
	Class AIProximityPlayerTracker*                              ProximityPlayerTracker;                            // 0x18(0x8)
	float                                                        ShutdownTime;                                      // 0x20(0x4)
	byte                                                         SirenEncounterState;                               // 0x24(0x1)
};


// Size 0xc
struct ChanceForSharksToBlockSirenEncounterData
{
public:
	int                                                          NumberOfSharks;                                    // 0x0(0x4)
	float                                                        ChanceToSpawn;                                     // 0x4(0x4)
	float                                                        RadiusToCheck;                                     // 0x8(0x4)
};


// Size 0x8
struct MinMaxBurrowAbility
{
public:
	float                                                        MinValue;                                          // 0x0(0x4)
	float                                                        MaxValue;                                          // 0x4(0x4)
};


// Size 0x18
struct WeightedAmmoTypeRange
{
public:
	float                                                        MinRange;                                          // 0x0(0x4)
	char                                                         pad0x4_7W51A[0x4];                                 // 0x4(0x4)
	TArray<struct AmmoTypeProbabilities>                         AmmoTypeProbabilities;                             // 0x8(0x10)
};


// Size 0x10
struct WeightedAmmoType
{
public:
	float                                                        ProbabilityAtRange;                                // 0x0(0x4)
	char                                                         pad0x4_Z1G47[0x4];                                 // 0x4(0x4)
	class                                                        AmmoType;                                          // 0x8(0x8)
};


// Size 0x38
struct AthenaAIControllerTargetPickingData
{
public:
	Struct FString                                               TargetName;                                        // 0x0(0x10)
	bool                                                         BestTargetByScore;                                 // 0x10(0x1)
	bool                                                         IsCurrentTargetActor;                              // 0x11(0x1)
	char                                                         pad0x2_E5UR1[0x2];                                 // 0x12(0x2)
	float                                                        TargetScore;                                       // 0x14(0x4)
	float                                                        DistScore;                                         // 0x18(0x4)
	float                                                        FacingScore;                                       // 0x1c(0x4)
	float                                                        TargetWeightScore;                                 // 0x20(0x4)
	float                                                        DamageScore;                                       // 0x24(0x4)
	float                                                        TargetDistance;                                    // 0x28(0x4)
	float                                                        TargetAngle;                                       // 0x2c(0x4)
	int                                                          NumTargeting;                                      // 0x30(0x4)
	float                                                        RecentDamage;                                      // 0x34(0x4)
};


// Size 0x10
struct AIStategyControllerMovementMod
{
public:
	class                                                        AIStrategy;                                        // 0x0(0x8)
	float                                                        OverrideControlRotationInterpSpeed;                // 0x8(0x4)
};


// Size 0x10
struct CarriedItemThreatOverride
{
public:
	class                                                        ItemDesc;                                          // 0x0(0x8)
	float                                                        Threat;                                            // 0x8(0x4)
};


// Size 0x10
struct HearingThreat
{
public:
	struct FName                                                 SoundTag;                                          // 0x0(0x8)
	float                                                        Threat;                                            // 0x8(0x4)
	float                                                        CarrierSpeedThreshold;                             // 0xc(0x4)
};


// Size 0x18
struct AIControllerDynamicBalancingNamedParamMapping
{
public:
	int                                                          MaxCrewStrength;                                   // 0x0(0x4)
	char                                                         pad0x4_IO6TJ[0x4];                                 // 0x4(0x4)
	TArray<struct CrewStrengthDynamicNamedParamOverrides>        CrewStrengthDynamicNamedParamOverrides;            // 0x8(0x10)
};


// Size 0x10
struct AIControllerDynamicBalancingPlayerShipValueDesc
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	int                                                          ShipValue;                                         // 0x8(0x4)
};


// Size 0x18
struct DamageModifierCrewProximityVulnerabilityPairs
{
public:
	int                                                          NumPlayersInRange;                                 // 0x0(0x4)
	float                                                        GlobalDamageMultiplier;                            // 0x4(0x4)
	TArray<struct DamageMultipliers>                             DamageMultipliers;                                 // 0x8(0x10)
};


// Size 0x38
struct BlackboardValueCondition
{
public:
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x0(0x28)
	byte                                                         Comparison;                                        // 0x28(0x1)
	char                                                         pad0x3_97C1E[0x3];                                 // 0x29(0x3)
	float                                                        Value;                                             // 0x2c(0x4)
	bool                                                         OnEntry;                                           // 0x30(0x1)
	bool                                                         OnExit;                                            // 0x31(0x1)
};


// Size 0x58
struct ChanceAndBlackboardKeyPair
{
public:
	Struct AIDataProviderFloatValue                              Chance;                                            // 0x0(0x30)
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x30(0x28)
};


// Size 0x38
struct ConditionalBasedOnBlackboardKey
{
public:
	bool                                                         UseCondition;                                      // 0x0(0x1)
	char                                                         pad0x7_FMJCS[0x7];                                 // 0x1(0x7)
	Struct BlackboardKeySelector                                 BlackboardKey;                                     // 0x8(0x28)
	bool                                                         NegateCondition;                                   // 0x30(0x1)
};


// Size 0x38
struct WeightedAIStrategyChance
{
public:
	class                                                        Strategy;                                          // 0x0(0x8)
	Struct AIDataProviderFloatValue                              WeightedChance;                                    // 0x8(0x30)
};


// Size 0x18
struct AIStrategyVulnerabilityData
{
public:
	class                                                        Strategy;                                          // 0x0(0x8)
	TArray<Byte PreventedHealthChanges>                          PreventedHealthChanges;                            // 0x8(0x10)
};


// Size 0x1
struct EventSporeBreathAIAbilityFinished
{
public:
};


// Size 0x1
struct EventSporeBreathAIAbilityStarted
{
public:
};


// Size 0x8
struct EventAIAbilityStarted
{
public:
	class                                                        AbilityTypeCategory;                               // 0x0(0x8)
};


// Size 0x1
struct EventAIVulnerabilityAbilityEnded
{
public:
};


// Size 0x1
struct EventAIVulnerabilityAbilityStarted
{
public:
};


// Size 0x8
struct EventAIPawnCarrierChange
{
public:
	Class Actor*                                                 Carrier;                                           // 0x0(0x8)
};


// Size 0x1
struct EventAIDebugTextUpdated
{
public:
};


// Size 0x1
struct EventAIControllerUnPossess
{
public:
};


// Size 0x1
struct EventAIKnockbackEnded
{
public:
};


// Size 0x18
struct EventAIKnockbackStarted
{
public:
};


// Size 0x8
struct EventNewAIStrategyBPReadable
{
public:
	class                                                        NewAIStrategy;                                     // 0x0(0x8)
};


// Size 0x8
struct EventNewAIStrategy
{
public:
	class                                                        NewAIStrategy;                                     // 0x0(0x8)
};


// Size 0x1
struct EventPawnRequestDespawn
{
public:
};


// Size 0x8
struct EventPawnRemoveOwnership
{
public:
	Class Pawn*                                                  AIPawn;                                            // 0x0(0x8)
};


// Size 0x1
struct EventOwnedPawnRemoveOwnership
{
public:
};


// Size 0x1
struct EventAIPartRetrievalRequestFailed
{
public:
};


// Size 0x18
struct EventVisualAppearanceSelected
{
public:
	Class AIPartsCategory*                                       PartsCategory;                                     // 0x0(0x8)
	Struct AIPartId                                              AIPartId;                                          // 0x8(0x8)
	int                                                          PartsIndexToUse;                                   // 0x10(0x4)
	int                                                          ColorTextureIndex;                                 // 0x14(0x4)
};


// Size 0x30
struct EventAILoadoutSelected
{
public:
	Struct ItemLoadout                                           Loadout;                                           // 0x0(0x20)
	class                                                        NonStorableItem;                                   // 0x20(0x8)
};


// Size 0x8
struct EventAIAmmoSelected
{
public:
	Class AthenaAIAmmoDataAsset*                                 Ammo;                                              // 0x0(0x8)
};


// Size 0x8
struct EventAIFormSelected
{
public:
	Class AthenaAIFormDataAsset*                                 Form;                                              // 0x0(0x8)
};


// Size 0x1
struct EventAIPawnReadyToConstructDebugText
{
public:
};


// Size 0x50
struct EventOwnedPawnFinishedSpawning
{
public:
	Class Object*                                                AICoordinator;                                     // 0x0(0x8)
	struct FName                                                 Region;                                            // 0x8(0x8)
	Struct Vector                                                SpawnPos;                                          // 0x10(0xc)
	char                                                         pad0x4_E43NT[0x4];                                 // 0x1c(0x4)
	Class Actor*                                                 ActorToPerceiveOnSpawn;                            // 0x20(0x8)
	float                                                        MaximumDistanceToPerceiveOnSpawn;                  // 0x28(0x4)
	char                                                         pad0x4_49Y4J[0x4];                                 // 0x2c(0x4)
	Class AthenaAIControllerParamsDataAsset*                     Skillset;                                          // 0x30(0x8)
	struct FName                                                 HomeRegionZone;                                    // 0x38(0x8)
	Class Object*                                                TargetInteractableOnSpawn;                         // 0x40(0x8)
	Class AISpawner*                                             OwnerAISpawner;                                    // 0x48(0x8)
};


// Size 0x8
struct EventPlayerLeftAISpawnableWater
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x18
struct EventPlayerEnterAISpawnableWater
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x20
struct EventPlayerSetFootUponAISpawnRegion
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x20
struct EventCrewedShipLeftAISpawnRegion
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x20
struct EventCrewedShipEnteredAISpawnRegion
{
public:
	Class Actor*                                                 Ship;                                              // 0x0(0x8)
};


// Size 0x18
struct EventPlayerLeftAISpawnRegion
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x20
struct EventPlayerEnteredAISpawnRegion
{
public:
	Class Actor*                                                 Player;                                            // 0x0(0x8)
};


// Size 0x1
struct EventAllAIProgressiveWavesCompleted
{
public:
};


// Size 0x10
struct EventAIPawnRemovedFromAIRegion
{
public:
	Class Pawn*                                                  AIPawn;                                            // 0x0(0x8)
};


// Size 0x10
struct EventAIPawnAddedToAIRegion
{
public:
	Class Pawn*                                                  AIPawn;                                            // 0x0(0x8)
};


// Size 0x1
struct EventOceanCrawlerAIBuffAudioRequest
{
public:
	bool                                                         IsBuffGiver;                                       // 0x0(0x1)
};


// Size 0x8
struct EventOceanCrawlerAIAbilityAudioRequest
{
public:
	byte                                                         RequestAudioKey;                                   // 0x0(0x1)
	char                                                         pad0x3_HTSFM[0x3];                                 // 0x1(0x3)
	float                                                        AudioDelay;                                        // 0x4(0x4)
};


// Size 0x14
struct AthenaAICharacterParams
{
public:
	float                                                        MissFiringHeightOffset;                            // 0x0(0x4)
	float                                                        MissFiringTargetInFrontOffset;                     // 0x4(0x4)
	float                                                        MinMissFiringTargetInFrontOffset;                  // 0x8(0x4)
	float                                                        MaxMissFiringTargetInFrontOffset;                  // 0xc(0x4)
	float                                                        BufferTimeWhenChangingItems;                       // 0x10(0x4)
};


// Size 0x1
struct EventAthenaAISpawnBeginAnim
{
public:
	byte                                                         SpawnType;                                         // 0x0(0x1)
};


// Size 0x2
struct EventAthenaAISpawnActive
{
public:
	byte                                                         SpawnType;                                         // 0x0(0x1)
	bool                                                         SpawnActive;                                       // 0x1(0x1)
};


// Size 0x40
struct AISpawnerTelemetryEvent
{
public:
	Struct FString                                               AISpawnerType;                                     // 0x0(0x10)
	Struct FString                                               AISpawnerRegion;                                   // 0x10(0x10)
	TArray<Str AISpawnerContexts>                                AISpawnerContexts;                                 // 0x20(0x10)
	int                                                          AISpawnerWaveSpawnNumber;                          // 0x30(0x4)
	float                                                        AISpawnerWaveDelayBefore;                          // 0x34(0x4)
	float                                                        AISpawnerWaveDelayAfter;                           // 0x38(0x4)
};


// Size 0xd8
struct AITelemetryFragmentInput
{
public:
	Struct AIEncounterSpecification                              AIEncounterSpecification;                          // 0x8(0xd0)
};


// Size 0x70
struct AITelemetryFragment
{
public:
	Struct FString                                               AIType;                                            // 0x0(0x10)
	Struct FString                                               AIId;                                              // 0x10(0x10)
	TArray<Str AILoadOut>                                        AILoadOut;                                         // 0x20(0x10)
	Struct FString                                               AIPawnType;                                        // 0x30(0x10)
	Struct FString                                               AISkillset;                                        // 0x40(0x10)
	Struct FString                                               AIForm;                                            // 0x50(0x10)
	Struct FString                                               AIClass;                                           // 0x60(0x10)
};


// Size 0x2c
struct AIHealthChangeTelemetryEvent
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
	float                                                        CurrentHealth;                                     // 0x10(0x4)
	float                                                        PreviousHealth;                                    // 0x14(0x4)
	float                                                        HealthDelta;                                       // 0x18(0x4)
	Struct Vector                                                Position;                                          // 0x1c(0xc)
	byte                                                         Reason;                                            // 0x28(0x1)
};


// Size 0x10
struct PlayerKillAITelemetryEvent
{
public:
	Struct Guid                                                  AttackId;                                          // 0x0(0x10)
};


// Size 0x10
struct AISpawnTelemetryEvent
{
public:
	Struct FString                                               LocationName;                                      // 0x0(0x10)
};


// Size 0x10
struct AIActorTimeout
{
public:
	Class Actor*                                                 AIActor;                                           // 0x0(0x8)
	float                                                        Timer;                                             // 0x8(0x4)
};


// Size 0x20
struct BountySpawnerTargetDesc
{
public:
	byte                                                         Gender;                                            // 0x0(0x1)
	byte                                                         Rank;                                              // 0x1(0x1)
	char                                                         pad0x6_4TNBK[0x6];                                 // 0x2(0x6)
	class                                                        AIClassIdOverride;                                 // 0x8(0x8)
};


// Size 0x70
struct AIBountySpawnerWaveGroup
{
public:
	TArray<struct Waves>                                         Waves;                                             // 0x0(0x10)
	TArray<struct AdditionalCaptainWaves>                        AdditionalCaptainWaves;                            // 0x10(0x10)
	int                                                          NumNonTargetAIToKillToMoveToNextWaveGroup;         // 0x20(0x4)
	char                                                         pad0x4_ZEA6M[0x4];                                 // 0x24(0x4)
	class                                                        CombatDialogueForWaveGroup;                        // 0x28(0x8)
	float                                                        DynamicDelayBeforeStart;                           // 0x30(0x4)
	bool                                                         WantsAdditionalWaveAI;                             // 0x34(0x1)
	char                                                         pad0x3_KBWJZ[0x3];                                 // 0x35(0x3)
	TArray<Int AdditionalWaveAIPerPlayer>                        AdditionalWaveAIPerPlayer;                         // 0x38(0x10)
	TArray<Int AdditionalWaveCaptainAIPerPlayer>                 AdditionalWaveCaptainAIPerPlayer;                  // 0x48(0x10)
	float                                                        WaveMusicIntensity;                                // 0x58(0x4)
};


// Size 0x188
struct AIBountySpawnerWave
{
public:
	bool                                                         IsTarget;                                          // 0x128(0x1)
	bool                                                         IsUsingDialogue;                                   // 0x129(0x1)
	char                                                         pad0x2_I9TSN[0x2];                                 // 0x12a(0x2)
	int                                                          MinPlayersToEnable;                                // 0x12c(0x4)
	byte                                                         Gender;                                            // 0x130(0x1)
	byte                                                         Rank;                                              // 0x131(0x1)
	char                                                         pad0x6_53DIH[0x6];                                 // 0x132(0x6)
	Class PostBountyAIPawnSpawnedAction*                         PostSpawnAction;                                   // 0x138(0x8)
	char                                                         pad0x38_NKBMR[0x38];                               // 0x140(0x38)
	class                                                        BountyReward;                                      // 0x178(0x8)
};


// Size 0x14
struct AIBountySpawnerWaveLocation
{
public:
	Struct Vector                                                Location;                                          // 0x0(0xc)
	float                                                        SelectionWeight;                                   // 0xc(0x4)
	bool                                                         AllowForTarget;                                    // 0x10(0x1)
};


// Size 0x28
struct AIBountySpawnerArchive
{
public:
	int                                                          CurrentWaveIndex;                                  // 0x8(0x4)
	char                                                         pad0x4_0C552[0x4];                                 // 0xc(0x4)
	TArray<struct WaveGroupEntries>                              WaveGroupEntries;                                  // 0x10(0x10)
	float                                                        BountyAudioIntensity;                              // 0x20(0x4)
};


// Size 0x18
struct AIBountySpawnerArchiveWaveGroupEntry
{
public:
	int                                                          NumNonTargetAIKills;                               // 0x0(0x4)
	int                                                          NumTargetAIKills;                                  // 0x4(0x4)
	TArray<struct WaveEntries>                                   WaveEntries;                                       // 0x8(0x10)
};


// Size 0x4
struct AIBountySpawnerArchiveWaveEntry
{
public:
	int                                                          NumPawnsToSpawn;                                   // 0x0(0x4)
};


// Size 0x18
struct BountySpawnerIntensityUpdateNetworkEvent
{
public:
	bool                                                         IsFinalWave;                                       // 0x10(0x1)
	char                                                         pad0x3_3LB8N[0x3];                                 // 0x11(0x3)
	float                                                        Intensity;                                         // 0x14(0x4)
};


// Size 0x30
struct BountySpawnerNewWaveGroupSpawnedEvent
{
public:
	bool                                                         IsFinalWave;                                       // 0x0(0x1)
	char                                                         pad0x3_02V8C[0x3];                                 // 0x1(0x3)
	struct FName                                                 IslandName;                                        // 0x4(0x8)
	char                                                         pad0x4_O50XS[0x4];                                 // 0xc(0x4)
	TArray<struct ParticipatingCrewIds>                          ParticipatingCrewIds;                              // 0x10(0x10)
	int                                                          WaveIndex;                                         // 0x20(0x4)
	int                                                          TotalWaves;                                        // 0x24(0x4)
	Class Actor*                                                 Instigator;                                        // 0x28(0x8)
};


// Size 0x28
struct BountySpawnerAudioChangedNetworkEvent
{
public:
	byte                                                         AudioState;                                        // 0x10(0x1)
	char                                                         pad0x3_SHK8D[0x3];                                 // 0x11(0x3)
	float                                                        Intensity;                                         // 0x14(0x4)
	byte                                                         BountyType;                                        // 0x18(0x1)
	char                                                         pad0x3_T94NL[0x3];                                 // 0x19(0x3)
	Struct Vector                                                BountyPosition;                                    // 0x1c(0xc)
};


// Size 0x68
struct EventAIBountySpawnerTargetKilled
{
public:
	Struct FText                                                 TargetName;                                        // 0x0(0x38)
	Class Actor*                                                 TargetActor;                                       // 0x38(0x8)
	struct FName                                                 RewardId;                                          // 0x40(0x8)
	Class ItemInfo*                                              ItemDropped;                                       // 0x48(0x8)
	byte                                                         Rank;                                              // 0x50(0x1)
	char                                                         pad0x3_60LM7[0x3];                                 // 0x51(0x3)
	Struct Vector                                                DeathLocation;                                     // 0x54(0xc)
	Class Actor*                                                 Instigator;                                        // 0x60(0x8)
};


// Size 0x28
struct EventAIBountySpawnerWaveCompleted
{
public:
	struct FName                                                 IslandName;                                        // 0x0(0x8)
	TArray<struct ParticipatingCrewIds>                          ParticipatingCrewIds;                              // 0x8(0x10)
	int                                                          WaveIndex;                                         // 0x18(0x4)
	int                                                          TotalWaves;                                        // 0x1c(0x4)
	Class Actor*                                                 InstigatorOfFinalAIPawnDeath;                      // 0x20(0x8)
};


// Size 0x110
struct AIFaunaSpawnerWave
{
public:
};


// Size 0x48
struct MerchantCrateMetaWrapper
{
public:
	float                                                        Health;                                            // 0x18(0x4)
	char                                                         pad0x4_NLTZI[0x4];                                 // 0x1c(0x4)
	Struct StringAssetReference                                  FaunaType;                                         // 0x20(0x10)
	float                                                        TimeSpentStarving;                                 // 0x30(0x4)
	float                                                        TimeToStarveInSeconds;                             // 0x34(0x4)
	Struct Vector                                                TempSpawnLocationForActor;                         // 0x38(0xc)
};


// Size 0x1
struct EventFaunaThreatLevelChanged
{
public:
	byte                                                         ThreatLevel;                                       // 0x0(0x1)
};


// Size 0x1
struct EventFaunaAgitationEnded
{
public:
};


// Size 0x8
struct EventFaunaAgitationBegun
{
public:
	Class Actor*                                                 SourceActor;                                       // 0x0(0x8)
};


// Size 0x10
struct EventFaunaPickedup
{
public:
	Class Actor*                                                 Interactor;                                        // 0x0(0x8)
	Class Actor*                                                 PickedUpFauna;                                     // 0x8(0x8)
};


// Size 0x18
struct FaunaSpeciesRequirement
{
public:
	class                                                        Species;                                           // 0x0(0x8)
	TArray<struct Breeds>                                        Breeds;                                            // 0x8(0x10)
};


// Size 0x10
struct FaunaBreedRequirement
{
public:
	class                                                        Breed;                                             // 0x0(0x8)
	int                                                          Count;                                             // 0x8(0x4)
};


// Size 0x8
struct EventSwimRotationModeChanged
{
public:
	byte                                                         NewSwimRotationMode;                               // 0x0(0x1)
	char                                                         pad0x3_S5N4W[0x3];                                 // 0x1(0x3)
	float                                                        NewRotationRate;                                   // 0x4(0x4)
};


// Size 0x30
struct QuestVariableSharkPawn
{
public:
};


// Size 0xc8
struct TinySharkParams
{
public:
	class                                                        TinySharkType;                                     // 0x0(0x8)
	float                                                        TargetRadius;                                      // 0x8(0x4)
	Struct Vector                                                SpawnOffset;                                       // 0xc(0xc)
	class                                                        TinySharkClassID;                                  // 0x78(0x8)
	Struct WeightedProbabilityRangeOfRanges                      LifetimeTimeout;                                   // 0x80(0x30)
	TArray<struct TrackedShipDistanceThresholdByFeatureInPriorityOrder> TrackedShipDistanceThresholdByFeatureInPriorityOrder; // 0xb0(0x10)
	float                                                        RepositionTime;                                    // 0xc0(0x4)
};


// Size 0x10
struct TinySharkTrackedShipDistanceThresholdByFeature
{
public:
	Struct FeatureFlag                                           Feature;                                           // 0x0(0xc)
	float                                                        TrackedShipDistanceThreshold;                      // 0xc(0x4)
};


// Size 0x10
struct ExperienceTracker
{
public:
	Class TaleQuestTinySharkExperienceTracker*                   Tracker;                                           // 0x0(0x8)
};


// Size 0x30
struct QuestVariableTinySharkExperience
{
public:
};


// Size 0x1
struct TinySharkWorldSettingsParams
{
public:
	bool                                                         TinySharkEnabled;                                  // 0x0(0x1)
};


// Size 0x48
struct TinySharkEQSRequest
{
public:
};


// Size 0x28
struct TinySharkServiceParams
{
public:
	Class TinySharkParamsDataAsset*                              TinySharkParams;                                   // 0x0(0x8)
	TArray<struct SpawnForShipData>                              SpawnForShipData;                                  // 0x8(0x10)
	Class EnvQuery*                                              SpawnForShipQuery;                                 // 0x18(0x8)
	float                                                        SpawnFailureTimer;                                 // 0x20(0x4)
};


// Size 0x68
struct TinySharkShipSpawnData
{
public:
	class                                                        ShipSize;                                          // 0x0(0x8)
	Struct WeightedProbabilityRangeOfRanges                      Timer;                                             // 0x8(0x30)
	TArray<Assetclass ControllerParams>                          ControllerParams;                                  // 0x38(0x10)
	Struct WeightedProbabilityRange                              ControllerParamsToUse;                             // 0x48(0x20)
};


// Size 0x10
struct TinySharkSpawnedNetworkEvent
{
public:
};


// Size 0x10
struct TinySharkKilledNetworkEvent
{
public:
};


// Size 0x1
struct EventTinySharkKilled
{
public:
};


// Size 0x58
struct EventTinySharkDamaged
{
public:
	Struct ImpactDamageEvent                                     ImpactDamageEvent;                                 // 0x0(0x58)
};


// Size 0x1
struct EventTinySharkDespawned
{
public:
	byte                                                         DespawnReason;                                     // 0x0(0x1)
};


// Size 0x30
struct EventTinySharkSpawned
{
public:
	Struct FString                                               TinySharkPartTag;                                  // 0x0(0x10)
	Struct Guid                                                  SpawnConfigId;                                     // 0x10(0x10)
	Struct Vector                                                SpawnLocation;                                     // 0x20(0xc)
};


// Size 0x68
struct TinySharkCollidedTelemetryEvent
{
public:
	Struct FString                                               TinySharkId;                                       // 0x0(0x10)
	Struct FString                                               TinySharkName;                                     // 0x10(0x10)
	Struct FString                                               ObstacleName;                                      // 0x20(0x10)
	Struct Vector                                                CollisionLocation;                                 // 0x30(0xc)
	Struct Vector                                                HomeLocation;                                      // 0x3c(0xc)
	Struct FString                                               BehaviourTreeInfo;                                 // 0x48(0x10)
	Struct FString                                               BlackboardInfo;                                    // 0x58(0x10)
};


// Size 0x18
struct TinySharkDespawnTelemetryEvent
{
public:
	Struct FString                                               TinySharkId;                                       // 0x0(0x10)
	byte                                                         TinySharkDespawnReason;                            // 0x10(0x1)
};


// Size 0x40
struct TinySharkSpawnTelemetryEvent
{
public:
	Struct FString                                               TinySharkId;                                       // 0x0(0x10)
	Struct FString                                               TinySharkType;                                     // 0x10(0x10)
	Struct Guid                                                  ConfigSpawnId;                                     // 0x20(0x10)
	Struct Vector                                                SpawnLocation;                                     // 0x30(0xc)
};


// Size 0x1
struct AthenaAIDebugCostDisplay
{
public:
};


// Size 0x1
struct AthenaAIDebugCostData
{
public:
};


// Size 0x28
struct AIDebugSpawnConfiguration
{
public:
	int                                                          NumIslandsToSpawnOn;                               // 0x0(0x4)
	char                                                         pad0x4_ME194[0x4];                                 // 0x4(0x4)
	TArray<struct FName>                                         SpecificRegionsToSpawnOn;                          // 0x8(0x10)
	TArray<struct WhatToSpawn>                                   WhatToSpawn;                                       // 0x18(0x10)
};


// Size 0x10
struct AIDebugSpawnAmount
{
public:
	Class AIEncounterSettings*                                   EncounterSettings;                                 // 0x0(0x8)
	int                                                          NumToSpawn;                                        // 0x8(0x4)
};


// Size 0x48
struct AIDioramaPawn
{
public:
	Class Pawn*                                                  Pawn;                                              // 0x0(0x8)
};


// Size 0x28
struct AIDioramaRoleDesc
{
public:
	struct FName                                                 RoleName;                                          // 0x0(0x8)
	Struct StringAssetReference                                  CustomAnimationAsset;                              // 0x8(0x10)
	struct FName                                                 CustomAnimationToRunOnSpawn;                       // 0x18(0x8)
	class                                                        StartingItemCategory;                              // 0x20(0x8)
};


// Size 0x40
struct AIDioramaLocationSourceComponentData
{
public:
	Struct Transform                                             RelativeTransform;                                 // 0x0(0x30)
	Class Actor*                                                 Interactable;                                      // 0x30(0x8)
};


// Size 0xa0
struct DioramaCategoryEntries
{
public:
};


// Size 0x10
struct IslandDioramas
{
public:
	TArray<Interface Entries>                                    Entries;                                           // 0x0(0x10)
};


// Size 0x10
struct PetTurnRateModifier
{
public:
	class                                                        Strategy;                                          // 0x0(0x8)
	float                                                        TurnRateModifier;                                  // 0x8(0x4)
};


// Size 0x18
struct PetFlyingStrategyProperties
{
public:
	class                                                        Strategy;                                          // 0x0(0x8)
	float                                                        ChanceOfFlying;                                    // 0x8(0x4)
	float                                                        MinFlyingMeshZOffset;                              // 0xc(0x4)
	float                                                        MaxFlyingMeshZOffset;                              // 0x10(0x4)
};


// Size 0xc
struct PetMovementRequest
{
public:
	byte                                                         State;                                             // 0x0(0x1)
	char                                                         pad0x3_CMWYL[0x3];                                 // 0x1(0x3)
	float                                                        TargetMeshZOffset;                                 // 0x4(0x4)
	bool                                                         AdjustingFlight;                                   // 0x8(0x1)
};


// Size 0x10
struct PetLoadedMaterial
{
public:
	Class MaterialInstance*                                      MaterialInstance;                                  // 0x0(0x8)
	bool                                                         CastShadows;                                       // 0x8(0x1)
};


// Size 0x8
struct PetPartSizeMapping
{
public:
	byte                                                         PetSize;                                           // 0x0(0x1)
	char                                                         pad0x3_0BXZ9[0x3];                                 // 0x1(0x3)
	float                                                        PetScale;                                          // 0x4(0x4)
};


// Size 0x18
struct PetMaterialEntry
{
public:
	Struct StringAssetReference                                  MaterialReference;                                 // 0x0(0x10)
	bool                                                         CastShadows;                                       // 0x10(0x1)
};


// Size 0x10
struct PetWieldableReactMapping
{
public:
	class                                                        WieldableType;                                     // 0x0(0x8)
	struct FName                                                 ReactId;                                           // 0x8(0x8)
};


}